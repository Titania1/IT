<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=React&page=5 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:15 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">45</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels &amp; React</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorials4426.html?tag=React" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials9a85.html?product=Beams&amp;tag=React" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Channels &amp; React"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/geolocation-sharing-react-native.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Location<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li></ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a geolocation sharing app with React Native</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Discover how to build a location sharing app with React Native, Google Maps and Facebook.</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/react-websockets.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Making React realtime with websockets</h3><p class="css-k12xad e5jrto45">Build a chat application using React and Pusher. </p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/pwa-react.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime PWA with React</h3><p class="css-k12xad e5jrto45">Build a realtime PWA displaying the price information about cryptocurrencies using React.js and Pusher.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app with React Native</h3><p class="css-k12xad e5jrto45">Benefit from the powerful frameworks like React Native and build a live chat app.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/ride-hailing-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a ride hailing app with React Native</h3><p class="css-k12xad e5jrto45">In this tutorial, we will cover how to build a ride hailing app using React Native and Node.js.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-reactvr.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime React VR app</h3><p class="css-k12xad e5jrto45"> Create a realtime React VR app with multi-user interaction using Pusher. </p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/anonymous-chat-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an anonymous chat app in React Native</h3><p class="css-k12xad e5jrto45">Creating a simple anonymous chat app for Android devices using React Native and Node.js.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/shopping-cart-java-react.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Java<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live UX</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime shopping cart with Java and React</h3><p class="css-k12xad e5jrto45">Discover how to sync your shopping cart between browsers and devices with Java and React.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/activity-feed-react.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an activity feed with React</h3><p class="css-k12xad e5jrto45">Build a simple activity feed with Node.js REST API, Express and Mongoose. </p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials8ec0.html?product=Channels&amp;tag=React&amp;page=4" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials4f4f.html?product=Channels&amp;tag=React&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorialsed72.html?product=Channels&amp;tag=React&amp;page=3" class="css-za1ua3 edg0byb1">3</a><a href="tutorials8ec0.html?product=Channels&amp;tag=React&amp;page=4" class="css-za1ua3 edg0byb1">4</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials7e38.html?product=Channels&amp;tag=React&amp;page=5" class="css-2wakph edg0byb1">5</a><style data-emotion-css="69ho49">.css-69ho49{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#eeeeff;color:#8f87e6;cursor:not-allowed;}.css-69ho49:hover{background:#5c29db;color:white;}.css-69ho49:active{background:#5c29db;}@media all and (min-width:760px){.css-69ho49{font-size:1rem;}}.css-69ho49:hover,.css-69ho49:active{cursor:not-allowed;background:#ebeaef;color:#fffc;}</style><a href="#" disabled="" class="css-69ho49 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":45,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6opHW5cgXmocGsG8OICKui","type":"Entry","createdAt":"2018-02-28T12:31:41.382Z","updatedAt":"2020-06-19T11:12:25.627Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a geolocation sharing app with React Native","url":"geolocation-sharing-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/locSharer","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2018-02-13","description":"Discover how to build a location sharing app with React Native, Google Maps and Facebook.","prerequisite":"A basic understanding of React is needed to follow this tutorial.","content":"In this tutorial we'll be building a location-sharing app with React Native and Pusher. By reading this tutorial, you will learn how to use the geolocation functionality in React Native, and broadcast the geolocation data with Pusher. You will also learn how to integrate Facebook login into the app.\n\n## Prerequisites\n\nYou will need the following in order to follow the tutorial:\n\n- **React Native development environment** - if you don’t have a machine setup for React Native development, be sure to check out the [official docs on how to get started](https://facebook.github.io/react-native/docs/getting-started.html). \n- **Genymotion Emulator** - this is used for testing the app later on. You can actually use your Android smartphone as well, but Genymotion really makes it easy to test geolocation using their GPS emulator.\n- **Pusher app** - you’ll need to create a [Pusher account](https://pusher.com/) in order to use Pusher’s services. A Pusher account is free to create and it even provides you with ample resources for testing the service. Once you have an account, create an app which will be used for connecting to Pusher.\n- **Facebook app** - this is required because we’ll be using Facebook login for the app.\n- **Google project** - this is required because Google Maps is used for the map display. \n\nIn the following sections, I’ll be showing you how to create the Pusher, Facebook, and Google project.\n\n## Creating the Pusher app\n\nOnce you’re logged in to your Pusher account, go to your Dashboard and look for the menu for creating a new app. Set the name of the app to “locSharer”, and select the cluster nearest to your location. Click on the **Create my app** button to create the app. Once the app is created, click on the **App Settings** tab and enable **Client Events**. We need this because we’ll be sending events directly from the app. After that, click on the **App Keys** tab and copy the credentials somewhere where you can easily access it later on. We’ll be needing it later once we start configuring the app.\n\n## Creating the Facebook app\n\nThe minimum requirement for creating a Facebook app is for you to have a [Facebook account](https://www.facebook.com/). Once you’re logged in to your account, go to the [Facebook developers website](https://developers.facebook.com/) and create a new app. Set the **Display Name** to “locSharer”. Once the app is created, add Android as a platform then set the following details:\n- **Google Play Package Name:** com.locsharer\n- **Class Name:** com.locsharer.MainActivity\n\nNext, generate a key hash to be used for development:\n\n```\n    keytool -exportcert -alias androiddebugkey -keystore ~/.android/debug.keystore | openssl sha1 -binary | openssl base64\n```\n\nThe command above generates a 28-character key hash. Paste the value under the **Key Hashes** field and save the changes. This step ensures the authenticity of the interactions between your app and Facebook, thus it’s a required step even for the development environment. You can find more information about this on the [Facebook login documentation for Android](https://developers.facebook.com/docs/facebook-login/android).\n\n## Creating the Google project\n\nJust like Facebook, you need to have a [Google account](https://accounts.google.com/) in order to create a Google project. Once you’re logged in to your Google account, go to the [Google Developer Console](https://console.developers.google.com) and create a project. Set the project name to “locSharer”. Once the project is created, click on **Enable APIs and Services** button. From there, look for **Google Maps Android API** and enable it. Next, click on the **Credentials** tab and create an API key. Once the key is created, it will ask you to restrict access. Set the key restriction to Android. Then you can use the same keystore you used for Facebook:\n\n```\n    keytool -list -v -keystore ~/.android/debug.keystore\n```\n\nThe command above allows you to get the sha1 hash. Look for it, copy the corresponding value and paste it under the **SHA-1 certificate fingerprint** field. Also enter the package name of the app (com.locsharer) then save the changes.\n\n## App overview\n\nAs mentioned earlier, we will be creating a location-sharing app. First the user has to login with their Facebook account:\n\n![geolocation-sharing-react-native-facebook-login](//images.contentful.com/1es3ne0caaid/5dif372kqQoCYuaecSuwOO/81102259c3abfad218e86f1c9f756b07/geolocation-sharing-react-native-facebook-login.png)\n\nOnce logged in, the user can enable location-sharing so that their friends can see their current location when they view them:\n\n![geolocation-sharing-react-native-share-location-request](//images.contentful.com/1es3ne0caaid/37GTp0ialyCyGEiA2WcsgW/6c662f6de2fefc07d62babf76cfdd636/geolocation-sharing-react-native-share-location-app.png)\n\nIf the user has friends who are also using the app, they will be listed below the user’s details. Tapping on a friend will display a map which gets updated based on their current location (but only if they have enabled location sharing). The current location is indicated by a marker: \n\n![geolocation-sharing-react-native-demo](//images.contentful.com/1es3ne0caaid/6C3kc9JER2UkwgkIueuiE4/db32f985e8a0c9125ddbbba360257c50/geolocation-sharing-react-native-demo.png)\n\n## Creating the server\n\nJust like every other Pusher app integration, this app needs a server component as well. The server’s job is to authenticate the requests coming from the app. This allows us to make sure that the request is indeed coming from the app and not anywhere else.\n\nStart by creating a new folder for the server-related files. Inside the folder, run `npm init` to initialize a new project. Simply press enter until it asks you to confirm the project details. Once you get to that, just respond with yes.\n\nNext, install the packages that we’ll be needing:\n\n```\n    npm install --save express body-parser pusher\n```\n\nOnce the packages are installed, create a `server.js` file. Start by including the packages we just installed:\n\n```\n    var express = require('express');\n    var bodyParser = require('body-parser');\n    var Pusher = require('pusher');\n    \n    var app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n```\n\nNext, add the code for connecting to Pusher. The Pusher app credentials are being loaded as environment variables. As you have seen from the code below, we’re not really using a module for loading environment variables from a `.env` file. Later I’ll show you how the values are being supplied.\n\n```\n    var pusher = new Pusher({ \n      appId: process.env.APP_ID, \n      key: process.env.APP_KEY, \n      secret:  process.env.APP_SECRET,\n      cluster: process.env.APP_CLUSTER, \n    });\n```\n\nAdd a route for verifying if the server is really working:\n\n```\n    app.get('/', function(req, res){ \n      res.send('server is running');\n    });\n```\n\nAdd the code for authenticating users that are connecting to your Pusher app. This contains the unique key that we will use later on to check whether the request has indeed come from the app.\n\n```\n    app.post('/pusher/auth', function(req, res) {\n      var socketId = req.body.socket_id;\n      var channel = req.body.channel_name;\n      var auth = pusher.authenticate(socketId, channel);  \n      var app_key = req.body.app_key;\n      if(app_key == process.env.UNIQUE_KEY){\n        var auth = pusher.authenticate(socketId, channel);\n        res.send(auth);\n      }\n      \n      res.send(auth);\n    });\n```\n\nInitiate the server on the port set in the environment variables. Normally this would be served on port 80:\n\n```\n    var port = process.env.PORT || 5000;\n    app.listen(port);\n```\n\n## Deploying the server\n\nThe server needs to be accessible via the internet. One service that allows us to do this for free is [Now](https://zeit.co/now)*.* **You can install Now **globally with the following command:\n\n```\n     npm install -g now\n```\n\nOnce installed, you can now add your Pusher app credentials as a secret. One caveat of Now is that all the files for the deployed projects are available publicly. This means that the values in the `.env` files are publicly available as well. Adding those values as a secret means that it won’t be accessible anywhere.\n\n```\n    now secret add locshare_app_id YOUR_PUSHER_APP_ID\n    now secret add locshare_app_key YOUR_PUSHER_APP_KEY\n    now secret add locshare_app_secret YOUR_PUSHER_APP_SECRET\n    now secret add locshare_app_cluster YOUR_PUSHER_APP_CLUSTER\n    now secret add locshare_unique_key YOUR_UNIQUE_KEY\n```\n\nDon’t forget to replace the values with your actual Pusher app credentials.\n\nOnce that’s done, you can deploy the server:\n\n```\n    now -e APP_ID=@locshare_app_id -e APP_KEY=@locshare_app_key -e APP_SECRET=@locshare_app_secret APP_CLUSTER=@locshare_app_cluster -e UNIQUE_KEY=@locshare_unique_key\n```\n\nWhat the command above does is deploy the server, as well as setting the environment variables using the `-e` option. The secret values that you’ve added earlier are accessed by using the `@` sign. When the process is completed, it should return a URL pointing to the server. Access that in the browser to check whether the server is running or not.\n\n## Creating the App\n\nIt’s now time to create the actual app. Start by generating a new React Native project:\n\n```\n    react-native init LocSharer\n```\n\n### Installing and configuring the dependencies\n\nNext install the dependencies of the app:\n\n```\n    npm install --save prop-types pusher-js react-native-facebook-login react-native-maps react-navigation\n```\n\nHere’s a brief overview of what each package does:\n- **prop-types** - for specifying the intended types of properties passed to components.\n- **pusher-js** - for interacting with Pusher.\n- **react-native-facebook-login** - for implementing Facebook login.\n- **react-native-maps** - for displaying Google Maps and markers.\n- **react-navigation** - for implementing Stack navigation within the app. \n\nAdditional steps are required in order for Facebook login and Google Maps to work. We’ll look at how to do that in the sections to follow.\n\n#### Configuring Facebook login\n\nThe following steps assumes that you have already created a Facebook app. So create one, if you haven’t done so already.\n\nOnce you’ve created a Facebook app, open the `android/settings.gradle` file and add the following to the bottom of the file:\n\n```\n    include ':react-native-facebook-login'\n    project(':react-native-facebook-login').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-facebook-login/android')\n```\n\nNext, open the  `android/app/build.gradle` file and add the following inside the `dependencies`:\n\n```\n    dependencies {\n      ...\n      compile project(':react-native-facebook-login')\n    }\n```\n\nNext, register the React package by opening the `android/app/src/main/java/com/{YOUR PACKAGE NAME}/MainApplication.java` file, and adding the following:\n\n```\n    // top of the file\n    import com.magus.fblogin.FacebookLoginPackage; // \u003c--- add this\n    \n    public class MainApplication extends Application implements ReactApplication {\n    \n      ...\n    \n      @Override\n      protected List\u003cReactPackage\u003e getPackages() {\n          return Arrays.\u003cReactPackage\u003easList(\n              new MainReactPackage(),\n              new FacebookLoginPackage() // \u003c--- add this\n          );\n      }\n    \n      ...\n    }\n```\n\nNext, open the `android/app/src/main/res/values/strings.xml` file and add the details of the Facebook app you created earlier:\n\n```\n    \u003cresources\u003e\n      \u003cstring name=\"app_name\"\u003e{YOUR FACEBOOK APP NAME}\u003c/string\u003e\n      \u003cstring name=\"fb_app_id\"\u003e{YOUR FACEBOOK APP ID}\u003c/string\u003e\n      \u003cstring name=\"fb_login_protocol_scheme\"\u003efb{YOUR FACEBOOK APP ID}\u003c/string\u003e\n    \u003c/resources\u003e\n```\n\nLastly, open the `android/app/src/main/AndroidManifest.xml`  file and add the following:\n\n```\n    \u003cmanifest \n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:tools=\"http://schemas.android.com/tools\" \u003c-- add this\n      package=\"com.your.app.namespace\"\u003e\n    \n      \u003capplication\n        ...\n        \n        \u003c!--add FacebookActivity--\u003e\n        \u003cactivity \n          tools:replace=\"android:theme\"\n          android:name=\"com.facebook.FacebookActivity\"\n          android:configChanges=\"keyboard|keyboardHidden|screenLayout|screenSize|orientation\"\n          android:label=\"@string/app_name\"\n          android:theme=\"@android:style/Theme.Translucent.NoTitleBar\"/\u003e\n      \n        \u003c!--add CustomTabActivity--\u003e\n        \u003cactivity\n          android:name=\"com.facebook.CustomTabActivity\"\n          android:exported=\"true\"\u003e\n          \u003cintent-filter\u003e\n            \u003caction android:name=\"android.intent.action.VIEW\" /\u003e\n            \u003ccategory android:name=\"android.intent.category.DEFAULT\" /\u003e\n            \u003ccategory android:name=\"android.intent.category.BROWSABLE\" /\u003e\n            \u003cdata android:scheme=\"@string/fb_login_protocol_scheme\" /\u003e\n          \u003c/intent-filter\u003e\n        \u003c/activity\u003e\n        \n        \u003c!--add reference to Facebook App ID--\u003e\n        \u003cmeta-data\n          android:name=\"com.facebook.sdk.ApplicationId\"\n          android:value=\"@string/fb_app_id\"/\u003e\n      \n      \u003c/application\u003e\n    \u003c/manifest\u003e\n```\n\n### Configuring React Native maps\n\nThe following steps assumes that you have already created a Google project, and generated an API key.\n\nStart by linking the package resources to your app:\n\n```\n    react-native link react-native-maps\n```\n\nOpen the `android\\app\\src\\main\\AndroidManifest.xml` file and add a reference to your Google project’s API key:\n\n```\n    \u003capplication\u003e\n      ...\n      \u003cmeta-data\n        android:name=\"com.google.android.geo.API_KEY\"\n        android:value=\"YOUR GOOGLE PROJECT'S ANDROID API KEY\"/\u003e\n    \u003c/application\u003e\n```\n\nAlso add the following below the default permissions:\n\n```\n    \u003cuses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/\u003e\n    \u003cuses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" /\u003e\n```\n\n### Coding the app\n\nNow we’re ready to actually code the app. Start by opening the `index.js` file and replace the default contents with the following:\n\n```\n    import { AppRegistry } from 'react-native';\n    import App from './App';\n    \n    AppRegistry.registerComponent('LocSharer', () =\u003e App);\n```\n\nThe entry-point of the app will be the `App` component. So create an `App.js` file and add the following:\n\n```\n    import React, { Component } from 'react';\n    import { StackNavigator } from 'react-navigation';\n    \n    import IndexPage from './src/components/index';\n    import MapPage from './src/components/map_page';\n    \n    const Page = StackNavigator({\n      Home: { screen: IndexPage },\n      MapPage: { screen: MapPage },\n    });\n    \n    export default class App extends Component\u003c{}\u003e {\n    \n      render() {\n        return \u003cPage /\u003e\n      }\n    }\n```\n\nThe code above uses the React Navigation library to create a StackNavigator. This allows the app to transition from one screen to another by placing the new screen on top of the stack. This allows us to easily implement the back functionality since all it has to do is to “pop” the current screen out of the stack in order to go back to the previous screen. To use the StackNavigator, pass in the components to be used as the individual pages. The first one is the initial screen of the app.\n\n### Index page\n\nNext, create a `src` directory and inside create an `index.js` file. This will serve as the initial page of the app. First, import the modules and components that we need:\n\n```\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      Text,\n      View,\n      Switch, // for toggling location sharing on and off\n      DeviceEventEmitter // for emitting/listening custom events\n    } from 'react-native';\n    \n    var { FBLogin } = require('react-native-facebook-login'); // for implementing Facebook login\n    \n    import Pusher from 'pusher-js/react-native'; // for interacting with Pusher\n    \n    import Profile from './profile'; // component for displaying the user's profile\n    import Friends from './friends'; // component for displaying the user's friends\n    \n    import { regionFrom } from '../helpers'; // helper function for constructing the data needed by React Native Maps\n```\n\nCreate the actual component:\n\n```\n    export default class Index extends Component\u003c{}\u003e {\n      // set the title of the screen\n      static navigationOptions = {\n        title: 'LocSharer',\n      };\n    }\n```\n\nIn the constructor, we bind the functions to be used throughout the class as well as setting the default state:\n\n```\n    constructor() {\n    \n      super();\n    \n      this.watchId = null; // unique ID for the geolocation watcher\n      this.pusher = null; // variable for storing the Pusher instance\n      this.user_channel = null; // the Pusher channel for the current user\n      \n      // bind the functions to the class\n      this.onLogin = this.onLogin.bind(this);\n      this.onLoginFound = this.onLoginFound.bind(this);\n      this.onLogout = this.onLogout.bind(this);\n      this.setUser = this.setUser.bind(this);\n      this.setFriends = this.setFriends.bind(this);\n      this.toggleLocationSharing = this.toggleLocationSharing.bind(this);\n      this.onViewLocation = this.onViewLocation.bind(this);\n    \n      this.state = {\n        is_loggedin: false, // whether the user is currently logged in or not\n        is_location_shared: false, // whether the user is currently sharing their location or not\n        user: null, // data for the currently logged in user\n        friends: null, // data for the user's friends\n        subscribed_to: null, // the Facbook user ID of the user's friend whose location is currently being viewed\n        subscribed_friends_count: 0 // number of friends currently subscribed to the user\n      };\n    \n    }\n```\n\nThe `onLogin()` function is executed when the user has logged in with Facebook. Some of the user’s data such as the ID, access token and name are passed in as an argument to this function. It is then used to set the user’s and friends’ data on the state using two functions: \n\n```\n    onLogin(login_data) {\n      this.setUser(login_data);\n      this.setFriends(login_data.credentials.token);\n    }\n```\n\nThe `onLoginFound()` function is executed if an existing Facebook session is already present. The arguments passed in to this function are limited so we have to make a separate API request to get the user’s name:\n\n```\n    onLoginFound(data) {\n    \n      let token = data.credentials.token;\n    \n      fetch(`https://graph.facebook.com/me?access_token=${token}`)\n        .then((response) =\u003e response.json())\n        .then((responseJson) =\u003e {\n        \n          let login_data = {\n            profile: {\n              id: responseJson.id,\n              name: responseJson.name\n            },\n            credentials: {\n              token: token\n            }\n          };\n      \n          this.setUser(login_data);\n        })\n        .catch((error) =\u003e {\n          console.log('something went wrong', error);\n        });\n    \n      this.setFriends(token);\n    \n    }\n```\n\nHere’s the function for setting the data for the current user. All it does is format the login data returned by the Facebook API and set it on the state:\n\n```\n    setUser(login_data) {\n    \n      let user_id = login_data.profile.id;\n      this.setState({\n        is_loggedin: true,\n        user: {\n          id: user_id,\n          access_token: login_data.credentials.token,\n          name: login_data.profile.name,\n          photo: `https://graph.facebook.com/${user_id}/picture?width=100` // the user's profile picture\n        }\n      });\n    \n    }\n```\n\nThe `setFriends()` function makes a request to the Facebook API to get the array of the user’s friends:\n\n```\n    setFriends(token) {\n      fetch(`https://graph.facebook.com/me/friends?access_token=${token}`)\n        .then((response) =\u003e response.json())\n        .then((responseJson) =\u003e {\n          this.setState({\n            friends: responseJson.data\n          });\n        })\n        .catch((error) =\u003e {\n          console.log('something went wrong', error);\n        });\n    }\n```\n\nOnce the user logs out, destroying the session data is already taken care of by the Facebook login package. So all we have to do is unset all the user data that we’ve set earlier:\n\n```\n    onLogout() {\n      this.setState({\n        is_loggedin: false,\n        user: null, \n        friends: null,\n        is_subscribed_to: null\n      });\n    }\n```\n\nNext, initialize Pusher. Be sure to replace the placeholder values with your Pusher app details. We’re also passing in an auth paramater. This is the request data that we were checking earlier in the server code. Simply pass in the same unique string that you’ve used earlier when you added the secret:\n\n```\n    componentWillMount() {\n      this.pusher = new Pusher('YOUR PUSHER APP ID', {\n        authEndpoint: 'YOUR AUTH SERVER AUTH ENDPOINT',\n        cluster: 'YOUR APP CLUSTER',\n        encrypted: true,\n        auth: {\n          params: {\n            app_key: 'YOUR UNIQUE KEY', // \u003c-- should be the same as the unique key you added as a secret using now\n          }\n        }\n      });\n      \n      // add code for listening for the unsubscribe event\n    \n    }\n```\n\nNext, we need a way to unsubscribe from a friend’s channel when the current user is no longer viewing their location on a map. That happens when the user goes back from the map page to the index page. The React Navigation library doesn’t really provide a way to listen for the event when the back button is tapped. That’s why we need a way to emulate that behavior. I’ll let you figure out your own solution. So feel free to skip the following paragraph if you want.\n\nThe solution I came up with is to use the `DeviceEventEmitter` module. Add a listener for the `unsubscribe` event, and once this is triggered, unsubscribe from the friend’s channel. The event is triggered from the map page when the user goes back to the index page:\n\n```\n    DeviceEventEmitter.addListener('unsubscribe', (e) =\u003e {\n      let friend_id = this.state.subscribed_to;\n      this.pusher.unsubscribe(`private-friend-${friend_id}`);\n    });\n```\n\nThe `toggleLocationSharing()` function is executed every time the user toggles the switch for sharing their location. If location sharing is enabled, we subscribe the user to their own channel. This allows them to listen for when one of their friends subscribes to their channel. When this happens, we begin watching the user’s current location and publish the data using Pusher. If the user decides to disable location sharing, we unsubscribe the user from their own channel and stop watching the location. This effectively stops the updating of location from their friends screens:\n\n```\n    toggleLocationSharing() {\n    \n      let is_location_shared = !this.state.is_location_shared;\n    \n      this.setState({\n        is_location_shared: is_location_shared\n      });\n      \n      let user_id = this.state.user.id;\n      if(!is_location_shared){\n        this.pusher.unsubscribe(`private-friend-${user_id}`); // disconnect from their own channel\n        if(this.watchId){\n          navigator.geolocation.clearWatch(this.watchId);\n        }\n      }else{\n        this.user_channel = this.pusher.subscribe(`private-friend-${user_id}`);\n        this.user_channel.bind('client-friend-subscribed', (friend_data) =\u003e {\n      \n          let friends_count = this.state.subscribed_friends_count + 1;\n          this.setState({\n            subscribed_friends_count: friends_count\n          });\n      \n          if(friends_count == 1){ // only begin monitoring the location when the first subscriber subscribes\n            this.watchId = navigator.geolocation.watchPosition(\n              (position) =\u003e {\n                var region = regionFrom(\n                  position.coords.latitude,\n                  position.coords.longitude,\n                  position.coords.accuracy\n                );\n                this.user_channel.trigger('client-location-changed', region); // push the data to subscribers\n              }\n            );\n          }\n        });  \n      \n      }\n    }\n```\n\nThe `onViewLocation()` function is executed when the user taps on any friend on their friend list. This is where we subscribe to the friend’s channel so we can get updates whenever their location changes:\n\n```\n    onViewLocation(friend) {\n    \n      this.friend_channel = this.pusher.subscribe(`private-friend-${friend.id}`);\n      this.friend_channel.bind('pusher:subscription_succeeded', () =\u003e {\n        let username = this.state.user.name;\n        this.friend_channel.trigger('client-friend-subscribed', {\n          name: username\n        });\n      });\n    \n      this.setState({\n        subscribed_to: friend.id\n      });\n      \n      // add code for navigating to the map page\n    }\n```\n\nNext, add the code for navigating to the map page. Pass in the name of the friend and the reference to the friend’s channel as navigation props. This allows those values to be accessed from the map page later on:\n\n```\n    const { navigate } = this.props.navigation;\n    \n    navigate('MapPage', {\n      name: friend.name,\n      friend_channel: this.friend_channel // pass the reference to the friend's channel\n    });\n```\n\nRender the index page. This consists of the user’s profile, their friends list and the Facebook login or logout button:\n\n```\n    render() {\n    \n      return (\n        \u003cView style={styles.page_container}\u003e\n        {\n          this.state.is_loggedin \u0026\u0026\n          \u003cView style={styles.container}\u003e\n          {\n            this.state.user \u0026\u0026\n            \u003cView style={styles.profile_container}\u003e\n              \u003cProfile\n                profile_picture={this.state.user.photo}\n                profile_name={this.state.user.name}\n              /\u003e\n    \n              \u003cText\u003eShare Location\u003c/Text\u003e\n              \u003cSwitch\n                value={this.state.is_location_shared}\n                onValueChange={this.toggleLocationSharing} /\u003e\n            \u003c/View\u003e\n          }\n    \n          {\n            this.state.friends \u0026\u0026\n            \u003cFriends\n              friends={this.state.friends}\n              onViewLocation={this.onViewLocation} /\u003e\n          }\n          \u003c/View\u003e\n        }\n    \n          \u003cFBLogin\n            permissions={[\"email\", \"user_friends\"]}\n            onLogin={this.onLogin}\n            onLoginFound={this.onLoginFound}\n            onLogout={this.onLogout}\n            style={styles.button}\n          /\u003e\n        \u003c/View\u003e\n      );\n    \n    }\n    \n    // add the styles\n    const styles = StyleSheet.create({\n      page_container: {\n        ...StyleSheet.absoluteFillObject,\n        justifyContent: 'flex-end'\n      },\n      container: {\n        flex: 1,\n        padding: 20\n      },\n      profile_container: {\n        flex: 1,\n        alignItems: 'center',\n        marginBottom: 50\n      },\n      button: {\n        paddingBottom: 30,\n        marginBottom: 20,\n        alignSelf: 'center'\n      }\n    });\n```\n\nThe code above is pretty self-explanatory so I won’t go into details what each line does.\n\n### Profile component\n\nThe Profile component is used for displaying the user’s profile picture and name:\n\n```\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      Text,\n      View,\n      Image\n    } from 'react-native';\n    \n    import PropTypes from 'prop-types';\n    \n    class Profile extends Component\u003c{}\u003e {\n    \n      render() {\n    \n        return (\n          \u003cView style={styles.profile_container}\u003e\n            \u003cImage\n              resizeMode={\"contain\"}\n              source={{uri: this.props.profile_picture}}\n              style={styles.profile_photo}\n            /\u003e\n            \u003cText style={styles.profile_name}\u003e{this.props.profile_name}\u003c/Text\u003e\n          \u003c/View\u003e\n        );\n    \n      }\n    \n    }\n    \n    const styles = StyleSheet.create({\n      profile_container: {\n        alignItems: 'center'\n      },\n      profile_photo: {\n        height: 100,\n        width: 100\n      },\n      profile_name: {\n        fontWeight: 'bold',\n        fontSize: 18\n      }\n    });\n    \n    // specify the required props\n    Profile.propTypes = {\n      profile_picture: PropTypes.string.isRequired,\n      profile_name: PropTypes.string.isRequired\n    };\n    \n    export default Profile;\n```\n\n### Friends component\n\nThe Friends component is used for rendering the list of friends:\n\n```\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      Text,\n      View,\n      Image,\n      TouchableHighlight\n    } from 'react-native';\n    \n    import PropTypes from 'prop-types';\n    \n    class Friends extends Component\u003c{}\u003e {\n    \n      renderFriends() {\n        return this.props.friends.map((friend, index) =\u003e {\n        \n          let profile_picture = `https://graph.facebook.com/${friend.id}/picture?width=50`;\n          return (\n            \u003cTouchableHighlight\n              key={index}\n              onPress={this.props.onViewLocation.bind(this, friend)}\n              underlayColor={\"#CCC\"}\u003e\n    \n                \u003cView style={styles.friend_row}\u003e\n                  \u003cImage\n                    resizeMode={\"contain\"}\n                    source={{uri: profile_picture}}\n                    style={styles.profile_photo}\n                  /\u003e\n                  \u003cText style={styles.friend_name}\u003e{friend.name}\u003c/Text\u003e\n                \u003c/View\u003e\n    \n            \u003c/TouchableHighlight\u003e\n          );\n        });\n      }\n      \n      render() {\n      \n        return (\n          \u003cView style={styles.friends_container}\u003e\n            \u003cText style={styles.friends_header_text}\u003eView Friend Location\u003c/Text\u003e\n            {this.renderFriends.call(this)}\n          \u003c/View\u003e\n        );\n      \n      }\n    }\n    \n    // add the styles\n    const styles = StyleSheet.create({\n      friends_container: {\n        flex: 2\n      },\n      friends_header_text: {\n        fontSize: 18,\n        fontWeight: 'bold'\n      },\n      friend_row: {\n        flexDirection: 'row',\n        alignItems: 'center',\n        padding: 10\n      },\n      profile_photo: {\n        width: 50,\n        height: 50,\n        marginRight: 20\n      },\n      friend_name: {\n        fontSize: 15\n      }\n    });\n    \n    // specify the required props\n    Friends.propTypes = {\n      friends: PropTypes.arrayOf(\n        PropTypes.shape({\n          id: PropTypes.string.isRequired,\n          name: PropTypes.string.isRequired\n        })\n      ),\n      onViewLocation: PropTypes.func.isRequired\n    };\n    \n    export default Friends;\n```\n\n### Region helper\n\nEarlier, we’ve used a function called `regionFrom` but we haven’t really created it yet. So go ahead and create a `src/helpers.js` file and add the following:\n\n```\n    export function regionFrom(lat, lon, accuracy) {\n      const oneDegreeOfLongitudeInMeters = 111.32 * 1000;\n      const circumference = (40075 / 360) * 1000;\n    \n      const latDelta = accuracy * (1 / (Math.cos(lat) * circumference));\n      const lonDelta = (accuracy / oneDegreeOfLongitudeInMeters);\n    \n      return {\n        latitude: lat,\n        longitude: lon,\n        latitudeDelta: Math.max(0, latDelta),\n        longitudeDelta: Math.max(0, lonDelta)\n      };\n    } \n```\n\nThis function is used for getting the latitude and longitude delta values needed by the React Native Maps library to display a map.\n\n### Map page\n\nNow we move over to the map page. Create a `src/map_page.js` file and add the following:\n\n```\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      Text,\n      View,\n      DeviceEventEmitter\n    } from 'react-native';\n    \n    import Map from './map';\n    \n    import { regionFrom } from '../helpers';\n    \n    // add code for creating the component\n```\n\nCreate the component, and set the page title based on the parameters passed from the index page:\n\n```\n    export default class MapPage extends Component\u003c{}\u003e {\n    \n      static navigationOptions = ({navigation}) =\u003e ({\n        title: `${navigation.state.params.name}'s Location`,\n      });\n     \n     // add constructor code \n    }\n```\n\nSet a default location in the constructor so that a map is still displayed even if the user is not sharing their location:\n\n```\n    constructor() {\n      super();\n    \n      // set default location\n      let region = {\n        \"latitude\": 35.4625901,\n        \"longitude\": 138.65437569999995,\n        \"latitudeDelta\": 0,\n        \"longitudeDelta\": 0\n      };\n    \n      this.state = {\n        region\n      }\n    }\n```\n\nWhen the user taps on the back button, `componentWillUnmount()` is triggered as the component goes out of view. So this is the perfect time to trigger the `unsubscribe` event to let the index page know that the user has stopped viewing their friends location.\n\n```\n    componentWillUnmount() {\n      DeviceEventEmitter.emit('unsubscribe',  {\n        unsubscribe: true\n      });\n    }\n```\n\nWhen the component is mounted, we want to start listening for when the location changes so we can update the map accordingly:\n\n```\n    componentDidMount() {\n    \n      const { state } = this.props.navigation;\n      state.params.friend_channel.bind('client-location-changed', (data) =\u003e {\n        this.setState({\n          region: data\n        });\n      });\n    \n    }\n```\n\nThe `render()` method simply outputs the Map component:\n\n```\n    render() {\n    \n      return (\n        \u003cView style={styles.map_container}\u003e\n        {\n          this.state.region \u0026\u0026\n          \u003cMap region={this.state.region} /\u003e\n        }\n        \u003c/View\u003e\n      );\n    \n    }\n```\n\nAdd the styles:\n\n```\n    const styles = StyleSheet.create({\n      map_container: {\n        ...StyleSheet.absoluteFillObject,\n        justifyContent: 'flex-end'\n      }\n    });\n```\n\n### Map component\n\nLastly, there’s the Map component which is used to actually render the Google Map. This uses the React Native Maps package that we installed earlier. There are only two components that you need in order to make it work: `MapView` and `MapView.Marker`. `MapView` is used to render the map, and `MapView.Marker` is used to render the marker: \n\n```\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      View\n    } from 'react-native';\n    \n    import MapView from 'react-native-maps';\n    import PropTypes from 'prop-types';\n    \n    class Map extends Component\u003c{}\u003e {\n    \n      render() {\n    \n        return (\n          \u003cView style={styles.map_container}\u003e\n            {\n            this.props.region \u0026\u0026\n              \u003cMapView\n                style={styles.map}\n                region={this.props.region}\n              \u003e\n                \u003cMapView.Marker\n                  coordinate={{\n                    latitude: this.props.region.latitude,\n                    longitude: this.props.region.longitude}}\n                /\u003e\n              \u003c/MapView\u003e\n            }\n          \u003c/View\u003e\n        );\n    \n      }\n    \n    }\n    \n    // add the styles\n    const styles = StyleSheet.create({\n      map_container: {\n        ...StyleSheet.absoluteFillObject,\n        justifyContent: 'flex-end'\n      },\n      map: {\n        ...StyleSheet.absoluteFillObject,\n      },\n    });\n    \n    // specify the required props\n    Map.propTypes = {\n      region: PropTypes.shape({\n        latitude: PropTypes.number.isRequired,\n        longitude: PropTypes.number.isRequired,\n        latitudeDelta: PropTypes.number.isRequired,\n        longitudeDelta: PropTypes.number.isRequired\n      })\n    };\n    \n    export default Map;\n```\n\n## Running the app\n\nYou only need one device and one emulator in order to test the app. First, run the app on your device by executing `react-native run-android`. Once the app is running, disconnect the device and open a Genymotion virtual device. Execute the same command again to run the app on the virtual device. Don’t forget to add another Facebook user, aside from your own Facebook account as a tester or developer under the Facebook app settings. You can do that by clicking on the **Roles** tab and searching for the user in there. Only Facebook users that are added in the app settings can login. This is because the Facebook app is still unpublished. \n\nGenymotion has a built-in functionality for spoofing the GPS coordinates. This will trigger the geolocation functionality in the app everytime the location changes (either by pointing the marker on a different location on the map or searching for another place). That’s why it’s best to use Genymotion for testing the user who is broadcasting their location.\n\nIf you don’t have any device to test on, you can use Genymotion and the Pusher debug console to test the app. All you have to do is figure out the Facebook user ID’s of the two users you’re using for testing. You can do that by using [this tool](https://findmyfbid.in/). Login with your Facebook account on Genymotion then click on one of the other accounts. You can then emulate the location update by manually entering the coordinates on the debug console. You can access the debug console from your Pusher app’s dashboard:\n\n![geolocation-sharing-react-native-debug-console](//images.contentful.com/1es3ne0caaid/6kX3gefojuW4oIKWmgKyWs/72a71d7cf5c4e62e9e500b70e9754772/geolocation-sharing-react-native-debug-console.png)\n\nYou can use the following as initial values:\n- **channel name:** `private-friend-YOUR-ACCOUNTS-FB-ID`\n- **event:** `client-location-changed`\n- **data:** you can use the following data for testing:\n\n```\n    {\n      \"latitude\": 16.6105538,\n      \"longitude\": 120.31429539999999,\n      \"latitudeDelta\": 0,\n      \"longitudeDelta\": 0\n    }\n```\n\nSend the event once that’s done. Sending the event should update the map on the app. You can use a service such as [latlong.net](https://www.latlong.net/) to come up with the coordinates of different places.\n\n\n## Suggestions for improvement\n\nIf you want to improve the app, here are some ideas on what you can add:\n- The number of friends that are currently viewing the user’s location doesn’t actually get updated when someone disconnects from the user’s channel. You can add a listener for when someone disconnects, so that you can update the value as well. \n- The current user doesn’t actually know who are the people that are currently subscribed to their location. For this you can use an alert dialog everytime someone subscribes to the channel. The `client-friend-subscribed` event has already been laid out for this purpose. You can even take the idea further by making use of [Presence channels](https://pusher.com/docs/client_api_guide/client_presence_channels). This comes with an additional feature that allows you to keep track of the people that are subscribed to a specific channel.\n- Add notifications to inform the subscribed users for when the user they’re subscribed to disables location sharing. \n\n\n## Conclusion\nThat’s it! In this tutorial you’ve learned how to create a location-sharing app which uses React Native’s built-in Geolocation library and Pusher to broadcast the data to the user’s friends.","metaTitle":"Build a geolocation sharing app with React Native","metaDescription":"In this tutorial, we will be building a location-sharing app using React Native and you will learn how to use the realtime geolocation functionality."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2txXtpE7lCciQUc4M4GmyS","type":"Entry","createdAt":"2018-02-22T15:04:12.993Z","updatedAt":"2018-02-28T16:55:30.946Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Making React realtime with websockets","url":"react-websockets","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/react-pusher-getting-started","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}}],"reviewDate":"2018-01-15","description":"Build a chat application using React and Pusher. ","prerequisite":"A basic understanding of React and Node.js are needed to follow this tutorial.","content":"Every chat application requires real time functionality. This amongst other benefits allows interaction between users in different location(s). A chat application like this can be built to function on diverse platforms, be it mobile or web applications. \n\nIn this tutorial, I will be showing you how to build a chat application using [React](https://reactjs.org/) and [Pusher](https://pusher.com). This is a very simple application and it comes with functionality which will be showing some of the rich features of Pusher and how you can easily combine it with a modern library like React. \n\nPusher is a platform that allows developers to easily build an application with realtime features as quickly as possible. Pusher specialises in building realtime and scalable infrastructures for developers and is packaged with powerful features like client events, queryable API, Pub/Sub messaging and others.\n\nWe will explore Pusher as we proceed in this tutorial and leverage on the DOM manipulation, event driven and data-binding ability of React.\n\nA basic knowledge of JavaScript and React will be of advantage so as to effectively participate in this tutorial.\n\nA sneak peek into what we will build in this tutorial:\n\n![reactjs-websockets-demo](//images.contentful.com/1es3ne0caaid/1O7NDl5Hv6Wia6AGEoS6mE/b842dd7761b6a525a9005e70daefd227/making-reactjs-realtime-with-websockets-demo.gif)\n\n## Getting Started\n\nFor a hitch-free flow of procedures in this tutorial, we will begin by setting up the required credentials with Pusher. If you don’t have an account, [kindly create one](https://pusher.com/) . Once you are done, go ahead and create a new app from your dashboard. Don’t forget to take note of your `app_id`, `key`, `secret` and `cluster` as you will be required to use them later in this tutorial.\n\n\n## Create React-app\n\nTo quickly scaffold a React app, we will make use of the `create``-react-app` tool. This gives us easy access to the CLI tool that will be used to start building our chat application. \n\nIt is important that you have Node and npm installed on your machine.  Quickly follow this [link](https://nodejs.org/en/) to complete that, if you don’t have it already. To verify if you have Node and npm installed, open up the terminal and run the command below:\n\n```\n    npm -v \n    node -v\n```\n\nThe version for each one will be displayed, if they are installed. The latest versions are fine.\n\n\n## Installation\n\nNow, install create-react-app and also scaffold a new React app with the following commands: \n\n```\n    npm install -g create-react-app\n    \n    create-react-app react-pusher\n```\n\nOnce all the necessary files are installed, change directory into `react-``pusher` and start the application with:\n\n```\n    npm start\n```\n\nBy now, you should have a new tab opened in your default browser:\n\n![reactjs-websockets-first-run](//images.contentful.com/1es3ne0caaid/4pHsFx37gASYMaAyqwcYES/602097101ff4bb5e2b96fc98b3b0945c/making-reactjs-realtime-with-websockets-first-run.png)\n\nWe have successfully set up the front-end of the application, we will return to this very soon. Let’s proceed to setup the server application.\n\n## Node Server\n\nNode.js using the Express web framework will be used as our server application.  The server application, amongst other functions, will provide endpoints to send messages for our chat app so as to ensure interaction between users. There are number of dependencies required for the application server, so let’s install them immediately:\n\n```\n    npm install --save axios body-parser cors express pusher pusher-js\n```\n\nTo configure the entry point of the application, create a file called `server.js` and paste the code below into it:\n\n```\n    const Pusher = require('pusher');\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const cors = require('cors');\n    \n    const app = express();\n    \n    app.use(cors());\n    app.use(bodyParser.urlencoded({extended: false}));\n    app.use(bodyParser.json());\n    const pusher = new Pusher({\n      appId: 'APP_ID',\n      key: 'APP_KEY',\n      secret: 'APP_SECRET',\n      cluster: 'APP_CLUSTER',\n      encrypted: true\n    });\n    app.set('PORT', process.env.PORT || 5000);\n    \n    app.post('/message', (req, res) =\u003e {\n      const payload = req.body;\n      pusher.trigger('chat', 'message', payload);\n      res.send(payload)\n    });\n    \n    app.listen(app.get('PORT'), () =\u003e \n      console.log('Listening at ' + app.get('PORT')))\n```\n\nHere we initialised Pusher with the required credentials and then created an endpoint to process messages from the frontend of our application.\n\n## Building Components\n\nTo define a good application structure and fully see our chat app in action, lets create some components. In React, components can either be stateful or stateless depending on the functionality that it was created for. The common patter is to have state for container components only and pass those states to UI components as props.\n\nCreate components from the terminal with:\n\n```\n    touch ChatList.js ChatBox.js\n```\n\nand lastly their respective stylesheet:\n\n```\n    touch ChatList.css ChatBox.css\n```\n\nEach of the components’ logic need to be created. Lets do that now\n\n\n## ChatBox.js\n\nThis component contains the input field for accepting the users message and also displays a welcome message showing the username passed in from the parent component. Furthermore, `handleTextChange` is also passed from the parent component. This component is exported and configured like:\n\n```\n    import React from \"react\";\n    import './ChatBox.css';\n    export default ({ text, username, handleTextChange }) =\u003e (\n      \u003cdiv\u003e\n        \u003cdiv className=\"row\"\u003e\n        \u003cdiv className=\"col-xs-12\"\u003e\n          \u003cdiv className=\"chat\"\u003e\n            \u003cdiv className=\"col-xs-5 col-xs-offset-3\"\u003e\n              \u003cinput\n                type=\"text\"\n                value={text}\n                placeholder=\"chat here...\"\n                className=\"form-control\"\n                onChange={handleTextChange}\n                onKeyDown={handleTextChange}\n              /\u003e\n            \u003c/div\u003e\n            \u003cdiv className=\"clearfix\"\u003e\u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003ch4 className=\"greetings\"\u003eHello, {username}\u003c/h4\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n    );\n```\n\nThis component above is styled with imported stylesheet `ChatBox.css` :\n\n```\n    .greetings {\n        margin-top: 90px;\n        text-align: center;\n    }\n```\n\n## ChatList.js\n\nThis is responsible for displaying the list of chats inputted by each user. Added to it is the username and messages. This is also implemented as shown below and exported:\n\n```\n    import React from \"react\";\n    import \"./ChatList.css\";\n    import avatar from \"./avatar.png\";\n    export default ({ chats }) =\u003e (\n      \u003cul\u003e\n        {chats.map(chat =\u003e {\n          return (\n            \u003cdiv\u003e\n              \u003cdiv className=\"row show-grid\"\u003e\n                \u003cdiv className=\"col-xs-12\"\u003e\n                  \n                  \u003cdiv className=\"chatMessage\"\u003e\n                    \u003cdiv key={chat.id} className=\"box\"\u003e\n                      \u003cp\u003e\n                        \u003cstrong\u003e{chat.username}\u003c/strong\u003e\n                      \u003c/p\u003e\n                      \u003cp\u003e{chat.message}\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv className=\"imageHolder\"\u003e\n                    \u003cimg src={avatar} className=\"img-responsive avatar\" alt=\"logo\" /\u003e\n                  \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          );\n        })}\n      \u003c/ul\u003e\n    );\n```\n\nAnd the stylesheet `ChatList.css`:\n\n```\n    ul {\n      list-style-type: none;\n    }\n    .chat {\n      margin-top: 50px;\n    }\n    .chatMessage {\n      position: relative;\n      border: 1px solid #ccc;\n      border-radius: 5px;\n      margin: 20px auto;\n      width: 700px;\n      display: table;\n    }\n    .box {\n      background-color: #ffffff;\n      padding: 20px;\n      border-bottom: 1px solid #cccccc;\n    }\n    .imageHolder {\n      width: 50px;\n      height: 50px;\n      position: absolute;\n      top: 20px;\n      right: 50px;\n    }\n```\n\nWe have successfully completed the `ChatBox` and `ChatList` component. As far as the application is concerned, these modules are not yet available to be rendered in the parent app component yet.  To correct this, the `A``pp.js` file needs to be configured.\n\n## Parent Container Component (App.js)\n\nThis is regarded as the parent component. It ensures effective parent-child communication by passing props down to each child component. In App.js, a class named App is used to extend the React Component class and a constructor is defined with its properties and methods. In App.js required node modules and CSS file are imported with:\n\n```\n    import React, { Component } from 'react';\n    import axios from 'axios';\n    import Pusher from 'pusher-js';\n    import ChatList from './ChatList';\n    import ChatBox from './ChatBox';\n    import logo from './logo.svg';\n    import './App.css';\n    ...\n```    \n\nNext a class that extends the Component class imported from the React module is created. Also defined in this class is the state variables. The `super()` method is also called whenever a child class is extended from a parent class. In this case, props is also passed as a parameter. The state variables in the app are created and defined in the constructor like this:\n\n```\n    ...\n    class App extends Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n          text: '',\n          username: '',\n          chats: []\n        };\n      }\n      componentDidMount() {\n        ...\n      }\n      handleTextChange(e) {\n       ...\n      }\n      render() {\n        return (\n          \u003cdiv className=\"App\"\u003e\n           ...\n          \u003c/div\u003e\n        );\n      }\n    }\n    ...\n```\n\nAfter defining the required state of the app, you can start subscribing to the Pusher channel and binding to the events emitted by your server:\n\n```\n     componentDidMount() {\n        const username = window.prompt('Username: ', 'Anonymous');\n        this.setState({ username });\n        const pusher = new Pusher('APP_KEY', {\n          cluster: 'APP_CLUSTER',\n          encrypted: true\n        });\n        const channel = pusher.subscribe('chat');\n        channel.bind('message', data =\u003e {\n          this.setState({ chats: [...this.state.chats, data], test: '' });\n        });\n        this.handleTextChange = this.handleTextChange.bind(this);\n      }\n      \n      handleTextChange(e) {\n        if (e.keyCode === 13) {\n          const payload = {\n            username: this.state.username,\n            message: this.state.text\n          };\n          axios.post('http://localhost:5000/message', payload);\n        } else {\n          this.setState({ text: e.target.value });\n        }\n      }\n```\n\nBringing it all together:\n\n```\n    render() {\n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003cheader className=\"App-header\"\u003e\n              \u003cimg src={logo} className=\"App-logo\" alt=\"logo\" /\u003e\n              \u003ch1 className=\"App-title\"\u003eWelcome to React-Pusher Chat\u003c/h1\u003e\n            \u003c/header\u003e\n            \u003csection\u003e\n              \u003cChatList chats={this.state.chats} /\u003e\n              \u003cChatBox\n                text={this.state.text}\n                username={this.state.username}\n                handleTextChange={this.handleTextChange}\n              /\u003e\n            \u003c/section\u003e\n          \u003c/div\u003e\n        );\n      }\n```\n\nIn case you missed anything, you can find the complete App.js file [right here](https://github.com/christiannwamba/react-pusher-getting-started/blob/master/src/App.js).\n\n![reactjs-websockets-demo](//images.contentful.com/1es3ne0caaid/1O7NDl5Hv6Wia6AGEoS6mE/b842dd7761b6a525a9005e70daefd227/making-reactjs-realtime-with-websockets-demo.gif)\n\n## Conclusion\n\nThis article has covered the basic steps necessary to create a realtime chat application using React and Pusher. Moving forward, the concept demonstrated here can be built upon and extended to cater for any other realtime features you wish to build in your application. I hope you have found this tutorial helpful and feel free to improve on the code available [here](https://github.com/christiannwamba/react-pusher-getting-started) and drop comment(s) below, if any.","metaTitle":"Making React realtime with websockets","metaDescription":"Follow the steps you need to build a chat application using React and Pusher. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5LC6qtO0W4EYSUSKGSeAS4","type":"Entry","createdAt":"2018-02-22T15:04:12.881Z","updatedAt":"2018-02-28T11:02:32.754Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime PWA with React","url":"pwa-react","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2iE6KIsESkeOEcCmEmCQM8","type":"Entry","createdAt":"2018-02-13T12:06:21.229Z","updatedAt":"2018-02-14T10:08:19.561Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Yomi Eluwande","url":"yomi-eluwande","email":"yomi.eluwande@gmail.com","twitter":"https://twitter.com/yomieluwande","github":"https://github.com/yomete","guestWriter":true}}],"projectRepo":"https://github.com/yomete/pushercoins","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4kOTcNAC12gwWEyE6MimMY","type":"Entry","createdAt":"2018-02-12T15:08:28.581Z","updatedAt":"2018-02-26T12:31:12.766Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Trading","url":"trading","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}}],"reviewDate":"2017-09-14","description":"Build a realtime PWA displaying the price information about cryptocurrencies using React.js and Pusher.","prerequisite":"A basic understanding of React, Node.js and PWA are needed to follow this tutorial.","content":"Progressive Web Apps are experiences that combine the best of the web and the best of apps. They use service workers, HTTPS, a manifest file and an app shell architecture to deliver native app experiences to web applications.\n\nIn this tutorial, we’ll build a PWA called PusherCoins. PusherCoins shows the current and past price information about BTC, LTC, and ETH using data from [Cryptocurrency](http://cryptocompare.com). A demo can be seen below. The current Bitcoin, Ether, and Litecoin price will be updated every 10 seconds and the change will be realtime and seen across other connected clients connected via [Pusher](http://pusher.com).\n\n![pwa-react-demo](//images.contentful.com/1es3ne0caaid/1mJC8DNySUW282EAKeIw6C/bf8e90962701acda5f785ee00663cefd/pwa-react-demo.gif)\n\n## Building a PWA with create-react-app\n\nWe’re going to be building a realtime PWA with the help of [create-react-app](https://github.com/facebookincubator/create-react-app). \n\nSome of the common comments made by developers who are just getting into React are that it is hard to set up and there are so many ways to do things.\n`create-react-app` eliminates all of that by allowing developers to build React apps with little or no build configuration. All you have to do to get a working React app is install the npm module and run a single command.\n\nMost importantly, the production build of `create-react-app`  is a fully functional Progressive Web Application. This is done with the help of the `[sw-precache-webpack-plugin](https://github.com/goldhand/sw-precache-webpack-plugin)` which is integrated into the production configuration.\n\nLet’s get started with building the React app. Install the `create-react-app` tool with this command:\n\n\n```\n    npm install -g create-react-app\n```\n\nOnce the installation process has been completed, you can now create a new React app by using the command `create-react-app pushercoins`.\n\nThis generates a new folder with all the files required to run the React app and a service worker file. A manifest file is also created inside the `public` folder.\n\n![pwa-react-project-directory](//images.contentful.com/1es3ne0caaid/33lQkFdaW46aYOKmEEY6gE/bf8e90962701acda5f785ee00663cefd/pwa-react-project-directory.png)\n\nThe `manifest.json` file in the `public` folder is a simple JSON file that gives you, the ability to control how your app appears to the user and define its appearance at launch.\n\n```\n    {\n      \"short_name\": \"PusherCoins\",\n      \"name\": \"PusherCoins\",\n      \"icons\": [\n        {\n          \"src\": \"favicon.ico\",\n          \"sizes\": \"192x192\",\n          \"type\": \"image/png\"\n        },\n        {\n          \"src\": \"android-chrome-512x512.png\",\n          \"sizes\": \"512x512\",\n          \"type\": \"image/png\"\n        }\n      ],\n      \"start_url\": \"./index.html\",\n      \"display\": \"standalone\",\n      \"theme_color\": \"#000000\",\n      \"background_color\": \"#ffffff\"\n    }\n```\n\nWe notify the app of the `manifest.json` file by linking to it in line 12 of the `index.html` file.\n\n```\n    \u003clink rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\"\u003e\n```\n\nNext up, let’s go through the `registerServiceWorker.js` file and see how the service worker file works. The service worker file can be seen in the `src` folder on on [GitHub](https://github.com/yomete/pushercoins/blob/master/src/registerServiceWorker.js).\n\nThe service worker code basically registers a service worker for the React app. We first check if the app is being served from localhost via the `isLocalhost` const value that will either return a truthy or falsy value. The `register()` function helps to register the service worker to the React app only if its in a production mode and if the browser supports Service workers. The `unregister()` function helps to unregister the service worker.\n\nLet’s find out if the service worker really works. To do that we’ll need to prepare the React app for production as the Service Worker code only works in production mode. The `npm run build` command helps with that.\n\nThis command builds the app for production to the `build` folder and correctly bundles React in production mode and optimizes the build for the best performance. It also registers the service worker. Run the command and the output from the terminal should look like something below.\n\n![pwa-react-npm-run-output](//images.contentful.com/1es3ne0caaid/RdDPMgk3W6moK48G2SIS6/bf8e90962701acda5f785ee00663cefd/pwa-react-npm-run-output.png)\n\nWe get to see the size of the files in our React app and most importantly how to run the app with the aid of a static server. We are going to use [serve](https://www.npmjs.com/package/serve) npm package to, wait for it, serve(😀) the React app. \nTherefore, use the following commands to install serve on your computer and also setup a static server for the app.\n\n```\n    npm i serve -g\n    \n    serve -s build\n```\n\nYour application should be up and running at http://localhost:5000. So how do we check if a site is a PWA? We can do that by checking the service worker section in the Application tab in the Developer tools.\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2017/09/build-realtime-pwa-react-service-worker-devtools.png\" alt=\"\" width=\"1280\" height=\"219\" class=\"alignnone size-full wp-image-3489\" /\u003e\n\nWe could also check by using the [Lighthouse](https://developers.google.com/web/tools/lighthouse/) tool. Lighthouse is an [open-source](https://github.com/GoogleChrome/lighthouse), automated tool for improving the quality of web pages. It has audits for performance, accessibility and progressive web apps. Lighthouse is currently available as an extension on [Google Chrome](https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk) only and as an [npm](https://www.npmjs.com/package/lighthouse) package.\n\nI used the Lighthouse extension to generate a report for the newly created React app in production and got the following result.\n\n![pwa-react-lighthouse](//images.contentful.com/1es3ne0caaid/6w4fXnjeXCe0O0SA4sSAOk/bf8e90962701acda5f785ee00663cefd/pwa-react-lighthouse.png)\n\nThe React app got a score of 91 out of 100 for the PWA section, which isn’t that bad. All audits were passed bar the one about HTTPS, which cannot be implemented right now because the app is still on a local environment.\n\nNow that we know how to check if an app is a PWA, let’s go ahead to build the actual app. \nAs we’ll be building this PWA with React, it’s very important that we think in terms of React components. \n\nTherefore, the React app would be divided into three components.\n\n1. `History.js` houses all the code needed to show the past prices of BTC, ETH, and LTC.\n2. `Today.js` houses all the code needed to show the current price of BTC, ETH and LTC.\n3. `App.js` houses both `History.js` and `Today.js`\n\n![pwa-react-components](//images.contentful.com/1es3ne0caaid/ypI7IqLUhqmAqUgEs4AAy/bf8e90962701acda5f785ee00663cefd/pwa-react-components.png)\n\nAlright, let’s continue with building the app. We’ll need to create two folders inside the `src` folder, `Today` and `History`. In the newly created folders, create the files `Today.js`, `Today.css` and `History.js`, `History.css` respectively. Your project directory should look like the one below.\n\n![pwa-react-components-project-directory](//images.contentful.com/1es3ne0caaid/3cahl0boIESA6c8g2Yskw0/bf8e90962701acda5f785ee00663cefd/pwa-react-components-project-directory.png)\n\nBefore we get started on the `Today` and `History` components, let’s build out the app shell.\n\n\u003e An app shell is the minimal HTML, CSS and JavaScript required to power the user interface and when cached offline can ensure instant**,** reliably good performance to users on repeat visits. You can read more about app shells [here](https://developers.google.com/web/fundamentals/architecture/app-shell).\n\nOpen up the `App.js` file and replace with the following code:\n\n```\n    // Import React and Component\n    import React, { Component } from 'react';\n    // Import CSS from App.css\n    import './App.css';\n    // Import the Today component to be used below\n    import Today from './Today/Today'\n    // Import the History component to be used below\n    import History from './History/History'\n    \n    class App extends Component {\n      render() {\n        return (\n          \u003cdiv className=\"\"\u003e\n              \u003cdiv className=\"topheader\"\u003e\n                  \u003cheader className=\"container\"\u003e\n                      \u003cnav className=\"navbar\"\u003e\n                          \u003cdiv className=\"navbar-brand\"\u003e\n                              \u003cspan className=\"navbar-item\"\u003ePusherCoins\u003c/span\u003e\n                          \u003c/div\u003e\n                          \u003cdiv className=\"navbar-end\"\u003e\n                              \u003ca className=\"navbar-item\" href=\"https://pusher.com\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ePusher.com\u003c/a\u003e\n                          \u003c/div\u003e\n                      \u003c/nav\u003e\n                  \u003c/header\u003e\n              \u003c/div\u003e\n              \u003csection className=\"results--section\"\u003e\n                  \u003cdiv className=\"container\"\u003e\n                      \u003ch1\u003ePusherCoins is a realtime price information about\u003cbr\u003e\u003c/br\u003e BTC, ETH and LTC.\u003c/h1\u003e\n                  \u003c/div\u003e\n                  \u003cdiv className=\"results--section__inner\"\u003e\n                      \u003cToday /\u003e\n                      \u003cHistory /\u003e\n                  \u003c/div\u003e\n              \u003c/section\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default App;\n```\n\nThe `App.css` file should be replaced with the following: \n\n```\n    .topheader {\n      background-color: #174c80;\n    }\n    .navbar {\n      background-color: #174c80;\n    }\n    .navbar-item {\n      color: #fff;\n    }\n    .results--section {\n      padding: 20px 0px;\n      margin-top: 40px;\n    }\n    h1 {\n      text-align: center;\n      font-size: 30px;\n    }\n```\nWe’ll also be using the Bulma CSS framework, so add the line of code below to your `index.html`\nin `public` folder.\n\n```\n    \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.4.3/css/bulma.min.css\"\u003e\n```\n\n## Creating the React components\n\nNext up, open up the `Today.js` file as we’ll soon be writing the code for that component. So what does this component do?\n\nIt’s responsible for getting the current prices of Bitcoin, Ether and Litecoin from the Cryptocurrency API and displaying it on the frontend. Let’s write the code. \n\nThe first thing we do is import React and its Component module using ES6 `import`, we also import axios. axios is used to make API requests to the Cryptocurrency API and can be installed by running `npm install axios` in your terminal\n\n```\n    import React, { Component } from 'react';\n    import './Today.css'\n    import axios from 'axios'\n```\n\nThe next thing to do is create an [ES6 class](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes) named `Today` that extends the component module from `react`.\n\n```\n    class Today extends Component {\n        // Adds a class constructor that assigns the initial state values:\n        constructor () {\n            super();\n            this.state = {\n                btcprice: '',\n                ltcprice: '',\n                ethprice: ''\n            };\n        }\n        // This is called when an instance of a component is being created and inserted into the DOM.\n        componentWillMount () {\n            axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC\u0026tsyms=USD')\n                .then(response =\u003e {\n                    // We set the latest prices in the state to the prices gotten from Cryptocurrency.\n                    this.setState({ btcprice: response.data.BTC.USD });\n                    this.setState({ ethprice: response.data.ETH.USD });\n                    this.setState({ ltcprice: response.data.LTC.USD });\n                })\n                // Catch any error here\n                .catch(error =\u003e {\n                    console.log(error)\n                })\n        }\n        // The render method contains the JSX code which will be compiled to HTML.\n        render() {\n            return (\n                \u003cdiv className=\"today--section container\"\u003e\n                    \u003ch2\u003eCurrent Price\u003c/h2\u003e\n                    \u003cdiv className=\"columns today--section__box\"\u003e\n                        \u003cdiv className=\"column btc--section\"\u003e\n                            \u003ch5\u003e${this.state.btcprice}\u003c/h5\u003e\n                            \u003cp\u003e1 BTC\u003c/p\u003e\n                        \u003c/div\u003e\n                        \u003cdiv className=\"column eth--section\"\u003e\n                            \u003ch5\u003e${this.state.ethprice}\u003c/h5\u003e\n                            \u003cp\u003e1 ETH\u003c/p\u003e\n                        \u003c/div\u003e\n                        \u003cdiv className=\"column ltc--section\"\u003e\n                            \u003ch5\u003e${this.state.ltcprice}\u003c/h5\u003e\n                            \u003cp\u003e1 LTC\u003c/p\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            )\n        }\n    }\n    \n    export default Today;\n```\n\nIn the code block above, we imported the `react` and `component` class from react. We also imported `axios` which will be used for API requests. In the `componentWillMount` function, we send an API request to get the current cryptocurrency rate from Cryptocurrency. The response from the API is what will be used to set the value of the state.\n\nLet’s not forget the CSS for the component. Open up `Today.css` and type in the following CSS code.\n\n```\n    .today--section {\n        margin-bottom: 40px;\n        padding: 0 50px;\n    }\n    .today--section h2 {\n        font-size: 20px;\n    }\n    .today--section__box {\n        background-color: white;\n        padding: 20px;\n        margin: 20px 0;\n        border-radius: 4px;\n        box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\n    }\n    .btc--section {\n        text-align: center;\n        border-right: 1px solid #DAE1E9;\n    }\n    .btc--section h5 {\n        font-size: 30px;\n    }\n    .eth--section {\n        text-align: center;\n        border-right: 1px solid #DAE1E9;\n    }\n    .eth--section h5 {\n        font-size: 30px;\n    }\n    .ltc--section {\n        text-align: center;\n    }\n    .ltc--section h5 {\n        font-size: 30px;\n    }\n    @media (max-width: 480px) {\n        .eth--section {\n            border-right: none;\n        }\n        .btc--section {\n            border-right: none;\n        }\n        .today--section {\n            margin-top:  50px;\n        }\n    }\n```\n\nThe next step, is to write the code for `History.js`. This component is responsible for showing us the prices of BTC, ETH and LTC from the past five days. We’ll be using the `axios` package as well as the `moment` package for formatting dates. Moment.js can be installed by running `npm install moment` in your terminal. Open up the `History.js` file, the first thing we do is import React and its Component module using ES6 `import`, we also import axios and Moment.js.\n\n```\n    import React, { Component } from 'react';\n    import './History.css'\n    import axios from 'axios'\n    import moment from 'moment'\n```\n\nLike we did in the `Today.js` component, we’ll create an [ES6 class](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes) named `History` that extends the component module from `react` and also create some functions which will be bound with `this`.\n\n```\n    class History extends Component {\n      constructor () {\n        super();\n        this.state = {\n            todayprice: {},\n            yesterdayprice: {},\n            twodaysprice: {},\n            threedaysprice: {},\n            fourdaysprice: {}\n        }\n        this.getBTCPrices = this.getBTCPrices.bind(this);\n        this.getETHPrices = this.getETHPrices.bind(this);\n        this.getLTCPrices = this.getLTCPrices.bind(this);\n      }\n      // This function gets the ETH price for a specific timestamp/date. The date is passed in as an argument\n      getETHPrices (date) {\n          return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH\u0026tsyms=USD\u0026ts=' + date);\n      }\n      // This function gets the BTC price for a specific timestamp/date. The date is passed in as an argument\n      getBTCPrices (date) {\n          return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=BTC\u0026tsyms=USD\u0026ts=' + date);\n      }\n      // This function gets the LTC price for a specific timestamp/date. The date is passed in as an argument\n      getLTCPrices (date) {\n          return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=LTC\u0026tsyms=USD\u0026ts=' + date);\n      }\n    }\n```\n\nAs seen in the code block above, we have defined state values that will hold the price information about BTC, ETH, and LTC for the past five days. We also created functions that returns API requests to Cryptocurrency. Now, let’s write the code that utilizes the functions above and stores the various prices in the state and renders them. \n\nIt’s important to note that Cryptocurrency currently does not have an API endpoint that allows you to get a date range of price information. You’d have to get the timestamp of the past five days and then use them individually to get the required data you want.\nA workaround will be to use moment.js to get the timestamp of the particular day you want using the `.subtract` [method](https://momentjs.com/docs/#/manipulating/subtract/) and `.unix` [method](https://momentjs.com/docs/#/displaying/unix-timestamp/) . So for example, to get a timestamp of two days ago, you’d do something like:\n\n```\n    moment().subtract(2, 'days').unix();\n```\n\nOkay, so let’s continue with the rest of the code and write out the functions that gets the values for the past 5 days.\n\n```\n    // This function gets the prices for the current date.\n    getTodayPrice () {\n        // Get today's date in timestamp\n        let t = moment().unix()\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) =\u003e {\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                }\n                // Set the state of todayprice to the content of the object f\n                this.setState({ todayprice: f });\n            }));\n    }\n    // This function gets the prices for the yesterday.\n    getYesterdayPrice () {\n        // Get yesterday's date in timestamp\n        let t = moment().subtract(1, 'days').unix();\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) =\u003e {\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                }\n                // Set the state of yesterdayprice to the content of the object f\n                this.setState({ yesterdayprice: f });\n            }));\n    }\n    // This function gets the prices for the two days ago.\n    getTwoDaysPrice () {\n        // Get the date for two days ago in timestamp\n        let t = moment().subtract(2, 'days').unix();\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) =\u003e {\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                }\n                // Set the state of twodaysprice to the content of the object f\n                this.setState({ twodaysprice: f });\n            }));\n    }\n    // This function gets the prices for the three days ago.\n    getThreeDaysPrice () {\n        // Get the date for three days ago in timestamp\n        let t = moment().subtract(3, 'days').unix();\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) =\u003e {\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                }\n                // Set the state of threedaysprice to the content of the object f\n                this.setState({ threedaysprice: f });\n            }));\n    }\n    // This function gets the prices for the four days ago.\n    getFourDaysPrice () {\n        // Get the date for four days ago in timestamp\n        let t = moment().subtract(4, 'days').unix();\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) =\u003e {\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                }\n                // Set the state of fourdaysprice to the content of the object f\n                this.setState({ fourdaysprice: f });\n            }));\n    }\n    // This is called when an instance of a component is being created and inserted into the DOM.\n    componentWillMount () {\n        this.getTodayPrice();\n        this.getYesterdayPrice();\n        this.getTwoDaysPrice();\n        this.getThreeDaysPrice();\n        this.getFourDaysPrice();\n    }\n```\n\nSo we have five functions above, they basically just use `moment.js` to get the date required and then pass that date into the functions we first created above, to get the price information from Cryptocurrency. We use `axios.all` and `axios.spread` which is a way of of dealing with concurrent requests with callbacks. The functions will be run in the `componentWillMount` function.\n\nFinally, for `History.js`, we’ll write the render function.\n\n```\n    render() {\n            return (\n                \u003cdiv className=\"history--section container\"\u003e\n                    \u003ch2\u003eHistory (Past 5 days)\u003c/h2\u003e\n                    \u003cdiv className=\"history--section__box\"\u003e\n                        \u003cdiv className=\"history--section__box__inner\"\u003e\n                            \u003ch4\u003e{this.state.todayprice.date}\u003c/h4\u003e\n                            \u003cdiv className=\"columns\"\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 BTC = ${this.state.todayprice.btc}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 ETH = ${this.state.todayprice.eth}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 LTC = ${this.state.todayprice.ltc}\u003c/p\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv className=\"history--section__box__inner\"\u003e\n                            \u003ch4\u003e{this.state.yesterdayprice.date}\u003c/h4\u003e\n                            \u003cdiv className=\"columns\"\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 BTC = ${this.state.yesterdayprice.btc}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 ETH = ${this.state.yesterdayprice.eth}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 LTC = ${this.state.yesterdayprice.ltc}\u003c/p\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv className=\"history--section__box__inner\"\u003e\n                            \u003ch4\u003e{this.state.twodaysprice.date}\u003c/h4\u003e\n                            \u003cdiv className=\"columns\"\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 BTC = ${this.state.twodaysprice.btc}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 ETH = ${this.state.twodaysprice.eth}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 LTC = ${this.state.twodaysprice.ltc}\u003c/p\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv className=\"history--section__box__inner\"\u003e\n                            \u003ch4\u003e{this.state.threedaysprice.date}\u003c/h4\u003e\n                            \u003cdiv className=\"columns\"\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 BTC = ${this.state.threedaysprice.btc}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 ETH = ${this.state.threedaysprice.eth}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 LTC = ${this.state.threedaysprice.ltc}\u003c/p\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv className=\"history--section__box__inner\"\u003e\n                            \u003ch4\u003e{this.state.fourdaysprice.date}\u003c/h4\u003e\n                            \u003cdiv className=\"columns\"\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 BTC = ${this.state.fourdaysprice.btc}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 ETH = ${this.state.fourdaysprice.eth}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 LTC = ${this.state.fourdaysprice.ltc}\u003c/p\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n    \n                    \u003c/div\u003e\n                \u003c/div\u003e\n            )\n        }\n    }\n    \n    export default History;\n```\n\nWe can now run the `npm start` command to see the app at http://localhost:3000. \n\n![pwa-react-pushercoins](//images.contentful.com/1es3ne0caaid/3IfTKCLwCIky02WK06WW0e/bf8e90962701acda5f785ee00663cefd/pwa-react-pushercoins.png)\n\nWe can quickly check to see how the current state of this app would fare as a PWA. Remember we have a service worker file which currently caches all the resources needed for this application. So you can run the `npm run build` command to put the app in production mode, and check its PWA status with Lighthouse.\n\n![pwa-react-light](//images.contentful.com/1es3ne0caaid/7sc2HDKIfuECq8AuIsOAyw/bf8e90962701acda5f785ee00663cefd/pwa-react-light.png)\n\nWe got a 91/100 score. Whoop! The only audit that failed to pass is the HTTPS audit which cannot be implemented right now because the app is still on a local server. \n\nOur application is looking good and fast apparently (Interactive at \u003c 3s), let’s add realtime functionalities by adding Pusher.\n\n## Make it realtime with Pusher\n\nBy using Pusher, we can easily add realtime functionalities to the app. Pusher makes it simple to bind UI interactions to events that are triggered from any client or server. Let’s setup Pusher.\n\nLog into your [dashboard](http://dashboard.pusher.com) (or [create](http://pusher.com) a new account if you’re a new user) and create a new app. Copy your `app_id`, `key`, `secret` and `cluster` and store them somewhere as we’ll be needing them later.\n\nWe’ll also need to create a server that will help with triggering events to Pusher and we’ll create one with Node.js. In the root of your project directory, create a file named `server.js` and type in the following code:\n\n```\n    // server.js\n    const express = require('express')\n    const path = require('path')\n    const bodyParser = require('body-parser')\n    const app = express()\n    const Pusher = require('pusher')\n    \n    //initialize Pusher with your appId, key, secret and cluster\n    const pusher = new Pusher({\n        appId: 'APP_ID',\n        key: 'APP_KEY',\n        secret: 'APP_SECRET',\n        cluster: 'YOUR_CLUSTER',\n        encrypted: true\n    })\n    \n    // Body parser middleware\n    app.use(bodyParser.json())\n    app.use(bodyParser.urlencoded({ extended: false }))\n    \n    // CORS middleware\n    app.use((req, res, next) =\u003e {\n        // Website you wish to allow to connect\n        res.setHeader('Access-Control-Allow-Origin', '*')\n        // Request methods you wish to allow\n        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE')\n        // Request headers you wish to allow\n        res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type')\n        // Set to true if you need the website to include cookies in the requests sent\n        // to the API (e.g. in case you use sessions)\n        res.setHeader('Access-Control-Allow-Credentials', true)\n        // Pass to next layer of middleware\n        next()\n    })\n    \n    // Set port to be used by Node.js\n    app.set('port', (5000))\n    \n    app.get('/', (req, res) =\u003e {\n        res.send('Welcome')\n    })\n    \n    // API route in which the price information will be sent to from the clientside\n    app.post('/prices/new', (req, res) =\u003e {\n        // Trigger the 'prices' event to the 'coin-prices' channel\n        pusher.trigger( 'coin-prices', 'prices', {\n            prices: req.body.prices\n        });\n        res.sendStatus(200);\n    })\n    \n    app.listen(app.get('port'), () =\u003e {\n        console.log('Node app is running on port', app.get('port'))\n    })\n```    \n\nThis is a simple Node.js server that uses Express as its web framework. Pusher is initialized with the dashboard credentials, and the various API routes are also defined. Don’t forget to install the packages in use.\n\n```\n    npm install express body-parser pusher\n```\n\nWe’ll also need to add a line of code to the `package.json` file so as to allow API proxying. Since we will be running a backend server, we need to find a way to run the React app and backend server together. API proxying helps with that. \n\nTo tell the development server to proxy any unknown requests (`/prices/new`) to your API server in development, add a `proxy` field to your `package.json` immediately after the `scripts` object.\n\n``` language-bash\n    \"proxy\": \"http://localhost:5000\"\n```\n\nWe only need to make the current price realtime and that means we’ll be working on the `Today` component, so open up the file.  The Pusher Javascript library is needed, so run `npm install pusher-js` to install that.\n\nThe first thing to do is import the `pusher-js` package.\n\n```\n    import Pusher from 'pusher-js'\n```\n\nIn the `componentWillMount` method, we establish a connection to Pusher using the credentials obtained from the dashboard earlier.\n\n```\n    // establish a connection to Pusher\n    this.pusher = new Pusher('APP_KEY', {\n        cluster: 'YOUR_CLUSTER',\n        encrypted: true\n    });\n    // Subscribe to the 'coin-prices' channel\n    this.prices = this.pusher.subscribe('coin-prices');\n```\n\nWe need a way to query the API every 10 seconds so as to get the latest price information. We can use the `setInterval` function to send an API request every 10 seconds and then send the result of that API request to Pusher so that it can be broadcasted to other clients. \n\nBefore we create the setInterval function, let’s create a simple function that takes in an argument and sends it to the backend server API.\n\n```\n    sendPricePusher (data) {\n        axios.post('/prices/new', {\n            prices: data\n        })\n            .then(response =\u003e {\n                console.log(response)\n            })\n            .catch(error =\u003e {\n                console.log(error)\n            })\n    }\n```\n Let’s create the `setInterval` function. We will need to create a `componentDidMount` method so we can put the interval code in it.\n\n```\n    componentDidMount () {\n        setInterval(() =\u003e {\n            axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC\u0026tsyms=USD')\n                .then(response =\u003e {\n                    this.sendPricePusher (response.data)\n                })\n                .catch(error =\u003e {\n                    console.log(error)\n                })\n        }, 10000)\n    }\n```\n\nSo right now, the app queries the API every 10 seconds and sends the data to Pusher, but we still haven’t made the app realtime. We need to implement the realtime functionality so that other clients/users connected to the application can see price change in realtime. That will be done by using Pusher’s [bind method](https://pusher.com/docs/client_api_guide/client_events#bind-events).\n\nInside the `componentDidMount` method, add the code below, immediately after the `setInterval` function.\n\n```\n    // We bind to the 'prices' event and use the data in it (price information) to update the state values, thus, realtime changes \n    this.prices.bind('prices', price =\u003e {\n            this.setState({ btcprice: price.prices.BTC.USD });\n            this.setState({ ethprice: price.prices.ETH.USD });\n            this.setState({ ltcprice: price.prices.LTC.USD });\n        }, this);\n```\n\nThe code block above, listens for data from Pusher, since we already subscribed to that channel and uses the data it gets to update the state values, thus, realtime changes.\nWe now have Progressive Realtime App! See a demo below.\n\n![pwa-react-demo](//images.contentful.com/1es3ne0caaid/1mJC8DNySUW282EAKeIw6C/bf8e90962701acda5f785ee00663cefd/pwa-react-demo.gif)\n\n## Offline Strategies\n\nRight now, if we were to go offline, our application would not be able to make API requests to get the various prices. So how do we make sure that we still able to see some data even when the network fails?\n\nOne way to go about it would be to use Client Side Storage. So how would this work? We’ll simply use localStorage to cache data.\n\nlocalStorage makes it possible to store values in the browser which can survive the browser session. It is one type of the [Web Storage API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API), which is an API for storing key-value pairs of data within the browser. It has a limitation of only storing strings. That means any data being stored has to be *stringified*  with the use of `JSON.stringify` \n\n It’s important to note that there are other types of client side storage, such as Session Storage, Cookies, IndexedDB, and WebSQL. Local Storage can be used for a demo app like this, but in a production app, it’s advisable to use a solution like IndexedDB which offers more features like better structure, multiple tables and databases, and more storage.\n\nThe goal will be to display the prices from localStorage. That means we’ll have to save the results from various API requests into the localStorage and set the state to the values in the localStorage. This will ensure that when the network is unavailable and API requests are failing, we would still be able to see some data, albeit cached data. Let’s do just that. Open up the `Today.js` file and edit the code inside the callback function of the API request to get prices with the one below.\n\n```\n    axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC\u0026tsyms=USD')\n        .then(response =\u003e {\n            this.setState({ btcprice: response.data.BTC.USD });\n            localStorage.setItem('BTC', response.data.BTC.USD);\n    \n            this.setState({ ethprice: response.data.ETH.USD });\n            localStorage.setItem('ETH', response.data.ETH.USD);\n    \n            this.setState({ ltcprice: response.data.LTC.USD });\n            localStorage.setItem('LTC', response.data.LTC.USD);\n        })\n        .catch(error =\u003e {\n            console.log(error)\n        })\n```\n\nWe are essentially storing the values gotten from the API request to the localStorage. With our values now in the localStorage, we’ll need to set the state values to the saved values in localStorage. Inside the `componentDidMount` method, before the `setInterval` code, add the following code.\n\n```\n    if (!navigator.onLine) {\n        this.setState({ btcprice: localStorage.getItem('BTC') });\n        this.setState({ ethprice: localStorage.getItem('ETH') });\n        this.setState({ ltcprice: localStorage.getItem('LTC') });\n    }\n```\n\nThe code above is only executed when the browser is offline. We can check for internet connectivity by using `navigator.onLine`. The `navigator.onLine` property returns the online status of the browser. The property returns a boolean value, with `true` meaning online and `false` meaning offline.\n\nLet’s now implement localStorage for `History.js` too. We’ll need to save the values gotten from the API in these functions ( `getTodayPrice(), getYesterdayPrice(), getTwoDaysPrice(), getThreeDaysPrice(), this.getFourDaysPrice()` ) to the localStorage. \n\n```\n    // getTodayPrice()\n    localStorage.setItem('todayprice', JSON.stringify(f));\n    this.setState({ todayprice: f });\n    \n    // getYesterdayPrice()\n    localStorage.setItem('yesterdayprice', JSON.stringify(f));\n    this.setState({ yesterdayprice: f });\n    \n    // getTwoDaysPrice()\n    localStorage.setItem('twodaysprice', JSON.stringify(f));\n    this.setState({ twodaysprice: f });\n    \n    // getThreeDaysPrice()\n    localStorage.setItem('threedaysprice', JSON.stringify(f));\n    this.setState({ threedaysprice: f });\n    \n    // getFourDaysPrice()\n    localStorage.setItem('fourdaysprice', JSON.stringify(f));\n    this.setState({ fourdaysprice: f });\n```\n\nWe are essentially storing the values gotten from the API request to the localStorage. With our values now in the localStorage, we’ll also need to set the state values to the saved values in localStorage like we did in the `Today` component. Create a `componentDidMount` method and add the following code inside the method.\n\n```\n    componentDidMount () {\n        if (!navigator.onLine) {\n            this.setState({ todayprice: JSON.parse(localStorage.getItem('todayprice')) });\n            this.setState({ yesterdayprice: JSON.parse(localStorage.getItem('yesterdayprice')) });\n            this.setState({ twodaysprice: JSON.parse(localStorage.getItem('twodaysprice')) });\n            this.setState({ threedaysprice: JSON.parse(localStorage.getItem('threedaysprice')) });\n            this.setState({ fourdaysprice: JSON.parse(localStorage.getItem('fourdaysprice')) });\n        }\n    }\n```\n\nNow our application will display cached values when there’s no internet connectivity.\n\n![pwa-react-offlinemode](//images.contentful.com/1es3ne0caaid/5SasJ5fSKWiYMkcIKemMa0/bf8e90962701acda5f785ee00663cefd/pwa-react-offlinemode.png)\n\nIt’s important to note that the app is time sensitive. Time sensitive data are not really useful to users when cached. What we can do is, add a status indicator warning the user when they are offline, that the data being shown might be stale and an internet connection is needed to show the latest data.\n\n## Deploy the app to production\n\nNow that we’re done building, let’s deploy the app to production and carry out a final Lighthouse test. We’ll be using [now.sh](http://now.sh) for deployment, `now` allows you to take your JavaScript (Node.js) or Docker powered websites, applications and services to the cloud with ease. You can find installation instructions on the site. You can also use any other deployment solution, I’m using Now because of its simplicity.\n\nPrepare the app for production by running the command below in the terminal\n\n```\n    npm run build\n```\n\nThis builds the app for production to the `build` folder. Alright, so the the next thing to do is to create a server in which the app will be served from. Inside the `build` folder, create a file named `server.js` and type in the following code.\n\n```\n    const express = require('express')\n    const path = require('path')\n    const bodyParser = require('body-parser')\n    const app = express()\n    const Pusher = require('pusher')\n    \n    const pusher = new Pusher({\n        appId: 'APP_ID',\n        key: 'YOUR_KEY',\n        secret: 'YOUR SECRET',\n        cluster: 'YOUR CLUSTER',\n        encrypted: true\n    })\n    \n    app.use(bodyParser.json())\n    app.use(bodyParser.urlencoded({ extended: false }))\n    app.use(express.static(path.join(__dirname)));\n    \n    app.use((req, res, next) =\u003e {\n        // Website you wish to allow to connect\n        res.setHeader('Access-Control-Allow-Origin', '*')\n        // Request methods you wish to allow\n        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE')\n        // Request headers you wish to allow\n        res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type')\n        // Set to true if you need the website to include cookies in the requests sent\n        // to the API (e.g. in case you use sessions)\n        res.setHeader('Access-Control-Allow-Credentials', true)\n        // Pass to next layer of middleware\n        next()\n    })\n    \n    app.set('port', (5000))\n    \n    app.get('/', (req, res) =\u003e {\n        res.sendFile(path.join(__dirname + '/index.html'));\n    });\n    \n    app.post('/prices/new', (req, res) =\u003e {\n        pusher.trigger( 'coin-prices', 'prices', {\n            prices: req.body.prices\n        });\n        res.sendStatus(200);\n    })\n    \n    app.listen(app.get('port'), () =\u003e {\n        console.log('Node app is running on port', app.get('port'))\n    })\n```\n\nThis is basically the same code we wrote in the `server.js` file in the root of the project directory. The only addition here is that we set the home route to serve the `index.html` file in the `public` folder. Next up, run the command `npm init` to create a `package.json` file for us and lastly install the packages needed with the command below.\n\n```\n    npm install express body-parser pusher\n```\n\nYou can now see the application by running `node server.js` inside the `build` folder and your app should be live at http://localhost:5000\n\nDeploying to Now is very easy, all you have to do is run the command `now deploy` and Now takes care of everything, with a live URL automatically generated.\n\nIf everything goes well, your app should be deployed and live now, in this case, https://build-zrxionqses.now.sh/. Now automatically provisions all deployments with SSL, so we can finally generate the Lighthouse report again to check the PWA status. A live Lighthouse report of the site can be seen [here](https://googlechrome.github.io/lighthouse/viewer/?gist=4da584b2d889a4f7ce9e439659ea5441).\n\n![pwa-react-lighthousecomplete](//images.contentful.com/1es3ne0caaid/2Lrip4t3TaU02SAg2emKU4/bf8e90962701acda5f785ee00663cefd/pwa-react-lighthousecomplete.png)\n\n100/100! Whoop! All the PWA audits were passed and we got the site to load under 5s (2.6s).\n\n## App Install\n\nOne of the features of PWAs is the web app install banner. So how does this work? A PWA will install a web app install banner only if the following conditions are met:\n- Has a web app manifest file with:\n  - a `short_name` (used on the home screen)\n  - a `name` (used in the banner)\n  - a 144x144 png icon (the icon declarations must include a mime type of `image/png`)\n  - a `start_url` that loads\n- Has a [service worker](https://developers.google.com/web/fundamentals/getting-started/primers/service-workers) registered on your site.\n- Is served over [HTTPS](https://developers.google.com/web/fundamentals/security/encrypt-in-transit/why-https) (a requirement for using service worker).\n- Is visited at least twice, with at least five minutes between visits.\n\nThe `manifest.json` file in the `public` folder meets all the requirements above, we have a service worker registered on the site and the app is served over HTTPS at https://build-zrxionqses.now.sh/.\n\n![pwa-react-banner](//images.contentful.com/1es3ne0caaid/5ShDNuOOGW6iQEK0CyggQS/bf8e90962701acda5f785ee00663cefd/pwa-react-banner.png)\n\n## Conclusion\nIn this tutorial, we’ve seen how to use ReactJS, Pusher and Service Workers to build a realtime PWA. We saw how service workers can be used to cache assets and resources so as to reduce the load time and also make sure that the app works even when offline.\n\nWe also saw how to use localStorage to save data locally for cases when the browser looses connectivity to the internet.\n\nThe app can be viewed live \u003ca href=\"https://build-zrxionqses.now.sh/\"\u003ehere\u003c/a\u003e and you can check out the Github repo [here](https://github.com/yomete/pushercoins). See if you can change stuff and perhaps make the app load faster!","metaTitle":"Build a realtime PWA with React","metaDescription":"In this tutorial you'll build a realtime PWA displaying the current and past price information about popular cryptocurrencies like BTC, LTC, and ETH, using React.js and Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"QcaDBEoTGoyCkiK8umAiE","type":"Entry","createdAt":"2018-02-22T15:04:12.055Z","updatedAt":"2019-01-02T15:29:48.784Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app with React Native","url":"chat-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5XNUJSocQo6scKsiMs2Iko","type":"Entry","createdAt":"2018-02-14T13:34:52.032Z","updatedAt":"2018-02-14T13:34:52.032Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Graham Cox","url":"graham-cox","email":"graham@grahamcox.co.uk","twitter":"https://twitter.com/grahamcox82","github":"https://github.com/sazzer","guestWriter":true}}],"projectRepo":"https://github.com/sazzer/react-native-chat","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2017-09-12","description":"Benefit from the powerful frameworks like React Native and build a live chat app.","prerequisite":"A basic understanding of React and Node.js are needed to follow this tutorial.","content":"Social chat applications are hugely popular these days, allowing people to stay connected on topics they are interested in from all over the world. In this article we’re going to explore creating a simple chat app in the [React Native](https://facebook.github.io/react-native/) framework, which allows us to use the same source code to target both Android and iOS. In order to keep this example simple to follow we’re going to focus only on the basics - a single chat room, and no authentication of the people chatting. \n\n![chat-app-react-native-demo](//images.contentful.com/1es3ne0caaid/5wRZEV2DjqoWk0mWUIQ6aI/fa20729730a5845efe2cadf3a6cf1246/chat-app-react-native-demo.gif)\n\nThe application will work in two parts. The client application will receive events from Pusher informing it of new users and new messages, and there will be a server application that is responsible for sending message to Pusher. \n\nIn order to implement this you need to have the following on your computer:\n\n- A recent version of Node.js\n- A text editor\n\nYou will also need a mobile device with the [Expo](https://expo.io/) tools installed - available from the Android Play Store or the Apple App Store for free. This is used to test the React Native application whilst you are still developing it. It works by allowing you to start and host the application on your workstation, and connect to it remotely from your mobile device as long as you are on the same network.\n\nNote as well that this article assumes some prior experience with writing JavaScript applications, and with the React framework - especially working with the ES6 and JSX versions of the language.\n\n\n## Creating a Pusher application to use\n\nFirstly, we’ll need to create a Pusher application that we can connect our server and client to. This can be done for free [here](https://dashboard.pusher.com/). When you create your application, you will need to make note of your App ID, App Key, App Secret and Cluster:\n\n![chat-app-react-native-create-pusher-app](//images.contentful.com/1es3ne0caaid/6mrD8WM6as0WIEka2AYI6I/0b294d87f2dccd850a508cfc46254d0a/chat-app-react-native-create-pusher-app.png)\n\n## Creating the server application\n\nOur server application is going to be written in Node.js using the Express web framework. We are going to have three RESTful endpoints, and no actual views. The endpoints are:\n\n- PUT /users/\u003cname\u003e - Indicate that a new user has joined\n- DELETE /users/\u003cname\u003e - Indicate that a user has left\n- POST /users/\u003cname\u003e/messages - Send a message to the chatroom\n\nCreating a new Node application is done using the `npm init` call, as follows:\n\n```\n    \u003e npm init\n    This utility will walk you through creating a package.json file.\n    It only covers the most common items, and tries to guess sensible defaults.\n    \n    See `npm help json` for definitive documentation on these fields\n    and exactly what they do.\n    \n    Use `npm install \u003cpkg\u003e --save` afterwards to install a package and\n    save it as a dependency in the package.json file.\n    \n    Press ^C at any time to quit.\n    name: (server) react-native-chat-server\n    version: (1.0.0)\n    description: Server component for our React Native Chat application\n    entry point: (index.js)\n    test command:\n    git repository:\n    keywords:\n    author:\n    license: (ISC)\n    \n    {\n      \"name\": \"react-native-chat-server\",\n      \"version\": \"1.0.0\",\n      \"description\": \"Server component for our React Native Chat application\",\n      \"main\": \"index.js\",\n      \"scripts\": {\n        \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\"\n      },\n      \"author\": \"\",\n      \"license\": \"ISC\"\n    }\n    \n    \n    Is this ok? (yes)\n```\n\nWe then need to install the modules that we’re going to depend on - `express`, `body-parser` - to allow us to parse incoming JSON bodies - and `pusher`, to talk to the Pusher API.\n\n```\n    \u003e npm install --save express body-parser pusher\n```\n\nThis gives us everything we need to get our server application written. Because it’s so simple we can do it all in one file - `index.js` - which will look like this:\n\n```\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const pusherConfig = require('./pusher.json'); // (1)\n    const pusherClient = new Pusher(pusherConfig);\n    \n    const app = express(); // (2)\n    app.use(bodyParser.json());\n    \n    app.put('/users/:name', function(req, res) { // (3)\n        console.log('User joined: ' + req.params.name);\n        pusherClient.trigger('chat_channel', 'join', {\n            name: req.params.name\n        });\n        res.sendStatus(204);\n    });\n    \n    app.delete('/users/:name', function(req, res) { // (4)\n        console.log('User left: ' + req.params.name);\n        pusherClient.trigger('chat_channel', 'part', {\n            name: req.params.name\n        });\n        res.sendStatus(204);\n    });\n    \n    app.post('/users/:name/messages', function(req, res) { // (5)\n        console.log('User ' + req.params.name + ' sent message: ' + req.body.message);\n        pusherClient.trigger('chat_channel', 'message', {\n            name: req.params.name,\n            message: req.body.message\n        });\n        res.sendStatus(204);\n    });\n    \n    app.listen(4000, function() { // (6)\n        console.log('App listening on port 4000');\n    });\n```\n\nThis is the entire Server application, which works as follows:\n\n1. Create a new Pusher client and configure it to connect to our Pusher application, as configured above\n2. Create a new Express server\n3. Add a new route - PUT /users/:name. This will send a *join* message to the Pusher application with the name of the user that has joined as the payload\n4. Add a new route - DELETE /users/:name. This will send a *part* message to the Pusher application with the name of the user that has just departed as the payload\n5. Add a third route - POST /users/:name/messages. This will send a *message* message to the Pusher application with the name of the user sending the message and the actual message as the payload\n6. Start the server listening on port 4000\n\nPusher has native support for Join and Leave notification as a part of it’s API, by leveraging the [Presence Channel](https://pusher.com/docs/client_api_guide/client_presence_channels) functionality. This requires [authentication](https://pusher.com/docs/authenticating_users) to be implemented before the client can use it though, which is beyond the scope of this article, but will give a much better experience if you are already implementing authentication.\n\n\n----------\n\n**Note**\nWhy the names *join* and *part*? It’s a throwback to the IRC specification. The names aren’t important at all - as long as they are distinct from each other, and consistent with what the client expects.\n\n----------\n\nBefore we can start the application, we need a Pusher configuration file. This goes in `pusher.json` and looks like this:\n\n```\n    {\n        \"appId\":\"SOME_APP_ID\",\n        \"key\":\"SOME_APP_KEY\",\n        \"secret\":\"SOME_APP_SECRET\",\n        \"cluster\":\"SOME_CLUSTER\",\n        \"encrypted\":true\n    }\n```\n\nThe values used here are exactly the ones taken from the Pusher application config we saw above.\n\n### Starting the server\nWe can now start this up and test it out. Starting it up is simply done by executing `index.js`:\n\n```\n    \u003e node index.js\n    App listening on port 4000\n```\n\nIf we then use a REST Client to interact with the server, by sending the appropriate messages to our server.\n\n![chat-app-react-native-test-server](//images.contentful.com/1es3ne0caaid/9ujxp3oRBC0gk8UkEEKmg/7d8f511d5b6dd85f6d6c237357f22cca/chat-app-react-native-test-server.png)\n\nDoing so will cause the correct messages to appear in the Debug Console in the Pusher Dashboard, proving that they are coming through correctly. \n\n![chat-app-react-native-view-pusher-message](//images.contentful.com/1es3ne0caaid/6EJ1Ea4i1UWcUuSQIsUGUw/e995486f1dd088181401ff6771f2a13b/chat-app-react-native-view-pusher-message.png)\n\nYou can do the same for the other messages, and see how it looks:\n\n![chat-app-react-native-view-pusher-messages](//images.contentful.com/1es3ne0caaid/2D7H9JCTfOuSgmWEgm4AS2/206acafd09cdea2d32f2fb58725d1a92/chat-app-react-native-view-pusher-messages.png)\n\n## Creating the client application\n\nOur client application is going to be built using React Native, and leveraging the `create-react-native-app` scaffolding tool to do a lot of work for us. This first needs to be installed onto the system, as follows:\n\n```\n    \u003e npm install -g create-react-native-app\n```\n\nOnce installed we can then create our application, ready for working on:\n\n```\n    \u003e create-react-native-app client\n    Creating a new React Native app in client.\n    \n    Using package manager as npm with npm interface.\n    Installing packages. This might take a couple minutes.\n    Installing react-native-scripts...\n    \n    npm WARN react-redux@5.0.6 requires a peer of react@^0.14.0 || ^15.0.0-0 || ^16.0.0-0 but none was installed.\n    Installing dependencies using npm...\n    \n    npm WARN react-native-branch@2.0.0-beta.3 requires a peer of react@\u003e=15.4.0 but none was installed.\n    npm WARN lottie-react-native@1.1.1 requires a peer of react@\u003e=15.3.1 but none was installed.    \n    \n    Success! Created client at client\n    Inside that directory, you can run several commands:\n\n      npm start\n        Starts the development server so you can open your app in the Expo\n        app on your phone.\n    \n      npm run ios\n        (Mac only, requires Xcode)\n        Starts the development server and loads your app in an iOS simulator.\n    \n      npm run android\n        (Requires Android build tools)\n        Starts the development server and loads your app on a connected Android\n        device or emulator.\n    \n      npm test\n        Starts the test runner.\n    \n      npm run eject\n        Removes this tool and copies build dependencies, configuration files\n        and scripts into the app directory. If you do this, you can’t go back!\n    \n    We suggest that you begin by typing:\n\n      cd client\n      npm start\n   \n    Happy hacking!\n```\n\nWe can now start up the template application ensure that it works correctly. Starting it is a case of running `npm start` from the project directory:\n\n![chat-app-react-native-start-application](//images.contentful.com/1es3ne0caaid/6lOnR2VsdO44uumQu00KY/05e0a81ced530618fb64bdc21ac39d55/chat-app-react-native-start-application.png)\n\nAmongst other things, this shows a huge QR Code on the screen. This is designed for the Expo app on your mobile device to read in order to connect to the application. If we now load up Expo and scan this code with it, it will load the application for you to see:\n\n![chat-app-react-native-default-homescreen](//images.contentful.com/1es3ne0caaid/5nantNK54AKgCEYaccUOiC/45300e8ddaa41ae0801bb01c70c14424/chat-app-react-native-default-homescreen.png)\n\n### Adding a Login screen\nThe first thing we’re going to need is a screen where the user can enter a name to appear as. This is simply going to be a label and a text input field for now.\n\nTo achieve this, we are going to create a new React component that handles this. This will go in `Login.js` and look like this:\n\n```\n    import React from 'react';\n    import { StyleSheet, Text, TextInput, KeyboardAvoidingView } from 'react-native';\n    \n    export default class Login extends React.Component { // (1)\n      render() {\n        return (\n          \u003cKeyboardAvoidingView style={styles.container} behavior=\"padding\"\u003e // (2)\n            \u003cText\u003eEnter the name to connect as:\u003c/Text\u003e // (3)\n            \u003cTextInput autoCapitalize=\"none\" // (4)\n                       autoCorrect={false}\n                       autoFocus\n                       keyboardType=\"default\"\n                       maxLength={ 20 }\n                       placeholder=\"Username\"\n                       returnKeyType=\"done\"\n                       enablesReturnKeyAutomatically\n                       style={styles.username}\n                       onSubmitEditing={this.props.onSubmitName}\n                       /\u003e\n          \u003c/KeyboardAvoidingView\u003e\n        );\n      }\n    }\n    \n    const styles = StyleSheet.create({ // (5)\n      container: {\n        flex: 1,\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      username: {\n        alignSelf: 'stretch',\n        textAlign: 'center'\n      }\n    });\n```\n\nThis works as follows:\n\n1. Define our Login component that we are going to use\n2. Render the `KeyboardAvoidingView`. This is a special wrapper that understands the keyboard on the device and shifts things around so that they aren’t hidden underneath it\n3. Render some simple text as a label for the user\n4. Render a text input field that will collect the name the user wants to register as. When the user presses the Submit button this will call a provided callback to handle the fact\n5. Apply some styling to the components so that they look as we want them to\n\nWe then need to make use of this in our application. For now this is a simple case of updating `App.js` as follows:\n\n```\n    import React from 'react';\n    import Login from './Login';\n    \n    export default class App extends React.Component { // (1)\n      constructor(props) {\n        super(props); // (2)\n        this.handleSubmitName = this.onSubmitName.bind(this); // (3)\n        this.state = { // (4)\n          hasName: false\n        };\n      }\n    \n      onSubmitName(e) { // (5)\n        const name = e.nativeEvent.text;\n        this.setState({\n          name,\n          hasName: true\n        });\n      }\n    \n      render() { // (6)\n        return (\n          \u003cLogin onSubmitName={ this.handleSubmitName } /\u003e\n        );\n      }\n    }\n```\n\nThis is how this works:\n\n1. Define our application component\n2. We need a constructor to set up our initial state, so we need to pass the props up to the parent\n3. Add a local binding for handling when a name is submitted. This is so that the correct value for `this` is used\n4. Set the initial state of the component. This is the fact that no name has been selected yet. We’ll be making use of that later\n5. When a name is submitted, update the component state to reflect this\n6. Actually render the component. This only renders the Login view for now\n\nIf you left your application running then it will automatically reload. If not then restart it and you will see it now look like this:\n\n![chat-app-react-native-login-page](//images.contentful.com/1es3ne0caaid/4vaH8gMx2MCyKYKiSGiGMA/8eb74f105ce45bc460776597bc153b40/chat-app-react-native-login-page.png)\n\n### Managing the connection to Pusher\nOnce we’ve got the ability to enter a name, we want to be able to make use of it. This will be a Higher Order Component that manages the connection to Pusher but doesn’t render anything itself.\n\nFirstly we are going to need some more modules to actually support talking to Pusher. For this we are going to use the [pusher-js](https://github.com/pusher/pusher-js/) module, which has React Native support. This is important because React Native is not a full Node compatible environment, so the full [pusher module](https://www.npmjs.com/package/pusher) will not work correctly.\n\n```\n    \u003e npm install --save pusher-js\n```\n\nWe then need our component that will make use of this. Write a file `ChatClient.js`:\n\n```\n    import React from 'react';\n    import Pusher from 'pusher-js/react-native';\n    import { StyleSheet, Text, KeyboardAvoidingView } from 'react-native';\n    \n    import pusherConfig from './pusher.json';\n    \n    export default class ChatClient extends React.Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n          messages: []\n        };\n        this.pusher = new Pusher(pusherConfig.key, pusherConfig); // (1)\n    \n        this.chatChannel = this.pusher.subscribe('chat_channel'); // (2)\n        this.chatChannel.bind('pusher:subscription_succeeded', () =\u003e { // (3)\n          this.chatChannel.bind('join', (data) =\u003e { // (4)\n            this.handleJoin(data.name);\n          });\n          this.chatChannel.bind('part', (data) =\u003e { // (5)\n            this.handlePart(data.name);\n          });\n          this.chatChannel.bind('message', (data) =\u003e { // (6)\n            this.handleMessage(data.name, data.message);\n          });\n        });\n        \n        this.handleSendMessage = this.onSendMessage.bind(this); // (9)\n      }\n    \n      handleJoin(name) { // (4)\n        const messages = this.state.messages.slice();\n        messages.push({action: 'join', name: name});\n        this.setState({\n          messages: messages\n        });\n      }\n      \n      handlePart(name) { // (5)\n        const messages = this.state.messages.slice();\n        messages.push({action: 'part', name: name});\n        this.setState({\n          messages: messages\n        });\n      }\n      \n      handleMessage(name, message) { // (6)\n        const messages = this.state.messages.slice();\n        messages.push({action: 'message', name: name, message: message});\n        this.setState({\n          messages: messages\n        });\n      }\n    \n      componentDidMount() { // (7)\n        fetch(`${pusherConfig.restServer}/users/${this.props.name}`, {\n          method: 'PUT'\n        });\n      }\n    \n      componentWillUnmount() { // (8)\n        fetch(`${pusherConfig.restServer}/users/${this.props.name}`, {\n          method: 'DELETE'\n        });\n      }\n    \n      onSendMessage(text) { // (9)\n        const payload = {\n            message: text\n        };\n        fetch(`${pusherConfig.restServer}/users/${this.props.name}/messages`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(payload)\n        });\n      }\n    \n      render() { // (10)\n        const messages = this.state.messages;\n    \n        return (\n          \u003cText\u003eMessages: { messages.length }\u003c/Text\u003e\n        );\n      }\n    }\n```\n\nThere’s an awful lot going on here, so let’s go over it all:\n\n1. This is our Pusher client. The configuration for this is read from an almost identical to the one on the server - the only difference is that this file also has the URL to that server, but that’s not used by Pusher\n2. This is where we subscribe to the Pusher channel that our Server is adding all of the messages to\n3. This is a callback when the subscribe has been successful, since it’s an asynchronous event\n4. This is a callback registered whenever we receive a `join` message on the channel, and it adds a message to our list\n5. This is a callback registered whenever we receive a `part` message on the channel, and it adds a message to our list\n6. This is a callback registered whenever we receive a `message` message on the channel, and it adds a message to our list\n7. When the component first mounts, we send a message to the server informing them of the user that has connected\n8. When the component unmounts, we send a message to the server informing them of the usre that has left\n9. This is the handler for sending a message to the server, which will be hooked up soon\n10. For now we just render a counter of the number of messages received\n\nThis isn’t very fancy yet, but it already does all of the communications with both our server and with Pusher to get all of the data flow necessary.\nNote that to communicate with our server we use the [Fetch API](https://developer.mozilla.org/en/docs/Web/API/Fetch_API), which is a standard part of the React Native environment. We do need the address of the server, which we put into our `pusher.json` file to configure it. This file then looks as follows here:\n\n```\n    {\n        \"appId\":\"SOME_APP_ID\",\n        \"key\":\"SOME_APP_KEY\",\n        \"secret\":\"SOME_APP_SECRET\",\n        \"cluster\":\"SOME_CLUSTER\",\n        \"encrypted\":true,\n        \"restServer\":\"http://192.168.0.15:4000\"\n    }\n```\n\n----------\n\n**Note**\nWhen you actually deploy this for real, the *restServer* property will need to be changed to the address of the live server.\n\n----------\n\n### Chat Display\nThe next thing that we need is a way to display all of the messages that happen in our chat. This will be a list containing every message, displaying when people join, when they leave and what they said. This will look like this:\n\n\n```\n    import React from 'react';\n    import { StyleSheet, Text, TextInput, FlatList, KeyboardAvoidingView } from 'react-native';\n    import { Constants } from 'expo';\n    \n    export default class ChatView extends React.Component {\n      constructor(props) {\n        super(props);\n    \n        this.handleSendMessage = this.onSendMessage.bind(this);\n      }\n    \n      onSendMessage(e) { // (1)\n        this.props.onSendMessage(e.nativeEvent.text);\n        this.refs.input.clear();\n      }\n    \n      render() { // (2)\n        return (\n          \u003cKeyboardAvoidingView style={styles.container} behavior=\"padding\"\u003e\n            \u003cFlatList data={ this.props.messages } \n                      renderItem={ this.renderItem }\n                      styles={ styles.messages } /\u003e\n            \u003cTextInput autoFocus\n                       keyboardType=\"default\"\n                       returnKeyType=\"done\"\n                       enablesReturnKeyAutomatically\n                       style={ styles.input }\n                       blurOnSubmit={ false }\n                       onSubmitEditing={ this.handleSendMessage }\n                       ref=\"input\"\n                       /\u003e\n          \u003c/KeyboardAvoidingView\u003e\n        );\n      }\n    \n      renderItem({item}) { // (3)\n        const action = item.action;\n        const name = item.name;\n    \n        if (action == 'join') {\n            return \u003cText style={ styles.joinPart }\u003e{ name } has joined\u003c/Text\u003e;\n        } else if (action == 'part') {\n            return \u003cText style={ styles.joinPart }\u003e{ name } has left\u003c/Text\u003e;\n        } else if (action == 'message') {\n            return \u003cText\u003e{ name }: { item.message }\u003c/Text\u003e;\n        }\n      }\n    }\n    \n    const styles = StyleSheet.create({\n      container: {\n        flex: 1,\n        backgroundColor: '#fff',\n        alignItems: 'flex-start',\n        justifyContent: 'flex-start',\n        paddingTop: Constants.statusBarHeight\n      },\n      messages: {\n        alignSelf: 'stretch'\n      },\n      input: {\n        alignSelf: 'stretch'\n      },\n      joinPart: {\n        fontStyle: 'italic'\n      }\n    });\n```\n\nThis works as follows:\n\n1. When the user submits a new message, we call the handler we were provided, and then clear the input box so that they can type the next message\n2. Render a *FlatList* of messages, and an input box for the user to type their messages into. Each message is rendered by the *renderItem* function\n3. Actually render the messages in the list into the appropriate components. Every message is in a *Text* component, with the actual text and the styling depending on the type of message.\n\nWe then need to update the *render* method of the *ChatClient.js* component to look as follows:\n\n```\n      render() {\n        const messages = this.state.messages;\n    \n        return (\n            \u003cChatView messages={ messages } onSendMessage={ this.handleSendMessage } /\u003e\n        );\n      }\n```\n\nThis is simply so that it renders our new *ChatView* in place of just the number of messages received.\n\nFinally, we need to update our main view to display the Chat Client when logged in. Update *App.js* to look like this:\n\n```\n      render() {\n        if (this.state.hasName) {\n          return (\n            \u003cChatClient name={ this.state.name } /\u003e\n          );\n        } else {\n          return (\n            \u003cLogin onSubmitName={ this.handleSubmitName } /\u003e\n          );\n        }\n      }\n```\n\nThe end result of this will look something like this:\n\n![chat-app-react-native-demo](//images.contentful.com/1es3ne0caaid/5wRZEV2DjqoWk0mWUIQ6aI/fa20729730a5845efe2cadf3a6cf1246/chat-app-react-native-demo.gif)\n\n## Conclusion\n\nThis article has shown an introduction to the fantastic React Native framework for building universal mobile applications, and shown how it can be used in conjunction with the Pusher service for handling realtime messaging between multiple different clients.\n\nAll of the source code for this application is available at [Github](https://github.com/sazzer/react-native-chat).","metaTitle":"Build a chat app with React Native","metaDescription":"In this tutorial, build a simple chat app with React Native and Node.js."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4fnStfcnGMaGCokSCMYCiE","type":"Entry","createdAt":"2018-04-23T15:04:56.770Z","updatedAt":"2018-04-23T15:11:30.223Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a ride hailing app with React Native","url":"ride-hailing-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/grabClone","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2017-08-04","description":"In this tutorial, we will cover how to build a ride hailing app using React Native and Node.js.","prerequisite":"You will need the following installed on your machine: Android Studio, React Native and Genymotion. You will also need an Android device, and a Pusher account.","content":"In this tutorial, we’ll create a ride hailing app(similar to Uber or Lyft) with React Native and Pusher.\nReact Native will be used to create an Android app for both the driver and the passenger. Pusher will be used for realtime communication between the two.\n\n\n## App flow\n\nThe clone that we’re going to create will pretty much have the same flow as any ride hailing app out there: passenger books a ride → app looks for a driver → driver accepts the request → driver picks up passenger → driver drives to destination → passenger pays the driver.\n\n- The app determines the user’s location and shows it in a map (note: GPS needs to be enabled at this point). \n\n![ride-hailing-react-native-1](//images.contentful.com/1es3ne0caaid/3lGtmHhoQMswewIyQoukqm/f3b16bf63fb7b331383313ed0a5ed9a5/ride-booking-app-react-native-1.png)\n\n- From the passenger app, the user clicks on “Book a Ride”.\n\n- A modal will open that will allow the passenger to pick the place where they want to go.\n\n![ride-hailing-react-native-2](//images.contentful.com/1es3ne0caaid/1KPTnqIR3OYM6eeCEYOuW4/4da9d54c44eb0a27d4195aae876768bd/ride-booking-app-react-native-2.png)\n\n- The app asks the passenger to confirm their destination.\n\n![ride-hailing-react-native-3](//images.contentful.com/1es3ne0caaid/N5RnV9XN4GUIKa4IOOgYm/c19c3a3118153ec249932f014fe578d5/ride-booking-app-react-native-3.png)\n\n- Once confirmed, the app sends a request to the driver app to pick up the passenger. A loading animation is shown while the app is waiting for a driver to accept the request.\n\n![ride-hailing-react-native-4](//images.contentful.com/1es3ne0caaid/QU6AU3DDkkkcW0yKUkseC/3c3b49544f03aef98e51317555fe247f/ride-booking-app-react-native-4.png)\n\n- The driver app receives the request. From here, the driver can either accept or reject the request.\n\n![ride-hailing-react-native-5](//images.contentful.com/1es3ne0caaid/5M6ViDbHtCK0qE6mq62uKs/c1b43321e4f36230eaef99a7b3f2946f/ride-booking-app-react-native-5.png)\n\n- Once the driver accepts the request, the driver’s details are shown in the passenger app.\n\n![ride-hailing-react-native-6](//images.contentful.com/1es3ne0caaid/6I0sY1Xl0AyOC8IKkKUkgq/ecaebf16dafe573b6523388359c57f9f/ride-booking-app-react-native-6.png)\n\n- The passenger app shows the current location of the driver on the map.\n\n![ride-hailing-react-native-7](//images.contentful.com/1es3ne0caaid/5eG7JXP27YuWksCImsmyOS/dc5598ed883a6eb99cc63a9ed678cd85/ride-booking-app-react-native-7.png)\n\n- Once the driver is within 50 meters of the passenger’s location, they will see an alert saying that the driver is near.\n- Once the driver is within 20 meters of the passenger’s location, the driver app sends a message to the passenger app that the driver is almost there.\n\n![ride-hailing-react-native-8](//images.contentful.com/1es3ne0caaid/2ilAvtad84cSKGEE26u6Ei/70decc6ec70ca1f70f0a88f7673c9b2d/ride-booking-app-react-native-8.png)\n\n- After picking up the passenger, the driver drives to their destination.\n- Once the driver is within 20 meters of their destination, the driver app sends a message to the passenger app that they’re very near their destination. \n\n![ride-hailing-react-native-9](//images.contentful.com/1es3ne0caaid/tP606fyRcyswesYqCS4aM/c619165d0c92879fe2244fab574001cf/ride-booking-app-react-native-9.png)\n\nAt this point, the ride ends and the passenger can book another ride. The driver is also free to accept any incoming ride request.\n\n\n## Prerequisites\n\n\n- [**Pusher Account**](https://pusher.com/) - [signup for a Pusher account](https://dashboard.pusher.com/accounts/sign_up) or [login with your existing one](https://dashboard.pusher.com/accounts/sign_in). Once you’ve created an account, create a new app → select “React” for front-end technology → select “Node.js” for back-end technology. \n\n![ride-hailing-react-native-create-app](//images.contentful.com/1es3ne0caaid/2i8c2xGReUuykQI0wCEEiq/cb75380059f0a8e25cba07528338a212/ride-booking-app-react-native-create-app.png)\n\nNext, click on the “App Settings” tab and check “Enable client events”. This allows us to have the driver and passenger app directly communicate with each other. \n\n![ride-hailing-react-native-app-settings](//images.contentful.com/1es3ne0caaid/4LmOAz8kAggQymiU4cqIq4/821cb22fd4b30e416fa829bccb6009d3/ride-booking-app-react-native-app-settings.png)\n\nLast, click on the “App keys” and copy the credentials. If you’re worried about pricing, [the Pusher sandbox plan is pretty generous](https://dashboard.pusher.com/plans) so you can use it for free when testing the app.\n\n- [**Genymotion**](https://www.genymotion.com/fun-zone/) - for testing the driver app. We’re using this instead of the default Android emulator because it comes with a GPS simulation tool that allows us to search for a specific location and have it used as the location of the emulated device. It uses Google maps as the interface and you can move the marker as well. This allows us to simulate a moving vehicle. Once Genymotion is installed, you need to login to your account in order to add a device. For me I’ve installed Google Nexus 5x for testing. \n\n![ride-hailing-react-native-genymotion](//images.contentful.com/1es3ne0caaid/4B6XeSUkA8qSOkimswQsek/74dadbd979cc14bdb813b4a2a365a113/ride-booking-app-react-native-genymotion.png)\n\n- **Android Device** - this will be used for testing the passenger app. You need Android 6.0 or higher.\n\n![ride-hailing-react-native-sdk-platform](//images.contentful.com/1es3ne0caaid/2dUjpZ2rkoWowEwQoWYaqQ/1157ce5b341ba62c0e4577d982611d7c/ride-booking-app-react-native-sdk-platform.png)\n\nWhile you’re there, click on the “SDK Tools” and make sure that you also have the same tools installed as mine:\n\n![ride-hailing-react-native-sdk-tools](//images.contentful.com/1es3ne0caaid/1FuIv7YcUk8ogq0wceQe6q/eb517ca00c6fc8afe6dfd5ced731896b/ride-booking-app-react-native-sdk-tools.png)\n\n\n## Creating the Auth server\n\nFirst, let’s work on the auth server. This is required because we will be sending [client events](https://pusher.com/docs/client_api_guide/client_events) from the app, client events requires the Pusher channel to be private, and private channels have restricted access. This is where the auth server comes in. It serves as a way for Pusher to know if a user that’s trying to connect is indeed a registered user of the app.\n\nStart by installing the dependencies:\n\n```\n    npm install --save express body-parser pusher\n```\n\nNext, create a `server.js` file and add the following code:\n\n``` javascript\n    var express = require('express');\n    var bodyParser = require('body-parser');\n    var Pusher = require('pusher');\n    \n    var app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    var pusher = new Pusher({ // connect to pusher\n      appId: process.env.APP_ID, \n      key: process.env.APP_KEY, \n      secret:  process.env.APP_SECRET,\n      cluster: process.env.APP_CLUSTER, \n    });\n    \n    app.get('/', function(req, res){ // for testing if the server is running\n      res.send('all is well...');\n    });\n    \n    // for authenticating users\n    app.get(\"/pusher/auth\", function(req, res) {\n      var query = req.query;\n      var socketId = query.socket_id;\n      var channel = query.channel_name;\n      var callback = query.callback;\n    \n      var auth = JSON.stringify(pusher.authenticate(socketId, channel));\n      var cb = callback.replace(/\\\"/g,\"\") + \"(\" + auth + \");\";\n    \n      res.set({\n        \"Content-Type\": \"application/javascript\"\n      });\n    \n      res.send(cb);\n    });\n    \n    app.post('/pusher/auth', function(req, res) {\n      var socketId = req.body.socket_id;\n      var channel = req.body.channel_name;\n      var auth = pusher.authenticate(socketId, channel);\n      res.send(auth);\n    });\n    \n    var port = process.env.PORT || 5000;\n    app.listen(port);\n```\n\nI’m no longer going to go into detail what the code above does since its already explained in the docs for [Authenticating Users](https://pusher.com/docs/authenticating_users). \nTo keep things simple, I haven’t added the code to check if a user really exists in a database. You can do that in the `/pusher/auth`  endpoint by checking if a username exists. Here’s an example:\n\n``` javascript\n    var users = ['luz', 'vi', 'minda'];\n    var username = req.body.username;\n    \n    if(users.indexOf(username) !== -1){\n      var socketId = req.body.socket_id;\n      var channel = req.body.channel_name;\n      var auth = pusher.authenticate(socketId, channel);\n      res.send(auth);\n    }\n    \n    // otherwise: return error\n```\n\nDon’t forget to pass in the `username` when connecting to Pusher on the client-side later on.\n\nTry running the server once that’s done:\n\n```\n    node server.js\n```\n\nAccess `http://localhost:5000` on your browser to see if it works.\n\n\n## Deploying the Auth server\n\nSince Pusher will have to connect to the auth server, it needs to be accessible from the internet. \nYou can use [now.sh](https://zeit.co/now) to deploy the auth server. You can install it with the following command:\n\n```\n    npm install now\n```\n\nOnce installed, you can now navigate to the folder where you have the `server.js` file and execute `now`. You’ll be asked to enter your email and verify your account. \n\nOnce your account is verified, execute the following to add your Pusher app settings as environment variables to your now.sh account so you can use it from inside the server:\n\n\n``` javascript\n    now secret add pusher_app_id YOUR_PUSHER_APP_ID\n    now secret add pusher_app_key YOUR_PUSHER_APP_KEY\n    now secret add pusher_app_secret YOUR_PUSHER_APP_SECRET\n    now secret add pusher_app_cluster YOUR_PUSHER_APP_CLUSTER\n```\n\nNext, deploy the server while supplying the secret values that you’ve added:\n\n```\n    now -e APP_ID=@pusher_app_id -e APP_KEY=@pusher_app_key -e APP_SECRET=@pusher_app_secret APP_CLUSTER=@pusher_app_cluster\n```\n\nThis allows you to access your Pusher app settings from inside the server like so:\n\n``` javascript\n    process.env.APP_ID\n```\n\nThe deploy URL that now.sh returns is the URL that you’ll use later on to connect the app to the auth server.\n\n\n## Creating the driver app\n\n\nFirst, create a new React Native app:\n\n``` javascript\n    react-native init grabDriver\n```\n\n### Installing the dependencies\n\nOnce that’s done, navigate inside the `grabDriver`  directory and install the libraries that we’ll need. This includes [pusher-js](https://github.com/pusher/pusher-js) for working with Pusher, [React Native Maps](https://github.com/airbnb/react-native-maps/) for displaying a map, and [React Native Geocoding](https://github.com/marlove/react-native-geocoding) for reverse-geocoding coordinates to the actual name of a place: \n\n```\n    npm install --save pusher-js react-native-maps react-native-geocoding\n```\n\nOnce all the libraries are installed, React Native Maps needs some additional steps in order for it to work. First is linking the project resources:\n\n``` javascript\n    react-native link react-native-maps\n```\n\nNext, you need to create a Google project, get an API key from the [Google developer console](https://console.developers.google.com/apis/credentials), and enable the [Google Maps Android API](https://console.developers.google.com/apis/api/maps-android-backend.googleapis.com/overview) and [Google Maps Geocoding API](https://console.developers.google.com/apis/api/geocoding-backend.googleapis.com/overview). After that, open the `android\\app\\src\\main\\AndroidManifest.xml` file in your project directory. Under the `\u003capplication\u003e` tag, add a `\u003cmeta-data\u003e` containing the server API key.\n\n``` javascript\n    \u003capplication\u003e\n        \u003cmeta-data\n          android:name=\"com.google.android.geo.API_KEY\"\n          android:value=\"YOUR GOOGLE SERVER API KEY\"/\u003e\n    \u003c/application\u003e\n```\n\nWhile you’re there, add the following below the default permissions. This allows us to check for network status and request for Geolocation data from the device.\n\n``` javascript\n    \u003cuses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/\u003e\n    \u003cuses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" /\u003e\n```\nAlso make sure that it's targeting the same API version as the device you installed with Genymotion. As I’ve said earlier, if its version 23 or above you won’t really need to do anything, but if its lower than that then it has to be exact for the app to work.\n\n``` javascript\n    \u003cuses-sdk\n            android:minSdkVersion=\"16\"\n            android:targetSdkVersion=\"23\" /\u003e\n```\n\nLastly, since we’ll be primarily using Genymotion for testing the driver app, you need to follow the [instructions here](https://www.genymotion.com/help/desktop/faq/#google-play-services).\n\nWe need to do this because the React Native Maps library primarily uses Google Maps. We need to add Google Play Services in order for it to work. Unlike most Android phones which already comes with this installed, Genymotion doesn’t have it by default due to intellectual property reasons. Thus, we need to manually install it.\n\nIf you’re reading this sometime after it was published, be sure to check out the [Installation docs](https://github.com/airbnb/react-native-maps/blob/master/docs/installation.md) to make sure you’re not missing anything.\n\n### Coding the driver app\n\nNow you’re ready to start coding the app. Start by opening the `index.android.js` file and replace the default code with the following:\n\n``` javascript\n    import { AppRegistry } from 'react-native';\n    import App from './App';\n    AppRegistry.registerComponent('grabDriver', () =\u003e App);\n```\n\nWhat this does is importing the `App` component which is the main component for the app. It is then registered as the default component so it will be rendered on the screen.\n\nNext, create the `App.js` file and import the things we need from the React Native package:\n\n``` javascript\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      Text,\n      View,\n      Alert\n    } from 'react-native';\n```\n\nAlso, import the third-party libraries that we installed earlier:\n\n``` javascript\n    import Pusher from 'pusher-js/react-native';\n    import MapView from 'react-native-maps';\n    \n    import Geocoder from 'react-native-geocoding';\n    Geocoder.setApiKey('YOUR GOOGLE SERVER API KEY');\n```\n\nLastly, import the `helpers` file:\n\n``` javascript\n    import { regionFrom, getLatLonDiffInMeters } from './helpers';\n```\n\nThe `helpers.js` file contains the following:\n\n``` javascript\n    export function regionFrom(lat, lon, accuracy) {\n      const oneDegreeOfLongitudeInMeters = 111.32 * 1000;\n      const circumference = (40075 / 360) * 1000;\n    \n      const latDelta = accuracy * (1 / (Math.cos(lat) * circumference));\n      const lonDelta = (accuracy / oneDegreeOfLongitudeInMeters);\n    \n      return {\n        latitude: lat,\n        longitude: lon,\n        latitudeDelta: Math.max(0, latDelta),\n        longitudeDelta: Math.max(0, lonDelta)\n      };\n    } \n    \n    export function getLatLonDiffInMeters(lat1, lon1, lat2, lon2) {\n      var R = 6371; // Radius of the earth in km\n      var dLat = deg2rad(lat2-lat1);  // deg2rad below\n      var dLon = deg2rad(lon2-lon1); \n      var a = \n        Math.sin(dLat/2) * Math.sin(dLat/2) +\n        Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * \n        Math.sin(dLon/2) * Math.sin(dLon/2)\n        ; \n      var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \n      var d = R * c; // Distance in km\n      return d * 1000;\n    }\n    \n    function deg2rad(deg) {\n      return deg * (Math.PI/180)\n    }\n```\n\nThese functions are used for getting the latitude and longitude delta values needed by the React Native Maps library to display a map. The other function (`getLatLonDiffInMeters`) is used for determining the distance in meters between two coordinates. Later on, this will allow us to inform the user’s whether they’re already near each other or when they’re near their destination.\n\nNext, create the main app component and declare the default states:\n\n``` javascript\n    export default class grabDriver extends Component {\n    \n      state = {\n        passenger: null, // for storing the passenger info\n        region: null, // for storing the current location of the driver\n        accuracy: null, // for storing the accuracy of the location\n        nearby_alert: false, // whether the nearby alert has already been issued\n        has_passenger: false, // whether the driver has a passenger (once they agree to a request, this becomes true)\n        has_ridden: false // whether the passenger has already ridden the vehicle\n      }\n    }\n    // next: add constructor code\n```\n\nInside the constructor,  initialize the variables that will be used throughout the app:\n\n``` javascript\n    constructor() {\n      super();\n    \n      this.available_drivers_channel = null; // this is where passengers will send a request to any available driver\n      this.ride_channel = null; // the channel used for communicating the current location\n      // for a specific ride. Channel name is the username of the passenger\n     \n      this.pusher = null; // the pusher client\n    }\n    \n    // next: add code for connecting to pusher\n```\n\nBefore the component is mounted, connect to the auth server that you created earlier. Be sure to replace the values for the pusher key, `authEndpoint` and `cluster`.\n\n``` javascript\n    componentWillMount() {\n      this.pusher = new Pusher('YOUR PUSHER KEY', {\n        authEndpoint: 'YOUR PUSHER AUTH SERVER ENDPOINT',\n        cluster: 'YOUR PUSHER CLUSTER',\n        encrypted: true\n      });\n      \n      // next: add code for listening to passenger requests\n    }\n```\n\nNow that you’ve connected to the auth server, you can now start listening for requests coming from the passenger app. The first step is to subscribe to a [private channel](https://pusher.com/docs/client_api_guide/client_private_channels). This channel is where all passengers and drivers subscribe to. In this case, its used by drivers to listen for ride requests. It needs to be a private channel because [client events](https://pusher.com/docs/client_api_guide/client_events#trigger-events) can only be triggered on private and presence channels due to security reasons. You know that it’s a private channel because of the `private-`  prefix. \n\n``` javascript\n    this.available_drivers_channel = this.pusher.subscribe('private-available-drivers'); // subscribe to \"available-drivers\" channel\n```\n\nNext, listen to the `client-driver-request` event. You know that this is a client event because of the `client-` prefix. Client events don't need server intervention in order to work, the messages are sent directly to from client to client. That’s the reason why we need an auth server to make sure all the users that are trying to connect are real users of the app.\n\nGoing back to the code, we listen for client events by calling the `bind` method on the channel that we subscribed to and passing in the name of the event as the first argument. The second argument is the function that you want to execute once this event is triggered from another client (from anyone using the passenger app to request a ride). In the code below, we show an alert message asking the driver if they want to accept the passenger. Note that the app assumes that there can only be one passenger at any single time.\n\n``` javascript\n    // listen to the \"driver-request\" event\n    this.available_drivers_channel.bind('client-driver-request', (passenger_data) =\u003e {\n      \n      if(!this.state.has_passenger){ // if the driver has currently no passenger\n        // alert the driver that they have a request\n        Alert.alert(\n          \"You got a passenger!\", // alert title\n          \"Pickup: \" + passenger_data.pickup.name + \"\\nDrop off: \" + passenger_data.dropoff.name, // alert body\n          [\n            {\n              text: \"Later bro\", // text for rejecting the request\n              onPress: () =\u003e {\n                console.log('Cancel Pressed');\n              },\n              style: 'cancel'\n            },\n            {\n              text: 'Gotcha!', // text for accepting the request\n              onPress: () =\u003e {\n                // next: add code for when driver accepts the request\n              }  \n            },\n          ],\n          { cancelable: false } // no cancel button\n        );\n    \n      }\n    \n    });\n```\n\nOnce the driver agrees to pick up the passenger, we subscribe to their private channel. This channel is reserved only for communication between the driver and the passenger, that’s why we’re using the unique passenger username as part of the channel’s name.\n\n``` javascript\n    this.ride_channel = this.pusher.subscribe('private-ride-' + passenger_data.username);\n```\n\nNot unlike the `available-drivers` channel, we’ll need to listen for when the subscription actually succeeded (`pusher:subscription_succeeded`) before we do anything else. This is because we’re going to immediately trigger a client event to be sent to the passenger. This event (`client-driver-response`) is a handshake event to let the passenger know that the driver they sent their request to is still available. If the passenger still hasn’t gotten a ride at that time, the passenger app triggers the same event to let the driver know that they’re still available for picking up. At this point, we update the state so that the UI changes accordingly.\n\n``` javascript\n    this.ride_channel.bind('pusher:subscription_succeeded', () =\u003e {\n       // send a handshake event to the passenger\n      this.ride_channel.trigger('client-driver-response', {\n        response: 'yes' // yes, I'm available\n      });\n      \n      // listen for the acknowledgement from the passenger\n      this.ride_channel.bind('client-driver-response', (driver_response) =\u003e {\n        \n        if(driver_response.response == 'yes'){ // passenger says yes\n    \n          //passenger has no ride yet\n          this.setState({\n            has_passenger: true,\n            passenger: {\n              username: passenger_data.username,\n              pickup: passenger_data.pickup,\n              dropoff: passenger_data.dropoff\n            }\n          });\n          \n          // next: reverse-geocode the driver location to the actual name of the place\n          \n        }else{\n          // alert that passenger already has a ride\n          Alert.alert(\n            \"Too late bro!\",\n            \"Another driver beat you to it.\",\n            [\n              {\n                text: 'Ok'\n              },\n            ],\n            { cancelable: false }\n          );\n        }\n    \n      });\n    \n    });\n```\n\nNext, we use the Geocoding library to determine the name of the place where the driver is currently at. Behind the scenes, this uses the Google Geocoding API and it usually returns the street name. Once we get a response back, we trigger the `found-driver` event to let the passenger know that the app has found a driver for them. This contains driver info such as the name and the current location.\n\n``` javascript\n    Geocoder.getFromLatLng(this.state.region.latitude, this.state.region.longitude).then(\n      (json) =\u003e {\n        var address_component = json.results[0].address_components[0];\n        \n        // inform passenger that it has found a driver\n        this.ride_channel.trigger('client-found-driver', { \n          driver: {\n            name: 'John Smith'\n          },\n          location: { \n            name: address_component.long_name,\n            latitude: this.state.region.latitude,\n            longitude: this.state.region.longitude,\n            accuracy: this.state.accuracy\n          }\n        });\n    \n      },\n      (error) =\u003e {\n        console.log('err geocoding: ', error);\n      }\n    );  \n    // next: add componentDidMount code\n```\n\nOnce the component is mounted, we use [React Native’s Geolocation API](https://facebook.github.io/react-native/docs/geolocation.html) to watch for location updates. The function that you pass to the `watchPosition` function gets executed everytime the location changes.\n\n``` javascript\n    componentDidMount() {\n      this.watchId = navigator.geolocation.watchPosition(\n        (position) =\u003e {\n         \n          var region = regionFrom(\n            position.coords.latitude, \n            position.coords.longitude, \n            position.coords.accuracy\n          );\n          // update the UI\n          this.setState({\n            region: region,\n            accuracy: position.coords.accuracy\n          });\n          \n          if(this.state.has_passenger \u0026\u0026 this.state.passenger){\n            // next: add code for sending driver's current location to passenger\n          }\n        },\n        (error) =\u003e this.setState({ error: error.message }),\n        { \n          enableHighAccuracy: true, // allows you to get the most accurate location\n          timeout: 20000, // (milliseconds) in which the app has to wait for location before it throws an error\n          maximumAge: 1000, // (milliseconds) if a previous location exists in the cache, how old for it to be considered acceptable \n          distanceFilter: 10 // (meters) how many meters the user has to move before a location update is triggered\n        },\n      );\n    }\n```\n\nNext, send the driver’s current location to the passenger. This will update the UI on the passenger app to show the current location of the driver. You’ll see how the passenger app binds to this event later on when we move on to coding the passenger app.\n\n``` javascript\n    this.ride_channel.trigger('client-driver-location', { \n      latitude: position.coords.latitude,\n      longitude: position.coords.longitude,\n      accuracy: position.coords.accuracy\n    });\n```\n\nNext, we want to inform both the passenger and the driver that they’re already near each other. For that, we use the `getLatLonDiffInMeters` function from the `helpers.js` file in order to determine the number of meters between the passenger and the driver. Since the driver already received the passenger location when they accepted the request, it’s only a matter of getting the current location of the driver and passing it to the `getLanLonDiffInMeters` function to get the difference in meters. From there, we simply inform the driver or the passenger based on the number of meters. Later on you’ll see how these events are received in the passenger app.\n\n``` javascript\n    var diff_in_meter_pickup = getLatLonDiffInMeters(\n      position.coords.latitude, position.coords.longitude, \n      this.state.passenger.pickup.latitude, this.state.passenger.pickup.longitude);\n    \n    if(diff_in_meter_pickup \u003c= 20){\n      \n      if(!this.state.has_ridden){\n        // inform the passenger that the driver is very near\n        this.ride_channel.trigger('client-driver-message', {\n          type: 'near_pickup',\n          title: 'Just a heads up',\n          msg: 'Your driver is near, let your presence be known!'\n        });\n    \n        /*\n        we're going to go ahead and assume that the passenger has rode \n        the vehicle at this point\n        */\n        this.setState({\n          has_ridden: true\n        });\n      }\n    \n    }else if(diff_in_meter_pickup \u003c= 50){\n      \n      if(!this.state.nearby_alert){\n        this.setState({\n          nearby_alert: true\n        });\n        /* \n        since the location updates every 10 meters, this alert will be triggered \n        at least five times unless we do this\n        */\n        Alert.alert(\n          \"Slow down\",\n          \"Your passenger is just around the corner\",\n          [\n            {\n              text: 'Gotcha!'\n            },\n          ],\n          { cancelable: false }\n        );\n    \n      }\n    \n    }\n    \n    // next: add code for sending messages when near the destination\n```\n\nAt this point, we assume that the driver has picked up the passenger and that they’re now heading to their destination. So this time we get the distance between the current location and the drop-off point. Once they’re 20 meters to the drop-off point, the driver app sends a message to the passenger that they’re very close to their destination. Once that’s done, we assume that the passenger will get off in a few seconds. So we unbind the events that we’re listening to and unsubscribe from the passenger’s private channel. This effectively cuts the connection between the driver and passenger app. The only connection that stays open is the `available-drivers` channel.\n\n``` javascript\n    var diff_in_meter_dropoff = getLatLonDiffInMeters(\n      position.coords.latitude, position.coords.longitude, \n      this.state.passenger.dropoff.latitude, this.state.passenger.dropoff.longitude);\n    \n    if(diff_in_meter_dropoff \u003c= 20){\n      this.ride_channel.trigger('client-driver-message', {\n        type: 'near_dropoff',\n        title: \"Brace yourself\",\n        msg: \"You're very close to your destination. Please prepare your payment.\"\n      });\n    \n      // unbind from passenger event\n      this.ride_channel.unbind('client-driver-response');\n      // unsubscribe from passenger channel \n      this.pusher.unsubscribe('private-ride-' + this.state.passenger.username);\n    \n      this.setState({\n        passenger: null,\n        has_passenger: false,\n        has_ridden: false\n      });\n    \n    }\n    \n    // next: add code for rendering the UI\n```\n\nThe UI for the driver app only displays the map and the markers for the driver and passenger.\n\n``` javascript\n    render() {\n      return (\n        \u003cView style={styles.container}\u003e\n          {\n            this.state.region \u0026\u0026 \n            \u003cMapView\n              style={styles.map}\n              region={this.state.region}\n            \u003e\n                \u003cMapView.Marker\n                  coordinate={{\n                  latitude: this.state.region.latitude, \n                  longitude: this.state.region.longitude}}\n                  title={\"You're here\"}\n                /\u003e\n                {\n                  this.state.passenger \u0026\u0026 !this.state.has_ridden \u0026\u0026 \n                  \u003cMapView.Marker\n                    coordinate={{\n                    latitude: this.state.passenger.pickup.latitude, \n                    longitude: this.state.passenger.pickup.longitude}}\n                    title={\"Your passenger is here\"}\n                    pinColor={\"#4CDB00\"}\n                  /\u003e\n                }\n            \u003c/MapView\u003e\n          }\n        \u003c/View\u003e\n      );\n    }\n    // next: add code when component unmounts\n```\n\nBefore the component unmounts, we stop the location watcher by calling the `clearWatch` method:\n\n``` javascript\n    componentWillUnmount() {\n      navigator.geolocation.clearWatch(this.watchId);\n    } \n```\n\nLastly, add the styles:\n\n``` javascript\n    const styles = StyleSheet.create({\n      container: {\n        ...StyleSheet.absoluteFillObject,\n        justifyContent: 'flex-end',\n        alignItems: 'center',\n      },\n      map: {\n        ...StyleSheet.absoluteFillObject,\n      },\n    });\n```\n\n## Creating the Passenger App\n\nThe passenger app is going to be pretty similar to the driver app so I’ll no longer go into detail on parts that are similar. Go ahead and create a  new app:\n\n```\n    react-native init grabClone\n```\n\n### Installing the Dependencies\n\nYou’d also need to install the same libraries plus a couple more:\n\n```\n    npm install --save pusher-js react-native-geocoding github:geordasche/react-native-google-place-picker react-native-loading-spinner-overlay react-native-maps\n```\n\nThe other two libraries are [Google Place Picker](https://github.com/q6112345/react-native-google-place-picker) and [Loading Spinner Overlay](https://github.com/joinspontaneous/react-native-loading-spinner-overlay). Though we’ve used a [fork](https://github.com/geordasche/react-native-google-place-picker) of the Google Place Picker because of a compatibility issue with React Native Maps that wasn’t fixed in the original repo yet.\n\nSince we’ve installed the same libraries, you can go back to the section where we did some additional configuration in order for the library to work. Come back here once you’ve done those.\n\nNext, the Google Place Picker also needs some additional configuration for it to work. First, open the `android/app/src/main/java/com/grabClone/MainApplication.java` file and add the following below the last import:\n\n``` javascript\n    import com.reactlibrary.RNGooglePlacePickerPackage;\n```\n \n Add the library that you just imported under the `getPackages()` function. While you’re there, also make sure that the `MapsPackage()` is listed as well.\n \n``` javascript\n    protected List\u003cReactPackage\u003e getPackages() {\n      return Arrays.\u003cReactPackage\u003easList(\n          new MainReactPackage(),\n          new MapsPackage(),\n          new RNGooglePlacePickerPackage() // \u003c- add this\n      );\n    }\n```\n\nNext, open the `android/settings.gradle` file and add these right above the `include ':app'` directive:\n\n``` javascript\n    include ':react-native-google-place-picker'\n    project(':react-native-google-place-picker').projectDir = new File(rootProject.projectDir,         '../node_modules/react-native-google-place-picker/android')\n```\n\nWhile you’re there, also make sure that the resources for React Native Maps are also added:\n\n``` javascript\n    include ':react-native-maps'\n    project(':react-native-maps').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-maps/lib/android')\n```\n\nNext, open the `android/app/build.gradle` file and add the following under the `dependencies`:\n\n``` javascript\n    dependencies {\n      compile project(':react-native-google-place-picker') // \u003c- add this\n    }\n```\n\nLastly, make sure that React Native Maps is also compiled:\n\n``` javascript\n    compile project(':react-native-maps')\n```\n\n### Coding the passenger app\n\nOpen the `index.android.js` file and add the following:\n\n``` javascript\n    import { AppRegistry } from 'react-native';\n    import App from './App';\n    AppRegistry.registerComponent('grabClone', () =\u003e App);\n```\n\nJust like the driver app, it also uses `App.js` as the main component. Go ahead and import the libraries. It also uses the same `helpers.js` file so you can copy it from the driver app as well.\n\n``` javascript\n    import React, { Component } from 'react';\n    import { StyleSheet, Text, View, Button, Alert } from 'react-native';\n    \n    import Pusher from 'pusher-js/react-native';\n    import RNGooglePlacePicker from 'react-native-google-place-picker';\n    import Geocoder from 'react-native-geocoding';\n    import MapView from 'react-native-maps';\n    import Spinner from 'react-native-loading-spinner-overlay';\n    \n    import { regionFrom, getLatLonDiffInMeters } from './helpers'; \n    \n    Geocoder.setApiKey('YOUR GOOGLE SERVER API KEY');\n```\n\nCreate the component and declare the default states:\n\n``` javascript\n    export default class App extends Component {\n      state = {\n        location: null, // current location of the passenger\n        error: null, // for storing errors\n        has_ride: false, // whether the passenger already has a driver which accepted their request\n        destination: null, // for storing the destination / dropoff info\n        driver: null, // the driver info\n        origin: null, // for storing the location where the passenger booked a ride\n        is_searching: false, // if the app is currently searching for a driver\n        has_ridden: false // if the passenger has already been picked up by the driver\n      };\n      \n      // next: add constructor code\n    }\n```\n\nTo keep things simple, we declare the username of the passenger in the constructor. We also initialize the Pusher channels:\n\n``` javascript\n    constructor() {\n      super();\n      this.username = 'wernancheta'; // the unique username of the passenger\n      this.available_drivers_channel = null; // the pusher channel where all drivers and passengers are subscribed to\n      this.user_ride_channel = null; // the pusher channel exclusive to the passenger and driver in a given ride\n      this.bookRide = this.bookRide.bind(this); // bind the function for booking a ride\n    }\n    // next: add bookRide() function\n```\n\nThe `bookRide()` function gets executed when the user taps on the “Book Ride” button. This opens a place picker which allows the user to pick their destination. Once a location is picked, the app sends a ride request to all drivers. As you have seen in the driver app earlier, this triggers an alert to show in the driver app which asks if the driver wants to accept the request or not. At this point the loader will keep on spinning until a driver accepts the request.\n\n``` javascript\n    bookRide() {\n    \n      RNGooglePlacePicker.show((response) =\u003e {\n        if(response.didCancel){\n          console.log('User cancelled GooglePlacePicker');\n        }else if(response.error){\n          console.log('GooglePlacePicker Error: ', response.error);\n        }else{\n          this.setState({\n            is_searching: true, // show the loader\n            destination: response // update the destination, this is used in the UI to display the name of the place\n          });\n          \n          // the pickup location / origin\n          let pickup_data = {\n            name: this.state.origin.name,\n            latitude: this.state.location.latitude,\n            longitude: this.state.location.longitude\n          };\n          \n          // the dropoff / destination\n          let dropoff_data = {\n            name: response.name,\n            latitude: response.latitude,\n            longitude: response.longitude\n          };\n          \n          // send a ride request to all drivers\n          this.available_drivers_channel.trigger('client-driver-request', {\n            username: this.username,\n            pickup: pickup_data,\n            dropoff: dropoff_data\n          });\n    \n        }\n      });\n    }\n    // next: add _setCurrentLocation() function\n```\n\nThe `_setCurrentLocation()` function gets the passenger’s current location. Note that here we’re using  `getCurrentPosition()` as opposed to `watchPosition()` which we used in the driver app earlier. The only difference between the two is that `getCurrentPosition()` only gets the location once. \n\n``` javascript\n    _setCurrentLocation() {\n    \n      navigator.geolocation.getCurrentPosition(\n        (position) =\u003e {\n          var region = regionFrom(\n            position.coords.latitude, \n            position.coords.longitude, \n            position.coords.accuracy\n          );\n          \n          // get the name of the place by supplying the coordinates      \n          Geocoder.getFromLatLng(position.coords.latitude, position.coords.longitude).then(\n            (json) =\u003e {\n              var address_component = json.results[0].address_components[0];\n              \n              this.setState({\n                origin: { // the passenger's current location\n                  name: address_component.long_name, // the name of the place\n                  latitude: position.coords.latitude,\n                  longitude: position.coords.longitude\n                },\n                location: region, // location to be used for the Map\n                destination: null, \n                has_ride: false, \n                has_ridden: false,\n                driver: null    \n              });\n    \n            },\n            (error) =\u003e {\n              console.log('err geocoding: ', error);\n            }\n          );\n    \n        },\n        (error) =\u003e this.setState({ error: error.message }),\n        { enableHighAccuracy: false, timeout: 10000, maximumAge: 3000 },\n      );\n    \n    }\n    \n    // next: add componentDidMount() function\n```\n\nWhen the component mounts, we want to set the current location of the passenger, connect to the auth server and subscribe to the two channels: available drivers and the passenger’s private channel for communicating only with the driver’s where the ride request was sent to.\n\n``` javascript\n    componentDidMount() {\n    \n      this._setCurrentLocation(); // set current location of the passenger\n      // connect to the auth server\n      var pusher = new Pusher('YOUR PUSHER API KEY', {\n        authEndpoint: 'YOUR AUTH SERVER ENDPOINT',\n        cluster: 'YOUR PUSHER CLUSTER',\n        encrypted: true\n      });\n      \n      // subscribe to the available drivers channel\n      this.available_drivers_channel = pusher.subscribe('private-available-drivers');\n      \n      // subscribe to the passenger's private channel\n      this.user_ride_channel = pusher.subscribe('private-ride-' + this.username);\n      \n      // next: add code for listening to handshake responses\n      \n    }\n```\n\nNext, add the code for listening to the handshake response by the driver. This is being sent from the driver app when the driver accepts a ride request. This allows us to make sure that the passenger is still looking for a ride. If the passenger responds with “yes” then that’s the only time that the driver sends their information.\n\n``` javascript\n    this.user_ride_channel.bind('client-driver-response', (data) =\u003e {\n      let passenger_response = 'no';\n      if(!this.state.has_ride){ // passenger is still looking for a ride\n        passenger_response = 'yes';\n      }\n    \n      // passenger responds to driver's response\n      this.user_ride_channel.trigger('client-driver-response', {\n        response: passenger_response\n      });\n    });\n    \n    // next: add listener for when a driver is found\n```\n\nThe driver sends their information by triggering the `client-found-driver` event. As you have seen in the driver app earlier, this contains the name of the driver as well as their current location.\n\n``` javascript\n    this.user_ride_channel.bind('client-found-driver', (data) =\u003e {\n      // the driver's location info  \n      let region = regionFrom(\n        data.location.latitude,\n        data.location.longitude,\n        data.location.accuracy \n      );\n    \n      this.setState({\n        has_ride: true, // passenger has already a ride\n        is_searching: false, // stop the loading UI from spinning\n        location: region, // display the driver's location in the map\n        driver: { // the driver location details\n          latitude: data.location.latitude,\n          longitude: data.location.longitude,\n          accuracy: data.location.accuracy\n        }\n      });\n      \n      // alert the passenger that a driver was found\n      Alert.alert(\n        \"Orayt!\",\n        \"We found you a driver. \\nName: \" + data.driver.name + \"\\nCurrent location: \" + data.location.name,\n        [\n          {\n            text: 'Sweet!'\n          },\n        ],\n        { cancelable: false }\n      );      \n    });\n    // next: add code for listening to driver's current location\n```\n\nAt this point, the passenger can now listen to location changes from the driver. We simply update the UI everytime this event is triggered:\n\n``` javascript\n    this.user_ride_channel.bind('client-driver-location', (data) =\u003e {\n      let region = regionFrom(\n        data.latitude,\n        data.longitude,\n        data.accuracy\n      );\n      \n      // update the Map to display the current location of the driver\n      this.setState({\n        location: region, // the driver's location\n        driver: {\n          latitude: data.latitude,\n          longitude: data.longitude\n        }\n      });\n    \n    });\n```\n\nNext is the event that is triggered on specific instances. It’s main purpose is to send updates to the passenger regarding the location of the driver (`near_pickup` ) and also when they’re already near the drop-off location (`near_dropoff`). \n\n``` javascript\n    this.user_ride_channel.bind('client-driver-message', (data) =\u003e {\n      if(data.type == 'near_pickup'){ // the driver is very near the pickup location\n        // remove passenger marker since we assume that the passenger has rode the vehicle at this point\n        this.setState({\n          has_ridden: true \n        });\n      }\n    \n      if(data.type == 'near_dropoff'){ // they're near the dropoff location\n        this._setCurrentLocation(); // assume that the ride is over, so reset the UI to the current location of the passenger\n      }\n      \n      // display the message sent from the driver app\n      Alert.alert(\n        data.title,\n        data.msg,\n        [\n          {\n            text: 'Aye sir!'\n          },\n        ],\n        { cancelable: false }\n      );        \n    });\n    \n    // next: render the UI\n```\n\nThe UI composed of the loading spinner (only visible when the app is searching for a driver), the header, the button for booking a ride, the passenger location (`origin`) and their destination, and the map which initially displays the current location of the user and then displays the current location of the driver once a ride has been booked.\n\n``` javascript\n    render() {\n    \n      return (\n        \u003cView style={styles.container}\u003e\n          \u003cSpinner \n              visible={this.state.is_searching} \n              textContent={\"Looking for drivers...\"} \n              textStyle={{color: '#FFF'}} /\u003e\n          \u003cView style={styles.header}\u003e\n            \u003cText style={styles.header_text}\u003eGrabClone\u003c/Text\u003e\n          \u003c/View\u003e\n          {\n            !this.state.has_ride \u0026\u0026 \n            \u003cView style={styles.form_container}\u003e\n              \u003cButton\n                onPress={this.bookRide}\n                title=\"Book a Ride\"\n                color=\"#103D50\"\n              /\u003e\n            \u003c/View\u003e\n          }\n          \n          \u003cView style={styles.map_container}\u003e  \n          {\n            this.state.origin \u0026\u0026 this.state.destination \u0026\u0026\n            \u003cView style={styles.origin_destination}\u003e\n              \u003cText style={styles.label}\u003eOrigin: \u003c/Text\u003e\n              \u003cText style={styles.text}\u003e{this.state.origin.name}\u003c/Text\u003e\n             \n              \u003cText style={styles.label}\u003eDestination: \u003c/Text\u003e\n              \u003cText style={styles.text}\u003e{this.state.destination.name}\u003c/Text\u003e\n            \u003c/View\u003e  \n          }\n          {\n            this.state.location \u0026\u0026\n            \u003cMapView\n              style={styles.map}\n              region={this.state.location}\n            \u003e\n              {\n                this.state.origin \u0026\u0026 !this.state.has_ridden \u0026\u0026\n                \u003cMapView.Marker\n                  coordinate={{\n                  latitude: this.state.origin.latitude, \n                  longitude: this.state.origin.longitude}}\n                  title={\"You're here\"}\n                /\u003e\n              }\n      \n              {\n                this.state.driver \u0026\u0026\n                \u003cMapView.Marker\n                  coordinate={{\n                  latitude: this.state.driver.latitude, \n                  longitude: this.state.driver.longitude}}\n                  title={\"Your driver is here\"}\n                  pinColor={\"#4CDB00\"}\n                /\u003e\n              }\n            \u003c/MapView\u003e\n          }\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nLastly, add the styles:\n\n``` javascript\n    const styles = StyleSheet.create({\n      container: {\n        ...StyleSheet.absoluteFillObject,\n        justifyContent: 'flex-end'\n      },\n      form_container: {\n        flex: 1,\n        justifyContent: 'center',\n        padding: 20\n      },\n      header: {\n        padding: 20,\n        backgroundColor: '#333',\n      },\n      header_text: {\n        color: '#FFF',\n        fontSize: 20,\n        fontWeight: 'bold'\n      },  \n      origin_destination: {\n        alignItems: 'center',\n        padding: 10\n      },\n      label: {\n        fontSize: 18\n      },\n      text: {\n        fontSize: 18,\n        fontWeight: 'bold',\n      },\n      map_container: {\n        flex: 9\n      },\n      map: {\n       flex: 1\n      },\n    });\n```\n\n## Running the app\n\nNow you’re ready to run the app. If you have two machines, this will allow you to enable logging (`console.log`) for both. But if you have only one machine then you have to run them in particular order: passenger app first and then driver app.\n\nGo ahead and connect your Android device to your computer and run the following command:\n\n```\n    react-native run-android\n```\n\nThis will compile, install and run the app on your device. Once its running, terminate the watcher and disconnect your device from the computer. \n\n![ride-hailing-react-native-package](//images.contentful.com/1es3ne0caaid/6m6sD1Tx6gSeu8SC4CEGQq/061d03bb334f732a9cb033e6ebbf9bb7/ride-booking-app-react-native-package.png)\n\nNext, open Genymotion and launch the device that you installed earlier. This time, run the driver app. Once the app runs you’ll see a blank screen. This is normal because the app needs a location in order to render something. You can do that by clicking on “GPS” located on the upper right-side of the emulator UI then enable GPS. \n\nYou can also click on the map button and select a specific location if you want:\n\n![ride-hailing-react-native-example](//images.contentful.com/1es3ne0caaid/23YvBXFgRWI02w0Aa8wUw8/7310ca01fc8efc15ce221ef51f20054a/ride-booking-app-react-native-example.png)\n\nOnce you’ve selected a location, the map UI in the app should show the same location that you selected.\n\nNext, you can now follow the steps on the **App Flow** section earlier.  Note that you can emulate a moving vehicle by clicking around the Genymotion Map UI. If a passenger has already booked a ride and the driver has accepted the request, it should start updating both the passenger app and the driver app of the current location of the driver.\n\nIf you’re using two machines, then you can simply run `react-native run-android` on both. One should be connected to your device and the other should have the Genymotion emulator open.\n\n## Conclusion\n\nThat’s it! In this tutorial you’ve learned how to make use of Pusher to create a ride hailing app. As you have seen, the app that you’ve built is pretty bare-bones. If you want you can add more features to the app and maybe use it on your own projects. The code for the completed app is available on [GitHub](https://github.com/anchetaWern/grabClone)","metaTitle":"Build a ride hailing app with React Native","metaDescription":"Learn how to build a ride hailing app similar to Uber, Lyft or Gett using React Native for the frontend, Node.js for the backend and Pusher for the realtime features."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5irLHqgPqwOAQAAsMy4eaa","type":"Entry","createdAt":"2018-02-22T15:02:46.047Z","updatedAt":"2020-06-19T13:10:58.479Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime React VR app","url":"realtime-reactvr","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"29U2yrruIQmo6UkY0MMsyK","type":"Entry","createdAt":"2018-02-13T11:27:38.132Z","updatedAt":"2018-02-14T10:08:48.377Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Esteban Herrera","url":"esteban-herrera","email":"estebanhb2@gmail.com","twitter":"https://twitter.com/eh3rrera","github":"https://github.com/eh3rrera/","guestWriter":true}}],"projectRepo":"https://github.com/eh3rrera/reactvr_musical","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4FiKU27gk88US4gKMGI222","type":"Entry","createdAt":"2018-02-12T15:08:02.376Z","updatedAt":"2018-02-26T12:31:12.773Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"AR-VR","url":"ar-vr","type":"use case"}}],"reviewDate":"2017-05-23","description":" Create a realtime React VR app with multi-user interaction using Pusher. ","prerequisite":"A basic understanding of React, Node.js and VR concepts are needed to follow this tutorial.","content":"In the Musical Forest, hitting a shape triggers a note, and using WebSockets, people can play music together in realtime. However, due to all the features and technologies used, the app is somewhat complicated (you can find the source code [here](https://github.com/googlecreativelab/webvr-musicalforest)). So, why not create a similar realtime React VR app with multi-user support using Pusher?\n\nHere’s how the React VR/Pusher version looks:\n\nhttps://www.youtube.com/watch?v=vm5vKh7h0b4\u0026\n\nA user can enter a channel identifier in the URL. When a 3D shape is hit, a sound will play and a Pusher event will be published so other users in the same channel can receive the event and the app can play that sound too.\n\nWe’ll have a Node.js backend to publish the events, so you should be familiar with JavaScript and React. If you’re not very familiar with some VR concepts or React VR.\n\nFor reference (or if you just want to try the app), you can find the React VR project [here](https://github.com/eh3rrera/reactvr_musical) and the Node.js backend [here](https://github.com/eh3rrera/server_pusher_reactvr_musical).\n\n## Setting up the React VR project\n\nLet’s start by installing (or updating) the React VR CLI tool:\n\n```\n    npm install -g react-vr-cli\n```\n\nNext, create a new React VR project:\n\n```\n    react-vr init musical-exp-react-vr-pusher\n```\n\nNow go to the directory it created and execute the following command to start the development server:\n\n```\n    cd musical-exp-react-vr-pusher\n    npm start\n```\n\nIn your browser, go to http://localhost:8081/vr/. Something like the following will show up:\n\n![realtime-reactvr-first-no-vr](//images.contentful.com/1es3ne0caaid/5La6roWIuWWOSCweySw6M4/dad82ad641cb0c011b811ec964a3b112/react-vr-app-first-no-vr.jpg)\n\nIf you’re using a compatible browser (like [Firefox Nightly](https://www.mozilla.org/en-US/firefox/channel/desktop/) on Windows), you should also see the *View in VR button* to view the app with a headset:\n\n![realtime-reactvr-first-vr](//images.contentful.com/1es3ne0caaid/1FSHGX4qvOqme2MMS484Wi/9869e13d5363dc88159d53459d6aaecd/react-vr-app-first-vr.jpg)\n\nNow let’s start coding our app.\n\n## Creating the background\n\nWe’re going to use an [equirectangular image](https://www.flickr.com/groups/equirectangular/) as the image background. The main characteristic of this type of images is that the width must be exactly twice the height, so open your favorite image editing software and create an image of size 4096x2048 with a gradient or color of your choice:\n\n![realtime-reactvr-background](//images.contentful.com/1es3ne0caaid/66ebZLTcCksGswsUQGOCqG/5caf88a38b909bcc51b69c6b570dd2c0/react-vr-app-background.png)\n\nCreate a new folder called `images` inside the `static_assets` directory in the root of your app and save your image there. Now open the file `index.vr.js` and replace the content of the `render` method with the following:\n\n```\n    render() {\n      return (\n        \u003cView\u003e\n          \u003cPano source={asset('images/background.jpg')} /\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nWhen you reload the page (or if you enable hot reloading), you should see something like this:\n\n![realtime-reactvr-background](//images.contentful.com/1es3ne0caaid/PdBMzzGlAOMQYuMC2mM2U/1a6b457f4f424629680c75fc502841ae/react-vr-app-background.gif)\n\nNow, to simulate a tree, we’re going to use a Cylinder. In fact, we’ll need a hundred of this to create a forest around the user. In the original Musical Forest, we can find the algorithm to generate the trees around the users in the [js/components/background-objects.js](https://github.com/googlecreativelab/webvr-musicalforest/blob/master/js/components/background-objects.js) file. If we adapt the code into a React component for our project, we can get this:\n\n```\n    import React from 'react';\n    import {\n      View,\n      Cylinder,\n    } from 'react-vr';\n    \n    export default ({trees, perimeter, colors}) =\u003e {\n      const DEG2RAD = Math.PI / 180;\n                    \n      return (\n        \u003cView\u003e\n          {Array.apply(null, {length: trees}).map((obj, index) =\u003e {\n              const theta = DEG2RAD * (index / trees) * 360;\n              const randomSeed = Math.random();\n              const treeDistance = randomSeed * 5 + perimeter;\n              const treeColor = Math.floor(randomSeed * 3);\n              const x = Math.cos(theta) * treeDistance;\n              const z = Math.sin(theta) * treeDistance;\n    \n              return (\n                \u003cCylinder\n                  key={index}\n                  radiusTop={0.3}\n                  radiusBottom={0.3}\n                  dimHeight={10}\n                  segments={10}\n                  style={{\n                    color: colors[treeColor],\n                    opacity: randomSeed,\n                    transform: [{scaleY : 2 + Math.random()}, {translate: [x, 3, z]},],\n                  }}\n                /\u003e\n              );\n          })}\n        \u003c/View\u003e\n      );\n    }\n```\n\nThis functional component takes three parameters:\n\n- `trees`, which indicates the number of trees the forest will have\n- `perimeter`, a value to control how far the trees will be rendered from the user\n- `colors`, an array with values for the trees.\n\nUsing `Array.apply(null, {length: trees})`, we can create an array of empty values to which we can apply the map function to render an array of cylinders with random colors, opacities and positions inside a component.\n\nWe can save this code in a file called `Forest.js` inside a `components` directory and use it inside of  `index.vr.js` in the following way:\n\n```\n    ...\n    import Forest from './components/Forest';\n    \n    export default class musical_exp_react_vr_pusher extends React.Component {\n      render() {\n        return (\n          \u003cView\u003e\n            \u003cPano source={asset('images/background.jpg')} /\u003e\n                    \n            \u003cForest trees={100} perimeter={15} colors={['#016549', '#87b926', '#b1c96b']} \n            /\u003e\n          \u003c/View\u003e\n        );\n      }\n    };\n    \n    ...\n```\n\nIn the browser, you should see something like this:\n\n![realtime-reactvr-trees](//images.contentful.com/1es3ne0caaid/mnyXNoYjBY8KG40WKs8AI/fe679240b368d22acd0b3afe841a867f/react-vr-app-trees.gif)\n\nGreat, our background is complete, now let’s add the 3D objects to play the sounds.\n\n## Creating the 3D shapes\n\nWe are going to have six 3D shapes and each will play six different sounds when clicked. Also, a little animation when the cursor enters and exits the shape will come in handy.\n\nTo do that, we’ll need a VR Button, an Antimated view, and a box, a Cylinder, and a Sphere for the shapes. However, as each shape is going to be different, let’s just encapsulate in a component what is the same. Save the following code in the file `components/SoundShape.js`:\n\n```\n    import React from 'react';\n    import {\n      VrButton,\n      Animated,\n    } from 'react-vr';\n    \n    export default class SoundShape extends React.Component {\n            \n      constructor(props) {\n        super(props);\n        this.state = {\n          bounceValue: new Animated.Value(0),\n        };\n      }\n      \n      animateEnter() {\n        Animated.spring(  \n          this.state.bounceValue, \n          {\n            toValue: 1, \n            friction: 4, \n          }\n        ).start(); \n      }\n    \n      animateExit() {\n        Animated.timing(\n          this.state.bounceValue,\n          {\n            toValue: 0,\n            duration: 50,\n          }\n        ).start();\n      }\n      \n      render() {\n        return (\n          \u003cAnimated.View\n            style={{\n              transform: [\n                {rotateX: this.state.bounceValue},\n              ],\n            }}\n          \u003e\n            \u003cVrButton\n              onEnter={()=\u003ethis.animateEnter()}\n              onExit={()=\u003ethis.animateExit()}\n            \u003e\n              {this.props.children}\n            \u003c/VrButton\u003e\n          \u003c/Animated.View\u003e\n        );\n      }\n    };\n```\n\nWhen the cursor enters the button area, `Animated.spring` will change the value of `this.state.bounceValue` from `0` to `1` and show a bouncy effect. When the cursor exits the button area, `Animated.timing` will change the value of `this.state.bounceValue` from `1` to `0` in `50` milliseconds. For this to work, we wrap the `VrButton` with an `Animated.View` component that will change the `rotateX` transform of the `View` on each state change.\n\nIn `index.vr.js`, we can add a `SpotLight` (you can add any other type of light you want or change its properties) and use the `SoundShape` component to add a cylinder this way:\n\n```\n    ...\n    import {\n      AppRegistry,\n      asset,\n      Pano,\n      SpotLight,\n      View,\n      Cylinder,\n    } from 'react-vr';\n    import Forest from './components/Forest';\n    import SoundShape from './components/SoundShape';\n    \n    export default class musical_exp_react_vr_pusher extends React.Component {\n      render() {\n        return (\n          \u003cView\u003e\n            ...\n    \n            \u003cSpotLight intensity={1} style={{transform: [{translate: [1, 4, 4]}],}} /\u003e\n                    \n            \u003cSoundShape\u003e\n              \u003cCylinder\n                radiusTop={0.2}\n                radiusBottom={0.2}\n                dimHeight={0.3}\n                segments={8}\n                lit={true}\n                style={{\n                  color: '#96ff00', \n                  transform: [{translate: [-1.5,-0.2,-2]}, {rotateX: 30}],\n                }}\n              /\u003e\n            \u003c/SoundShape\u003e\n          \u003c/View\u003e\n        );\n      }\n    };\n    ...\n```\n\nOf course, you can change the properties of the shapes or even replace them with 3D Models.\n\nLet’s also add a pyramid (which is a cylinder with a zero op radius and four segments):\n\n```\n    \u003cSoundShape\u003e\n      \u003cCylinder\n        radiusTop={0}\n        radiusBottom={0.2}\n        dimHeight={0.3}\n        segments={4}\n        lit={true}\n        style={{\n          color: '#96de4e',\n          transform: [{translate: [-1,-0.5,-2]}, {rotateX: 30}],\n        }}\n      /\u003e\n    \u003c/SoundShape\u003e\n```\n\nA cube:\n\n```\n    \u003cSoundShape\u003e\n      \u003cBox\n        dimWidth={0.2}\n        dimDepth={0.2}\n        dimHeight={0.2}\n        lit={true}\n        style={{\n          color: '#a0da90', \n          transform: [{translate: [-0.5,-0.5,-2]}, {rotateX: 30}],\n        }}\n      /\u003e\n    \u003c/SoundShape\u003e\n```\n\nA box:\n\n```\n    \u003cSoundShape\u003e\n      \u003cBox\n        dimWidth={0.4}\n        dimDepth={0.2}\n        dimHeight={0.2}\n        lit={true}\n        style={{\n          color: '#b7dd60',\n          transform: [{translate: [0,-0.5,-2]}, {rotateX: 30}],\n        }}\n      /\u003e\n    \u003c/SoundShape\u003e\n```\n\nA sphere:\n\n```\n    \u003cSoundShape\u003e\n      \u003cSphere\n        radius={0.15}\n        widthSegments={20}\n        heightSegments={12}\n        lit={true}\n        style={{\n          color: '#cee030',\n          transform: [{translate: [0.5,-0.5,-2]}, {rotateX: 30}],\n        }}\n      /\u003e\n    \u003c/SoundShape\u003e\n```\n\nAnd a triangular prism:\n\n```\n    \u003cSoundShape\u003e\n      \u003cCylinder\n        radiusTop={0.2}\n        radiusBottom={0.2}\n        dimHeight={0.3}\n        segments={3}\n        lit={true}\n        style={{\n          color: '#e6e200',\n          transform: [{translate: [1,-0.2,-2]}, {rotateX: 30}],\n        }}\n      /\u003e\n    \u003c/SoundShape\u003e\n```\n\nAfter you add the necessary imports, save the file and refresh your browser. You should see something like this:\n\n![realtime-reactvr-shapes](//images.contentful.com/1es3ne0caaid/4SVr2sNcd2oCW2EYik4cA6/59c1debfd273a9776698855143c016ce/react-vr-app-shapes.gif)\n\nNow let’s add some sounds!\n\n## Adding sound\n\nFor audio, React VR supports `wav`, `mp3`, and `ogg` files, among others. You can find the complete list [here](https://github.com/facebook/react-vr/blob/master/ReactVR/js/Audio/getSupportedFormats.js).\n\nYou can go to [Freesound](https://www.freesound.org) or other similar sites to get some sound files. Download the ones you like and place them in the directory `static_assets/sounds`. For this project, we’re going to use six animal sounds, [something like a bird](https://www.freesound.org/people/funkymuskrat/sounds/217050/), [another bird](https://www.freesound.org/people/dobroide/sounds/59367/), [another bird](https://www.freesound.org/people/dobroide/sounds/34162/), [a cat](https://www.freesound.org/people/NoiseCollector/sounds/4911/), [a dog](https://www.freesound.org/people/NoiseCollector/sounds/4911/), and [a cricket](https://www.freesound.org/people/Adam_N/sounds/164482/) (as a quick note, I had to re-save this file lowering its bitrate so it can be played by React VR).\n\nFor our purposes, React VR give us three options to play a sound:\n\n- [VrSoundEffects](https://github.com/facebook/react-vr/blob/master/Libraries/Utilities/VrSoundEffects.js)\n- The [onClickSound](https://facebook.github.io/react-vr/docs/vrbutton.html#onclicksound) event of a VrButton\n- A Sound component\n\nHowever, only the Sound component supports 3D/positional audio so the left and right balance of the sound will change as the listener moves around the scene or turns their head. So let’s add it to our `SoundShape` component along with an `onClick` event to the `VrButton`:\n\n```\n    ...\n    import {\n      ...\n      Sound,\n    } from 'react-vr';\n    \n    export default class SoundShape extends React.Component {\n      ...\n      render() {\n        return (\n          \u003cAnimated.View\n            ...\n          \u003e\n            \u003cVrButton\n              onClick={() =\u003e this.props.onClick()}\n              ...\n            \u003e\n              ...\n            \u003c/VrButton\u003e\n            \u003cSound playerState={this.props.playerState} source={this.props.sound} /\u003e\n          \u003c/Animated.View\u003e\n        );\n      }\n    }\n```\n\nWe’re going to use a Media Player State to control the playing of the sound. Both will be passed as properties of the component.\n\nThis way, let’s define an array with this information in `index.vr.js`:\n\n```\n    ...\n    import {\n      ...\n      MediaPlayerState,\n    } from 'react-vr';\n    ...\n    \n    export default class musical_exp_react_vr_pusher extends React.Component {\n            \n      constructor(props) {\n        super(props);\n            \n            this.config = [\n              {sound: asset('sounds/bird.wav'), playerState: new MediaPlayerState({})},\n              {sound: asset('sounds/bird2.wav'), playerState: new MediaPlayerState({})},\n              {sound: asset('sounds/bird3.wav'), playerState: new MediaPlayerState({})},\n              {sound: asset('sounds/cat.wav'), playerState: new MediaPlayerState({})},\n              {sound: asset('sounds/cricket.wav'), playerState: new MediaPlayerState({})},\n              {sound: asset('sounds/dog.wav'), playerState: new MediaPlayerState({})},\n            ];\n      }\n      \n      ...\n    }\n```\n\nAnd a method to play a sound using the MediaPlayerState object when the right index is passed:\n\n```\n    ...\n    \n    export default class musical_exp_react_vr_pusher extends React.Component {\n            \n      ...\n      \n      onShapeClicked(index) {\n        this.config[index].playerState.play();\n      }\n      \n      ...\n    }\n```\n\nNow, we only need to pass all this information to our SoundShape components. So let’s group our shapes in an array and use a map function to generate the components:\n\n```\n    ...\n    \n    export default class musical_exp_react_vr_pusher extends React.Component {\n            \n      ...\n      \n      render() {\n        const shapes = [\n          \u003cCylinder\n            ...\n          /\u003e,\n          \u003cCylinder\n            ...\n          /\u003e,\n          \u003cBox\n            ...\n          /\u003e,\n          \u003cBox\n            ...\n          /\u003e,\n          \u003cSphere\n            ...\n          /\u003e,\n          \u003cCylinder\n            ...\n          /\u003e\n        ];\n            \n        return (\n          \u003cView\u003e\n            ...\n             \n            {shapes.map((shape, index) =\u003e {\n              return (       \n                \u003cSoundShape \n                  onClick={() =\u003e this.onShapeClicked(index)} \n                  sound={this.config[index].sound} \n                  playerState={this.config[index].playerState}\u003e\n                    {shape}\n                \u003c/SoundShape\u003e\n              );\n            })}\n            \n          \u003c/View\u003e\n        );\n      }\n      \n      ...\n    }\n```\n\nIf you restart your browser and try, you should hear the sounds as you click on the shapes.\n\nNow let’s add to our React VR app multi-user support in realtime with Pusher. \n\n## Setting up Pusher\n\nCreate a free account at [https://pusher.com/signup](https://pusher.com/signup).\n\nWhen you create an app, you'll be asked to enter some configuration options:\n\n![realtime-reactvr-set-up-pusher](//images.contentful.com/1es3ne0caaid/2FqgR9yT1mogMys4CIaSAK/e971c064f1c7c432c644bebe79bf4896/react-vr-app-set-up-pusher.png)\n\nEnter a name, choose React as your front-end tech, and Node.js as the back-end tech. This will give you some sample code to get you started:\n\n![realtime-reactvr-pusher-app](//images.contentful.com/1es3ne0caaid/1oX1AvQfhKMsgkmS8AeqEA/cacae66f2553ea9c818984cf726a9dfe/react-vr-app-pusher-app.png)\n\nBut don't worry, this won't lock you into this specific set of technologies as you can always change them. With Pusher, you can use any combination of libraries.\n\nNext, copy your cluster ID (next to the app title, in this example `mt1`), App ID, Key, and Secret information as we'll need them next. You can also find them in the *App Keys* tab.\n\n## Publishing the event\n\nReact VR acts as a [Web Worker](https://www.w3schools.com/HTML/html5_webworkers.asp) (you can know more about React VR architecture in this [video](https://www.youtube.com/watch?v=KHx-32m50c4)) so we need to include Pusher’s worker script in `index.vr.js` this way:\n\n```\n    ...\n    importScripts('https://js.pusher.com/4.1/pusher.worker.min.js');\n    \n    export default class musical_exp_react_vr_pusher extends React.Component {\n      ...\n    }\n```\n\nWe have two requirements that need to be taken care of. First, we need to be able to pass an identifier through the URL (like `http://localhost:8081/vr/?channel=1234`) so users can choose which channel they want to be in and share it with their friends. \n\nTo address this, we need to read the URL. Luckily, React VR comes with the native modules [Location](https://github.com/facebook/react-vr/blob/master/ReactVR/js/Modules/Location.js), which makes available to the React context the properties of the object `window.location`.\n\nNext, we need to make a call to a server that will publish the Pusher event so all the connected clients can also play the event. However, we don’t want the client that broadcasts the event to receive it too, because in that case, the sound will be played twice, and there’s no point in waiting to receive the event to play the sound when you can play it immediately when the user clicks the shape.\n\nEach Pusher connection is assigned a unique socket ID. To exclude recipients from receiving events in Pusher, we just need to pass to the server the socket ID of the client we want to be excluded a `socket_id` when this is triggering an event. (You can find more information [here](https://pusher.com/docs/server_api_guide/server_excluding_recipients).)\n\nThis way, adapting a little bit a function (`getParameterByName`) to [read the parameters of the URL](http://stackoverflow.com/a/901144/3593852), and saving the `socketId` when a successful connection is made to Pusher, we can address both requirements with this:\n\n```\n    ...\n    import {\n      ...\n      NativeModules,\n    } from 'react-vr';\n    ...\n    const Location = NativeModules.Location;\n    \n    export default class musical_exp_react_vr_pusher extends React.Component {\n      componentWillMount() {\n        const pusher = new Pusher('\u003cINSERT_PUSHER_APP_KEY\u003e', {\n          cluster: '\u003cINSERT_PUSHER_APP_CLUSTER\u003e',\n          encrypted: true,\n        });\n        this.socketId = null;\n        pusher.connection.bind('connected', () =\u003e {\n          this.socketId = pusher.connection.socket_id;\n        });\n        this.channelName = 'channel-' + this.getChannelId();\n        const channel = pusher.subscribe(this.channelName);\n        channel.bind('sound_played',  (data) =\u003e {\n          this.config[data.index].playerState.play();\n        });\n      }\n      \n      getChannelId() {\n        let channel = this.getParameterByName('channel', Location.href);\n        if(!channel) {\n          channel = 0;\n        }\n              \n        return channel;\n      }\n      \n      getParameterByName(name, url) {\n        const regex = new RegExp(\"[?\u0026]\" + name + \"(=([^\u0026#]*)|\u0026|#|$)\");\n        const results = regex.exec(url);\n        if (!results) return null;\n        if (!results[2]) return '';\n        return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n      }\n      \n      ...\n    }\n```\n\nIf there isn’t a channel parameter in the URL, by default we assign the ID 0. This ID will be added to the Pusher channel to make it unique.\n\nFinally, we just need to call an endpoint on the server side that will publish the event, passing the socket ID of the client and the channel where we’ll be publishing events:\n\n```\n    ...\n    export default class musical_exp_react_vr_pusher extends React.Component {\n      ...\n      onShapeClicked(index) {\n        this.config[index].playerState.play();\n        fetch('http://\u003cINSERT_YOUR_SERVER_URL\u003e/pusher/trigger', {\n          method: 'POST',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            index: index,\n            socketId: this.socketId,\n            channelName: this.channelName,\n          })\n        });\n      }\n      ...\n    }\n```\n\nAnd that’s all the code of the React part. Now let’s take a look at the server.\n\n## Creating the Node.js backend\n\nExecute the following command to generate a `package.json` file:\n\n```\n    npm init -y\n```\n\nAdd the following dependencies:\n\n```\n    npm install --save body-parser express pusher\n```\n\nAnd save the following code in a file:\n\n```\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    /*\n      The following headers are needed because the development server of React VR\n      is started on a different port than this server. \n      When the final project is published, you may not need this middleware\n    */\n    app.use((req, res, next) =\u003e {\n      res.header(\"Access-Control-Allow-Origin\", \"*\")\n      res.header(\"Access-Control-Allow-Headers\", \n                 \"Origin, X-Requested-With, Content-Type, Accept\")\n      next();\n    });\n    \n    const pusher = new Pusher({\n      appId: '\u003cINSERT_PUSHER_APP_ID\u003e',\n      key: '\u003cINSERT_PUSHER_APP_KEY\u003e',\n      secret: '\u003cINSERT_PUSHER_APP_SECRET\u003e',\n      cluster: '\u003cINSERT_PUSHER_APP_CLUSTER\u003e',\n      encrypted: true,\n    });\n    \n    app.post('/pusher/trigger', function(req, res) {\n      pusher.trigger(req.body.channelName, \n                     'sound_played', \n                     { index: req.body.index },\n                     req.body.socketId );\n      res.send('ok');\n    });\n    \n    const port = process.env.PORT || 5000;\n    app.listen(port, () =\u003e console.log(`Running on port ${port}`));\n```\n\nAs you can see, here we set up an Express server, the Pusher object, and the route `/pusher/trigger`, which just triggers an event with the index of the sound to be played and the socketID to exclude the recipient of the event.\n\nAnd we’re done. Let’s test it.\n\n## Testing\n\nExecute the Node.js backend with:\n\n```\n    node server.js\n```\n\nUpdate your server URL in `index.vr.js` (with your IP instead of `localhost`) and enter in your browser an address like http://localhost:8081/vr/?channel=1234 in two browser windows. When you click on a shape, you should hear the sound played twice (of course, it’s more fun doing this with a friend in another computer):\n\nhttps://www.youtube.com/watch?v=c1lf8FearWQ\u0026\n\n## Conclusion\n\nReact VR is a great library to create virtual reality experiences in an easy way, especially if you already know React/React Native. Pair it with Pusher and you’ll have powerful tools to program the next generation of web applications.\n\nYou can build a production release of this project to deploy it in any web server.\n\nAlso, you can customize this code by changing the colors, the shapes, the sounds, or add more functionality from the original [Musical Forest](https://github.com/googlecreativelab/webvr-musicalforest). \n\nFinally, remember that you can find the code of the app in this [GitHub repository](https://github.com/eh3rrera/reactvr_musical).\n\nAre you lost with VR development? Check it out Pusher's guide on [how you can become an AR/VR developer](https://blog.pusher.com/how-you-can-become-an-ar-vr-developer).","metaTitle":"Build a realtime React VR app","metaDescription":"Build a realtime music React VR app with multi-user interactions using Pusher. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6pwPWIfFJYAI2oCosygqug","type":"Entry","createdAt":"2018-02-22T15:02:41.816Z","updatedAt":"2019-01-02T15:26:34.991Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an anonymous chat app in React Native","url":"anonymous-chat-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5K3KWA2xvqw4SW2sYI8eCG","type":"Entry","createdAt":"2018-02-12T15:34:14.169Z","updatedAt":"2018-02-14T10:09:19.038Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Chimezie Enyinnaya","url":"chimezie-enyinnaya","email":"meziemichael@gmail.com","twitter":"https://twitter.com/ammezie","github":"https://github.com/ammezie","guestWriter":true}}],"projectRepo":"https://github.com/ammezie/android-pubchat","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}}],"reviewDate":"2017-04-28","description":"Creating a simple anonymous chat app for Android devices using React Native and Node.js.","prerequisite":"A basic understanding of React and Node.js is needed to follow this tutorial.","content":"In this tutorial, we will be using React Native to build our Android application. React Native let's you build mobile apps using only JavaScript. It uses the same design as React, letting you compose a rich mobile UI from declarative components. To learn more about React Native, please visit [here](https://facebook.github.io/react-native/).\n\n## Setting up React Native\n\nFirst, we need to install the React Native CLI if we don't already have it. To install React Native, we run:\n\n```\nnpm install -g react-native-cli\n```\n\nAfter installing the CLI, it's time to create our project. Open up a terminal, and create a new project called `pubchat`using the following command:\n\n```\nreact-native init pubchat\n```\n\nWe wait until React Native does all its installations, then we can change directory into the new project and run the application using the following command:\n\n```\n//change directory to pubchat\ncd pubchat\n//run the application\nreact-native run-android\n```\n\n**Please note, that before running the `run-android` command, you should have an emulator running, or an android device connected via `adb`**.\n\nYou can read more on setting up React Native Android app from [https://facebook.github.io/react-native/docs/android-setup.html](https://facebook.github.io/react-native/docs/android-setup.html)\n\nAt this point, we should see this kind of screen:\n\n![anonymous-chat-react-native-welcome](//images.contentful.com/1es3ne0caaid/4bBnroB7qgq8owO6mEac0c/b79eba2c87d0349b72fb37620758e6b6/anonymous-chat-react-native-welcome.png)\n\nHowever, you may run into an error like this:\n\n![anonymous-chat-react-native-error](//images.contentful.com/1es3ne0caaid/6GVRCdGmFasewqAGa2uQ0O/de13d24b37a7518f894e28ba6aa4ae44/anonymous-chat-react-native-error.png)\n\nTo fix the error, all you need to do is to run this command:\n\n``` \nreact-native start\n```\n\n## Setting up Pusher\n\nAt this point, React Native is ready and set up. We need to setup Pusher, as well as grab our app credentials.\n\nWe need to sign up on [Pusher](https://pusher.com/signup) and create a new app, and also copy our secret, application key and application id.\n\n![anonymous-chat-react-native-create-app](//images.contentful.com/1es3ne0caaid/5whHk0r064QkiumMyAY0WK/9b9da5c2eab366dafdd953ad6ded88d0/anonymous-chat-react-native-create-app.png)\n\nWe then need to install the required libraries:\n\n```\nnpm install native-base pusher-js pusher express body-parser --save\n```\n\nIn the above bash command, we installed 4 packages. I will explain what the four packages do below:\n\n- native-base: An essential cross-platform UI components for React Native. This helps us to reduce time writing and styling UI components ourselves.\n- pusher-js: This is the official Pusher JavaScript client. We'll be using its React Native library to subscribe and listen to events in our application.\n- pusher: This is the official Pusher library for Node.js. We will be using Node.js for our API, so this library will come in handy.\n- express: This is a Node.js web framework which we'll use to create our API.\n- body-parser: This library is used by Express to parse body requests.\n \nAfter installing these packages, we need to link them with React Native, so we run the following command:\n\n``` \nreact-native link\n```\n**Please note that because we will be using Fetch to perform AJAX request, we would need to go to our android manifest located in `android/app/src/AndroidManifest.xml` and add the following permission: **\n\n```\n\u003cuses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" /\u003e\n```\n\n## Creating our API\n\nFirst, let's create a new file called `server.js`, which serves as our API in our root folder and place in the following contents into it:\n\n```\n// server.js\n\n//require express\nvar express = require('express')\n//define app as in instance of express\nvar app = express()\n//require bosy-parser\nvar bodyParser = require('body-parser')\n//require pusher\nvar Pusher = require('pusher')\n//use bodyparser as a middle ware\napp.use(bodyParser.json())\n//instantiate pusher\nconst pusher = new Pusher({\n  appId: 'XXX_APP_ID',\n  key: 'XXX_APP_KEY',\n  secret: 'XXX_APP_SECRET',\n  cluster: 'XXX_APP_CLUSTER',\n  encrypted: true\n});\n//set cors middleware\napp.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  next();\n});\n//handle route postfunction\napp.post('/', function (req, res) {\n    pusher.trigger(\"pubchat\", \"message_sent\", { message : req.body.message, name : \"Anonymous\" });\n    res.send({\n        message:'message_sent'\n    });\n})\n//listen on port and serve the app\napp.listen(3000, function () {\n  console.log('Example app listening on port 3000!')\n})\n```\nThe code block above is our Express server setup. At the beginning of the file, we had required Express, Body-parser and Pusher libraries for Node.js respectively. We had also initialized a new Pusher object, passing in our `appId`, `key`, `secret` to it, and we set the output of the object to a constant called `pusher`.\n\nNext, we set the CORS header to our request, using a middleware function.\n\nFinally, we create a post handler for the `\\` route, and we then make a `Pusher` trigger to a channel called `pubchat` with an event called `message_sent`.\n\nLet's take note of both the channel name and the event name used on this server. The channel name will be subscribed to, while we will listen for the event in our React Native app.\n\nThis is all we need at the server side for our API call to work.\n\nNext, we go to our command line and run:\n\n```\nnode server.js\n```\n## Crafting up the application\n\nNow let's replace our `index.android.js` with the following:\n\n``` language-javascript\n// index.android.js\n\n/**\n * Sample React Native App\n * https://github.com/facebook/react-native\n * @flow\n */\n\nimport React, { Component } from 'react';\nimport {\n  AppRegistry,\n  StyleSheet,\n  Text,\n  View,\n  TextInput,\n  ScrollView\n} from 'react-native';\n// import native base components\nimport { Container, Content, Footer, Button} from 'native-base';\n//import pusher\nimport Pusher from 'pusher-js/react-native'\n//react-native class\nexport default class pubchat extends Component {\n//load constructor\nconstructor(props){\n  super(props);\n  //declare an array of messages\n  var messages_array = [];\n  // declare initial states\n   this.state ={\n    messages_array,\n    text:'' \n   }\n\n  //instantiate pusher\n  var pusher = new Pusher('XXX_APP_KEY', {\n    cluster: 'XXX_APP_CLUSTER'\n  });\n  //subscribe to the public chat channel\n  var my_channel = pusher.subscribe('pubchat');\n  //bind and listen for chat events\n  my_channel.bind(\"message_sent\", (data)=\u003e {\n     this.state.messages_array.push(data);\n        this.setState({\n          text:''\n        })\n  });\n}\n\n  //function that sends messahe\n  send_message(){\n    //check that the text input isnt empty\n    if(this.state.text !=\"\"){\n      fetch('XXX_IP_TO_MY_ROUTE', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          message: this.state.text\n        })\n      })\n      .then((response) =\u003e response.json()) \n      .then((responseJson) =\u003e {}) \n      .catch((error) =\u003e { console.error(error); });\n    }\n  }\n\n\n  //function that loops over our messages and displays them\n  loop(){\n      var element = [];\n     for (var index = 0; index \u003c this.state.messages_array.length; index++) {\n\n            element.push(\u003cView key={\"container\"+index} \u003e\n                            \u003cText key = {\"author\"+index}\u003e\n                              {this.state.messages_array[index].name}\n                            \u003c/Text\u003e\n                            \u003cText key = {index} style={styles.bubble_you} \u003e\n                              {this.state.messages_array[index].message}\n                            \u003c/Text\u003e\n                        \u003c/View\u003e);\n        }\n         return element;\n  };\n\n  //render function that actually shows the page\n  render() {\n    //execute the loop function and store its response into a variable\n    myloop = this.loop();\n\n    return (\n      \u003cContainer\u003e\n      \u003cScrollView \u003e\n        \u003cView style={styles.container}\u003e\n          \u003cText style={styles.welcome}\u003e\n            Welcome to the public chat room!\n          \u003c/Text\u003e\n              {myloop}\n        \u003c/View\u003e\n        \u003c/ScrollView\u003e\n        \u003cFooter \u003e\n          \u003cTextInput\n            value ={this.state.text}\n            style={{width: '80%'}}\n            placeholder=\"Enter Your message!\"\n            onChangeText={(text) =\u003e this.setState({text})}\n          /\u003e\n          \u003cButton onPress={()=\u003e this.send_message()}\u003e\n            \u003cText\u003eSend\u003c/Text\u003e\n          \u003c/Button\u003e \n        \u003c/Footer\u003e\n      \u003c/Container\u003e\n    );\n  }\n}\n\n//stylesheet \nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  welcome: {\n    fontSize: 20,\n    textAlign: 'center',\n    margin: 10,\n  },\n  bubble_you: {\n    color: '#fff',\n    backgroundColor: '#00b0ff',\n  width: '50%',\n  borderRadius: 25,\n  padding: 7,\n  marginBottom: 2,\n  },\n});\n\nAppRegistry.registerComponent('pubchat', () =\u003e pubchat);\n```\nAbove, we have imported the Native Base component to help us with our UI styling instead of the default React Native components. Next, we imported Pusher for React Native, then we declare our React Native class.\n\nWe proceed by creating a constructor, and in our constructor, two states are declared namely: `messages_array` and `text`, which respectively represent our array of messages as well as the current text that is being typed.\n\nNext, we instantiate Pusher, passing in our `APP_KEY`. Then we subscribe to the channel which we are emitting to from the server called `pubchat` and also we listen to the `message_sent` event which we also trigger from our server.\n\nWhile listening to the `message_sent` event, we push the data that arrives at our `messages_array` state, and also set our `text` state to empty.\n\nNext, we create a function which sends our messages to the server, so it can be sent to Pusher. In this function, we first check if the state is empty, to avoid sending empty messages to the server.\n\nNext, we use the `fetch` API provided by React Native to send an AJAX request to our server which we created earlier.\n\n**Note: If you use IP address such as `127.0.0.1` or `localhost`, the request is most likely going to fail. This is because, in React Native, `localhost` or `127.0.0.1` refers to the internal application. Please use the network IP for your system instead.**\n\nNext, we define a `loop` function, which loops through all our messages and pushes them into an array which is being returned. This function would be used to display all messages on the UI.\n\nThe next function is our `render` function, which is a native React Native function. First, we declare a variable called `myloop` and set it to our `loop` function.\n\nIn our return statement, the `myloop` variable was rendered, so it can display its content. Also, take a look at the `footer` tag we have there. In the `footer` tag, we have a `text input` and a `button`.\n\nThe text input text is used to set the `text` state anytime the text changes using the `onChangeText` event of the button. Notice that our button also calls the `send_message` function anytime it is pressed by binding it to its `onPress` function.\n\nFinally, we defined some style sheets.\n\nAt this point if we reload our application, our app would look like the following:\n\n![anonymous-chat-react-native-design](//images.contentful.com/1es3ne0caaid/1QFi2XciR2y24IcASgKKqY/b18e636dfe3a00bdf7b8b4d4ccc33ec7/anonymous-chat-react-native-design.png)\n\nAt this point, once our server is up and running, we should go to the application, type in a message, then send.\n\nHere is a demo of what we have built:\n\n![anonymous-chat-react-native-demo](//images.contentful.com/1es3ne0caaid/3DnIzcqu4wUUmmu8U8awIo/8c610d936170bda7d684cb83a6764f07/anonymous-chat-react-native-demo.gif)\n\n## Conclusion\n\nIn this article, we have demonstrated how to make a public anonymous chat application in Android using React Native. We have secured the design choices which are important to begin with, and the cases above ought to help you fill in the holes and give an outline of a portion of the other design choices accessible to you.","metaTitle":"Build an anonymous chat app in React Native","metaDescription":"Discover how to make a public anonymous chat application in Android using React Native and Node.js"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14MIsjihhCeEO6iomkOW6U","type":"Entry","createdAt":"2018-02-14T10:57:43.954Z","updatedAt":"2018-02-28T15:01:14.347Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime shopping cart with Java and React","url":"shopping-cart-java-react","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"29U2yrruIQmo6UkY0MMsyK","type":"Entry","createdAt":"2018-02-13T11:27:38.132Z","updatedAt":"2018-02-14T10:08:48.377Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Esteban Herrera","url":"esteban-herrera","email":"estebanhb2@gmail.com","twitter":"https://twitter.com/eh3rrera","github":"https://github.com/eh3rrera/","guestWriter":true}}],"projectRepo":"https://github.com/eh3rrera/shopping-cart-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1hvzJaMiAkEQOq088wwo4O","type":"Entry","createdAt":"2018-02-12T14:50:04.128Z","updatedAt":"2018-02-26T12:31:15.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Java","url":"java","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Od9rZziIoMG4yaQ4EAeok","type":"Entry","createdAt":"2018-02-13T11:31:10.435Z","updatedAt":"2018-02-26T12:31:10.730Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":16,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live UX","url":"live-ux","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-01-24","description":"Discover how to sync your shopping cart between browsers and devices with Java and React.","prerequisite":"A basic understanding of React and Java are needed to follow this tutorial.","content":"Programming a shopping cart may not be as easy as you think. One of the greatest challenges is to synchronize the content of a user's shopping cart between devices or even browser tabs.\n\nFor example, a friend sends you, via a messaging app on your phone, the link to a great deal on the latest video game that you've been dying to get. You add the game to your shopping cart, but for some reason, you prefer to go through the checkout process on your desktop computer. You log into your account and that's when you realize that there's nothing in your shopping cart. You add the video game to the shopping cart again on your phone, but nothing appears on the other side. Have you experienced this before? Are you a developer that doesn't want your users to go through the same annoyance? If so, keep reading.\n\nIn this tutorial, we're going to build a simple realtime shopping cart, using Pusher to solve the synchronization issue we mentioned earlier. When an action like a quantity update or an item is removed from the Cart, a Pusher event will be sent so all the listening devices, windows or tabs can be synchronized accordingly.\n\nThe stack will be the following:\n\n- [Java 8](http://www.oracle.com/technetwork/java/index.html)\n- [Maven](https://maven.apache.org) as the build manager\n- [Spring Boot](http://projects.spring.io/spring-boot/) with [Spring MVC](https://projects.spring.io/spring-framework/) as the server-side frameworks\n- [Thymeleaf](http://www.thymeleaf.org/) as the server-side template engine\n- [React](https://facebook.github.io/react/) for the client-side interaction\n- [Bootstrap ](http://getbootstrap.com/) as the CSS framework.\n \nTo keep things simple, we won't use a database. We'll keep a list of four products in memory, the app will only support one user, and the cart items will be stored in a web session.\n\nThe server will provide a REST API so the front-end can work just as a presentation layer with AJAX calls. For complex applications, the recommended way to do this is by using something like [Redux](http://redux.js.org/). In fact, in the Redux documentation you can find a [shopping cart example](http://redux.js.org/docs/introduction/Examples.html#shopping-cart). However, once again, to keep things simple, we are going to issue all of our AJAX requests from the parent component using [fetch](https://github.com/github/fetch).\n\nIn summary, our shopping cart will have the following functionality:\n\n- Choose the quantity to add a product to the shopping cart (if the product is already in the shopping cart, the quantity will be updated)\n- Remove a product from the shopping cart\n- Calculate the total when a product is added/updated/removed\n- Empty the shopping cart\n \nThis is how the final application will look:\n\n![realtime-shopping-cart-java-react-demo](//images.contentful.com/1es3ne0caaid/1Nwjqw59SAGo0AqIkCUMaI/28adc679071ab231a02644c0b67b05a9/realtime-shopping-cart-java-react-demo.gif)\n\nThis tutorial assumes prior knowledge of Java 8, Spring Boot/MVC and React. We will integrate Pusher into a Spring MVC REST API, create React components and hook them up with Pusher.\n\nYou can find the entire code of the application on [Github](https://github.com/).\n\n## Setting up Pusher\n\nCreate a free account at [https://pusher.com/signup](https://pusher.com/signup).\n\nWhen you first log in, you'll be asked to enter some configuration options:\n\n![realtime-shopping-cart-java-react-create-pusher-app](//images.contentful.com/1es3ne0caaid/6bHQhfzN5e4Y64QgKO6WWI/5b5275cd61415c55ddbc606a9ac5d914/realtime-shopping-cart-java-react-create-pusher-app.png)\n\nEnter a name, choose *React* as your front-end tech, and *Java* as your back-end tech. This will give you some sample code to get you started.\n\n![realtime-shopping-cart-java-react-pusher-libraries](//images.contentful.com/1es3ne0caaid/4CsFo1vNpCAEE0IWSGiSMm/8f7b63d513f2f90d47eaba0bcb11f107/realtime-shopping-cart-java-react-pusher-libraries.jpg)\n\nThis won't lock you into a specific set of technologies, you can always change them. With Pusher, you can use any combination of libraries.\n\nThen go to the *App Keys* tab to copy your App ID, Key, and Secret credentials - we'll need them later.\n\n## Setting up the application\n\nOne of the easiest ways to create a Spring Boot app is to use the project generator at [https://start.spring.io/](https://start.spring.io/).\n\nGo to that page and choose to generate a Maven project with the following dependencies:\n\n- Web\n- Thymeleaf\n \nEnter a *Group ID*, an *Artifact ID* and generate the project:\n\n![realtime-shopping-cart-java-react-Sprint-Initializr](//images.contentful.com/1es3ne0caaid/2d18LCiRPqOmA2WSECsiuE/ced10faf9fc8f27cebe20bc5791a4f25/realtime-shopping-cart-java-react-Sprint-Initializr.jpg)\n\nUnzip the content of the downloaded file. At this point, you can import the project to an IDE if you want.\n\nNow open the `pom.xml` file and add the Pusher library to the `dependencies` section:\n\n```\n\u003cdependency\u003e\n  \u003cgroupId\u003ecom.pusher\u003c/groupId\u003e\n  \u003cartifactId\u003epusher-http-java\u003c/artifactId\u003e\n  \u003cversion\u003e1.0.0\u003c/version\u003e\n\u003c/dependency\u003e\n```\n## The Java Back-end\n\nLet's start with the [com/pusher/web/IndexController](https://github.com/) class. It defines the root route (`/`) that shows an `index` template, passing the Pusher App Key and the channel name where the events will be published:\n\n```\n@Controller\n@SessionAttributes(GeneralConstants.ID_SESSION_SHOPPING_CART)\npublic class IndexController {\n\n  @RequestMapping(method=RequestMethod.GET, value=\"/\")\n  public ModelAndView index(Model model) {\n    ModelAndView modelAndView = new ModelAndView();\n\n    modelAndView.setViewName(\"index\");\n    modelAndView.addObject(\"pusher_app_key\", PusherConstants.PUSHER_APP_KEY); \n    modelAndView.addObject(\"pusher_channel\", PusherConstants.CHANNEL_NAME); \n\n    if(!model.containsAttribute(GeneralConstants.ID_SESSION_SHOPPING_CART)) {\n      model.addAttribute(GeneralConstants.ID_SESSION_SHOPPING_CART, new ArrayList\u003cProduct\u003e());\n    }\n\n    return modelAndView;\n  }\n}\n```\nThe `@SessionAttributes` annotation defines the identifier of an attribute that will be added to the session automatically when an object with the same identifier is added to the model object. This way, if a list of products (representing the shopping cart) is not in the session already, an empty one is created.\n\nAs this application supports only one user, the name of the channel is fixed. However, in a real application, the shopping cart of each user will use a different Pusher channel, so the name would have to be unique. But there's no problem, Pusher offers [unlimited channels on all of its plans](https://pusher.com/pricing).\n\nThen, we have the [com/pusher/web/CartController](https://github.com/) class, where the REST API for our shopping cart is defined. First, we define the `configure()` method that is called after dependency injection is done to initialize the Pusher object and the list of products:\n\n```\n@RestController\n@SessionAttributes(GeneralConstants.ID_SESSION_SHOPPING_CART)\npublic class CartController {\n\n  private List\u003cProduct\u003e products = new ArrayList\u003cProduct\u003e();\n\n  private Pusher pusher;\n\n  @PostConstruct\n  public void configure() {\n    pusher = new Pusher(\n      PusherConstants.PUSHER_APP_ID, \n      PusherConstants.PUSHER_APP_KEY, \n      PusherConstants.PUSHER_APP_SECRET\n    );\n\n    Product product = new Product();\n    product.setId(1L);\n    product.setName(\"Office Chair\");\n    product.setPrice(new BigDecimal(\"55.99\"));\n    products.add(product);\n\n    product = new Product();\n    product.setId(2L);\n    product.setName(\"Sunglasses\");\n    product.setPrice(new BigDecimal(\"99.99\"));\n    products.add(product);\n\n    product = new Product();\n    product.setId(3L);\n    product.setName(\"Wireless Headphones\");\n    product.setPrice(new BigDecimal(\"349.01\"));\n    products.add(product);\n\n    product = new Product();\n    product.setId(4L);\n    product.setName(\"External Hard Drive\");\n    product.setPrice(new BigDecimal(\"89.99\"));\n    products.add(product);\n  }\n\n  ...\n}\n```\nNext, we define the endpoints to get, in JSON format, the list of products as well as the products in the shopping cart:\n\n```\npublic class CartController {\n\n  ...\n\n  @RequestMapping(value = \"/products\", \n    method = RequestMethod.GET,  \n    produces = \"application/json\")\n  public List\u003cProduct\u003e getProducts() {\n    return products;\n  }\n\n  @RequestMapping(value = \"/cart/items\", \n    method = RequestMethod.GET,  \n    produces = \"application/json\")\n  public List\u003cProduct\u003e getCartItems(@SessionAttribute(GeneralConstants.ID_SESSION_SHOPPING_CART) List\u003cProduct\u003e shoppingCart) {\n    return shoppingCart;\n  }\n\n  ...\n}\n```\nA method to search for a product by its identifier in a list of products would be handy, so let's define one using the [Java 8 Stream API](https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html) to do it in a functional style:\n\n```\nprivate Optional\u003cProduct\u003e getProductById(Stream\u003cProduct\u003e stream, Long id) {\n  return stream\n    .filter(product -\u003e product.getId().equals(id))\n    .findFirst();\n}\n```\nThis way, to add a product, we look for the product passed in the catalog of products (to see if it's a valid one) and then, if the product is in the shopping cart already, we update its quantity, otherwise, we added directly to the shopping cart, triggering an `itemUpdated` or `itemAdded` accordingly:\n\n```\npublic class CartController {\n\n  ...\n\n  @RequestMapping(value = \"/cart/item\", \n            method = RequestMethod.POST, \n            consumes = \"application/json\")\n  public String addItem(@RequestBody ItemRequest request, @SessionAttribute(GeneralConstants.ID_SESSION_SHOPPING_CART) List\u003cProduct\u003e shoppingCart) {\n    Product newProduct = new Product();\n    Optional\u003cProduct\u003e optional = getProductById(products.stream(), request.getId());\n\n    if (optional.isPresent()) {\n      Product product = optional.get();\n\n      newProduct.setId(product.getId());\n      newProduct.setName(product.getName());\n      newProduct.setPrice(product.getPrice());\n      newProduct.setQuantity(request.getQuantity());\n\n      Optional\u003cProduct\u003e productInCart = getProductById(shoppingCart.stream(), product.getId());\n      String event;\n\n      if(productInCart.isPresent()) {\n        productInCart.get().setQuantity(request.getQuantity());\n        event = \"itemUpdated\";\n      } else {\n        shoppingCart.add(newProduct);\n        event = \"itemAdded\";\n      }\n\n      pusher.trigger(PusherConstants.CHANNEL_NAME, event, newProduct);\n    }\n\n    return \"OK\";\n  }\n\n  ...\n}\n```\nDeleting a product from the shopping cart is similar. If the product is valid (if it exists in the catalog), we look for it on the shopping cart to remove it and trigger an `itemRemoved` event on Pusher:\n\n```\npublic class CartController {\n\n  ...\n\n  @RequestMapping(value = \"/cart/item\", \n            method = RequestMethod.DELETE, \n            consumes = \"application/json\")\n  public String deleteItem(@RequestBody ItemRequest request, @SessionAttribute(GeneralConstants.ID_SESSION_SHOPPING_CART) List\u003cProduct\u003e shoppingCart) {\n    Optional\u003cProduct\u003e optional = getProductById(products.stream(), request.getId());\n\n    if (optional.isPresent()) {\n      Product product = optional.get();\n\n      Optional\u003cProduct\u003e productInCart = getProductById(shoppingCart.stream(), product.getId());\n\n      if(productInCart.isPresent()) {\n        shoppingCart.remove(productInCart.get());\n        pusher.trigger(PusherConstants.CHANNEL_NAME, \"itemRemoved\", product);\n      }\n    }\n\n    return \"OK\";\n  }\n\n  ...\n}\n```\nFinally, to empty the cart, we just replace the cart in the session with an empty list and trigger the `cartEmptied` Pusher event:\n\n```\npublic class CartController {\n\n  ...\n\n  @RequestMapping(value = \"/cart\", \n            method = RequestMethod.DELETE)\n  public String emptyCart(Model model) {\n    model.addAttribute(GeneralConstants.ID_SESSION_SHOPPING_CART, new ArrayList\u003cProduct\u003e());\n    pusher.trigger(PusherConstants.CHANNEL_NAME, \"cartEmptied\", \"\");\n\n    return \"OK\";\n  }\n\n  ...\n}\n```\n## React + Pusher\n\nReact thinks of the UI as a set of components, where you simply update a component's state, and then React renders a new UI based on this new state updating the DOM for you in the most efficient way.\n\nThe app's UI will be organized into five components, a header (`Header`), the cart (`Cart`), a component for each cart item (`CartItem`), the product list (`ProductList`), and a component for each product (`Product`):\n\n![realtime-shopping-cart-java-react-components](//images.contentful.com/1es3ne0caaid/fwG15SpRluO64oYKWqauK/ad050f6448e9f09a236e21bedbf3d773/realtime-shopping-cart-java-react-components.jpg)\n\nThe template for the index page just contains references to the CSS files, a page header, a `div` element where the UI will be rendered, the Pusher app key and channel name (passed from the server), and references to all the Javascript files the application uses:\n\n```\n\u003c!DOCTYPE html\u003e\n\u003chtml xmlns:th=\"http://www.thymeleaf.org\"\u003e\n\u003chead\u003e\n  \u003cmeta charset=\"utf-8\" /\u003e\n  \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /\u003e\n    \u003ctitle\u003eReal-time shopping cart with Pusher, Java, and React\u003c/title\u003e\n\n  \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" /\u003e\n  \u003clink rel=\"stylesheet\" href=\"http://netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css\" /\u003e\n  \u003clink rel=\"stylesheet\" href=\"/css/style.css\" /\u003e\n\u003c/head\u003e\n\u003cbody class=\"blue-gradient-background\"\u003e\n\n  \u003cnav class=\"navbar navbar-inverse\"\u003e\n    \u003cdiv class=\"container\"\u003e\n    \u003cdiv class=\"navbar-header\"\u003e\n      \u003ca class=\"navbar-brand\" href=\"https://pusher.com\"\u003e\n      \u003cimg class=\"logo\" src=\"/images/pusher-logo.png\" width=\"111\" height=\"37\"/\u003e\n      \u003c/a\u003e\n    \u003c/div\u003e\n\n      \u003cp class=\"navbar-text navbar-right\"\u003e\u003ca class=\"navbar-link\" href=\"http://pusher.com/signup\"\u003eCreate a Free Account\u003c/a\u003e\u003c/p\u003e\n    \u003c/div\u003e\n  \u003c/nav\u003e\n\n  \u003cdiv id=\"app\"\u003e\u003c/div\u003e\n\n  \u003c!-- React --\u003e\n  \u003cscript src=\"https://unpkg.com/react@15.4.1/dist/react-with-addons.js\"\u003e\u003c/script\u003e\n  \u003cscript src=\"https://unpkg.com/react-dom@15.4.1/dist/react-dom.js\"\u003e\u003c/script\u003e\n  \u003cscript src=\"https://unpkg.com/babel-standalone@6.19.0/babel.min.js\"\u003e\u003c/script\u003e\n\n  \u003c!-- Libs --\u003e\n  \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/fetch/2.0.1/fetch.js\"\u003e\u003c/script\u003e\n  \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n\n  \u003c!-- Pusher Config --\u003e\n  \u003cscript th:inline=\"javascript\"\u003e\n    var PUSHER_APP_KEY = /*[[${pusher_app_key}]]*/ 'NA';\n    var PUSHER_CHANNEL_NAME = /*[[${pusher_channel}]]*/ 'NA';\n  \u003c/script\u003e\n\n  \u003c!-- App/Components --\u003e\n  \u003cscript type=\"text/babel\" src=\"/js/components/header.js\"\u003e\u003c/script\u003e\n  \u003cscript type=\"text/babel\" src=\"/js/components/cartItem.js\"\u003e\u003c/script\u003e\n  \u003cscript type=\"text/babel\" src=\"/js/components/cart.js\"\u003e\u003c/script\u003e\n  \u003cscript type=\"text/babel\" src=\"/js/components/product.js\"\u003e\u003c/script\u003e\n  \u003cscript type=\"text/babel\" src=\"/js/components/productList.js\"\u003e\u003c/script\u003e\n  \u003cscript type=\"text/babel\" src=\"/js/app.js\"\u003e\u003c/script\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e\n```\nThe application will be rendered in the `div` element with the ID `app`. The file [static/js/app.js](https://github.com/app.js) is the starting point for our React app:\n\n```\nvar App = React.createClass({\n  ...\n});\n\nReactDOM.render(\u003cApp /\u003e, document.getElementById(\"app\"));\n```\nInside the `App` class, first, we define our state as arrays of cart items and products:\n\n```\nvar App = React.createClass({\n\n  getInitialState: function() {\n    return { items: [], products: [] };\n  },\n\n  ...\n\n});\n\n...\n```\nThen, we use the `componentWillMount` method, which is invoked once immediately before the initial rendering occurs, to set up Pusher and a variable to keep the cart total:\n\n```language-jsx\nvar App = React.createClass({\n  ...\n\n  componentWillMount: function() {\n    this.pusher = new Pusher(PUSHER_APP_KEY, {\n      encrypted: true,\n    });\n    this.channel = this.pusher.subscribe(PUSHER_CHANNEL_NAME);\n    this.total = 0;\n  }, \n\n  ...\n});\n\n...\n```\nWe subscribe to the channel's events in the `componentDidMount` method and get the catalog of products and any existing content of the shopping cart using [fetch](https://github.com/github/fetch):\n\n```\nvar App = React.createClass({\n\n  ... \n\n  componentDidMount() {\n    this.channel.bind('itemAdded', this.itemAdded);\n    this.channel.bind('itemUpdated', this.itemUpdated);\n    this.channel.bind('itemRemoved', this.itemRemoved);\n    this.channel.bind('cartEmptied', this.cartEmptied);\n\n    fetch('/products').then(function(response) {\n        return response.json();\n    }).then(this.getProductsSuccess);\n\n    fetch('/cart/items', {\n        credentials: 'same-origin',\n    }).then(function(response) {\n        return response.json();\n    }).then(this.getCartItemsSuccess);\n  }\n\n  ...\n});\n\n...\n```\nThe callbacks used when the products and cart items are fetched from the server just update the state of the component and calculate the cart total using the `countTotal` function:\n\n```\nvar App = React.createClass({\n\n  ... \n\n  getProductsSuccess: function(response) {\n    this.setState({\n        products: response\n    });\n  },\n\n  getCartItemsSuccess: function(response) {\n    this.countTotal(response);\n    this.setState({\n      items: response\n    });\n  },\n\n  countTotal: function(newArray) {\n    var temp = 0;\n\n    newArray.forEach(function(item, index) {\n      temp += (item.price * item.quantity);\n    });\n\n    this.total = temp;\n  },\n\n  ...\n});\n\n...\n```\nIn the `componentWillUnmount` method, we unsubscribe from the Pusher events and in case the AJAX requests have not been completed at that point, we assign an empty function to the callbacks to do nothing when the component is unmounted:\n\n```\nvar App = React.createClass({\n\n  ... \n\n  componentWillUnmount: function() {\n    this.channel.unbind();\n\n    this.pusher.unsubscribe(this.channel);\n\n    this.getProductsSuccess = function() {};\n    this.getCartItemsSuccess = function() {};\n  },\n\n  ...\n});\n\n...\n```\nWhen an `itemAdded` event is received, the total is updated and the new item is added to a new array, which is used to update the state so React can re-render the components:\n\n```\nvar App = React.createClass({\n\n  ... \n\n  itemAdded: function(item) {\n    var newArray = this.state.items.slice(0);\n    newArray.push(item);\n\n    this.countTotal(newArray);\n\n    this.setState({\n      items: newArray,\n    });\n  },\n\n  ...\n});\n\n...\n```\nSomething similar happens with the `itemUpdated` and `itemRemoved` events, the difference is that the index of the item being referenced is looked up using the [some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some) function to update/remove it:\n\n```\nvar App = React.createClass({\n\n  ... \n\n  itemUpdated: function(item) {\n    var newArray = this.state.items.slice(0);\n    var indexToUpdate;\n\n    this.state.items.some(function(it, index) {\n      if(it.id === item.id) {\n        indexToUpdate = index;\n        return true;\n      }\n    });\n\n    newArray[indexToUpdate].quantity = item.quantity;\n\n    this.countTotal(newArray);\n\n    this.setState({\n      items: newArray,\n    });\n  },\n\n  itemRemoved: function(item) {\n    var newArray = this.state.items.slice(0);\n    var indexToRemove;\n\n    this.state.items.some(function(it, index) {\n      if(it.id === item.id) {\n        indexToRemove = index;\n        return true;\n      }\n    });\n\n    newArray.splice(indexToRemove, 1);\n\n    this.countTotal(newArray);\n\n    this.setState({\n      items: newArray,\n    });\n  },\n\n  ...\n});\n\n...\n```\nAnd, when the cart is emptied, we just update the state with an empty array. Notice how in all cases, we worked with a copy of the existing array, since React works best with immutable objects:\n\n```\nvar App = React.createClass({\n\n  ...\n\n  cartEmptied: function() {\n    var newArray = [];\n    this.countTotal(newArray);\n\n    this.setState({\n      items: newArray\n    });\n  },\n\n  ...\n\n\n});\n\n...\n```\nFinally, the `render` method shows the top-level components of our app:\n\n```\nvar App = React.createClass({\n\n  ...\n\n  render: function() {\n    return (\n      \u003cdiv className=\"container\"\u003e\n        \u003cHeader  /\u003e\n        \u003cCart items={this.state.items} total={this.total} /\u003e\n        \u003cProductList products={this.state.products} /\u003e\n      \u003c/div\u003e\n    );\n  }\n\n  ...\n}\n\n...\n```\n[static/js/header.js](https://github.com/header.js) is a simple component without state or properties that only renders the HTML for the page's title.\n\nThe `Cart` component ([public/js/cart.js](https://github.com/cart.js)) takes the array of items to create an array of `CartItem` components and define an `emptyCart` function to call the API endpoint for that functionality:\n\n```\nvar Cart = React.createClass({\n  emptyCart: function() {\n    fetch('/cart', {\n      credentials: 'same-origin',\n      method: 'DELETE'\n    });\n  },\n\n  render: function() {\n    var itemsMapped = this.props.items.map(function (item, index) {\n      return \u003cCartItem item={item} key={index} /\u003e\n    });\n\n    var empty = \u003cdiv className=\"alert alert-info\"\u003eCart is empty\u003c/div\u003e;\n\n    return (\n      \u003cdiv className=\"row extra-bottom-margin\"\u003e\n        \u003cdiv className=\"col-xs-8 col-xs-offset-2\"\u003e\n          \u003cdiv className=\"panel panel-info\"\u003e\n            \u003cdiv className=\"panel-heading\"\u003e\n              \u003cdiv className=\"panel-title\"\u003e\n                \u003cdiv className=\"row\"\u003e\n                  \u003cdiv className=\"col-xs-12\"\u003e\n                    \u003ch5\u003e\u003cspan className=\"glyphicon glyphicon-shopping-cart\"\u003e\u003c/span\u003e Shopping Cart\u003c/h5\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv className=\"panel-body\"\u003e\n              \u003cdiv className=\"row\"\u003e\n                \u003cdiv className=\"col-xs-6\"\u003e\n                  \u003ch6\u003e\u003cstrong\u003eProduct\u003c/strong\u003e\u003c/h6\u003e\n                \u003c/div\u003e\n                \u003cdiv className=\"col-xs-6\"\u003e\n                  \u003cdiv className=\"col-xs-4 text-center\"\u003e\n                    \u003ch6\u003e\u003cstrong\u003ePrice\u003c/strong\u003e\u003c/h6\u003e\n                  \u003c/div\u003e\n                  \u003cdiv className=\"col-xs-4 text-center\"\u003e\n                    \u003ch6\u003e\u003cstrong\u003eQuantity\u003c/strong\u003e\u003c/h6\u003e\n                  \u003c/div\u003e\n                  \u003cdiv className=\"col-xs-4 text-center\"\u003e\u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n              {itemsMapped.length \u003e 0 ? itemsMapped : empty}\n            \u003c/div\u003e\n            \u003cdiv className=\"panel-footer\"\u003e;\n              \u003cdiv className=\"row text-center\"\u003e\n                \u003cdiv className=\"col-xs-9\"\u003e\n                  \u003ch4 className=\"text-right\"\u003eTotal \u003cstrong\u003e${this.props.total}\u003c/strong\u003e\u003c/h4\u003e\n                \u003c/div\u003e\n                \u003cdiv className=\"col-xs-3\"\u003e\n                  \u003cbutton type=\"button\" className=\"btn btn-info btn-sm btn-block\" onClick={this.emptyCart} disabled={itemsMapped.length == 0}\u003e\n                    Empty cart\n                  \u003c/button\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    );\n  }\n});\n```\n\nThe `CartItem` component ([static/js/cartItem.js](https://github.com/cartItem.js)) defines functions to remove the item from the shopping cart (passing its identifier) and render it:\n\n```\n\n\nvar CartItem = React.createClass({\n  deleteItem: function() {\n    fetch('/cart/item', {\n      credentials: 'same-origin',\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        id: this.props.item.id,\n     })\n    });\n  },\n\n  render: function() {\n    var name = this.props.item.name;\n    var id = this.props.item.id;\n    var price = this.props.item.price;\n    var quantity = this.props.item.quantity;\n\n    return (\n      \u003cdiv className=\"row cart-item\"\u003e\n        \u003cdiv className=\"col-xs-6\"\u003e\n          \u003ch6 className=\"product-name\"\u003e\u003cstrong\u003e{name}\u003c/strong\u003e\u003c/h6\u003e\n        \u003c/div\u003e\n        \u003cdiv className=\"col-xs-6\"\u003e\n          \u003cdiv className=\"col-xs-4 text-center\"\u003e\n            \u003ch6\u003e{price}\u003c/h6\u003e\n          \u003c/div\u003e\n          \u003cdiv className=\"col-xs-4 text-center\"\u003e\n            \u003ch6\u003e{quantity}\u003c/h6\u003e\n          \u003c/div\u003e\n          \u003cdiv className=\"col-xs-4 text-center\"\u003e\n            \u003cbutton type=\"button\" className=\"btn btn-link btn-xs\" onClick={this.deleteItem}\u003e\n              \u003ci className=\"fa fa-trash-o fa-lg\"\u003e\u003c/i\u003e\n            \u003c/button\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    );\n  }\n});\n```\nOn the other hand, the `ProductList` component ([static/js/productList.js](https://github.com/productList.js)) takes the array of products to create an array of `Product` components:\n\n```\nvar ProductList = React.createClass({\n  render: function() {\n\n    var productsMapped = this.props.products.map(function (product, index) {\n      return \u003cProduct product={product} key={index} /\u003e\n    });\n\n    return ( \u003cdiv className=\"row extra-bottom-margin\"\u003e {productsMapped} \u003c/div\u003e );\n  }\n});\n```\nWhile the `Product` component defines `quantity` as its state, a function to call the API endpoint to add an item to the shopping cart and render a product:\n\n```\nvar Product = React.createClass({\n  getInitialState: function() {\n    return {\n      quantity: 1\n    };\n  },\n\n  updateQuantity: function(evt) {\n    this.setState({\n        quantity: evt.target.value\n    });\n  },\n\n  addToCart: function() {\n    fetch('/cart/item', {\n      credentials: 'same-origin',\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        id: this.props.product.id,\n        quantity: this.state.quantity,\n     })\n    });\n  },\n\n  render: function() {\n    var name = this.props.product.name;\n    var id = this.props.product.id;\n    var price = this.props.product.price;\n\n    return (\n      \u003cdiv className=\"col-sm-3\"\u003e\n        \u003cdiv className=\"col-item\"\u003e\n          \u003cdiv className=\"photo\"\u003e\n            \u003cimg src=\"http://placehold.it/200x150\" className=\"img-responsive\" alt=\"a\" /\u003e\n          \u003c/div\u003e\n          \u003cdiv className=\"info\"\u003e\n            \u003cdiv className=\"row\"\u003e\n              \u003cdiv className=\"price col-md-12\"\u003e\n                \u003ch5\u003e{name}\u003c/h5\u003e\n                \u003ch5 className=\"price-text-color\"\u003e${price}\u003c/h5\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv className=\"separator clear-left\"\u003e\n              \u003cp className=\"section-qty\"\u003e\n                \u003cinput className=\"form-control input-sm\" type=\"text\" value={this.state.quantity} onChange={this.updateQuantity} /\u003e\n              \u003c/p\u003e\n              \u003cp className=\"section-add\"\u003e\n                \u003cbutton type=\"button\" className=\"btn btn-link btn-xs\" onClick={this.addToCart}\u003e\n                  \u003ci className=\"fa fa-shopping-cart\"\u003e\u003c/i\u003e\u003cspan className=\"hidden-sm\"\u003eAdd to cart\u003c/span\u003e\n                \u003c/button\u003e\n              \u003c/p\u003e\n            \u003c/div\u003e\n            \u003cdiv className=\"clearfix\"\u003e\u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    );\n  }\n});\n```\nFinally, you can run the application either by executing the `com.pusher.ShoppingCartApplication` class on your IDE, or on the command line with:\n\n``` \n$ mvn spring-boot:run\n```\nAdditionally, on the command line, you can create a JAR file and execute it:\n\n``` \n$ mvn package -DskipTests\n$ java -jar target/shopping-cart-0.0.1-SNAPSHOT.jar\n```\nNow, when you open `http://localhost:8080/` in two browser windows at the same time, the actions made in one window should be reflected on the other one:\n\n![realtime-shopping-cart-java-react-final-app](//images.contentful.com/1es3ne0caaid/7M1VxgHmHmMI60osakayIi/e43d2479b6313e9753ad79ab75ea747d/realtime-shopping-cart-java-react-final-app.gif)\n\n## Conclusion\n\nIn this tutorial, we saw how to integrate Pusher into a Java back-end and a React front-end. As you can see, it is trivial and easy to add Pusher to your app and start adding new features. You can start on the forever free plan that includes 100 max connections, unlimited channels, 200k daily messages, and SSL protection. [Signup now!](https://pusher.com/signup)\n\nRemember that if you get stuck, you can find the final version of this code on [Github](https://github.com/eh3rrera/shopping-cart-pusher) or contact us with your questions.\n\n## Further reading\n\n- [Getting started with Spring Boot](https://spring.io/guides/gs/spring-boot/)\n- [React documentation](https://facebook.github.io/react/docs/getting-started.html)\n- [Pusher channels](https://pusher.com/docs/client_api_guide/client_public_channels)\n- [Pusher events](https://pusher.com/docs/client_api_guide/client_events)","metaTitle":"Build a realtime shopping cart with Java and React","metaDescription":"Learn how to build a simple live shopping cart, using Pusher to sync the content of a user's shopping cart between devices and browser tabs."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5pVmqz52CIiSwk8YIuqc6W","type":"Entry","createdAt":"2018-02-22T15:04:11.995Z","updatedAt":"2018-02-28T11:49:05.472Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an activity feed with React","url":"activity-feed-react","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"29U2yrruIQmo6UkY0MMsyK","type":"Entry","createdAt":"2018-02-13T11:27:38.132Z","updatedAt":"2018-02-14T10:08:48.377Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Esteban Herrera","url":"esteban-herrera","email":"estebanhb2@gmail.com","twitter":"https://twitter.com/eh3rrera","github":"https://github.com/eh3rrera/","guestWriter":true}}],"projectRepo":"https://github.com/pusher-community/activity-feed-pusher-react/","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2016-11-29","description":"Build a simple activity feed with Node.js REST API, Express and Mongoose. ","prerequisite":"A basic understanding of React and Node.js are needed to follow this tutorial.","content":"Applications can generate a lot of events when they're running. However, most of the time, the only way to know what's going on is by looking at the logs or running queries against the database. It would be nice to let the users see what is going on in an easy way, so why not build an activity feed to see in realtime, every change made to the models of the application?\n\nIn this tutorial we are going to build a simple [Node.js](https://nodejs.org) REST API with [Express](http://expressjs.com/) and [Mongoose](http://mongoosejs.com/) to work with generic measurements, let's say for example, temperatures. Every time a database record is modified (created/updated/deleted), it will trigger an event to a channel in realtime using [Pusher](https://pusher.com/). In the frontend, those events will be shown in an activity feed made with [React](https://facebook.github.io/react/index.html).\n\nThis is how the final application will look like:\n\n![activity-feed-react-demo](//images.contentful.com/1es3ne0caaid/lwQz7IHmP6eyq684I2Syk/bf8e90962701acda5f785ee00663cefd/activity-feed-react-demo.gif)\n\nThis tutorial assumes prior knowledge of Node.js and React. We will integrate Pusher into a Node.js API, create React components and hook them up with Pusher. However, since Pusher is so easy to use together with Node.js and React, you might feel that in this tutorial we will spend most of our time setting things up in the backend and creating the React components.\n\nYou'll need to have access to a [MongoDB](https://www.mongodb.com) database. If you're new to MongoDB, you might find [this](https://docs.mongodb.com/manual/administration/install-community/) documentation on how to install it handy.\n\nThe source code of the final version of the application is available on [Github](https://github.com/pusher-community/activity-feed-pusher-react).\n\n## Application Structure\n\nThe project has the following structure:\n\n``` \n|— models\n| |— measure.js\n|— public\n| |— css\n| |— images\n| |— js\n| | |— app.js\n| | |— event.js\n| | |— events.js\n| | |— header.js\n|— routes\n| |— api.js\n| |— index.js\n|— views\n| |— index.ejs\n|- package.json\n|- server.js\n```\n\n- The `model` directory contains the Mongoose schema to interact with the database.\n- The `public` directory contains the CSS and images files as well as the Javascript (React) files that will be used on the main web page of the app.\n- The `routes` directory contains the server's API endpoints and the route to server the main page of the app.\n- The `view` directory contains the EJS template for the main page of the app.\n- In the root directory, we can find the package.json file with the project's dependencies and the file for the Express server.\n\n## Setting up Pusher\n\nCreate a free account at [Pusher](https://pusher.com/signup).\n\nWhen you first log in, you'll be asked to enter some configuration options:\n\n![activity-feed-react-create-pusher-app](//images.contentful.com/1es3ne0caaid/xCy2xfTAMSWsMmYwckagm/bf8e90962701acda5f785ee00663cefd/activity-feed-react-create-pusher-app.png)\n\nEnter a name, choose *React* as your frontend tech, and *Node.js* as your backend tech. This will give you some sample code to get you started.\n\n![activity-feed-react-pusher-libraries](//images.contentful.com/1es3ne0caaid/6Bqkw0hDgWKiU4IQswWiAE/bf8e90962701acda5f785ee00663cefd/activity-feed-react-pusher-libraries.png)\n\nThis won't lock you into a specific set of technologies, you can always change them. With Pusher, you can use any combination of libraries.\n\nThen go to the *App Keys* tab to copy your App ID, Key, and Secret credentials, we'll need them later.\n\n## Setting up the application\n\nFirst, add a default `package.json` configuration file with:\n\n``` \nnpm init -y\n```\n\nFor running the server, we'll need Express, React, Pusher, and other dependencies, let's add them with:\n\n``` \nnpm install --save express ejs body-parser path pusher mongoose\n```\n\nHere are the dependencies section on the package.json file in case a future version of a dependency breaks the code:\n\n```\n{\n  ...\n  \"dependencies\": {\n    \"body-parser\": \"^1.15.2\",\n    \"ejs\": \"^2.5.2\",\n    \"express\": \"^4.14.0\",\n    \"mongoose\": \"^4.6.4\",\n    \"path\": \"^0.12.7\",\n    \"pusher\": \"^1.5.0\",\n  }\n}\n```\n\n## The Node.js Backend\n\nThe backend is a standard Express app with Mongoose to interact with the database. In the [server.js](https://github.com/pusher-community/activity-feed-pusher-react/blob/master/server.js) file, you can find the configuration for Express:\n\n```\nvar app = express();\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'ejs');\n```\n\nThe routes exposed to the server are organized in two different files:\n\n```\napp.use('/', index);\napp.use('/api', api);\n```\n\nThen, the app will connect to the database and start the web server on success:\n\n```\nmongoose.connect('mongodb://localhost/temperatures');\n\nvar db = mongoose.connection;\ndb.on('error', console.error.bind(console, 'Connection Error:'));\ndb.once('open', function () {\n  app.listen(3000, function () {\n    console.log('Node server running on port 3000');\n  });\n});\n```\n\nHowever, the interesting part is in the file [routes/api.js](https://github.com/pusher-community/activity-feed-pusher-react/blob/master/routes/api.js). First, the Pusher object is created passing the configuration object with the App ID, the key, and the secret for the Pusher app:\n\n```\nvar pusher = new Pusher({\n  appId      : process.env.PUSHER_APP_ID,\n  key        : process.env.PUSHER_APP_KEY,\n  secret     : process.env.PUSHER_APP_SECRET,\n  encrypted  : true,\n});\n```\n\nPusher can be used to publish any events that happen in our application.  These events have a _channel_, which allows events to relate to a particular topic, an _event-name_ used to identify the type of the event, and a _payload_,  which you can attach any additional information to the message.\n\nWe are going to publish an event to a Pusher channel when a database record is created/updated/deleted with that record as attachment so we can show it in an activity feed.\n\nHere's the definition of our API's REST endpoints. Notice how the event is triggered using `pusher.trigger` after the database operation is performed successfully:\n\n```\n/* CREATE */\nrouter.post('/new', function (req, res) {\n  Measure.create({\n    measure: req.body.measure,\n    unit: req.body.unit,\n    insertedAt: Date.now(),\n  }, function (err, measure) {\n    if (err) {\n      ...\n    } else {\n      pusher.trigger(\n        channel,\n        'created', \n        {\n          name: 'created',\n          id: measure._id,\n          date: measure.insertedAt,\n          measure: measure.measure,\n          unit: measure.unit,\n        }\n      );\n\n      res.status(200).json(measure);\n    }\n  });\n});\n\nrouter.route('/:id')\n  /* UPDATE */\n  .put((req, res) =\u003e {\n    Measure.findById(req.params.id, function (err, measure) {\n      if (err) {\n        ...\n      } else if (measure) {\n        measure.updatedAt = Date.now();\n        measure.measure = req.body.measure;\n        measure.unit = req.body.unit;\n\n        measure.save(function () {\n          pusher.trigger(\n            channel,\n            'updated', \n            {\n              name: 'updated',\n              id: measure._id,\n              date: measure.updatedAt,\n              measure: measure.measure,\n              unit: measure.unit,\n            }\n          );\n\n          res.status(200).json(measure);\n        });\n\n\n     } else {\n        ...\n      }\n    });\n  })\n\n  /* DELETE */\n  .delete((req, res) =\u003e {\n    Measure.findById(req.params.id, function (err, measure) {\n      if (err) { \n        ...\n      } else if (measure) {\n        measure.remove(function () {\n          pusher.trigger(\n            channel,\n            'deleted', \n            {\n              name: 'deleted',\n              id: measure._id,\n              date: measure.updatedAt ? measure.updatedAt : measure.insertedAt,\n              measure: measure.measure,\n              unit: measure.unit,\n            }\n          );\n\n          res.status(200).json(measure);\n        });\n     } else {\n        ...\n      }\n    });\n  });\n```\n\n`Measure` is the Mongoose schema used to access the database. You can find its definition in the [models/measure.js](https://github.com/pusher-community/activity-feed-pusher-react/blob/master/models/measure.js) file:\n\n```\nvar measureSchema = new Schema({  \n  measure:     { type: Number },\n  insertedAt:  { type: Date },\n  updatedAt:   { type: Date },\n  unit:        { type: String },\n});\n```\n\nThis way, we'll be listening to these events to update the state of the client in the frontend.\n\n## React + Pusher\n\nReact thinks of the UI as a set of components, where you simply update a component's state, and then React renders a new UI based on this new state updating the DOM for you in the most efficient way.\n\nThe app's UI will be organized into three components, a header (`Header`), a container for events (`Events`), and a component for each event (`Event`):\n\n![activity-feed-react-components](//images.contentful.com/1es3ne0caaid/2eZ8j0npW0IU6siac6wokW/bf8e90962701acda5f785ee00663cefd/activity-feed-react-components.png)\n\nThe template for the index page is pretty simple. It just contains references to the CSS files, a `div` element where the UI will be rendered, the Pusher app key (passed from the server), and references to all the Javascript files the application uses:\n\n```\n\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n\u003chead\u003e\n  \u003cmeta charset=\"utf-8\"\u003e\n  \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n  \u003ctitle\u003eRealtime Activity Feed with Pusher + React\u003c/title\u003e\n  \u003clink rel=\"stylesheet\" href=\"/css/all-the-things.css\"\u003e\n  \u003clink rel=\"stylesheet\" href=\"/css/style.css\"\u003e\n\u003c/head\u003e\n\n\u003cbody class=\"blue-gradient-background\"\u003e\n\n  \u003cdiv id=\"app\"\u003e\u003c/div\u003e\n\n  \u003c!-- React --\u003e\n  \u003cscript src=\"https://unpkg.com/react@15.3.2/dist/react-with-addons.js\"\u003e\u003c/script\u003e\n  \u003cscript src=\"https://unpkg.com/react-dom@15.3.2/dist/react-dom.js\"\u003e\u003c/script\u003e\n  \u003cscript src=\"https://unpkg.com/babel-standalone@6.15.0/babel.min.js\"\u003e\u003c/script\u003e\n\n  \u003c!-- Libs --\u003e\n  \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.15.2/moment.min.js\"\u003e\u003c/script\u003e\n  \u003cscript src=\"https://js.pusher.com/3.2/pusher.min.js\"\u003e\u003c/script\u003e\n\n  \u003c!-- Pusher Config --\u003e\n  \u003cscript\u003e\n    var PUSHER_APP_KEY = '\u003c%= pusher_app_key %\u003e';\n  \u003c/script\u003e\n\n  \u003c!-- App/Components --\u003e\n  \u003cscript type=\"text/babel\" src=\"/js/header.js\"\u003e\u003c/script\u003e\n  \u003cscript type=\"text/babel\" src=\"/js/event.js\"\u003e\u003c/script\u003e\n  \u003cscript type=\"text/babel\" src=\"/js/events.js\"\u003e\u003c/script\u003e\n  \u003cscript type=\"text/babel\" src=\"/js/app.js\"\u003e\u003c/script\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e\n```\n\nThe application will be rendered in the `div` element with the ID `app`. The file [public/js/app.js](https://github.com/pusher-community/activity-feed-pusher-react/blob/master/public/js/app.js) is the starting point for our React app:\n\n```\nvar App = React.createClass({\n  ...\n});\n\nReactDOM.render(\u003cApp /\u003e, document.getElementById(\"app\"));\n```\n\nInside the `App` class, first, we define our state as an array of events:\n\n```\nvar App = React.createClass({\n\n  getInitialState: function() {\n    return { events: [] };\n  },\n  \n  ...\n  \n});\n```\n\nThen, we use the `componentWillMount` method, which is invoked once immediately before the initial rendering occurs, to set up Pusher:\n\n```\nvar App = React.createClass({\n\n  ...\n\n  componentWillMount: function() {\n    this.pusher = new Pusher(PUSHER_APP_KEY, {\n      encrypted: true,\n    });\n    this.channel = this.pusher.subscribe('events_to_be_shown');\n  }, \n\n  ...\n});\n\n...\n```\n\nWe subscribe to the channel's events in the `componentDidMount` method and unsubscribe from all of them and from the channel in the `componentWillUnmount` method:\n\n```\nvar App = React.createClass({\n\n  ... \n\n  componentDidMount() {\n    this.channel.bind('created', this.updateEvents);\n    this.channel.bind('updated', this.updateEvents);\n    this.channel.bind('deleted', this.updateEvents);\n  }\n\n  componentWillUnmount() {\n    this.channel.unbind();\n\n    this.pusher.unsubscribe(this.channel);\n  } \n\n  ...\n});\n\n...\n```\n\nThe `updateEvents` function updates the state of the component so the UI can be re-render. Notice how the new event is prepended to the existing array of events. Since React works best with immutable objects, we create a copy of that array to then update this copy:\n\n```\n\nvar App = React.createClass({\n\n  ...\n\n  updateEvents: function(data) {\n    var newArray = this.state.events.slice(0);\n    newArray.unshift(data);\n\n    this.setState({\n      events: newArray,\n    });\n  },\n\n  ...\n});\n\n...\n```\n\nFinally, the `render` method shows the top-level components of our app, `Header` and `Events`:\n\n```\nvar App = React.createClass({\n\n  ...\n\n  render() {\n    return (\n      \u003cdiv\u003e\n        \u003cHeader  /\u003e\n        \u003cEvents events={this.state.events} /\u003e\n      \u003c/div\u003e\n    );\n  }\n\n  ...\n}\n\n...\n```\n\n[public/javascript/header.js](https://github.com/pusher-community/activity-feed-pusher-react/blob/master/public/js/header.js) is a simple component without state or properties that only renders the HTML for the page's header.\n\nThe `Events` component ([public/javascript/events.js](https://github.com/pusher-community/activity-feed-pusher-react/blob/master/public/js/events.js)) takes the array of events to create an array of `Event` components:\n\n```\nvar Events = React.createClass({\n  render: function() {\n    var ReactCSSTransitionGroup = React.addons.CSSTransitionGroup;\n\n    var eventsLength = this.props.events.length;\n    var eventsMapped = this.props.events.map(function (evt, index) {\n      const key = eventsLength - index;\n      return \u003cEvent event={evt} key={key} /\u003e\n    });\n\n    return \u003csection className={'blue-gradient-background intro-splash splash'}\u003e\n             \u003cdiv className={'container center-all-container'}\u003e\n               \u003ch1 className={'white light splash-title'}\u003e\n                 Realtime Activity Feed with Pusher + React\n               \u003c/h1\u003e\n               \u003cReactCSSTransitionGroup component=\"ul\" className=\"evts\" transitionName=\"evt-transition\" transitionEnterTimeout={500} transitionLeaveTimeout={500}\u003e\n                 {eventsMapped}\n               \u003c/ReactCSSTransitionGroup\u003e\n             \u003c/div\u003e\n           \u003c/section\u003e;\n    }\n});\n```\n\nThere are two important things in this code.\n\nFirst, React requires every message component in a collection to have a unique identifier defined by the `key` property. This help it to know when elements are added or removed. As new elements are prepended instead of appended, we can't give the first element the index `0` as key since this will only work the first time an element is added (for the next added elements, there will be an element with key `0` already). Therefore, keys are assigned this way:\n\n```\nvar key = eventsLength - index;\n```\n\nThe second thing is that the insertion of a new event is done with the `ReactCSSTransitionGroup` add-on component, which wraps the elements you want to animate. By default, it renders a `span` to wrap them, but since we're going to work with `li` elements, we specify the wrapper tag `ul` with the `component` property. `className` becomes a property of the rendered component, as any other property that doesn't belong to `ReactCSSTransitionGroup`.\n\n`transitionName` is the prefix used to identify the CSS classes to perform the animation. You can find them in the file [public/css/style.css](https://github.com/pusher-community/activity-feed-pusher-react/blob/master/public/css/style.css):\n\n```\n.evt-transition-enter {\n    opacity: 0.01;\n}\n\n.evt-transition-enter.evt-transition-enter-active {\n    opacity: 1;\n    transition: opacity 500ms ease-in;\n}\n\n.evt-transition-leave {\n    opacity: 1;\n}\n\n.evt-transition-leave.evt-transition-leave-active {\n    opacity: 0.01;\n    transition: opacity 500ms ease-in;\n}\n```\n\nFinally, the `Event` component ([public/js/event.js](https://github.com/pusher-community/activity-feed-pusher-react/blob/master/public/js/event.js)), using [Moment.js](https://momentjs.com/) to format the date, renders the event in the following way:\n\n```\n  var Event = React.createClass({\n    render: function() {\n      var name = this.props.event.name;\n      var id = this.props.event.id;\n      var date = moment(this.props.event.date).fromNow();\n      var measure = this.props.event.measure;\n      var unit = this.props.event.unit;\n\n      return (\n        \u003cli className={'evt'}\u003e\n          \u003cdiv className={'evt-name'}\u003e{name}:\u003c/div\u003e\n          \u003cdiv className={'evt-id'}\u003e{id}\u003c/div\u003e\n          \u003cdiv className={'evt-date'}\u003e{date}\u003c/div\u003e\n          \u003cdiv className={'evt-measure'}\u003e{measure}\u0026deg;{unit}\u003c/div\u003e\n        \u003c/li\u003e\n      );\n    }\n  });\n```\n\nTo run the server, execute the `server.js` file using the following command:\n\n``` \nPUSHER_APP_ID=\u003cYOUR PUSHER APP ID\u003e PUSHER_APP_KEY=\u003cYOUR PUSHER APP KEY\u003e PUSHER_APP_SECRET=\u003cYOUR PUSHER APP SECRET\u003e node server.js\n```\n\nTo test the whole app, you can use something to call the API endpoints with a JSON payload, like [curl](https://curl.haxx.se/) or [Postman](https://www.getpostman.com/):\n\n![activity-feed-react-postman](//images.contentful.com/1es3ne0caaid/1WnorjIqIoMqKWu8I0W4qA/bf8e90962701acda5f785ee00663cefd/activity-feed-react-postman.png)\n\nOr if you only want to test the frontend part with Pusher, you can use the [Pusher Debug Console on your dashboard](http://dashboard.pusher.com/):\n\n![activity-feed-react-pusher-console](//images.contentful.com/1es3ne0caaid/4Q1z5sQ9zG8IokUqE6ACsk/bf8e90962701acda5f785ee00663cefd/activity-feed-react-pusher-console.png)\n\n## Conclusion\n\nIn this tutorial, we saw how to integrate Pusher into a Node.js backend and a React frontend. As you can see, it is trivial and easy to add Pusher to your app and start adding new  features.\n\nRemember that if you get stuck, you can find the final version of this code on [Github](https://github.com/pusher-community/activity-feed-pusher-react/) or contact us with your questions.\n\n## Further reading\n\n- [Express routing documentation](http://expressjs.com/en/starter/basic-routing.html)\n- [Mongoose quick start](http://mongoosejs.com/docs/index.html)\n- [React documentation](https://facebook.github.io/react/docs/getting-started.html)\n- [Moment.js documentation](http://momentjs.com/docs/)\n- [Pusher channels](https://pusher.com/docs/client_api_guide/client_public_channels)\n- [Pusher events](https://pusher.com/docs/client_api_guide/client_events)","metaTitle":"Build an activity feed with React","metaDescription":"Build a realtime activity feed with React, Node.js and Pusher. Learn how to set up realtime updates of the backend database and keep your feed updated live! "}}],"defaultValue":"Channels \u0026 React","queryType":"tag","pages":5,"route":"/tutorials","query":{"product":"Channels","tag":"React","page":"5"}}},"page":"/tutorials","query":{"product":"Channels","tag":"React","page":"5"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=React&page=5 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:15 GMT -->
</html>