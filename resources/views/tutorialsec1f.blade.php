<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=Flutter&page=2 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:43:47 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">14</span> tutorials for “<span class="css-npldjc ehwuahf2">Flutter</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials74b7.html?product=Channels&amp;tag=Flutter" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials49f1.html?product=Beams&amp;tag=Flutter" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Flutter"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/flutter-user-input.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Flutter<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li></ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">First steps with Flutter - Part 3: Responding to user input</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This tutorial provides an introductory-level overview of working with user inputs in Flutter. You will work through a se...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/flutter-building-layouts.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flutter<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">First steps with Flutter - Part 2: Building layouts</h3><p class="css-k12xad e5jrto45">This introductory-level tutorial covers the basic of UI layouts with Flutter. You will work through basic examples of co...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/flutter-widgets.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Flutter</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">First steps with Flutter- Part 1: Exploring widgets</h3><p class="css-k12xad e5jrto45">This article provides an introductory-level overview of Flutter&#x27;s widget system. You will be introduced to the widget tr...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/introducing-flutter-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flutter</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Getting started with Flutter - Part 2: Creating your first app</h3><p class="css-k12xad e5jrto45">This two-part series introduces Flutter, a framework for building cross-platform mobile apps with native interfaces, bas...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/introducing-flutter-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flutter</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Getting started with Flutter - Part 1: Introduction to Flutter</h3><p class="css-k12xad e5jrto45">This two-part series introduces Flutter, a framework for building cross-platform mobile apps with native interfaces, bas...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials58ad.html?tag=Flutter&amp;page=1" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials58ad.html?tag=Flutter&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsec1f.html?tag=Flutter&amp;page=2" class="css-2wakph edg0byb1">2</a><style data-emotion-css="69ho49">.css-69ho49{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#eeeeff;color:#8f87e6;cursor:not-allowed;}.css-69ho49:hover{background:#5c29db;color:white;}.css-69ho49:active{background:#5c29db;}@media all and (min-width:760px){.css-69ho49{font-size:1rem;}}.css-69ho49:hover,.css-69ho49:active{cursor:not-allowed;background:#ebeaef;color:#fffc;}</style><a href="#" disabled="" class="css-69ho49 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":14,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"xBX5pNSVbMmwoEsMSUwmg","type":"Entry","createdAt":"2019-01-30T17:18:51.428Z","updatedAt":"2019-03-24T16:08:06.958Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"First steps with Flutter - Part 3: Responding to user input","url":"flutter-user-input","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"58WBWjhcWcuAMI6qIAyiC4","type":"Entry","createdAt":"2018-12-13T20:46:00.073Z","updatedAt":"2018-12-13T20:46:36.867Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Suragch","url":"suragch","email":"studymongolian@gmail.com","twitter":"https://twitter.com/suragch","github":"https://github.com/suragch","guestWriter":true}}],"projectRepo":"https://github.com/suragch/flutter_responsive_ui","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Q3oRmiXjOmcSmweY4gKY8","type":"Entry","createdAt":"2018-09-12T09:33:28.375Z","updatedAt":"2018-09-12T09:33:28.375Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flutter","url":"flutter","type":"framework","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}}],"reviewDate":"2018-12-22","description":"This tutorial provides an introductory-level overview of working with user inputs in Flutter. You will work through a series of simple demos, covering features like navigation, text input and gesture detection.","prerequisite":"You will need a Flutter development environment set up on your machine.","content":"This is a three-part series. You can find the other parts here:\n\n- [First steps with Flutter - Part 1: Exploring widgets](https://pusher.com/tutorials/flutter-widgets)\n- [First steps with Flutter - Part 2: Building layouts](https://pusher.com/tutorials/flutter-building-layouts)\n\n\n## Introduction\n\nIn the two previous tutorials we saw that widgets are blueprints for everything that you can see (and many things that you can't see) in the user interface. Simple widgets can be combined together to make complex layouts. The majority of these layouts can be built by dividing your design into rows (use the Row widget), columns (use the Column widget), and layers (use the Stack widget).\n\nThe thing about those layouts, though, is that they were static. You could touch and tap and swipe them all day and they wouldn't do a thing. We are going to fix that in this lesson.\n\nToday we’re going to explore how to actually do something when the user interacts with the widgets that we’ve added to our layout. The emphasis will be on simple, easy to reproduce examples. I strongly encourage you to work along as we go through each one. Make little changes to the code and see how that affects the behavior. This will greatly increase your overall learning.\n\n## Prerequisites\n\nThis tutorial is for beginning Flutter developers. However, I’m assuming that you have the Flutter development environment set up and that you know how to create basic layouts using widgets. If not, refer to the following links:\n\n- [Setup Flutter](https://flutter.io/docs/get-started/install)\n- [Learn about widgets](https://pusher.com/tutorials/flutter-widgets)\n- [Learn about layouts](https://pusher.com/tutorials/flutter-building-layouts)\n\nIn this tutorial we’ll start to do a little more programming with the Dart language. I’m assuming that you have a basic knowledge of object oriented programming, but I don't assume that you know Dart.\n\nThis lesson was tested using Flutter 1.0 with Android Studio. If you are using Visual Studio Code, though, it shouldn't be a problem. The commands and shortcuts are a little different, but they both fully support Flutter.\n\n## Review exercise\n\nBefore I give you the boilerplate code that we’ll use in the examples below, let's see if you can create the following layout on your own.\n\n![flutter-user-input-1](//images.ctfassets.net/1es3ne0caaid/6tdpmtNadqGGWMuuase4U/c09ab2c9c90467648e8e9cc66699f5f9/flutter-user-input-1.png)\n\nHow did you do? If you weren't able to do it, you might want to check out the [previous lesson](https://pusher.com/tutorials/flutter-building-layouts) on building layouts. You may have created something like this:\n\n``` dart\n    void main() =\u003e runApp(MyApp());\n    \n    class MyApp extends StatelessWidget { //            \u003c---  StatelessWidget\n      @override\n      Widget build(BuildContext context) {\n        return MaterialApp(\n          ...\n            body: myLayoutWidget(),\n          ...\n    }\n    \n    Widget myLayoutWidget() {\n      return Column(\n        children: [\n          Text(...),\n          RaisedButton(...),\n        ],\n      );\n    }\n```\n\n## Widgets and state\n\nThat layout above was fine as far as layouts go, but if you try to change the text when the button is pressed, you’ll run into problems. That's because widgets are immutable: they can't be changed. They can only be recreated. But to recreate the Text widget we need to put the string into a variable. We call that variable the state. It’s similar in idea to the phrases “the state of affairs” or a “State of the Union Address,” which deal with the current conditions of some people or country. Similarly, when we talk about a widget, the state refers to the values (in other words, the current condition) of the variables associated with that widget.\n\nYou notice in the code above that it's a StatelessWidget. StatelessWidgets don't have any state. That is, they don't have any mutable variables. So if we have a variable that we want to change, then we need a State**ful**Widget.\n\nStatefulWidgets work like this:\n\n\n- There is a StatefulWidget class and a State class. \n- The StatefulWidget class initializes the State class.\n- The State class holds the variables and tells the StatefulWidget class when and how to build itself.\n\n\n\u003e **Note:** Behind the scenes there is also an [Element](https://docs.flutter.io/flutter/widgets/Element-class.html) that is created from the widget. But as I said, it's behind the scenes and we can happily ignore it at this point in our journey.\n\nSo practically speaking, whenever we need a StatefulWidget, we have to create two classes, a widget class and a State class. Here is the basic setup:\n\n``` dart\n    // widget class\n    class MyWidget extends StatefulWidget {\n      @override\n      _MyWidgetState createState() =\u003e _MyWidgetState();\n    }\n    \n    // state class\n    class _MyWidgetState extends State\u003cMyWidget\u003e {\n      @override\n      Widget build(BuildContext context) {\n        return ...; // widget layout\n      }\n    }\n```\n\nNotice that \n\n\n- the widget class has a `createState()` method that returns the State. The State class has a `build()` method that builds the widget.\n- the `_` underscore at the beginning of the name `_MyWidgetState` makes it private. It can only be seen within this file. This is a characteristic of the Dart language.\n\n\n## Responsive widgets\n\nNow that we’ve talked about state, we’re ready to use it to make our widgets respond to user input.\n\n### Buttons\n\n![flutter-user-input-2](//images.ctfassets.net/1es3ne0caaid/6VQ359BLiMs60uoIyiEck4/1c1e8cf33e28458dc08854f8ee46048f/flutter-user-input-2.gif)\n\nReplace the code in your `main.dart` file with the following code:\n\n``` dart\n    import 'package:flutter/material.dart';\n    \n    void main() =\u003e runApp(MyApp());\n    \n    // boilerplate code\n    class MyApp extends StatelessWidget {\n      @override\n      Widget build(BuildContext context) {\n        return MaterialApp(\n          title: 'Flutter',\n          home: Scaffold(\n            appBar: AppBar(\n              title: Text('Flutter'),\n            ),\n            body: MyWidget(),\n          ),\n        );\n      }\n    }\n    \n    // widget class\n    class MyWidget extends StatefulWidget {\n      @override\n      _MyWidgetState createState() =\u003e _MyWidgetState();\n    }\n    \n    // state class\n    // We will replace this class in each of the examples below\n    class _MyWidgetState extends State\u003cMyWidget\u003e {\n    \n      // state variable\n      String _textString = 'Hello world';\n      \n      // The State class must include this method, which builds the widget\n      @override\n      Widget build(BuildContext context) {\n        return Column(\n          children: [\n            Text(\n              _textString,\n              style: TextStyle(fontSize: 30),\n            ),\n            RaisedButton( //                         \u003c--- Button\n              child: Text('Button'),\n              onPressed: () {\n                _doSomething();\n              },\n            ),\n          ],\n        );\n      }\n      \n      // this private method is run whenever the button is pressed\n      void _doSomething() {\n        // Using the callback State.setState() is the only way to get the build\n        // method to rerun with the updated state value.\n        setState(() {\n          _textString = 'Hello Flutter';\n        });\n      }\n    }\n```\n\nRun the code that you pasted in above. It should look the same as our original layout, but now the first time we press the button, the text gets updated.\n\nNotes:\n\n- The RaisedButton widget has an `onPressed` parameter where you can add a function that will be called whenever the button is pressed.\n- You have to update variables inside the `setState()` method if you want the changes to be reflected in the UI. \n- Do a hot restart (instead of a hot reload) to reset the state to the initial values.\n\n### TextFields\n\nIn this example whenever a TextField is changed, the Text widget above it gets updated.\n\n![flutter-user-input-3](//images.ctfassets.net/1es3ne0caaid/5EaXGDt8juY4Wy2eGu8Wco/9927469431169d917baef3a19e271214/flutter-user-input-3.gif)\n\nReplace the `_MyWidgetState()` class with the following code:\n\n``` dart\n    class _MyWidgetState extends State\u003cMyWidget\u003e {\n      \n      String _textString = 'Hello world';\n      \n      @override\n      Widget build(BuildContext context) {\n        return Column(\n          children: [\n            Text(\n              _textString,\n              style: TextStyle(fontSize: 30),\n            ),\n            TextField( //                       \u003c--- TextField\n              onChanged: (text) {\n                _doSomething(text);\n              },\n            )\n          ],\n        );\n      }\n      \n      void _doSomething(String text) {\n        setState(() {\n          _textString = text;\n        });\n      }\n    }\n```\n\nNotes:\n\n- TextField has an `onChanged`  parameter for a callback method. This method provides the current string after a change has been made.\n- If you want to get the text value without listening to `onChanged`, you can set the TextField’s `controller` parameter. See [this post](https://stackoverflow.com/a/53861303/3681880).\n\n### Checkboxes\n\nFor a checkbox with a label you can use a CheckboxListTile. \n\n![flutter-user-input-4](//images.ctfassets.net/1es3ne0caaid/4MiacHEb3WoUUQCSQgmWo8/1ff6d653331d972405ab226ed834f07b/flutter-user-input-4.gif)\n\nReplace the `_MyWidgetState()` class with the following code:\n\n``` dart\n    class _MyWidgetState extends State\u003cMyWidget\u003e {\n      \n      bool _checkedValue = false;\n      \n      @override\n      Widget build(BuildContext context) {\n        return CheckboxListTile( //                   \u003c--- CheckboxListTile\n          title: Text('this is my title'),\n          value: _checkedValue,\n          onChanged: (newValue) {\n            _doSomething(newValue);\n          },\n          // setting the controlAffinity to leading makes the checkbox come \n          // before the title instead of after it\n          controlAffinity: ListTileControlAffinity.leading,\n        );\n      }\n      \n      void _doSomething(bool isChecked) {\n        setState(() {\n          _checkedValue = isChecked;\n        });\n      }\n    }\n```\n\nNotes:\n\n- If you want to create a custom checkbox then you can use the [Checkbox](https://docs.flutter.io/flutter/material/Checkbox-class.html) widget. It doesn't have a title included.\n- Try commenting out the `controlAffinity` line to see how that affects the layout. See [this post](https://stackoverflow.com/a/53842698/3681880) also.\n- [Here is an example](https://stackoverflow.com/a/45154259/3681880) of a list of checkboxes.\n\n### Dialogs\n\nThere are [a few kinds of dialogs](https://flutter.io/docs/development/ui/widgets/material#Dialogs,%20alerts,%20and%20panels) in Flutter, but let's looks at a common one: the [AlertDialog](https://docs.flutter.io/flutter/material/AlertDialog-class.html). It's not difficult to set up.\n\n![flutter-user-input-5](//images.ctfassets.net/1es3ne0caaid/kWtWZ31oLmmgae8CGIuCA/00465b87a046a248b6a72ce3241da348/flutter-user-input-5.png)\n\nReplace the `_MyWidgetState()` class with the following code:\n\n``` dart\n    class _MyWidgetState extends State\u003cMyWidget\u003e {\n    \n      @override\n      Widget build(BuildContext context) {\n        return RaisedButton(\n          child: Text('Button'),\n          onPressed: () {\n            _showAlertDialog();\n          },\n        );\n      }\n      \n      void _showAlertDialog() {\n        \n        // set up the button\n        Widget okButton = FlatButton(\n          child: Text(\"OK\"),\n          onPressed: () {\n            // This closes the dialog. `context` means the BuildContext, which is\n            // available by default inside of a State object. If you are working\n            // with an AlertDialog in a StatelessWidget, then you would need to\n            // pass a reference to the BuildContext.\n            Navigator.pop(context);\n          },\n        );\n        \n        // set up the AlertDialog\n        AlertDialog alert = AlertDialog(\n          title: Text(\"Dialog title\"),\n          content: Text(\"This is a Flutter AlertDialog.\"),\n          actions: [\n            okButton,\n          ],\n        );\n        \n        // show the dialog\n        showDialog(\n          context: context,\n          builder: (BuildContext context) {\n            return alert;\n          },\n        );\n        \n      }\n    }\n```\n\nNotes:\n\n- An AlertDialog needs the BuildContext. This is passed into the `build()` method and is also a property of the State object.\n- The Navigator is used to close the dialog. We will look more at navigators shortly.\n\nTry a little more:\n\n- Can you make two buttons? \n- Three buttons? \n- See [this post](https://stackoverflow.com/a/53844053/3681880) for the answer.\n\n### Gesture detectors\n\nIn the examples above we’ve seen how to respond to user input using some of the common widgets that are available. These widgets provide callback properties like `onPressed` and `onChanged`. Other widgets (like Text or Container) don't have a built in way to interact with them. Flutter gives us an easy way to make them interactive, though. All you have to do is wrap any widget with a GestureDetector, which is itself a widget.\n\nFor example, here is a Text widget wrapped with a GestureDetector widget.\n\n``` dart\n    GestureDetector(\n      child: Text('Hello world'),\n      onTap: () {\n        // do something\n      },\n    );\n```\n\nWhen the text is tapped, the `onTap` callback will be run. Super easy, isn't it?\n\nYou can try it. Every time you tap the text, the color changes.\n\n![flutter-user-input-6](//images.ctfassets.net/1es3ne0caaid/5iluulIJsWaAm0gIcII8eU/c441663524683db4f11f981b2da09818/flutter-user-input-6.gif)\n\nAdd `import 'dart:math';` to your `main.dart` file and replace the `_MyWidgetState()` class with the following code:\n\n``` dart\n    class _MyWidgetState extends State\u003cMyWidget\u003e {\n    \n      Color textColor = Colors.black;\n    \n      @override\n      Widget build(BuildContext context) {\n        return GestureDetector(  //                  \u003c--- GestureDetector\n          child: Text(\n            'Hello world',\n            style: TextStyle(\n              fontSize: 30,\n              color: textColor,\n            ),\n          ),\n          onTap: () {  //                            \u003c--- onTap\n            _doSomething();\n          },\n        );\n      }\n      \n      void _doSomething() {\n        setState(() {\n          // have to import 'dart:math' in order to use Random()\n          int randomHexColor = Random().nextInt(0xFFFFFF);\n          int opaqueColor = 0xFF000000 + randomHexColor;\n          textColor = Color(opaqueColor);\n        });\n      }\n    }\n```\n\nYou are not limited to detecting a tap. There tons of other gestures that are just as easy to detect. Replace `onTap` in the code above with a few of them. See how the gestures are detected.\n\n\n- `onDoubleTap`\n- `onLongPress`\n- `onLongPressUp`\n- `onPanDown`\n- `onPanStart`\n- `onPanUpdate`\n- `onPanEnd`\n- `onPanCancel`\n- `onScaleStart`\n- `onScaleUpdate`\n- `onScaleEnd`\n- `onTap`\n- `onTapDown`\n- `onTapUp`\n- `onTapCancel`\n- `onHorizontalDragDown`\n- `onHorizontalDragUpdate`\n- `onHorizontalDragEnd`\n- `onHorizontalDragCancel`\n- `onVerticalDragStart`\n- `onVerticalDragDown`\n- `onVerticalDragUpdate`\n- `onVerticalDragEnd`\n- `onVerticalDragCancel`\n\n\n## Navigation\n\nA lesson about responding to user input wouldn't be complete without talking about navigation. How do we go to a different screen in Flutter? And once there, how do we go back?\n\nWell, as you might expect, a new screen in Flutter is just a new widget. The way to get to these widgets is called a route, and Flutter uses a class called a Navigator to manage the routes. To show a new screen, you use the Navigator to *push* a route onto a stack. To dismiss a screen and go back to the previous screen, you *pop* the route off the top of the stack.\n\nHere is how you would navigate to a new widget called SecondScreen.\n\n``` dart\n    Navigator.push(\n        context,\n        MaterialPageRoute(\n          builder: (context) =\u003e SecondScreen(),\n        ));\n```\n\nThe `context` is the BuildContext of the current widget that is wanting to navigate to the new screen. The MaterialPageRoute is what creates the route to the new screen. And `Navigator.push` means that we are adding the route to the stack.\n\nHere is how you would return from the SecondScreen back to the first one.\n\n``` dart\n    Navigator.pop(context);\n```\n\nDoes that look familiar? Yes, we already used that same code to dismiss the AlertDialog that we made before.\n\nTry it out yourself. Here is what it will look like on the iOS simulator.\n\n![flutter-user-input-7](//images.ctfassets.net/1es3ne0caaid/3hbxelz92wKMWMWEeaCCGY/81ccacd31e1c56cc73b9c725162a8f1e/flutter-user-input-7.gif)\n\nReplace all of the code in `main.dart` with the following code.\n\n``` dart\n    import 'package:flutter/material.dart';\n    \n    void main() {\n      runApp(MaterialApp(\n        title: 'Flutter',\n        home: FirstScreen(),\n      ));\n    }\n    \n    class FirstScreen extends StatelessWidget {\n      @override\n      Widget build(BuildContext context) {\n        return Scaffold(\n          appBar: AppBar(title: Text('First screen')),\n          body: Center(\n            child: RaisedButton(\n              child: Text(\n                'Go to second screen',\n                style: TextStyle(fontSize: 24),\n              ),\n              onPressed: () {\n                _navigateToSecondScreen(context);\n              },\n            )\n          ),\n        );\n      }\n      \n      void _navigateToSecondScreen(BuildContext context) {\n        Navigator.push(\n            context,\n            MaterialPageRoute(\n              builder: (context) =\u003e SecondScreen(),\n            ));\n      }\n    }\n    \n    class SecondScreen extends StatelessWidget {\n      @override\n      Widget build(BuildContext context) {\n        return Scaffold(\n          appBar: AppBar(title: Text('Second screen')),\n          body: Center(\n            child: RaisedButton(\n              child: Text(\n                'Go back to first screen',\n                style: TextStyle(fontSize: 24),\n              ),\n              onPressed: () {\n                _goBackToFirstScreen(context);\n              },\n            ),\n          ),\n        );\n      }\n      \n      void _goBackToFirstScreen(BuildContext context) {\n        Navigator.pop(context);\n      }\n    }\n```\n\n### Passing data forward\n\nSometimes you need to send data to the new screen that you are displaying. This is easy to do by passing it in as a parameter in the SecondScreen widget's constructor.\n\n``` dart\n    class SecondScreen extends StatelessWidget {\n      final String text;\n      SecondScreen({Key key, @required this.text}) : super(key: key);\n```\n\nThe Dart constructor syntax may look a little strange to you. Here is a brief explanation:\n\n\n- The comma separated items between the `{ }` braces are the named parameters. They're optional, but users will be warned if they don't provide an `@required` parameter.\n- In Flutter a Key is used to differentiate widgets in the widget tree. See [this video](https://www.youtube.com/watch?v=kn0EOS-ZiIc) for more.\n- The `this.` prefix is used for variables that are defined in the current class.\n- The part after the `:` colon is a comma separated initialization list. The lines in this list are run before the super class's constructor. In this case there is nothing here except a call to a specific constructor of the super class.\n- See the answers to [this Stack Overflow question](https://stackoverflow.com/questions/51013430/flutter-dart-constructor) for more about constructors.\n\nNow that the constructor is set up, you can pass in data when you call it from the FirstScreen.\n\n``` dart\n    Navigator.push(\n        context,\n        MaterialPageRoute(\n          builder: (context) =\u003e SecondScreen(text: 'Hello',),\n        ));\n```\n\n- Note the text \"Hello\" being passed in as a parameter.\n\n![flutter-user-input-8](//images.ctfassets.net/1es3ne0caaid/npPqjOxZrakk64ayW8CIu/6ee7af8e0c726cea553c8371e24d84d1/flutter-user-input-8.gif)\n\nYou can find the [full code for the example here](https://stackoverflow.com/a/53861303/3681880). \n\n### Passing data back\n\nAt other times you need to send data back to the previous screen. Flutter does this in an interesting way.\n\n- The first screen starts the second screen and then waits for a result, which it can use after the second screen finishes. You will notice the `async` and `await` keywords below. Dart makes it easy to do things that you have to wait for (like web requests or long running tasks). Read [this](https://www.dartlang.org/tutorials/language/futures) for more information. It’s way easier than [Android AsyncTasks](https://stackoverflow.com/a/25647882/3681880)! \n\n``` dart\n      void startSecondScreen(BuildContext context) async {\n      \n        // start the SecondScreen and wait for it to finish with a result\n        final result = await Navigator.push(\n            context,\n            MaterialPageRoute(\n              builder: (context) =\u003e SecondScreen(),\n            ));\n            \n        // after the SecondScreen result comes back, update the Text widget with it\n        setState(() {\n          text = result;\n        });\n        \n      }\n```\n\n- In the second screen you pass the data back by supplying it as a parameter in the `pop` method.\n\n``` dart\n    Navigator.pop(context, 'How are you?');\n```\n\n![flutter-user-input-9](//images.ctfassets.net/1es3ne0caaid/6zKyN2Vnc40ksSeYGoso62/32c7edd0b71c98cdfb72fc2e82679d44/flutter-user-input-9.gif)\n\nYou can find the [full code for the example here](https://stackoverflow.com/a/53861303/3681880).\n\n\n## Conclusion\n\nIn this lesson we have gone from static layouts to dynamic ones with widgets that respond to user input. Making responsive widgets like this means that we need to deal with things that change, whether it's text, color, size, or any number of other things that affect the UI. The value of these variables is known as the state, and widgets that have state are known as StatefulWidgets.\n\nProperly managing state in Flutter is a big topic. You have already seen two ways to do it in this lesson. One was having a method variable in the State class. It was available to all of the widgets throughout the class. As the complexity increases, though, it is not practical to include the entire layout in a single `build()` method, nor is it good practice to allow global variables. \n\nAnother way we managed state in this lesson was passing data as a parameter into another widget. This works great when one widget is directly calling another, but it can get cumbersome when you need the state from another widget somewhere far away in the widget tree.\n\nAs you continue to study you will hear about topics like [inherited widgets](https://www.youtube.com/watch?v=Zbm3hjPjQMk), [Streams](https://www.youtube.com/watch?v=ovbspHZJ9b0), [BLoC](https://www.youtube.com/watch?v=fahC3ky_zW0), and [Redux](https://blog.novoda.com/introduction-to-redux-in-flutter/). They are things that you should learn about eventually, but don't worry about them right now. I like what [Hillel Coren said](https://hillelcoren.com/2018/06/01/building-a-large-flutter-app-with-redux/):\n\n\n\u003e My approach when working with a new technology is to start with the simplest implementation and only add in extras once I’ve felt the pain they’re designed to eliminate.\n\nYou already know enough now to begin making Flutter apps. You can deal with the difficulties as they come. So take that app design that you've got in your head and start creating it! You’re ready to go!\n\nThis concludes our First Steps with Flutter series. You can find [the code for this tutorial](https://github.com/suragch/flutter_responsive_ui) on GitHub.\n\n\n## Further study\n\n- [Adding Interactivity to Your Flutter App](https://flutter.io/docs/development/ui/interactive)\n- [State Management documentation](https://flutter.io/docs/development/data-and-backend/state-mgmt)\n- [How Stateful Widgets Are Used Best - Flutter Widgets 101 Ep. 2](https://www.youtube.com/watch?v=AqCMFXEmf3w)","metaTitle":"First steps with Flutter: Responding to user input","metaDescription":"This tutorial provides an introductory-level overview of working with user inputs in Flutter. You will work through a series of simple demos, covering features like navigation, text input and gesture detection."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2z1QF7jDkQY2OWyCQkYm6U","type":"Entry","createdAt":"2019-01-10T15:52:21.270Z","updatedAt":"2019-03-24T16:06:10.799Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"First steps with Flutter - Part 2: Building layouts","url":"flutter-building-layouts","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"58WBWjhcWcuAMI6qIAyiC4","type":"Entry","createdAt":"2018-12-13T20:46:00.073Z","updatedAt":"2018-12-13T20:46:36.867Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Suragch","url":"suragch","email":"studymongolian@gmail.com","twitter":"https://twitter.com/suragch","github":"https://github.com/suragch","guestWriter":true}}],"projectRepo":"https://github.com/suragch/flutter_layout_examples","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Q3oRmiXjOmcSmweY4gKY8","type":"Entry","createdAt":"2018-09-12T09:33:28.375Z","updatedAt":"2018-09-12T09:33:28.375Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flutter","url":"flutter","type":"framework","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}}],"reviewDate":"2018-12-17","description":"This introductory-level tutorial covers the basic of UI layouts with Flutter. You will work through basic examples of common layout and styling features, as well as becoming familiar with Flutter tools.","prerequisite":"You will need a Flutter development environment set up on your machine.","content":"This is a three-part series. You can find the other parts here:\n\n- [First steps with Flutter - Part 1: Exploring widgets](https://pusher.com/tutorials/flutter-widgets)\n- [First steps with Flutter - Part 3: Responding to user input](https://pusher.com/tutorials/flutter-user-input)\n- \n## Introduction\n\nIf you have done any iOS programming, then you are used to creating layouts graphically in the [Interface Builder](https://developer.apple.com/xcode/interface-builder/). Just drag a UIView onto the storyboard and use your mouse to add the constraints. Or if you are an Android developer, then you are probably equally comfortable in the [Layout Editor](https://developer.android.com/studio/write/layout-editor) creating layouts graphically or with XML. But then you come to Flutter and learn that you have to make your layouts programmatically. You see [frightening examples of code indentation](https://stackoverflow.com/questions/51232298/flutter-widgets-extreem-code-indentation) that look more like the mountains and valleys of the Himalayas than a user interface. \"What?!\" you say. \"How am I supposed to learn this?\"\n\nDo not fear. Creating widget layouts programmatically does take a change in thinking, but that change doesn't need to be a difficult one. In this lesson we are going to explore the basic building blocks of Flutter layouts and how we can use them to create complex user interfaces. I would even argue that Flutter's method is superior to XML layouts or graphical UI builders, but that’s a topic for another day.\n\nMost importantly, be prepared to *do*. Don't just read the examples, follow along and do them. This will maximize your learning. Even if you don't understand something, the simple act of typing the code out will help you start to get a feeling for what it does. Make little changes and see how that affects the layout. Step by little step, you will become a proficient Flutter developer.\n\n\n## Prerequisites\n\nYou don't need any programming experience to go through this tutorial. I'm assuming that you are new to Flutter. However, you will need to have the Flutter development environment set up. If you haven't done that, then check out the [Getting Started](https://flutter.io/docs/get-started/install) Flutter documentation. It's quite clear.\n\nThis tutorial is a direct continuation of my previous article, [First steps with Flutter: Exploring widgets](https://pusher.com/tutorials/flutter-widgets). If you aren't familiar with the concept of Flutter widgets, I recommend that you read that first.\n\nI am using Android Studio with the Flutter 1.0 plugin to run the code in this tutorial. If you are using Visual Studio Code, though, you should be fine.\n\n\n## Setup\n\nCreate a new Flutter project and replace `lib/main.dart` with the following boilerplate code. Notice the `myLayoutWidget()` method at the end. This is what we will be replacing in the examples below.\n\n``` dart\n    import 'package:flutter/material.dart';\n    \n    // entry point for the app, \n    // the =\u003e operator is shorthand for {} when there is only one line of code\n    void main() =\u003e runApp(MyApp());\n    \n    // the root widget of our application\n    class MyApp extends StatelessWidget {\n      @override\n      Widget build(BuildContext context) {\n        return MaterialApp(\n          home: Scaffold(\n            appBar: AppBar(\n              title: Text(\"Building layouts\"),\n            ),\n            body: myLayoutWidget(),\n          ),\n        );\n      }\n    }\n    \n    // replace this method with code in the examples below\n    Widget myLayoutWidget() {\n      return Text(\"Hello world!\");\n    }\n```\n\n## Basic layout widgets (single child)\n\nSo you already know that everything in the Flutter UI is a widget. They're not only *structural* elements like text and buttons. *Layout* elements like padding and rows are also widgets. First let's take a look at some of the most common layout widgets, and later we will see how to combine them into more complex layouts.\n\n### Padding\n\nThinking of padding as a widget is strange when you first come to Flutter. At least in iOS and Android world, padding is a parameter. But in Flutter, if you want add some extra space around a widget, then you wrap it in a Padding widget.\n\nIf you run the boilerplate code from the Setup section above, you should see something like this:\n\n![flutter-layouts-1](//images.ctfassets.net/1es3ne0caaid/4fEjg2hMogK0umqQykkuk0/e5cdb55323a7e9db28b03a19e95b189c/flutter-layouts-1.png)\n\nNow to add padding, wrap the Text widget with a Padding widget. In Android Studio this can be accomplished by placing your cursor on the widget and pressing **Option+Enter** (or **Alt+Enter** in Windows/Linux).\n\n![flutter-layouts-2](//images.ctfassets.net/1es3ne0caaid/5WR9CTpj4Ag2wsMMmOGuEe/b1ccffd1df6ddf04d7dcc47069560e93/flutter-layouts-2.png)\n\nwhich gives you this:\n\n``` dart\n    Widget myLayoutWidget() {\n      return Padding(\n        padding: EdgeInsets.all(8.0),\n        child: Text(\"Hello world!\"),\n      );\n    }\n```\n\nThe EdgeInsets parameter is used to specify the amount of padding. Here `all` was used to indicate that every side (left, top, right, and bottom) should have equal padding. If you want them to have different values, then you can use `only` instead of `all`.\n\nHot reload the app and you should have this:\n\n![flutter-layouts-3](//images.ctfassets.net/1es3ne0caaid/wMvxnzjPz2IYOGeE2gcG4/70e01221eda5bf5caa5354e164f93061/flutter-layouts-3.png)\n\nNotice that now the text has moved away from the edges. It has a padding of 8.0 logical pixels all around it.\n\nExperiment yourself:\n\n- Change the padding value\n- Make the top padding be different than the right padding\n\n### Alignment\n\nTo center a widget, the concept is the same as it was for padding. This time you just wrap your widget with a Center widget. You can type it out or there is a shortcut menu option for it, too. \n\n![flutter-layouts-4](//images.ctfassets.net/1es3ne0caaid/oqEcni0l2KKiouqAcWKOk/22422e3102aa54c06d12f5f7fc9d07e7/flutter-layouts-4.png)\n\nIn addition to centering it, I added some styling to the Text widget so that the font size is more visible. If you are going the cut-and-paste route, then replace the `myLayoutWidget()` method with the following code:\n\n``` dart\n    Widget myLayoutWidget() {\n      return Center(\n        child: Text(\n          \"Hello world!\",\n          style: TextStyle(fontSize: 30),\n        ),\n      );\n    }\n```\n\nHot reload your app and you should see the text centered in middle of the screen.\n\n![flutter-layouts-5](//images.ctfassets.net/1es3ne0caaid/20y4ZAQ1Te6qoySw4M8Eiy/64fa6302e4ce811294a46a92085d99c1/flutter-layouts-5.png)\n\nWhat about if you want to align a widget somewhere else? You can use the Align widget for that. You can either pass in relative `x` and `y` values or you can use the predefined ones. Here are the options. The items in the same row are equivalent.\n\n| `Alignment.topLeft`      | `Alignment(-1.0, -1.0)`   |\n| ------------------------ | ------------------------- |\n| `Alignment.topCenter`    | `Alignment(0.0, -1.0)`    |\n| `Alignment.topRight`     | `Alignment(1.0, -1.0)`    |\n| `Alignment.centerLeft`   | `Alignment(-1.0, 0.0)`    |\n| `**Alignment.center**`   | `**Alignment(0.0, 0.0)**` |\n| `Alignment.centerRight`  | `Alignment(1.0, 0.0)`     |\n| `Alignment.bottomLeft`   | `Alignment(-1.0, 1.0)`    |\n| `Alignment.bottomCenter` | `Alignment(0.0, 1.0)`     |\n| `Alignment.bottomRight`  | `Alignment(1.0, 1.0)`     |\n\n\nYou can see that another way to center something is to use `Alignment.center` or `Alignment(0.0, 0.0)`. Actually, the Center widget is just a special case of the Align widget.\n\nThe following is an image I made for [this Stack Overflow answer](https://stackoverflow.com/a/53716572/3681880). (Check that answer out for even more details on alignment.)\n\n![flutter-layouts-6](//images.ctfassets.net/1es3ne0caaid/3wxekTqHWE0E6c2YeE2CII/0695fdf524225bfa958a9d711024a8e2/flutter-layouts-6.png)\n\nNotice the `(1,2)` position in the bottom right. This shows that you can even align something outside of the parent. Remember that these numbers are relative to the width and height of the parent widget.\n\nYour turn. Paste in the following code.\n\n``` dart\n    Widget myLayoutWidget() {\n      return Align(\n        alignment: Alignment.topCenter,\n        child: Text(\n          \"Hello\",\n          style: TextStyle(fontSize: 30),\n        ),\n      );\n    }\n```\n\nNow adjust the `Alignment` to try to get the text to move everywhere you can see \"Hello\" in the following image (but just one location at a time).\n\n![flutter-layouts-7](//images.ctfassets.net/1es3ne0caaid/7IWx3dqk36uQYWo8cmiGIu/047706f465dfc19bf0320e5441356067/flutter-layouts-7.png)\n\nDid you get the blue one, too? For that you use `Alignment(0.5, 0.5)`.\n\n### Container\n\nWe already met the Container widget in [the last lesson](https://pusher.com/tutorials/flutter-widgets). It is a combination of several simpler widgets. In addition to having Padding and Align built in, it also has a DecoratedBox (for background color, border, [and more](https://medium.com/jlouage/flutter-boxdecoration-cheat-sheet-72cedaa1ba20)) and a ConstrainedBox (for size constraints). \n\nPlug this code in:\n\n``` dart\n    Widget myLayoutWidget() {\n      return Container(\n        margin: EdgeInsets.all(30.0),\n        padding: EdgeInsets.all(10.0),\n        alignment: Alignment.topCenter,\n        width: 200,\n        height: 100,\n        decoration: BoxDecoration(\n          color: Colors.green,\n          border: Border.all(),\n        ),\n        child: Text(\"Hello\", style: TextStyle(fontSize: 30)),\n      );\n    }\n```\n\n![flutter-layouts-8](//images.ctfassets.net/1es3ne0caaid/6slAbPXWW4C66iQoYEugAG/e5b2a1f3126fedf156399f1e0e7305fc/flutter-layouts-8.png)\n\nPlay around with the parameters and see how adjusting them affects how the widgets look. Notice the `margin` parameter. Margin means the spacing outside of the border, while `padding` is the spacing inside of the border. Technically speaking, though, there is no such thing as margin in Flutter. Under the hood it is just another Padding widget that wraps the DecoratedBox.\n\n\u003e **Note:** Flutter is open source and well documented. You can learn a lot about how widgets are built if you explore the source code. In Android Studio **Command + click** (or **Ctrl + click** in Windows/Linux) on the widget name to view its source code.\n\n\n## Basic layout widgets (multiple children)\n\nThe widgets above only took one child. When creating a layout, though, it is often necessary to arrange multiple widgets together. We will see how to do that using rows, columns, and stacks.\n\n### Rows and columns\n\nRows are easy. Just pass in a list of widgets to Row's `children` parameter.\n\n``` dart\n    Widget myLayoutWidget() {\n      return Row(\n        children: [\n          Icon(Icons.home),\n          Icon(Icons.home),\n          Icon(Icons.home),\n          Icon(Icons.home),\n        ],\n      );\n    }\n```\n\nwhich gives\n\n![flutter-layouts-9](//images.ctfassets.net/1es3ne0caaid/2vdFVtf5a0KKSgamEwOaQK/2a25ea9db73b18ddbea5e3317033d140/flutter-layouts-9.png)\n\nNow replace `Row` with `Column` and you get\n\n![flutter-layouts-10](//images.ctfassets.net/1es3ne0caaid/3BublHyCuQs4mMAyu4awO0/0c19e4e8aff55e502bde30658b4aacf8/flutter-layouts-10.png)\n\nWhat if you want to make the contents of the row or column be evenly spaced across the screen? Then wrap each child with an Expanded widget.\n\n``` dart\n    Widget myLayoutWidget() {\n      return Row(\n        children: [\n          Expanded(child: Icon(Icons.home)),\n          Expanded(child: Icon(Icons.home)),\n          Expanded(child: Icon(Icons.home)),\n          Expanded(child: Icon(Icons.home)),\n        ],\n      );\n    }\n```\n\n![flutter-layouts-11](//images.ctfassets.net/1es3ne0caaid/2zWYRFVk7KIacK8E6sGGEu/03420baf20a915b26bad6d7959ef6615/flutter-layouts-11.png)\n\nThe Expanded widget can take a `flex` parameter. This is useful for giving size weights to the children. For example, here are two Containers in a row. The first one takes up 70% of the row and the second one takes up 30%.\n\n``` dart\n    Widget myLayoutWidget() {\n      return Row(\n        children: [\n          Expanded(\n            flex: 7,\n            child: Container(\n              color: Colors.green,\n            ),\n          ),\n          Expanded(\n            flex: 3,\n            child: Container(\n              color: Colors.yellow,\n            ),\n          ),\n        ],\n      );\n    }\n```\n\n![flutter-layouts-12](//images.ctfassets.net/1es3ne0caaid/76VArZz9yE6GYsy8kWE6YA/54f3924407394beabfba511a991bcdab/flutter-layouts-12.png)\n\nNotes:\n\n- If you wanted a single view to only take a fraction of its parent's size, then you could use a [FractionallySizedBox](https://stackoverflow.com/a/53663591).\n- Check out [Flutter — Row/Column Cheat Sheet](https://medium.com/jlouage/flutter-row-column-cheat-sheet-78c38d242041) for much, much more.\n\n### Stacks\n\nThe Stack widget lays out its children like a stack of pancakes. You set it up like the Row and Column widgets. Whichever child comes first is the one on the bottom.\n\nYou could do something like this:\n\n``` dart\n    Widget myLayoutWidget() {\n      return Stack(\n        children: [\n          Icon(Icons.home),\n          Icon(Icons.home),\n          Icon(Icons.home),\n          Icon(Icons.home),\n        ],\n      );\n    }\n```\n\nbut who needs four icons stacked on top of each other?\n\n![flutter-layouts-13](//images.ctfassets.net/1es3ne0caaid/5NhbzsrAByCuqys4MCu2k2/f4bd7bfb02e4079e36a5359e527e7b1e/flutter-layouts-13.png)\n\nA more likely scenario is to use a stack to write text on an image. Let's take this image\n\n![flutter-layouts-14](//images.ctfassets.net/1es3ne0caaid/3BoyCPkO4Uk4QUOc2Oq4Co/99238ad371bd88b47d5d9561e79d1ddb/flutter-layouts-14.png)\n\nand put it in our project:\n\n1. Create an `images` folder in the root of your project and copy the `sheep.jpg` file into it.\n2. Register `images` as an assets folder in your `pubspec.yaml` file.\n\n```\n    flutter:\n      assets:\n        - images/\n```\n\n*(If that didn't make sense, see [this post](https://stackoverflow.com/a/53752071/3681880) for more details.)*\n\nNow we can get the image in code and use a Stack widget to display some text over it.\n\n``` dart\n    Widget myLayoutWidget() {\n      return Stack(\n        \n        // any unpositioned children (ie, our text) will be aligned at the bottom right\n        alignment: Alignment.bottomRight,\n        \n        children: [\n          \n          // first child in the stack is on bottom\n          Image.asset('images/sheep.jpg'), //            \u003c--- image\n          \n          // second child in the stack\n          Padding(\n            padding: EdgeInsets.all(16.0),\n            child: Text(\n              'Baaaaaa', //                              \u003c--- text\n              style: TextStyle(fontSize: 30),\n            ),\n          ),\n          \n        ],\n      );\n    }\n```\n\nDo a full restart rather than a hot reload.\n\n![flutter-layouts-15](//images.ctfassets.net/1es3ne0caaid/6A2CUcVgD6i8eWu6YsKsky/d5a424d1f9fef01febe7aa933ae9fe2b/flutter-layouts-15.png)\n\nSo the take away is that any time you need overlapping widgets, use a Stack to lay them out. (That's not always the case, but you can take it as a general rule.)\n\n### Other layout widgets\n\nWe don't have space to cover all of the layout widgets here, but you have seen the most important ones already. Here are a few others that deserve mentioning:\n\n- [**ListView**](https://docs.flutter.io/flutter/widgets/ListView-class.html)**:** This widget scrolls rows or columns of content that is too big to fit on the screen. We saw this in [our last lesson on widgets](https://pusher.com/tutorials/flutter-widgets).\n- [**GridView**](https://docs.flutter.io/flutter/widgets/GridView-class.html)**:** This widget scrolls content that is laid out in a grid of rows and columns.\n- [**Scaffold**](https://docs.flutter.io/flutter/material/Scaffold-class.html)**:** This is a widget provided by the Material package. It gives an easy way to add an AppBar, FloatingActionButton, Drawer, BottomNavigationBar, SnackBar, and more. Look at your `main.dart` file and you'll see that we are using a Scaffold widget already.\n\n\n## Building complex layouts\n\nSince you already know how to use the simple layout widgets that we talked about above, there really isn't anything hard about building complex layouts. The trick is just to break the complex layout into smaller simple layouts. Rows and columns are your friends here.\n\nAs an example, lets take this image from the [Pusher website](https://pusher.com/) and duplicate its layout:\n\n![flutter-layouts-16](//images.ctfassets.net/1es3ne0caaid/2xAuWSE2MIGKySyku2M68C/ae045c5b1ec0f5d3f40eb73aeeca8b4a/flutter-layouts-16.png)\n\nHow can we convert this into simple rows and columns? First notice that it can be divided into a single column with three rows.\n\n![flutter-layouts-17](//images.ctfassets.net/1es3ne0caaid/33Vv7Iotx6I2w8qSSO8iEc/f9ad9586584126772563b469c7fac615/flutter-layouts-17.png)\n\nThe first and the third rows both have two simple items: an image and a text string.\n\n![flutter-layouts-18](//images.ctfassets.net/1es3ne0caaid/YG0be8K8KIWQeckYGCkii/0d00be9a2997b6443201ee392951b010/flutter-layouts-18.png)\n\nWe now have enough information to build our complex layout widget. Before you look at the code below, try to build it yourself using what we have already learned. Instead of the [Pusher Beams](https://pusher.com/beams) icon, you can use another placeholder icon or image. I’ll use a 💚.\n\nGot it? Need a hint? Here is a rough outline that implements the structure that we saw in the image above:\n\n``` dart\n    Widget myLayoutWidget() {\n      return Column(\n        children: [\n          Row(\n            children: [\n              Icon(Icons.favorite),\n              Text('BEAMS'),\n            ],\n          ),\n          Text('description...'),\n          Row(\n            children: [\n              Text('EXPLORE BEAMS'),\n              Icon(Icons.arrow_forward),\n            ],\n          ),\n        ],\n      );\n    }\n```\n\n![flutter-layouts-19](//images.ctfassets.net/1es3ne0caaid/2NpSuxOFu0aA4yoKk0WYqC/b63a62f685be3ec9cea200a9e976ffdd/flutter-layouts-19.png)\n\nIt needs some work, but you can see that we have the correct structure. Now make it look good by adding padding, alignment, and color. Try to do it yourself before you look at my code below.\n\nReally. Don't look yet. Not until you try it yourself. I'm serious.\n\nOK, ready?\n\n``` dart\n    Widget myLayoutWidget() {\n      \n      // wrap everything in a purple container\n      return Container(\n        margin: EdgeInsets.all(16.0),\n        padding: EdgeInsets.all(16.0),\n        decoration: BoxDecoration(\n          color: Colors.purple[900],\n          border: Border.all(),\n          borderRadius: BorderRadius.all(Radius.circular(3.0)),\n        ),\n        \n        // column of three rows\n        child: Column(\n          \n          // this makes the column height hug its content\n          mainAxisSize: MainAxisSize.min,\n          children: [\n            \n            // first row\n            Row(\n              children: [\n                Padding(\n                  padding: EdgeInsets.only(right: 8.0),\n                  child: Icon(Icons.favorite,\n                    color: Colors.green,\n                  ),\n                ),\n                Text(\n                    'BEAMS',\n                  style: TextStyle(\n                    color: Colors.white,\n                  ),\n                ),\n              ],\n            ),\n            \n            // second row (single item)\n            Padding(\n              padding: EdgeInsets.symmetric(\n                vertical: 16.0,\n                horizontal: 0,\n              ),\n              child: Text('Send programmable push notifications to iOS and Android devices with delivery and open rate tracking built in.',\n                style: TextStyle(\n                  color: Colors.white,\n                ),\n              ),\n            ),\n            \n            // third row\n            Row(\n              children: [\n                Text('EXPLORE BEAMS',\n                  style: TextStyle(\n                    color: Colors.green,\n                  ),\n                ),\n                Padding(\n                  padding: EdgeInsets.only(left: 8.0),\n                  child: Icon(Icons.arrow_forward,\n                    color: Colors.green,\n                  ),\n                ),\n              ],\n            ),\n            \n          ],\n        ),\n      );\n    }\n```\n\nUgh, look at that code! I've made the terrible mountain and valley indentations that I was complaining about [last time](https://stackoverflow.com/q/51232298/3681880). We'll get back to that. Right now take a look at the result:\n\n![flutter-layouts-20](//images.ctfassets.net/1es3ne0caaid/2Tffy1o7PqYOseoAeoEIkW/eb89133e2d5f9b602eb0b6701a27533f/flutter-layouts-20.png)\n\nIt's not perfect, but it's not bad, either. I'm happy with it.\n\n\n## Making complex layouts readable\n\nAll the indentation in the code above makes it hard to read. The solution to this is to break the large code block into smaller chunks. There are a few ways to do this.\n\n### Break sections out as variables\n\nIn the abbreviated code below the rows have been extracted from the bigger widget into variables.\n\n``` dart\n    Widget myLayoutWidget() {\n    \n      Widget firstRow = Row(\n        ...\n      );\n      Widget secondRow = ...\n      Widget thirdRow = ...\n      \n      return Container(\n        ...\n        child: Column(\n          children: [\n            firstRow,\n            secondRow,\n            thirdRow,\n          ],\n        ),\n      );\n    }\n```\n\n### Break sections out as functions\n\nThis is basically the same as above, except this time the Row is a function instead of a variable. This is how we set up the boilerplate code at the beginning of the lesson with the `myLayoutWidget()` function.\n\nHere is what `firstRow()` would look like:\n\n``` dart\n    Widget firstRow() {\n      return Row(\n        children: [\n          Padding(\n            padding: EdgeInsets.only(right: 8.0),\n            child: Icon(Icons.favorite,\n              color: Colors.green,\n            ),\n          ),\n          Text(\n            'BEAMS',\n            style: TextStyle(\n              color: Colors.white,\n            ),\n          ),\n        ],\n      );\n    }\n```\n\nIt is called like this:\n\n``` dart\n        ...\n        child: Column(\n          children: [\n            firstRow(),\n            secondRow(),\n            thirdRow(),\n          ],\n        ...\n```\n\n### Break sections out as widgets\n\nThe `MyApp` widget in the boilerplate code at the beginning of this lesson is an example of creating a custom widget.\n\nHere is the first row extracted as its own widget.\n\n``` dart\n    class FirstRow extends StatelessWidget {\n      // the build method is required when creating a StatelessWidget\n      @override\n      Widget build(BuildContext context) {\n        return Row(\n          children: [\n            Padding(\n              padding: EdgeInsets.only(right: 8.0),\n              child: Icon(Icons.favorite,\n                color: Colors.green,\n              ),\n            ),\n            Text(\n              'BEAMS',\n              style: TextStyle(\n                color: Colors.white,\n              ),\n            ),\n          ],\n        );\n      }\n    }\n```\n\nThe widget is created like this:\n\n``` dart\n        ...\n        child: Column(\n          children: [\n            FirstRow(),\n            SecondRow(),\n            ThirdRow(),\n          ],\n        ...\n```\n\n\u003e **Note:** You may have seen the `new` keyword used in examples around the Internet. As of [Dart 2](https://medium.com/dartlang/announcing-dart-2-80ba01f43b6), though, `new` is no longer required when creating an object.\n\n\n## Tools\n\nFlutter has a few builtin tools for helping you debug layouts. \n\n### Flutter Inspector\n\nIn Android Studio you can find the Flutter Inspector tab on the far right. Here we see our layout as a widget tree.\n\n![flutter-layouts-21](//images.ctfassets.net/1es3ne0caaid/53YO2XQGKcieA08K84ciuI/3eac51630b2dbadf57971bbc91234d49/flutter-layouts-21.png)\n\n### Visual rendering\n\nYou can turn on visual rendering by setting `debugPaintSizeEnabled` to `true` in your `main()` function. \n\nIn your `main.dart` file replace this line\n\n``` dart\n    void main() =\u003e runApp(MyApp());\n```\n\nwith this\n\n``` dart\n    // add this line to your imports\n    import 'package:flutter/rendering.dart';\n    \n    // update your main() function\n    void main() {\n      debugPaintSizeEnabled = true; //         \u003c--- enable visual rendering\n      runApp(MyApp());\n    }\n```\n\nThis outlines your widgets with blue in the emulator. You will need to do a full restart of your app rather than a hot reload to see it take effect.\n\n![flutter-layouts-22](//images.ctfassets.net/1es3ne0caaid/41TuazaA4o4CWAEA0gGy42/095fad7ae752dc1387e35eb9e57a02eb/flutter-layouts-22.png)\n\n\n\u003e **Note:** If you are using Visual Studio Code then you will need to run `[Flutter: Toggle Debug Painting](https://stackoverflow.com/a/49340887/3681880)` from the Command Palette while the app is running in debug mode.\n\n\n## Conclusion\n\nYou’ve made a lot of progress! You not only have a working understanding of widgets, but you can also combine them together to make complex UI layouts.\n\nIn the next lesson we will explore what I consider to be the last of our First Steps with Flutter, that is, making the app respond to user input. After that you will have all the basic tools to start creating your own app. Of course, there will still be a lot to learn, but with a little Google magic and hacker determination, you'll make steady progress.\n\nThe [source code for this lesson](https://github.com/suragch/flutter_layout_examples) is available on GitHub.\n\n\n### Further study\n\n\n- [Building layouts documentation](https://flutter.io/docs/development/ui/layout)\n- [Layout widgets documentation](https://flutter.io/docs/development/ui/widgets/layout)\n\n[First steps with Flutter - Part 3: Responding to user input  \u003e\u003e](https://pusher.com/tutorials/flutter-user-input)","metaTitle":"First steps with Flutter: Building layouts","metaDescription":"This introductory-level tutorial covers the basic of UI layouts with Flutter. You will work through basic examples of common layout and styling features, as well as becoming familiar with Flutter tools."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3ciyxBy8JqW0QIwSguAu4C","type":"Entry","createdAt":"2019-01-10T19:05:32.286Z","updatedAt":"2019-03-24T16:04:16.852Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"First steps with Flutter- Part 1: Exploring widgets","url":"flutter-widgets","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"58WBWjhcWcuAMI6qIAyiC4","type":"Entry","createdAt":"2018-12-13T20:46:00.073Z","updatedAt":"2018-12-13T20:46:36.867Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Suragch","url":"suragch","email":"studymongolian@gmail.com","twitter":"https://twitter.com/suragch","github":"https://github.com/suragch","guestWriter":true}}],"projectRepo":"https://github.com/suragch/flutter_widget_examples","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Q3oRmiXjOmcSmweY4gKY8","type":"Entry","createdAt":"2018-09-12T09:33:28.375Z","updatedAt":"2018-09-12T09:33:28.375Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flutter","url":"flutter","type":"framework","featured":false}}],"reviewDate":"2018-12-09","description":"This article provides an introductory-level overview of Flutter's widget system. You will be introduced to the widget tree, stateful and stateless widgets. You will work through a few code examples, demonstrating how various key widgets work.","prerequisite":"You will need a Flutter development environment set up on your machine.","content":"This is a three-part series. You can find the other parts here:\n\n\n- [First steps with Flutter - Part 2: Building layouts](https://pusher.com/tutorials/flutter-building-layouts)\n- [First steps with Flutter - Part 3: Responding to user input](https://pusher.com/tutorials/flutter-user-input)\n\n## Introduction\n\nMany people say that Flutter has a steep learning curve. If you have seen Flutter UI layout code like below (simplified from [here](https://stackoverflow.com/questions/51232298/flutter-widgets-extreem-code-indentation)), you may be inclined to agree with them. \n\n\n\u003e **Warning:** Incomprehensible code block ahead. Scroll past and keep reading.\n\n``` dart\n      Widget build(BuildContext context) {\n        ThemeData themeData = Theme.of(context);\n        return new Scaffold(\n          body: new Padding(\n            padding: const EdgeInsets.all(10.0),\n            child:\n            new Column(\n              mainAxisAlignment: MainAxisAlignment.spaceBetween,\n              children: \u003cWidget\u003e[\n                new Expanded(\n                  child: new Align(\n                    alignment: FractionalOffset.center,\n                    child: new AspectRatio(\n                      aspectRatio: 1.0,\n                      child: new Stack(\n                        children: \u003cWidget\u003e[\n                          new Positioned.fill(\n                            child: new AnimatedBuilder(\n                              animation: _controller,\n                              builder: (BuildContext context, Widget child) {\n                                return new CustomPaint(\n                                  painter: new ProgressPainter(\n                                    animation: _controller,\n                                    color: themeData.indicatorColor,\n                                    backgroundColor: Colors.white,\n                                  ),\n                                );\n                              }\n                            ),\n                          ),\n                        ],\n                      ),\n                    ),\n                  ),\n                ),\n                new Container(\n                  margin: new EdgeInsets.all(10.0),\n                  child: new Row(\n                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n                    children: \u003cWidget\u003e[\n                      new FloatingActionButton(\n                        child: new AnimatedBuilder(\n                          animation: _controller,\n                          builder: (BuildContext context, Widget child) {\n                            return new Icon(\n                              _controller.isAnimating\n                                ? Icons.pause\n                                : Icons.play_arrow\n                            );\n                          },\n                        ),\n                      ),\n                    ],\n                  ),\n                ),\n              ],\n            ),\n          ),\n        );\n      }\n    }\n```\n\nMountains are only steep if you climb straight up. And the Flutter learning curve is only hard if you try to do too much at once. Just as hiking trails with switchbacks makes a mountain climb more manageable, in this tutorial I will give you an opportunity to take some easy first steps to mastering Flutter. You are going to discover that it's a lot easier than you thought.\n\nOne of the first concepts that you encounter in Flutter are widgets, so we will be looking at what they are and how to use them. Most importantly, there will be lots of examples that you will be able to experiment with yourself. I encourage you to actually run the examples and make changes to them as you go through the tutorial. This will greatly improve your rate of learning and help solidify your understanding of the topics.\n\n\n\u003e  I hear and I forget.  \n\u003e  I see and I remember.  \n\u003e  I do and I understand.  \n*Attributed to Confucius ([even though he didn't really say it like that](https://www.zhihu.com/question/21071765))*\n\n\n## Prerequisites\n\nI don't expect you to know much. That's the point of this tutorial. However, you should have already set up your development environment. Some people prefer Android Studio. Others like Visual Studio Code because it's more lightweight. The fact is that both work fine. I'm writing the text of this tutorial using Visual Studio Code and running the code for the examples below in Android Studio with Flutter 1.0.\n\nIf you haven't set up the Flutter development environment yet, then I highly recommend following the directions in the Flutter documentation. Unlike a lot of documentation, the Flutter docs are very thorough and easy to follow. You should have finished at least the first three steps below (but I highly recommend Step 4 as well).\n\n\n1. [Install](https://flutter.io/docs/get-started/install)\n2. [Set up an editor](https://flutter.io/docs/get-started/editor?tab=androidstudio)\n3. [Text drive](https://flutter.io/docs/get-started/test-drive?tab=androidstudio)\n4. [Write you first app](https://flutter.io/docs/get-started/codelab)\n\nAlso feel free to check out the previous Pusher Blog tutorials *Getting started with Flutter* [Part 1](https://pusher.com/tutorials/introducing-flutter-part-1) and [Part 2](https://pusher.com/tutorials/introducing-flutter-part-2).\n\n\n## What are widgets?\n\nWidgets are just pieces of your user interface. Text is a widget. Buttons are widgets. Check boxes are widgets. Images are widgets. And the list goes on. In fact, everything in the UI is a widget. Even the app itself is a widget!\n\nIf you are familiar with Android or iOS development (no problem if you aren't), then you will make the immediate connection to views (for Android) and UIViews (for iOS). This is a good comparison to make and you will do fine to start your journey with this mindset. A more accurate way to think, though, is that a widget is a blueprint. Flutter uses these blueprints to build the view elements under the hood and render them to the screen.\n\nWhen you understand that widgets are almost anything that affects how the UI looks and behaves, then it makes sense that there are a lot more widgets than just structural elements like buttons, text, and images. For example, padding is a widget. Layout columns are widgets. Styles are widgets. Even gesture detectors are widgets.\n\nThis is your first step on the way to mastering Flutter. But if you think of widgets as simple blueprints, then this first step shouldn't be a hard one.\n\n### Widget trees\n\nWe are not going to go into how to make a layout in this lesson, but it's helpful to know that widgets are arranged into a tree of parent and child widgets. The entire widget tree is what forms the layout that you see on the screen. For example, here is the widget tree for the default demo app when you start a new project. The visible widgets are marked with red lines. (The other widgets in this tree are used for layout and adding functionality.)\n\n![flutter-widgets-diagram-1](//images.ctfassets.net/1es3ne0caaid/4boJny7h5uYogEucSe2c2U/ddb5dbc3867d6503b911798fb99a8c7a/flutter-widgets-diagram-1.png)\n\n\u003e **Note:** You can view any project's widget tree by using the Flutter Inspector tool. In Android Studio it's a vertical tab on the far right near the top. [In Visual Studio Code](https://stackoverflow.com/a/53382832) you can find it by running the command **Flutter: Inspect Widget** when running the app in debugging mode.\n\n### Types of widgets\n\nWidgets are immutable. That is, they cannot be changed. Any properties that they contain are final and can only be set when when the widget is initialized. This keeps them lightweight so that it's inexpensive to recreate them when the widget tree changes.\n\nThere are two types of widgets: stateless and stateful. Stateless widgets are widgets that don't store any state. That is, they don't store values that might change. For example, an Icon is stateless; you set the icon image when you create it and then it doesn't change any more. A Text widget is also stateless. You might say, \"But wait, you can change the text value.\" True, but if you want to change the text value, you just create a whole new widget with new text. The Text widget doesn't store a text property that can be changed.\n\nThe second type of widget is called a stateful widget. That means it can keep track of changes and update the UI based on those changes. Now you might say, \"But you said that widgets are immutable! How can they keep track of changes?\" Yes, the stateful widget itself is immutable, but it creates a State object that keeps track of the changes. When the values in the State object change, it creates a whole new widget with the updated values. So the lightweight widget (blueprint) gets recreated but the state persists across changes. \n\nA stateful widget is useful for something like a checkbox. When a user clicks it, the check state is updated. Another example is an Image widget. The image asset may not be available when the widget is created (like if it is being downloaded), so a stateless widget isn't an option. Once the image is available, it can be set by updating the state.\n\nIf this section was too much for you, then don't worry about it. It isn't necessary at all for today's tutorial. But if you would like to learn more, then check out the [Flutter widgets 101](https://www.youtube.com/playlist?list=PLOU2XLYxmsIJyiwUPCou_OVTpRIn_8UMd) YouTube videos from the Flutter team or read the [core principles](https://flutter.io/docs/resources/technical-overview#core-principles) in the docs. If you want to do some deeper research then I recommend watching [Flutter's Rendering Pipeline](https://www.youtube.com/watch?v=UUfXWzp0-DU) and [Flutter's Layered Design](https://www.youtube.com/watch?v=dkyY9WCGMi0).\n\n\n## Examples\n\nNext we are going get our hands dirty with some easy examples of common widgets. Again, I highly recommend that you follow along and run the code in your editor.\n\n### Setup\n\n\n1. Start a new Flutter application project. I called my project `flutter_widget_examples`, but you can call yours whatever you want.\n2. Open the `main.dart` file. It's in the `lib` folder in your project outline.\n![flutter-widgets-diagram-2](//images.ctfassets.net/1es3ne0caaid/6tqDWVp1oQkgsK8cOkys0M/cfec717ebbf571e6a831ea46b2f3ad71/flutter-widgets-diagram-2.png)\n1. Delete all the text in this file and replace it with  \n\n    `void main() {}` \n\nIf you hot reload your app now it should be a blank screen. The `main()` function is the starting point for every Flutter app. Right now ours does nothing, but in each of the examples below we will be testing a different Flutter widget here.\n\n### Container widget\n\nThe first widget we are going to play with is called a Container. As you might have guessed from the name, it's a holder for other widgets. But we aren't going to put anything else in it to start with. We will just play with its color property.\n\nReplace all the code in `main.dart` with the following:\n\n``` dart\n    // importing this package gives us the dart widgets\n    // as well as the Material Theme widgets\n    import 'package:flutter/material.dart';\n    \n    // the main() function is the starting point for every Flutter project\n    void main() {\n    \n      // calling this method (you guessed it) runs our app\n      runApp(\n      \n        // runApp() takes any widget as an argument.\n        // This widget will be used as the layout.\n        // We will give it a Container widget this time.\n        Container(\n          color: Colors.green, // \u003c-- change this\n        ),\n        \n      );\n    }\n```\n\n\u003e **Note:** You may have noticed the commas (`,`) at the ends of some lines in Dart (the programming language that we write Flutter apps in). These commas are used for formatting lines. You could remove them but then the text would be written on a single line when auto-formatted.\n\nRestart the app and see what you get. Then replace `Colors.green` with other values. You will notice that if you try to do a hot reload nothing happens. We will fix that soon. For now just restart the app between every change.\n\n\n- `Colors.red`\n- `Colors.blueAccent`\n- `Colors.deepPurple`\n\n![flutter-widgets-colors-demo](//images.ctfassets.net/1es3ne0caaid/3E04XcObmU8o0mGYKGU0cA/9b1be0677ef256807ef61a277cf53a55/flutter-widgets-colors-demo.png)\n\nThis step was pretty easy, wasn't it? Now you know how to change property values in Flutter widgets.\n\n### Text widget\n\nProbably every single app that you make will have text, so the Text widget is definitely one that we need to look at.\n\nI added some boilerplate code with explanations. You don't have to pay too much attention to it, though. I was going to leave it out, but using the MaterialApp widget makes the app look nicer and makes the rest of the code simpler. Also, having the `build()` method lets us use hot reload to update after changes. \n\nReplace all the code in `main.dart` with the following code. Pay special attention to the `myWidget()` method at the bottom. We will use it to return the Text widget that we are playing with here. In following examples you will only need to replace this method.\n\n``` dart\n    import 'package:flutter/material.dart';\n    \n    void main() {\n      // runApp() is a builtin method that initializes the app layout\n      // MyApp() (see below) is a widget that will be the root of our application.\n      runApp(MyApp());\n    }\n    \n    // the root widget of our application\n    class MyApp extends StatelessWidget {\n    \n      // The build method rebuilds the widget tree if there are any changes\n      // and allows hot reload to work.\n      @override\n      Widget build(BuildContext context) {\n    \n        // This time instead of using a Container we are using the MaterialApp \n        // widget, which is setup to make our app have the Material theme.\n        return MaterialApp(\n    \n          // The Scaffold widget lays out our home page for us\n          home: Scaffold(\n    \n            // We will pass an AppBar widget to the appBar property of Scaffold\n            appBar: AppBar(\n              // The AppBar property takes a Text widget for its title property\n              title: Text(\"Exploring Widgets\"),\n            ),\n    \n            // The body property of the Scaffold widget is the main content of\n            // our screen. Instead of directly giving it a widget we are going\n            // to break it out into another method so that things don't get\n            // too messy here.\n            body: myWidget(),\n    \n          ),\n        );\n      }\n    }\n    \n    // This is where we will play with the Text widget\n    Widget myWidget() {\n      return Text(\n        \"Hello, World!\",\n      );\n    }\n```\n\nYou should see the following:\n\n![flutter-widgets-text-demo-1](//images.ctfassets.net/1es3ne0caaid/5uSLfwQqVGU4S8MW8Yo2AO/702c598de6d767a78f0f8fa40e3431c0/flutter-widgets-text-demo-1.png)\n\nChange the text from \"Hello, World!\" to \"Hello, Flutter!\" and then do a hot reload.\n\n![flutter-widgets-text-demo-2](//images.ctfassets.net/1es3ne0caaid/6moWCUxXXyo8YI6AUO4aCu/707254aae677682a48bbd77a52751035/flutter-widgets-text-demo-2.png)\n\nIf you want to increase the font size, you can add a TextStyle widget to the `style` property of `Text`. Replace the `myWidget()` method above with the following:\n\n``` dart\n    Widget myWidget() {\n      return Text(\n        \"Hello, Flutter!\",\n        style: TextStyle(\n          fontSize: 30.0\n        ),\n      );\n    }\n```\n\n![flutter-widgets-text-demo-3](//images.ctfassets.net/1es3ne0caaid/5g7tsVoq6IM2ckaACUqIIu/279cff9ea6a49babf8677a73033994b9/flutter-widgets-text-demo-3.png)\n\nThere are lots of other changes you can make with the TextStyle widget, like color, font, shadows, and spacing to name a few.\n\nIf you want to add padding, you don't change a property. Instead, you wrap the Text widget with a Padding widget. In Flutter lots of layout related tasks use widgets instead of setting properties. Remember, a widget is a blueprint that affects how the UI looks.\n\nReplace the `myWidget()` method with the following:\n\n``` dart\n    Widget myWidget() {\n      return Padding(\n        // Set the padding using the EdgeInsets widget.\n        // The value 16.0 means 16 logical pixels. This is resolution\n        // independent, so you don't need to worry about converting\n        // to the density of the user's device.\n        padding: EdgeInsets.all(16.0),\n        // When wrapping one widget with another widget,\n        // you use the child property.\n        child: Text(\n          \"Hello, Flutter!\",\n        ),\n      );\n    }\n```\n\n![flutter-widgets-text-demo-4](//images.ctfassets.net/1es3ne0caaid/3zo7lvSWjCgCqEy600A4cM/221f97004a99d755bdaf1a252ad8dcb7/flutter-widgets-text-demo-4.png)\n\n### Button widget\n\nIf you have been doing the code along with me, your confidence should be increasing. It really isn't that hard to make widgets, is it? Buttons are another common need and Flutter has several types of button widgets. Although we are not doing anything in response to the button click in this tutorial, you can see in the code below where you could do something.\n\n``` dart\n    Widget myWidget() {\n      return RaisedButton(\n        child: const Text('Button'),\n        color: Colors.blue,\n        elevation: 4.0,\n        splashColor: Colors.yellow,\n        onPressed: () {\n          // do something\n        },\n      );\n    }\n```\n\nWe used a RaisedButton here. The elevation affects the shadow under the button. The splash color is what you see when the button is clicked.\n\n![flutter-widgets-button-demo-1](//images.ctfassets.net/1es3ne0caaid/4nxjDfAr5YsA80IaMiK6qc/643afbc354706a16c034808ae1fcd3e0/flutter-widgets-button-demo-1.gif)\n\nYou can use a FlatButton widget if you don't want the elevation.\n\n``` dart\n    Widget myWidget() {\n      return FlatButton(\n        child: const Text('Button'),\n        splashColor: Colors.green,\n        onPressed: () {\n          // do something\n        },\n      );\n    }\n```\n\n![flutter-widgets-button-demo-2](//images.ctfassets.net/1es3ne0caaid/3drkXUnVscUaGA2sAYg2ic/89bf406b9e669276b6938223743c8a1e/flutter-widgets-button-demo-2.gif)\n\n### TextField widget\n\nFor accepting user text input you use a TextField widget. Now that you already have experience with the widgets above, this one is simple. You just click in the TextField and the system keyboard automatically pops up. (If it is [not popping up on the iOS simulator](https://stackoverflow.com/questions/51095762/flutter-textfield-no-keyboard) press Command + Shift + K.)\n\n``` dart\n    Widget myWidget() {\n      return TextField(\n        decoration: InputDecoration(\n            border: InputBorder.none,\n            hintText: 'Write something here'\n        ),\n      );\n    }\n```\n\n![flutter-widgets-text-field-demo-1](//images.ctfassets.net/1es3ne0caaid/4H7NAYnkbKC0KYiMUIUaWq/fb8d0143a49de825ac6a2110687d4b89/flutter-widgets-text-field-demo-1.gif)\n\nRemove `border: InputBorder.none,` and run it again. Now there is a blue input border at the bottom of the TextField.\n\n![flutter-widgets-text-field-demo-2](//images.ctfassets.net/1es3ne0caaid/2Aufj6a2MI42iEwgCcWgcG/a39a71b2d142ded5f7a948fdd7ae187a/flutter-widgets-text-field-demo-2.png)\n\n### ListView widget\n\nThe most common way to display lots of data is with a ListView. Now, I have done lists before with [Android RecyclerViews](https://stackoverflow.com/a/40584425) and [iOS TableViews](https://stackoverflow.com/a/33234181) and I have to say that Flutter is *way* too easy. The stories that you have heard about Flutter having a steep learning curve may have been overrated.\n\n``` dart\n    Widget myWidget() {\n      return ListView.builder(\n        padding: EdgeInsets.all(16.0),\n        // spacing of the rows\n        itemExtent: 30.0,\n        // provides an infinite list\n        itemBuilder: (BuildContext context, int index) {\n          return Text('Row $index');\n        },\n      );\n    }\n```\n\n![flutter-widgets-list-demo-1](//images.ctfassets.net/1es3ne0caaid/3BCXmdl3wI2SkCO80Mo2u2/6d1f2151ac1520d906f5431a16a42ab2/flutter-widgets-list-demo-1.gif)\n\nWhat if you want the rows to respond to user taps? Then fill the rows with a ListTile widget instead of a plain Text widget. This also adds nice spacing, so we can take out the extra padding and item extent from the code above.\n\n``` dart\n    Widget myWidget() {\n      return ListView.builder(\n        itemBuilder: (BuildContext context, int index) {\n          return ListTile(\n            title: Text('Row $index'),\n            onTap: () {\n              // do something\n            },\n          );\n        },\n      );\n    }\n```\n\n![flutter-widgets-list-demo-2](//images.ctfassets.net/1es3ne0caaid/1DnAT67X88qwOAEOSII0Mc/16d623844cc4343edcc171be2a3bdb1e/flutter-widgets-list-demo-2.gif)\n\nIf you have done native development on Android or iOS before, you can see how much easier this is. And if you haven't, take my word for it. It's easier. Pat yourself on the back for choosing Flutter. This is going to save you so much time.\n\n## Conclusion\n\nWidgets are the basic building blocks of Flutter apps. You can think of them like blueprints for telling Flutter how you want the UI to look. In this lesson we looked at some of the most common structural widgets. You can see that making these widgets wasn't that hard when you take small steps one at a time. Everything I did here you can continue to do using the documentation. Find the widget that you want to study in the [widget catalog](https://flutter.io/docs/development/ui/widgets), cut and paste a minimal example, and then start playing around with it.\n\nYou probably don't need it, but [the code for this tutorial](https://github.com/suragch/flutter_widget_examples) is available on GitHub.\n\nOh, and regarding that incomprehensible block of code at the beginning of the tutorial, the [solution](https://stackoverflow.com/a/51235410/3681880) is to break complex layouts into smaller pieces by using variables, methods, or classes. I’ll talk about that more next time when we explore layouts. Before you know it programming in Flutter will be second nature to you! In the meantime check out the resources below.\n\n## Further study\n\n\n- [Flutter widgets 101](https://www.youtube.com/playlist?list=PLOU2XLYxmsIJyiwUPCou_OVTpRIn_8UMd)\n- [Building your first Flutter widget](https://youtu.be/W1pNjxmNHNQ)\n- [Flutter widget of the week](https://www.youtube.com/watch?v=lkF0TQJO0bA\u0026list=PLOU2XLYxmsIL0pH0zWe_ZOHgGhZ7UasUE)\n- [Widget catalog](https://flutter.io/docs/development/ui/widgets)\n\n[First steps with Flutter - Part 2: Building layouts  \u003e\u003e](https://pusher.com/tutorials/flutter-building-layouts)","metaTitle":"First steps with Flutter: Exploring widgets","metaDescription":"This article provides an introductory-level overview of Flutter's widget system. You will be introduced to the widget tree, stateful and stateless widgets. You will work through a few code examples, demonstrating how various key widgets work."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3ggUKRDURi2sEmaYcqsyya","type":"Entry","createdAt":"2018-10-25T06:38:14.063Z","updatedAt":"2020-06-19T12:32:40.456Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Getting started with Flutter - Part 2: Creating your first app","url":"introducing-flutter-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/flutter_doglister","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Q3oRmiXjOmcSmweY4gKY8","type":"Entry","createdAt":"2018-09-12T09:33:28.375Z","updatedAt":"2018-09-12T09:33:28.375Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flutter","url":"flutter","type":"framework","featured":false}}],"reviewDate":"2018-10-23","description":"This two-part series introduces Flutter, a framework for building cross-platform mobile apps with native interfaces, based on Dart. In part two, build a simple demo app and learn the basics of practical Flutter development.","prerequisite":"Prior knowledge of Flutter and Dart is not required.","content":"This is the second part of a two-part series on getting started with Flutter. You can find part one [here](https://pusher.com/tutorials/introducing-flutter-part-1). In this part, we’ll be setting up our machine for Flutter development and create a simple app.\n\n\n## Prerequisites\n\nThis tutorial assumes no previous knowledge of Flutter. Though you need to have previous programming experience in order to follow along. Specifically, you need to know basic object-oriented programming concepts such as variables, conditionals, loops, classes, and objects.\n\nKnowledge of the Dart language is optional. If you’ve done any sort of programming work previously, the syntax should be easy to pick up.\n\nJavaScript knowledge will be helpful as well, especially ES6 features.\n\nWe’ll be setting up the development environment in this tutorial so your machine doesn’t need to have Flutter installed already. This tutorial assumes that you know your way around the operating system you’re using. This means you should know how to add environment variables, and install different pieces of software.\n\n\n## App Overview\n\nWe’re going to build a dog lister app. Here’s what the final output will look like:\n\n![flutter-demo](//images.ctfassets.net/1es3ne0caaid/6GiKQhgSxamCUQEOaY6o8M/b84fab343bb8e6fb0d1ce6498a9c4808/flutter-demo.png)\n\nAs you might already imagine, this app allows the user to view a list of dog photos. They can click on the floating action button to load a new photo which will get appended to the end of the list.\n\nYou can find the full source code of the app on this [GitHub repo](https://github.com/anchetaWern/flutter_doglister).\n\n\n## Setting up Flutter\n\nIn this section, we’ll be setting up Flutter. There are sub-sections for the general setup, Android-specific, and iOS-specific setup. Note that you cannot develop for iOS if you’re on Windows or Linux. If you’re on Mac, you can develop both Android and iOS apps. This tutorial was tested on Windows 7, Ubuntu 16.04, and Mac OS High Sierra. But it should work as well if you’re using any other flavors or versions of those operating systems.\n\n\n### General Setup\n\nThese are the steps you need to follow regardless of the operating system you’re using.\n\n\n1. Install [Git](https://git-scm.com/) and [set up a user account](https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup).\n2. Install [Android Studio](https://developer.android.com/studio/). Setting it up should be fairly straightforward. It will also prompt you to install the essential packages so I’m no longer going to go into details. Once installed, make sure the following platforms and SDK tools are installed:\n![flutter-sdk-tools-required](//images.ctfassets.net/1es3ne0caaid/1QgBCTd8UAQse8MsWQgmaw/206b15c893fa529f84f6a23a34289947/flutter-sdk-tools-required.png)\n![flutter-android-api-required](//images.ctfassets.net/1es3ne0caaid/4Uea5NS9k44MMyKOYwuoYY/3b06e54fca8d2709695ece172bfae2de/flutter-android-api-required.png)\nThese are the build tools in text form:\n\n- CMake\n- Android Emulator\n- Android SDK Platform - Tools\n- Android SDK Tools\n- Google Play services\n- Intel x86 Emulator Accelerator\n- NDK\n- Support Repository\n\nAs for the Android platform, the only requirement is the Android SDK Platform 28.\n\n3. Install [Visual Studio Code](https://code.visualstudio.com/). After that, install the Flutter extension. Installing the Flutter extension will install Dart extension as well:\n![flutter-visual-studio-code-extension](//images.ctfassets.net/1es3ne0caaid/3Lr0d2pcSsEE4gY8eaAYM0/182aafbc8cdc9439ddd8a8765a58911a/flutter-visual-studio-code-extension.png)\n4. Download and install [Genymotion emulator](https://www.genymotion.com/fun-zone/). You can also use the Android emulator in Android Studio if you want, but we’ll be using Genymotion in this tutorial. As for the virtual device, I had good luck with devices using API 19 and above.\n5. Flutter will also require the Flutter and Dart plugin for Android Studio, you can install those if you want but we’re not really going to use Android Studio in this tutorial so you can skip it. If you want to use Android Studio then go to **Preferences** → **Plugins** then click on **Browse Repositories**, search for “Flutter” and install it. This will ask you to install Dart as well so just agree.\n\n\n### Mac OS setup\n\nThis section shows the steps to follow to setup Flutter on Mac. Mac OS High Sierra version 10.13.6 was used for testing. But it should also work if you have a lower or higher version of High Sierra installed.\n\n#### General setup\n\nThese are the general steps in setting up Flutter on Mac OS.\n\n\n1. Make sure that you have curl, and unzip installed. You can install these via [Homebrew](https://brew.sh/) if you don’t already have them.\n2. Download the Flutter SDK [from here](https://flutter.io/sdk-archive/#macos). At the time of writing this tutorial, the most recent version is [0.6.0](https://storage.googleapis.com/flutter_infra/releases/beta/macos/flutter_macos_v0.6.0-beta.zip). Always stick with the latest available version.\n3. Extract the zip file using the `unzip` command or the archive manager that you have on your machine:\n\n```\n    unzip ~/Downloads/flutter_macos_v0.6.0-beta.zip\n```\n\n4. Copy the `flutter` folder to where you store your development tools. Mine is in the root of my user directory.\n\n\n5. Open your bash profile and add Flutter to your path:\n\n```\n    nano ~/.bash_profile # open bash profile\n    export PATH=/Users/$USER/flutter/bin:$PATH # add this with the rest of your exports\n```\n\n6. Source your bash profile for the changes to take effect:\n\n```\n    source ~/.bash_profile\n```\n\n#### Android-specific setup\n\nIf you want to develop Android apps with Flutter, here are the steps:\n\n\n1. Run `flutter doctor` to check what else your system lacks before you can start developing apps in Flutter. Mine looks like this:\n![flutter-doctor-missing-requirements](//images.ctfassets.net/1es3ne0caaid/2TXlg5HR448ykuAAaaiU24/52044f1d1db8bd9407522f11a4194df5/flutter-doctor-missing-requirements.png)\n\n2. After that, all you need to do is run `flutter doctor --android-licenses` and accepting the licenses by responding with `y` to each of the questions asked.\n\n\n#### iOS-specific setup\nFollow these steps if you want to develop iOS apps with Flutter.\n\n\n1. If you want to develop iOS apps with Flutter, install the latest stable version of Xcode via the App Store.\n2. Configure the Xcode command-line tools:\n\n```\n    sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\n```\n\n3. Accept the license agreement:\n\n```\n    sudo xcodebuild -license\n```\n\n### Installing on Windows\n\nFollow these steps if you’re using Windows. This was specifically tested on Windows 7 so there’s a high chance that it will work on higher versions of the OS as well.\n\n#### Android-specific setup\n\n\n1. Download the latest copy of the Flutter SDK from the [SDK Archive page for Windows](https://flutter.io/sdk-archive/#windows). At the time of writing this tutorial, the latest is version [0.6.0](https://storage.googleapis.com/flutter_infra/releases/beta/windows/flutter_windows_v0.6.0-beta.zip).\n2. Once downloaded, extract the zip file and copy the resulting `flutter` folder to your `C:` drive. After copying, the resulting path should be `C:\\flutter` and there should be a `flutter_console.bat` file at the root of that directory.\n3. Double-click on the `flutter_console.bat` file inside `C:\\flutter`. This should open a new command line window. Run `flutter doctor` to check which system requirement you’re still lacking to develop Flutter apps. In my case, it required me to accept the licenses for Android by running `flutter doctor --android-licenses` and responding with `y` (yes) to all the licenses.\n4. `flutter doctor` should also complain about not having a connected device. To solve this, boot up the Genymotion or Android emulator and run `flutter doctor` again.\n5. The requirement for the Flutter and Dart plugin for Android Studio is optional because we’re not really going to use Android Studio to write code in this tutorial.\n6. Go to your advanced system settings. You can find this one either in the **Control Panel** or right-clicking on **Computer** and select **System** **properties**. Once you see a window similar to the one below, click on **Environment Variables**:\n\n![flutter-windows-system-properties](//images.ctfassets.net/1es3ne0caaid/15oe8yx9v8cc4ca0o4sKqg/371217c4279b0540ed12af464923ed7f/flutter-windows-system-properties.png)\n\n\n9. Under **User Variables**, edit the `Path` variable:\n\n![flutter-windows-env-variables](//images.ctfassets.net/1es3ne0caaid/5h8JIWBVscuk62ySOs2weK/a56bad0e04f6421dec0b6dd8ce1c5d64/flutter-windows-env-variables.png)\n\n\n10. Append `;C:\\flutter\\bin` after the last value. Mine looks like this after adding the path to Flutter:\n\n```\n    ;C:\\Program Files\\Docker Toolbox;C:\\Users\\wern\\AppData\\Roaming\\npm;C:\\Users\\wern\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\flutter\\bin\n```\n\n11. Save the changes. This will allow you to execute any Flutter command from either the default command line, PowerShell, or Git Bash. I personally prefer Git Bash because its character set doesn’t mess up the check mark and it’s a whole lot more readable than the other two:\n\n\n![flutter-doctor-git-bash](//images.ctfassets.net/1es3ne0caaid/47bMXCpldK6Cqo00GQYEUk/bce200b5eb4863a3f3a8b9415c848081/flutter-doctor-git-bash.png)\n\n### Installing on Ubuntu\n\nFollow these steps if you’re on Ubuntu or any Linux distribution. Just execute the equivalent command for your particular flavor of Linux if it’s different. Ubuntu 16.04 LTS is used for testing.\n\n#### Android-specific setup\n\n\n1. Before anything else, make sure to update the packages installed on your operating system first. You can do so by opening the software updater and installing all the relevant updates. Alternatively, you can also run `sudo apt-get update` from the terminal.\n2. Download the latest version of the Flutter SDK from the [SDK archives page](https://flutter.io/sdk-archive/#linux). At the time of writing this tutorial, the most recent version is [0.6.0](https://storage.googleapis.com/flutter_infra/releases/beta/linux/flutter_linux_v0.6.0-beta.tar.xz).\n3. Extract the `.tar.xz` file in the root of your home directory. For me, it’s in `/home/wern/flutter`, where the `flutter` directory is the extracted folder containing a `flutter_console.bat` file in its root.\n4. Update the `.bash_profile` file to include the path to the `flutter/bin` folder. Make sure you have the Android paths in there as well:\n\n```\n    export ANDROID_HOME=$HOME/Android/Sdk\n    export PATH=$PATH:$ANDROID_HOME/tools\n    export PATH=$PATH:$ANDROID_HOME/tools/bin\n    export PATH=$PATH:$ANDROID_HOME/platform-tools\n    \n    export PATH=$HOME/flutter/bin:$PATH\n```\n\n4. Run `flutter doctor` to check your system for software requirements. If you followed the general setup, the only thing left for you to do is execute `flutter doctor --android-licenses` to accept the Android licenses. Just respond with `y` to all of those to accept it.\n\n\n## Building the hello world app\n\nStart by generating a new Flutter app:\n\n```\n    flutter create doglister\n```\n\n### Directory structure\n\nOnce the project is created, drag it into VS code. We’re using VS code because it has the most complete Flutter support (Dart syntax, code completion, debugging tools).\n\nBy default, you should see the following directory structure:\n\n\n- `android` - where Android-related files are stored. If you’ve done any sort of cross-platform mobile app development before, this, along with the `ios` folder should be pretty familiar.\n- `ios` - where iOS-related files are stored. \n- `lib` - this is where you’ll be working on most of the time. By default, it contains a `main.dart` file, this is the entry point file of the Flutter app. \n- `test` - this is where you put the unit testing code for the app. We won’t really be working on it in this tutorial.\n- `pubspec.yaml` - this file defines the version and build number of your app. It’s also where you define your dependencies. If you’re coming from a web development background, this file has the same job description as the `package.json` file so you can define the external packages (from the [Dart packages website](https://pub.dartlang.org/)) you want to use in here.\n\nNote that I’ve skipped on other folders and files because most of the time you won’t really need to touch them.\n\n### Running the app\n\nNext, open an iOS simulator or Android emulator and run the app once it has completely booted:\n\n```\n    flutter run\n```\n\nThe command above detects any running instance of an Android or iOS simulator so it should automatically pick up the one you launched beforehand. \n\nAnytime you make a change to the code and you want to preview the change, simply hit the `r` key while in the terminal window. This hot reloads the app but the state will still be retained. But if you notice that the change doesn’t appear, you might need to hit the `Shift + R` key to hot restart the app. Note that this wouldn’t retain the app state like hot reload does.\n\n![flutter-run](//images.ctfassets.net/1es3ne0caaid/9bzwLHg8ik6goaWWUUiqi/46adc1262d25ebbcaaece6472ce1facb/flutter-run.png)\n\nIf you find it cumbersome to be hitting the  `r` key each time you make a change, consider going into debug mode in Visual Studio code. You can do that by going to **Debug** → **Start Debugging**, or simply hit `Ctrl + Shift + F5` or `⌘ + Shift + F5` on your keyboard. While on debug mode, everytime you hit save, the app is hot reloaded so you don’t have to go back and forth between your text editor, simulator, and the terminal while you’re working.\n\n\n### Hello world app\n\nThe code that comes with the Flutter starter app is a bit complicated, so we’ll stick with the same hello world app from this [CodeLab](https://flutter.io/get-started/codelab/) first. Open the `lib/main.dart` file in the project directory and put the following code:\n\n``` dart\n    import 'package:flutter/material.dart'; // import the material package\n    \n    void main() =\u003e runApp(MyApp()); // render the MyApp widget\n    \n    // define a stateless widget\n    class MyApp extends StatelessWidget {\n      @override // override the build method from the StatelessWidget\n      Widget build(BuildContext context) { // define the method for rendering the app\n        return MaterialApp(\n          title: 'Welcome to Flutter', // the title of the app\n          home: Scaffold( // specify the screen structure\n            // the app's header\n            appBar: AppBar( // the widget for rendering an app header\n              title: Text('Welcome to Flutter'), // the header text\n            ),\n            // the contents of the body\n            body: Center( // center the contents\n              child: Text('Hello World'), // render some text\n            ),\n          ),\n        );\n      }\n    }\n```\n\nTo have a better understanding of what’s going on, let’s break down the code above.\n\nFirst, we import the [Material library](https://docs.flutter.io/flutter/material/material-library.html) from Flutter:\n\n``` dart\n    import 'package:flutter/material.dart';\n```\n\nThis allows us to use widgets that implement [Material Design](https://material.io/design/). Among those are the `MaterialApp`, `Scaffold`, and `AppBar` widgets that we’re using above. The methods that we’re using are either part of a library you’ve imported, or part of the Flutter framework itself.\n\nNote that almost everything in Flutter is a widget, and each one can have its own set of properties and child widgets. So `Center` and `Text` are also widgets.\n\nFor most packages, you’ll have to search for it on the Dart packages website and add it to your `pubspec.yaml` file:\n\n![example-dart-package](//images.ctfassets.net/1es3ne0caaid/1Yn149u8Ug2eoS4kMuOkyy/81d0158ee363d60893824990c6eb1ca1/example-dart-package.png)\n\nBut in this case, the library that we’re working with is a part of Flutter. When we create a new app with `flutter create`, the Flutter library is already installed, and with that, the material library among others is also installed.\n\nNext, we define the `main` method. If you’ve worked with languages such as Java, this method should look familiar. This is the entry point of the whole program so it must always be defined if you want to render something on the screen:\n\n``` dart\n    void main() =\u003e runApp(MyApp())\n```\n\nBut what about the fat-arrow (`=\u003e`)? If you’re familiar with ES6 features in JavaScript, this is pretty much the same. It’s just a more concise way of defining functions, so we’re actually running the `runApp()` function inside the `main()` function. This function makes the `MyApp` widget the root of the widget tree. This effectively renders the widget, along with its children into the screen.\n\nIn Flutter, there are two types of widget that you’ll commonly work with: stateless and stateful. The difference between the two is that stateless widgets don’t manage it’s own internal state, while a stateful widget does. For example, a button widget doesn’t need to keep track of anything internally while a counter widget needs to keep track of its current count because it needs it for display. In our case, we’re creating a stateless widget because all we need to do is render something on the screen. To create a stateless widget, you need to extend the `StatelessWidget` [class](https://docs.flutter.io/flutter/widgets/StatelessWidget-class.html):\n\n``` dart\n    class MyApp extends StatelessWidget {\n      // ...\n    }\n```\n\nThat class requires you to override its `build` method which should return the actual contents of the widget. In this case, we’re using the `MaterialApp` [widget](https://docs.flutter.io/flutter/material/MaterialApp-class.html) as a wrapper. This allows us to easily implement Material Design for the widgets that we’re going to render as its child:\n\n``` dart\n    @override\n    Widget build(BuildContext context) { \n      return MaterialApp(\n        title: 'Welcome to Flutter', \n        home: Scaffold( \n          ... \n        ),\n      );\n    }\n```\n\nNote that the `MaterialApp` widget doesn’t only allow us to use the Material Design theme, it also handles navigation and navigation animations. So the `home` property actually allows us to define the widget to render on the `home` route. For that, we’re using the `Scaffold` [widget](https://docs.flutter.io/flutter/material/Scaffold-class.html) which provides the structure for the layout that we’re trying to build.\n\nThe `Scaffold` widget accepts the `appBar` (app header) and the `body` (main content of the app): \n\n``` dart\n    appBar: AppBar( \n      title: Text('Welcome to Flutter'),\n    ),\n    body: Center(\n      child: Text('Hello World'), \n    ),\n```\n\nThose are the basics of building the UI in Flutter. Basically, everything in Flutter is a widget. There are widgets used for specifying the UI structure (for example, `Scaffold`). There are also widgets that allow you to render something on the screen (for example, `Text`). Each widget can have their own child, and those child widgets can also have their own children and so on. The only caveat is that some widgets won’t accept just any child. For example, widgets like the `Scaffold` only accept a handful of widget types.\n\nIf you’re like me and you’re coming from a framework like React Native, then you must be thinking that it’s a whole lot of work! And I agree with you. Building the UI of the app will definitely take longer especially if you’re just starting out. But once you get used to it, you’ll be productive in no time. This is where the documentation really shines because everything you need is literally just [one search away](https://docs.flutter.io/flutter/widgets/widgets-library.html#classes).\n\n\n## Building the dog lister app\n\nNow it’s time for us to build the app that we’ve set out to build, the dog lister app. For this, we’ll be using the same Flutter project that we created earlier.\n\n### Directory structure\n\nFirst, let’s talk about the directory structure. We’ll be following the default directory structure set by Flutter, but we’re going to add a few folders inside the `lib` directory as well:\n\n```\n- `src`\n  - `models` \n    - `dog_model.dart`\n  - `widgets`\n    - `card_list.dart`\n  - `app.dart`\n- `main.dart`\n```\nGo ahead and create those folders and files. Feel free to consult the [GitHub repo](https://github.com/anchetaWern/flutter_doglister) as a basis.\n\n### Entry point file\n\nOpen the `lib/main.dart` file and replace the existing contents with the following:\n\n``` dart\n    import 'package:flutter/material.dart'; // import the material library\n    import 'src/app.dart'; // import the app.dart local file\n    void main() {\n      runApp(App());\n    }\n```\n\nAll of these lines should look familiar except for the second line if you haven’t previously worked with relative linking. In the first line, we’re trying to link a Flutter package, thus the `package:` prefix. But for Dart files that are inside the project directory, all you have to do is specify the path in which they’re stored.\n\nThe third to fifth lines is just the long way of doing this:\n\n```\n    void main() =\u003e runApp(App())\n```\n\n### Initializing the main app file\n\nNext, open the `lib/src/app.dart` file. This is where we will add the main content of the app. Start by importing the Material library:\n\n``` dart\n    import 'package:flutter/material.dart';\n```\n\nUnlike the hello world app from earlier, we will be using a stateful widget for this app. A stateful widget requires a `createState()` [method](https://docs.flutter.io/flutter/widgets/StatefulWidget/createState.html) to be implemented. Inside the method body is where you return the stateful widget:\n\n``` dart\n    // lib/src/app.dart\n    class App extends StatefulWidget {\n      createState() {\n        return AppState();\n      }\n    }\n```\n\nNext, declare the actual stateful widget. From the name of the method above (`createState`) which returns this widget, and also the class that the widget below extends (`State`), it can look like we’re just declaring the state of the stateful widget. But in reality, we’re creating the actual widget, not just its state. It still requires us to declare a `build` method which returns the contents of the widget, the only difference is that we’re going to add an internal state to this widget later on. For now, we’ll simply return the UI components:\n\n``` dart\n    // lib/src/app.dart\n    class AppState extends State\u003cApp\u003e {\n      \n      Widget build(context) {\n        return MaterialApp(\n          home: Scaffold(\n            body: Container(),\n            floatingActionButton: FloatingActionButton(\n              child: Icon(Icons.refresh),\n              onPressed: () =\u003e {\n                // nothing for now..\n              },\n              backgroundColor: Colors.deepPurpleAccent[700],\n            ),\n            appBar: AppBar(\n              title: Text('Doggos'),\n              backgroundColor: Colors.black54,\n            ),\n          ),\n        );\n      }\n    }\n```\n\nIn case you’re wondering what this weird-looking syntax means, this means that we want to create a copy of the `State` class that will work specifically for the `App` class we created right above this class. And since the `App` class is extending the `StatefulWidget` class, this means that we’re inheriting the methods from the `StatefulWidget` class as well. One of these methods is the `setState` method which allows us to update the state. You’ll see this in action later on:\n\n``` dart\n    class AppState extends State\u003cApp\u003e {\n      // ...\n    }\n```\n\nThe code above should look familiar except for the `Container` and `floatingActionButton` widget that we’re using:\n\n- `Container` - used as a [wrapper](https://docs.flutter.io/flutter/widgets/Container-class.html) for other widgets for them to occupy the available space in the screen. In this case, we’re not really wrapping anything so it simply acts as a placeholder. If you don’t pass in another widget to a `Container`, it won’t actually occupy the screen.\n- `FloatingActionButton` - this [widget](https://docs.flutter.io/flutter/material/FloatingActionButton-class.html) is used for creating, you guessed it, a floating action button! In case you’re not familiar, these are the buttons that seemingly hover over the rest of the UI. They’re usually circular in shape and are often used with the `Icon` [widget](https://docs.flutter.io/flutter/widgets/Icon-class.html). The `FloatingActionButton` widget is special because the `Scaffold` [widget](https://docs.flutter.io/flutter/material/Scaffold-class.html) accepts it as a parameter. As mentioned earlier, not all widgets can accept all other types of widget.\n\nAside from that, we’re also adding custom colors to the `appBar` and `floatingActionButton` widgets. In Flutter, colors are not represented using hex color codes, instead they’re represented in [ARGB format](https://docs.flutter.io/flutter/dart-ui/Color-class.html). There are also [color constants](https://docs.flutter.io/flutter/material/Colors-class.html), which can be controlled to be lighter or darker based on the number you specify. Note that the Material theme comes with default colors which are automatically applied to some of the UI elements (for example, `appBar` and `floatingActionButton`), so by specifying a color, we’re basically overriding the default color assigned by the theme.\n\nIn case you’re wondering why we had to create two separate classes just to implement a stateful widget, this is because of the way widgets work in Flutter. We already know that stateless widgets have this method called `build`. This method automatically gets called whenever the data that you pass to it gets updated from a parent widget. In effect, this wipes out the current state of that widget. And that’s why it’s called a stateless widget.\n\nOn the other hand, we have stateful widgets. As you have seen, they require two separate classes in order to work. This is because the primary widget (in this case, the `App` class) will also get its current state wiped out if a data that it’s depending on gets updated from its parent widget. So the reason why we’re returning a second class which serves as the widget’s state is so we could keep the current data from being over-written. If you’re familiar with [JavaScript closures](http://javascriptissexy.com/understand-javascript-closures-with-ease/), stateful widgets work similarly. In the example below, the `counter()` function is the primary widget class while the function inside is the widget’s state:\n\n``` dart\n    function counter(num){\n      var x = num;\n      return function(y){\n       return x = x + y;\n      }\n    }\n    \n    var num = counter(3);\n    num(4); // outputs: 7\n    num(3); // outputs: 10\n```\n\nThat’s it for now. We’ll come back to this file later once we’ve created the widget for rendering a list of cards.\n\n### Dog model\n\nModels in Dart allows us to define a new data type to be used inside our app. This provides structure and uniformity to the different kinds of data that we’re using inside the app. It also serves as a nice tool for documenting what type of data we’re expecting for the properties of an object. This is very useful when working on a [collection of objects](https://api.dartlang.org/stable/2.0.0/dart-core/List-class.html).\n\nTo define a model in Dart, you use the same syntax as for defining a class, only this time you’re not going to need to extend another class. Inside the class, you define the properties. In this case, we only have one property called `url`. Below that, we declare the constructor which accepts a parsed JSON as its argument. We’re using `Map\u003cString, dynamic\u003e` to annotate its type. The parsed JSON is basically a JavaScript object so we used the equivalent data type in Dart which is `Map`. Lastly, `\u003cString, dynamic\u003e` is the type of the key and value pairs for each object:\n\n``` dart\n    // lib/src/models/dog_model.dart\n    class DogModel {\n      String url;\n      DogModel(Map\u003cString, dynamic\u003e parsedJson) {\n        url = parsedJson['message'];\n      }\n    }\n```\n\nBut what about the `message` property we’re accessing from the `parsedJson`? Its response looks something like this:\n\n``` dart\n    {\n      \"status\": \"success\",\n      \"message\": \"https://images.dog.ceo/breeds/shihtzu/n02086240_10785.jpg\"\n    }\n```\n\nThe `DogModel` is extracting that `message` property to get the image URL. Later on, you’ll see how we’re actually passing the `parsedJson` to the `DogModel`.\n\n\n### CardList widget\n\nThe CardList widget is used for rendering the cards which shows a dog picture. This is a stateless widget which depends on the data that comes from the `lib/src/app.dart` file.\n\nStart by importing the Material library and Dog model:\n\n``` dart\n    import 'package:flutter/material.dart';\n    import '../models/dog_model.dart';\n```\n\nNext, create the widget. Below, we’re using the `List` [class](https://api.dartlang.org/stable/2.0.0/dart-core/List-class.html) as the data type for the collection of dog `images`. In Dart, a `List` is pretty similar to an array, it allows us to add a collection of objects to it. Note that not just any object can be added because we’ve added the `DogModel` as a constraint,  this means that only objects of type `DogModel` can be added to the list. After that, we set `images` as the context for the widget. Later on in the `lib/src/app.dart` file you will see how to pass these images to the widget:\n\n``` dart\n    class CardList extends StatelessWidget {\n      final List\u003cDogModel\u003e images;\n     \n      CardList(this.images); // set the widget's context\n      \n      // next: add build method\n      \n    }\n```\n\nNext, add the `build()` function. Here we’re checking if there are any images in the list. If there is, then we use the `ListView` [widget](https://docs.flutter.io/flutter/widgets/ListView-class.html) to render a list. This requires an `itemCount` and `itemBuilder` properties to be passed in. These are the total number of images in the list and the function for rendering each list item. \n\nThe `context` and the item’s `index` is passed as an argument to the `itemBuilder`. This allows us to extract a specific index from the list. The `context` is a [handle](https://docs.flutter.io/flutter/widgets/BuildContext-class.html) to the location of a widget in the widget tree. We don’t really have any use for it so I’m not going to expound further.\n\nIf no images are available, we simply render a `Text` widget with some text in it:\n\n``` dart\n    Widget build(context) {\n     \n      if(this.images.length \u003e 0){\n        return ListView.builder(\n          itemCount: images.length, // the total number of images\n          itemBuilder: (context, int index) { // the function for rendering each list item\n            return buildCard(images[index]);\n          }\n        );\n      }\n      return Center(child: Text('No doggos for you yet...'));   \n    }\n    \n    // next: add buildCard widget\n```\n\nNote that unlike JavaScript, we have to explicitly define the condition which returns a boolean value. So we can’t simply do something like this:\n\n``` dart\n    if(this.images.length){\n      // ...\n    }\n```\n\nNext is the widget for rendering each list item. Each item represents a single instance of the `DogModel` class. We’re using a `Container` widget as the main wrapper. This allows us to add a `decoration`, `padding`, `margin` and `child` widgets:\n\n``` dart\n    Widget buildCard(DogModel image) {\n      return Container(\n        decoration: BoxDecoration(\n          border: Border.all(color: Colors.grey),\n        ),\n        padding: EdgeInsets.all(10.0),\n        margin: EdgeInsets.all(10.0),\n        child: Image.network(image.url),\n      );\n    }\n```\n\nMost of the properties that the `Container` widget expects are part of Flutter’s painting library:\n\n\n- `decoration` - used for painting things like borders, box shadows, and fills on the screen. In this case, we’re using it to surround the container with a grey border on all sides.\n- `padding` - used for adding an empty space inside the surrounding area of the container.\n- `margin` - used for adding an empty space outside the surrounding area of the container.\n\nIf you’ve worked with [CSS](https://en.wikipedia.org/wiki/Cascading_Style_Sheets) before, these concepts should look familiar. The only difference is the syntax that we’re using.\n\nAs for the `child`, we’re rendering an `Image` widget. The `network()` method allows us to [display an image from the internet](https://flutter.io/cookbook/images/network-image/), all it requires is the URL that points out to the image resource.\n\n### Bringing everything together\n\nGoing back to the `lib/src/app.dart` file, we’re now ready to make use of the `CardList` widget. \n\nAt the top of the file, import the libraries, models, and widgets that we’re going to need:\n\n``` dart\n    // lib/src/app.dart\n    import 'package:flutter/material.dart';\n    \n    // add these:\n    import 'package:http/http.dart' show get; // for making http requests\n    import 'models/dog_model.dart'; // dog model\n    import 'dart:convert'; // for parsing JSON strings\n    import 'widgets/card_list.dart'; // CardList widget\n```\n\nNote that these libraries come pre-installed when you create a new Flutter project. Some of these are libraries are really big like Dart’s HTTP library. That’s why we’re only extracting the `get` method from it.\n\nNext, update the `AppState` class to include the initialization of the two states that we’ll be using:\n\n``` dart\n    class AppState extends State\u003cApp\u003e {\n      bool _loaderIsActive = false;  // whether the loader is currently showing or not\n      List\u003cDogModel\u003e images = []; // the list of images\n      \n      // next: add fetchDog method\n    }\n```\n\nThe `fetchDog()` function is responsible for updating the state whenever the user taps on the button for loading a new image. When this happens, we want to show a loading animation in the screen. This animation will only be hidden once the HTTP request is done:\n\n``` dart\n    void fetchDog() async {\n      // show the loader\n      setState(() {\n        _loaderIsActive = true;\n      });\n      \n      // make an HTTP request to get the dog photo\n      var response = await get('https://dog.ceo/api/breeds/image/random');\n      var dogModel = DogModel(json.decode(response.body));\n      \n      // hide the lower and add the newly loaded image into the state\n      setState(() {\n        _loaderIsActive = false;\n        images.add(dogModel);\n      });\n    }\n    \n    // next: add build method\n```\n\nIn Flutter, the `setState()` method is used for updating the state of a Stateful widget. Before we request for a new image, we update the state so the loader will show up, then we call it again once the image has been loaded, this time to add the new image to the list and hide the loader.\n\nThe `fetchDog()` function uses the same [async/await pattern](https://codeburst.io/javascript-es-2017-learn-async-await-by-example-48acc58bad65) that we use in JavaScript. The `get()` function in Dart’s HTTP library returns a `Future` which is just a fancy term for [Promises](https://developers.google.com/web/fundamentals/primers/promises) in JavaScript. This `Future` represents a potential value which will be available in the future. So by default, the `response` variable doesn’t actually contain the value that we’re expecting right after we call the `get()` function. By using the async/await pattern, we make the program wait for this future value to become available before we execute the rest of the code inside the function. Meanwhile, all the codes outside the function will continue to execute.\n\nNext, update the widget’s `build` method to show the loader when `_loaderIsActive` is `true` and show the `CardList` if it’s `false`. Then execute the `fetchDog()` function when the `floatingActionButton` is pressed:\n\n``` dart\n    Widget build(context) {\n      return MaterialApp(\n        home: Scaffold(\n          body: Center(child: _loaderIsActive == true ? CircularProgressIndicator() : CardList(images)), // update this: \n          floatingActionButton: FloatingActionButton(\n            child: Icon(Icons.refresh),\n            onPressed: fetchDog, // update this: use fetchDog instead of the empty function\n            backgroundColor: Colors.deepPurpleAccent[700],\n          ),\n        )\n      );\n    }\n```\n\nOnce that’s done, the app should already be functional. Pressing the button should show the loader, and once the image has been loaded it should be added to the list. If you don’t already have the app running, launch an Android emulator or iOS simulator instance and execute the following command from the root of the project directory:\n\n```\n    flutter run\n```\n\n## Conclusion\n\nThat’s it! In this tutorial, you learned how to create your very first Flutter app. Along the way, you also learned some of the important Flutter concepts like stateful and stateless widgets, how to use Dart packages, how to make HTTP requests and parse JSON strings, and lastly, rendering things on the screen.\n\nThat also concludes this series. I hope you gained the necessary knowledge in order to continue exploring Flutter. Flutter is a very young technology, so early adopters are really important for its growth. The more people who use Flutter, the better the technology gets.\n\nYou can find the code used in this tutorial on its [GitHub repo](https://github.com/anchetaWern/flutter_doglister).","metaTitle":"Getting started with Flutter - Part 2","metaDescription":"This series is an introduction to Flutter, Google's mobile app SDK. It allows developers to create native interfaces for both Android and iOS. In part two, build a simple demo app and learn the basics of practical Flutter development."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"OCJqPJOQ0eUWmwaYeKqKo","type":"Entry","createdAt":"2018-10-23T12:24:27.087Z","updatedAt":"2018-10-23T12:24:54.238Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Getting started with Flutter - Part 1: Introduction to Flutter","url":"introducing-flutter-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Q3oRmiXjOmcSmweY4gKY8","type":"Entry","createdAt":"2018-09-12T09:33:28.375Z","updatedAt":"2018-09-12T09:33:28.375Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flutter","url":"flutter","type":"framework","featured":false}}],"reviewDate":"2018-10-19","description":"This two-part series introduces Flutter, a framework for building cross-platform mobile apps with native interfaces, based on Dart. In part one, examine the pros and cons of Flutter, and compare it to React Native.","prerequisite":"This article assumes no prior knowledge of Flutter or Dart.","content":"In this series, we’ll take a look at a new mobile app development framework called Flutter. \n\nIn the past few years, many tools were developed to help developers create cross-platform apps. This was brought about by the need to release mobile apps that can run on both Android and iOS platforms a lot more quicker. Having two or more teams working on each platform is expensive, and most startups can’t really afford it. That’s why tools like [Cordova](https://cordova.apache.org/), [Ionic](https://ionicframework.com/), [React Native](https://facebook.github.io/react-native/), [Xamarin](https://visualstudio.microsoft.com/xamarin/), [NativeScript](https://www.nativescript.org/), [Fuse](https://www.fusetools.com/), and many others were developed.\n\nIn this part, you’ll learn what it is, how it works, some of its pros and cons, and how it compares to React Native.\n\nIn the second part, you’ll learn how to create an app with Flutter.\n\n## Prerequisites\n\nThis tutorial assumes no previous knowledge of Flutter.\n\n\n## What is Flutter?\n\nFlutter is a new mobile app development SDK from Google. It allows you to develop apps which run on both iOS and Android. Flutter has built-in Material Design and Cupertino widgets which you can use to create beautiful and professional looking apps.\n\nFlutter uses the Dart language for both its SDK and the code written by the developer. \n\nFlutter is a complete framework. This means that everything that you need to build and test a mobile application is included out of the box:\n\n- UI rendering\n- Widget library\n- Navigation\n- State management\n- Hardware APIs\n- Testing\n\n\n## How does Flutter work?\n\nFlutter is built with C, C++, Dart, and Skia, a 2D rendering engine.\n\nEach Flutter app is composed of the Flutter SDK and the Dart code written by the developer. Flutter uses ahead of time (AoT) compiling to compile both the Flutter SDK and the Dart code into a native ARM library. This is then executed by a \"runner\" that handles all the rendering, input and event handling inside the app.\n\nThe diagram below is a high-level representation of the Flutter system architecture. At the very top are the themes for both the [Android (Material Design)](https://flutter.io/widgets/material/) and [iOS (Cupertino)](https://flutter.io/widgets/cupertino/) platforms. As the developer, you wrap [Flutter’s basic widgets](https://flutter.io/widgets/basics/) with these themes depending on which platform you’re working with. \n\nNote that these widgets are Flutter’s own widgets, they don’t actually use the platform’s OEM widgets like React Native or NativeScript does. This brings us to the “Rendering” part in the diagram below. Flutter uses Skia to draw these widgets into the screen. If you’re familiar with [Unity](https://unity3d.com/), Flutter works in a similar way. The underlying framework takes care of the animation, painting, and gestures as the user interacts with the widgets that were rendered. Behind the scenes, Skia takes care of updating what the user sees on the screen. The Flutter SDK and the Dart code written by the developer is executed via the Dart VM.\n\n![flutter-system-architecture](//images.ctfassets.net/1es3ne0caaid/75Zca9ADtK8aGCASu4O6su/be3598840aed81c14c09bbd31838db26/flutter-system-architecture.png)\n\nThat was only a quick overview of how Flutter works. If you’re interested in diving deeper, be sure to check out these technical documents:\n\n- [Flutter system architecture](https://docs.google.com/presentation/d/1cw7A4HbvM_Abv320rVgPVGiUP2msVs7tfGbkgdrTy0I/edit?usp=sharing)\n- [Flutter technical Overview](https://flutter.io/technical-overview/)\n\n\n## Pros and cons of Flutter\n\nIn this section, we’ll take a quick look at some of Flutter’s advantages and disadvantages. These are in terms of developer productivity, widget support, and app performance. Note that these are true at the time of writing this tutorial. Flutter is in constant development, so what’s missing today might already be supported tomorrow.\n\n### Pros\n\n- Flutter is open-source. On top of the dedicated Google team that works on Flutter, everyone is also welcome to [contribute to the development of Flutter](https://github.com/flutter/flutter) and [publish their own packages](https://pub.dartlang.org/flutter). \n- Flutter has great [documentation](https://flutter.io/docs/). Everything you need to know about the Flutter APIs and internals is well-documented.\n- Allows your existing Java, Swift, and Objective-C code to be reused to work with native functionality on iOS and Android.\n- Flutter uses its own widgets, not the one which comes with Android and iOS (OEM widgets). This means we don’t have to deal with implementation details for both platforms.\n- Performance is very close to native performance. Unlike React Native which needs to go through a “bridge” to interact with native components, Flutter has a “runner” which renders the widgets and handles interactions. \n- Flutter comes with nice developer tooling out of the box. \n- Flutter’s interop and plugin system are designed to allow developers to access new mobile OS features and capabilities immediately when Apple or Google releases them.  \n\n### Cons\n\n- Fewer widgets are available for iOS. Flutter’s Cupertino widget library lacks some of the essentials like the [datepicker](https://developer.apple.com/design/human-interface-guidelines/ios/controls/pickers#date-pickers), [stepper](https://developer.apple.com/design/human-interface-guidelines/ios/controls/steppers/), and [progress indicator](https://developer.apple.com/design/human-interface-guidelines/ios/controls/progress-indicators/).\n- Doesn't have much support when it comes to text-editors and IDE's. Currently, it's only compatible with IntelliJ IDEA, Visual Studio Code, and Android Studio. \n- Unlike in React Native, styling is a bit messier in Flutter. Each widget has their own styling which you put right in the rendering code. Each widget can have children so things can get really messy because the structure and styling are mixed together.\n- You can’t transfer your existing CSS knowledge to style your widgets. Though a few concepts still apply (for example, margins and paddings), CSS properties and values are not applicable to Flutter.\n- Not a lot of third-party library support. If you need to use services like [Auth0](https://auth0.com/), [Pusher](https://pusher.com/), [Twilio](https://www.twilio.com/), or [Realm](https://realm.io/), you will most likely have to create your own custom integration.\n- No built-in support for common functionality such as maps and camera. Though you might find someone who’s currently working on it on the [Dart packages website](https://pub.dartlang.org/flutter).\n- Flutter hasn't been tested on tablets so there might be some UI issues on tablets. At the time of writing this article, tablet support isn’t really a priority so be sure to check out this [issue](https://github.com/flutter/flutter/issues/12310) to keep track of tablet support if you plan on developing for tablets.\n\n\n## How does Flutter compare to React Native?\n\nThe most popular cross-platform app development framework today is React Native, so developers trying to check out Flutter will naturally come to ask this question: “How does Flutter compare to React Native?”. \n\nIf you do a quick Google search, you will come across articles which compare the two, and probably with some other framework like Ionic, NativeScript, and Xamarin. There are probably others, but the main question you’re really asking is: “is Flutter a viable solution for cross-platform app development?”. And that’s why I chose React Native as the framework to compare with Flutter. Because it’s already been battle-tested, [lots of well-known companies are using it](https://facebook.github.io/react-native/showcase.html) and it has a huge community behind it.\n\nWe will be using the following criteria for comparing the two:\n\n\n- Developer Productivity\n- User Experience\n- Hardware API Support\n\nThe criteria above are arranged according to its level of importance. Developer Productivity and User Experience are more important while Hardware API Support is less important. Note that this prioritization is hugely based on my own personal experience as well as the research that went into writing this article.\n\n\n### Developer productivity\n\nWe already know that both React Native and Flutter allow us to write code once and it will run everywhere. If you have worked with React Native in a fair amount of time, you already know that this isn’t completely true. You still have to deal with configuration files (`Podfile`, `build.gradle`) on both platforms, you still have to deal with the different UI implementations, and work with either Java, Objective-C, or Swift code whenever you need to work with native functionality.\n\nIn Flutter, things are a bit different. You still have the `android` and `ios` folders in your project but most of the time you won’t really need to touch the files in there. \n\nHow fast the hot reload is is another important factor. Nothing kills productivity more than having to wait a minute for one simple change to show up in the live preview. Both React Native and Flutter have a hot reload feature, but the one in Flutter is faster. \n\nOther than that, there are other areas which developer productivity depends on:\n\n- Documentation\n- Learning curve\n- Community\n- Tooling\n\n#### Documentation\n\nThe first thing that developers will look at when learning a new technology is the documentation, so it plays a big role in developer productivity. Even advanced users will need to use it from time to time when they’re working with a new API.\n\nIf you give yourself a few minutes to scan through the documentation of React Native and Flutter, you will quickly see the effort that went into creating the documentation. The documentation is not just about describing the different APIs, functionalities, components and other features that are available in the framework. It’s also about making it easy for both newcomers and advanced users to find what they need to know about.\n\nReact Native’s documentation is very shallow, it teaches you one thing and then moves on to the next. It doesn’t allow you to easily dig deeper into one specific concept. If you’re a React Native developer, you might have noticed that there are lots of poorly documented (or not documented at all) APIs. So you have to look for it somewhere else, or just go on with your life not knowing that such capability (or bug) exists. \n\nFlutter’s documentation is very easy to use, all the important concepts and features that you need to know are visible in their sidebar. If you want to dig deeper, they also have API documentation. For example, all the classes that are available for constructing widgets with the material library are well-documented. It includes information about what the constructor expects, which properties you can pass in. Best of all, their search has auto-suggest, this is very helpful if you’re not exactly sure what you’re looking for.\n\nThey even take one step further with their Codelabs section, where it teaches the beginners how to create their very first Flutter app.\n\n#### Learning curve\n\nThe learning curve is the rate at which developers can learn a new technology. Though we can’t disregard the fact that previous experience can make the learning curve less steep. With that in mind, we’ll consider that developers can have previous experience with web technology, JavaScript, CSS, and programming as well.\n\nThis is where React Native takes the crown. Developers who have worked with JavaScript, CSS, and especially React, will easily feel at home when working with React Native. Their experience in creating components, stylesheets, and web APIs will make it easier to pick up React Native. All they have to learn about are the differences between the web and mobile environment, hardware APIs, and the third-party modules that they need to use. After that, they should be pretty productive when working with React Native.\n\nOn the other hand, Flutter uses Dart, a not so popular technology (according to the [Stack Overflow developer survey 2018](https://insights.stackoverflow.com/survey/2018/) at least), as the language for writing Flutter apps. But if you’ve worked with JavaScript before, Dart syntax should be pretty familiar. \n\nThey also introduced the idea that everything is a widget, and that includes adding styles to other widgets:\n\n``` dart\n    new Padding(\n      padding: new EdgeInsets.all(8.0),\n      child: const Card(child: const Text('Hello World!')),\n    )\n```\n\nIn the code above, we’re adding an 8px padding all around a card widget. Just by looking at this code, you’ll see that you can’t really transfer your existing CSS knowledge in styling Flutter apps, although basic concepts like margin and padding still apply.\n\nIn the beginning, most of your time will be spent on familiarizing yourself with how to build widgets, learning the Dart syntax for the different Flutter APIs, and the tooling around the Flutter framework.\n\nOverall, Flutter’s learning curve is only steep in the beginning, but it should reach a plateau once you get the basic concepts down.\n\n#### Community\n\nWithout further explanation, we already know who the winner is, it’s React Native. This is mainly because of two facts:\n\n\n- React Native entered the scene first. It was initially released in 2015 while Flutter is only released in 2017.\n- JavaScript and React developers who want to build mobile apps are naturally drawn to the technology. \n\nEven though this is the case, let’s take a moment to examine how well Flutter is doing compared to React Native when it comes community and overall public interest:\n\n**React Native**\n\n- GitHub stars: [68k](https://discordapp.com/invite/reactiflux)\n- GitHub issues: [13.5k](https://github.com/facebook/react-native/issues)\n- Stack Overflow: [37k questions](https://stackoverflow.com/questions/tagged/react-native)\n- Discord group: [35k members](https://discordapp.com/invite/reactiflux)\n- reactnative reddit: [15.6k subscribers](https://www.reddit.com/r/reactnative/)\n\n**Flutter**\n\n- GitHub stars: [36k](https://github.com/flutter/flutter)\n- GitHub issues: [12.5k issues](https://github.com/flutter/flutter/issues)\n- Stack Overflow: [5k questions](https://stackoverflow.com/questions/tagged/flutter)\n- Gitter: [5k members](https://gitter.im/flutter/flutter)\n- FlutterDev reddit: [5.8k subscribers](https://www.reddit.com/r/FlutterDev/)\n\nWith the numbers above, you can really see the difference between Flutter’s community and React Native. That said, those numbers shouldn’t be underestimated as it’s expected to grow as more and more people realizes the potential of Flutter.\n\nIf we go over at [Google Trends](https://trends.google.com/trends/explore?q=flutter,react%20native), we can see that the overall public interest with React Native and Flutter is climbing up at a steady pace in the past 12 months. Flutter peaked at around the first quarter of 2018. This suggests that companies and independent developers worldwide are checking out Flutter as an alternative for their mobile app development needs:\n\n![flutter-vs-react-trends](//images.ctfassets.net/1es3ne0caaid/5Pu7yMKCjY4I2SKosQKK4K/1348c71249f345f50a3be57ac9699676/flutter-vs-react-trends.png)\n\n#### Tooling\n\nThe availability of tools that makes the work of a developer easier and more pleasing plays a huge role in their productivity as well. Tooling includes:\n\n\n- **Text-editor and IDE support** - code completion, debugger, simulator integration.\n- **Command-line tools** - for checking system requirements, creating a new project, hot reload.\n- **Libraries and UI kits** - for implementing different kinds of functionality like payment processing and social login.\n- **Third-party services** - continuous integration, error reporting.\n\nThis is another area where the huge community support in React Native really trumps Flutter. \n\nReact Native is supported in popular text-editors like Atom, Sublime Text, WebStorm, Visual Studio Code. While Flutter is only supported in IntelliJ IDEA, Visual Studio Code, and Android Studio.\n\nFor command-line tools, while Flutter only has its built-in CLI, it comes packed with a lot of features. Some of the most useful ones include `doctor` which checks if your machine has all the necessary software to build apps with Flutter, `create`  for generating a new Flutter app, `install`  for installing Flutter packages and `build` for building the app:\n\n![flutter-cli](//images.ctfassets.net/1es3ne0caaid/93ECCB6DIW2aMgOuYkIys/3c238654c51f3e6ba57f9225451a287b/flutter-cli.png)\n\nThis is a far cry from what the React Native CLI offers as it only allows you to generate a new project, link native modules, and run the development server. But even though this is the case, the community compensates by creating tools like the [Ignite CLI](https://github.com/infinitered/ignite) and [Haul](https://callstack.github.io/haul/).\n\nIn terms of libraries, React Native taps into the huge repository of [JavaScript packages over at npm](https://www.npmjs.com/). Existing React packages can be easily converted to work with React Native, while libraries that don’t need to access native features can be used immediately (for example, MomentJS).\n\nOn the other hand, Flutter taps into the [Dart package repository](https://pub.dartlang.org/flutter) for its third-party library needs. Unlike React Native, these packages will often need to be written from scratch to utilize the Dart syntax as well as work with the APIs exposed by the Flutter SDK.\n\nFor third-party services, they usually have a JavaScript client that works with their HTTP API. Again, React Native has the advantage. Services like Sentry, Pusher, and Twilio all have JavaScript clients that work with the web. Making those clients work inside the React Native environment is fairly straightforward.\n\nOverall, the winner in the developer productivity criteria is React Native. The only sub-criteria where Flutter won is the documentation, while React Native took all the rest. \n\n**Winner:** React Native \n\n\n### User experience\n\nWhen it comes to User Experience, Flutter has the clear advantage because it’s drawing the UI directly on the native platform’s canvas. As explained earlier in the section on how Flutter works, this is theoretically faster than how React Native works, which is to communicate with the native platform via a “bridge”.\n\nI can’t really present you with hard numbers, but someone has already done the benchmarking before. If you want to know the details, be sure to check out this tutorial: [Examining performance differences between Native, Flutter, and React Native mobile development](https://robots.thoughtbot.com/examining-performance-differences-between-native-flutter-and-react-native-mobile-development). The results in that tutorial say that React Native uses more CPU while Flutter uses more memory. The difference is only small for both instances, but the app used as an example is a simple one (a stopwatch app). What we don’t know is whether the usage continue to rise at the same rate as the app demands more memory and CPU from the device.\n\nUsing those results, I’m not going to give credit to either. CPU and memory usage should be both efficient. But then again, it all depends on the app that you’re building. If your app requires a certain CPU intensive task to finish at the least amount of time then CPU efficiency is the least of your concern, because you need all that juice to complete the task faster. On the other hand, if you expect your users to be running your app along with others, then you should prioritize CPU efficiency instead. \n\n**Winner:** None\n\n\n### Hardware API support\n\nWhen it comes to hardware capability support, both React Native and Flutter come with a decent set of hardware APIs out of the box. \n\nEven though React Native doesn’t have support for camera, Bluetooth, and biometrics, developers who need them usually create a native module and upload them on GitHub. \n\nIn Flutter, most hardware APIs that are needed for most apps are already included in their built-in collection of APIs. If you need something that isn’t already supported, you can search for it on the [Dart packages website](https://pub.dartlang.org/flutter/). Most likely, someone has already started developing a package for it. But just like in React Native, some packages only support one platform.\n\nYet again, React Native wins this round because of the sheer number of hardware capabilities being exposed by other developers. Even though some of those have bugs or have poor support, it’s still better than implementing something from scratch.\n\n**Winner:** React Native\n\nBased on what you’ve read, you already know that React Native is the overall winner. That’s already expected because the criteria in which it won is closely tied to the number of developers using it. React Native came out first, and it has the advantage of the whole JavaScript and React community behind it. \n\n\n## Further reading\n\nIf you want to learn more about Flutter, here a few tutorials that can help you understand it further:\n\n\n- [What’s Revolutionary about Flutter](https://hackernoon.com/whats-revolutionary-about-flutter-946915b09514)\n- [Why we chose Flutter and how it’s changed our company for the better](https://medium.com/@matthew.smith_66715/why-we-chose-flutter-and-how-its-changed-our-company-for-the-better-271ddd25da60)\n- [Flutter FAQ](https://flutter.io/faq/)\n\n\n## Conclusion\n\nThat’s it! In this tutorial, we’ve taken a quick look at Flutter, a promising new mobile app development from Google. You learned some of its pros and cons, and how it compares to React Native. \n\nIn my own opinion, even though Flutter isn’t as battle-tested as React Native, I think it’s production-ready. The only downside is the initial developer productivity. React Native’s learning curve isn’t as steep as Flutter, especially for developers who already have experience in JavaScript and React. Furthermore, because of the huge community behind React Native, there are lots of third-party packages already written for integrating with popular services such as Pusher, Auth0, and Realm.\n\nAt the end, which framework you choose all depends on whether you can afford to invest more time and resources in learning Flutter or not. Flutter definitely has a lot of potential, and it deserves to be checked out by native and cross-platform developers alike.\n\nStay tuned for the second part of this tutorial series where we’ll take a look at the basics of creating an app with Flutter!","metaTitle":"Getting started with Flutter - Part 1","metaDescription":"This series is an introduction to Flutter, Google's mobile app SDK. It allows developers to create native interfaces for both Android and iOS. In part one, examine the pros and cons of Flutter, and compare it to React Native."}}],"defaultValue":"Flutter","queryType":"tag","pages":2,"route":"/tutorials","query":{"tag":"Flutter","page":"2"}}},"page":"/tutorials","query":{"tag":"Flutter","page":"2"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=Flutter&page=2 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:43:47 GMT -->
</html>