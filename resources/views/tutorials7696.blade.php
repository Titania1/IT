<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=JavaScript&page=10 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:47:01 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">224</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels &amp; JavaScript</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials512c.html?product=Beams&amp;tag=JavaScript" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials0e67.html?product=Channels" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#C223CE" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#C223CE"></path></svg></a><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Channels &amp; JavaScript"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/live-graph-go.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Data Visualization<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Go</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a live graph with Go</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Build a simple interface featuring a live graph, supported by a Go backend. The application simulates a web traffic moni...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/geofencing-ionic.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Cordova<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Implement geofencing in Ionic</h3><p class="css-k12xad e5jrto45">Build a geofencing app for mobile using Ionic and Google Maps. Ionic is an open source SDK for developing native web app...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-graph-emberjs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Data Visualization</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live graph with Ember.js</h3><p class="css-k12xad e5jrto45">Build a live interactive graph using Ember.js and Node.js. Users will be able to view the graph, watch it update in real...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-poll-ionic.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live poll app with Ionic</h3><p class="css-k12xad e5jrto45">Use Ionic to create a live poll application for mobile. The app features a Node.js backend. It allows users to vote on t...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/web-traffic-monitor-python.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Flask<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Table</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a web traffic monitor with Python</h3><p class="css-k12xad e5jrto45">Build a dashboard to monitor web traffic, along with a demo site to track. Use Flask for the backend, and vanilla JavaSc...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-app-ionic-sentiment.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app with Ionic featuring sentiment analysis</h3><p class="css-k12xad e5jrto45">Build a chat app for mobile using Ionic and Cordova. Code with TypeScript, targeting mobile devices. Use Node for the ba...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/bitcoin-live-graph-python.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Data Visualization<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flask</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Track Bitcoin prices on a live graph with Python</h3><p class="css-k12xad e5jrto45">Build a live graph to track Bitcoin prices using Flask. You will create a simple Python application that pulls in Bitcoi...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/geofencing-ember.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Ember.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a geofencing web app using Ember</h3><p class="css-k12xad e5jrto45">Build a web app using Ember.js and Google Maps, with Node for the backend. Users are able to check in, submitting their ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/voting-system-emberjs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Ember.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a voting system with Ember.js</h3><p class="css-k12xad e5jrto45">Build a polling app using Ember.js and Node.js. Users will be able to vote for which football team has the best supporte...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials1044.html?product=Channels&amp;tag=JavaScript&amp;page=9" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials013b.html?product=Channels&amp;tag=JavaScript&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorials8114.html?product=Channels&amp;tag=JavaScript&amp;page=8" class="css-za1ua3 edg0byb1">8</a><a href="tutorials1044.html?product=Channels&amp;tag=JavaScript&amp;page=9" class="css-za1ua3 edg0byb1">9</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials7696.html?product=Channels&amp;tag=JavaScript&amp;page=10" class="css-2wakph edg0byb1">10</a><a href="tutorials76b6.html?product=Channels&amp;tag=JavaScript&amp;page=11" class="css-za1ua3 edg0byb1">11</a><a href="tutorials3129.html?product=Channels&amp;tag=JavaScript&amp;page=12" class="css-za1ua3 edg0byb1">12</a><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials959a.html?product=Channels&amp;tag=JavaScript&amp;page=25" class="css-5s6711 edg0byb1">25</a><a href="tutorials76b6.html?product=Channels&amp;tag=JavaScript&amp;page=11" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":224,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"nlxHkriz3q26s4WyIk42u","type":"Entry","createdAt":"2018-07-02T13:15:54.987Z","updatedAt":"2018-07-06T13:40:24.782Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a live graph with Go","url":"live-graph-go","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/pusher-go-realtime-graph","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4E7t0TtVFSAyeeA0ckeYe0","type":"Entry","createdAt":"2018-02-12T15:09:41.899Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Chart","url":"realtime-chart","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6i1HPBqlwsE24YEKwqQyuq","type":"Entry","createdAt":"2018-02-12T15:09:31.050Z","updatedAt":"2018-02-26T12:31:11.548Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Graph","url":"realtime-graph","type":"use case"}}],"reviewDate":"2018-06-29","description":"Build a simple interface featuring a live graph, supported by a Go backend. The application simulates a web traffic monitoring dashboard using Chart.js and some dummy data.","prerequisite":"You will need Go 1.10+ installed on your machine. Basic knowledge of Go and JavaScript will be helpful.","content":"An astronomical number of data streams are being generated every day because data is core to diverse systems. Today’s business owners have come to recognize data as an important factor during decision making. \n\nHowever, the gathered bulk data would be confusing to read and useless without a way to visualize it. For this reason, realtime monitoring systems have gained popularity over the years. We can use such systems to visualize website traffic, weather updates, server performance and so on. \n\nIn this article, we will build a realtime monitoring graph that continuously displays updates on website traffic after a fixed interval. We will build a Go backend server that exposes several endpoints and uses Pusher Channels to trigger events on the count of user visits. We will simulate the website traffic data using a simple setInterval function and a pseudorandom number generator.\n\nOn the frontend, we will receive the simulated updates from Pusher and render the data trend using a line chart. The graph will be a plot on “user visits” against “total number of pages visited.” For context, here is a sample of what we will be building:\n\n![go-live-graph-demo](//images.ctfassets.net/1es3ne0caaid/1xM5LHTn2MYQmyO24M84WI/61af7ff9f8449a3a2c258628b99bea4a/go-live-graph-demo.gif)\n\nFrom the image above, we can see that there is a button labeled **Simulate user visits**, this button is responsible for starting the simulator on the Backend server. Let’s begin.\n\n\n## Requirements\n\nTo follow along with this article, you will need the following:\n\n\n- An editor like Visual Studio Code.\n- Go (version \u003e= 1.10.x) installed on your computer. Heres how you can install [Go.](https://golang.org/doc/install)\n- Basic knowledge of the Go programming language.\n- Basic knowledge of JavaScript (ES6).\n\nOnce you have all the above requirements, we can proceed.\n\n\n## Setting up Pusher\n\nThe first step will be to get a Pusher Channels application. We will need the application credentials for our realtime features to work.\n\nGo to the [Pusher website](https://pusher.com) and create an account. After creating an account, you should create a new application. Follow the application creation wizard and then you should be given your application credentials, we will use this later in the article.\n\n![ember-pusher-app-keys](//images.ctfassets.net/1es3ne0caaid/1QiXDu6gpy0CKQCosqgcgE/1ffc23a7859704465b1a9357c07151b5/ember-pusher-app-keys.png)\n\n\n## Setting up the codebase\n\nLet’s begin by navigating into the `src` directory that is located in the `$GOPATH` and creating a new directory for our app. This will be our working directory:\n\n```\n    $ cd $GOPATH/src\n    $ mkdir pusher-go-realtime-graph\n    $ cd pusher-go-realtime-graph\n```\n\nCreate a new file called `graph.go`. Now, before adding content to this file, we need to install the Go packages that we will be referencing within our application. \n\nRun the following packages to pull in the packages:\n\n```\n    $ go get github.com/labstack/echo\n    $ go get github.com/labstack/echo/middleware\n    $ go get github.com/pusher/pusher-http-go\n```\n\n\u003e ⚠️  If you use Windows and you encounter the error ‘cc.exe: sorry, unimplemented: 64-bit mode not compiled in ‘, then you need a Windows gcc port, such as https://sourceforge.net/projects/mingw-w64/. Also, see this [GitHub issue](https://github.com/golang/go/issues/3441).\n\nWithin your favorite editor, open the `graph.go` file and update it with the following code:\n\n``` go\n    package main\n    \n    import (\n        \"math/rand\"\n        \"net/http\"\n        \"time\"\n        \"github.com/labstack/echo\"\n        \"github.com/labstack/echo/middleware\"\n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n    \n    // We register the Pusher client\n    var client = pusher.Client{\n        AppId:   \"PUSHER_APP_ID\",\n        Key:     \"PUSHER_APP_KEY\",\n        Secret:  \"PUSHER_APP_SECRET\",\n        Cluster: \"PUSHER_APP_CLUSTER\",\n        Secure:  true,\n    }\n    \n    // visitsData is a struct\n    type visitsData struct {\n        Pages   int\n        Count int\n    }\n    \n    func main() {\n        // Echo instance\n        e := echo.New()\n        \n        // Middleware\n        e.Use(middleware.Logger())\n        e.Use(middleware.Recover())\n        \n        // Define the HTTP routes\n        e.File(\"/\", \"public/index.html\")\n        e.File(\"/style.css\", \"public/style.css\")\n        e.File(\"/app.js\", \"public/app.js\")\n        e.GET(\"/simulate\", simulate)\n        \n        // Start server\n        e.Logger.Fatal(e.Start(\":9000\"))\n    }\n```\n\nThe `graph.go` file is the main entry point of our backend server so this is where we import all the packages we previously pulled in. We import the `time` package because we will need it to create a new ticker for our custom `setInterval` function. We import the `math/rand` package because it provides the [pseudorandom number generation.](http://en.wikipedia.org/wiki/Pseudorandom_number_generator)\n\nNext, registered a new Pusher client with the credentials from the app we created earlier.\n\n\n\u003e  ⚠️  Replace `PUSHER_*`  keys with your app credentials.\n\nWe also created a `visitsData` type, which is a struct with two fields:\n\n\n- `Pages` - this is the number of pages visited at a given time\n- `Count` - this is the user count at a given time\n\nWe defined the main function (this is where the application starts its execution) and created a new echo instance.\n\nIn this application, because we will serve the static files that define our frontend from the backend server, we need to let Go know about them and their location. In the main function, we registered the routes that will serve these static files that we will create shortly.\n\nWe also defined a “/simulate” route that takes a `simulate` handler function and responds to the `GET` HTTP verb. Lastly, we instruct the echo instance we created to start the application and listen on the port 9000.\n\nLet’s create the `simulate` function, before the start of the main function paste the following code:\n\n``` go\n    // [...]\n    \n    // -------------------------------------------------------\n    // Simulate multiple changes to the visitor count value,\n    // this way the chart will always update with different\n    // values.\n    // -------------------------------------------------------\n    \n    func simulate(c echo.Context) error {\n        setInterval(func() {\n            s1 := rand.NewSource(time.Now().UnixNano())\n            r1 := rand.New(s1)\n            newVisitsData := visitsData{\n                Pages:   r1.Intn(100),\n                Count: r1.Intn(100),\n            }\n            client.Trigger(\"visitorsCount\", \"addNumber\", newVisitsData)\n        }, 2500, true)\n        \n        return c.String(http.StatusOK, \"Simulation begun\")\n    }\n    \n    // [...]\n```\n\nWithin the `simulate` function, we called a `setInterval` function and within it we seeded a new random number using the `time.Now()` function. We also instantiated a new `visitsData` object with the name `newVisitsData` and initialized both the `Pages` and `Count` fields using randomly generated numbers. We set the interval between running the logic to 2500ms.\n\nLastly, we use the `Trigger` method on the client object to broadcast an `addNumber` event over the `visitorsCount` channel.\n\nLet’s create the `setInterval` function before the `simulate` function paste the following code:\n\n``` go\n    func setInterval(ourFunc func(), milliseconds int, async bool) chan bool {\n    \n        // How often to fire the passed in function in milliseconds\n        interval := time.Duration(milliseconds) * time.Millisecond\n        \n        // Setup the ticker and the channel to signal\n        // the ending of the interval\n        ticker := time.NewTicker(interval)\n        clear := make(chan bool)\n        \n        // Put the selection in a go routine so that the for loop is none blocking\n        go func() {\n            for {\n                select {\n                case \u003c-ticker.C:\n                    if async {\n                        // This won't block\n                        go ourFunc()\n                    } else {\n                        // This will block\n                        ourFunc()\n                    }\n                case \u003c-clear:\n                    ticker.Stop()\n                    return\n                }\n            }\n        }()\n        \n        // We return the channel so we can pass in\n        // a value to it to clear the interval\n        return clear\n    }\n```\n\nUsing [Goroutines](https://golangbot.com/goroutines/) and Channels, we have created a `setInterval` function that works like the one in JavaScript. For its parameters, it receives the function to be called after an interval, the interval and a boolean value that determines if it runs asynchronously or not.\n\n\n## Building the frontend\n\nIn this step, we will use the received data from the backend server to represent a mathematical graph. To achieve this, we can use any of the open source libraries that support chart types, such as bar charts, pie charts, line charts and scatter charts. Here are links to a few of the popular libraries:\n\n\n- [Highcharts](http://www.highcharts.com/)\n- [Chart.js](http://www.chartjs.org/) \n- [Google Charts](https://developers.google.com/chart/)\n- [Flot](http://www.flotcharts.org/) \n- [D3 JS](http://d3js.org/) \n\nIn this tutorial, we will use Chart.js; it has a fairly simple API and renders robust charts using the HTML canvas tag. It is also able to update the chart without completely re-rendering it and this is what we need since we will be rendering Pusher updates.\n\nTo start building the frontend of our application, we will create a `public` folder in our working directory and create three files within it: \n\n```\n    $ mkdir public\n    $ cd public\n    $ touch index.html style.css app.js\n```\n\nOpen the `index.html` file and update it with the following code:\n\n``` html\n    \u003c!DOCTYPE\u003e\n    \u003chtml\u003e\n      \u003chead\u003e\n          \u003ctitle\u003eRealtime User Analytics\u003c/title\u003e\n          \u003clink rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Raleway:200\"\u003e\n          \u003clink rel=\"stylesheet\" href=\"./style.css\"\u003e\n          \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" integrity=\"sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb\" crossorigin=\"anonymous\"\u003e\n          \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n      \u003c/head\u003e\n    \n      \u003cbody\u003e\n      \n          \u003csection class=\"subheader\"\u003e\n              \u003ch2\u003eRealtime User Traffic Analytics\u003c/h2\u003e\n              \u003cbutton id=\"getUpdates\" class=\"btn-primary\"\u003e Simulate user visits\u003c/button\u003e\n          \u003c/section\u003e\n          \n          \u003csection width=\"500px\" style=\"margin:0 auto;width: 100%;max-width: 800px\"\u003e    \n              \u003ccanvas id=\"realtimeChart\"\u003e\u003c/canvas\u003e\n          \u003c/section\u003e\n          \n          \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.bundle.min.js\"\u003e\u003c/script\u003e\n          \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n          \u003cscript src=\"https://unpkg.com/axios/dist/axios.min.js\"\u003e\u003c/script\u003e\n          \u003cscript type=\"text/javascript\" src=\"./app.js\"\u003e\u003c/script\u003e\n          \n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the scripts part of the markup above, we pulled in the JavaScript Pusher library, [Axios](https://www.npmjs.com/package/axios), and Chart.js.\n\nIn order to style our app properly, add the following CSS into the `style.css` file the public folder:\n\n``` css\n    body{\n        margin:0;\n        padding:0;\n        font-family: Raleway;\n    }\n    \n    header{\n        background: #2b303b;\n        height: 50px;\n        width:100%;\n        display: flex;\n        color:#fff;\n    }\n    \n    .subheader{\n        margin: 20px;\n        text-align: center;\n    }\n```\n\n## Displaying realtime graph updates using Pusher\n\nIn this section, we will write the vanilla JavaScript code that will receive updates from Pusher and update the graph accordingly. We will achieve this behavior by subscribing to the unique channel where our server will be sending update events for the graph. The name of this channel is `visitorsCount` and the event we will be binding to is called `addNumber`.\n\nBecause we want to control when the realtime updates start, we will use JavaScript to target the button element — simulate user visits —  in the markup and attach an `eventListener`, so that the updates only start coming in when we click the button. When the button is clicked, our frontend will make a `GET` request, using Axios, to the “/simulate” endpoint on our backend server and the realtime updates will start.\n\nWe will also instantiate a new line chart object passed in a `chartConfig` object as an argument, this `chartConfig` object will supply the data that will define the line chart’s properties.\n\nOpen the `app.js` file and update it with the following code:\n\n``` javascript\n    document.getElementById(\"getUpdates\").addEventListener(\"click\", function(){\n        axios.get('/simulate')\n    })\n    \n    const pusher = new Pusher('PUSHER_APP_KEY', {\n        cluster: 'PUSHER_APP_CLUSTER',\n        encrypted: true\n    });\n    \n    const channel = pusher.subscribe('visitorsCount');\n    \n    channel.bind('addNumber', data =\u003e {\n      if (newLineChart.data.labels.length \u003e 15) {\n        newLineChart.data.labels.shift();  \n        newLineChart.data.datasets[0].data.shift();\n      }\n    \n      newLineChart.data.labels.push(data.Count);\n      newLineChart.data.datasets[0].data.push(data.Pages);\n      newLineChart.update();\n    });\n    \n    function renderChart(userVisitsData) {\n      var ctx = document.getElementById(\"realtimeChart\").getContext(\"2d\");\n      \n      var options = {};\n      \n      newLineChart = new Chart(ctx, {\n        type: \"line\",\n        data: userVisitsData,\n        options: options\n      });\n    }\n    \n    var chartConfig = {\n      labels: [],\n      datasets: [\n         {\n            label: \"Realtime User Analytics\",\n            fill: false,\n            lineTension: 0.1,\n            backgroundColor: \"rgba(75,192,192,0.4)\",\n            borderColor: \"rgba(75,192,192,1)\",\n            borderCapStyle: 'butt',\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: 'miter',\n            pointBorderColor: \"rgba(75,192,192,1)\",\n            pointBackgroundColor: \"#fff\",\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n            pointHoverBorderColor: \"rgba(220,220,220,1)\",\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            data: [],\n            spanGaps: false,\n         }\n      ]\n    };\n    \n    renderChart(chartConfig)\n```\n\n\u003e  ⚠️  Replace `PUSHER_APP_*`  keys with your app credentials.\n\n\n## Running the application\n\nWe can run our application with this command:\n\n```\n    $ go run graph.go\n```\n\nWe can now point our web browser to this address http://localhost:9000, at first, the graph in the window will be static but after we click on the **Simulate users visit** button, we will see this the realtime updates:\n\n![go-live-graph-demo](//images.ctfassets.net/1es3ne0caaid/1xM5LHTn2MYQmyO24M84WI/61af7ff9f8449a3a2c258628b99bea4a/go-live-graph-demo.gif)\n\n## Conclusion\n\nIn this article, we have discussed the importance of data in today’s tech world and gone over the process of building a realtime monitoring system using Go and Pusher channels. In addition to that, we used Vanilla JavaScript to build the frontend of our application and hit an endpoint on our Go web server using Axios.\n\nThe source code to the application is available on [GitHub](https://github.com/neoighodaro/pusher-go-realtime-graph).","metaTitle":"Create a live graph with Go","metaDescription":"Use Go and JavaScript to create a simple live graph. The graph updates in realtime as it receives new data."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"60CR8KRc2IA8o8IqCWUosQ","type":"Entry","createdAt":"2018-07-02T13:14:33.936Z","updatedAt":"2020-06-19T11:09:48.081Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Implement geofencing in Ionic","url":"geofencing-ionic","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/HackAfro/ionic-geofence-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2ogfivX0dSCcEuKkCOwAKe","type":"Entry","createdAt":"2018-02-12T14:50:39.667Z","updatedAt":"2018-02-26T12:31:15.529Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Cordova","url":"cordova","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-06-29","description":"Build a geofencing app for mobile using Ionic and Google Maps. Ionic is an open source SDK for developing native web apps. Admin users will be notified when a user exits a defined area.","prerequisite":"You will need Node and npm installed on your machine. A basic understanding of Angular, TypeScript and Ionic will be helpful.","content":"## Introduction\n\nA **geo-fence** is a virtual perimeter for a real-world geographic area. Geofencing is the use of GPS or RFID technology to create a virtual geographic boundary, enabling software to trigger a response when a mobile device enters or leaves a particular area. \n\nUsing [Ionic](https://ionicframework.com/), you can create a mobile application using web technologies and use a wide array of existing components. Using [Pusher](https://pusher.com), we can enable realtime functionalities in the application using Pusher’s pub/sub pattern. \n\nWe’ll be building a realtime location tracker application using Pusher, Ionic and the Google Maps library. Using the application, admin users will be notified when a user exits a predefined geofence. When this happens, the admin user receives a notification containing the user’s current location\n\nHere’s a demo of the final product:\n\n![ionic-geofence-demo](//images.ctfassets.net/1es3ne0caaid/16YJyTIcJY2U24gQIk6OkM/bfb4d451e5d968578686b7cac3fbc8ba/ionic-geofence-demo.png)\n\n## Prerequisites\n\nTo follow this tutorial a basic understanding of [Angular](https://angular.io), Ionic and Node.js is required. Please ensure that you have Node and npm installed before you begin.\n\nWe’ll be using these tools to build out our application:\n\n- [Express](https://expressjs.com/) \n- [Node](https://nodejs.org/en/)\n- [Pusher](https://pusher.com)\n- [Ionic](https://ionicframework.com/)\n- [Google Maps](https://cloud.google.com/maps-platform/)\n\nWe’ll be sending messages to the server and using [Pusher’s](https://pusher.com) pub/sub pattern, we’ll listen to and receive messages in realtime. To make use of Pusher you’ll have to create an account [here](https://pusher.com). \n\nAfter account creation, visit the dashboard. Click **Create new Channels app**, fill out the details, click **Create my app**, and make a note of the details on the **App Keys** tab.\n\n\nLet’s build!\n\n## Setup and folder structure\n\nWe’ll initialize our project using the Ionic CLI (command line interface). First, install the CLI by running `npm install -g ionic` in your terminal. [NPM](https://www.npmjs.com/) is a package manager used for installing packages. It will be available on your PC if you have [Node](https://nodejs.org/) installed.\n\nTo create a new Ionic project called `geofence``-app` using the CLI, open a terminal and run:   \n\n```\n    ionic start geofence-app tabs\n```\n\nThe command uses the CLI to create a new project using the tabs template. Follow the prompt and integrate your app with Cordova to target IOS and Android.\n\n![ionic-geofence-integrate-cordova](//images.ctfassets.net/1es3ne0caaid/1IUUkS2jWEsGkaoC0ImGA0/a4419e24c715605029dc1edc7a6a60d5/ionic-geofence-integrate-cordova.png)\n\n Type **Y** to integrate Cordova into the application. The next prompt will ask if you want to integrate Ionic pro into the application. If you have an Ionic pro account, type **Y** and **N** if you don’t.\n\nThe Ionic team provides three ready made starter templates. You can check out the rest of the templates [here](https://ionicframework.com/getting-started).\n\nIf you don’t have Cordova installed on your PC, install it by running the following command:\n\n```\n    npm install -g cordova\n```\n\nOpen the newly created folder, your folder structure should look something like this:\n\n```\n    geofence-app/\n      resources/\n      node_modules/\n      src/\n        app/\n          app.component.html\n          app.module.ts\n          app.scss\n          ...\n        assets/\n          ...\n        pages/\n          home/\n          about/\n          ...\n```\n\nOpen a terminal inside the project folder and start the application by running `ionic serve`. A browser window should pop up and you should see screenshot below.\n\n![ionic-geofence-starter](//images.ctfassets.net/1es3ne0caaid/WmvVlyOTE2YeW0IMuSsIe/c4228b1e7aa22077fab6c15abd2513a1/ionic-geofence-starter.png)\n\n## Installing dependencies\n\nNext, run the following commands in the root folder of the project to install dependencies.\n\n```\n    // install depencies required to build the server\n    npm install express body-parser dotenv pusher sentiment uuid \n    \n    // front-end dependencies\n    npm install pusher-js @types/pusher-js @agm/core\n```\n\n## Building our server\n\nNow that we have our application running, let’s build out our server.\n\nTo do this we’ll make user of [Express](https://expressjs.com). Express is a fast, unopinionated, minimalist web framework for [Node.js](https://nodejs.org/en/). We’ll use this to receive requests from our Angular application.\n\nCreate a file called `server.js` in the root of the project and update it with the code snippet below:\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```    \n\nWe referenced three packages in the snippet above, `body-parser`, `pusher` and `dotenv`. Let’s get into what each one does.\n\n\n-  body-parser is a package used to parse incoming request bodies in a middleware before your handlers, available under the `req.body` property.\n- dotenv is a zero-dependency module that loads environment variables from a `.env` file into `[process.env](https://nodejs.org/docs/latest/api/process.html#process_process_env)`. This package is used so sensitive information like the `appId` and `secret` aren’t added to our codebase directly. \n- The dotenv package will load the variables provided in our `.env` file into our environment.\n\nThe `dotenv` package should always be initialized very early in the application at the top of the file. This is because we need the environment variables available throughout the application.\n\nThe calls to our endpoint will be coming in from a different origin, therefore we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\nAlso, you’ll notice that we installed [Pusher](https://pusher.com) library as a dependency. Visit the [Pusher](https://pusher.com) website to create a Pusher account if you haven’t done so already.\n\nCreate a `.env` file to load the variables we’ll be needing into the Node environment. The file should be in the root folder of your project. Open the file and update it with the code below.\n\n```\n    // .env\n    \n    PUSHER_APP_ID=\u003cAPP_ID\u003e\n    PUSHER_KEY=\u003cPUSHER_KEY\u003e\n    PUSHER_SECRET=\u003cPUSHER_SECRET\u003e\n    PUSHER_CLUSTER=\u003cPUSHER_CLUSTER\u003e\n```\n\n\u003e **P.S:** Please ensure you replace the placeholder values above with your Pusher `appId`, `key`, `secret` and `cluster`.\n\n\nThis is a standard Node application configuration, nothing specific to our app.\n\n### Realtime location updates\n\nTo enable users send in their current receive messages, we’ll create a route to handle incoming requests. Update your `server.js`  file with the code below.\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: process.env.PUSHER_CLUSTER,\n      encrypted: true,\n    });\n    \n    ...\n    \n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    \n    app.post('/ping', (req, res) =\u003e {\n      const { lat, lng } = req.body;\n      const data = {\n        lat,\n        lng,\n      };\n      pusher.trigger('location', 'ping', data);\n      res.json(data);\n    });\n     ...\n```\n\n- We created a `POST /ping` route which, when hit, triggers a Pusher event.\n- We used [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) to get the body of the request, we also got the `lat` and `lng` in the request body sent by the user.\n- The `data` object will contain the `lat` and `lat` sent by the user. \n-  The trigger is achieved using the `trigger` method which takes the trigger identifier(`location`), an event name (`ping`) and a payload(`data`).\n- The payload can be any value, but in this case, we have a JS object.\n- The response will contain the `data` object.\n\n\n### Geofence updates\n\nWe’ll need another route to notify admin users when a user leaves their defined geofence. Let’s create a  `POST /notify` route to handle incoming updates on the user’s geofence status. Update the `server.js` file to include the new route.\n\n``` javascript\n    //server.js\n    \n    ...\n    app.post('/ping', (req, res) =\u003e {\n      ...\n    });\n    \n    app.post('/notify', (req, res) =\u003e {\n      const { lat, lng } = req.body;\n      const data = {\n        lat,\n        lng,\n      };\n      pusher.trigger('geofence', 'exit', data);\n      res.json(data);\n    });\n    \n    ...\n```\n\n\nYou can now start the server by running `node server.js` in a terminal in the root folder of the project.\n\n\n## Home page\n\nLet’s build out the home page for our application. We’ll be creating two pages for this project, the home page and the admin page. Typically, the admin page would have been a separate application but in this context, we’ll limit it to just a page on this project.\n\nSince we’re using a starter template, we already have some pages created in the `pages` directory. \nWe’ll edit and refactor the `home`  page to suit our needs. The `home` page will display the user’s current location on the map using a marker and a string of containing the user’s formatted address. Open the `home.html` file and replace the contents with the snippet below:\n\n``` html\n    \u003c!-- home.html --\u003e\n    \n    \u003cion-header\u003e\n      \u003cion-navbar\u003e\n        \u003cion-title\u003eHome\u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \u003cion-content\u003e\n      \u003cmap [center]=\"center\" [zoom]=\"zoom\"\u003e\n      \u003c/map\u003e\n      \u003cdiv class=\"location-address\"\u003e\n        \u003cp\u003e{{address}}\u003c/p\u003e\n        \u003ch4\u003e{{state}}\u003c/h4\u003e\n      \u003c/div\u003e\n    \u003c/ion-content\u003e\n```\n\nWe’ve referenced a `map` component that hasn’t been created, we’ll get to creating it but before then let’s add some styles to the `home.scss` file. Open the file and copy the following content into it:\n\n``` scss\n    // home.scss\n    \n    page-home {\n      ion-content {\n        position: relative;\n        agm-map {\n          height: 100%;\n          width: 100%;\n        }\n        .location-address {\n          width: 100%;\n          border-top-left-radius: 15px;\n          border-top-right-radius: 15px;\n          box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2);\n          background: white;\n          position: absolute;\n          bottom: 0;\n          left: 0;\n          padding: 0 23px 10px;\n          p{\n            font-size: 20px;\n            opacity: .7;\n            font-weight: bold;\n            letter-spacing: .2px;\n            margin-bottom: 4px;\n          }\n          h4{\n            font-size: 14px;\n            opacity: 0.4;\n            font-weight: 500;\n            margin: 0;\n          }\n        }\n      }\n    }\n```\n\n\n\nUpdate the `home.ts` file below to be similar to the snippet below:\n\n``` typescript\n    import { Component, OnInit } from '@angular/core';\n    import { NavController, Platform } from 'ionic-angular';\n    import { MapsAPILoader } from '@agm/core';\n    import { HttpClient } from '@angular/common/http';\n    \n    declare const google;\n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html',\n    })\n    export class HomePage implements OnInit {\n      constructor(\n        public navCtrl: NavController,\n        private loader: MapsAPILoader,\n        private http: HttpClient,\n      ) {\n      \n      }\n      center = {\n        lat: 6.4393477,\n        lng: 3.5244628999999996,\n      };\n      zoom = 15;\n      address = '';\n      state = '';\n      \n      pingLocation(location) {\n        this.http\n          .post('http://localhost:4000/ping', location)\n          .subscribe((res) =\u003e {});\n      }\n      notify(location) {\n        this.http\n          .post('http://localhost:4000/notify', location)\n          .subscribe((res) =\u003e {});\n      }\n      \n      ngOnInit() {\n        this.loader.load().then(() =\u003e {\n          this.pingLocation(this.center);\n        });\n      }\n    }\n```\n\n\n### Realtime location updates\n\nWe’ll be updating the user’s location in realtime and also sending live location data of the user to the server. For this we’ll be using the native Geolocation API by ionic. The API will watch the user’s current position and update the marker on the map. \n\nFirst, we'll install the Geolocation plugin. Run the following commands to add the plugin to your project.\n\n```\n    ionic cordova plugin add cordova-plugin-geolocation --variable GEOLOCATION_USAGE_DESCRIPTION=\"To locate you\"\n    npm install --save @ionic-native/geolocation\n```\n\nUpdate the `home.ts` file with the snippet below:\n\n``` typescript\n    // home.ts\n    ...\n    import { MapsAPILoader } from '@agm/core';\n    import { Geolocation } from '@ionic-native/geolocation';\n    ...\n    export class HomePage implements OnInit{\n      constructor(\n        ...\n        private platform: Platform,\n        private geolocation: Geolocation\n      ){};\n      ...\n      notify(location) {\n        ...\n      }\n      reverseGeocode(latLng) {\n        const geocoder = new google.maps.Geocoder();\n        geocoder.geocode({ location: latLng }, (results, status) =\u003e {\n          if (status === 'OK') {\n            if (results[0]) {\n              const address = results[0].formatted_address;\n              const addressList = address.split(',');\n              this.address = addressList[0];\n              this.state = addressList.slice(2).join(', ');\n            }\n          }\n        });\n      }\n    \n      ngOnInit(){\n        this.loader.load().then(() =\u003e {\n          this.reverseGeocode(this.center);\n          this.pingLocation(this.center);\n        });\n        this.platform.ready().then(() =\u003e {\n          if (this.platform.is('cordova')) {\n            const watch = this.geolocation.watchPosition();\n            watch.subscribe((position) =\u003e {\n              const positionEmpty = Object.keys(position).length \u003c 1;\n              if (!positionEmpty) {\n                this.center = {\n                  lat: position.coords.latitude,\n                  lng: position.coords.longitude,\n                };\n                this.reverseGeocode(this.center);\n                this.pingLocation(this.center);\n              }\n            });\n          }\n        });\n      }\n    }\n```\n\n    \n\nIn the snippet above, we added a new method to the `HomePage` component. The `reverseGeocode` method uses the Google Maps `Geocoder` API to reverse geocode coordinates to addresses. In the function we split the `formatted_address` property getting the `short_name`, `state` and `country`.\n\nThe `ngOnInit` lifecycle got an update. First we reverse geocoded the current address after the Google Maps script has been loaded. We then check if the platform is [Cordova](https://cordova.apache.org/) supported. If it is, we initialize the geolocation API to watch the user's location, subscribing to the `watch` variable initiates the process. When the user's location is returned, we reverse geocode the coordinates to get the address, then we send the coordinates to the server.\n\nAfter this update, you should get an error that the `Geolocation` and `HttpClient` providers haven't been registered. To clear this error, we'll register the these providers in the `app.module.ts` file. Open the file and add them to the list of providers.\n\n``` typescript\n    // app.module.ts\n    \n    ...\n    import { SplashScreen } from '@ionic-native/splash-screen';\n    import { Geolocation } from '@ionic-native/geolocation';\n    import { HttpClientModule, HttpClient } from '@angular/common/http';\n    \n    @NgModule({\n      ...\n      imports: [\n        ...\n        HttpClientModule\n      ],\n      ...\n      providers: [\n        ...\n        Geolocation,\n        HttpClient,\n      ],\n    })\n    export class AppModule {}\n```\n\n\n### Setting up geofences\n\nTo set up geofences for the user, we'll make use of the native Geofence Ionic API. Install this plugin by running the following commands in a terminal in the root folder of your project.\n\n```\n    ionic cordova plugin add cordova-plugin-geofence\n    \n    npm install --save @ionic-native/geofence\n```\n\nThe next step is to use the Geofence provider in the `HomePage` component. Open the `home.ts` file and update it like so:\n\n``` typescript\n    // home.ts\n    ...\n    import { HttpClientModule, HttpClient } from '@angular/common/http';\n    import { Geofence } from '@ionic-native/geofence';\n    import { v4 } from 'uuid';\n    ...\n    export class HomePage implements OnInit {\n      constructor(\n        ...\n        private geofence: Geofence\n      ){\n        if (this.platform.is('cordova')) {\n          this.platform.ready().then((_) =\u003e {\n            geofence.initialize().then((_) =\u003e {\n              console.log('Geofence Plugin Ready');\n            });\n          });\n        }\n      }\n    \n      ...\n      private createGeofence() {\n        let fence = {\n          id: v4(), //any unique ID\n          latitude: this.center.lat, //center of geofence radius\n          longitude: this.center.lng,\n          radius: 1000, //radius to edge of geofence in meters\n          transitionType: 2,\n        };\n        this.geofence\n          .addOrUpdate(fence)\n          .then(\n            () =\u003e console.log('Geofence added'),\n            (err) =\u003e console.log('Geofence failed to add', err)\n          );\n        this.geofence.onTransitionReceived().subscribe((res) =\u003e {\n          this.notify(this.center);\n        });\n      }\n      ngOnInit(){\n        this.loader.load().then(() =\u003e {\n          ...\n        });\n        this.platform.ready().then(() =\u003e {\n          if (this.platform.is('cordova')) {\n            this.createGeofence();\n            const watch = this.geolocation.watchPosition();\n            ...\n          }\n        });\n      }\n    }\n```\n\nFirst we check if the platform is supported by Cordova and if the platform is ready. Then we initialize the `Geofence` provider in the `constructor`. In the `createGeofence` method, we define a `fence` object. The `id`, `latitude`, `longitude` and `radius` properties are kind of self explanatory. The `transitionType` is one of three possible types. A geofence has three transition types:\n\n  \n\n1. Enter\n2. Leave\n3. Both\n\n  \n\nEach type is represented by accordingly by the numbers 1, 2 and 3. Next, we call the `addOrUpdate` method of the geofence provider, the method takes in the `fence` object we created.\nWe'll be listening for the transition type of `leave`, which means we should get notified when the user leaves the set geofence. \n\nUpdating the `ngOnInit` lifecycle to call the `createGeofence` method ensures that the geofence is created once the component is initialized. Include the `Geofence` provider in the module file to prevent the app from throwing errors. Add the `Geofence` to the list of providers in the `app.module.ts` file.\n\n``` typescript\n    // app.module.ts\n    ...\n    import { HttpClientModule, HttpClient } from '@angular/common/http';\n    import { Geofence } from '@ionic-native/geofence';\n    @NgModule({\n      ...\n      providers: [\n        StatusBar,\n        SplashScreen,\n        { provide: ErrorHandler, useClass: IonicErrorHandler },\n        Geolocation,\n        HttpClient,\n        Geofence,\n      ],\n    })\n    export class AppModule {}\n```\n\n\n## Setting up the map component\n\nWe referenced an uncreated `map` component in the `home.html` file. Create a `components` folder in the `src` directory. Within it, create a `map`  folder with three files in it. `map.ts`, `map.html` and `map.scss`.\n\nFor the map component, we'll be using components provided by the [angular-google-maps](https://angular-maps.com/) library. Let's register the angular-google-maps module and the new map component in the `app.module.ts` file. Open the `app.module.ts` file and update the `imports` and `declarations` properties.\n\n``` typescript\n    // app.module.ts\n    ...\n    import { Geofence } from '@ionic-native/geofence';\n    import { AgmCoreModule } from '@agm/core';\n    import { MapComponent } from '../components/map/map';\n    @NgModule({\n      declarations: [\n        ...\n        MapComponent\n      ],\n      imports: [\n        ...\n        AgmCoreModule.forRoot({\n          // please add your own API key here: https://developers.google.com/maps/documentation/javascript/get-api-key?hl=en\n          apiKey: 'GOOGLE_API_KEY',\n          libraries: ['geometry'],\n        }),\n      ],\n     ...\n    })\n    export class AppModule {}\n```\n\nNow, open the `map.html` file and copy the content below into it:\n\n``` html\n    \u003c!-- map.html --\u003e\n    \u003cagm-map [latitude]=\"center.lat\" [longitude]=\"center.lng\" [zoom]=\"zoom\"\u003e\n      \u003cagm-marker [latitude]=\"center.lat\" [longitude]=\"center.lng\" [iconUrl]=\"'assets/imgs/user.svg'\"\u003e\u003c/agm-marker\u003e\n      \u003cagm-circle [latitude]=\"radiusCenter.lat\" [longitude]=\"radiusCenter.lng\" [radius]=\"500\" [fillColor]=\"'#ADC1B9'\"\u003e\u003c/agm-circle\u003e\n    \u003c/agm-map\u003e\n```\n\n\u003e **P.S**: All assets used in the project are available on [GitHub](https://github.com/HackAfro/ionic-geofence-app)\n\nNext, let's update the `map.scss` file to feature styles for the component:\n\n``` scss\n    // map.scss\n    map {\n      agm-map{\n        width: 100%;\n        height: 100%;\n      }\n    }\n```\n\nThat's it. Pretty straightforward. Let's define the missing variables for the map component in the `map.ts` file.\n\n``` typescript\n    // map.ts\n    import { Component, Input } from '@angular/core';\n    /**\n     * Generated class for the MapComponent component.\n     *\n     * See https://angular.io/api/core/Component for more info on Angular\n     * Components.\n     */\n    @Component({\n      selector: 'map',\n      templateUrl: 'map.html',\n    })\n    export class MapComponent {\n      text: string;\n      constructor() {}\n      @Input()\n      center = {\n        lat: 6.435838,\n        lng: 3.451384,\n      };\n      @Input() zoom = 15;\n      radiusCenter = {\n        lat: 6.435838,\n        lng: 3.451384,\n      }\n    }\n```\n\nThe map component will feature two inputs, `center` and `zoom`. The `center` input will set the center of the map and the `zoom` will do the same. Pretty self-explanatory. The `radiusCenter` will be used to define the circle drawn on the map, displaying the geofence set up. Below is a screenshot of the home page after all the changes made.\n\n![ionic-geofence-home-1](//images.ctfassets.net/1es3ne0caaid/5EISWY5Y5yMOQkgQ6k2qKU/e4b4c7c63908ea59c01f0f37887c068d/ionic-geofence-home-1.png)\n\n## Introducing Pusher and updating location in realtime\n\nSo far we have an application that allows users to send location data but the location isn’t updated in realtime. To solve this problem, we’ll include the [Pusher](https://pusher.com) library.\n\nLet’s create a Pusher service to be used application wide. The Angular CLI can aid in the service creation.  Open a terminal in your project’s root folder and run the following command.\n\n```\n    ionic generate provider pusher\n```\n\nThis command simply tells the CLI to generate a provider named `pusher` . Now open the `pusher.ts` file in the `src/providers/pusher`  directory and update it with the code snippet below:\n\n\n``` typescript\n    // src/providers/pusher/pusher.ts\n    \n    import { Injectable } from '@angular/core';\n    import Pusher from 'pusher-js';\n    \n    @Injectable()\n    export class PusherProvider {\n      constructor() {\n        this.pusher = new Pusher('PUSHER_KEY', {\n          cluster: 'PUSHER_CLUSTER',\n          encrypted: true,\n        });\n      }\n      pusher;\n    \n      public init(channelName) {\n        const channel = this.pusher.subscribe(channelName);\n        return channel;\n      }\n    }\n```\n\n\n\n- First, we initialize Pusher in the constructor. \n- The  `init` method returns the Pusher property we created. \n\n\n\u003e **Note:** Ensure you replace the `PUSHER_KEY` and `PUSHER_CLUSTER` string with your actual Pusher credentials.\n  \n\n\n## Admin page\n\nThe admin page will feature two segments, `location` and `notifications`. The location segment will display the user's current location at any particular time. Create the admin page using the CLI by running the following command:\n\n```\n    ionic generate page admin\n```\n\nYou’ll find the `admin` page generated in the `pages` folder. Open the `admin.html` file and copy the code below into it:\n\n``` html\n    \u003c!-- admin.html --\u003e\n    \n    \u003cion-header\u003e\n      \u003cdiv padding\u003e\n        \u003cion-segment [(ngModel)]=\"tab\"\u003e\n          \u003cion-segment-button value=\"location\"\u003e\n            Position\n          \u003c/ion-segment-button\u003e\n          \u003cion-segment-button value=\"notifications\"\u003e\n            Notifications\n          \u003c/ion-segment-button\u003e\n        \u003c/ion-segment\u003e\n      \u003c/div\u003e\n    \u003c/ion-header\u003e\n    \u003cion-content\u003e\n      \u003cdiv [ngSwitch]=\"tab\" style=\"height: 100%\"\u003e\n        \u003cdiv *ngSwitchCase=\"'location'\" style=\"height: 100%\"\u003e\n          \u003cmap [center]=\"center\"\u003e\u003c/map\u003e\n        \u003c/div\u003e\n        \u003cdiv *ngSwitchCase=\"'notifications'\" class=\"notifications-holder\"\u003e\n          \u003ch4 class=\"no-notifications\" *ngIf=\"!notifications.length\"\u003eNo notifications to display\u003c/h4\u003e\n          \u003cion-list *ngIf=\"notifications.length\"\u003e\n            \u003cion-item *ngFor=\"let notification of notifications\"\u003e\n              \u003cion-thumbnail item-start\u003e\n                \u003cion-icon name=\"person\"\u003e\u003c/ion-icon\u003e\n              \u003c/ion-thumbnail\u003e\n              \u003ch2\u003e{{notification.header}}\u003c/h2\u003e\n              \u003cp\u003e{{notification.body}}\u003c/p\u003e\n            \u003c/ion-item\u003e\n          \u003c/ion-list\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/ion-content\u003e\n```\n\nStyle up the page by copying the following styles into the `admin.scss` file.\n\n``` scss\n    agm-map {\n      width: 100%;\n      height: 100%;\n    }\n    ion-thumbnail {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      background: #adc1b9;\n      border-radius: 50%;\n      ion-icon {\n        font-size: 2.2em;\n        color: whitesmoke;\n      }\n    }\n    .no-notifications {\n      font-size: 14px;\n      color: deepskyblue;\n      text-transform: uppercase;\n      text-align: center;\n    }\n```\n\n\nLet’s update the `admin.ts` file to include the variables we used in the HTML file:\n\n``` typescript\n    // admin.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { NavController } from 'ionic-angular';\n    import { PusherProvider } from '../../providers/pusher/pusher';\n    import { Platform } from 'ionic-angular';\n    import { PhonegapLocalNotification } from '@ionic-native/phonegap-local-notification';\n    \n    declare const google;\n    \n    @Component({\n      selector: 'page-admin',\n      templateUrl: 'admin.html',\n    })\n    \n    export class AdminPage implements OnInit {\n      constructor(\n        public navCtrl: NavController,\n        private pusher: PusherProvider,\n        private platform: Platform,\n        private localNotification: PhonegapLocalNotification\n      ) {\n        if (platform.is('cordova')) {\n          platform.ready().then((_) =\u003e {\n            this.localNotification.requestPermission().then((perm) =\u003e {\n              if (perm === 'granted') this.permissionGranted = true;\n            });\n          });\n        }\n      }\n      tab = 'location';\n      notifications = [];\n      center = {\n        lat: 6.435838,\n        lng: 3.451384,\n      };\n      permissionGranted = false;\n      address = '';\n      reverseGeocode(latLng) {\n        const geocoder = new google.maps.Geocoder();\n        geocoder.geocode({ location: latLng }, (results, status) =\u003e {\n          if (status === 'OK') {\n            if (results[0]) {\n              const address = results[0].formatted_address;\n              const addressList = address.split(',');\n              this.address = addressList[0];\n            }\n          }\n        });\n      }\n      ngOnInit() {\n        const locationChannel = this.pusher.init('location');\n        const geofenceChannel = this.pusher.init('location');\n        locationChannel.bind('ping', (data) =\u003e {\n          this.center = {\n            ...data,\n          };\n        });\n        geofenceChannel.bind('exit', (data) =\u003e {\n          this.reverseGeocode(data);\n          if (this.permissionGranted) {\n            this.localNotification.create('Geofence exited', {\n              tag: 'message1',\n              body: 'User has exited the defined geofence',\n              icon: 'assets/imgs/user.svg',\n            });\n          }\n          const notification = {\n            header: 'User has exited the geofence',\n            body: `Current location: ${this.address}`,\n          };\n          this.notifications = this.notifications.concat(notification);\n        });\n      }\n    }\n```\n\n\nThe admin component will be displaying notifications in the notifications bar whenever a user leaves the set geofence. We’ll also have a notifications segment that will show a list of notifications over time.\n\nTo display notifications in the notifications bar, we’ll be using the [PhonegapLocalNotification](https://ionicframework.com/docs/native/phonegap-local-notification/) native API. Install it as a plugin by running the following commands.\n\n```\n    ionic cordova plugin add phonegap-plugin-local-notification\n    \n    npm install --save @ionic-native/phonegap-local-notification\n```\n\nIn the `ngOnInit` lifecycle, we list for two events `ping` and `exit` from Pusher. In the `ping` event callback we use the data returned to update the current position of the marker. When the `exit` event is called we trigger a notification using the `PhonegapLocalNotification`. A notification object is created containing a reverse geocoded address and appended to the notifications array.\n\nAfter creating the `admin` page, the next step is to register it in the `app.module.ts`  file and then add it to the `tabs` page. Update the `app.module.ts`  file and the `tabs` page to include the `admin` page and the `PhonegapLocalNotification` provider.\n\n``` typescript\n    // src/app/app.module.ts\n    \n    ...\n    import { AdminPage } from '../pages/admin/admin';\n    import { PhonegapLocalNotification } from '@ionic-native/phonegap-local-notification';\n    \n    @NgModule({\n      declarations: [\n        ...\n        AdminPage\n      ],\n      ...\n      providers: [\n        ...\n        PhonegapLocalNotification,\n      ],\n    })\n    export class AppModule {}\n```\n\n\nThen update the TabsPage to Include the AdminPage. Open the `tabs.html` file in the `src/pages/tabs` directory and replace the content with the code below:\n\n``` html\n    \u003c!-- tab.html --\u003e\n    \u003cion-tabs\u003e\n      \u003cion-tab [root]=\"tab1Root\" tabTitle=\"Home\" tabIcon=\"home\"\u003e\u003c/ion-tab\u003e\n      \u003cion-tab [root]=\"tab2Root\" tabTitle=\"Admin\" tabIcon=\"people\"\u003e\u003c/ion-tab\u003e\n    \u003c/ion-tabs\u003e\n```\n\n\nNext update the `tabs.ts` file and include the AdminPage:\n\n``` typescript\n    import { Component } from '@angular/core';\n    import { AdminPage } from '../admin/admin';\n    import { HomePage } from '../home/home';\n    @Component({\n      templateUrl: 'tabs.html',\n    })\n    export class TabsPage {\n      tab1Root = HomePage;\n      tab2Root = AdminPage;\n      constructor() {}\n    }\n```\n\n\n\nTo test the application on your mobile device, download the [IonicDevApp](https://ionicframework.com/docs/pro/devapp/) on your mobile device. Make sure your computer and your mobile device are connected to the same network. When you open the IonicDevApp, you should see Ionic apps running on your network listed. \n\n![ionic-geofence-in-app](//images.ctfassets.net/1es3ne0caaid/4Tto6qC43SyoeuuCwWk6kC/10b2fcce68e32c25cb8da5cfe7e635ad/ionic-geofence-in-app.png)\n\nTo view the application, click on it and you should see a similar view with what was on the browser. Sending messages to the server might have worked on the browser but localhost doesn’t exist on your phone, so we’ll need to create a proxy to be able to send messages from mobile. \n\n\n## Using Ngrok as a proxy\n\nTo create a proxy for our server, we’ll download Ngrok. Visit the [download](https://ngrok.com/download) page on the Ngrok website. Download the client for your OS. Unzip it and run the following command in the folder where Ngrok can be found:\n\n```\n    ./ngrok http 4000\n```\n\n![ionic-geofence-ngrok](//images.ctfassets.net/1es3ne0caaid/5xPwNwr4DmMCA6k0MaaIqo/d569c60667d1da3659409f57b9a52da5/ionic-geofence-ngrok.png)\n\nCopy the forwarding url with `https` and place it in the `home.ts` file that previously had `http://localhost:4000/ping` and `http://localhost:4000/notify`. Please do not copy mine from the screenshot above. \n\n``` typescript\n    // src/pages/home/home.ts\n    ...\n    export class HomePage implements OnInit {\n      ...\n      pingLocation() {\n        this.http\n            .post('\u003cNGROK_URL\u003e/ping', data)\n            .subscribe((res: Message) =\u003e {});\n      }\n      \n      notify(location) {\n        this.http\n          .post('\u003cNGROK_URL\u003e/notify', location)\n          .subscribe((res) =\u003e {});\n      }\n      ...\n    }\n    ...\n```\n\n\u003e Ensure to include the forwarding url you copied where the placeholder string is\n\n\n## Running on an emulator\n\nSince our application is making use of some native APIs, we’ll need to test it on an emulator. To run our app on an emulator, run any of the following commands depending on the platform you’re building for.\n\n```\n    // for IOS\n    ionic cordova emulate ios\n    \n    // for android\n    ionic cordova emulate android\n```\n\nTo build your application to deploy on either the AppStore or PlayStore, follow the instructions found [here](https://ionicframework.com/docs/pro/package/).\n\n## Conclusion\n\nUsing Ionic, Google Maps and Pusher, we’ve been able to create an application that offers realtime location tracking. We’ve also learnt how to create geofences using native APIs. You can view the source code for the demo [here](https://github.com/HackAfro/ionic-geofence-app).","metaTitle":"Implement geofencing in Ionic","metaDescription":"Create a geofencing app with Ionic and Google Maps. Ionic uses Angular and TypeScript along with Cordova. Admin users will be notified when a user exits a defined area."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1P2VLZvdti8Ue4Y0s0guW2","type":"Entry","createdAt":"2018-06-27T11:32:29.609Z","updatedAt":"2018-06-27T11:32:29.609Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live graph with Ember.js","url":"live-graph-emberjs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/yemiwebby/ember-realtime-graph","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"oh5mPeR5cGqMImEyKoWwQ","type":"Entry","createdAt":"2018-02-12T14:46:47.672Z","updatedAt":"2018-02-12T14:46:47.672Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ember.js","url":"ember-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6i1HPBqlwsE24YEKwqQyuq","type":"Entry","createdAt":"2018-02-12T15:09:31.050Z","updatedAt":"2018-02-26T12:31:11.548Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Graph","url":"realtime-graph","type":"use case"}}],"reviewDate":"2018-06-26","description":"Build a live interactive graph using Ember.js and Node.js. Users will be able to view the graph, watch it update in realtime as new data comes in, and interact with it to obtain additional information about the data.","prerequisite":"You will need Node and npm installed on your machine.","content":"## Introduction\n\nIn this post, we will build a simple interactive graph with Ember.js. With this, a user can have a better understanding of the data by hovering on a point and seeing more information using the hovering facility as depicted in the image below:\n\n![ember-interactive-graph-demo](//images.ctfassets.net/1es3ne0caaid/5K6ya96hMsUIUggimwe4WE/648c2640e62e765e5f595c8669071839/ember-interactive-graph-demo.gif)\n\n\n## Prerequisites\n\nIt is important that you have [Node.js](https://nodejs.org/en/) and [npm](https://www.npmjs.com/) installed on your machine. [Learn how to install Node.js and npm here](https://docs.npmjs.com/getting-started/installing-node). A quick run-down of the core technologies we will be using include:\n\n\n- [Ember.js](https://www.emberjs.com/): an open source JavaScript web framework for creating scalable single-page web applications.\n- [Pusher](https://pusher.com/): a [Node.js](http://nodejs.org/) client to interact with the Pusher REST API.\n- [Express](https://expressjs.com/): Node utility for handling HTTP requests via routes.\n\n\n## Getting started\n\nTo get started with an Ember application, it is recommended to use Ember CLI tool as this will enable you to conveniently craft a new app with a single command. You can install it with npm, open your terminal and type this command:\n\n```\n     npm install -g ember-cli\n```\n\nThe [Ember CLI](https://github.com/ember-cli/ember-cli) will give us access to the `ember` command that will be used to set up our project easily.\n\n\n## Creating the application\n\nWe now have access to the `ember new` command that can be used to create our application. Open up the terminal on your machine and run a command that will create an application named `ember-realtime-graph` in your project directory:\n\n```\n     ember new ember-realtime-graph\n```\n\nNext, change directory into the newly created project and start the development server:\n\n```\n     // change directory\n     cd ember-realtime-graph\n     \n     // start the development server\n     ember serve\n```\n\n\nThis will start the development server on http://localhost:4200. Open your favorite browser and navigate to that URL, you should see a default welcome page by Ember.js as shown below:\n\n![ember-start-page](//images.ctfassets.net/1es3ne0caaid/2Z3q7KbdrOEWGs8McO8gyC/86f812aacd929bbcd81e6a45873f91b6/ember-start-page.png)\n\n## Install server dependencies\n\nRun the following command to install the dependencies required for this project using:\n\n```\n    npm install --save pusher pusher-js chart.js\n    npm install --save dotenv express \n    ember install ember-browserify\n```\n\n## Setting up a Pusher application\n\nHead over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). \n\n![ember-pusher-signup](//images.ctfassets.net/1es3ne0caaid/2NeDEhMbuwYsECuqGyWCUE/646d9e28c3c1ecc1517361035836a8ec/ember-pusher-signup.png)\n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![ember-pusher-create-app](//images.ctfassets.net/1es3ne0caaid/5YHrOKL5AIQk6E2OiCIeMW/473f43255c5a820f1523387487884757/ember-pusher-create-app.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with to be provided with some boilerplate code:\n\n![ember-pusher-config-app](//images.ctfassets.net/1es3ne0caaid/38gUNRKzT2UuEcQIq2GgS6/d7ef41d5c3f3afb724373fd976caef4c/ember-pusher-config-app.png)\n\nYou can retrieve your keys from the **App Keys** tab:\n\n![ember-pusher-app-keys](//images.ctfassets.net/1es3ne0caaid/1QiXDu6gpy0CKQCosqgcgE/1ffc23a7859704465b1a9357c07151b5/ember-pusher-app-keys.png)\n\n\n## Setting the environment variables\n\nCreate a `.env` file in the root directory of your application and add your application credentials as obtained from your Pusher dashboard as follows:\n\n```\n      PUSHER_APP_ID=YOUR_APP_ID\n      PUSHER_APP_KEY=YOUR_APP_KEY\n      PUSHER_APP_SECRET=YOUR_APP_SECRET_KEY\n      PUSHER_APP_CLUSTER=CLUSTER\n```\n\nWe will make use of the variables specified in the above snippet later in our project. Ensure that you replace `YOUR_APP_ID`, `YOUR_APP_KEY`, `YOUR_APP_SECRET_KEY` and `CLUSTER` placeholders with the appropriate credentials.\n\n\n## Setting up the server\n\nTo properly demonstrate realtime update of our graph, we’ll make use of an existing dummy data of stock trades and price variations. For our Ember application to keep receiving this data at a specified regular interval, let’s quickly set up a simple server. \n\nCreate an `app.js`  file in the root directory of your application and add the following code snippet to it to set up the server:\n\n````javascript\n    // app.js\n    \n      const express = require('express');\n      const Pusher = require('pusher');\n      require('dotenv').config();\n      const stockData = require('./stock.json')\n        \n      const app = express();\n        \n      const pusher = new Pusher({\n        appId: process.env.PUSHER_APP_ID,\n        key: process.env.PUSHER_APP_KEY,\n        secret: process.env.PUSHER_APP_SECRET,\n        cluster: process.env.PUSHER_APP_CLUSTER,\n        encrypted: true\n      });\n      \n      let i = 0;\n      setInterval( () =\u003e {\n        const GOOG = stockData[1]['Trades'][i];\n        pusher.trigger('trade', 'stock', GOOG)\n        i++\n      }, 2000);\n      \n      app.set('port', process.env.PORT || 3000);\n      app.listen(app.get('port'), () =\u003e {\n        console.log(\"Listening on port \" + app.get('port'));\n      })\n```\n\nWe loaded the required middlewares for the Express server and then imported dummy data for stock trades. You can download this data [here](https://github.com/yemiwebby/ember-realtime-graph/blob/master/stock.json). Once you are done, create a new file named `stock.json` in the root directory of the application and save the downloaded content in it.\n\nNext, we configured Pusher using the credentials we added to our environment variables earlier. And finally, to allow our client receive realtime payloads, we emitted the `stockData` payload on every 2 seconds for our client to subscribe to.\n\nOpen another terminal and run the command below to start the server on http://localhost:3000:\n\n```\n    node app.js\n```\n\nThis will log a message to the console as shown by the image below:\n\n![ember-realtime-graph-server](//images.ctfassets.net/1es3ne0caaid/5YZBY3LYSAMSkiqkEAiS8G/7a360584de801669039b57b7e38b33e3/ember-realtime-graph-server.png)\n\n## Generate the chart component\n\nEmber supports the usage and sharing of UI elements on multiple pages. So, we’ll use the component approach and generate one for our application.\n\nRun the command below: \n\n```\n    ember generate component realtime-graph\n```\n\nThe command above will generate a JavaScript component file `./app/components/realtime-graph.js` and a Handlebars template that defines the markup for the component’s UI.\n\n\n## Initialize the chart\n\nNext, we’ll initialize the chart to display the stock data to users in realtime. Open the newly generated `./app/components/realtime-graph.js` and update it with:\n\n``` javascript\n    // ./app/components/realtime-graph.js\n    \n      import Component from '@ember/component';\n      import Pusher from 'npm:pusher-js';\n      import Chart from 'npm:chart.js';\n      \n      export default Component.extend({\n        init() {\n          this._super(...arguments);\n          \n          var chart;\n          initializeChart();\n          \n          function initializeChart() {\n            var ctx = document.getElementById('chart').getContext('2d');\n            const data = {\n              labels: [],\n              datasets: [{\n                  label: \"My First dataset\",\n                  backgroundColor: 'rgb(255, 99, 132)',\n                  borderColor: 'rgb(255, 99, 132)',\n                  fill: false,\n                  data: [],\n              }]\n            };\n            chart = new Chart(ctx, {\n              type: 'line',\n              data: data,\n              options: {\n                responsive: true,\n                title: {\n                  display: true,\n                  text: 'Chart.js Line Chart'\n                },\n                tooltips: {\n                  mode: 'index',\n                  intersect: false\n                },\n                hover: {\n                  mode: 'nearest',\n                  intersect: true\n                },\n                scales: {\n                  xAxes: [\n                    {\n                      display: true,\n                      scaleLabel: {\n                        display: true,\n                        labelString: 'Time  '\n                      }\n                    }\n                  ],\n                  yAxes: [\n                    {\n                      display: true,\n                      scaleLabel: {\n                        display: true,\n                        labelString: 'Price'\n                      },\n                      ticks: {\n                        min: 504,\n                        max: 507\n                    }\n                    }\n                  ]\n                }\n              }\n            })\n          }\n          // we will update the chart here\n        }\n      });\n```    \n\nThe essence of what we executed here is to initialize the chart with a method named `intializeChart()`. We used it to define a chart and described the kind of data that it should expect, the label, including the colors. We’ll update it with data later in the tutorial.\n \n\n## Update the app template\n\nUpdate the application template to get rid of the default welcome page and show our chart in its place. Open the `./app/templates/application.hbs` file and paste the code below in it:\n\n``` html\n    {{!-- ./app/templates/application.hbs --}}\n    \n       \u003ccanvas id=\"chart\"\u003e\u003c/canvas\u003e\n      {{#realtime-graph}}{{/realtime-graph}}\n      {{outlet}}\n```\n\nNow if you stop the Ember development server by typing `Ctrl + c` in the terminal and restart it with `ember serve`, you will see a blank graph as shown in the image below:\n\n![ember-realtime-graph-homepage](//images.ctfassets.net/1es3ne0caaid/27hId3SqJm4mqiCyg6gi0e/21a3d9ed8aadc967ea85734594c04b14/ember-realtime-graph-homepage.png)\n\nThis is because we have not started updating our graph with the data sent in from the server. We’ll change that in the next section.\n\n\n## Update the chart\n\nOur graph requires constant data from the server in order to be displayed. Open `./app/components/realtime-graph.js` and add the code below immediately after the `initializeChart()`  method:\n\n``` javascript\n    // ./app/components/realtime-graph.js\n    \n      import Component from '@ember/component';\n      import Pusher from 'npm:pusher-js';\n      export default Component.extend({\n      \n        init() {\n         ...\n                \n            const pusher = new Pusher('YOUR_APP_KEY', { // update your APP_KEY\n              cluster: 'CLUSTER',\n              encrypted: true\n            })\n            \n            const channel = pusher.subscribe('trade');\n            channel.bind('stock', data =\u003e {\n            chart.data.labels.push(data.Timestamp.split(' ')[1].split('.')[0]);\n            chart.data.datasets[0].data.push(data.Price);\n            chart.update();\n            })\n        }\n      });\n```    \n\nHere, we initialized Pusher and subscribed to the `trade` channel in order to update the chart every single time data comes in from the server. Do not forget to replace the `YOUR_APP_KEY` and `CLUSTER` placeholder with the appropriate credentials.\n\n\n## Testing the application\n\nStop the Ember development server if it is currently running by typing `Ctrl + C`  in the terminal and restart it with `ember serve`. In addition, don’t forget to also run `node app.js` from another terminal to start the server in case you haven’t done that. Next, open http://localhost:4200 to test the application.\n\n![ember-realtime-graph-final-homepage](//images.ctfassets.net/1es3ne0caaid/6u3iPDalHOGIwWEKqcsymA/5a67085df6e34216f492acf7d09ff2b1/ember-realtime-graph-final-homepage.png)\n\n## Conclusion\n\nInteractivity becomes more powerful when you allow users to select points or series in a chart and have a summary of the relevant data appears for them to see. This helps to improve clean looking visualizations of data on a chart. You can easily build similar applications by using any charting tool of your choice.\n\nThe complete source code can be found on [GitHub](https://github.com/yemiwebby/ember-realtime-graph).","metaTitle":"Build a live graph with Ember.js","metaDescription":"Use Ember.js and Node.js to create an interactive realtime graph. Users will be able to view the graph, watch it update in realtime as new data comes in, and interact with it to obtain additional information about the data."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6uu3Ys68yQ6sIMwae8OAQU","type":"Entry","createdAt":"2018-06-28T09:38:54.858Z","updatedAt":"2018-06-28T09:38:54.858Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live poll app with Ionic","url":"live-poll-ionic","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/FeezyHendrix/ionic-realtime-pollapp","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6N8l3o0yD6QK2ooI2ME8wW","type":"Entry","createdAt":"2018-02-12T15:09:06.190Z","updatedAt":"2018-02-26T12:31:10.478Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Polls","url":"live-polls","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-06-26","description":"Use Ionic to create a live poll application for mobile. The app features a Node.js backend. It allows users to vote on their favorite premier league player, and see other users' votes displayed in realtime.","prerequisite":"You will need Node and npm installed on your machine. A basic knowledge of Angular, Ionic and Node will be helpful.","content":"## Introduction\n\nAn electronic polling system allows users cast their votes with ease without the hassle and stress of visiting a polling booth. This makes it easily accessible as it can be used by users anywhere in the world. Adding realtime functionality to the application improves the user experience as votes are seen in realtime.\n\nWe’ll build a realtime polling application using Pusher, Node, and Ionic.\nUsing our application, users will get to vote for their favorite soccer player in the English Premier League.\nHere’s a demo of the final product:\n\n![ionic-poll-demo](//images.ctfassets.net/1es3ne0caaid/2tcCbmsgRyI2YYqEcuOEO2/d09a686ee51a5db0fc1706672a373556/ionic-poll-demo.gif)\n\nWe’ll send our votes to the server and with the help of Pusher, update our polls in realtime. To make use of Pusher, you’ll have to create an account [here.](https://pusher.com/)\n\nLet’s build!\n\n## Prerequisites\n\nTo follow this tutorial a basic understanding of [Angular](https://angular.io), [Ionic](https://ionicframework.com) and [Node.js](https://nodejs.org/en/) is required. Please ensure that you have Node and npm installed before you begin.\nIf you have no prior knowledge of Ionic, kindly follow the [tutorial here.](https://ionicframework.com/docs/intro/tutorial/) Come back and finish the tutorial when you’re done.\n\nWe’ll be using these tools to build out our application:\n\n1. [Express](https://expressjs.com/)\n2. [Node](https://nodejs.org/en/)\n3. [Pusher](https://pusher.com/)\n4. [Ionic](https://ionicframework.com)\n\n\n## Setup and folder structure\n\nTo get started, we will use the CLI (command line interface) provided by the Ionic team to initialize our project.\n\nFirst, install the CLI by running `npm install -g ionic cordova`. [NPM](https://www.npmjs.com/) is a package manager used for installing packages. It will be available on your PC if you have [Node](https://nodejs.org/en/) installed.\n\nTo create a new Ionic App using the CLI, open a terminal and run:\n\n```\n    ionic start pollApp blank\n```\n\nThe command is merely telling the CLI to create a new app called `pollApp` and it should make use of the blank starter template.  While the setup is running you might get a prompt `\"Would you like to integrate your new app with Cordova to target native iOS and Android?\"`. If you want to start running or testing the application on a mobile device or emulator as you build, then choose yes by typing `Y` and pressing Enter on your keyboard, else type `N` and continue. You might get another prompt   `\"If you would like to integrate ionic pro ?\"` ,  we wouldn’t be needing that in this tutorial so just type `N` and if you would like extend the project into production with your team choose `Y`.\n\nOpen the newly created `pollApp`. Your folder structure should look something like this:\n\n```\n    pollApp /\n      node_modules /\n      src / \n        app /\n          assets /\n          pages /\n            home /\n              home.html\n              home.ts\n              home.scss\n```\n\nOpen a terminal inside the app folder and start the application by running: \n\n```\n    ionic serve \n```\n\nAutomatically your default browser should open, and you should see the screenshot below if everything went well.\n\n![ionic-chat-sentiment-ionic-serve](//images.ctfassets.net/1es3ne0caaid/cZJy8Cc9WgkoiOEKI44uA/8a6010cf3b3515127f486c76c18f33de/ionic-chat-sentiment-ionic-serve.png)\n\n## Building our server\n\nNow that we have our Ionic application running let’s build our server.\nTo do this, we’ll need to install Express. Express is a fast, unopinionated, minimalist web framework for Node.js. We’ll use this to receive requests from our Ionic application.\n\nRun `npm install express` on a terminal inside the root folder of your project to install Express.\nCreate a file called `server.js` in the root of the project and update it with the code snippet below:\n\n``` javascript\n    //pollApp/server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: process.env.CLUSTER,\n      encrypted: true,\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```\n\nWe referenced three packages that we are yet to install, `body-parser`, `pusher` and `dotenv`. Install these packages by running this code in your terminal:\n\n```\n    npm i body-parser pusher dotenv\n```\n\nThe `body-parser` package is used to parse incoming request bodies in a middleware before your handlers, available under the `req.body` property.\n\nThe calls to our endpoint will be coming in from a different origin. Therefore we need to make sure we include the CORS headers (Access-Control-Allow-Origin). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\nThis is a standard Node application configuration, nothing specific to our app.\nAlso, you’ll notice that we installed Pusher library as a dependency. [Create a Pusher account](https://pusher.com/) and a new Pusher Channels app and get your `appId`, `key` and `secret`.\n\nThe last package, `dotenv` is a zero-dependency module that loads environment variables from a `.env` file into `process.env`.\n\nWe use this package to make sure we don’t add sensitive information like our `appId` and `secret` directly into our code. To get these values loaded into our environment, we'll create a `.env` file in the root of our project.\n\nYour `.env file` should look something like the snippet below. We’ll add our Pusher `appId`, `key` and `secret` provided here.\n\n```\n    // pollApp/.env\n    PUSHER_APP_ID=\u003cAPP_ID\u003e\n    PUSHER_KEY=\u003cPUSHER_KEY\u003e\n    PUSHER_SECRET=\u003cPUSHER_SECRET\u003e\n    CLUSTER=\u003cCLUSTER\u003e\n```\n\nIf you noticed, we added the `dotenv` package at the start of our file. This is done because we need to make the variables available throughout the file.\nPlease ensure you replace the following placeholder values above with your unique Pusher `appId`, `key` and `secret` from your Pusher dashboard.\n\n## Send votes\n\nTo enable users send requests to the server, we’ll create a route to handle incoming requests. Update your `server.js` file with the code below:\n\n``` javascript\n    // pollApp/server.js\n    require('dotenv').config();\n    ...\n    app.post('/vote', (req, res) =\u003e {\n      const { body } = req;\n      const { player } = body;\n      pusher.trigger('vote-channel', 'vote', {\n        player,\n      });\n      res.json({ player });\n    });\n    \n     ...\n```\n\nWe created a POST `/vote` route which, when hit, triggers a Pusher event.\nWe used object destructuring to get the body of the request and also the player info sent by the user.\n\nThe trigger is achieved using the `trigger``()` method which takes the trigger identifier (vote-channel), an event name (vote), and a payload.\nThe payload can be any value, but in this case, we have a JS object. This object contains the name of the player being voted for.\n\nWe still go ahead to respond with an object containing the voted player string so we can update the frontend with the data.\n\n## Building the app UI\n\nOpen `home.html` and replace it with the content below:\n \n``` html\n    //../src/pages/home/home.html\n    \n    \u003cion-header\u003e\n      \u003cion-navbar\u003e\n        \u003cion-title\u003e\n        Poll APP  \n        \u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \u003cion-content padding\u003e\n      \u003cion-list no-lines\u003e\n        \u003cion-item *ngFor=\"let player of playerData\"\u003e\n          \u003cion-row\u003e\n            \u003cion-col col-6\u003e\n                \u003cion-avatar\u003e\n                    \u003cimg [src]=\"player.image\" [alt]=\"player.name\" [ngClass]=\"getVoteClasses(player.shortName)\"\u003e\n                    \u003ch4\u003e{{player.name}}\u003c/h4\u003e\n                    \u003cp\u003e{{player.goals}} goals\u003c/p\u003e\n                    \u003cp\u003e{{player.assists}} assists\u003c/p\u003e\n                  \u003c/ion-avatar\u003e\n            \u003c/ion-col\u003e\n            \u003cion-col col-6\u003e\n                  \u003ch1\u003eVoteCount\u003c/h1\u003e\n                  \u003ch1 text-center\u003e{{voteCount[player.shortName]}}\u003c/h1\u003e\n            \u003c/ion-col\u003e\n          \u003c/ion-row\u003e \n          \u003cbutton ion-button full round (click)=\"sendVotes(player)\"\u003eVote\u003c/button\u003e\n        \u003c/ion-item\u003e\n      \u003c/ion-list\u003e\n    \u003c/ion-content\u003e\n```    \n\nIn the code snippet above, we looped through `playerData``[]` to create a view based on the player’s information.\nThere are some undefined variables in the code snippet above, don’t panic yet, we’ll define them in our `home.ts` file below.\n\n## Home.ts\n\nIn the HTML snippet, we referred to some variables that weren’t yet defined. We’ll create the variables here with the logic behind our application, and import the HttpClient service.\n\n\n\n``` typescript    \n    // ../src/pages/home/home.ts\n    import { HttpClient } from '@angular/common/http';\n    import { Component } from '@angular/core';\n    import { NavController } from 'ionic-angular';\n    \n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html'\n    })\n    export class HomePage {\n      constructor(public navCtrl: NavController, public http : HttpClient) {\n      }\n      event: string = 'vote';\n      vote: string = '';\n      ifVoted : boolean = false;\n      voteCount = {\n        salah: 0,\n        kane: 0,\n        eriksen: 0,\n        kevin: 0,\n      };\n      playerData = [\n        {\n          name: 'Mo. Salah',\n          goals: 30,\n          assists: 12,\n          shortName: 'salah',\n          image: 'https://platform-static-files.s3.amazonaws.com/premierleague/photos/players/250x250/p118748.png'\n        },\n        {\n          name: 'Christian Eriksen',\n          goals: 8,\n          assists: 13,\n          shortName: 'eriksen',\n          image: 'https://platform-static-files.s3.amazonaws.com/premierleague/photos/players/250x250/p80607.png',\n        },\n        {\n          name: 'Harry Kane',\n          goals: 26,\n          assists: 5,\n          shortName: 'kane',\n          image:\n            'https://platform-static-files.s3.amazonaws.com/premierleague/photos/players/40x40/p78830.png',\n        },\n        {\n          name: \"Kevin De'bruyne\",\n          goals: 10,\n          assists: 17,\n          shortName: 'kevin',\n          image: 'https://platform-static-files.s3.amazonaws.com/premierleague/photos/players/40x40/p61366.png',\n        },\n    ];\n      sendVotes(player){\n        this.http.post('http://localhost:4000/vote', { player }).subscribe((res : any) =\u003e {\n          this.vote  = res.player;\n          this.ifVoted = true;\n        })\n      }\n      getVoteClasses(player){\n        return {\n          elect : this.ifVoted \u0026\u0026 this.vote === player,\n          lost : this.ifVoted \u0026\u0026 this.vote !== player\n        }\n      }\n      ionViewDidLoad(){}\n    }\n```\n\n`send``Votes``()`: this method makes use of the native HttpClient service to make requests to our server. It sends the name of the player being voted for in a POST request to the server. When a response is returned, it sets the voted property to true signifying that the user has placed a vote. Also, it sets the vote property to the name of the player being voted.\n\n`getVoteClasses``()`: this method sets classNames on each player element based on if a player was voted for or not.\n\nTo make use of the HttpClient service, we’ll need to import the HttpClientModule into the `app.module.ts` file. Update your app module file as follows:\n\n``` typescript\n    // src/app/app.module.ts\n    \n    import { BrowserModule } from '@angular/platform-browser';\n    import { ErrorHandler, NgModule } from '@angular/core';\n    import { IonicApp, IonicErrorHandler, IonicModule } from 'ionic-angular';\n    import { SplashScreen } from '@ionic-native/splash-screen';\n    import { StatusBar } from '@ionic-native/status-bar';\n    import { HttpClientModule } from '@angular/common/http';\n    import { MyApp } from './app.component';\n    import { HomePage } from '../pages/home/home';\n    @NgModule({\n    declarations: [\n    MyApp,\n    HomePage\n    ],\n    imports: [\n    BrowserModule,\n    IonicModule.forRoot(MyApp),\n    HttpClientModule\n    ],\n    bootstrap: [IonicApp],\n    ....\n```\n\nBy now our application should look like this:\n\n![ionic-poll-vote-page-1](//images.ctfassets.net/1es3ne0caaid/5KahXsHznU6giAomgwaaA4/3f95e4a7ead72f9b9a6f2f4d1196ca62/ionic-poll-vote-page-1.png)\n\n## Introducing Pusher\n\nSo far we have an application that enables users to cast votes, but we have no way of keeping track of how others voted in realtime. We also have no way of visualizing the polling data. To solve both of these problems, we’ll include the Pusher library.\n\nOpen `index.html` file in the src folder of the project and paste the cdn into it:\n\n``` html\n    ...\n    \n      \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003c!-- add to homescreen for ios --\u003e \n    ...\n```\n\nNow that Pusher has been made available in our project, we’ll create a Pusher Provider to be used in our application. The Ionic CLI can aid in the provider creation. Open a terminal in your project’s root folder and run the following command:\n\n```\n    ionic generate provider pusher-service\n```\n\nThis command simply tells the CLI to generate a provider named pusher. Now open the `pusher-service.ts` file and update it with the code below:\n\n``` typescript\n    // ../src/providers/pusher-service/pusher-service.ts\n    \n    import { HttpClient } from '@angular/common/http';\n    import { Injectable } from '@angular/core';\n    declare const Pusher: any;\n    @Injectable()\n    export class PusherServiceProvider {\n    channel;\n    constructor(public http: HttpClient) {\n    var pusher = new Pusher('\u003cPUSHER_KEY\u003e', {\n    cluster: 'eu',\n    encrypted: true,\n    });\n    this.channel = pusher.subscribe('vote-channel');\n    }\n    public init(){\n      return this.channel;\n      }\n    }\n```\n\nFirst, we initialize Pusher in the constructor.\nThe `init()` method returns the Pusher property we created.\nEnsure you replace the `PUSHER_KEY` string with your actual Pusher key.\n\nTo make the provider available in the application, import it into the `app.``module.ts` file.\n\n``` typescript\n    // ../src/app/app.module.ts\n    \n    import { PusherServiceProvider } from '../providers/pusher-service/pusher-service';\n    ....\n    providers: [\n    StatusBar,\n    SplashScreen,\n    {provide: ErrorHandler, useClass: IonicErrorHandler},\n    PusherServiceProvider\n    ]\n    ....\n```\n\nWe’ll make use of this provider in our home page, by binding to the vote event and increment the votes of the voted player returned in the event. This will be done in the `ionViewDidLoad` lifecycle.\n\n``` typescript\n    // ../src/pages/home/home.ts\n    \n    import { PusherServiceProvider } from '../../providers/pusher-service/pusher-service';\n    \n    constructor(public navCtrl: NavController, public http : HttpClient, private pusher : PusherServiceProvider) {}\n    \n    ...\n    \n    ionViewDidLoad(){\n      const channel = this.pusher.init();\n      channel.bind(this.event, ({ player }) =\u003e {\n        this.voteCount[player.shortName] += 1\n      });\n    }\n```\n\nAt this point, your application should have realtime updates when votes are placed. Ensure that the server is running alongside the Ionic development server. If not, run `node server` and `ionic serve` in two separate terminals. Both terminals should be opened in the root folder of your project. \n\n\n## Testing on Mobile Devices\n\nTo test the application on your mobile device, download the [IonicDevApp](https://ionicframework.com/docs/pro/devapp/) on your mobile device. Make sure your computer and your mobile device are connected to the same network. When you open the IonicDevApp, you should see Ionic apps running on your network listed. \n\n\n\u003e **Note:** Both the server(`node server`), ngrok for proxying our server and the Ionic dev server(`ionic serve`) must be running to get the application working. Run the commands in separate terminal sessions if you haven’t done so already.\n\n![ionic-chat-sentiment-in-app](//images.ctfassets.net/1es3ne0caaid/2OsgMWFKTC8ksw2wMCqEkI/983d5ae2843c21149a10fb468393ba2b/ionic-chat-sentiment-in-app.png)\n\nTo view the application, click on it and you should see a similar view to what was in the browser. Sending messages to the server might have worked in the browser but localhost doesn’t exist on your phone, so we’ll need to create a proxy to be able to send messages from mobile. \n\nYou can also run the following code in your terminal if the above method doesn’t work for you.\n\n```\n    ionic cordova run \u003ctarget_platform\u003e\n```\n\n- `target_platform` : either `ios` or `android`\n\n## Using Ngrok as a proxy\n\nTo create a proxy for our server, we’ll download Ngrok. Visit the [download](https://ngrok.com/download) page on the Ngrok website. Download the client for your OS. Unzip it and run the following command in the folder where Ngrok can be found:\n\n```\n    ./ngrok http 4000\n```\n\n![ionic-chat-sentiment-ngrok](//images.ctfassets.net/1es3ne0caaid/5pf60lqM9i8YmkC4eG8iY8/d31c9d7421f2bef8b8595d98e98e4082/ionic-chat-sentiment-ngrok.png)\n\nCopy the forwarding url with `https` and place it in the `home.ts` file that previously had `http://localhost:4000/``vote`. Please do not copy mine from the screenshot above. \n\n``` typescript\n    // src/pages/home/home.ts\n    ...\n    @Component({\n      selector: 'page-home',\n      templateUrl: 'home.html'\n    })\n    export class HomePage {\n      ...\n       sendVotes(player){\n          this.http.post('\u003cNGROK_URL\u003e/vote', { player }).subscribe((res : any) =\u003e {\n          this.vote  = res.player;\n          this.ifVoted = true;\n        });\n      }\n      ...\n    }\n    ...\n```\n\n\u003e Ensure to include the forwarding URL you copied where the placeholder string is\n\nNow you should be seeing realtime update of the votes, both on the phone and the browser.\n\n\n![ionic-poll-demo](//images.ctfassets.net/1es3ne0caaid/2tcCbmsgRyI2YYqEcuOEO2/d09a686ee51a5db0fc1706672a373556/ionic-poll-demo.gif)\n\n\n\u003e **Note:** Both the server(`node server`), ngrok for proxying our server and the Ionic dev server(`ionic serve`) must be running to get the application working. Run the commands in separate terminal sessions if you haven’t done so already.\n\nTo build your application to deploy on either the AppStore or PlayStore, follow the instructions found [here](https://ionicframework.com/docs/pro/package/).\n\n\n## Conclusion\n\nUsing Pusher, we’ve built out an application using the pub/sub pattern without having to set up a WebSocket server. This shows how powerful Pusher is and how easy it is to set up. You can find the demo for this article on [GitHub.](https://github.com/FeezyHendrix/ionic-realtime-pollapp)","metaTitle":"Build a live poll app with Ionic","metaDescription":"Build a voting app with Ionic, using Node for the backend. Users can vote on their favorite premier league player, and see other users' votes displayed in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2LyBHEC0bSwMwyySAUq2cC","type":"Entry","createdAt":"2018-06-27T11:33:04.164Z","updatedAt":"2018-06-27T11:33:04.164Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a web traffic monitor with Python","url":"web-traffic-monitor-python","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/python-pusher-traffic-monitor","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}}],"reviewDate":"2018-06-26","description":"Build a dashboard to monitor web traffic, along with a demo site to track. Use Flask for the backend, and vanilla JavaScript for the frontend. View details about website visitors in realtime.","prerequisite":"You will need Python 3+ installed on your machine. A basic knowledge of Flask, Python and JavaScript will be helpful.","content":"In today’s tech world, it is important to know where the traffic on your website comes from because it helps content creators and website owners understand their visitors better. Website owners can further use this information to improve their website, render better advertisements or generally improve their content based on this data.\n\nIn this tutorial, we will build a simple website and a traffic monitor, the traffic monitor will display details about visitors on the website. For every visitor, there will multiple columns such as time of visit, continent, country, city, operating system, browser, and pages visited.\nHere is a display of what the final application will look like:\n\n![python-web-traffic-demo](//images.ctfassets.net/1es3ne0caaid/173irZ04McmEIE0K8cQoew/5fb82398a74f83f8353e95c7fc5a935a/python-web-traffic-demo.gif)\n\nFrom the image above, we can see an incognito window to the left and the traffic monitor dashboard window to the right. In the incognito window, we visit our website on the local address [127.0.0.1:5000](http://127.0.0.1:5000) and it updates in realtime on the traffic monitor dashboard. It registers that a new user has visited the website and displays the associated data. The user data is also saved to the database so that whenever we open the traffic monitor dashboard, the data persists.\n\nWe will build the backend server for this application using the Python framework called [Flask.](http://flask.pocoo.org/) The source code for this tutorial is available here on [GitHub](https://github.com/neoighodaro/python-pusher-traffic-monitor).\n\n## Prerequisites\n\nTo follow along with this tutorial, a basic knowledge of Python, Flask, and JavaScript (ES6 syntax) is required. You will also need the following installed:\n\n\n1. [Python (\u003e= v3.x)](https://www.python.org/)\n2. [virtualenv](https://virtualenv.pypa.io/en/stable/)\n3. [Flask](http://flask.pocoo.org/)\n\nVirtualenv is great for creating isolated Python environments, so we can install dependencies in an isolated environment, and not pollute our global packages directory.\n\nLet’s install `virtualenv` with this command:\n\n```\n    $ pip install virtualenv\n```\n\n## Setting up the app environment\n\nLet’s create our project folder, and activate a virtual environment in it. Run the commands below:\n\n```\n    $ mkdir python-pusher-traffic-monitor\n    $ cd python-pusher-traffic-monitor\n    $ virtualenv .venv\n    $ source .venv/bin/activate # Linux based systems\n    $ \\path\\to\\env\\Scripts\\activate # Windows users\n```\n\nNow that we have the virtual environment setup, we can install Flask within it with this command:\n\n```\n    $ pip install flask\n```\n\nLet’s also install `httpagentparser`:\n\n```\n    $ pip install httpagentparser\n```\n\nBefore we do anything else, we need to install the Pusher library as we will need that for realtime updates.\n\n\n## Setting up Pusher\n\nThe first step will be to get a Pusher Channels application. We will need the application credentials for our realtime features to work.\n\nGo to the [Pusher website](https://pusher.com) and create an account. After creating an account, you should create a new application. Follow the application creation wizard and then you should be given your application credentials, we will use this later in the article.\n\n![python-realtime-poll-keys](//images.ctfassets.net/1es3ne0caaid/752Tb8m156CeqWw2q6eKyS/2a61be62a4ff148b8fe9e7c60a94a5db/python-realtime-poll-keys.png)\n\nWe also need to install the Pusher Python Library to send events to Pusher. Install this using the command below:\n\n```\n    $ pip install pusher\n```\n\n## File and Folder Structure\n\nWe don’t need to create so many files and folders for this application since it’s a simple one. Here’s the file/folder structure:\n\n```\n    ├── python-pusher-traffic-monitor\n           ├── app.py\n           ├── dbsetup.py\n           ├── static\n           └── templates\n```\n\nThe `static` folder will contain the static files to be used as is defined by [Flask standards](http://flask.pocoo.org/docs/0.12/tutorial/folders/). The `templates` folder will contain the HTML templates. In our application, `app.py` is the main entry point and will contain our server-side code. To keep things modular, we will write all the code that we need to interact with the database in `dbsetup.py`.\n\nCreate the `app.py` and `dbsetup.py` files, and then the `static` and `templates` folders.\n\n## Building the backend\n\nLet’s start by working on the file that will handle the database operations. In the `dbsetup.py` file, we will write all the code that is needed for creating a database and interacting with it. Open the `dbsetup.py` file and paste the following:\n\n``` python\n    import sqlite3\n    from sqlite3 import Error\n    \n    def create_connection(database):\n        try:\n            conn = sqlite3.connect(database, isolation_level=None, check_same_thread = False)\n            conn.row_factory = lambda c, r: dict(zip([col[0] for col in c.description], r))\n    \n            return conn\n        except Error as e:\n            print(e)\n    \n    def create_table(c,sql):\n        c.execute(sql)\n    \n    def update_or_create_page(c,data):\n        sql = \"SELECT * FROM pages where name=? and session=?\"\n        c.execute(sql,data[:-1])\n        result = c.fetchone()\n        if result == None:\n            create_pages(c,data)\n        else:\n            print(result)\n            update_pages(c, result['id'])\n    \n    def create_pages(c, data):\n        print(data)\n        sql = ''' INSERT INTO pages(name,session,first_visited)\n                  VALUES (?,?,?) '''\n        c.execute(sql, data)\n    \n    def update_pages(c, pageId):\n        print(pageId)\n        sql = ''' UPDATE pages\n                  SET visits = visits+1 \n                  WHERE id = ?'''\n        c.execute(sql, [pageId])\n    \n    def create_session(c, data):\n        sql = ''' INSERT INTO sessions(ip, continent, country, city, os, browser, session, created_at)\n                  VALUES (?,?,?,?,?,?,?,?) '''\n        c.execute(sql, data)\n    \n    def select_all_sessions(c):\n        sql = \"SELECT * FROM sessions\"\n        c.execute(sql)\n        rows = c.fetchall()\n        return rows\n    \n    def select_all_pages(c):\n        sql = \"SELECT * FROM pages\"\n        c.execute(sql)\n        rows = c.fetchall()\n        return rows\n    \n    def select_all_user_visits(c, session_id):\n        sql = \"SELECT * FROM pages where session =?\"\n        c.execute(sql,[session_id])\n        rows = c.fetchall()\n        return rows\n    \n    def main():\n        database = \"./pythonsqlite.db\"\n        sql_create_pages = \"\"\" \n            CREATE TABLE IF NOT EXISTS pages (\n                id integer PRIMARY KEY,\n                name varchar(225) NOT NULL,\n                session varchar(255) NOT NULL,\n                first_visited datetime NOT NULL,\n                visits integer NOT NULL Default 1\n            ); \n        \"\"\"\n        sql_create_session = \"\"\" \n            CREATE TABLE IF NOT EXISTS sessions (\n                id integer PRIMARY KEY,\n                ip varchar(225) NOT NULL,\n                continent varchar(225) NOT NULL, \n                country varchar(225) NOT NULL,\n                city varchar(225) NOT NULL, \n                os varchar(225) NOT NULL, \n                browser varchar(225) NOT NULL, \n                session varchar(225) NOT NULL,\n                created_at datetime NOT NULL\n            ); \n        \"\"\"\n    \n        # create a database connection\n        conn = create_connection(database)\n        if conn is not None:\n            # create tables\n            create_table(conn, sql_create_pages)\n            create_table(conn, sql_create_session)\n            print(\"Connection established!\")\n        else:\n            print(\"Could not establish connection\")\n    \n    if __name__ == '__main__':\n        main()\n```\n\nNext, run the `dbsetup.py` file so that it creates a new SQLite database for us. We can run it with this command:\n\n```\n    $ python dbsetup.py\n```\n\nWe should see this text logged to the terminal — ‘Connection established!’ — and there should be a new file — `pythonsqlite.db` — added to the project’s root directory.\n\nNext, let’s open the `app.py` file and start writing the backend code that will handle incoming requests. We are going to register multiple routes here. Four of these routes will load a webpage each while the other routes will process submitted data and return a JSON response.\n\nWe will also create a Pusher instance and use it to broadcast data through two channels that we will shortly define — pageview and numbers — in the application. After that, we will import the database handler methods we defined in `dbsetup.py` so that we can use them in the `app.py` file. Open the `app.py` file and paste the following:\n\n``` python\n    from flask import Flask, render_template, request, session, jsonify\n    import urllib.request\n    from pusher import Pusher\n    from datetime import datetime\n    import httpagentparser\n    import json\n    import os\n    import hashlib\n    from dbsetup import create_connection, create_session, update_or_create_page, select_all_sessions, select_all_user_visits, select_all_pages\n    \n    app = Flask(__name__)\n    app.secret_key = os.urandom(24)\n    \n    # configure pusher object\n    pusher = Pusher(\n    app_id='PUSHER_APP_ID',\n    key='PUSHER_APP_KEY',\n    secret='PUSHER_APP_SECRET',\n    cluster='PUSHER_APP_CLUSTER',\n    ssl=True)\n    \n    database = \"./pythonsqlite.db\"\n    conn = create_connection(database)\n    c = conn.cursor()\n    \n    userOS = None\n    userIP = None\n    userCity = None\n    userBrowser = None\n    userCountry = None\n    userContinent = None\n    sessionID = None\n    \n    def main():\n        global conn, c\n    \n    def parseVisitor(data):\n        update_or_create_page(c,data)\n        pusher.trigger(u'pageview', u'new', {\n            u'page': data[0],\n            u'session': sessionID,\n            u'ip': userIP\n        })\n        pusher.trigger(u'numbers', u'update', {\n            u'page': data[0],\n            u'session': sessionID,\n            u'ip': userIP\n        })\n    \n    @app.before_request\n    def getAnalyticsData():\n        global userOS, userBrowser, userIP, userContinent, userCity, userCountry,sessionID \n        userInfo = httpagentparser.detect(request.headers.get('User-Agent'))\n        userOS = userInfo['platform']['name']\n        userBrowser = userInfo['browser']['name']\n        userIP = \"72.229.28.185\" if request.remote_addr == '127.0.0.1' else request.remote_addr\n        api = \"https://www.iplocate.io/api/lookup/\" + userIP\n        try:\n            resp = urllib.request.urlopen(api)\n            result = resp.read()\n            result = json.loads(result.decode(\"utf-8\"))                                                                                                     \n            userCountry = result[\"country\"]\n            userContinent = result[\"continent\"]\n            userCity = result[\"city\"]\n        except:\n            print(\"Could not find: \", userIP)\n        getSession()\n    \n    def getSession():\n        global sessionID\n        time = datetime.now().replace(microsecond=0)\n        if 'user' not in session:\n            lines = (str(time)+userIP).encode('utf-8')\n            session['user'] = hashlib.md5(lines).hexdigest()\n            sessionID = session['user']\n            pusher.trigger(u'session', u'new', {\n                u'ip': userIP,\n                u'continent': userContinent,\n                u'country': userCountry,\n                u'city': userCity,\n                u'os': userOS,\n                u'browser': userBrowser,\n                u'session': sessionID,\n                u'time': str(time),\n            })\n            data = [userIP, userContinent, userCountry, userCity, userOS, userBrowser, sessionID, time]\n            create_session(c,data)\n        else:\n            sessionID = session['user']\n    \n    @app.route('/')\n    def index():\n        data = ['home', sessionID, str(datetime.now().replace(microsecond=0))]\n        parseVisitor(data)\n        return render_template('index.html')\n    \n    @app.route('/about')\n    def about():\n        data = ['about',sessionID, str(datetime.now().replace(microsecond=0))]\n        parseVisitor(data)\n        return render_template('about.html')\n    \n    @app.route('/dashboard')\n    def dashboard():\n        return render_template('dashboard.html')\n    \n    @app.route('/dashboard/\u003csession_id\u003e', methods=['GET'])\n    def sessionPages(session_id):\n        result = select_all_user_visits(c,session_id)\n        return render_template(\"dashboard-single.html\",data=result)\n    \n    @app.route('/get-all-sessions')\n    def get_all_sessions():\n        data = []\n        dbRows = select_all_sessions(c)\n        for row in dbRows:\n            data.append({\n                'ip' : row['ip'],\n                'continent' : row['continent'],\n                'country' : row['country'], \n                'city' : row['city'], \n                'os' : row['os'], \n                'browser' : row['browser'], \n                'session' : row['session'],\n                'time' : row['created_at']\n            })\n        return jsonify(data)\n    \n    if __name__ == '__main__':\n        main()\n        app.run(debug=True)\n```\n\nIn the code above, we imported the required modules and objects, then we initialized a new Flask application. We also initialized and configured Pusher before defining all the routes and their handler functions.\n\n\n\u003e Replace the PUSHER_APP_* keys with the values on your Pusher dashboard.\n  \n\nWith the `Pusher` object instantiated, we can trigger events on whatever channels we define.\nThe trigger method has the following syntax:\n\n```\n    pusher.trigger(\"a_channel\", \"an_event\", {key: \"data to pass with event\"})\n```\n\nYou can find the docs for the Pusher Python library [here](https://github.com/pusher/pusher-http-python), to get more information on configuring and using Pusher in Python.\n\nThe `getAnalyticsData` function gets the visitor’s IP address and retrieves data using the [urllib module](https://docs.python.org/3/howto/urllib2.html) to read information from the [Iplocate](https://www.iplocate.io/) API.\n\nIn the code above, we have defined four routes that will render web pages when visited, let’s create these web pages in the next section and use the frontend to communicate with our Python backend.\n\n## Setting up the app view\n\nTo begin, we need to create four files in the `templates` directory. These files will be named:\n\n\n- `index.html` — this is the home page for the website\n- `about.html` — this is the about page for the website\n- `dashboard.html` — this is the traffic monitor dashboard\n- `dashboard-single.html` — this is the dashboard page that displays more info (i.e. the types of pages a user has visited) on a single visitor.\n\nOpen the `./templates/index.html` file and paste the following:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003ePusher Python Realtime Traffic Monitoring\u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003ch1\u003eThis is the homepage\u003c/h1\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nOpen the `./templates/about.html` file and paste the following:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003ePusher Python Realtime Traffic Monitoring\u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003ch1\u003eThis is the about page\u003c/h1\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nBefore we write the code for `dashboard-single.html` and `dashboard` files, we will pull in some CSS and JS from [https://startbootstrap.com](https://startbootstrap.com/template-overviews/sb-admin/). Go to the URL and click **Download.** Unzip the file and copy the `css` and `js` directories into the `static` directory of our project.\n\nNow, let’s continue building the frontend of our application, so open the `./templates/dashboard.html` file and paste the following:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"utf-8\"\u003e\n      \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e\n      \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n      \u003cmeta name=\"description\" content=\"\"\u003e\n      \u003cmeta name=\"author\" content=\"\"\u003e\n      \u003ctitle\u003eSB Admin - Start Bootstrap Template\u003c/title\u003e\n    \n      \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\"\u003e\n      \u003clink href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\" rel=\"stylesheet\" type=\"text/css\"\u003e\n      \u003clink href=\"https://cdn.datatables.net/1.10.16/css/dataTables.bootstrap4.min.css\" rel=\"stylesheet\"\u003e\n      \u003clink href=\"{{ url_for('static', filename='css/sb-admin.css') }}\" rel=\"stylesheet\"\u003e\n    \u003c/head\u003e\n    \u003cbody class=\"fixed-nav sticky-footer bg-dark\" id=\"page-top\"\u003e\n    \n      \u003c!-- Navigation--\u003e\n      \u003cnav class=\"navbar navbar-expand-lg navbar-dark bg-dark fixed-top\" id=\"mainNav\"\u003e\n        \u003ca class=\"navbar-brand\" href=\"index.html\"\u003eStart Bootstrap\u003c/a\u003e\n        \u003cbutton class=\"navbar-toggler navbar-toggler-right\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"\u003e\n          \u003cspan class=\"navbar-toggler-icon\"\u003e\u003c/span\u003e\n        \u003c/button\u003e\n        \u003cdiv class=\"collapse navbar-collapse\" id=\"navbarResponsive\"\u003e\n          \u003cul class=\"navbar-nav navbar-sidenav\" id=\"exampleAccordion\"\u003e\n            \u003cli class=\"nav-item\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Dashboard\"\u003e\n              \u003ca class=\"nav-link\" href=\"/dashboard\"\u003e\n                \u003ci class=\"fa fa-fw fa-dashboard\"\u003e\u003c/i\u003e\n                \u003cspan class=\"nav-link-text\"\u003eDashboard\u003c/span\u003e\n              \u003c/a\u003e\n            \u003c/li\u003e\n          \u003c/ul\u003e\n        \u003c/div\u003e\n      \u003c/nav\u003e\n      \u003cdiv class=\"content-wrapper\"\u003e\n        \u003cdiv class=\"container-fluid\"\u003e\n    \n          \u003c!-- Breadcrumbs--\u003e\n          \u003col class=\"breadcrumb\"\u003e\n            \u003cli class=\"breadcrumb-item\"\u003e\n              \u003ca href=\"#\"\u003eDashboard\u003c/a\u003e\n            \u003c/li\u003e\n            \u003cli class=\"breadcrumb-item active\"\u003eMy Dashboard\u003c/li\u003e\n          \u003c/ol\u003e\n    \n          \u003c!-- Icon Cards--\u003e\n          \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-xl-3 col-sm-6 mb-3\"\u003e\n              \u003cdiv class=\"card text-white bg-primary o-hidden h-100\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                  \u003cdiv class=\"mr-5\"\u003eTotal session \u003cspan id=\"total-sessions\"\u003e26\u003c/span\u003e\u003c/div\u003e\n                \u003c/div\u003e\n                \u003ca class=\"card-footer text-white clearfix small z-1\" href=\"#\"\u003e\n                  \u003cspan class=\"float-left\"\u003eView Details\u003c/span\u003e\n                  \u003cspan class=\"float-right\"\u003e\n                    \u003ci class=\"fa fa-angle-right\"\u003e\u003c/i\u003e\n                  \u003c/span\u003e\n                \u003c/a\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-xl-3 col-sm-6 mb-3\"\u003e\n              \u003cdiv class=\"card text-white bg-warning o-hidden h-100\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                  \u003cdiv class=\"mr-5\"\u003eTotal visitors \u003cspan id=\"total-visitors\"\u003e26\u003c/span\u003e\u003c/div\u003e\n                \u003c/div\u003e\n                \u003ca class=\"card-footer text-white clearfix small z-1\" href=\"#\"\u003e\n                  \u003cspan class=\"float-left\"\u003eView Details\u003c/span\u003e\n                  \u003cspan class=\"float-right\"\u003e\n                    \u003ci class=\"fa fa-angle-right\"\u003e\u003c/i\u003e\n                  \u003c/span\u003e\n                \u003c/a\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-xl-3 col-sm-6 mb-3\"\u003e\n              \u003cdiv class=\"card text-white bg-success o-hidden h-100\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                  \u003cdiv class=\"mr-5\"\u003eTotal Page Views \u003cspan id=\"total-pageviews\"\u003e123\u003c/span\u003e\u003c/div\u003e\n                \u003c/div\u003e\n                \u003ca class=\"card-footer text-white clearfix small z-1\" href=\"#\"\u003e\n                  \u003cspan class=\"float-left\"\u003eView Details\u003c/span\u003e\n                  \u003cspan class=\"float-right\"\u003e\n                    \u003ci class=\"fa fa-angle-right\"\u003e\u003c/i\u003e\n                  \u003c/span\u003e\n                \u003c/a\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-xl-3 col-sm-6 mb-3\"\u003e\n              \u003cdiv class=\"card text-white bg-danger o-hidden h-100\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                  \u003cdiv class=\"mr-5\"\u003eUnique Page Views \u003cspan id=\"unique-pageviews\"\u003e123\u003c/span\u003e\u003c/div\u003e\n                \u003c/div\u003e\n                \u003ca class=\"card-footer text-white clearfix small z-1\" href=\"#\"\u003e\n                  \u003cspan class=\"float-left\"\u003eView Details\u003c/span\u003e\n                  \u003cspan class=\"float-right\"\u003e\n                    \u003ci class=\"fa fa-angle-right\"\u003e\u003c/i\u003e\n                  \u003c/span\u003e\n                \u003c/a\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n    \n          \u003c!-- Example DataTables Card--\u003e\n          \u003cdiv class=\"card mb-3\"\u003e\n            \u003cdiv class=\"card-header\"\u003e\n              \u003ci class=\"fa fa-table\"\u003e\u003c/i\u003e User Sessions\u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n              \u003cdiv class=\"table-responsive\"\u003e\n                \u003ctable class=\"table table-bordered\" id=\"dataTable\" width=\"100%\" cellspacing=\"0\"\u003e\n                  \u003cthead\u003e\n                    \u003ctr\u003e\n                      \u003cth\u003eTime\u003c/th\u003e\n                      \u003cth\u003eIP Address\u003c/th\u003e\n                      \u003cth\u003eContinent\u003c/th\u003e\n                      \u003cth\u003eCountry\u003c/th\u003e\n                      \u003cth\u003eCity\u003c/th\u003e\n                      \u003cth\u003eOpertating System\u003c/th\u003e\n                      \u003cth\u003eBrowser\u003c/th\u003e\n                      \u003cth\u003e\u003c/th\u003e\n                    \u003c/tr\u003e\n                  \u003c/thead\u003e\n                  \u003ctfoot\u003e\n                    \u003ctr\u003e\n                      \u003cth\u003eTime\u003c/th\u003e\n                      \u003cth\u003eIP Address\u003c/th\u003e\n                      \u003cth\u003eContinent\u003c/th\u003e\n                      \u003cth\u003eCountry\u003c/th\u003e\n                      \u003cth\u003eCity\u003c/th\u003e\n                      \u003cth\u003eOpertating System\u003c/th\u003e\n                      \u003cth\u003eBrowser\u003c/th\u003e\n                      \u003cth\u003e\u003c/th\u003e\n                    \u003c/tr\u003e\n                  \u003c/tfoot\u003e\n                  \u003ctbody id=\"customer-table\"\u003e\n                  \u003c/tbody\u003e\n                \u003c/table\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-footer small text-muted\"\u003eUpdated at \u003cspan id=\"session-update-time\"\u003e\u003c/span\u003e\u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n    \n        \u003c!-- /.container-fluid--\u003e\n        \u003c!-- /.content-wrapper--\u003e\n    \n        \u003cfooter class=\"sticky-footer\"\u003e\n          \u003cdiv class=\"container\"\u003e\n            \u003cdiv class=\"text-center\"\u003e\n              \u003csmall\u003eCopyright © Your Website 2018\u003c/small\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/footer\u003e\n    \n        \u003c!-- Bootstrap core JavaScript--\u003e\n        \u003cscript src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdn.datatables.net/1.10.16/js/jquery.dataTables.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdn.datatables.net/1.10.16/js/dataTables.bootstrap4.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n    \n        \u003c!-- Custom scripts for this page--\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/app.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/sb-admin.js') }}\"\u003e\u003c/script\u003e\n      \u003c/div\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nFinally, open the `./templates/dashboard-single.html` file and paste the following:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"utf-8\"\u003e\n      \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e\n      \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n      \u003cmeta name=\"description\" content=\"\"\u003e\n      \u003cmeta name=\"author\" content=\"\"\u003e\n      \u003ctitle\u003eSB Admin - Start Bootstrap Template\u003c/title\u003e\n    \n      \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\"\u003e\n      \u003clink href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\" rel=\"stylesheet\" type=\"text/css\"\u003e\n      \u003clink href=\"https://cdn.datatables.net/1.10.16/css/dataTables.bootstrap4.min.css\" rel=\"stylesheet\"\u003e\n      \u003clink href=\"{{ url_for('static', filename='css/sb-admin.css') }}\" rel=\"stylesheet\"\u003e\n    \u003c/head\u003e\n    \u003cbody class=\"fixed-nav sticky-footer bg-dark\" id=\"page-top\"\u003e\n    \n      \u003c!-- Navigation--\u003e\n      \u003cnav class=\"navbar navbar-expand-lg navbar-dark bg-dark fixed-top\" id=\"mainNav\"\u003e\n        \u003ca class=\"navbar-brand\" href=\"index.html\"\u003eStart Bootstrap\u003c/a\u003e\n        \u003cbutton class=\"navbar-toggler navbar-toggler-right\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"\u003e\n          \u003cspan class=\"navbar-toggler-icon\"\u003e\u003c/span\u003e\n        \u003c/button\u003e\n        \u003cdiv class=\"collapse navbar-collapse\" id=\"navbarResponsive\"\u003e\n          \u003cul class=\"navbar-nav navbar-sidenav\" id=\"exampleAccordion\"\u003e\n            \u003cli class=\"nav-item\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Dashboard\"\u003e\n              \u003ca class=\"nav-link\" href=\"/dashboard\"\u003e\n                \u003ci class=\"fa fa-fw fa-dashboard\"\u003e\u003c/i\u003e\n                \u003cspan class=\"nav-link-text\"\u003eDashboard\u003c/span\u003e\n              \u003c/a\u003e\n            \u003c/li\u003e\n          \u003c/ul\u003e\n        \u003c/div\u003e\n      \u003c/nav\u003e\n      \u003cdiv class=\"content-wrapper\"\u003e\n        \u003cdiv class=\"container-fluid\"\u003e\n          \u003c!-- Breadcrumbs--\u003e\n          \u003col class=\"breadcrumb\"\u003e\n            \u003cli class=\"breadcrumb-item\"\u003e\n              \u003ca href=\"#\"\u003eDashboard\u003c/a\u003e\n            \u003c/li\u003e\n            \u003cli class=\"breadcrumb-item active\"\u003eMy Session\u003c/li\u003e\n          \u003c/ol\u003e\n          \u003c!-- Example DataTables Card--\u003e\n          \u003cdiv class=\"card mb-3\"\u003e\n            \u003cdiv class=\"card-header\"\u003e\n              \u003ci class=\"fa fa-table\"\u003e\u003c/i\u003e User Sessions\u003c/div\u003e\n            \u003cdiv class=\"card-body\"\u003e\n              \u003cdiv class=\"table-responsive\"\u003e\n                \u003ctable class=\"table table-bordered\" id=\"userSessions\" width=\"100%\" cellspacing=\"0\"\u003e\n                  \u003cthead\u003e\n                    \u003ctr\u003e\n                      \u003cth\u003eTime\u003c/th\u003e\n                      \u003cth\u003ePage\u003c/th\u003e\n                      \u003cth\u003eSession_id\u003c/th\u003e\n                      \u003cth\u003eNo of Visits\u003c/th\u003e\n                      \u003cth\u003e\u003c/th\u003e\n                    \u003c/tr\u003e\n                  \u003c/thead\u003e\n                  \u003ctfoot\u003e\n                    \u003ctr\u003e\n                      \u003cth\u003eTime\u003c/th\u003e\n                      \u003cth\u003ePage\u003c/th\u003e\n                      \u003cth\u003eSession_id\u003c/th\u003e\n                      \u003cth\u003eNo of Visits\u003c/th\u003e\n                      \u003cth\u003e\u003c/th\u003e\n                    \u003c/tr\u003e\n                  \u003c/tfoot\u003e\n                  \u003ctbody id=\"customer-table\"\u003e\n                    {% for row in data %}\n                      \u003ctr\u003e\n                        \u003ctd\u003e{{ row.first_visited }}\u003c/td\u003e\n                        \u003ctd\u003e{{ row.name }}\u003c/td\u003e\n                        \u003ctd\u003e{{ row.session }}\u003c/td\u003e\n                        \u003ctd\u003e{{ row.visits }}\u003c/td\u003e\n                      \u003c/tr\u003e\n                    {% endfor %}\n                  \u003c/tbody\u003e\n                \u003c/table\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-footer small text-muted\"\u003eUpdated at \u003cspan id=\"session-update-time\"\u003e\u003c/span\u003e\u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003c!-- /.container-fluid--\u003e\n        \u003c!-- /.content-wrapper--\u003e\n        \u003cfooter class=\"sticky-footer\"\u003e\n          \u003cdiv class=\"container\"\u003e\n            \u003cdiv class=\"text-center\"\u003e\n              \u003csmall\u003eCopyright © Your Website 2018\u003c/small\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/footer\u003e\n        \u003c!-- Scroll to Top Button--\u003e\n        \u003ca class=\"scroll-to-top rounded\" href=\"#page-top\"\u003e\n          \u003ci class=\"fa fa-angle-up\"\u003e\u003c/i\u003e\n        \u003c/a\u003e\n        \u003c!-- Logout Modal--\u003e\n        \u003cdiv class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\"\u003e\n          \u003cdiv class=\"modal-dialog\" role=\"document\"\u003e\n            \u003cdiv class=\"modal-content\"\u003e\n              \u003cdiv class=\"modal-header\"\u003e\n                \u003ch5 class=\"modal-title\" id=\"exampleModalLabel\"\u003eReady to Leave?\u003c/h5\u003e\n                \u003cbutton class=\"close\" type=\"button\" data-dismiss=\"modal\" aria-label=\"Close\"\u003e\n                  \u003cspan aria-hidden=\"true\"\u003e×\u003c/span\u003e\n                \u003c/button\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"modal-body\"\u003eSelect \"Logout\" below if you are ready to end your current session.\u003c/div\u003e\n              \u003cdiv class=\"modal-footer\"\u003e\n                \u003cbutton class=\"btn btn-secondary\" type=\"button\" data-dismiss=\"modal\"\u003eCancel\u003c/button\u003e\n                \u003ca class=\"btn btn-primary\" href=\"login.html\"\u003eLogout\u003c/a\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003c!-- Bootstrap core JavaScript--\u003e\n        \u003cscript src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n        \u003cscript type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdn.datatables.net/1.10.16/js/jquery.dataTables.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdn.datatables.net/1.10.16/js/dataTables.bootstrap4.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n    \n        \u003cscript src=\"{{ url_for('static', filename='js/app.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='js/sb-admin.js') }}\"\u003e\u003c/script\u003e\n      \u003c/div\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThe markup we have written in all four files define the structure of the elements on the DOM when each page is rendered. We have also loaded the JavaScript Pusher package in the `dashboard.html` and `dashboard-single.html` files.\n\nNext, we will listen for Pusher updates on the frontend of our application using the Pusher magic.\n\n## Listening for realtime updates\n\nIn this step, we will listen for Pusher events from the Backend API and use the data to update the traffic monitor dashboard pages in realtime. First, let’s create a new file — `app.js`— in the `js` folder that is located in the `static` directory.\n\nNext, open the `./static/js/app.js` file and paste the following:\n\n``` javascript\n    // Configure Pusher instance\n    const pusher = new Pusher('PUSHER_APP_KEY', {\n      cluster: 'PUSHER_APP_CLUSTER',\n      encrypted: true\n    });\n    \n    var months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    \n    $(document).ready(function(){\n        var dataTable = $(\"#dataTable\").DataTable()\n        // var userSessions = $(\"#userSessions\").DataTable()\n        var pages = $(\"#pages\").DataTable()\n    \n        axios.get('/get-all-sessions')\n        .then(response =\u003e {\n              response.data.forEach((data) =\u003e {\n                  insertDatatable(data)\n              })\n          var d = new Date();\n          var updatedAt = `${d.getFullYear()}/${months[d.getMonth()]}/${d.getDay()} ${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`\n          document.getElementById('session-update-time').innerText = updatedAt\n        })\n    \n        var sessionChannel = pusher.subscribe('session');\n        sessionChannel.bind('new', function(data) {\n            insertDatatable(data)\n        });\n    \n        var d = new Date();\n        var updatedAt = `${d.getFullYear()}/${months[d.getMonth()]}/${d.getDay()} ${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`\n        document.getElementById('session-update-time').innerText = updatedAt\n    });\n    \n    function insertDatatable(data){\n        var dataTable = $(\"#dataTable\").DataTable()\n        dataTable.row.add([\n            data.time,\n            data.ip,\n            data.continent,\n            data.country,\n            data.city,\n            data.os,\n            data.browser,\n            `\u003ca href=${\"/dashboard/\"+data.session}\u003eView pages visited\u003c/a\u003e`\n          ]);\n          dataTable.order([0, 'desc']).draw();\n    }\n```\n\n\u003e Replace the `PUSHER_APP_*` keys with the keys on your Pusher dashboard.\n\nIn the code above, first, we register a new instance of Pusher then we use [Axios](https://www.npmjs.com/package/axios) to get all the sessions that have been saved to the database when the document is ready. We also created a new Pusher channel called `sessionChannel` and subscribed to a session event.\n\nWe defined a function `insertDatatable` and it inserts a new user record whenever Pusher sends an update.\n\nThat is everything! We can run the application now using this command:\n\n```\n    $ flask run\n```\n\nNow we can visit [127.0.0.1:5000](http://127.0.0.1:5000) to see the website and [127.0.0.1:5000/dashboard](http://127.0.0.1:5000/dashboard) to see the traffic monitor dashboard, here’s a display of what both screens look like when viewed side by side.\n\n![python-web-traffic-demo](//images.ctfassets.net/1es3ne0caaid/173irZ04McmEIE0K8cQoew/5fb82398a74f83f8353e95c7fc5a935a/python-web-traffic-demo.gif)\n\n## Conclusion\n\nIn this tutorial, we have learned how to integrate a realtime traffic monitor with our website using Python’s Flask, Pusher and JavaScript. \n\nThe source code for this tutorial is available on [GitHub.](https://github.com/neoighodaro/python-pusher-traffic-monitor)","metaTitle":"Build a web traffic monitor with Python","metaDescription":"Use Flask and JavaScript to create a web traffic monitoring dashboard. See realtime updates as visitors view the demo website."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2qcRMPzJ6QGCC68gKEw8CU","type":"Entry","createdAt":"2018-06-27T11:26:11.397Z","updatedAt":"2019-01-02T15:36:43.539Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app with Ionic featuring sentiment analysis","url":"chat-app-ionic-sentiment","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/HackAfro/ionic-chat-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-06-24","description":"Build a chat app for mobile using Ionic and Cordova. Code with TypeScript, targeting mobile devices. Use Node for the backend. Implement sentiment analysis to provide emoji suggestions.","prerequisite":"You will need Node and npm installed on your machine. A basic understanding of Angular, Node and Ionic will be helpful.","content":"## Introduction\n\nSentiment Analysis examines the problem of studying texts, uploaded by users on microblogging platforms or electronic businesses.  It is based on the opinions they have about a product, service or idea. Using sentiment analysis, we can suggest emojis to be used as replies to messages based on the context of the received message. \n\nUsing [Ionic](https://ionicframework.com/), you can create a mobile application using web technologies and use a wide array of existing components. Using [Pusher](https://pusher.com), we can enable realtime messaging in the chat using pusher’s pub/sub pattern. \n\nWe’ll be building a realtime chat application using Pusher, Ionic and the [S](https://github.com/thisandagain/sentiment)[entiment](https://github.com/thisandagain/sentiment) library for emoji suggestions based on the context of messages received.\n\nHere’s a demo of the final product:\n\n![ionic-chat-sentiment-demo-1](//images.ctfassets.net/1es3ne0caaid/1jcFQgp60yy2Cc64kw6w62/0bd5e4c9ff384b493ac719686e270142/ionic-chat-sentiment-demo-1.png)\n![ionic-chat-sentiment-demo-2](//images.ctfassets.net/1es3ne0caaid/1KTliA6iskG2AgWOU0s22E/890d13657887efeecdbb3f4988c18895/ionic-chat-sentiment-demo-2.png)\n\n## Prerequisites\n\nTo follow this tutorial a basic understanding of [Angular](https://angular.io), Ionic and Node.js is required. Please ensure that you have Node and npm installed before you begin.\n\nWe’ll be using these tools to build out our application:\n\n- [Express](https://expressjs.com/) \n- [Node](https://nodejs.org/en/)\n- [Pusher](https://pusher.com)\n- [Ionic](https://ionicframework.com/)\n- [Sentiment](https://github.com/thisandagain/sentiment)\n\nWe’ll be sending messages to the server and using [Pusher’s](https://pusher.com) pub/sub pattern, we’ll listen to and receive messages in realtime. To make use of Pusher you’ll have to create an account [here](https://pusher.com). \n\nAfter account creation, visit the dashboard. Click **Create new Channels app**, fill out the details, click **Create my app**, and make a note of the details on the **App Keys** tab.\n\nLet’s build!\n\n## Setup and folder structure\n\nWe’ll initialize our project using the Ionic CLI (command line interface). First, install the CLI by running `npm install -g ionic` in your terminal. [NPM](https://www.npmjs.com/) is a package manager used for installing packages. It will be available on your PC if you have [Node](https://nodejs.org/) installed.\n\nTo create a new Ionic project called `chat-app` using the CLI, open a terminal and run:   \n\n```\n    ionic start chat-app blank\n```\n\nThe command is simply telling the CLI to create a new project called `chat-app` without a template. \n\nFollow the prompt and integrate your app with Cordova to target IOS and Android.\n\n![ionic-chat-sentiment-cordova](//images.ctfassets.net/1es3ne0caaid/1fgioEsEgEg8aY6qs04iYq/3ff23aaeaa45ba8573cdf28fc193193e/ionic-chat-sentiment-cordova.png)\n\n Type **Y** to integrate Cordova into the application. The next prompt will ask if you want to integrate Ionic pro into the application. If you have a pro account type **Y** and **N** if you don’t.\n\nThe Ionic team provides three ready made starter templates. You can check out the rest of the templates [here](https://ionicframework.com/getting-started)\n\nOpen the newly created folder, your folder structure should look something like this:\n\n```\n    chat-app/\n      resources/\n      node_modules/\n      src/\n        app/\n          app.component.html\n          app.module.ts\n          app.scss\n          ...\n```\n\nOpen a terminal inside the project folder and start the application by running `ionic serve`. A browser window should pop up and you should see a page like this.\n\n![ionic-chat-sentiment-ionic-serve](//images.ctfassets.net/1es3ne0caaid/cZJy8Cc9WgkoiOEKI44uA/8a6010cf3b3515127f486c76c18f33de/ionic-chat-sentiment-ionic-serve.png)\n\n## Installing dependencies\n\nNext, run the following commands in the root folder of the project to install dependencies.\n\n```\n    // install depencies required to build the server\n    npm install express body-parser dotenv pusher sentiment uuid \n    \n    // front-end dependencies\n    npm install pusher-js @types/pusher-js\n```\n\n## Building our server\n\nNow that we have our application running, let’s build out our server.\n\nTo do this we’ll make user of [Express](https://expressjs.com). Express is a fast, unopinionated, minimalist web framework for [Node.js](https://nodejs.org/en/). We’ll use this to receive requests from our Angular application.\n\nCreate a file called `server.js` in the root of the project and update it with the code snippet below:\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: process.env.PUSHER_CLUSTER,\n      encrypted: true,\n    });\n    const app = express();\n    const port = process.env.PORT || 4000;\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```\n\n\nWe referenced three packages in the snippet above, `body-parser`, `pusher` and `dotenv`. Let’s get into what each one does.\n\n\n-  body-parser is a package used to parse incoming request bodies in a middleware before your handlers, available under the `req.body` property.\n- dotenv is a zero-dependency module that loads environment variables from a `.env` file into `[process.env](https://nodejs.org/docs/latest/api/process.html#process_process_env)`. This package is used so sensitive information like the `appId` and `secret` aren’t added to our codebase directly. \n- The dotenv package will load the variables provided in our `.env` file into our environment.\n\nThe `dotenv` package should always be initialized very early in the application at the top of the file. This is because we need the environment variables available throughout the application.\n\nThe calls to our endpoint will be coming in from a different origin, therefore we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\nAlso, you’ll notice that we installed [Pusher](https://pusher.com) library as a dependency. Visit the [Pusher](https://pusher.com) website to create a Pusher account if you haven’t done so already\n\nCreate a `.env` file to load the variables we’ll be needing into the Node environment. The file should be in the root folder of your project. Open the file and update it with the code below.\n\n```\n    // .env\n    \n    PUSHER_APP_ID=\u003cAPP_ID\u003e\n    PUSHER_KEY=\u003cPUSHER_KEY\u003e\n    PUSHER_SECRET=\u003cPUSHER_SECRET\u003e\n    PUSHER_CLUSTER=\u003cPUSHER_CLUSTER\u003e\n```\n\n\u003e **P.S:** Please ensure you replace the placeholder values above with your Pusher `appId`, `key`, `secret` and `cluster`.\n\n\nThis is a standard Node application configuration, nothing specific to our app.\n\n### Sending messages\n\nTo enable users send and receive messages, we’ll create a route to handle incoming requests. Update your `server.js`  file with the code below.\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    \n    ...\n    \n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.post('/messages', (req, res) =\u003e {\n      const { body } = req;\n      const { text, id } = body;\n      const data = {\n        text,\n        id,\n        timeStamp: new Date(),\n      };\n      \n      pusher.trigger('chat', 'message', data);\n      res.json(data);\n    });\n     ...\n```\n\n- We created a `POST /messages` route which, when hit, triggers a Pusher event.\n- We used [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) to get the body of the request, we also got the `text` and `id` in the request body sent by the user.\n- The `data` object will contain the `text` and `id` sent by the user accompanied by a timestamp. \n-  The trigger is achieved using the `trigger` method which takes the trigger identifier(`chat`), an event name (`message`), and a payload(`data`).\n- The payload can be any value, but in this case, we have a JS object.\n- The response will contain the `data` object.\n\n\n### Sentiment analysis\n\n\u003e Sentiment analysis refers to the use of [natural language processing](https://en.wikipedia.org/wiki/Natural_language_processing), [text analysis](https://en.wikipedia.org/wiki/Text_analytics), [computational linguistics](https://en.wikipedia.org/wiki/Computational_linguistics), and [biometrics](https://en.wikipedia.org/wiki/Biometrics) to systematically identify, extract, quantify, and study effective states and subjective information. - [Wikipedia](https://en.wikipedia.org/wiki/Sentiment_analysis)\n\nYou can read up a bit about sentiment analysis using the following links below:\n\n\n- [Brandwatch](https://www.brandwatch.com/blog/understanding-sentiment-analysis/)\n- [TowardsDataScience](https://towardsdatascience.com/sentiment-analysis-concept-analysis-and-applications-6c94d6f58c17)\n\nUsing sentiment analysis, we’ll analyse the messages sent to determine the attitude of the sender. With the data gotten from the analysis, we’ll determine the emojis to suggest to the user. \n\nWe’ll use the [Sentiment](https://github.com/thisandagain/sentiment) JavaScript library for analysis. The next step is to update our `POST /messages` route to include analysis of the messages being sent in. Update your `server.js` with the code below.\n\n``` javascript\n    // server.js\n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const Sentiment = require('sentiment');\n    const sentiment = new Sentiment();\n    \n    ...\n    \n    app.post('/messages', (req, res) =\u003e {\n      const { body } = req;\n      const { text, id } = body;\n      const result = sentiment.analyze(text);\n      const comparative = result.comparative;\n      const tone =\n        comparative \u003e= 0 ? (comparative \u003e= 1 ? 'positive' : 'neutral') : 'negative';\n      const data = {\n        text,\n        id,\n        timeStamp: new Date(),\n        sentiment: {\n          tone,\n          score: result.score,\n        },\n      };\n      pusher.trigger('chat', 'message', data);\n      res.json(data);\n    });\n    \n    ...\n```\n\n\n\n- Include the Sentiment library in the project\n- `result`: analyze the message sent in by the user to determine the context of the message.\n- `comparative`: this is the comparative score gotten after analyzing the message. This score is used to determine if a message is `positive`, `negative` or `neutral`.\n- `tone`: this variable is the context of the message gotten after analysis. This will be `negative` if the comparative score is below `0`, `neutral` if the score is above `0` but below `1`. The tone is `positive` if the comparative score is `1` and above.\n- A new object(`sentiment`) property is added to the response data containing the message’s tone and score.\n\nYou can now start the server by running `node server.js` in a terminal in the root folder of the project.\n\n\n## Chat view\n\nLet’s build out our chat interface. We’ll create a `chat` component to hold the chat interface. Create a folder called `components` in the `src/` directory. This folder will hold all our components.\n\nIn the `components`  folder, create a folder named `chat`, then proceed to create three files in the chat folder. `chat.ts`, `chat.scss` and `chat.html`. \n\nNow let’s go ahead and update the newly created chat component files. Open the `chat.html`  file and update it with the code snippet below: \n\n``` html\n    // src/components/chat/chat.html\n    \n    \u003cdiv class=\"main\"\u003e\n      \u003cdiv class=\"chat-box\"\u003e\n        \u003cdiv class=\"message-area\"\u003e\n          \u003cdiv class=\"message\" *ngFor=\"let message of messages\" [ngClass]=\"getClasses(message.type)\"\u003e\n            \u003cp\u003e{{message.text}}\u003c/p\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"emo-area\"\u003e\n          \u003c!-- emoji-panel component comes here --\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"input-area\"\u003e\n          \u003cform (submit)=\"sendMessage()\" name=\"messageForm\" #messageForm=\"ngForm\"\u003e\n            \u003cion-input type=\"text\" name=\"message\" id=\"message\" [(ngModel)]=\"message\" placeholder=\"Say something nice...\"\u003e\u003c/ion-input\u003e\n            \u003cbutton\u003e\n              \u003cion-icon name=\"send\"\u003e\u003c/ion-icon\u003e\n            \u003c/button\u003e\n          \u003c/form\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\n\nIn the code snippet above:\n\n- We loop through the available `messages` in the `.message-area`. \n- We have a form containing an `ion-input` element and a submit button.\n- We are making use of the [ionicons](https://ionicons.com/) library.\n\nOpen the `chat.ts` file and update with the code below:\n\n``` typescript\n    // src/components/chat/chat.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { HttpClient } from '@angular/common/http';\n    import { v4 } from 'uuid';\n    \n    interface Message {\n      id: string;\n      text: string;\n      timeStamp: Date;\n      type: string;\n    }\n    \n    @Component({\n      selector: 'chat',\n      templateUrl: 'chat.html',\n    })\n    \n    export class ChatComponent implements OnInit {\n      constructor(private http: HttpClient) {}\n      \n      messages: Array\u003cMessage\u003e = [];\n      message: string = '';\n      lastMessageId;\n      \n      sendMessage() {\n        if (this.message !== '') {\n          // Assign an id to each outgoing message. It aids in the process of differentiating between outgoing and incoming messages\n          this.lastMessageId = v4();\n          const data = {\n            id: this.lastMessageId,\n            text: this.message,\n          };\n          \n          this.http\n            .post(`http://localhost:4000/messages`, data)\n            .subscribe((res: Message) =\u003e {\n              const message = {\n                ...res,\n                // The message type is added to distinguish between incoming and outgoing             messages. It also aids with styling of each message type\n                type: 'outgoing',\n              };\n              this.messages = this.messages.concat(message);\n              this.message = '';\n            });\n            \n        }\n      }\n      \n      // This method adds classes to the element based on the message type\n      getClasses(messageType) {\n        return {\n          incoming: messageType === 'incoming',\n          outgoing: messageType === 'outgoing',\n        };\n      }\n      \n      ngOnInit() {\n      }\n    }\n```\n\n\n`sendMessage`: this method uses the native `HttpClient` to make requests to the server. The `POST` method takes a URL and the request `body` as parameters. We then append the data returned to the array of messages. We make use of a package called `[uuid](https://www.npmjs.com/package/uuid)` to give each message a unique `id`. \n\n`getClasses` : this method generates classes for a message element based on the `messageType`.\n\nTo make use of the `HttpClient` service, we’ll need to import the `HttpClientModule` and `HttpClient` into the `app.module.ts` file. Also, we’ll need to register our newly created component, we’ll add it to the declarations array.\n\n``` typescript\n    // src/app/app.module.ts\n    ...\n    import { ChatComponent } from '../components/chat/chat';\n    import { HttpClientModule, HttpClient } from '@angular/common/http';\n    \n    @NgModule({\n      declarations: [\n        MyApp,\n        HomePage,\n        ChatComponent,\n      ],\n      imports: [BrowserModule, IonicModule.forRoot(MyApp), HttpClientModule],\n      ...\n      providers: [\n        StatusBar,\n        SplashScreen,\n        { provide: ErrorHandler, useClass: IonicErrorHandler },\n        HttpClient,\n      ],\n    })\n    export class AppModule {}\n    \n      ...\n```\n\n### Styling\n\nOpen the `chat.scss` file and update it with the styles below: \n\n``` css\n    // src/components/chat/chat.scss\n    \n    .main {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      height: 100%;\n      .chat-box {\n        width: 100%;\n        height: 100%;\n        position: relative;\n        background: #f9fbfc;\n        .message-area {\n          max-height: 90%;\n          height: 90%;\n          overflow: auto;\n          padding: 15px 10px;\n          .message {\n            p {\n              color: #8a898b;\n              font-size: 13px;\n              font-weight: bold;\n              margin: 0px;\n              max-width: 95%;\n              min-width: 55%;\n              box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.1);\n              padding: 10px 15px 10px 7px;\n              margin: 5px 0;\n              background: white;\n            }\n          }\n          .message.incoming {\n            display: flex;\n            flex-direction: column;\n            justify-content: flex-start;\n            align-items: flex-start;\n            p {\n              color: white;\n              border-radius: 0 11px 11px 11px;\n              background: #B9C0E9;\n            }\n          }\n          .message.outgoing {\n            display: flex;\n            flex-direction: column;\n            justify-content: flex-end;\n            align-items: flex-end;\n            p {\n              border-radius: 11px 11px 0 11px;\n            }\n          }\n        }\n        .emo-area {\n          position: absolute;\n          bottom: 50px;\n          left: 0;\n          width: 100%;\n          padding: 3px 10px;\n        }\n      }\n    }\n```\n\n\nThis first SCSS snippet styles the `.chat-area`, including how messages should look. The next snippet will style the input area and the send button. The styles below should be nested within the `.main` style.\n\n``` css\n    // src/components/chat/chat.scss\n    \n    .input-area {\n          position: absolute;\n          bottom: 1px;\n          left: 0;\n          width: 100%;\n          height: 50px;\n          background: white;\n          form {\n            display: flex;\n            height: 100%;\n            \n            ion-input {\n              width: 82%;\n              border: none;\n              padding: 5px 10px;\n              color: #8a898b;\n              font-size: 14px;\n              font-weight: bold;\n              font-family: 'Titillium Web', sans-serif;\n              background: inherit;\n              \u0026:focus {\n                outline: none;\n              }\n            }\n            button {\n              width: 18%;\n              border: none;\n              color: #8a898b;\n              opacity: 0.9;\n              display: flex;\n              justify-content: center;\n              align-items: center;\n              cursor: pointer;\n              background: inherit;\n              ion-icon {\n                font-size: 3rem;\n              }\n            }\n          }\n        }\n```\n\n\nLet’s include the `chat` component in the home page. In the `pages` directory, you’ll find the `home` folder, open the `home.html` file in the home folder and replace the content with the snippet below:\n\n``` html\n    // src/pages/home/home.html\n    \n    \u003cion-header\u003e\n      \u003cion-navbar color=\"light\"\u003e\n        \u003cion-title\u003eChat\u003c/ion-title\u003e\n      \u003c/ion-navbar\u003e\n    \u003c/ion-header\u003e\n    \n    \u003cion-content\u003e\n        \u003cchat\u003e\u003c/chat\u003e\n    \u003c/ion-content\u003e\n```\n\nVisit http://localhost:8100 in your browser to view the chat interface. It should be similar to the screenshot below:\n\n![ionic-chat-sentiment-demo-3](//images.ctfassets.net/1es3ne0caaid/6Qi79HF0xq2ks4OUI06KE4/58cfaccc1d524fb9949c99b9182fddce/ionic-chat-sentiment-demo-3.png)\n\n## Introducing Pusher and sending messages\n\nSo far we have an application that allows users send messages but the messages aren’t delivered in realtime. To solve this problem, we’ll include the [Pusher](https://pusher.com) library.\n\nLet’s create a Pusher service to be used application wide. The Angular CLI can aid in the service creation.  Open a terminal in your project’s root folder and run the following command.\n\n```\n    ionic generate provider pusher\n```\n\nThis command simply tells the CLI to generate a provider named `pusher` . Now open the `pusher.ts` file in the `src/providers/pusher`  directory and update it with the code snippet below:\n\n``` typescript\n    // src/providers/pusher/pusher.ts\n    \n    import { Injectable } from '@angular/core';\n    import Pusher from 'pusher-js';\n    \n    @Injectable()\n    export class PusherProvider {\n      constructor() {\n        var pusher = new Pusher('\u003cPUSHER_KEY\u003e', {\n          cluster: '\u003cPUSHER_CLUSTER\u003e',\n          encrypted: true,\n        });\n        this.channel = pusher.subscribe('chat');\n      }\n      channel;\n      \n      public init() {\n        return this.channel;\n      }\n    }\n```\n\n\n- First, we initialize Pusher in the constructor. \n- The  `init` method returns the Pusher property we created. \n\n\u003e **Note:** Ensure you replace the `PUSHER_KEY` and `PUSHER_CLUSTER` string with your actual Pusher credentials.\n  \nWe’ll make use of this service in our component, by binding to the message event and appending the returned message into the list of messages. This will be done in the `ngOnInit` lifecycle.\n\n``` typescript\n    // src/components/chat/chat.ts\n    ...\n    import { v4 } from 'uuid';\n    import { PusherProvider } from '../../providers/pusher/pusher';\n    \n    ...\n    // Include the PusherProvider in the component's constructor\n    constructor(private http: HttpClient, private pusher: PusherProvider){}\n      ...\n      \n      ngOnInit() {\n        const channel = this.pusher.init();\n        channel.bind('message', (data) =\u003e {\n          if (data.id !== this.lastMessageId) {\n            const message: Message = {\n              ...data,\n              type: 'incoming',\n            };\n            this.messages = this.messages.concat(message);\n          }\n        });\n      }\n    }\n```\n\n\n## Emoji suggestions\n\nTo display emoji suggestions during a chat session, we’ll make use of the `sentiment` param being sent from the server as a response for each message request. The data being sent from the server should be similar to the snippet below.\n\n``` json\n    {\n      id: '83d3dd57-6cf0-42dc-aa5b-2d997a562b7c',\n      text: 'i love pusher',\n      timeStamp: '2018-04-27T15:04:24.574Z'\n      sentiment: {\n        tone: 'positive',\n        score: 3\n      }\n    }\n```\n\n\nCreate an `emoji` component that will hold the emoji section. This component will handle the display of emojis based on the tone of each message received. Create a folder `emoji-panel` in the `components` directory and in that directory,  create three files, `emoji-panel.ts`, `emoji-panel.scss` and `emoji-panel.html`\n\nReplace the contents of the `emoji-panel.html` in the `src/components/emoji-panel` directory with the code snippet below.\n\n``` html\n    // src/components/emoji-panel/emoji-panel.html\n    \n    \u003cdiv class=\"emojis\" [hidden]=\"!showEmojis\" [attr.aria-hidden]=\"!showEmojis\"\u003e\n      \u003cdiv class=\"emoji-list positive\" *ngIf=\"result.tone === 'positive'\"\u003e\n        \u003cspan class=\"emoji\" *ngFor=\"let emoji of emojiList.positive; let i = index;\" (click)=\"onClick('positive', i)\"\u003e\n          {{codePoint(emoji)}}\n        \u003c/span\u003e\n      \u003c/div\u003e\n      \n      \u003cdiv class=\"emoji-list neutral\" *ngIf=\"result.tone === 'neutral'\"\u003e\n        \u003cspan class=\"emoji\" *ngFor=\"let emoji of emojiList.neutral; let j = index;\" (click)=\"onClick('neutral', j)\"\u003e\n          {{codePoint(emoji)}}\n        \u003c/span\u003e\n      \u003c/div\u003e\n      \n      \u003cdiv class=\"emoji-list negative\" *ngIf=\"result.tone === 'negative'\"\u003e\n        \u003cspan class=\"emoji\" *ngFor=\"let emoji of emojiList.negative; let k = index;\" (click)=\"onClick('negative', k)\"\u003e\n          {{codePoint(emoji)}}\n        \u003c/span\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\n\n`attr.aria-hidden`: here we set the accessibility attribute of the element to either `true` or `false` based on the `showEmojis` variable.\n\n\nUpdate the `emoji-panel.ts` with code below:\n\n``` typescript\n    // src/components/emoji-panel/emoji-panel.ts\n    import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n    \n    @Component({\n      selector: 'emoji-panel',\n      templateUrl: 'emoji-panel.html',\n    })\n    \n    export class EmojiPanelComponent implements OnInit {\n      constructor() {}\n      @Input() result = {};\n      @Input() showEmojis: boolean = false;\n      @Output() onEmojiSelect: EventEmitter\u003cstring\u003e = new EventEmitter();\n    \n     emojiList = {\n        positive: [128512, 128513, 128536, 128516],\n        neutral: [128528, 128529, 128566, 129300],\n        negative: [128543, 128577, 128546, 128542],\n      };\n      codePoint(emojiCodePoint) {\n        return String.fromCodePoint(emojiCodePoint);\n      }\n    \n      onClick(reaction, index) {\n        const emoji = this.emojiList[reaction][index];\n        this.onEmojiSelect.emit(emoji);\n      }\n    \n      ngOnInit() {}\n    }\n```\n\n\n`emojiList`:  this is an object containing a list of unicode characters for each emoji that’ll be used. There’s a list for each message tone. \n`codePoint`: this method returns an emoji from the codepoint passed in. It uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint) introduced in ES2015.\n`showEmojis`**:** an input variable from the parent component(`chat`) to determine the visibility of the emoji panel\n`onClick`**:**  this method takes to parameters. The `reaction` param is used to select the list of emojis to check for the provided `index`. The selected emoji is then emitted to the parent component. \n\nAdd the following styles to the `emoji-panel.scss` file.\n\n``` css\n    // /src/components/emoji-panel/emoji-panel.scss\n    \n    .emojis {\n      \u0026[aria-hidden='true'] {\n        animation: slideOutDown 0.7s;\n      }\n      \u0026[aria-hidden='false'] {\n        animation: slideInUp 0.7s;\n      }\n      .emoji-list {\n        display: flex;\n        .emoji {\n          margin: 0 5px;\n          cursor: pointer;\n        }\n      }\n    }\n    @keyframes slideInUp {\n      from {\n        transform: translate3d(0, 100%, 0);\n        visibility: visible;\n      }\n      to {\n        transform: translate3d(0, 0, 0);\n      }\n    }\n    @keyframes slideOutDown {\n      from {\n        transform: translate3d(0, 0, 0);\n      }\n      to {\n        visibility: hidden;\n        transform: translate3d(0, 100%, 0);\n      }\n    }\n```\n\n\nAfter creating the `emoji-panel` component, the next step is to register it in the `app.module.ts`  file and then add it to our `chat` component. Update the `app.module.ts`  file and the chat component to include the `emoji-panel`.\n\n``` typescript\n    // src/app/app.module.ts\n    \n    ...\n    import { PusherProvider } from '../providers/pusher/pusher';\n    import { EmojiPanelComponent } from '../components/emoji-panel/emoji-panel';\n    \n    @NgModule({\n      declarations: [\n        MyApp,\n        HomePage,\n        ChatComponent,\n        EmojiPanelComponent\n      ],\n      ...\n     })\n    export class AppModule {}\n```\n\n\nThen include the `emoji-panel` component in the `chat.html` file.\n\n``` html\n    // chat.component.html\n    ...\n    \u003cdiv class=\"main\"\u003e\n      ...\n      \u003cdiv class=\"emo-area\"\u003e\n        \u003cemoji-panel [showEmojis]=\"showEmojis\" [result]=\"score\" (onEmojiSelect)=\"selectEmoji($event)\"\u003e\u003c/emoji-panel\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"input-area\"\u003e\n        ...\n      \u003c/div\u003e  \n    \u003c/div\u003e\n```\n\n\nLet’s update the `chat.ts` to display or hide the emoji-panel based on the sentiment of each message.\n\nOpen the `chat.ts` file and update it like so:\n\n``` typescript\n    // src/components/chat/chat.ts\n    \n    ...\n      messages: Array\u003cMessage\u003e = [];\n      message: string = '';\n      lastMessageId;  \n      showEmojis = false;\n      score = {\n        tone: '',\n        score: 0,\n      };\n      \n      sendMessage() {\n        if (this.message !== '') {\n          this.lastMessageId = v4();\n          this.showEmojis = false;\n          ...\n        }\n      }\n      \n      selectEmoji(e) {\n        const emoji = String.fromCodePoint(e);\n        this.message += ` ${emoji}`;\n        this.showEmojis = false;\n      }\n      ...\n      \n      ngOnInit() {\n        const channel = this.pusher.init();\n        channel.bind('message', (data) =\u003e {\n          if (data.id !== this.lastMessageId) {\n            const message: Message = {\n              ...data,\n              type: 'incoming',\n            };\n            this.showEmojis = true;\n            this.score = data.sentiment;\n            this.messages = this.messages.concat(message);\n          }\n        });\n      }\n    ...\n```\n\n\n \n`selectEmoji` : this method gets the emoji from the codepoint passed as a parameter and then appends the selected emoji to the current message. Finally it hides the emoji panel by setting `showEmojis`  to false.\n\nIn the Pusher event callback, we set the `showEmojis` property to `true`. In the same callback, we assign the `data's` sentiment property to the `score` variable.\n\nBy now our application should provide emoji suggestions for received messages.\n\n\n## Testing on mobile devices\n\nTo test the application on your mobile device, download the [IonicDevApp](https://ionicframework.com/docs/pro/devapp/) on your mobile device. Make sure your computer and your mobile device are connected to the same network. When you open the IonicDevApp, you should see Ionic apps running on your network listed. \n\n\n\u003e **Note:** Both the server(`node server`), ngrok for proxying our server and the Ionic dev server(`ionic serve`) must be running to get the application working. Run the commands in separate terminal sessions if you haven’t done so already.\n\n![ionic-chat-sentiment-in-app](//images.ctfassets.net/1es3ne0caaid/2OsgMWFKTC8ksw2wMCqEkI/983d5ae2843c21149a10fb468393ba2b/ionic-chat-sentiment-in-app.png)\n\nTo view the application, click on it and you should see a similar view to what was in the browser. Sending messages to the server might have worked in the browser but localhost doesn’t exist on your phone, so we’ll need to create a proxy to be able to send messages from mobile. \n\n\n## Using Ngrok as a proxy\n\nTo create a proxy for our server, we’ll download Ngrok. Visit the [download](https://ngrok.com/download) page on the Ngrok website. Download the client for your OS. Unzip it and run the following command in the folder where Ngrok can be found:\n\n```\n    ./ngrok http 4000\n```\n\n![ionic-chat-sentiment-ngrok](//images.ctfassets.net/1es3ne0caaid/5pf60lqM9i8YmkC4eG8iY8/d31c9d7421f2bef8b8595d98e98e4082/ionic-chat-sentiment-ngrok.png)\n\nCopy the forwarding url with `https` and place it in the `chat.ts` file that previously had `http://localhost:4000/message`. Please do not copy mine from the screenshot above. \n\n``` typescript\n    // src/components/chat/chat.ts\n    ...\n    export class ChatComponent implements OnInit {\n      ...\n      sendMessage() {\n        ...\n        this.http\n            .post('\u003cNGROK_URL\u003e/messages', data)\n            .subscribe((res: Message) =\u003e {});\n      }\n      ...\n    }\n    ...\n```\n\n\u003e Ensure to include the forwarding URL you copied where the placeholder string is\n\nNow you should be receiving messages sent from the phone on the browser. Or if you have more than one phone you can test it using two of them.\n\n\u003e **Note:** Both the server(`node server`), ngrok for proxying our server and the Ionic dev server(`ionic serve`) must be running to get the application working. Run the commands in separate terminal sessions if you haven’t done so already.\n\nTo build your application to deploy on either the AppStore or PlayStore, follow the instructions found [here](https://ionicframework.com/docs/pro/package/).\n\n## Conclusion\n\nUsing sentiment analysis library, we’ve been able to suggest emojis as replies for received messages and with the help of [Pusher](https://pusher.com) and Ionic we’ve built an application can send and receive messages in realtime. You can view the source code for the demo [here](https://github.com/HackAfro/ionic-chat-app).","metaTitle":"Build a chat app with Ionic featuring sentiment analysis","metaDescription":"Use Ionic to create a chat app, powered by a Node backend. Build in TypeScript, using Cordova to target mobile platforms. The app features emoji suggestions thanks to sentiment analysis."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1WVQikDlFKOeyyySeEqO2","type":"Entry","createdAt":"2018-06-27T11:23:38.638Z","updatedAt":"2020-06-15T16:05:07.719Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Track Bitcoin prices on a live graph with Python","url":"bitcoin-live-graph-python","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3sixk7zsAoQqqSsUWM8I8y","type":"Entry","createdAt":"2018-02-13T18:06:00.483Z","updatedAt":"2018-02-14T10:08:13.372Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Olayinka Omole","url":"olayinka-omole","email":"olayinka.omole@gmail.com","twitter":"https://twitter.com/olayinkaos","github":"https://github.com/olayinkaos","guestWriter":true}}],"projectRepo":"https://github.com/olayinkaos/realtime-graph","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4kOTcNAC12gwWEyE6MimMY","type":"Entry","createdAt":"2018-02-12T15:08:28.581Z","updatedAt":"2018-02-26T12:31:12.766Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Trading","url":"trading","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2018-06-24","description":"Build a live graph to track Bitcoin prices using Flask. You will create a simple Python application that pulls in Bitcoin sample data and displays it on a live graph using Plotly.","prerequisite":"You will need Python 3+ installed on your machine. Basic knowledge of Python, Flask and JavaScript will be helpful.","content":"Graphs and charts are great for representing information in a clear and concise way. They can be used in various apps to show data to users when needed. Quickly changing data can be better represented using realtime graphs and charts as users can quickly see both current and historical data easily.\n\nIn this tutorial, we will be making use of [Pusher Channels](https://pusher.com/channels), [Plotly](https://plot.ly/) and [Flask](http://flask.pocoo.org/) to build a simple app for displaying the price of a Bitcoin in a realtime graph and bar chart.\n\nHere is what the final app will look like:\n\n![python-live-graph-bitcoin-demo](//images.ctfassets.net/1es3ne0caaid/5CwIjRrU3eWiCsG4iOqG0K/2824d59426e378ca7cb0e69280a6a92b/python-live-graph-bitcoin-demo.gif)\n\n## Prerequisites\n\nTo follow along properly, basic knowledge of Python, Flask and JavaScript (ES6 syntax) is needed. You will also need to install [Python](https://www.python.org/) and [virtualenv](https://virtualenv.pypa.io/en/stable/) locally.\n\n\n\u003e Virtualenv is a tool that helps us create isolated Python environments. This makes it possible for us to install dependencies (like Flask) in an isolated environment, and not pollute our global packages directory. To install virtualenv:\n\n```\n    pip install virtualenv\n```\n\n## Setup and configuration\n\n### Installing Flask\n\nAs stated earlier, we will be developing using Flask, a web framework for Python. In this step, we will activate a virtual Python environment and install Flask for use in our project.\n\nTo activate a virtual environment:\n\n```\n    mkdir realtime-graph\n    cd realtime-graph\n    virtualenv .venv\n    source .venv/bin/activate\n```\n\n\u003e Note: To activate the virtual environment on a Windows machine, you would need to enter the path to the activate file (in `.venv/Scripts`) in Powershell / command prompt. \n\nTo install Flask:\n\n```\n    pip install flask\n```\n\nWe will also need the [Requests](http://docs.python-requests.org/en/master/) library. Let us install it now:\n\n```\n    pip install requests\n```\n\n### Setting up Pusher\n\nPusher is a service that makes it easy for us to supercharge our web and mobile applications with realtime updates. We will be using it primarily for powering the realtime updates to our graphs. Head over to Pusher.com and [register for a free account](https://pusher.com/signup?plan=sandbox), if you don’t already have one.\n\nNext, create an app on the [dashboard](https://dashboard.pusher.com/) and copy out the app credentials (App ID, Key, Secret and Cluster), as we would be needing these in our app.\n\nNow we can install the Pusher Python library to help our backend communicate with the Pusher service:\n\n```\n    pip install pusher\n```\n\n### Installing Plotly\n\nPlotly is a tool that helps to easily display visual data on the web. According to [their website](https://plot.ly/):\n\n\n\u003e Plotly creates **leading open source tools** for composing, editing, and sharing interactive **data visualization** via the Web.\n\nWe will be making use of Plotly to create our graph and chart. To install Plotly to our app:\n\n```\n    pip install plotly\n```\n\n### File and folder structure\n\nHere is the folder structure for the app. We will only limit it to things necessary so as to avoid bloat. Let us go ahead and create the following files and folders:\n\n```\n        ├── realtime-graph\n            ├── app.py\n            └── templates\n                └── index.html\n```\n\nThe templates folder contains our `index.html` template file, while `app.py` will house all our server-side code.\n\n\n## Building the backend\n\nNow, we can start writing server-side code to perform our various app functions. Our app will get the prices for Bitcoin every 10 seconds. We will use Pusher to broadcast an event, along with the new prices every time data is retrieved.\n\nWe will start by importing the needed modules, configuring the Pusher object, and initialising some needed variables:\n\n``` python\n    # ./app.py\n    from flask import Flask, render_template\n    from apscheduler.schedulers.background import BackgroundScheduler\n    from apscheduler.triggers.interval import IntervalTrigger\n    from pusher import Pusher\n    import requests, json, atexit, time, plotly, plotly.graph_objs as go\n    \n    # create flask app\n    app = Flask(__name__)\n    \n    # configure pusher object\n    pusher = Pusher(\n        app_id='YOUR_APP_ID',\n        key='YOUR_APP_KEY',\n        secret='YOUR_APP_SECRET',\n        cluster='YOUR_APP_CLUSTER',\n        ssl=True\n    )\n    \n    # define variables for data retrieval\n    times = []\n    currencies = [\"BTC\"]\n    prices = {\"BTC\": []}\n```\n\nIn the code block above, first we import the needed modules and libraries, including the Pusher and Plotly libraries. We also configure the Pusher object with the credentials gotten from the Pusher dashboard. Remember to replace `YOUR_APP_ID` and similar values with the actual values for your own app.\n\nSome variables are also defined to hold values we will need later in our app. `times` stores the values of the time when we retrieve price data in a list. `currencies` holds the list of currencies we will be fetching data for. In our case, this is just `BTC` but you can add any number of currencies you want. `prices` is a dictionary that holds the list of prices for currency defined.\n\nNext, let us define a simple route to serve our app’s view:\n\n``` python\n    # ./app.py\n    # ...\n    \n    @app.route(\"/\")\n    def index():\n        return render_template(\"index.html\")\n```\n\nIn the code block above, we use Flask’s `render_template()` function to serve `index.html` from the `./templates` folder on the index route.\n\nNow we can get to the core of our app, which is creating a function that will retrieve Bitcoin prices and then broadcast that data in graph and chart form. Let us update `app.py` with the function:\n\n``` python\n    # ./app.py\n    # ...\n    \n    def retrieve_data():\n        # create dictionary for saving current prices\n        current_prices = {}\n        for currency in currencies:\n            current_prices[currency] = []\n        # append new time to list of times\n        times.append(time.strftime('%H:%M:%S'))\n    \n        # make request to API and get response as object\n        api_url = \"https://min-api.cryptocompare.com/data/pricemulti?fsyms={}\u0026tsyms=USD\".format(\",\".join(currencies))\n        response = json.loads(requests.get(api_url).content)\n    \n        # append new price to list of prices for graph\n        # and set current price for bar chart\n        for currency in currencies:\n            price = response[currency]['USD']\n            current_prices[currency] = price\n            prices[currency].append(price)\n    \n        # create an array of traces for graph data\n        graph_data = [go.Scatter(\n            x=times,\n            y=prices.get(currency),\n            name=\"{} Prices\".format(currency)\n        ) for currency in currencies]\n    \n        # create an array of traces for bar chart data\n        bar_chart_data = [go.Bar(\n            x=currencies,\n            y=list(current_prices.values())\n        )]\n    \n        data = {\n            'graph': json.dumps(list(graph_data), cls=plotly.utils.PlotlyJSONEncoder),\n            'bar_chart': json.dumps(list(bar_chart_data), cls=plotly.utils.PlotlyJSONEncoder)\n        }\n    \n        # trigger event\n        pusher.trigger(\"crypto\", \"data-updated\", data)\n```\n\nIn the code block above, we define a function `retrieve_data()` that does the following:\n\n1. Makes a request to a remote API to retrieve current Bitcoin prices. We make use of the [CryptoCompare API](https://min-api.cryptocompare.com/) and the [Requests library](http://docs.python-requests.org/en/master/).\n2. Generates traces for the graph and bar chart using the Plotly [plotly.graph_objs.Scatter](https://plot.ly/python/line-charts/) and [plotly.graph_objs.Bar](https://plot.ly/python/bar-charts/).\n3. Encode the graph and bar chart data as JSON using the [Plotly Json Encoder](https://github.com/plotly/plotly.py/blob/master/plotly/utils.py#L130).\n4. Trigger a `data-updated` event using the configured `pusher` object, broadcasting the needed data on the `crypto` channel.\n\nWe use the configured `pusher` object for broadcasting events on specific channels. To broadcast an event, we use the `trigger()` method with the following syntax:\n\n```\n    pusher.trigger('a_channel', 'an_event', {'some': 'data'})\n```\n\n\u003e Note: You can find the docs for the Pusher Python library [here](https://github.com/pusher/pusher-http-python).\n\nPusher also grants us the ability to trigger events on various types of channels including Public, Private and Presence channels. Read about them [here](https://pusher.com/docs/client_api_guide/client_channels#channel_types).\n\n### Scheduling the data retrieval function\n\nA major part of our app is making sure our data retrieval functions runs at a 10 second interval, so as to keep users updated of the most current prices. To create this schedule, we make use of AppScheduler. To install AppScheduler:\n\n```\n    pip install apscheduler\n```\n\nThe following piece of code will register the job and run our `retrieve_data()` function every 10 seconds:\n\n``` python\n    # ./app.py\n    # ...\n    \n    # create schedule for retrieving prices\n    scheduler = BackgroundScheduler()\n    scheduler.start()\n    scheduler.add_job(\n        func=retrieve_data,\n        trigger=IntervalTrigger(seconds=10),\n        id='prices_retrieval_job',\n        name='Retrieve prices every 10 seconds',\n        replace_existing=True)\n    # Shut down the scheduler when exiting the app\n    atexit.register(lambda: scheduler.shutdown())\n```\n\n### Running the Flask app\n\nFinally, to start the app in debug mode, while disabling the auto reloader:\n\n``` python\n    # ./app.py\n    # ...\n    \n    # run Flask app\n    app.run(debug=True, use_reloader=False)\n```\n\n\u003e **Note:** We disable the auto reloader so as to prevent our scheduled function from running twice at every interval. You can read more on this [here](https://stackoverflow.com/a/15491587).\n\n\n## Creating our app view\n\nWe will now write some markup and JavaScript code to display the graph and chart to our users. Editing the `index.html` file:\n\n``` html\n    \u003c!-- ./templates/index.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003ctitle\u003eCryptoLiveChart!\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.1/css/bulma.min.css\"\u003e\n        \u003cstyle\u003e\n            .chart {\n                height: 800px;\n            }\n        \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \u003csection class=\"section\"\u003e\n        \u003cdiv class=\"container\"\u003e\n            \u003ch1 class=\"title\"\u003eWelcome to \u003cstrong\u003eCrypto\u003c/strong\u003eLiveChart!\u003c/h1\u003e\n            \u003cp class=\"subtitle\"\u003eView live prices for \u003cstrong\u003eBitcoin\u003c/strong\u003e and \u003cstrong\u003eEthereum\u003c/strong\u003e in real time!\u003c/p\u003e\n            \u003chr\u003e\n            \u003cdiv class=\"columns\"\u003e\n                \u003cdiv class=\"column\"\u003e\n                    \u003ch5 class=\"title is-6\"\u003ePrices (in USD)\u003c/h5\u003e\n                    \u003cdiv id=\"price_chart\" class=\"chart\"\u003e\n                        Graph\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"column\"\u003e\n                    \u003ch5 class=\"title is-6\"\u003eMarket Cap\u003c/h5\u003e\n                    \u003cdiv id=\"market_cap_chart\" class=\"chart\"\u003e\n                        Bar Chart\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/section\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThe above code contains the basic markup for the homepage. We imported [Bulma](https://bulma.io/) (a cool CSS framework) to take advantage of some pre-made styles.\n\nNext, we will write some JavaScript code to display our charts:\n\n``` html\n    \u003c!-- ./templates/index.html --\u003e\n    \u003c!-- ... --\u003e\n      \n      \u003c!-- D3.js --\u003e\n      \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.6/d3.min.js\"\u003e\u003c/script\u003e\n      \u003c!-- jQuery --\u003e\n      \u003cscript src=\"https://code.jquery.com/jquery-2.1.4.min.js\"\u003e\u003c/script\u003e\n      \u003c!-- Plotly.js --\u003e\n      \u003cscript src=\"https://d14fo0winaifog.cloudfront.net/plotly-basic.js\"\u003e\u003c/script\u003e\n      \u003c!-- import Pusher-js library --\u003e\n      \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003cscript type=\"text/javascript\"\u003e\n          // connect to Pusher\n          const pusher = new Pusher('YOUR_APP_KEY', {\n            cluster: 'YOUR_APP_CLUSTER', // gotten from Pusher app dashboard\n            encrypted: true // optional\n          });\n          // subscribe to crypto channel\n          const channel = pusher.subscribe('crypto')\n          // listen for relevant events\n          channel.bind('data-updated', data =\u003e {\n              const graph = JSON.parse(data.graph);\n              Plotly.newPlot('price_chart', graph);\n              const bar_chart = JSON.parse(data.bar_chart);\n              Plotly.newPlot('market_cap_chart', bar_chart);\n          });\n      \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the code above, first we import the needed libraries - D3.js, Plotly and Pusher. Then we do the following:\n\n1. Connect to our Pusher app by creating an instance with `new Pusher()`. Remember to replace `YOUR_APP_KEY` and `YOUR_APP_CLUSTER` with the actual values gotten from your dashboard.\n2. Subscribe to the `crypto` channel on which we will be broadcasting events with `pusher.subscribe()`\n3. We bind the `data-updated` event on the channel and define a callback function to plot our graph and chart anytime data is received.\n\nAnd that’s it! To run our app:\n\n```\n    python app.py\n```\n\n## Conclusion\n\nIn this tutorial we have learned how to create beautiful realtime charts and graphs in our Flask Apps using Plotly and Pusher. You can check out the [Plotly Python documentation](https://plot.ly/python/) to see how to create other graphs quickly in Python!\n\nYou can find the entire code for this tutorial on [GitHub](https://github.com/olayinkaos/realtime-graph).","metaTitle":"Track Bitcoin prices on a live graph with Python","metaDescription":"Use Python to c Flask reate a Bitcoin tracking interface. On the frontend, use Plotly to display the data on a live graph."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1oZYQdJ1kMCWW0e4gmsyC4","type":"Entry","createdAt":"2018-06-27T11:27:57.513Z","updatedAt":"2018-06-27T11:27:57.513Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a geofencing web app using Ember","url":"geofencing-ember","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/9jaswag/pusher-geofencing","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"oh5mPeR5cGqMImEyKoWwQ","type":"Entry","createdAt":"2018-02-12T14:46:47.672Z","updatedAt":"2018-02-12T14:46:47.672Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ember.js","url":"ember-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-06-24","description":"Build a web app using Ember.js and Google Maps, with Node for the backend. Users are able to check in, submitting their location. An admin user is then alerted whether the user is within a given radius.","prerequisite":"You will need Node and npm installed on your machine. Some knowledge of JavaScript will be helpful.","content":"## Introduction\n\nA [geofence](https://en.wikipedia.org/wiki/Geo-fence) is a virtual perimeter for a real-world geographic area. With a geofencing app, we can define a virtual boundary and be notified when users enter and exits the boundary.\n\nIn this tutorial, we’ll be building a simple geofencing web application using Ember.js.\nBelow is a sneak peek of what we’ll be building:\n\n![ember-geofencing-demo](//images.ctfassets.net/1es3ne0caaid/4ihzau8I5iE2Uo8KQeY6Ci/c7725fecc936e5f4d52aa5a04ec6f21f/ember-geofencing-demo.gif)\n\n## Prerequisites\n\nTo follow this tutorial, you need both Node and NPM installed on your machine. A basic JavaScript understanding will help you get the most out of this tutorial.\nIf you don’t have Node.js installed, go to [https://nodejs.org/](https://nodejs.org/) and install the recommended version for your operating system.\n\n\n## Installing Ember.js\n\nEmber, like lots of frameworks out there offers a command line utility used to create, build, serve, and test [Ember.js](https://emberjs.com/) apps and addons. The Ember CLI helps us spin up Ember apps with a single command. Run the following command to install the Ember CLI on your machine:\n\n```\n    $ npm install -g ember-cli\n```\n\nThe command above installs the Ember CLI globally on your machine. Once it is done installing, run the following command to create a new Ember app and then move to this new directory:\n\n```\n    $ ember new pusher-geofencing\n    $ cd pusher-geofencing\n```\n\nOnce in the `pusher-geofencing` directory, you can serve the app running the following command:\n\n```\n    $ ember s\n```\n\nThis command starts up Ember’s built-in “live-reloading” development server on port 4200. You can see the app in your browser by visiting http://localhost:4200.\n\n![ember-start-page](//images.ctfassets.net/1es3ne0caaid/2Z3q7KbdrOEWGs8McO8gyC/86f812aacd929bbcd81e6a45873f91b6/ember-start-page.png)\n\n## Pusher account setup\n\nHead over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up).\n\n![ember-pusher-signup](//images.ctfassets.net/1es3ne0caaid/2NeDEhMbuwYsECuqGyWCUE/646d9e28c3c1ecc1517361035836a8ec/ember-pusher-signup.png)\n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![ember-pusher-create-app](//images.ctfassets.net/1es3ne0caaid/5YHrOKL5AIQk6E2OiCIeMW/473f43255c5a820f1523387487884757/ember-pusher-create-app.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher to be provided with some boilerplate code:\n\n![ember-pusher-config-app](//images.ctfassets.net/1es3ne0caaid/38gUNRKzT2UuEcQIq2GgS6/d7ef41d5c3f3afb724373fd976caef4c/ember-pusher-config-app.png)\n\nYou can retrieve your keys from the **App Keys** tab:\n\n![ember-pusher-app-keys](//images.ctfassets.net/1es3ne0caaid/1QiXDu6gpy0CKQCosqgcgE/1ffc23a7859704465b1a9357c07151b5/ember-pusher-app-keys.png)\n\n\n## Google Maps setup\n\nTo use the Maps JavaScript API, you must register your app on the Google API Console and get a Google API key, which will be loaded in the app. Follow this [quick guide to register your Maps app](https://developers.google.com/maps/documentation/javascript/get-api-key) and get your API credentials.\n\n\n## Application setup\n\nNow that we have our Pusher and Google Maps app keys, let’s install some dependencies and addons. Run the following commands in your terminal:\n\n```\n    $ ember install ember-bootstrap ember-auto-import\n    $ npm install pusher pusher-js express body-parser dotenv uuid --save\n```\n\nAdd the following styles to your `app.css` file:\n\n``` css\n    // app/styles/app.css\n    \n    #map {\n      height: 42rem;\n    }\n    .jumbotron {\n      height: 100vh;\n    }\n    .available-user {\n      border-radius: 3px;\n      padding: 0 0 0 0.3rem;\n      background-color: #28a745;\n      margin-top: 0.3rem;\n    }\n```\n\nLet’s configure our Bootstrap addon to use Bootstrap 4. Run the following command in your terminal:\n\n```\n    $ ember generate ember-bootstrap --bootstrap-version=4\n```\n\nWith Bootstrap now set up, let’s replace the code in our application template with the following:\n\n``` html\n    {{!-- app/templates/application.hbs --}}\n    \n    \u003cdiv class=\"container-fluid p-0\"\u003e\n      {{outlet}}\n    \u003c/div\u003e\n```\n\nLastly, let’s add our Google Maps script to the `index.html` file. Ensure you replace YOUR_API_KEY with your Google Maps API key:\n\n``` html\n    \u003c!-- app/index.html --\u003e\n    \n    \u003chead\u003e\n      ...\n      \u003cscript src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY\u0026libraries=geometry\"\u003e\u003c/script\u003e\n    \u003c/head\u003e\n```\n\n## Building our server\n\nUsually, your server should live separately from your Ember app, but for convenience sake, we are going to build our server as part of our Ember app. \nIn your root directory, create a `node-server` folder and create a `server.js` and `.env` file in that folder. Add the following code to each file:\n\n``` javascript\n    // node-server/server.js\n    \n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    const uuid = require('uuid').v4;\n    require('dotenv').config()\n    \n    const app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // enable cross-origin resource sharing\n    app.use(function (req, res, next) {\n      res.header(\"Access-Control-Allow-Origin\", \"*\");\n      res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n      next();\n    });\n    \n    const pusher = new Pusher({ // connect to Pusher\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n    });\n    \n    app.get('/', function (req, res) { // to test if the server is running\n      res.send({ success: true, message: 'server is online' });\n    });\n    \n    app.post('/check-in', function (req, res) { // route to send user information to Pusher\n      let { lat, lng, name, userId } = req.body;\n      if (lat \u0026\u0026 lng \u0026\u0026 name) {\n        if (userId.length == 0) {\n          userId = uuid();\n        }\n        const location = { lat, lng, name, userId };\n        pusher.trigger('location', 'checkin', { location });\n        res.send({ success: true, userId })\n      } else {\n        res.status(400).send({ success: false, message: 'text not broadcasted' })\n      }\n    });\n    \n    const port = process.env.PORT || 5000;\n    app.listen(port, () =\u003e {\n      console.log(`server running on port ${port}`);\n    });\n```\n```\n    // node-server/.env\n    \n    // add your Pusher credentials here\n    PUSHER_APP_ID=\"YOUR APP ID\"\n    PUSHER_APP_KEY=\"YOUR APP KEY\"\n    PUSHER_APP_SECRET=\"YOUR APP SECRET\"\n    PUSHER_APP_CLUSTER=\"YOUR APP CLUSTER\"\n```\n\nIn the `server.js` file, we created a simple server with a `/check-in` route which sends user location data via a `location`  channel to Pusher.\n\nTo run this server, open the root directory of the project in a new terminal window, and run the following command:\n\n```\n    $ cd node-server\n    $ node server.js\n```\n\nIf you’re using version control, remember to ignore your `.env` file.\n\n\n## Creating the home view\n\nOur geofencing app will have two basic pages: one for users to check in and the other for the admin to view users within range.\n\nIn Ember, when we want to make a new page that can be visited using a URL, we generate a \"route\" using Ember CLI. To generate an index route, run the following command in your terminal:\n\n```\n    $ ember g route index\n```\n\nThe above command generates three files:\n\n- A route handler, located in `app/routes/index.js`, which sets up what should happen when that route is loaded.\n- A route template, located in `app/``templates``/index.hbs`, which is where we display the actual content for the page.\n- Lastly, a route test file located in `tests/unit/routes/about-test.js`, which is used to test the route.\n\nIn the index template, add the following code:\n\n```\n    {{!-- app/templates/index.hbs --}}\n    \n    {{index-view}}\n```\n\nIn the index template, we’re simply rendering the `index-view` component which we’ll create next. The `index-view` component will contain the code for the home view. Go ahead and run the following command in your terminal to create the `index-view` component:\n\n```\n    $ ember g component index-view\n```\n\nAs with generating a route, the command above generates a template file, a JavaScript component source file and a file for testing the component. Note that every Ember controller name must be separated by a hyphen.\n\nAdd the following code the component’s template file:\n\n``` html\n    {{!-- app/templates/components/index-view.hbs --}}\n    \n    \u003cdiv class=\"jumbotron jumbotron-fluid text-center align-middle\"\u003e\n      {{#if isCheckedIn}}{{!-- run this block if the user is checked in --}}\n      \u003ch4\u003eYou're checked in\u003c/h4\u003e\n      {{else}} {{!-- run this block if the user is not checked in --}}\n      \u003ch4\u003eWelcome to Pusher Geofencer\u003c/h4\u003e\n      \u003cdiv class=\"col-4 mt-5 offset-4\"\u003e\n        {{input value=name class=\"form-control\" placeholder=\"Enter your name\" autofocus=true}}\n        \u003cbutton{{action \"checkin\"}} class=\"btn btn-success mt-5\"\u003eCheck in\u003c/button\u003e\n      \u003c/div\u003e\n      {{/if}}\n    \u003c/div\u003e\n```\n\nIn the code we added above, we have a [handlebars](https://handlebarsjs.com/) conditional statement. If the user `isCheckedIn`we display some text. When they’re not checked in, we display an input field and a button that triggers the `checkin` action in the component JavaScript source file when clicked.\n\nLet’s add the functionality in the component’s JavaScript source file:\n\n``` javascript\n    // app/components/index-view.js\n    \n    import Component from '@ember/component';\n    import { run } from '@ember/runloop';\n    import $ from 'jquery';\n    \n    export default Component.extend({\n      name: '', // user's name\n      isCheckedIn: false, // check if the user is checked in\n      userId: '', // user's userId\n      // component actions\n      actions: {\n        // action that is run when the button is clicked\n        checkin() {\n          if (this.name.length \u003e 0) { // if there is a name\n            if ('geolocation' in navigator) {\n              navigator.geolocation.watchPosition((position) =\u003e { // get user location\n                const { latitude, longitude } = position.coords;\n                const userDetail = { lat: latitude, lng: longitude, name: this.name, userId: this.userId };\n                $.ajax({ // send user data via an AJAX call\n                  url: 'http://localhost:5000/check-in',\n                  type: 'post',\n                  data: userDetail\n                }).then(response =\u003e {\n                  run(() =\u003e {\n                    this.set('userId', response.userId);\n                  });\n                })\n              }, null, { enableHighAccuracy: true });\n              this.set('isCheckedIn', true); // set isCheckedIn to true\n            }\n          } else {\n            alert('Enter a name') // if there's no name show this alert\n          }\n        }\n      }\n    });\n```\n\nIn the code above, we have a `checkin` action which is called when the **check in** button is clicked. The action gets the user’s location using the [Geolocation API](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/Using_geolocation)’s `watchPosition` method and sends it together with the user’s name to the server.\n\nIf you visit the app in the browser, you should be able to enter a name and check in after granting location permission.\n\n\n## Creating the admin view\n\nNow that our users can check in and their location is being broadcast by Pusher on the server, it’s time for us to render our map and display the users that are within our range.\n\nLet’s create our admin route and a `display-maps`  component. Run the following code in your terminal:\n\n```\n    $ ember g route admin\n    $ ember g component display-maps\n```\n\nLet’s render the `display-maps` component in the admin template file:\n\n```\n    {{!-- app/templates/admin.hbs --}}\n    \n    {{display-maps}}\n```\n\nWe’ll also add our admin view markup to the `display-maps` component\n\n``` html\n    {{!-- app/templates/components/display-maps.hbs --}}\n    \n    \u003cdiv class=\"row\"\u003e\n      \u003cdiv class=\"col-10 p-0\"\u003e\n        \u003cdiv id=\"map\"\u003e\u003c/div\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"col-2 bg-dark\"\u003e\n        \u003ch5 class=\"text-center py-3 text-white\"\u003eUsers within range\u003c/h5\u003e\n        \u003cdiv class=\"users\"\u003e\u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nNext, we’ll generate a service for implementing our map. A service is an Ember object that lives for the duration of the application and can be made available in different parts of your application.\nIt helps us abstract the logic for creating and updating our map and is a singleton, which means there is only one instance of the service object in the browser.\nTo create a maps service, run the following command in your terminal:\n\n```\n    $ ember g service maps\n```\n\nAdd the following code to the generated `maps.js` file:\n\n``` javascript\n    // app/services/maps.js\n    \n    import Service from '@ember/service';\n    import $ from 'jquery';\n    \n    const google = window.google;\n    let targetLocation;\n    const rangeRadius = 500;\n    \n    export default Service.extend({\n    \n      // function to create admin's map\n      createAdminMap(adminLocation) {\n        targetLocation = adminLocation;\n        this.createMapElement([]) // call the create map function passing empty user locations\n      },\n    \n      // function to create our map\n      createMapElement(usersLocation) {\n        const element = document.querySelector('#map');\n        let map = new google.maps.Map(element, { zoom: 16, center: targetLocation }); // generate a map\n        // The marker, positioned at center\n        this.addMarker(targetLocation, map) // add marker fot the target location\n        usersLocation.forEach(location =\u003e { // loop through the location of available users\n          // add markers for other available users to the map\n          this.addMarker(location, map, true)\n        })\n        \n        new google.maps.Circle({ // add the circle on the map\n          strokeColor: '#FF0000',\n          strokeOpacity: 0.2,\n          strokeWeight: 1,\n          fillColor: '#FF0000',\n          fillOpacity: 0.1,\n          map: map,\n          center: targetLocation,\n          radius: rangeRadius\n        });\n      },\n    \n      // function to add a marker on the map\n      addMarker(userLocation, map, icon = false) {\n        if (icon) {\n          icon = 'http://maps.google.com/mapfiles/ms/icons/green-dot.png'\n        } else {\n          icon = \"\"\n        }\n        \n        let parsedUserLocation = {\n          lat: parseFloat(userLocation.lat), // parse the location string to a float\n          lng: parseFloat(userLocation.lng),\n          name: userLocation.name,\n          userId: userLocation.userId\n        }\n        \n        new google.maps.Marker({ position: parsedUserLocation, map, icon });\n        this.addUserWithinRange(parsedUserLocation); // add users to the sidebar\n      },\n      \n      // function to add/remove users within range\n      addUserWithinRange(userLocation) {\n        if (userLocation.name) {\n          let userDistance = this.locationDistance(userLocation); // check the distance between the user and the target location\n          let existingUser = $('div').find(`[data-id=\"${userLocation.userId}\"]`); // find the user on the page via the data-id attribute\n          if (userDistance \u003c rangeRadius) { // if the user is within the range\n            if (!existingUser[0]) { // if the user is not already displayed on the page\n              let div = document.createElement('div'); // create a div element\n              div.className = 'available-user';\n              div.dataset.id = userLocation.userId;\n              let span = document.createElement('span'); // create a span element\n              span.className = 'text-white';\n              let username = `@${userLocation.name}`\n              span.append(username);\n              div.append(span);\n              const usersDiv = document.querySelector('.users');\n              usersDiv.append(div); // add the user to the page\n            }\n          } else {\n            existingUser.remove(); // remove the user from the page is they're out of range\n          }\n        }\n      },\n      \n      // function to calculate the distance between our target location and the user's location\n      locationDistance(userLocation) {\n        const point1 = new google.maps.LatLng(targetLocation.lat, targetLocation.lng);\n        const point2 = new google.maps.LatLng(userLocation.lat, userLocation.lng);\n        const distance = google.maps.geometry.spherical.computeDistanceBetween(point1, point2);\n        return distance;\n      }\n    });\n```\n\nIn our maps service, we have four functions:\n\n- The `createAdminMap` function for creating the map showing the target location\n- The `createMapElement` function for creating our map.\n- The `addMarker` function for adding markers to our map.\n- The `addUserWithinRange` function for adding and removing users from the sidebar on the admin page.\n- The `locationDistance` function for calculating if the user is within our target range.\n\nIn the `createAdminMap` function, we accept our admin’s location and call the `createMapElement` function. The `createMapElement` function generates a map using the Google Maps `Map` object and insert it to the div with the ID of `map` on our page. The  function also accepts an array of users location and for each user, we add a marker for their location on the map.\n\nThe `locationDistance` function calculates the difference between the user’s location and the target location and passes the data to the `adUserWithinRange` function which either adds or removes the user’s name from the page based on whether or not they’re within range.\n\nNow that we’ve written the code for building with our map, let’s use it in the `display-maps` component:\n\n``` javascript\n    // app/components/display-maps.js\n    \n    import Component from '@ember/component';\n    import { inject as service } from '@ember/service';\n    import Pusher from 'pusher-js';\n    \n    export default Component.extend({\n      allUsers: [].map(user =\u003e { // all users array\n        return user;\n      }),\n      maps: service('maps'),\n      \n      init() {\n        this._super(...arguments);\n        let pusher = new Pusher('YOUR_APP_KEY', { // instantiate new Pusher client\n          cluster: 'CLUSTER',\n          encrypted: true\n        });\n        let users = this.get('allUsers'); // save the allUsers array to a variable\n        const channel = pusher.subscribe('location'); // subscribe Pusher client to location channel\n        channel.bind('checkin', data =\u003e {\n          if (users.length == 0) { // if the allUsers array is empty\n            users.pushObject(data.location) // add new data to users array\n          } else { // if the allUsers array is not empty\n            // check if user already exists before pushing\n            const userIndex = this.userExists(users, data.location, 0)\n            if (userIndex === false) { // if user was not found, means its a new user\n              users.pushObject(data.location) // push the users info to the allUsers array\n            } else {\n              // replace the users previous object with new one if they exists\n              users[userIndex] = data.location;\n            }\n          }\n          this.get('maps').createMapElement(users); // create the map\n        });\n      },\n      \n      // Ember's didInsertElement life cycle hook\n      didInsertElement() {\n        this._super(...arguments);\n        this.getAdminLocation(); // get the admins location\n      },\n      \n      // recursive function to check if a user already exixts\n      userExists(users, user, index) {\n        if (index == users.length) {\n          return false;\n        }\n        if (users[index].userId === user.userId) {\n          return index;\n        } else {\n          return this.userExists(users, user, index + 1);\n        }\n      },\n      \n      // function to get admin's location\n      getAdminLocation() {\n        if ('geolocation' in navigator) {\n          navigator.geolocation.getCurrentPosition((position) =\u003e { // get admin's location\n            const { latitude, longitude } = position.coords;\n            const adminLocation = { lat: latitude, lng: longitude };\n            this.get('maps').createAdminMap(adminLocation); // call the createAdmin map from our service\n          }, null, { enableHighAccuracy: true });\n        }\n      }\n    });\n```\n\nIn the code snippet above, we have an array of `allUsers` and we inject our maps service into the component by calling `maps: service('maps')`. In the `didInsertElement` lifecycle hook, we call the `getAdminLocation` function which gets the admin’s location and calls the `createAdminMap` from our map service to create the admin’s map showing the target location.\n\nIn the `init` function which is called when the component is initialized, we create our Pusher client and subscribe it to the `location` channel.\n\nWhen there is a new `checkin` event, we call the `userExists` function to see if the user already exists in our `allUsers` array. We then add or update the user’s info based on whether or not they exist in the `allUsers` array. After all this is done, we call the `createMapElement` from our maps service and pass it our array of users to be rendered on the page. Remember to add your Pusher key and cluster.\n\n\n## Bringing it all together\n\nAt this point, restart your development server, ensure your Node server is running and open the admin view(http://localhost:4200/admin) in a second tab.  Enter a name in the home view then check in, you should see your name popup with your location showing on the map.\n\n\n## Conclusion\n\nIn this post, we have successfully created a realtime geofencing application in Ember. I hope you found this tutorial helpful and would love to apply the knowledge gained here to easily set up your own application using Pusher in an Ember application.\nYou can find the source code for the demo app on [GitHub](https://github.com/9jaswag/pusher-geofencing).","metaTitle":"Building a geofencing web app using Ember","metaDescription":"Use Ember.js, Node and Google Maps to create a geofencing application. Admin users are alerted when a user checks in, and the user position is shown in relation to the admin location radius."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6MHAvSM6MokiagYk8YQueO","type":"Entry","createdAt":"2018-06-22T15:29:42.470Z","updatedAt":"2018-06-22T15:29:42.470Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a voting system with Ember.js","url":"voting-system-emberjs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/yemiwebby/realtime-voting-ember","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"oh5mPeR5cGqMImEyKoWwQ","type":"Entry","createdAt":"2018-02-12T14:46:47.672Z","updatedAt":"2018-02-12T14:46:47.672Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ember.js","url":"ember-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6N8l3o0yD6QK2ooI2ME8wW","type":"Entry","createdAt":"2018-02-12T15:09:06.190Z","updatedAt":"2018-02-26T12:31:10.478Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Polls","url":"live-polls","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4E7t0TtVFSAyeeA0ckeYe0","type":"Entry","createdAt":"2018-02-12T15:09:41.899Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Chart","url":"realtime-chart","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6i1HPBqlwsE24YEKwqQyuq","type":"Entry","createdAt":"2018-02-12T15:09:31.050Z","updatedAt":"2018-02-26T12:31:11.548Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Graph","url":"realtime-graph","type":"use case"}}],"reviewDate":"2018-06-20","description":"Build a polling app using Ember.js and Node.js. Users will be able to vote for which football team has the best supporters, and see results displayed on a chart in realtime.","prerequisite":"You will need Node and npm installed on your machine.","content":"## Introduction\n\nIn this tutorial, we are going to build a basic voting app with Ember.js that displays the live results of votes on a doughnut chart as they come in. Pusher will be used here to respond to votes and dynamically update the chart in all browsers in realtime. The results will be instant as depicted in the image below:\n\n![emberjs-voting-demo](//images.ctfassets.net/1es3ne0caaid/319dqAqENGE0WYm6sGcwiU/cffaa09b1f739350e687f055291cb777/emberjs-voting-demo.gif)\n\nA simple realtime voting application like this can improve the conventional way of casting and collecting votes, and also facilitate the live update of results for everyone involved to see. This improves transparency and makes the experience more interactive.\n\nIn this realtime demo, users will be able to vote for the fans that they consider the best by clicking on the image. This will immediately increase the points of such country as it will be displayed on the chart.\n\n## Prerequisites\n\nIt is important that you have [Node.js](https://nodejs.org/en/) and [npm](https://www.npmjs.com/) installed on your machine, [learn how to install Node.js and npm here](https://docs.npmjs.com/getting-started/installing-node). A quick run-down of the core technologies we will be using include:\n\n\n- [Ember.js](https://www.emberjs.com/): a productive frontend framework built for ambitious web developers.\n- [Pusher](https://pusher.com/): a [Node.js](http://nodejs.org/) client to interact with the Pusher REST API\n- [Express](https://expressjs.com/): Node utility for handling HTTP requests via routes\n- [Axios](https://www.npmjs.com/package/axios): a promise-based HTTP client that works both in the browser and in a Node.js environment.\n- [Body Parser](https://github.com/expressjs/body-parser): attaches the request payload on Express’s `req`, hence `req.body` stores this payload for each request.\n- [CanvasJS](https://canvasjs.com/): a responsive HTML5 Charting library for data visualization.\n\n\n## Getting started\n\nThe most convenient and recommended way of getting an Ember app up and running with a single command is by using the Ember CLI tool. You can install it with npm, open your terminal and type this command:\n\n```\n     npm install -g ember-cli\n```\n\nThe [Ember CLI](https://github.com/ember-cli/ember-cli) will give us access to the `ember` command that will be used to set up our project easily.\n\n\n## Creating the voting application\n\nWe can now proceed to create our application by using the `ember new` command. Open up the terminal on your machine and run a command that will create an application named `realtime-voting-ember` in your project directory:\n\n```\n     ember new realtime-voting-ember\n```\n\nNext, change directory into the newly created project and start the development server:\n\n```\n     // change directory\n     cd realtime-voting-ember\n     \n     // start the development server\n     ember serve\n```\n\nThis will start the development server on http://localhost:4200. Open your favorite browser and navigate to that URL, you should see a default welcome page by Ember.js as shown below:\n\n![ember-start-page](//images.ctfassets.net/1es3ne0caaid/2Z3q7KbdrOEWGs8McO8gyC/86f812aacd929bbcd81e6a45873f91b6/ember-start-page.png)\n\n\n## Installing server dependencies\n\nRun the following command to install the dependencies required for this project using:\n\n```\n    npm install --save axios pusher pusher-js\n    npm install --save body-parser cors dotenv express \n    npm install --save canvasjs babelify babel-preset-es2015 babel-preset-stage-1\n    ember install ember-browserify\n```\n\n## Pusher account setup\n\nHead over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). \n\n![ember-pusher-signup](//images.ctfassets.net/1es3ne0caaid/2NeDEhMbuwYsECuqGyWCUE/646d9e28c3c1ecc1517361035836a8ec/ember-pusher-signup.png)\n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![ember-pusher-create-app](//images.ctfassets.net/1es3ne0caaid/5YHrOKL5AIQk6E2OiCIeMW/473f43255c5a820f1523387487884757/ember-pusher-create-app.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with to be provided with some boilerplate code:\n\n![ember-pusher-config-app](//images.ctfassets.net/1es3ne0caaid/38gUNRKzT2UuEcQIq2GgS6/d7ef41d5c3f3afb724373fd976caef4c/ember-pusher-config-app.png)\n\nYou can retrieve your keys from the **App Keys** tab:\n\n![ember-pusher-app-keys](//images.ctfassets.net/1es3ne0caaid/1QiXDu6gpy0CKQCosqgcgE/1ffc23a7859704465b1a9357c07151b5/ember-pusher-app-keys.png)\n\n## Setting the environment variables\n\nCreate a `.env` file in the root directory of your application and add your application credentials as obtained from your Pusher dashboard as follows:\n\n```\n      PUSHER_APP_ID=YOUR_APP_ID\n      PUSHER_APP_KEY=YOUR_APP_KEY\n      PUSHER_APP_SECRET=YOUR_APP_SECRET_KEY\n      PUSHER_APP_CLUSTER=CLUSTER\n```\n\nWe will make use of the variables specified in the above snippet later in our project. And do ensure that you replace `YOUR_APP_ID`, `YOUR_APP_KEY`, `YOUR_APP_SECRET_KEY` and `CLUSTER` placeholders with the appropriate credentials.\n\n\n## Setting up the server\n\nAs stated earlier, a user will only be able to vote by clicking on an image of the chosen option from the list of fans displayed. \n\nThis click event will result in a process that needs to be managed by a server. So we’ll use Express and Node to set up a simple server that will receive the `id` of the country selected and publish it to a designated channel alongside the points required to update the chart.\n\nSince the Ember application that we configured earlier is running on a different domain, we’ll enable CORS in order to ensure communication between the Express server and Ember.\n\nCreate an `app.js`  file in the root directory of your application and add the following code snippet to it to set up the server:\n\n\n``` javascript\n    // app.js\n    \n      const express = require('express');\n      const bodyParser = require('body-parser');\n      const cors = require('cors');\n      const Pusher = require('pusher');\n      require('dotenv').config();\n      \n      const app = express();\n      \n      app.use(cors());\n      app.use(bodyParser.urlencoded({extended: false}));\n      app.use(bodyParser.json());\n      \n      const pusher = new Pusher({\n          appId: process.env.PUSHER_APP_ID,\n          key: process.env.PUSHER_APP_KEY,\n          secret: process.env.PUSHER_APP_SECRET,\n          cluster: process.env.PUSHER_APP_CLUSTER,\n          encrypted: true\n      });\n      app.set('port', process.env.PORT || 3000);\n      app.post('/vote', (req, res) =\u003e {\n          const payload = {\n              fans: req.body.id,\n              points: 10\n          }\n          pusher.trigger('poll', 'vote', payload);\n          res.send(payload)\n      })\n      app.listen(app.get('port'), () =\u003e {\n          console.log(\"Listening on port \" + app.get('port'));\n      })\n```    \n\nHere we loaded all the necessary middlewares for the Express server and then configured Pusher using the credentials we added to our environment variables earlier. \n\nFurthermore, we also created the `/vote` endpoint that will receive and process the selected `id` sent in from our Ember app. Finally, we triggered an event named `vote` to Pusher Channels on a channel called `poll`. The `poll` channel holds a payload that contains the `id`  of the country selected by the user and the points to update the chart.\n\nOpen another terminal and run the command below to start the server on http://localhost:3000\n\n```\n    node app.js\n```\n\nThis will log a message to the console as shown by the image below:\n\n![ember-chat-node-running](//images.ctfassets.net/1es3ne0caaid/62I54alxBYyYcsmw84GWmu/7721512f40ceb9cc32d9cf290869915f/ember-chat-node-running.png)\n\n## Defining your routes\n\nRoutes in Ember.js plays a significant role in mapping an endpoint to a particular template file. To create a route for our application, we’ll make use of Ember generators to automate the process. Run the command below in the terminal from the root directory of your project:\n\n```\n    ember generate route realtime\n```\n\nThis will create a route file `./app/routes/realtime.js` and a template file for the route at `./app/templates/realtime.hbs`. The route file is the route handler and defines the data that should be loaded and what should happen when the template file is rendered.\n\nIn our case, we need to pass a dataset that will contain the `imgSrc`, `fans` and the `id` of each country to the template file. Now, open the `./app/routes/realtime.js` and update it with the following content:\n\n``` javascript\n    // ./app/routes/realtime.js\n    \n        import Route from '@ember/routing/route';\n      const dataset = [\n          {\n              \"imgSrc\":\"http://res.cloudinary.com/yemiwebby-com-ng/image/upload/v1529405850/nigerians_jojjpz.jpg\",\n              \"id\":\"Nigeria\",\n              \"fans\":\"Nigerian fans\"\n          },\n          {\n              \"imgSrc\":\"http://res.cloudinary.com/yemiwebby-com-ng/image/upload/v1529405850/mexican-fans_wzfkd9.jpg\",\n              \"id\":\"Mexico\",\n              \"fans\":\"Mexican fans\"\n          },\n          {\n              \"imgSrc\":\"http://res.cloudinary.com/yemiwebby-com-ng/image/upload/v1529405850/brazil_ik4yu5.jpg\",\n              \"id\":\"Brazil\",\n              \"fans\":\"Brazilian fans\"\n          },\n          {\n              \"imgSrc\":\"http://res.cloudinary.com/yemiwebby-com-ng/image/upload/v1529405850/argentina_n5e2ye.jpg\",\n              \"id\":\"Argetina\",\n              \"fans\":\"Argentina fans\"\n          }\n      ]\n      export default Route.extend({\n          model() {\n              return dataset;\n          }\n      });\n```    \n\nHere, we declared a `dataset` that will be rendered on the `/realtime` endpoint. Next, we’ll update the template file. Locate `./app/templates/realtime.hbs` and paste the code below in it:\n\n\n``` html\n    {{!-- ./app/templates/realtime.hbs --}}\n    \n      \u003cdiv class=\"main\"\u003e\n         \u003cdiv class=\"container\"\u003e\n           \u003ch1\u003e\u003cb\u003eVote :\u003c/b\u003e Which 2018 world cup team has the best fans\u003c/h1\u003e\n             {{#voting-app poll=model}}{{/voting-app}}\n         \u003c/div\u003e\n      \u003c/div\u003e\n```\n\nWe passed the model to a component named `voting-app`. This will allow us to easily loop over the `dataset`  and attach a click event to the images. We’ll create this component in the next section.\n\n\n## Creating the UI components\n\nEmber supports the usage and sharing of UI elements on multiple pages. We will leverage this and generate the `voting-app` component for our application. \n\nThe Ember component generally consists of two parts: a JavaScript component file that defines behavior and a Handlebars template that defines the markup for the component’s UI.\n\n\n## Voting app component\n\nRun the command below to generate the `voting-app`  component:\n\n```\n     ember generate component voting-app\n```\n\n### Voting app component file\n\nAdd the following content to `./app/components/voting-app.js`:\n\n``` javascript\n    // ./app/components/voting-app.js\n      \n      import Component from '@ember/component';\n      import CanvasJS from 'npm:canvasjs';\n      import axios from 'npm:axios';\n      import Pusher from 'npm:pusher-js';\n      \n      let dataPoints = [\n          {label: 'Nigeria', y:1},\n          {label: 'Mexico', y:1},\n          {label: 'Brazil', y:1},\n          {label: 'Argetina', y:1}\n      ]\n      \n      export default Component.extend({\n          init() {\n              this._super(...arguments);\n              const chart = new CanvasJS.Chart('vote-chart-container', {\n                  animationEnabled: true,\n                  theme: 'theme1',\n                  title: {\n                      text: 'The best fans'\n                  },\n                  data: [\n                      {\n                          type: 'doughnut',\n                          dataPoints: dataPoints\n                      }\n                  ]\n              });\n              chart.render();\n              \n              // Initialize Pusher\n              var pusher = new Pusher('YOUR_APP_KEY', { // update your APP_KEY\n                  cluster: 'CLUSTER',\n                  encrypted: true\n              });\n              \n              var channel = pusher.subscribe('poll');\n              channel.bind('vote', (data) =\u003e {\n                  dataPoints = dataPoints.map(x =\u003e {\n                      if (x.label == data.fans) {\n                          x.y += data.points;\n                          return x;\n                      } else {\n                          return x;\n                      }\n                  });\n                  chart.render()\n              });        \n          },\n          \n          actions: {\n              getElement(e) {\n                  var id = e.target.id;\n                  axios.post('http://localhost:3000/vote', {id});\n              }\n          }  \n      });\n```\n\nFirst, we imported the required modules for this component and we added a `dataPoints`  array that will serve as the initial data source for the chart. The objects in the array have a uniform structure of `label`, which stores the name of the country and `y` which stores the points.\n\nIn addition, we used the `Chart` constructor function to create a chart by passing the basic configuration for the chart which includes the `dataPoints`. The chart is rendered by calling `render()` on the constructor function instance.\n\nNext, we initialize Pusher with the `APP_KEY` and `CLUSTER` as obtained from our Pusher account dashboard and then proceeded to use the `subscribe()` method from Pusher to subscribe to the created `poll` channel, update the `dataPoints` variable and re-render the chart with `render()`.\n\nFinally, the `getElement()` action was used to get the `id` of the item clicked and `POST` it to the server. This action will be triggered once a user clicks on an image in the template file for this component.\n\nDon’t forget to replace the `YOUR_APP_KEY` and `CLUSTER` placeholder with the appropriate details from your Pusher account dashboard.\n\n### Voting app component template\n\nEarlier, we passed the `dataset` from the template file for the `realtime` route to this component\nin  `./app/templates/realtime.hbs`. So here, we’ll loop over each item in the `dataset`. Open `./app/templates/components/voting-app.hbs` and edit as shown below:\n\n``` html\n    {{!-- ./app/templates/components/voting-app.hbs --}}\n     \n      \u003cdiv class=\"col-md-12\"\u003e\n        \u003cdiv class=\"row\"\u003e\n           {{#each poll as |data|}}            \n          \u003cdiv class=\"col-md-3\"\u003e\n            \u003cdiv class=\"poll-device\"\u003e\n                \u003cimg onclick={{action 'getElement'}} src=\"{{data.imgSrc}}\" alt=\"\" id=\"{{data.id}}\"\u003e\n                \u003cp class=\"text-center caption\"\u003e{{data.fans}}\u003c/p\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n          {{/each}}\n        \u003c/div\u003e\n      \u003c/div\u003e  \n```\n\n\n## Update the app template\n\nUpdate the application template file by adding the container where the chart will be rendered:\n\n``` html\n    {{!-- ./app/templates/application.hbs --}}\n      \n      \u003cdiv id=\"vote-chart-container\"\u003e\u003c/div\u003e\n      {{outlet}}\n```\n\n## Stylesheet\n\nTo add some minimal styling to the page, open `./app/styles/app.css` and paste this code in it:\n\n``` css\n    // ./app/styles/app.css\n    \n      @import url('https://fonts.googleapis.com/css?family=Spectral');\n      *, *:before, *:after {\n        box-sizing: border-box;\n      }\n      html, body {\n        font-family: 'Spectral', serif;\n        height: 100%;\n      }\n      .main {\n        height: 100%;\n        background-color: #FAFAFA;\n      }\n      .container {\n        padding-top: 20px;\n        padding-bottom: 20px;\n      }\n      h1 {\n        text-align: center;\n      }\n      .caption {\n          font-weight: bold;\n      }\n      .poll-device {\n        border: 1px solid #EDEDED;\n      }\n      .poll-device p {\n        padding: 10px;\n      }\n      .poll-device.selected {\n        background: #EDEDED;\n      }\n      .poll-device:hover {\n        background: #EDEDED;\n        cursor: pointer;\n      }\n      \n      .poll-device img {\n        width: 100%;\n        height: auto;\n        display: block;\n        margin: 0 auto;\n      }\n      #vote-chart-container {\n        height: 300px;\n         width: 100%;\n         background: #f5f5f5;\n      }\n```\n\n\n## Updating the index page\n\nOpen the `./app/index.html` file and include the CDN file for Bootstrap to enhance the styling and layout of our application. Open up the file and add update as shown below:\n\n``` html\n     \u003c!-- ./app/index.html --\u003e\n     \n      \u003c!DOCTYPE html\u003e\n      \u003chtml\u003e\n        \u003chead\u003e\n          \u003cmeta charset=\"utf-8\"\u003e\n          \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e\n          \u003ctitle\u003eRealtimeVotingEmber\u003c/title\u003e\n          \u003cmeta name=\"description\" content=\"\"\u003e\n          \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n          {{content-for \"head\"}}\n          \u003clink integrity=\"\" rel=\"stylesheet\" href=\"{{rootURL}}assets/vendor.css\"\u003e\n          \u003clink integrity=\"\" rel=\"stylesheet\" href=\"{{rootURL}}assets/realtime-voting-ember.css\"\u003e\n          \n          \u003c!-- add the CDN file --\u003e\n          \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\u003e\n      \n          {{content-for \"head-footer\"}}\n        \u003c/head\u003e\n        \u003cbody\u003e\n          {{content-for \"body\"}}\n          \u003cscript src=\"{{rootURL}}assets/vendor.js\"\u003e\u003c/script\u003e\n          \u003cscript src=\"{{rootURL}}assets/realtime-voting-ember.js\"\u003e\u003c/script\u003e\n          {{content-for \"body-footer\"}}\n        \u003c/body\u003e\n      \u003c/html\u003e\n```\n\n\n## Testing the application\n\nStop the Ember development server if it is currently running by typing `Ctrl + C`  in the terminal and restart it with `ember serve`. In addition, don’t forget to also run `node app.js` from another terminal to start the Express server in case you haven’t done that. Next, open http://localhost:4200/realtime to test the application.\n\n![emberjs-voting-homepage](//images.ctfassets.net/1es3ne0caaid/5KhOVacUi4666eOGEaYy/8ed019fade1ddc0417a0d56cd76d0303/emberjs-voting-homepage.png)\n\nIf you wish to access the application without adding the `/realtime` path, you can edit the application’s router file `./app/router.js` by updating the path as shown below:\n\n``` javascript\n    // ./app/router.js\n    \n      import EmberRouter from '@ember/routing/router';\n      import config from './config/environment';\n      const Router = EmberRouter.extend({\n        location: config.locationType,\n        rootURL: config.rootURL\n      });\n      Router.map(function() {\n        // edit the path\n        this.route('realtime', { path: '/'});\n      });\n      export default Router;\n```\n\nNow if you visit http://localhost:4200, you should still see the application fully functioning.\n\n\n## Conclusion\n\nAlthough a voting system definitely has more features than what we have implemented here, I anticipate that with the basic knowledge gained from this tutorial you can easily get more creative and improve your existing project or new ones.\n\nI hope you found this tutorial useful. The complete source code can be found here on [GitHub](https://github.com/yemiwebby/realtime-voting-ember).","metaTitle":"Build a voting system with Ember.js","metaDescription":"Use Ember.js and Node.js to create a simple voting application. Users will pick their favorite World Cup team supporters, and be able to see poll results in realtime."}}],"defaultValue":"Channels \u0026 JavaScript","queryType":"tag","pages":25,"route":"/tutorials","query":{"product":"Channels","tag":"JavaScript","page":"10"}}},"page":"/tutorials","query":{"product":"Channels","tag":"JavaScript","page":"10"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=JavaScript&page=10 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:47:02 GMT -->
</html>