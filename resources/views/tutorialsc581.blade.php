<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=JavaScript&page=26 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:47 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">290</span> tutorials for “<span class="css-npldjc ehwuahf2">JavaScript</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials512c.html?product=Beams&amp;tag=JavaScript" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials.html" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#C223CE" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#C223CE"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="JavaScript"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/react-websockets.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat</li></ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Making React realtime with websockets</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Build a chat application using React and Pusher. </p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-aspnet.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">ASP.NET<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">jQuery<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app using ASP.NET</h3><p class="css-k12xad e5jrto45">Leverage from the power of ASP.NET and create a simple chat app.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/pwa-vuejs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">HTML</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime PWA using Vue.js</h3><p class="css-k12xad e5jrto45">Build a food delivery tracking progressive web application (PWA) with Vue.js.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/typing-indicator-aspnet.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">ASP.NET<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">C#<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">jQuery</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a typing indicator in ASP.NET</h3><p class="css-k12xad e5jrto45">Learn how to implement a typing indicator feature in your chat application using Pusher, .NET, C# code and some jQuery. </p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/trade-platform-javascript.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Realtime Graph</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a trade platform using JavaScript</h3><p class="css-k12xad e5jrto45">In this tutorial we will be building a trade platform that portrays the experience for stock markets using Vanilla JavaS...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-geolocation-arkit-corelocation.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">AR-VR<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime geolocation app with ARKit and CoreLocation</h3><p class="css-k12xad e5jrto45">Discover how to build a AR experience for ride hailing apps focused on location and realtime features.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-likes-nodejs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build realtime likes with Node.js</h3><p class="css-k12xad e5jrto45">In this tutorial, you will enrich your app with realtime social features such as likes using Node.js and MongoDB.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-likes-laravel.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build realtime likes with Laravel</h3><p class="css-k12xad e5jrto45">Learn how to build live social interactions like realtime likes using Laravel, a popular PHP framework.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/design-feedback-vuejs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a design feedback app using Vue.js</h3><p class="css-k12xad e5jrto45">In this tutorial, we are going to create a realtime design feedback application with Vue.js and Laravel.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialsa5cb.html?tag=JavaScript&amp;page=25" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials700d.html?tag=JavaScript&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorials71c3.html?tag=JavaScript&amp;page=24" class="css-za1ua3 edg0byb1">24</a><a href="tutorialsa5cb.html?tag=JavaScript&amp;page=25" class="css-za1ua3 edg0byb1">25</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsc581.html?tag=JavaScript&amp;page=26" class="css-2wakph edg0byb1">26</a><a href="tutorials509f.html?tag=JavaScript&amp;page=27" class="css-za1ua3 edg0byb1">27</a><a href="tutorials1f5d.html?tag=JavaScript&amp;page=28" class="css-za1ua3 edg0byb1">28</a><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials3c54.html?tag=JavaScript&amp;page=33" class="css-5s6711 edg0byb1">33</a><a href="tutorials509f.html?tag=JavaScript&amp;page=27" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":290,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2txXtpE7lCciQUc4M4GmyS","type":"Entry","createdAt":"2018-02-22T15:04:12.993Z","updatedAt":"2018-02-28T16:55:30.946Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Making React realtime with websockets","url":"react-websockets","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/react-pusher-getting-started","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}}],"reviewDate":"2018-01-15","description":"Build a chat application using React and Pusher. ","prerequisite":"A basic understanding of React and Node.js are needed to follow this tutorial.","content":"Every chat application requires real time functionality. This amongst other benefits allows interaction between users in different location(s). A chat application like this can be built to function on diverse platforms, be it mobile or web applications. \n\nIn this tutorial, I will be showing you how to build a chat application using [React](https://reactjs.org/) and [Pusher](https://pusher.com). This is a very simple application and it comes with functionality which will be showing some of the rich features of Pusher and how you can easily combine it with a modern library like React. \n\nPusher is a platform that allows developers to easily build an application with realtime features as quickly as possible. Pusher specialises in building realtime and scalable infrastructures for developers and is packaged with powerful features like client events, queryable API, Pub/Sub messaging and others.\n\nWe will explore Pusher as we proceed in this tutorial and leverage on the DOM manipulation, event driven and data-binding ability of React.\n\nA basic knowledge of JavaScript and React will be of advantage so as to effectively participate in this tutorial.\n\nA sneak peek into what we will build in this tutorial:\n\n![reactjs-websockets-demo](//images.contentful.com/1es3ne0caaid/1O7NDl5Hv6Wia6AGEoS6mE/b842dd7761b6a525a9005e70daefd227/making-reactjs-realtime-with-websockets-demo.gif)\n\n## Getting Started\n\nFor a hitch-free flow of procedures in this tutorial, we will begin by setting up the required credentials with Pusher. If you don’t have an account, [kindly create one](https://pusher.com/) . Once you are done, go ahead and create a new app from your dashboard. Don’t forget to take note of your `app_id`, `key`, `secret` and `cluster` as you will be required to use them later in this tutorial.\n\n\n## Create React-app\n\nTo quickly scaffold a React app, we will make use of the `create``-react-app` tool. This gives us easy access to the CLI tool that will be used to start building our chat application. \n\nIt is important that you have Node and npm installed on your machine.  Quickly follow this [link](https://nodejs.org/en/) to complete that, if you don’t have it already. To verify if you have Node and npm installed, open up the terminal and run the command below:\n\n```\n    npm -v \n    node -v\n```\n\nThe version for each one will be displayed, if they are installed. The latest versions are fine.\n\n\n## Installation\n\nNow, install create-react-app and also scaffold a new React app with the following commands: \n\n```\n    npm install -g create-react-app\n    \n    create-react-app react-pusher\n```\n\nOnce all the necessary files are installed, change directory into `react-``pusher` and start the application with:\n\n```\n    npm start\n```\n\nBy now, you should have a new tab opened in your default browser:\n\n![reactjs-websockets-first-run](//images.contentful.com/1es3ne0caaid/4pHsFx37gASYMaAyqwcYES/602097101ff4bb5e2b96fc98b3b0945c/making-reactjs-realtime-with-websockets-first-run.png)\n\nWe have successfully set up the front-end of the application, we will return to this very soon. Let’s proceed to setup the server application.\n\n## Node Server\n\nNode.js using the Express web framework will be used as our server application.  The server application, amongst other functions, will provide endpoints to send messages for our chat app so as to ensure interaction between users. There are number of dependencies required for the application server, so let’s install them immediately:\n\n```\n    npm install --save axios body-parser cors express pusher pusher-js\n```\n\nTo configure the entry point of the application, create a file called `server.js` and paste the code below into it:\n\n```\n    const Pusher = require('pusher');\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const cors = require('cors');\n    \n    const app = express();\n    \n    app.use(cors());\n    app.use(bodyParser.urlencoded({extended: false}));\n    app.use(bodyParser.json());\n    const pusher = new Pusher({\n      appId: 'APP_ID',\n      key: 'APP_KEY',\n      secret: 'APP_SECRET',\n      cluster: 'APP_CLUSTER',\n      encrypted: true\n    });\n    app.set('PORT', process.env.PORT || 5000);\n    \n    app.post('/message', (req, res) =\u003e {\n      const payload = req.body;\n      pusher.trigger('chat', 'message', payload);\n      res.send(payload)\n    });\n    \n    app.listen(app.get('PORT'), () =\u003e \n      console.log('Listening at ' + app.get('PORT')))\n```\n\nHere we initialised Pusher with the required credentials and then created an endpoint to process messages from the frontend of our application.\n\n## Building Components\n\nTo define a good application structure and fully see our chat app in action, lets create some components. In React, components can either be stateful or stateless depending on the functionality that it was created for. The common patter is to have state for container components only and pass those states to UI components as props.\n\nCreate components from the terminal with:\n\n```\n    touch ChatList.js ChatBox.js\n```\n\nand lastly their respective stylesheet:\n\n```\n    touch ChatList.css ChatBox.css\n```\n\nEach of the components’ logic need to be created. Lets do that now\n\n\n## ChatBox.js\n\nThis component contains the input field for accepting the users message and also displays a welcome message showing the username passed in from the parent component. Furthermore, `handleTextChange` is also passed from the parent component. This component is exported and configured like:\n\n```\n    import React from \"react\";\n    import './ChatBox.css';\n    export default ({ text, username, handleTextChange }) =\u003e (\n      \u003cdiv\u003e\n        \u003cdiv className=\"row\"\u003e\n        \u003cdiv className=\"col-xs-12\"\u003e\n          \u003cdiv className=\"chat\"\u003e\n            \u003cdiv className=\"col-xs-5 col-xs-offset-3\"\u003e\n              \u003cinput\n                type=\"text\"\n                value={text}\n                placeholder=\"chat here...\"\n                className=\"form-control\"\n                onChange={handleTextChange}\n                onKeyDown={handleTextChange}\n              /\u003e\n            \u003c/div\u003e\n            \u003cdiv className=\"clearfix\"\u003e\u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003ch4 className=\"greetings\"\u003eHello, {username}\u003c/h4\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n    );\n```\n\nThis component above is styled with imported stylesheet `ChatBox.css` :\n\n```\n    .greetings {\n        margin-top: 90px;\n        text-align: center;\n    }\n```\n\n## ChatList.js\n\nThis is responsible for displaying the list of chats inputted by each user. Added to it is the username and messages. This is also implemented as shown below and exported:\n\n```\n    import React from \"react\";\n    import \"./ChatList.css\";\n    import avatar from \"./avatar.png\";\n    export default ({ chats }) =\u003e (\n      \u003cul\u003e\n        {chats.map(chat =\u003e {\n          return (\n            \u003cdiv\u003e\n              \u003cdiv className=\"row show-grid\"\u003e\n                \u003cdiv className=\"col-xs-12\"\u003e\n                  \n                  \u003cdiv className=\"chatMessage\"\u003e\n                    \u003cdiv key={chat.id} className=\"box\"\u003e\n                      \u003cp\u003e\n                        \u003cstrong\u003e{chat.username}\u003c/strong\u003e\n                      \u003c/p\u003e\n                      \u003cp\u003e{chat.message}\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv className=\"imageHolder\"\u003e\n                    \u003cimg src={avatar} className=\"img-responsive avatar\" alt=\"logo\" /\u003e\n                  \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          );\n        })}\n      \u003c/ul\u003e\n    );\n```\n\nAnd the stylesheet `ChatList.css`:\n\n```\n    ul {\n      list-style-type: none;\n    }\n    .chat {\n      margin-top: 50px;\n    }\n    .chatMessage {\n      position: relative;\n      border: 1px solid #ccc;\n      border-radius: 5px;\n      margin: 20px auto;\n      width: 700px;\n      display: table;\n    }\n    .box {\n      background-color: #ffffff;\n      padding: 20px;\n      border-bottom: 1px solid #cccccc;\n    }\n    .imageHolder {\n      width: 50px;\n      height: 50px;\n      position: absolute;\n      top: 20px;\n      right: 50px;\n    }\n```\n\nWe have successfully completed the `ChatBox` and `ChatList` component. As far as the application is concerned, these modules are not yet available to be rendered in the parent app component yet.  To correct this, the `A``pp.js` file needs to be configured.\n\n## Parent Container Component (App.js)\n\nThis is regarded as the parent component. It ensures effective parent-child communication by passing props down to each child component. In App.js, a class named App is used to extend the React Component class and a constructor is defined with its properties and methods. In App.js required node modules and CSS file are imported with:\n\n```\n    import React, { Component } from 'react';\n    import axios from 'axios';\n    import Pusher from 'pusher-js';\n    import ChatList from './ChatList';\n    import ChatBox from './ChatBox';\n    import logo from './logo.svg';\n    import './App.css';\n    ...\n```    \n\nNext a class that extends the Component class imported from the React module is created. Also defined in this class is the state variables. The `super()` method is also called whenever a child class is extended from a parent class. In this case, props is also passed as a parameter. The state variables in the app are created and defined in the constructor like this:\n\n```\n    ...\n    class App extends Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n          text: '',\n          username: '',\n          chats: []\n        };\n      }\n      componentDidMount() {\n        ...\n      }\n      handleTextChange(e) {\n       ...\n      }\n      render() {\n        return (\n          \u003cdiv className=\"App\"\u003e\n           ...\n          \u003c/div\u003e\n        );\n      }\n    }\n    ...\n```\n\nAfter defining the required state of the app, you can start subscribing to the Pusher channel and binding to the events emitted by your server:\n\n```\n     componentDidMount() {\n        const username = window.prompt('Username: ', 'Anonymous');\n        this.setState({ username });\n        const pusher = new Pusher('APP_KEY', {\n          cluster: 'APP_CLUSTER',\n          encrypted: true\n        });\n        const channel = pusher.subscribe('chat');\n        channel.bind('message', data =\u003e {\n          this.setState({ chats: [...this.state.chats, data], test: '' });\n        });\n        this.handleTextChange = this.handleTextChange.bind(this);\n      }\n      \n      handleTextChange(e) {\n        if (e.keyCode === 13) {\n          const payload = {\n            username: this.state.username,\n            message: this.state.text\n          };\n          axios.post('http://localhost:5000/message', payload);\n        } else {\n          this.setState({ text: e.target.value });\n        }\n      }\n```\n\nBringing it all together:\n\n```\n    render() {\n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003cheader className=\"App-header\"\u003e\n              \u003cimg src={logo} className=\"App-logo\" alt=\"logo\" /\u003e\n              \u003ch1 className=\"App-title\"\u003eWelcome to React-Pusher Chat\u003c/h1\u003e\n            \u003c/header\u003e\n            \u003csection\u003e\n              \u003cChatList chats={this.state.chats} /\u003e\n              \u003cChatBox\n                text={this.state.text}\n                username={this.state.username}\n                handleTextChange={this.handleTextChange}\n              /\u003e\n            \u003c/section\u003e\n          \u003c/div\u003e\n        );\n      }\n```\n\nIn case you missed anything, you can find the complete App.js file [right here](https://github.com/christiannwamba/react-pusher-getting-started/blob/master/src/App.js).\n\n![reactjs-websockets-demo](//images.contentful.com/1es3ne0caaid/1O7NDl5Hv6Wia6AGEoS6mE/b842dd7761b6a525a9005e70daefd227/making-reactjs-realtime-with-websockets-demo.gif)\n\n## Conclusion\n\nThis article has covered the basic steps necessary to create a realtime chat application using React and Pusher. Moving forward, the concept demonstrated here can be built upon and extended to cater for any other realtime features you wish to build in your application. I hope you have found this tutorial helpful and feel free to improve on the code available [here](https://github.com/christiannwamba/react-pusher-getting-started) and drop comment(s) below, if any.","metaTitle":"Making React realtime with websockets","metaDescription":"Follow the steps you need to build a chat application using React and Pusher. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"b1qV9Li0piqwKkU0cCk2U","type":"Entry","createdAt":"2018-02-28T14:09:10.530Z","updatedAt":"2020-06-19T14:07:22.845Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app using ASP.NET","url":"chat-aspnet","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/create-chat-app-with-.NET-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2kVecA2nXe6CSEuigMi4Yq","type":"Entry","createdAt":"2018-02-12T14:46:25.053Z","updatedAt":"2018-02-12T14:46:25.053Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"ASP.NET","url":"asp-net","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1NUYHyE9AsKICMGiIyCA4y","type":"Entry","createdAt":"2018-02-12T14:53:47.651Z","updatedAt":"2018-02-26T12:31:14.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"jQuery","url":"jquery","type":"library"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2018-01-15","description":"Leverage from the power of ASP.NET and create a simple chat app.","prerequisite":"A basic understanding of C# and jQuery is needed to follow this tutorial.","content":"Communication in our current age is largely digital, and the most popular form of digital communication is Instant Messaging. \n\nSome applications include some form of chat implementation e.g. Slack or Facebook. In this tutorial, we will consider how to build a chat application using C# .NET.\n\nTo follow along with this tutorial, you will require:\n- Visual Studio, an IDE popularly used for building .NET projects. View installation details [here](https://www.visualstudio.com/).\n- Basic knowledge of C#.\n- Basic knowledge of .NET MVC.\n- Basic knowledge of JavaScript (jQuery).\n\n![chat-aspnet-demo](//images.contentful.com/1es3ne0caaid/42MprYw0S4GQ8eMwSAww48/c521cf08d0cc971e9a198f7a753212f2/chat-aspnet-demo.gif)\n\n## Setting up our chat project\n\nUsing our Visual Studio IDE, we’ll create our chat project by following the **New Project** wizard.\n\nWe will:\n- Set C# as our language to use.\n- Select .NET MVC Project as the template.\n- Fill in the Project name e.g. HeyChat.\n- Fill in the Solution name i.e. application name.\n\n![chat-aspnet-new-project](//images.contentful.com/1es3ne0caaid/odxwTAff4yEWksCqw2G8c/1b00a776e0746990195d4be2cd786d54/chat-aspnet-new-project.gif)\n\n\n## Creating our chat app\n### Defining pages and routes\n\nFor the purpose of this tutorial, our chat app will consist of 2 pages:\n- The front page - where our user signs up.\n- The chat view - where our user selects a contact and exchanges messages.\n\nTo achieve these views, we will need the following routes:\n- The route to render the front page.\n- The route to implement login.\n- The route to render the chat page.\n\n\n\u003e 💡 These routes only render the views and implement user login. We’ll add more routes as we go along.\n\nAdding these routes to our `RouteConfig.cs` file we’ll have:\n\n```\n    routes.MapRoute(\n        name: \"Home\",\n        url: \"\",\n        defaults: new { controller = \"Home\", action = \"Index\" }\n    );\n    \n    routes.MapRoute(\n        name: \"Login\",\n        url: \"login\",\n        defaults: new { controller = \"Auth\", action = \"Login\" }\n    );\n    \n    routes.MapRoute(\n        name: \"ChatRoom\",\n        url: \"chat\",\n        defaults: new { controller = \"Chat\", action=\"Index\"}\n    );\n```\n\n\nThese route definitions specify the route pattern and the **Controller** and **Action** to handle it.\n\u003e 💡 Creating our project with Visual Studio automatically creates the `HomeContoller.cs` file with an `Index` action. We will use this for our home route.\n\nIn our `HomeController.cs` we’ll render the front page where our users can log in with:\n\n```\n    //HomeController.cs\n    \n    // ...\n    Using System.Web.Mvc;\n    // ...\n    public class HomeController : Controller\n    {\n        public ActionResult Index()\n        {\n            if ( Session[\"user\"] != null ) {\n                return Redirect(\"/chat\");\n            }\n    \n            return View();\n        }\n    }\n```\n\n\u003e 💡 The `View` function creates a view response which we return. When it is invoked, C# looks for the default view of the calling controller class. This default view is the `index.cshtml` file found in the Views directory, in a directory with the same name as the Controller i.e. The default view of the HomeController class will be the `Views/Home/index.cshtml` file.\n\n\n### Setting up our database\n\nIn order to implement our login feature, we’ll need a database to store users. There are several database drivers to choose from but, in this tutorial, we’ll use the MySQL database driver along with a .NET ORM called Entity Framework.\n\nWe will start by installing the `MySql.Data.Entities` package via NuGet (.NET’s package manager). And then, we’ll install the **Entity Framework** package also via NuGet, to provide us with our ORM functionality.\n\n\n\u003e 💡 To install packages using NuGet, right-click the Packages folder in our project solution; select the `Add Package` option; and search and select your desired package.\n\nOnce our packages have been installed, we will begin setting up our database connection and communication.\n\nFirst, we will add our database connection credentials to the `Web.config` file found in our solution folder. In `Web.config` we will add:\n\n```\n    \u003cconnectionStrings\u003e\n        \u003cadd name=\"YourConnectionName\" connectionString=\"Server=localhost;Database=database_name;Uid=root;Pwd=YourPassword;\" providerName=\"MySql.Data.MySqlClient\" /\u003e\n    \u003c/connectionStrings\u003e\n```\n\n\u003e ⚠️  You will need to replace the placeholder values in the snippet above with actual values database values.\n\nThe `Web.config` file is an **XML** file and the above `connectionStrings` element will be added in the body of the `configuration` element of the file.\n\nNext, we’ll create a `Models` folder inside our solution folder (on the same folder level as `Controllers`). In this folder, we will create our model class - this class is a representation of our table. For the login feature we will create the `User.cs` file. In this class file, we will add the properties of our model:\n\n```\n    // File: User.cs file\n    \n    using System;\n    using System.Collections.Generic;\n    namespace HeyChat.Models\n    {\n        public class User\n        {\n            public User()\n            {\n            }\n    \n            public int id { get; set; }\n            public string name { get; set; }\n            public DateTime created_at { get; set; }\n        }\n    }\n```\n\n\u003e 💡 To create a model class, right-click the Model folder, select the `Add` and `New File` options, and then `Empty Class` option filling in the class name.\n\nOur `User` model defines an ID for unique identification, user’s name and created date of the user for our users table.\n\nFinally, we will add our database context class. This class reads in the database connection configuration we defined in the `Web.config` file and takes the Model classes (Datasets) to which it should apply the configuration.\n\nWe will create our context class in our `Models` folder, following the same steps of creating a new empty class, and we will name it `ChatContext.cs`. In it, we will add the following:\n\n```\n    // File: ChatContext.cs\n    \n    using System;\n    using System.Data.Entity;\n    namespace HeyChat.Models\n    {\n        public class ChatContext: DbContext\n        {\n            public ChatContext() : base(\"YourConnectionName\")\n            {\n            }\n    \n            public static ChatContext Create()\n            {\n                return new ChatContext();\n            }\n    \n            public DbSet\u003cUser\u003e Users { get; set; }\n        }\n    }\n```\n\n\u003e 💡 We are implementing the Entity Framework ORM using the Code First method. This method involves writing the code defining our models (tables) without any existing database or tables. With this method, the database and tables will be created when our application code is executed.\n\n### Logging in our users\n\nSince our database connection and model (though as we go along more models may be introduced) have been created, we can proceed with our login functionality.\n\nThe front page rendered from the `HomeController` will consist of a form that accepts a user’s name. This form will be submitted to the `/``login` route which we defined earlier. Following our route definition, this request will be handled by the `AuthController` and its `Login` action method.\n\nWe will create the `AuthController` class and add our code for storing or retrieving a user’s details. The option to either store or retrieve will be based on if the user’s name already exists in our `Users` Table. The code for the `AuthController` is below:\n\n```\n    // File: AuthController\n    \n    // ...\n    using HeyChat.Models;\n    public class AuthController : Controller\n    {\n        [HttpPost]\n        public ActionResult Login()\n        {\n            string user_name = Request.Form[\"username\"];\n    \n            if (user_name.Trim() == \"\") {\n                return Redirect(\"/\");\n            }\n    \n            using (var db = new Models.ChatContext()) {\n    \n                User user = db.Users.FirstOrDefault(u =\u003e u.name == user_name);\n    \n                if (user == null) {\n                    user = new User { name = user_name };\n    \n                    db.Users.Add(user);\n                    db.SaveChanges();\n                }\n    \n                Session[\"user\"] = user;\n            }\n    \n            return Redirect(\"/chat\");\n        }\n    }\n```\n\nIn the code above, we check if a user exists using the name. If it exists we retrieve the user’s details and, if it doesn’t, we create a new record first. Then we assign the user’s details into a `session` object for use throughout the application. Lastly, we redirect the user to the chat page.\n\n### Rendering the chat page\n\nOne feature of most Chat applications is the ability to choose who to chat with. For the purpose of this tutorial, we will assume all registered users can chat with each other so our chat page will offer the possibility of chatting with any of the users stored in our database.\n\nEarlier, we defined our chat route and assigned it to the `ChatController` class and its `Index` action method. \n\nLet’s create the `ChatController` and implement the rendering of the chat page with available contacts. Paste the code below into the `ChatController`:\n\n```\n    // File: ChatController\n    \n    // ...\n    using HeyChat.Models;\n    \n    namespace HeyChat.Controllers\n    {\n        public class ChatController : Controller\n        {\n            public ActionResult Index()\n            {\n                if (Session[\"user\"] == null) {\n                    return Redirect(\"/\");\n                }\n    \n                var currentUser = (Models.User) Session[\"user\"];\n    \n                using ( var db = new Models.ChatContext() ) {\n    \n                    ViewBag.allUsers = db.Users.Where(u =\u003e u.name != currentUser.name )\n                                     .ToList();\n                }\n    \n    \n                ViewBag.currentUser = currentUser;\n    \n    \n                return View ();\n            }\n        }\n    }\n```\n\nTo get the available contacts, we read all the users in our database except the current user. These users are passed to our client side using `ViewBag`. We also pass the current user using `ViewBag`.\n\nNow that we have retrieved all the available contacts into the `ViewBag` object, we will create the markup for displaying these contacts and the rest of the chat page to the user. To create the view file for our chat page, we create a `Chat` folder in the `Views` folder. \n\nNext, right click the `Chat` folder, select the options to `Add` → `Views`, select the Razor template engine and name the file `index.cshtml`. Paste in the code below into the file: \n\n```\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n      \u003chead\u003e\n        \u003ctitle\u003epChat \u0026mdash; Private Chatroom\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"@Url.Content(\"~/Content/app.css\")\"\u003e\n      \u003c/head\u003e\n      \u003cbody\u003e\n        \u003c!-- Navigation Bar --\u003e\n        \u003cnav class=\"navbar navbar-inverse\"\u003e\n          \u003cdiv class=\"container-fluid\"\u003e\n            \u003cdiv class=\"navbar-header\"\u003e\n              \u003ca class=\"navbar-brand\" href=\"#\"\u003epChat - @ViewBag.currentUser.name \u003c/a\u003e\n            \u003c/div\u003e\n            \u003cul class=\"nav navbar-nav navbar-right\"\u003e\n              \u003cli\u003e\u003ca href=\"#\"\u003eLog Out\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/div\u003e\n        \u003c/nav\u003e\n        \u003c!-- / Navigation Bar --\u003e\n        \u003cdiv class=\"container\"\u003e\n          \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-xs-12 col-md-3\"\u003e\n              \u003caside class=\"main visible-md visible-lg\"\u003e\n                \u003cdiv class=\"row\"\u003e\n                  \u003cdiv class=\"col-xs-12\"\u003e\n                    \u003cdiv class=\"panel panel-default users__bar\"\u003e\n                      \u003cdiv class=\"panel-heading users__heading\"\u003e\n                        Contacts (@ViewBag.allUsers.Count)\n                      \u003c/div\u003e\n                      \u003cdiv class=\"__no__chat__\"\u003e\n                          \u003cp\u003eSelect a contact to chat with\u003c/p\u003e\n                      \u003c/div\u003e\n                      \u003cdiv class=\"panel-body users__body\"\u003e\n                        \u003cul id=\"contacts\" class=\"list-group\"\u003e\n    \n                        @foreach( var user in @ViewBag.allUsers ) {\n                            \u003ca class=\"user__item contact-@user.id\" href=\"#\" data-contact-id=\"@user.id\" data-contact-name=\"@user.name\"\u003e\n                                \u003cli\u003e\n                                  \u003cdiv class=\"avatar\"\u003e\n                                     \u003cimg src=\"@Url.Content(\"~/Content/no_avatar.png\")\"\u003e\n                                  \u003c/div\u003e\n                                  \u003cspan\u003e@user.name\u003c/span\u003e\n                                  \u003cdiv class=\"status-bar\"\u003e\u003c/div\u003e\n                                \u003c/li\u003e\n                            \u003c/a\u003e\n                        }\n                        \u003c/ul\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/aside\u003e\n    \n    \n            \u003c/div\u003e\n            \u003cdiv class=\"col-xs-12 col-md-9 chat__body\"\u003e\n              \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col-xs-12\"\u003e\n                  \u003cul class=\"list-group chat__main\"\u003e\n    \n                  \u003c/ul\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"chat__type__body\"\u003e\n                  \u003cdiv class=\"chat__type\"\u003e\n                    \u003ctextarea id=\"msg_box\" placeholder=\"Type your message\"\u003e\u003c/textarea\u003e\n                    \u003cbutton class=\"btn btn-primary\" id=\"sendMessage\"\u003eSend\u003c/button\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"chat__typing\"\u003e\n                  \u003cspan id=\"typerDisplay\"\u003e\u003c/span\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"@Url.Content(\"~/Content/app.js\")\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```  \n\n\u003e 💡 `@Url.Content(\"~/Content/app.css\")` and `@Url.Content(\"~/Content/app.js\")` load some previously bundled JavaScript and CSS dependencies such as jQuery and Bootstrap from our `Content` folder.\n\nIn our view file, we create a sidebar and loop through the users passed to `ViewBag` to indicate the contacts available using Razor’s `@foreach` directive. We also add a text area to type and send messages to these contacts.\n\n### Selecting contacts and sending messages\n\nWhen our user selects a contact to chat with, we would like to retrieve the previous messages between the user and the selected contact. In order to achieve this, we would need a table for storing messages between users and a Model for this table.\n\nLet’s create a model called `Conversations` in the `Models` folder. It will consist of a unique `id`, `sender_id`, `receiver_id`, `message`, `status` and the `created_at` date. The code for the model is below:\n\n```\n    // File: Conversation.cs\n    \n    using System;\n    namespace HeyChat.Models\n    {\n        public class Conversation\n        {\n            public Conversation()\n            {\n                status = messageStatus.Sent;\n            }\n    \n            public enum messageStatus\n            {\n                Sent, \n                Delivered\n            }\n    \n            public int id { get; set; }\n            public int sender_id { get; set; }\n            public int receiver_id { get; set; }\n            public string message { get; set; }\n            public messageStatus status { get; set; }\n            public DateTime created_at { get; set; }\n        }\n    } \n```\n\nAfter creating the `Conversation` model, we will add it to the `ChatContext` file as seen below:\n\n```\n    // File: ChatContext.cs\n    using System;\n    using System.Data.Entity;\n    \n    namespace HeyChat.Models\n    {\n        public class ChatContext: DbContext\n        {\n            public ChatContext() : base(\"MySqlConnection\")\n            {\n            }\n    \n            public static ChatContext Create()\n            {\n                return new ChatContext();\n            }\n    \n            public DbSet\u003cUser\u003e Users { get; set; }\n            public DbSet\u003cConversation\u003e Conversations { get; set; }\n        }\n    }\n```\n\nTo retrieve the messages, we will create a route for `/contact``/conversations/{contact}`. This route will accept a contact ID, retrieve messages between the current user and the contact, then return the messages in a JSON response. \n\nIt will be handled by the `ChatController` in the `ConversationWithContact` action method as seen below:\n\n```\n    //ChatController.cs\n    \n    ...\n    public JsonResult ConversationWithContact(int contact)\n    {\n        if (Session[\"user\"] == null)\n        {\n            return Json(new { status = \"error\", message = \"User is not logged in\" });\n        }\n    \n        var currentUser = (Models.User)Session[\"user\"];\n    \n        var conversations = new List\u003cModels.Conversation\u003e();\n    \n        using (var db = new Models.ChatContext())\n        {\n            conversations = db.Conversations.\n                              Where(c =\u003e (c.receiver_id == currentUser.id \n                                  \u0026\u0026 c.sender_id == contact) || \n                                  (c.receiver_id == contact \n                                  \u0026\u0026 c.sender_id == currentUser.id))\n                              .OrderBy(c =\u003e c.created_at)\n                              .ToList();\n        }\n    \n        return Json(\n            new { status = \"success\", data = conversations }, \n            JsonRequestBehavior.AllowGet\n        );\n    }\n```\n\nNow that we have a route to retrieve old messages, we will use some jQuery to select the user, fetch the messages and display them on our page.\nIn our view file, we will create a `script` tag to hold our JavaScript and jQuery functions. In it, we’ll add:\n\n```\n    ...\n    \u003cscript\u003e\n    let currentContact = null; // Holds current contact\n    let newMessageTpl = \n    `\u003cdiv\u003e\n        \u003cdiv id=\"msg-{{id}}\" class=\"row __chat__par__\"\u003e\n          \u003cdiv class=\"__chat__\"\u003e\n            \u003cp\u003e{{body}}\u003c/p\u003e\n            \u003cp class=\"delivery-status\"\u003eDelivered\u003c/p\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n     \u003c/div\u003e`;\n    ...\n    // select contact to chat with\n    $('.user__item').click( function(e) {\n        e.preventDefault();\n    \n        currentContact = {\n            id: $(this).data('contact-id'),\n            name: $(this).data('contact-name'),\n        };\n    \n        $('#contacts').find('li').removeClass('active');\n    \n        $('#contacts .contact-' + currentContact.id).find('li').addClass('active');\n        getChat(currentContact.id);\n    });\n    \n    // get chat data        \n    function getChat( contact_id ) {\n        $.get(\"/contact/conversations/\" + contact_id )\n         .done( function(resp) {         \n            var chat_data = resp.data || [];\n            loadChat( chat_data );         \n         });\n    }\n    \n    //load chat data into view\n    function loadChat( chat_data ) {\n    \n        chat_data.forEach( function(data) {\n            displayMessage(data);\n        });\n    \n        $('.chat__body').show();\n        $('.__no__chat__').hide();\n    }\n    \n    function displayMessage( message_obj ) {\n        const msg_id = message_obj.id;\n        const msg_body = message_obj.message;\n    \n        let template = $(newMessageTpl).html();\n    \n        template = template.replace(\"{{id}}\", msg_id);\n        template = template.replace(\"{{body}}\", msg_body);\n    \n        template = $(template);\n    \n        if ( message_obj.sender_id == @ViewBag.currentUser.id ) {\n            template.find('.__chat__').addClass('from__chat');\n        } else {\n            template.find('.__chat__').addClass('receive__chat');\n        }\n    \n        if ( message_obj.status == 1 ) {\n            template.find('.delivery-status').show();\n        }\n    \n        $('.chat__main').append(template);\n    }\n```\n\nNow that selecting a contact retrieves previous messages, we need our user to be able to send new messages. To achieve this, we will create a route that accepts the message being sent and saves it to the database, and then use some jQuery to read the message text from the `textarea` field and send to this route.\n\n```\n    //RouteConfig.cs\n    \n    ...\n    routes.MapRoute(\n        name: \"SendMessage\",\n        url: \"send_message\",\n        defaults: new { controller = \"Chat\", action = \"SendMessage\" }\n    );\n```\n\nAs specified in the `RouteConfig` file, this route will be handled by the `SendMessage` action method of the `ChatController`.\n\n```\n    //ChatController.cs\n    \n    ...\n    [HttpPost]\n    public JsonResult SendMessage() \n    {\n        if (Session[\"user\"] == null)\n        {\n            return Json(new { status = \"error\", message = \"User is not logged in\" });\n        }\n    \n        var currentUser = (User)Session[\"user\"];\n    \n        string socket_id = Request.Form[\"socket_id\"];\n    \n        Conversation convo = new Conversation\n        {\n            sender_id = currentUser.id,\n            message = Request.Form[\"message\"],\n            receiver_id = Convert.ToInt32(Request.Form[\"contact\"])\n        };\n    \n        using ( var db = new Models.ChatContext() ) {\n            db.Conversations.Add(convo);\n            db.SaveChanges();\n        }\n    \n        return Json(convo);\n    }\n```\n\n### Adding realtime functionality\n\nThere are several features of a chat application that require realtime functionality, some of which are:\n- Receiving messages sent in realtime.\n- Being notified of an impending response - the ‘user is typing’ feature.\n- Getting message delivery status.\n- Instant notification when a contact goes offline or online.\n\nIn achieving these features, we will make use of [Pusher](http://pusher.com). To proceed lets head over to the Pusher [dashboard](https://dashboard.pusher.com/) and create an app. You can [register for free](https://pusher.com/signup?plan=sandbox) if you haven’t got an account. Fill out the create app form with the information requested. Next, we’ll install the **Pusher Server** package in our C# code using NuGet.\n\nTo achieve some of our stated realtime features, we will need to be able to trigger events on the client side. In order to trigger client events in this application, we will make use of Private Channels. \n\nWe will create our private channel when a contact is chosen. This channel will be used to transmit messages between the logged in user and the contact he is sending a message to.\n\nPrivate channels require an authentication endpoint from our server side code to be available, because when the channel is instantiated Pusher will try to authenticate that the client has valid access to the channel.\n\nThe default route for Pusher's authentication request is `/pusher/auth`, so we will create this route and implement the authentication.\n\nFirst in our `RouteConfig.cs` file we will add the route definition:\n\n```\n    routes.MapRoute(\n        name: \"PusherAuth\",\n        url:  \"pusher/auth\",\n        defaults: new { controller = \"Auth\", action = \"AuthForChannel\"}\n    );\n```\n\nThen, as we have defined above, in the `AuthController` class file we will create the `AuthForChannel` action method and add:\n\n```\n    public JsonResult AuthForChannel(string channel_name, string socket_id)\n    {\n        if (Session[\"user\"] == null)\n        {\n            return Json(new { status = \"error\", message = \"User is not logged in\" });\n        }\n        var currentUser = (Models.User)Session[\"user\"];\n        \n        var options = new PusherOptions();\n        options.Cluster = \"PUSHER_APP_CLUSTER\";\n        \n        var pusher = new Pusher(\n        \"PUSHER_APP_ID\",\n        \"PUSHER_APP_KEY\",\n        \"PUSHER_APP_SECRET\", options);\n        \n        if (channel_name.IndexOf(currentUser.id.ToString()) == -1)\n        {\n            return Json(\n              new { status = \"error\", message = \"User cannot join channel\" }\n            );\n        }\n    \n        var auth = pusher.Authenticate(channel_name, socket_id);\n    \n        return Json(auth);\n    }\n```\n\nOur authentication endpoint, above, takes the name of the channel and the socket ID of the client, which are sent by Pusher at a connection attempt. \n\n\n\u003e 💡 We will name our private channels using the IDs of the participants of the conversation i.e. the sender and receiver. This we will use to restrict the message from being broadcast to other users of the Messenger app that are not in the specific conversation.\n\nUsing the .NET `PusherServer` library, we authenticate the user by passing the channel name and socket ID. Then we return the resulting object from authentication via JSON.\n\nFor more information on client events and private channels, kindly check out the Pusher [documentation](https://pusher.com/docs/client_api_guide/client_presence_channels).\n\n\n\u003e 💡 Client events can only be triggered by private or presence channels.\n\nIn the script section of our view, we will instantiate the variable for our private channel. We will also adjust our contact selecting snippet to also create the channel for sending messages, typing and delivery notifications:\n\n```\n    ...\n    \u003cscript\u003e\n    ...\n    \n    let currentContact = null; // Holds contact currently being chatted with\n    let socketId = null;\n    let currentconversationChannel = null;\n    let conversationChannelName = null;\n    \n    //Pusher client side setup\n    const pusher = new Pusher('PUSHER_APP_ID', {\n        cluster:'PUSHER_APP_CLUSTER'\n    });\n    \n    pusher.connection.bind('connected', function() {\n      socketId = pusher.connection.socket_id;\n    });\n    \n    // select contact to chat with\n    $('.user__item').click( function(e) {\n        e.preventDefault();\n    \n        currentContact = {\n            id: $(this).data('contact-id'),\n            name: $(this).data('contact-name'),\n        };\n    \n        if ( conversationChannelName ) {\n            pusher.unsubscribe( conversationChannelName );\n        }\n    \n        conversationChannelName = getConvoChannel( \n                                      (@ViewBag.currentUser.id * 1) ,  \n                                      (currentContact.id * 1) \n                                  );\n    \n        currentconversationChannel = pusher.subscribe(conversationChannelName);\n        \n        bind_client_events();\n                                    \n        $('#contacts').find('li').removeClass('active');\n    \n        $('#contacts .contact-' + currentContact.id).find('li').addClass('active');\n        getChat(currentContact.id);\n    });\n    \n    function getConvoChannel(user_id, contact_id) {\n        if ( user_id \u003e contact_id ) {\n            return 'private-chat-' + contact_id + '-' + user_id;\n        }\n    \n        return 'private-chat-' + user_id + '-' + contact_id;\n    }\n    \n    function bind_client_events(){\n      //bind private channel events here  \n    \n      currentconversationChannel.bind(\"new_message\", function(msg) {\n          //add code here\n      });\n    \n      currentconversationChannel.bind(\"message_delivered\", function(msg) {\n          $('#msg-' + msg.id).find('.delivery-status').show();\n      });\n    }\n```\n\nWe have also saved the `socket_id` used to connect to the channel in a variable. This will come in handy later.\n\n#### Receiving messages sent in realtime\nEarlier, we added a route to save messages sent as conversations between the user and a contact. \n\nHowever, after these messages are saved, we would like the messages to be added to the screen of both the user and contact.\n\nFor this to work, in our C# code, after storing the message we will trigger an event via our Pusher private channel. Our clients will then listen to these events and respond to them by adding the messages they carry to the screen.\n\nIn our `ChatController` class file, after saving the conversation we will add  the following:\n\n```\n    private Pusher pusher;\n    \n    //class constructor\n    public ChatController() \n    {\n        var options = new PusherOptions();\n        options.Cluster = \"PUSHER_APP_CLUSTER\";\n    \n        pusher = new Pusher(\n           \"PUSHER_APP_ID\",\n           \"PUSHER_APP_KEY\",\n           \"PUSHER_APP_SECRET\",\n           options\n       );\n    }\n    \n    [HttpPost]\n    public JsonResult SendMessage() \n    {\n        if (Session[\"user\"] == null)\n        {\n            return Json(new { status = \"error\", message = \"User is not logged in\" });\n        }\n    \n        var currentUser = (User)Session[\"user\"];\n    \n        string socket_id = Request.Form[\"socket_id\"];\n    \n        Conversation convo = new Conversation\n        {\n            sender_id = currentUser.id,\n            message = Request.Form[\"message\"],\n            receiver_id = Convert.ToInt32(Request.Form[\"contact\"])\n        };\n    \n        using ( var db = new Models.ChatContext() ) {\n            db.Conversations.Add(convo);\n            db.SaveChanges();\n        }\n        \n        var conversationChannel = getConvoChannel( currentUser.id, contact);\n    \n        pusher.TriggerAsync(\n          conversationChannel,\n          \"new_message\",\n          convo,\n          new TriggerOptions() { SocketId = socket_id });\n    \n        return Json(convo);\n    }\n    \n    private String getConvoChannel(int user_id, int contact_id)\n    {\n        if (user_id \u003e contact_id)\n        {\n            return \"private-chat-\" + contact_id + \"-\" + user_id;\n        }\n    \n        return \"private-chat-\" + user_id + \"-\" + contact_id;\n    }\n```\n\nTo make use of the Pusher server-side functionality, we will add `using PusherServer;` to the top of our controller file.\n\n\u003e 💡 We have accepted the `socket_id` from the user when sending the message. This is so that we can specify that the sender is exempted from listening to the event they broadcast.\n\nIn our view, we will listen to the `new_message` event and use this to add the new message to our view.\n\n```\n    //index.cshtml\n    \n    ...\n    \u003cscript\u003e\n    ...\n    //Send button's click event\n    $('#sendMessage').click( function() {\n        $.post(\"/send_message\", {\n            message: $('#msg_box').val(),\n            contact: currentContact.id,\n            socket_id: socketId,\n        }).done( function (data) {\n            //display the message immediately on the view of the sender\n            displayMessage(data); \n            $('#msg_box').val('');\n        });\n    });\n    \n    function bind_client_events(){\n        //listening to the message_sent event by the message's recipient\n        currentconversationChannel.bind(\"new_message\", function(msg) {\n                if ( msg.receiver_id == @ViewBag.currentUser.id ) {\n                    displayMessage(msg);\n                }\n        });\n    }\n```\n\n#### Implementing the typing indicator feature\nThis feature makes users aware that the conversation is active and a response is being typed. To achieve it, we will listen to the `keyup` event of our message text area and, upon the occurrence of this `keyup` event, we will trigger a client event called `client-is-typing`.\n\n```\n    // index.cshtml\n    \n    function bind_client_events(){\n        currentconversationChannel.bind(\"client-is-typing\", function(data) {\n            if ( data.user_id == currentContact.id \u0026\u0026 \n                 data.contact_id == @ViewBag.currentUser.id  ) {\n    \n                $('#typerDisplay').text( currentContact.name + ' is typing...');\n            \n                $('.chat__typing').fadeIn(100, function() {\n                    $('.chat__type__body').addClass('typing_display__open');\n                }).delay(1000).fadeOut(300, function(){\n                    $('.chat__type__body').removeClass('typing_display__open');\n                });\n            }\n        });\n        \n        ...\n    }\n    \n    //User is typing\n    var isTypingCallback = function() {\n        chatChannel.trigger(\"client-is-typing\", {\n            user_id: @ViewBag.currentUser.id,\n            contact_id: currentContact.id,\n        });\n    };\n    \n    $('#msg_box').on('keyup',isTypingCallback);\n    ...\n```\n\n## Conclusion\n\nWe have built a chat application with some of its basic features in C# with the help of jQuery, and have also implemented some of the common realtime features present in chat applications using Pusher.","metaTitle":"Build a chat app using ASP.NET","metaDescription":"In this tutorial, learn how to create a chat app using ASP.NET and jQuery."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4To7f8itpS82YiUckMa0so","type":"Entry","createdAt":"2018-02-28T14:59:41.213Z","updatedAt":"2018-02-28T14:59:41.213Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime PWA using Vue.js","url":"pwa-vuejs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/pusher-vue-pwa","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}}],"reviewDate":"2017-12-29","description":"Build a food delivery tracking progressive web application (PWA) with Vue.js.","prerequisite":"Knowledge of HTML, JavaScript and Vue.js is needed to follow this tutorial.","content":"Quite a number of us like to order food. How about we track the delivery of meals right from placing our order to its delivery. In this article, we would be building a food delivery tracking progressive web app (PWA) using Pusher and Vue.js. \n\nHere is what the final demo would look like:\n\n![pwa-vuejs-demo](//images.contentful.com/1es3ne0caaid/77MiMWO1mo0y00MqccIYKg/9411ce437d29803ec7c41c2a24afa21a/pwa-vuejs-demo.gif)\n\n## Background\n\nA progressive web app is simply an app that employs various modern technologies to achieve a unique goal. In this article, we will be building a PWA that can engage the user even when they lose connectivity.\n\nTo achieve this realtime feature, we will be using [Pusher](https://pusher.com/). Pusher is a leader in realtime technologies, and allows us to perform various operations on the web in realtime. Our offline starter project will be an enhanced [Vue](https://vuejs.org) PWA webpack template. Also, we will be making use of [Progressbar.js](https://progressbarjs.readthedocs.io/en/latest/) to implement a smart progress bar functionality on our app and [Bulma](http://bulma.io/) classes to style our app.\n\n## Setup\n### Install Vue\n\nWe will be working with vue-cli, which you can install with:\n\n```\n    npm install vue-cli -g\n```\n\nThis installs the latest version of Vue CLI globally on your machine. Webpack has a PWA template and we will work with this in building our app. Create a Vue project with the **pwa template.** This is the syntax for creating a project with a template in Vue:\n\n```\n    vue init \u003ctemplate\u003e \u003cproject-name\u003e\n```\n\nFor our app, in the command prompt we run:\n\n```\n    vue init pwa pusher-vue-pwa\n```\n\nSeveral popup commands requesting some project details will be displayed on our console. For the purpose of this project, skip all of them and use all default values provided. You can customize these if you choose though.\n\nNow let’s test our app, run:\n\n```\n    cd pusher-vue-pwa // Changes directory to our project folder\n    npm install //Installs all dependencies required\n    npm run dev //Serves our app locally.\n```\n\nYou should get a welcome screen:\n\n![pwa-vuejs-setup](//images.contentful.com/1es3ne0caaid/5Rj8adpcM8MAsciO2emIUg/8656404078b59e9af387d9e02f7202cc/pwa-vuejs-setup.png)\n\n### Install Dependencies\n\nNext, let’s install our dependencies with:\n\n```\n    npm install bulma progressbar.js pusher pusher-js dotenv --save\n```\n\n- [Bulma](http://bulma.io/): CSS framework based on flexbox\n- [Progressbar.js](http://progressbarjs.readthedocs.io/en/latest/): Used to animate SVG paths\n- [Pusher](https://pusher.com/): Provides realtime service (server-side)\n- [Pusher](https://pusher.com/)[-js](https://pusher.com/): Provides realtime service (client-side)\n- [Dotenv](https://www.npmjs.com/package/dotenv): Used to load environment variables\n\n`dotenv` is used to load environmental variables from a `.env` file in our root folder. Our pusher keys will be saved in this file. No pusher keys yet? You’ll get them next.\n\n### Create a Pusher Account\n\nGo on to [Pusher](https://pusher.com/) and create an account. On the left nav bar, create a new app with any name of your choice. You will be issued an app-id, a pusher key, and a pusher-secret. Select a cluster near you and keep these credentials safe; we will require them later in our app. \n\n### Configure a Server\n\nFor our delivery app, we will configure our pusher server with the pusher credentials obtained on Pusher account creation. In our root folder, we create a file `.env` and pass in our credentials:\n\n```\n**/.env**\n\n    PUSHER_APP_ID=XXXXXXXXXX\n    PUSHER_KEY=XXXXXXX\n    PUSHER_SECRET=XXXXXXX\n    TIME=5000\n```\n\nThis file will be utilized by `dotenv`, which we installed earlier.\n\nCreate a file in the root directory named `server.js`, here we shall configure our server. First, we require `dotenv` and apply the `.config()` method to it. This allows us to use the `process.env` object.\n\n```\n    require('dotenv').config();\n    const Pusher = require('pusher');\n    const { PUSHER_APP_ID, PUSHER_KEY, PUSHER_SECRET, TIME } = process.env;\n    \n    const pusher = new Pusher({\n      appId: PUSHER_APP_ID,\n      key: PUSHER_KEY,\n      secret: PUSHER_SECRET,\n      cluster: 'eu',\n      encrypted: true\n    });\n```\n\nAs seen above, the ES6 destructuring technique is used to assign the data in our `.env` object to the listed constants. Next, we create a new pusher instance and assign our pusher credentials to their respective object properties as seen above.\n\nFor our demo we shall use a `setInterval()` function to simulate the timing of the pizza delivery process. Let’s configure this timing function:\n\n```\n    let stage = 1;\n    const interval = setInterval(() =\u003e {\n      const messages = {\n        1: \"Order Received\",\n        2: \"Order Placed\",\n        3: \"In the Oven\",\n        4: \"Out for Delivery\",\n        5: \"Delivered\"\n      }\n      stage = stage + 1;\n      const messageId = stage-1;\n      if (stage \u003e 5) {\n        console.log('clearing');\n        clearInterval(interval);\n      }\n      \n      pusher.trigger('food', 'status', {\n        message: messages[messageId],\n        progress: messageId/5\n      });\n    }, TIME);\n```\n\nWe created a stage variable to keep track of the iteration.  In our `setInterval()` function, we pass it the usual callback using the ES6 arrow function. In this function, we create an object containing the individual processes as values with their properties being numbered keys. The stage value is incremented by one for every iteration. This ensures that at the last stage, the interval is cleared out and exited.\n\nWe created a Message ID to refer to the message used from the array, and then converted that to a fraction to serve as the progress bar as well. This serves as our progress. The if block creates a termination case for our function based on the value of `messageId`. As long as the function is not terminated, we keep calling the `trigger` method on the `pusher` instance, passing it arguments of **channel**, **event,** and a **payload.** This payload is an object containing data we would like to send over our pusher channel.\n\n## Create a Client with Vue\n\nVue is used to create the client interface as stated earlier. In our `src` folder, there is an already configured Vue component — `App.vue`. Delete all the content in it and let’s get to creating our own content. Add the following template to represent the UI:\n\n```\n**/src/App.vue**\n\n     \u003ctemplate\u003e\n      \u003csection class=\"hero is-danger is-fullheight\"\u003e\n        \u003cdiv class=\"notification is-warning\" v-show=\"!connectivityStatus\"\u003e\n          \u003cbutton class=\"delete\"\u003e\u003c/button\u003e\n          {{connectivityText}}\n        \u003c/div\u003e\n        \u003cdiv class=\"hero-body\"\u003e\n          \u003cdiv class=\"container\"\u003e\n            \u003cdiv class=\"level\"\u003e\n              \u003cdiv class=\"level-item has-text-centered\"\u003e\n                \u003cdiv\u003e\n                  \u003cstatus :progress=\"progress\"\u003e\u003c/status\u003e\n                  \u003ch1 class=\"title\"\u003e{{statusText}}\u003c/h1\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/section\u003e\n    \u003c/template\u003e\n```\n\nNotice the `\u003cstatus\u003e` component and the `:progress` binding?  Their values are received from the component’s object as shown below:\n\n```\n**/src/App.vue**\n\n    \u003cscript\u003e\n    require('../node_modules/bulma/css/bulma.css');\n    import pusher from 'pusher-js';\n    import Status from '@/components/Status';\n    export default {\n      data() {\n        return {\n          statusText: '',\n          progress: 0,\n          connectivityText: '',\n          connectivityStatus: true,\n        }\n      },\n      created() {\n        var pusher = new Pusher('API_KEY', {\n          cluster: 'eu',\n          encrypted: true\n        });\n        var channel = pusher.subscribe('food');\n        channel.bind('status', (data) =\u003e {\n          console.log(data)\n          this.statusText = data.message;\n          this.progress = data.progress;\n        });\n      },\n      components: {\n        'status': Status\n      }\n    }\n    \u003c/script\u003e\n```\n\nFirst, we require bulma, this provides all the bulma classes used to style our app in the template.\n\nNext, we import `pusher-js`  which we installed at the beginning. A  `Status` custom component is also imported which we will create soon. In our Vue data method, we create and return an object whose properties values will be used in the template. The `statusText` property displays the status of our order.\n\nThe value of `connectivityText` is displayed whenever our device is offline and this depends on the value of the `connectivityStatus` property to be visible or not. We will set these values soon.\n\nIn the `created()` lifecycle method, we create a new `pusher` instance on the client side. This instance receives the payload from the server once we subscribe to our channel created on the server.\n\n\u003e Note: Multiple events can be created per channel.\n\nAfter a new pusher instance is created with our pusher-key (obtained on registration) as seen above. With this instance, we can subscribe to the channel we used on the server. Next, bind the `status` event to `channel`, passing it a callback which fetches the payload from the channel. The data fetched is passed as values to the properties we created in our `data()` method.\n\n### Progress Status Component\n\nIn the `components` folder, delete the H`ello.vue` component and create a `Status.vue` file. You also need to replace `Hello.vue` with `Status.vue` in the routes list if you opted for routing when creating with Vue CLI.\n\nAdd a div with a `status` class to the template as shown below:\n\n```\n    \u003ctemplate\u003e\n      \u003cdiv class=\"status\"\u003e\u003c/div\u003e\n    \u003c/template\u003e\n```\n\nThe div tag serves as a mount point for the progress status widget. Next, create the component’s logic that imports the `progressbar` plugin:\n\n```\n    \u003cscript\u003e\n    import ProgressBar from 'progressbar.js';\n    export default {\n      data() {\n        return {\n          bar: null\n        }\n      },\n      props: ['progress'],\n      watch: {\n        progress(val) {\n          this.bar.animate(val);\n        }\n      },\n      mounted() {\n        this.bar = new ProgressBar.Circle(this.$el, {\n          color: '#FFEA82',\n          trailColor: '#eee',\n          trailWidth: 1,\n          duration: 1400,\n          easing: 'bounce',\n          strokeWidth: 6,\n          from: { color: '#d6ff82', a: 0 },\n          to: { color: '#5aedb4', a: 1 },\n          // Set default step function for all animate calls\n          step: function(state, circle) {\n            circle.path.setAttribute('stroke', state.color);\n          }\n        });\n        this.bar.animate(this.progress);\n      }\n    }\n    \u003c/script\u003e\n```\n\nThe component has a `bar` property which is used to keep track of the widget configuration instance. It is used to configure the awesome circular status bar.\n\nWe configure the Progress Bar in our `mounted` lifecycle method to ensure that the DOM is ready before manipulating it. This is done by creating an instance of the `Circle` constructor on the `ProgressBar` object. After configuring our circular bar, the `.animate()` object is called on `bar` and passed a parameter which is the value of `progress` property. The property is received from the parent component via `props`. This triggers an animation in the status bar but with a zero initial value so nothing is obvious.\n\nRemember the `:progress` property we bound to the value of `progress` in `App.vue`? It would only be accessible to the Status child component if we specify it in the `props` array.  \n\nNow to a fun part; in the `watch` object, we state a progress function which listens for value changes on the `progress` property. Whenever the value changes, the new value is passed as a parameter to the `animate` method on `this.bar`.  This means that whenever a new progress value is received from the server, it propagates through the App parent component, down to the child’s `watch` object and updates the status of our order. This update is observed from the progress circular bar.\n\nIf you don’t have the app running, run:\n\n```\n    npm run dev\n```\n\nThen start the server:\n\n```\n    node server.js\n```\n\nOnce the server starts running and is emitting events, you should see the client update as shown in the video below:\n\n![pwa-vuejs-demo](//images.contentful.com/1es3ne0caaid/77MiMWO1mo0y00MqccIYKg/9411ce437d29803ec7c41c2a24afa21a/pwa-vuejs-demo.gif)\n\n## Handling Offline\n\nHow do we handle notifications when offline? \nWe listen to the windows object for an `offline` event or an `online` event, in which case `this.conectivityStatus` is `false` or `true` respectively. When `connectivityStatus` is `false`, `connectivityText` resolves to: \n\n```\n    'You seem to be offline. Connect to see latest order status'\n```\n\nIn the `created()` method of `App.vue`, let’s create an *EventListener:*\n\n```\n    created() {\n        ...\n        window.addEventListener('offline', () =\u003e {\n          this.connectivityStatus = false;\n          this.connectivityText = 'You seem to be offline. Connect to see latest order status';\n        })\n        window.addEventListener('online', () =\u003e {\n          console.log('asd')\n          this.connectivityStatus = true;\n        })\n      },\n    ...\n```\n\nWhile the app is running, turn off your network connectivity and you should see a warning message pop-up on the screen as shown in the image below:\n\n![pwa-vuejs-offline](//images.contentful.com/1es3ne0caaid/PYNBANiy2Yw0WayOaiiSC/df5c830eeef146ef2415679c5a39a906/pwa-vuejs-offline.png)\n\n## Conclusion\n\nIn this article, we built a realtime delivery tracking PWA using Pusher and Vue while implementing status bar features with Progressbar.js and styling with Bulma. This app has minimal styling, feel free to add more styles and possibly more cool functionalities.","metaTitle":"Build a realtime PWA using Vue.js","metaDescription":"Build a food delivery tracking progressive web application (PWA) with Vue.js and add realtime interaction to it. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1jeVDH5XtgiCsga6e2kk8o","type":"Entry","createdAt":"2018-02-28T11:59:47.112Z","updatedAt":"2018-02-28T11:59:47.112Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a typing indicator in ASP.NET","url":"typing-indicator-aspnet","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/Whos-Typing-In-.NET","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2kVecA2nXe6CSEuigMi4Yq","type":"Entry","createdAt":"2018-02-12T14:46:25.053Z","updatedAt":"2018-02-12T14:46:25.053Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"ASP.NET","url":"asp-net","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6xamBfB840ckYKOkIMm6sM","type":"Entry","createdAt":"2018-02-12T14:51:11.677Z","updatedAt":"2018-02-26T12:31:15.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"C#","url":"c-sharp","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1NUYHyE9AsKICMGiIyCA4y","type":"Entry","createdAt":"2018-02-12T14:53:47.651Z","updatedAt":"2018-02-26T12:31:14.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"jQuery","url":"jquery","type":"library"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-12-27","description":"Learn how to implement a typing indicator feature in your chat application using Pusher, .NET, C# code and some jQuery. ","prerequisite":"A basic understanding of ASP.NET and jQuery is needed to follow this tutorial.","content":"When building chat apps, knowing when the person you are chatting with is typing a message can improve the user experience. It gives you some feedback that you’re not alone in the conversation and a message is coming your way. In this tutorial, we will go through some simple steps to achieve this feature using C# .NET and Pusher.\n\nAt the end of this tutorial we will have something like this:\n\n![typing-indicator-aspnet-demo](//images.contentful.com/1es3ne0caaid/2h9vYP6DgE6ogoCGWYo0iC/373ee99c9759d752c7f4ae8de3c30e95/typing-indicator-aspnet-demo.gif)\n\nThis tutorial assumes prior knowledge of:\n- C#\n- .NET MVC and\n- JavaScript (jQuery)\n\nWhen you’re ready, let’s begin.\n\n## Setting up Our Project\n\nWe’ll be using [Visual Studio](https://www.visualstudio.com/), which is an IDE popularly used for building .NET projects. Visual Studio 2017 is free and available for popularly used Operating Systems. You can view installation details [here](https://www.visualstudio.com/).\n\nAfter installing Visual Studio, launch it and create a new project by clicking **New Project** from the dashboard. Following the **New Project** wizard we:\n  - Set C# as our language to use,\n  - Select .NET MVC Project as the template,\n  - Fill in the Project name e.g. HeyChat (any name would do),\n  - Fill in the Solution name i.e. application name (HeyChat or any name would do).\n\n![typing-indicator-aspnet-project-setup](//images.contentful.com/1es3ne0caaid/1W1rwWoPRKuYackWIoaKcC/ee799f944c1645065642a9b0c5279972/typing-indicator-aspnet-project-setup.gif)\n\n## Writing the server-side (C#) Code\n\nTo achieve a typing indicator, our chat app needs to be able to recognize who is typing at any given time. For this, we will add some limited form of identification. We’re not doing any authentication at all because this tutorial does not require it.\n\n\n\u003e 💡 For the purpose of this tutorial, we will assume this chat is open to all users and all that is required is that our user specifies their name on first entry.\n\n\n### Route definition\n\nWe can define some of the routes that we need to make this feature, which are:\n\n\n  - A home route which renders the first page that takes the user’s name.\n  - A login route which accepts a `POST` request of the user’s name.\n  - A chat route which renders the chat view.\n  \n\u003e 💡 We may need some other routes as we go along but this is enough for starters.\n\nTo add these routes, we open the `RouteConfig.cs` file in the  `App_Start` directory of our application. And in it, we add the routes we have defined.\n\n```\n    routes.MapRoute(\n        name: \"Home\",\n        url: \"\",\n        defaults: new { controller = \"Home\", action = \"Index\" }\n    );\n    \n    routes.MapRoute(\n        name: \"Login\",\n        url: \"login\",\n        defaults: new { controller = \"Login\", action = \"Index\" }\n    );\n    \n    routes.MapRoute(\n        name: \"ChatRoom\",\n        url: \"chat\",\n        defaults: new {controller = \"Chat\", action=\"Index\"}\n    );\n```\n\nUsing the **Home** route as a sample, the route definition states that `/` requests will be handled by the `HomeController` which is found in the `Controllers/HomeController.cs` file and the `Index` method of that controller. Next, we create the controllers we need.\n\n### Creating controllers and action methods\n\nTo create a new controller, right-click the **Controller** directory and select `Add → Controller`. In the resulting form, we type in the name of our controller and select the empty template.\n\n\u003e 💡 When our application is created, it includes a HomeController with an Index action method by default, so we’ll perform the above steps to create our LoginController and ChatController.\n\nIn our LoginController class, we create the Index action method specifying `[HttpPost]` at the top of the action method to indicate that it handles `POST` requests.\n\n```\n    public class LoginController : Controller\n    {\n        [HttpPost]\n        public ActionResult Index()\n        {\n          \n        }\n    }\n```\n\nThe Index action of the LoginController will receive the request payload, read the username from the payload and assign it to the current user session, then redirect our user to the chat page. When we add this to our action method we’ll have\n\n```\n    public class LoginController : Controller\n    {\n        [HttpPost]\n        public ActionResult Index()\n        {\n            string user = Request.Form[\"username\"];\n            if (user.Trim() == \"\") {\n                return Redirect(\"/\");\n            }\n            Session[\"user\"] = user;\n            return Redirect(\"/chat\");\n        }\n    }\n```\n\n\u003e 💡 In a real-world chat app, we would add the user to a database and mark the user as logged in for other users to see available chat options, but that is beyond the scope of this tutorial so adding to a session will suffice.\n\nIn our ChatController class, we will add the Index action method. The Index action of the ChatController will render our chat view and pass along the current user to the view.\n\n```\n    public class ChatController : Controller\n    {\n        public ActionResult Index()\n        {\n            if (Session[\"user\"] == null) {\n                return Redirect(\"/\");\n            }\n    \n            ViewBag.currentUser = Session[\"user\"];\n    \n            return View ();\n        }\n    }\n```\n\n\u003e 💡 By default, action methods handle `GET` requests so we will not need to add `[HttpGet]` to the top of our method. We’ve also added a simple check to prevent access to the chat page if there is no logged in user.\n\nLet’s not forget about our Home route. In the HomeController we’ll add the code to render the front page.\n\n```\n    public class HomeController : Controller\n    {\n        public ActionResult Index()\n        {\n            if ( Session[\"user\"] != null ) {\n                return Redirect(\"/chat\");\n            }\n    \n            return View();\n        }\n    }\n```\n\n\u003e 💡 We’ve also added a small check to prevent multiple logins in the same user session.\n\nAt this point, we’ve created the Controllers and methods to serve our views (which we haven’t created yet) so trying to run this will give you some errors! Let’s fix that.\n\n## Implementing the application’s views\n\nBased on the routes we’ve defined so far, we will need two views:\n  - The front page view with the login form - served by the `Index`action method of the `HomeController` class\n  - The chat view where the typing indicator feature will be seen - served by `ChatController`  class’  `Index` action method\n\n\n### Front page/log in page\n\nFor our front page, we create a page with a form consisting of a field to type in your username and a button to submit for login. Referring to our controller code:\n\n```\n    public class HomeController : Controller\n    {\n        public ActionResult Index()\n        {\n            if ( Session[\"user\"] != null ) {\n                return Redirect(\"/chat\");\n            }\n            return View();\n        }\n    }\n```\n\n\u003e 💡 The **View** function creates a view response which we return. When **View()** is invoked, C# looks for the default view of the calling controller class. This default view is the `index.cshtml` file found in the **Views** directory, in a directory with the same name as the Controller. \n\u003e i.e. The default view of the HomeController class will be the `Views/Home/index.cshtml`  file.\n\nTo create our `HomeController` default view, we:\n- Right-click on the Views directory and select `Add New Folder`,\n- Fill in **Home** as the folder name,\n- Right click the newly created **Home** folder and select `Add New View`,\n- Fill in the view name (in our case **index**), select `Razor` as the view engine and click ok.\n\nNow that we’ve created our front page view file, we’ll add the markup for the login form.\n\n```\n    \u003cdiv class=\"container\"\u003e\n      \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-md-5 col-md-offset-4\"\u003e\n          \u003cdiv class=\"panel panel-default\"\u003e\n            \u003cdiv class=\"panel-body\"\u003e\n              \u003cform action=\"/login\" method=\"post\" style=\"margin:0\"\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                  \u003cinput type=\"text\" name=\"username\" id=\"username\" \n                      placeholder=\"Enter Username\" class=\"form-control\" \n                      required minlength=\"3\" maxlength=\"15\" /\u003e\n                \u003c/div\u003e\n                \u003cbutton type=\"submit\" class=\"btn btn-primary btn-block\"\u003e\n                  Enter Chat\n                \u003c/button\u003e\n              \u003c/form\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\n### The chat page\n\nWe’ll create the view for the chat page following the same steps as above but using `Chat` as our folder name rather than `Home`.\n\nIn the chat view, we add markup up to give us a sidebar of available users and an area for chatting.\n\n```\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n      \u003ctitle\u003epChat \u0026mdash; Private Chatroom\u003c/title\u003e\n      \u003clink rel=\"stylesheet\" href=\"@Url.Content(\"~/Content/app.css\")\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n            @{\n                var currentUser = ViewBag.currentUser;\n            }\n        \u003c!-- Navigation Bar --\u003e\n        \u003cnav class=\"navbar navbar-inverse\"\u003e\n          \u003cdiv class=\"container-fluid\"\u003e\n            \u003cdiv class=\"navbar-header\"\u003e\n              \u003ca class=\"navbar-brand\" href=\"#\"\u003epChat\u003c/a\u003e\n            \u003c/div\u003e\n            \u003cul class=\"nav navbar-nav navbar-right\"\u003e\n              \u003cli\u003e\u003ca href=\"#\"\u003eLog Out\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/div\u003e\n        \u003c/nav\u003e\n        \u003c!-- / Navigation Bar --\u003e\n        \u003cdiv class=\"container\"\u003e\n          \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-xs-12 col-md-3\"\u003e\n              \u003caside class=\"main\"\u003e\n                \u003cdiv class=\"row\"\u003e\n                  \u003cdiv class=\"col-xs-12\"\u003e\n                    \u003cdiv class=\"panel panel-default users__bar\"\u003e\n                      \u003cdiv class=\"panel-heading users__heading\"\u003e\n                        Online Users (1)\n                      \u003c/div\u003e\n                      \u003cdiv class=\"panel-body users__body\"\u003e\n                        \u003cul class=\"list-group\"\u003e\n                        @if( @currentUser == \"Daenerys\" ) {\n                            \u003cli class=\"user__item\"\u003e\n                                \u003cdiv class=\"avatar\"\u003e\u003c/div\u003e \u003ca href=\"#\"\u003eJon\u003c/a\u003e\n                            \u003c/li\u003e\n                        } else if( @currentUser == \"Jon\") {\n                            \u003cli class=\"user__item\"\u003e\n                                \u003cdiv class=\"avatar\"\u003e\u003c/div\u003e \u003ca href=\"#\"\u003eDaenerys\u003c/a\u003e\n                            \u003c/li\u003e\n                        }\n                        \u003c/ul\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/aside\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-xs-12 col-md-9 chat__body\"\u003e\n              \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col-xs-12\"\u003e\n                  \u003cul class=\"list-group chat__main\"\u003e\n                    \u003cdiv class=\"row __chat__par__\"\u003e\n                      \u003cdiv class=\"__chat__ from__chat\"\u003e\n                        \u003cp\u003eDid you see Avery's sword???\u003c/p\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"row __chat__par__\"\u003e\n                      \u003cdiv class=\"__chat__ receive__chat\"\u003e\n                        \u003cp\u003eErr Looked normal to me...\u003c/p\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"row __chat__par__\"\u003e\n                      \u003cdiv class=\"__chat__ receive__chat\"\u003e\n                        \u003cp\u003emaybe I'm a hater\u003c/p\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"row __chat__par__\"\u003e\n                      \u003cdiv class=\"__chat__ from__chat\"\u003e\n                        \u003cp\u003eLmaooo\u003c/p\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                  \u003c/ul\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"chat__type__body\"\u003e\n                  \u003cdiv class=\"chat__type\"\u003e\n                    \u003ctextarea id=\"msg_box\" placeholder=\"Type your message\"\u003e\u003c/textarea\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"chat__typing\"\u003e\n                  \u003cspan id=\"typerDisplay\"\u003e\u003c/span\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"@Url.Content(\"~/Content/app.js\")\"\u003e\u003c/script\u003e\n        \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nWe’re using the [razor template engine](https://en.wikipedia.org/wiki/ASP.NET_Razor), which gives us the ability to read data passed from the C# code and assign them to variables that can be used in our frontend. Using `@{ var currentUser = ViewBag.currentUser }` we have passed in the name of the current user which will come in handy shortly.\n\n\u003e 💡 To keep things quick and simple we have assumed there are only two possible users: **Daenerys** or **Jon**. So using the razor `@if{ }` condition we are showing who is available to chat with.\n\nNow that we have our views in place we can move on to our typing indicator feature!\n\n## Implementing the typing indicator\n### Listening for the typing event\n\nOn most chat applications, the feature becomes visible when someone is typing, so to implement we’ll start off by listening to the typing event in the chat text area using jQuery. We'll also pass the `currentUser` variable we defined earlier with razor to our script.\n\n```\n    var currentUser = @currentUser;\n          \n    $('#msg_box').on('keydown', function () {\n      //stub\n    });\n```\n\nWe added a listener to the  `keydown` event on our typing area to help us monitor when someone is typing.\n\nNow that we’ve created our listeners, we’ll make our listeners send a message that someone is typing to the other members of the chat. To do this, we’ll create an endpoint in our C# code to receive this request and broadcast it via Pusher. \n\nWe’ll implement all the client code (assuming that our C# endpoint exists, then we’ll actually create the endpoint later).\n\n\n\u003e 💡 To prevent excessive requests to our C# code i.e. sending a request as every key on the keypad is pressed or released, we’ll throttle the sending of the requests using a debounce function. This debounce function just ignores a function for a while if it keeps occurring.\n\n```\n    // Debounce function\n    // Credit: https://davidwalsh.name/javascript-debounce-function\n    \n    // Returns a function, that, as long as it continues to be invoked, will not\n    // be triggered. The function will be called after it stops being called for\n    // N milliseconds. If `immediate` is passed, trigger the function on the\n    // leading edge, instead of the trailing.\n    function debounce(func, wait, immediate) {\n        var timeout;\n        return function() {\n            var context = this, args = arguments;\n            var later = function() {\n                timeout = null;\n                if (!immediate) func.apply(context, args);\n            };\n            var callNow = immediate \u0026\u0026 !timeout;\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n            if (callNow) func.apply(context, args);\n        };\n    };\n```\n\nNow that we have a **debounce** function we’ll create the callback function for our `keydown` event:\n\n```\n    var isTypingCallback = debounce( function() {\n        $.post('/chat/typing', {\n            typer: currentUser,\n        });\n    }, 600, true);\n```\n \n and pass the callback to our event listeners.\n \n```\n    $('#msg_box').on('keydown',isTypingCallback);\n```\n\n### Creating the endpoint triggered by the typing event\n\nEarlier, we had our event listeners send a **POST** request to the `/chat/typing` Route on the client side. Now we’ll create this Route, which will transmit the typing event to other client users using [Pusher](http://pusher.com). \n\nFirst, we’ll create the route for the endpoint in our `RouteConfig.cs` file.\n\n```\n    ...\n    routes.MapRoute(\n        name: \"UserTyping\",\n        url: \"chat/typing\",\n        defaults: new { controller = \"Chat\", action = \"Typing\" }\n    );\n```\n\n\u003e 💡 We’ve created this endpoint to be handled by the **Typing** action method of the **ChatController**\n\nNext, we’ll create our Typing action method in the `ChatController`:\n\n```\n    [HttpPost]\n    public ActionResult Typing()\n    {\n        //stub\n    }\n```\n\n### Using Pusher to make our application update in realtime\n\nOur `/``chat``/``typing` endpoint will receive a post payload of the user who is doing the typing. We’re going to use [Pusher](http://pusher.com) to transmit this to everyone else.\n\nOn our Pusher [dashboard](https://dashboard.pusher.com/), we’ll create a new app filling out the information requested i.e. App name, frontend tech, etc. You can [register for free](https://pusher.com/) if you haven’t got an account. Next, we’ll install the **Pusher Server** package in our C# code using NuGet, a packer manager for .NET.\n\n![typing-indicator-aspnet-add-packages](//images.contentful.com/1es3ne0caaid/5ZUDKcS91uo602ok6iA2ea/a81d8764472938024ff247dd1c92f68e/typing-indicator-aspnet-add-packages.gif)\n\n\u003e 💡 To install the package we right-click the **Packages** directory; Select the **add Package option** and select the **Pusher Server** package.\n\nThen we’ll add the Pusher broadcasting to our **Typing** action event. To use Pusher we’ll have to import the **Pusher Server** namespace in our code.\n\n```\n    ...\n    using PusherServer;\n    \n    namespace HeyChat.Controllers\n    {\n        public class ChatController : Controller\n        {\n          ...\n    \n          [HttpPost]\n          public ActionResult Typing()\n          {\n              string typer        = Request.Form[\"typer\"];\n              string socket_id    = Request.Form[\"socket_id\"];\n          \n              var options = new PusherOptions();\n              options.Cluster = \"PUSHER_APP_CLUSTER\";\n          \n              var pusher = new Pusher(\n              \"PUSHER_APP_ID\",\n              \"PUSHER_APP_KEY\",\n              \"PUSHER_APP_SECRET\", options);\n          \n              pusher.TriggerAsync(\n              \"chat\",\n              \"typing\",\n              new { typer = typer },\n              new TriggerOptions() { SocketId = socket_id });\n          \n              return new HttpStatusCodeResult(200);\n          } \n        ...\n```\n\nWe initialized Pusher using our **PUSHER_APP_ID**, **PUSHER_APP_KEY**, **PUSHER_APP_SECRET**, and **PUSHER_APP_CLUSTER** (be sure to replace these with the actual values from your dashboard); and then broadcast an object containing the* **typer** - which is the person typing - on the* `typing` event via the `chat` channel.\n\n\u003e 💡 We’ve added  `new TriggerOptions() { SocketId = socket_id }` to our Pusher **triggerAsync** function. This is to prevent the sender of the broadcast from receiving the broadcast as well. To do this we’ve assumed we’re receiving `socket_id` in our payload along with `typer`, so on our client side, we’ll add it to the payload sent.\n\nNow, whenever there’s a typing event our C# code broadcasts it on Pusher, all that is left is to listen to that broadcast and display the ‘xxxx is typing…’ feature.\n\nFirst, we’ll initialize Pusher in the script section of our chat page using our **PUSHER_APP_KEY** and **PUSHER_APP_CLUSTER** (once again replace these with the values from your dashboard).\n\n```\n    var pusher = new Pusher('PUSHER_APP_KEY', {\n        cluster:'PUSHER_APP_CLUSTER'\n    });\n```\n\nTo implement the broadcaster exemption we mentioned earlier, we’ll get the socket id from our client `pusher` instance and amend our payload for the typing request to the server to include it.\n\n```\n    var socketId = null;\n    pusher.connection.bind('connected', function() {\n      socketId = pusher.connection.socket_id;\n    });\n    \n    var isTypingCallback = debounce( function() {\n        $.post('/chat/typing', {\n            typer: currentUser,\n            socket_id: socketId // pass socket_id parameter to be used by server\n        });\n    }, 600, true);\n```\n\nNow that Pusher is initialized on our client side, we’ll subscribe to the chat channel and implement our feature using the `typer` passed.\n\n```\n    var channel = pusher.subscribe('chat');\n    \n    channel.bind('typing', function(data) {\n        $('#typerDisplay').text( data.typer + ' is typing...');\n        \n        $('.chat__typing').fadeIn(100, function() {\n            $('.chat__type__body').addClass('typing_display__open');\n        }).delay(1000).fadeOut(300, function(){\n            $('.chat__type__body').removeClass('typing_display__open');\n        });\n    });\n```\n\n## Conclusion\n\nIn this tutorial, we’ve walked through implementing the popular a typing indicator feature using Pusher, .NET, C# code and some jQuery. We’ve also seen how to broadcast messages and avoid the sender responding to a message it sent. ","metaTitle":"Build a typing indicator in ASP.NET","metaDescription":"Learn how to implement a typing indicator feature  in your chat app using Pusher, .NET, C# code and jQuery. Broadcast messages and manage responses correctly."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3YsJOBBO8Egy26M4YIM2U8","type":"Entry","createdAt":"2018-02-28T14:00:27.432Z","updatedAt":"2018-02-28T14:00:27.432Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a trade platform using JavaScript","url":"trade-platform-javascript","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/pusher-stock","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6i1HPBqlwsE24YEKwqQyuq","type":"Entry","createdAt":"2018-02-12T15:09:31.050Z","updatedAt":"2018-02-26T12:31:11.548Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Graph","url":"realtime-graph","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4E7t0TtVFSAyeeA0ckeYe0","type":"Entry","createdAt":"2018-02-12T15:09:41.899Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Chart","url":"realtime-chart","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2017-12-13","description":"In this tutorial we will be building a trade platform that portrays the experience for stock markets using Vanilla JavaScript and Node.js.","prerequisite":"A basic understanding of JavaScript is needed to follow this tutorial.","content":"Stock market data becomes more valuable as it essentially delivers an opportunity for traders who seek analysis and statistics. \n\nIn this tutorial we will be building a trade platform that portrays the experience for stock markets, where trades in prices can be visualized in realtime. This will be built using JavaScript, Chart.js and realtime capabilities powered by [Pusher](https://pusher.com).\n\nPusher is a platform that specializes in building realtime infrastructures for developers in order to build realtime applications as efficiently as possible. We will be leveraging the powerful features of Pusher to show updated prices on our chart directly from the server and also add an extra feature to display a table depicting the prices as shown below: \n\nhttps://www.youtube.com/watch?v=5Tee_2EkCW0\u0026\n\n## Getting started\n\nAs stated earlier, Pusher will be used to easily deliver the realtime functionality necessary for our chart to function as specified. If you don’t have an account with Pusher, you can [sign up for free](https://pusher.com/signup). Once you are done, go ahead and create a new app from your dashboard. Don’t forget to take note of your **app_id**, **key**, **secret** and **cluster** as you will be required to use them later in this tutorial. \n\n![realtime-trade-platform-javascript-create-app](//images.contentful.com/1es3ne0caaid/tb6MguejiCe4E2gimcMOC/dcb84ffa27a6735f39190a9953ce3607/realtime-trade-platform-javascript-create-app.png)\n\n## Set up application\n\nNow that we have set up an account and obtained the necessary credentials, we will need to set up a server and the view for our application. This is to ensure communication between our application and [Pusher](https://pusher.com/). If you do not have Node and npm installed on your machine yet, kindly download them from [here](https://nodejs.org/) in order to follow along. Otherwise, proceed creating a new directory with any name and run the command below :\n\n```\n    npm init -y\n```\n\nYou will be asked a bunch of questions, and then a package.json file will be created for you.  Update the file with the following:\n\n```\n    ## package.json\n    {\n      \"name\": \"sample-stock\",\n      \"version\": \"1.0.0\",\n      \"description\": \"\",\n      \"main\": \"index.js\",\n      \"scripts\": {\n        \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\",\n        \"serve\": \"node server.js\",\n        \"dev\": \"serve --port 5200\"\n      },\n      \"keywords\": [],\n      \"author\": \"\",\n      \"license\": \"ISC\"\n    }\n```   \n\nNow edit the file above by adding the script to start our local server, we will set this up in a bit.\n\n```\n    ## package.json\n    {\n      ...\n      \"scripts\": {\n        \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\",\n        \"serve\": \"node server.js\",\n        \"dev\": \"serve --port 5200\"\n      },\n     ...\n    }\n```\n\nWe need to install the Pusher SDK and also `serve` to help us launch the client app:\n\n```\n    # Pusher\n    npm install --save pusher\n    \n    # Serve\n    npm install --save-dev serve\n```\n\nWe also need some existing dummy data in order to create a proper simulation of stock trades and price variations. For this reason, I downloaded a data sample of previous stock history we can play with. Below is the truncated version of the `stock.json`. You can find the complete file [here](https://github.com/christiannwamba/pusher-stock/blob/master/stock.json).\n\n```\n    {\n    ...\n            \"Timestamp\": \"06/15/2011 09:30:00.050\",\n            \"Quantity\": 6820,\n            \"Price\": 23.98,\n            \"Exchange\": \"The NASDAQ Stock Market LLC\",\n            \"MarketCenter\": \"Q\",\n            \"SubMarketCenter\": \" \",\n            \"TRDI\": \"@O X\",\n            \"CanceledIndicator\": null,\n            \"DOTT\": \"F\",\n            \"ITY\": \"Q\",\n            \"MSN\": 2059,\n            \"OMSN\": 0\n          },\n          ...\n```\n\nNext, we need to create our project files. In the project folder add the following files and leave them blank. We will fill up the content as we go:\n\n```\n    - app.js \n    - server.js \n    - index.html\n    - style.css \n    - stock.json\n```\n\n## Create a simple server\n\nWithin `server.js`, import the `stock``.json` file and initialise Pusher with the required credentials obtained from the application dashboard.\n\n```\n    // ./server.js\n    const stockData = require('./stock.json');\n    const Pusher = require('pusher');\n    \n    \n    var pusher = new Pusher({\n      appId: 'APP_ID',\n      key: 'APP_KEY',\n      secret: 'APP_SECRET',\n      cluster: 'APP_CLUSTER',\n      encrypted: true\n    });\n    ...\n```\n\nFor our clients to receive realtime payloads, we need to emit those payloads from our sever using Pusher: \n\n```\n    // ./server.js\n    let i = 0;\n    setInterval(() =\u003e {\n      const GOOG = stockData[1]['Trades'][i];\n      pusher.trigger('trade', 'stock', GOOG);\n      i++;\n    }, 2000);\n```\n\nEvery 2 second, we query the JSON file for `GOOG` stock prices and and emit this price alongside some other payload (like the stock name) as JSON using the Pusher’s `trigger` method. This method takes channel, event, and payload as arguments.\n \nRun the following command to start the server:\n \n```\n    npm run serve\n```\n\n## Build the client app\n\nFirst things first, update your `index.html` with the following:\n\n```\n    \u003chtml\u003e\n        \n        \u003chead\u003e\n          \u003clink rel=\"stylesheet\" href=\"./style.css\"\u003e\n          \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\u003e\n        \u003c/head\u003e\n        \n        \u003cbody\u003e\n          \u003cdiv class=\"container\"\u003e\n            \u003cdiv class=\"chart-container row\"\u003e\n                \u003cdiv class=\"col-md-8\"\u003e\n                    \u003cdiv class=\"\"\u003e\n                        \u003ccanvas id=\"chart\"\u003e\u003c/canvas\u003e\n                      \u003c/div\u003e\n                \u003c/div\u003e\n            \n                \u003cdiv class=\"col-md-4\"\u003e\n                    \u003cdiv class=\"table-container\"\u003e\n                        \u003ch2\u003eTrending Tickers\u003c/h2\u003e\n                        \u003ctable class=\"table\"\u003e\n                            \u003cthead\u003e\n                              \u003ctr\u003e\n                                \u003cth\u003e Name\u003c/th\u003e\n                                \u003cth\u003e Price\u003c/th\u003e\n                              \u003c/tr\u003e\n                            \u003c/thead\u003e\n                            \u003ctbody\u003e\n                              \u003ctr\u003e\n                                \u003ctd\u003eGOOG\u003c/td\u003e\n                                \u003ctd id=\"price\"\u003e\u003c/td\u003e\n                              \u003c/tr\u003e\n                            \u003c/tbody\u003e\n                          \u003c/table\u003e\n                      \n                    \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n        \u003c/div\u003e\n        \n          \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n          \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.4.0/Chart.min.js\"\u003e\u003c/script\u003e\n          \u003cscript src=\"app.js\"\u003e\u003c/script\u003e\n        \u003c/body\u003e\n        \n        \u003c/html\u003e\n```\n\nYou have a `canvas` where you will launch the chart as well as a simple table to show the current prices as they are updated in realtime. We also included the Pusher and Chart SDK which we will use soon.\n\n### App Class\nTo receive the payload sent in from the server, we need to subscribe to the Pusher event emitted by the server. And to visualize it, you need to create a chart and keep updating it’s data points using the payload received from the server. We will need a couple of functions:\n\n```\n    // app.js\n    class App {\n      constructor() {\n        this.pusher = null;\n        this.chart = null;\n        this.lowestPrice = 505;\n        this.initializeChart();\n        this.initializePusher();\n      }\n      initializePusher() {\n       ...\n      }\n      subscribeToEventChannel() {\n       ...\n      }\n      updateChartData(data) {\n      ...    \n      }\n    \n      initializeChart() {\n       ...\n      }\n    }\n    new App();\n```\n\nWe just created the methods bodies. Next is to start implementing their functionalities one after the other. \n\nFirst, let’s initialize Pusher\n\n```\n    // app.js\n    initializePusher() {\n      Pusher.logToConsole = true;\n      this.pusher = new Pusher('APP_ID', {\n        cluster: 'APP_CLUSTER',\n        encrypted: true\n      });\n      this.subscribeToEventChannel();\n    }\n```\n\nFor debug purposes only, we are setting `Pusher.logToConsole` to `true` so as to see the realtime activities logged to the console. Remember to remove that in production so you don’t leave your user’s console bloated with debug logs.\n\nNext, we create an instance of `Pusher`. The constructor function is available in the `pusher-js` file we included earlier.\n\nRemember the server is still emitting data. We need to subscribe to it and start consuming the data coming in:\n\n```\n    // app.js\n    subscribeToEventChannel() {\n        const channel = this.pusher.subscribe('trade');\n        channel.bind('stock', data =\u003e {\n          this.updateChartData(data)\n        });\n      }\n```\n\nThe `subscribe` method on Pusher takes a channel we need to subscribe and returns a subscription. We can then bind to this subscription using `bind` and passing it the event’s name and a callback function. \n\nIn the event, we called `updateChartData` and passed it the data to keep updating the chart. We create an instance variable in the constructor called `chart`. We also called the `initializeChart` method to setup the chart in the constructor as well. Before we see the update chart logic, let’s see how this chart is initialized:\n\n```\n    // app.js\n     initializeChart() {\n        const ctx = document.getElementById('chart').getContext('2d');\n        const data = {\n          labels: [],\n          datasets: [\n            {\n              label: 'GOOG',\n              backgroundColor: 'rgb(125, 195, 242)',\n              borderColor: 'rgb(54, 162, 235)',\n              data: [],\n              // fill: false\n            }\n          ]\n        };\n        this.chart = new Chart(ctx, {\n          type: 'line',\n          data: data,\n          options: {\n            responsive: true,\n            title: {\n              display: true,\n              text: 'Chart.js Line Chart'\n            },\n            tooltips: {\n              mode: 'index',\n              intersect: false\n            },\n            hover: {\n              mode: 'nearest',\n              intersect: true\n            },\n            scales: {\n              xAxes: [\n                {\n                  display: true,\n                  scaleLabel: {\n                    display: true,\n                    labelString: 'Time  '\n                  }\n                }\n              ],\n              yAxes: [\n                {\n                  display: true,\n                  scaleLabel: {\n                    display: true,\n                    labelString: 'Price'\n                  },\n                  ticks: {\n                    min: 504,\n                    max: 507\n                }\n                }\n              ]\n            }\n          }\n        });\n      }\n```\n\nIt might look overwhelming, but a closer look shows that we are just defining a chart and describing what kind of data it should expect, how it should label the data, and how it should look.\n\nNow, the update chart method uses the chart instance to update the chart every single time data comes in from the Pusher server.\n\n```\n     // app.js\n    updateChartData(data) {\n      this.chart.data.labels.push(data.Timestamp.split(' ')[1].split('.')[0]);\n      this.chart.data.datasets[0].data.push(data.Price);\n      this.chart.update();\n    }\n```\n\nYou can launch the client app with the following command:  \n\n```\n    ## Run the web application\n    npm run dev\n```\n\nThis will start the web application on port 5200. Open up up your browser:\n\n![realtime-trade-platform-javascript-chart](//images.contentful.com/1es3ne0caaid/3IUcHYgz3GAAswIcG0SW4A/de71dd4353bfda654feee81c26ec3386/realtime-trade-platform-javascript-chart.gif)\n\n## Realtime ticker\n\nAt the moment, thanks to Pusher’s functionality, we are able to update the chart in realtime with the payload sent in by the server. Let’s proceed by adding another feature to display the prices on a table.\n\nWe will choose a random price to be set as a threshold in order to determine when the price increases or decreases as it is being received from the server. These changes in prices will be indicated with different colors as it is obtainable in any stock market chart. \n\nRemember we had the following table in our `index.html`:\n\n```\n    \u003chtml\u003e\n    \u003ch2\u003eTrending Tickers\u003c/h2\u003e\n    \u003ctable class=\"table\"\u003e\n        \u003cthead\u003e\n          \u003ctr\u003e\n            \u003cth\u003e Name\u003c/th\u003e\n            \u003cth\u003e Price\u003c/th\u003e\n          \u003c/tr\u003e\n        \u003c/thead\u003e\n        \u003ctbody\u003e\n          \u003ctr\u003e\n            \u003ctd\u003eGOOG\u003c/td\u003e\n            \u003ctd id=\"price\"\u003e\u003c/td\u003e\n          \u003c/tr\u003e\n        \u003c/tbody\u003e\n      \u003c/table\u003e\n```\n\nTo make this work we will edit the `updateChartData()` method and also create a new one called  `flashColor``()`. The new method will be used to change the colors based on the changes in prices.\n\n\n```\n    ## app.js\n    updateChartData(data) {    \n        ...\n        \n        document.getElementById('price').innerHTML = data.Price;\n        this.chart.data.datasets.forEach(dataset =\u003e {\n          var currentPrice = document.getElementById('price');\n          var tag = currentPrice.innerHTML;\n          tag = data.Price;\n          this.flashColor(this.threshold, tag, currentPrice);\n        });\n        this.chart.update();\n      }\n```\n\nDon’t forget to include the threshold price within the constructor like this :\n\n```\n    // app.js\n    class App {\n      constructor() {\n        ...\n        ## add this\n        this.threshold = 505;\n      }\n    }\n    new App();\n```\n\nFor visual cues, here is a function that changes the color of the price text every single time the threshold is beat :\n\n```\n    // app.js\n    flashColor(threshold, tag, currentPrice) {\n        let color = \" \";\n        if (tag \u003e threshold ) {\n          color = \"green\";\n        } else if(tag == threshold){\n          color = \"blue\";\n        } else {\n          color = \"red\";\n        }\n        currentPrice.style.color = color;\n        currentPrice.style.fontWeight = \"bolder\";\n      }\n```\n\nAnd that is it :\n\nhttps://www.youtube.com/watch?v=5Tee_2EkCW0\u0026\n\nFrom the chart, the green color for prices means that the price has gone above the threshold while red indicates reduction in price and blue means it is exactly the same as the threshold price.\n\n## Conclusion\n\nFrom this tutorial, we have seen how to build a stock market like platform where changes in prices are being updated in realtime. This can be built upon and used with any chart library. In case you miss anything, the complete code can be found on GitHub. You can find it [here](https://github.com/christiannwamba/pusher-stock) and please feel free to submit a pull request.","metaTitle":"Build a trade platform using JavaScript","metaDescription":"In this tutorial, discover how to build a realtime trade platform using Vanilla JavaScript and Node.js."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"20S3RCpd722OmkKW4kO8ci","type":"Entry","createdAt":"2018-03-05T16:13:08.393Z","updatedAt":"2018-03-06T11:54:25.659Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":13,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime geolocation app with ARKit and CoreLocation","url":"realtime-geolocation-arkit-corelocation","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"29U2yrruIQmo6UkY0MMsyK","type":"Entry","createdAt":"2018-02-13T11:27:38.132Z","updatedAt":"2018-02-14T10:08:48.377Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Esteban Herrera","url":"esteban-herrera","email":"estebanhb2@gmail.com","twitter":"https://twitter.com/eh3rrera","github":"https://github.com/eh3rrera/","guestWriter":true}}],"projectRepo":"https://github.com/eh3rrera/ARKitCarGeolocation","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4FiKU27gk88US4gKMGI222","type":"Entry","createdAt":"2018-02-12T15:08:02.376Z","updatedAt":"2018-02-26T12:31:12.773Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"AR-VR","url":"ar-vr","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-12-11","description":"Discover how to build a AR experience for ride hailing apps focused on location and realtime features.","prerequisite":"A basic understanding of Swift is needed to follow this tutorial.","content":"Augmented Reality (AR) has a lot of interesting and practical use cases. One of them is location.\n\nWith iOS 11, the ability to use ARKit to create AR apps and combine them with multiple libraries has opened a lot of possibilities.\n\nIn this tutorial, we’re going to combine the power of ARKit, CoreLocation, and Pusher to create a geolocation AR app. \n\nLet’s think of a taxi service. Some services allow you to track on a map the car that is going to pick you up, but wouldn’t be great to have an AR view to see the route of the car and how it gets closer to you?\n\nSomething like this:\n\nhttps://www.youtube.com/watch?v=XBe65KD3CL4\u0026\n\nAs you can see, the information to position the car in the AR world is not always accurate, both on the CoreLocation side and on the ARKit side, however, for this use case, most of the time it will be enough.\n\nHere’s what you’ll need:\n\n- A device with an A9 or later processor (iPhone 6s or better, iPhone SE, any iPad Pro, or the 2017 iPad)\n- iOS 11\n- [Xcode 9.1](https://developer.apple.com/download/)  (or newer)\n- A 3D model of a car (in DAE format)\n\nYou can find free 3D models on sites like [Free3D](https://free3d.com), [Turbosquid](https://www.turbosquid.com/), or [Google’s Poly](https://poly.google.com). \n\nThe most common format is OBJ (with the its textures defined in a MTL file), which can be converted to DAE with a program like Blender.\n\nFor this project I chose [this model](https://free3d.com/3d-model/low-poly-car-40967.html), which it’s available in DAE format.\n\nThe math for this project is a bit heavy. I’ll dedicate more time to explain the operations related to geolocation than the ones related to rotating and translating a model with ARKit. \n\nIf you don’t know about transformation matrices or how to convert your 3D model to the DAE format, take a look at my previous [tutorial about ARKit](https://blog.pusher.com/building-an-ar-app-with-arkit-and-scenekit/).\n\nLet’s start by setting up a Pusher app.\n\n\n## Setting up Pusher\n\nIf you haven’t already, create a free account at [Pusher](https://pusher.com/). Then, go to your Dashboard and create an app, choosing a name, the cluster closest to your location, and *iOS* as your front-end technology:\n\n![realtime-geolocation-arkit-corelocation-create-app](//images.contentful.com/1es3ne0caaid/2BPxSA65lik4WEyyOySMCS/2a050a70c16fab5e19175de1f681aa41/realtime-geolocation-arkit-corelocation-create-app.png)\n\nThis will give you some sample code to get started:\n\n![realtime-geolocation-arkit-corelocation-sample-code](//images.contentful.com/1es3ne0caaid/48VCUradlucio8uU8ccKg4/145dfc2af882e9289104f0bfd0d6d522/realtime-geolocation-arkit-corelocation-sample-code.png)\n\nSave your app id, key, secret and cluster values. We’ll need them later. \n\nFinally, go to the *App Setting* tab, check the option *Enable client events* and click on *Update*:\n\n![realtime-geolocation-arkit-corelocation-app-settings-enable-client-events](//images.contentful.com/1es3ne0caaid/4aUiNklNVuaKGQWOg40Ywy/b3fe51cd46f255507434facb2439b817/realtime-geolocation-arkit-corelocation-app-settings-enable-client-events.png)\n\nThrough this app, the drivers will send their locations as latitude/longitude coordinates along with the direction they’re heading (in degrees) as a client [event](https://pusher.com/docs/client_api_guide/client_events).\n\nBut let’s not get ahead of ourselves, let’s set up the Xcode project first.\n\n## Setting up the project\n\nOpen Xcode 9 and create a new *Single View App*: \n\n![realtime-geolocation-arkit-corelocation-single-view-app](//images.contentful.com/1es3ne0caaid/2NQrFCbyL6EIkek0EEcCeS/7080003f5de1796b6f5118efbbb35b09/realtime-geolocation-arkit-corelocation-single-view-app.png)\n\nWe’re choosing this option because we are going to manually set up an AR view along with other controls.\n\nEnter the project information, choosing *Swift* as the language:\n\n![realtime-geolocation-arkit-corelocation-new-project](//images.contentful.com/1es3ne0caaid/283bRIrm3qG6GMEYAUu6ao/7623035dc93c6e197c5d69f5df496861/realtime-geolocation-arkit-corelocation-new-project.png)\n\nCreate the project and close it. We’re going to use [CocoaPods](https://cocoapods.org/) to install the project’s dependencies. Open a terminal window, go to the root directory of your project and, in case you don’t have CocoaPods installed (or if you want to update it), execute:\n\n```\n    sudo gem install cocoapods\n```\n\nOnce installed, create the file `Podfile` with the command:\n\n```\n    pod init\n```\n \nEdit this file to set the platform to iOS 11 and add the [Pusher’s Swift library](https://github.com/pusher/pusher-websocket-swift) as a dependency of the project:\n\n```\n    # Uncomment the next line to define a global platform for your project\n     platform :ios, '11.0'\n    \n    target 'ARKitCarGeolocation' do\n      # Comment the next line if you're not using Swift and don't want to use dynamic frameworks\n      use_frameworks!\n    \n      # Pods for ARKitCarGeolocation\n      pod 'PusherSwift', '~\u003e 5.0.1'\n    end \n```\n\nOnce you’ve edited the `Podfile`, execute the following command to install the dependency:\n\n```\n    pod install\n```\n\nIn case version 5.0.1 (or later) is not installed (the output of the installation will tell you the installed version), you can update your CocoaPod repository and install the latest version of the library with the command:\n\n```\n    pod install --repo-update\n```\n\nNow open the Xcode workspace instead of the project file. The workspace has the dependency already configured:\n\n``` swift\n    open ARKitCarGeolocation.xcworkspace\n```\n\nIf you build your project at this point, a couple of warnings may show up, but the operation should be successful.\n\nNext, select the file `Info.plist`, add a row of type *Privacy - Camera Usage Description* (`NSCameraUsageDescription`) and give it a description. This is required for ARKit to access the camera.\n\nWe’ll also need a row of type *Privacy - Location When In Use Usage Description* (`NSLocationWhenInUseUsageDescription`). This is required to get the location from your device’s GPS (only when the app is being used, not all the time):\n\n![realtime-geolocation-arkit-corelocation-privacy-camera-location](//images.contentful.com/1es3ne0caaid/32iLL63z8QIsMsgkCss4CU/1d2e2851d141d8a6489eac7dceb2d2e9/realtime-geolocation-arkit-corelocation-privacy-camera-location.png)\n\nFinally, configure a team so you can run the app on your device:\n\n![realtime-geolocation-arkit-corelocation-team-none](//images.contentful.com/1es3ne0caaid/2cAxRPwM0YkiWCoEQY6Uqe/8e17160f8f97d328f0404e95c354b289/realtime-geolocation-arkit-corelocation-team-none.png)\n\nNow let’s build the user interface.\n\n## Building the user interface \n\nGo to `Main.storyboard` and drag an *ARKit SceneKit View* to the view:\n\n![realtime-geolocation-arkit-corelocation-controller-scene-view](//images.contentful.com/1es3ne0caaid/6sz6zrtewMogOS8MKU2SmO/c8891405447dc7236d3077569686dc01/realtime-geolocation-arkit-corelocation-controller-scene-view.png)\n\nNext, add constraints to all sides of this view so that it fills the entire screen. You do this by pressing the `ctrl` key while dragging a line from the ARSCNView to each side of the parent view and choosing leading, top, trailing, and bottom to the superview, with a value of `0`:\n\n![realtime-geolocation-arkit-corelocation-add-constraints-arscnview](//images.contentful.com/1es3ne0caaid/44MZcus1cIIMog2KQ4COky/e1dd766cf1d6ff7722ad888ea0506d78/realtime-geolocation-arkit-corelocation-add-constraints-arscnview.png)\n\nNext, add a text view and disable its *Editable* and *Selectable* behaviors in the *Attributes inspector:*\n\n![realtime-geolocation-arkit-corelocation-text-view](//images.contentful.com/1es3ne0caaid/14vAOITk4ACQ6qkG4IKmg8/de6952a765af291b2200ab8eb201ef31/realtime-geolocation-arkit-corelocation-text-view.png)\n\nChange its background color (I chose a white color with `50%` opacity):\n\n![realtime-geolocation-arkit-corelocation-text-view-background](//images.contentful.com/1es3ne0caaid/23XPYoLBzuCmoAMmWU4OEK/87b76d3a5487af017b37bef99ab3c101/realtime-geolocation-arkit-corelocation-text-view-background.png)\n\nAdd a height constraint with a value of `90` and leading, top, and trailing constraints with the value `0` so it remains fixed to the top of the screen:\n\n![realtime-geolocation-arkit-corelocation-text-view-constraints](//images.contentful.com/1es3ne0caaid/ZAptCvyKyIw0QUwMAuo02/4acf0e021c00577b58d5059195d6ae8d/realtime-geolocation-arkit-corelocation-text-view-constraints.png)\n\nIn `ViewController.swift`, import ARKit:\n\n``` swift\n    import ARKit\n```\n\nThen, create two `IBOutlet`s, one to the scene view and another one to the text view:\n\n![realtime-geolocation-arkit-corelocation-iboutlets](//images.contentful.com/1es3ne0caaid/4GLk4xx3ywCeaeGoMcWgem/d58b8c89e032a44586e1ba3edf0bb76b/realtime-geolocation-arkit-corelocation-iboutlets.png)\n\nYou’re ready to start coding the app, but before that, let me explain what needs to be done. However, if you’re already familiar with geolocation concepts or if you’re not interested, feel free to skip the next section.\n\n## Understanding how the app works\n\nImagine you are standing at some point in the world. It doesn’t matter where or in what direction you’re looking at.\n\nYour location is given by two numbers, latitude and longitude.\n\nLatitude is the distance between the North or the South Pole and the equator (an imaginary circle around the Earth halfway between the poles).  It goes from `0º` to `90º` for places to the north of the equator, and `0º` to `-90º` for places to the south of the equator.\n\nLongitude is the distance from the prime meridian (an imaginary line running from north to south through Greenwich, England) to a point at the west or east. It goes from `0º` to `180º` for places to the east of the prime meridian, and `0º` to `-180º` for places to the west of the prime meridian.\n\nFor example, if you’re in Brazil, your latitude and longitude will be negative because you are on the southwest side of the Earth:\n\n![realtime-geolocation-arkit-corelocation-map-brazil](//images.contentful.com/1es3ne0caaid/1SKZuR9fvSS00A6qgecek4/a12c4f85ac4b8f279ba11f13c1cc4e17/realtime-geolocation-arkit-corelocation-map-brazil.png)\n\nAnd if you’re in Japan, for example, your latitude and longitude will be positive because you are on the northeast side of the Earth:\n\n![realtime-geolocation-arkit-corelocation-map-japan](//images.contentful.com/1es3ne0caaid/1q9SM0sdMI2CIs02AOKUoY/bdf979d5361a4373c7bf70ab3c2a914c/realtime-geolocation-arkit-corelocation-map-japan.png)\n\nThis app will take into account your position and the driver’s position in a latitude and longitude coordinate system:\n\n![realtime-geolocation-arkit-corelocation-driver-location](//images.contentful.com/1es3ne0caaid/kAcdEX88yO0mYWcmMug6e/79b8933804fcad3e35ca9fa1b5208b61/realtime-geolocation-arkit-corelocation-driver-location.png)\n\nBut if it’s easier to you, you can think of your position as the origin (`0`, `0`):\n\n![realtime-geolocation-arkit-corelocation-origin](//images.contentful.com/1es3ne0caaid/5c2gs1JCAg8Y2MgemMq62k/3db4c763c03ffd5f876694f8d03fa788/realtime-geolocation-arkit-corelocation-origin.png)\n\nYou need to calculate two things:\n\n- The distance between you and the driver \n- The angle between the north (or south) line of the Earth and the line connecting you and the driver, which is called [bearing](https://en.wikipedia.org/wiki/Bearing_(navigation)).\n\n![realtime-geolocation-arkit-corelocation-bearing-distance](//images.contentful.com/1es3ne0caaid/5jBer4ROXeQeayC2W2Yq0U/f2304f50098a9734d3e07f67f9d6edc5/realtime-geolocation-arkit-corelocation-bearing-distance.png)\n\nThe distance will tell you how far you have to position the 3D model in the AR world.\n\nThe bearing will help you create a rotation transformation to position your model in the right direction at the above distance.\n\nIf we were talking about a simple `x` and `y` coordinate system, we could get those calculations by applying the [Pythagorean theorem](https://en.wikipedia.org/wiki/Pythagorean_theorem) and some simple trigonometry, with [sine](https://en.wikipedia.org/wiki/Sine) and [cosine](https://en.wikipedia.org/wiki/Law_of_cosines) operations.\n\nBut we are talking about latitudes and longitudes of the Earth. And as the Earth is not a flat plane, the math gets more complex.\n\nThe distance is calculated by calling just a [method](https://developer.apple.com/documentation/corelocation/cllocation/1423689-distance) of the class [CLLocation](https://developer.apple.com/documentation/corelocation/cllocation). It uses the [Haversine Formula](http://www.igismap.com/haversine-formula-calculate-geographic-distance-earth/) which, from two different latitude/longitude pairs of values, calculates the distance by tracing a line between them that follows the curvature of the Earth.\n\nOn the other hand, we have to calculate the bearing between two different latitude/longitude pairs of values manually. [This is the formula](http://www.igismap.com/formula-to-find-bearing-or-heading-angle-between-two-points-latitude-longitude/):\n\n``` swift\n    atan2 ( X, Y )\n```\n\nWhere `X` equals:\n\n``` swift\n    sin(long2 - long1) * cos(long2)\n```\n\nAnd `Y` equals:\n\n``` swift\n    cos(lat1) * sin(lat2) - sin(lat1) * cos(lat2) * cos(long2 - long1)\n```\nAnother thing to consider is that for the matrix transformation, you’ll have to use [radians](https://en.wikipedia.org/wiki/Radian) instead of degrees as angle units. As the length of an entire circumference is equal to `2π` radians ( `360º`), one radian is equal to `180/π` degrees. \n\nSo this is the plan.\n\nUsing Pusher, the drivers will publish their location and direction they’re heading in realtime.\n\nUsing CoreLocation, the AR app is going to get your location. It will also listen to the driver’s location updates.\n\nWhen a location update is received, using the formulas explained above, the app will place a 3D model of a car in a position relative to your location inside the AR world, and it will orient the model to the same direction the driver is heading.\n\nThe app is only going to get your location once, so it assumes your location is fixed (which is true most of the time).\n\nIn addition, an arrow emoji (⬇️) will be shown on top of the model at all times so you can spot it easily, and the text view you added in the last section will show the status of the app and the distance between you and the car.\n\nNow that you know what to do, let’s get into the code.\n\n## Building the app with ARKit and CoreLocation\n\nLet’s start by defining two extensions.\n\nOne to provide conversion methods to radians and degrees to all floating point types. Create a new Swift file, `FloatingPoint+Extension.swift`, with the following content:\n\n``` swift\n    import Foundation\n    \n    extension FloatingPoint {\n        func toRadians() -\u003e Self {\n            return self * .pi / 180\n        }\n        \n        func toDegrees() -\u003e Self {\n            return self * 180 / .pi\n        }\n    }\n```\n\nAnd another extension to create an image from a string. Create another Swift file, `String+Extension.swift`, with the following content (taken from this [StackOverflow answer](https://stackoverflow.com/a/47164529/3593852)):\n\n``` swift\n    import UIKit\n    \n    extension String {\n        func image() -\u003e UIImage? {\n            let size = CGSize(width: 100, height: 100)\n            UIGraphicsBeginImageContextWithOptions(size, false, 0)\n            UIColor.clear.set()\n            let rect = CGRect(origin: CGPoint(), size: size)\n            UIRectFill(CGRect(origin: CGPoint(), size: size))\n            (self as NSString).draw(in: rect, withAttributes: [NSAttributedStringKey.font: UIFont.systemFont(ofSize: 90)])\n            let image = UIGraphicsGetImageFromCurrentImageContext()\n            UIGraphicsEndImageContext()\n            return image\n        }\n    }\n```\n\nYou’ll use this extension to create an image out of the arrow emoji (a string). It creates a rectangle of width `100` and height `100` , with a transparent background, to draw the string inside of it with a font size of `90`.\n\nNext, open the *New File* dialog and scroll down to choose the *Asset Catalog* type:\n\n![realtime-geolocation-arkit-corelocation-assets-catalog](//images.contentful.com/1es3ne0caaid/5b67DLlS2QqaK8OIWm4Ig/a9045fb5b9d2478f3e329d05d797a474/realtime-geolocation-arkit-corelocation-assets-catalog.png)\n\nEnter `art.scnassets` as the file name (confirming the use of the extension `scnassets`):\n\n![realtime-geolocation-arkit-corelocation-confirm-extension](//images.contentful.com/1es3ne0caaid/Hfu7f39xIcImoE88M6GSW/654f347952f50535d3111bb99a1e1ea9/realtime-geolocation-arkit-corelocation-confirm-extension.png)\n\nNow copy your model to this folder:\n\n![realtime-geolocation-arkit-corelocation-import-model](//images.contentful.com/1es3ne0caaid/3EF3mAODwQWc06gQGG0GQC/621fd22e3fc946c8b6442cf983c9cda8/realtime-geolocation-arkit-corelocation-import-model.png)\n\nOpen the Scene Graph View, select the main node of your model and, in the properties tab, give it a name, which you’ll use to reference it in the code:\n\n![realtime-geolocation-arkit-corelocation-model-car](//images.contentful.com/1es3ne0caaid/6xtL4bGfsWMkyqkIaEG2kC/a5d3765469225414d45fdbd652f6cfb7/realtime-geolocation-arkit-corelocation-model-car.png)\n\nBack to `ViewController.swift`, let’s add the `import` statements we’ll need:\n\n``` swift\n    import SceneKit\n    import CoreLocation\n    import PusherSwift\n```\n\nAnd the delegates the controller will use:\n\n``` swift\n    class ViewController: UIViewController, ARSCNViewDelegate, CLLocationManagerDelegate {\n      ...\n    }\n```\n\nNext, let’s add some instance variables.\n\nFirst, a `CLLocationManager` to request the user location and another variable to store it:\n\n``` swift\n    class ViewController: UIViewController, ARSCNViewDelegate, CLLocationManagerDelegate {\n      ...\n      let locationManager = CLLocationManager()\n      var userLocation = CLLocation()\n      \n      ...\n    }\n```\n\nThen, a variable to store the direction the drivers are heading, the distance between them and the user, and the status of the app:\n\n``` swift\n    class ViewController: UIViewController, ARSCNViewDelegate, CLLocationManagerDelegate {\n      ...\n      var heading : Double! = 0.0\n      var distance : Float! = 0.0 {\n        didSet {\n          setStatusText()\n        }\n      }\n      var status: String! {\n        didSet {\n          setStatusText()\n        }\n      }\n      \n      ...\n      \n      func setStatusText() {\n        var text = \"Status: \\(status!)\\n\"\n        text += \"Distance: \\(String(format: \"%.2f m\", distance))\"\n        statusTextView.text = text\n      }\n    }\n```\n\nWhenever a new value for the distance or the status is set, the text view will be updated. Notice that the distance is calculated in meters.\n\nNext, a variable to store the root node of the car model and the name of this node, which should be the same than the one you set at the SceneKit editor:\n\n``` swift\n    class ViewController: UIViewController, ARSCNViewDelegate, CLLocationManagerDelegate {\n      ...\n      var modelNode:SCNNode!\n      let rootNodeName = \"Car\"\n      \n      ...\n    }\n```\n\nYou’ll also need the original (first) transformation of that node:\n\n``` swift\n    class ViewController: UIViewController, ARSCNViewDelegate, CLLocationManagerDelegate {\n      ...\n      var originalTransform:SCNMatrix4!\n      \n      ...\n    }\n```\n\nWhy?\nTo calculate the orientation (rotation) of the model in the best possible way.\nIdeally, the driver’s device will always give you the correct heading so you can take the first received reading, rotate the model in that direction, and then calculate the next rotations relative to the first one.\n\nHowever, if the first reading is wrong (which happens sometimes), the next rotations will be wrong even if the rest of the readings are correct.\n\nSo you always need to calculate the orientation as if it was the first time you rotate the model, because once you rotate the model a certain angle the following rotations will be done relative to that angle. Resetting the rotation to `0º` won’t work either because of the way transformations work (matrix multiplication).\n\nFinally, you’ll need to store the Pusher object and channel to receive the updates:\n\n``` swift\n    class ViewController: UIViewController, ARSCNViewDelegate, CLLocationManagerDelegate {\n      ...\n      let pusher = Pusher(\n        key: \"YOUR_PUSHER_APP_KEY\",\n        options: PusherClientOptions(\n            authMethod: .inline(secret: \"YOUR_PUSHER_APP_SECRET\"),\n            host: .cluster(\"YOUR_PUSHER_APP_CLUSTER\")\n        )\n      )\n      var channel: PusherChannel!\n      \n      ...\n    }\n```\n\nNotice the value of the `authMethod` option.\n\nYou’ll be receiving the updates through a private channel. They need to be authenticated by a server. However, at development time, you can use the `inline` option to bypass the need to set up an auth endpoint as part of a server. \n\nYou can learn more about the object’s options [here](https://github.com/pusher/pusher-websocket-swift#configuration).  If you need it, you can learn how to create an [authentication endpoint on this page](https://pusher.com/docs/authenticating_users#implementing_endpoints).\n\nIn the `viewDidLoad` function, set up the SceneKit scene and the location service:\n\n``` swift\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        // Set the view's delegate\n        sceneView.delegate = self\n            \n        // Create a new scene\n        let scene = SCNScene()\n            \n        // Set the scene to the view\n        sceneView.scene = scene\n            \n        // Start location services\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        \n        // Set the initial status\n        status = \"Getting user location...\"\n            \n        // Set a padding in the text view\n        statusTextView.textContainerInset = UIEdgeInsetsMake(20.0, 10.0, 10.0, 0.0)\n    }\n```\n\nNext, configure the AR session:\n\n``` swift\n    override func viewWillAppear(_ animated: Bool) {\n        super.viewWillAppear(animated)\n            \n        // Create a session configuration\n        let configuration = ARWorldTrackingConfiguration()\n        configuration.worldAlignment = .gravityAndHeading\n    \n        // Run the view's session\n        sceneView.session.run(configuration)\n    }\n        \n    override func viewWillDisappear(_ animated: Bool) {\n        super.viewWillDisappear(animated)\n            \n        // Pause the view's session\n        sceneView.session.pause()\n    }\n```\n\nThe option [gravityAndHeading](https://developer.apple.com/documentation/arkit/arconfiguration.worldalignment/2873776-gravityandheading) will set the y-axis to the direction of gravity as detected by the device, and the x- and z-axes to the longitude and latitude directions as measured by Location Services.\n\nFor the users position, when they have authorized the use of the location services, you have to request the location (the [requestLocation](https://developer.apple.com/documentation/corelocation/cllocationmanager/1620548-requestlocation) method is used so the location is requested only once):\n\n``` swift\n    //MARK: - CLLocationManager\n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        // Implementing this method is required\n        print(error.localizedDescription)\n    }\n        \n    func locationManager(_ manager: CLLocationManager, \n          didChangeAuthorization status: CLAuthorizationStatus) {\n        if status == .authorizedWhenInUse {\n            locationManager.requestLocation()\n        }\n    }\n```\n\nOnce the user’s location is received, take the last element of the array, update the status, and connect to Pusher (it doesn’t make sense to connect to Pusher before having the users location because all the calculations will be wrong):\n\n``` swift\n    func locationManager(_ manager: CLLocationManager, \n          didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n          userLocation = location\n          status = \"Connecting to Pusher...\"\n                \n          self.connectToPusher()\n        }\n    }\n```\n\nIn the method `connectToPusher` you subscribe to `private-channel` and, when a `client-new-location` event is received, extract the driver’s latitude, longitude, and heading and update the status and location of the 3D model with the method `updateLocation`:\n\n``` swift\n    //MARK: - Utility methods\n    func connectToPusher() {\n        // subscribe to channel and bind to event\n        let channel = pusher.subscribe(\"private-channel\")\n            \n        let _ = channel.bind(eventName: \"client-new-location\", callback: { (data: Any?) -\u003e Void in\n          if let data = data as? [String : AnyObject] {\n            if let latitude = Double(data[\"latitude\"] as! String),\n                let longitude = Double(data[\"longitude\"] as! String),\n                let heading = Double(data[\"heading\"] as! String)  {\n                    self.status = \"Driver's location received\"  \n                    self.heading = heading\n                    self.updateLocation(latitude, longitude)\n            }\n          }\n        })\n            \n        pusher.connect()\n        status = \"Waiting to receive location events...\"\n    }\n```\n\nIn `updateLocation`, create a [CLLocation](https://developer.apple.com/documentation/corelocation/cllocation) object to calculate the distance between the user and the driver. Remember that the [distance](https://developer.apple.com/documentation/corelocation/cllocation/1423689-distance) is calculated in meters:\n\n``` swift\n    func updateLocation(_ latitude : Double, _ longitude : Double) {\n        let location = CLLocation(latitude: latitude, longitude: longitude)\n        self.distance = Float(location.distance(from: self.userLocation))\n    }\n```\n\nIf this is the first update received, `self.modelNode` will be `nil`, so you have to instantiate the model:\n\n``` swift\n    func updateLocation(_ latitude : Double, _ longitude : Double) {\n        ...\n        if self.modelNode == nil {\n            let modelScene = SCNScene(named: \"art.scnassets/Car.dae\")!\n            self.modelNode = modelScene.rootNode.childNode(withName: rootNodeName, recursively: true)!\n            \n        }\n    }\n```\n\nNext, you need to move the [pivot](https://developer.apple.com/documentation/scenekit/scnnode/1408044-pivot) of the model to its center in the y-axis, so it can be rotated without changing its position:\n\n``` swift\n    func updateLocation(_ latitude : Double, _ longitude : Double) {\n        ...\n        if self.modelNode == nil {\n            ...\n            // Move model's pivot to its center in the Y axis\n            let (minBox, maxBox) = self.modelNode.boundingBox\n            self.modelNode.pivot = SCNMatrix4MakeTranslation(0, (maxBox.y - minBox.y)/2, 0)\n        }\n    }\n```\n\nSave the model’s transform to calculate future rotations, position it, and add it to the scene:\n\n``` swift\n    func updateLocation(_ latitude : Double, _ longitude : Double) {\n        ...\n        if self.modelNode == nil {\n            ...\n            // Save original transform to calculate future rotations\n            self.originalTransform = self.modelNode.transform\n                \n            // Position the model in the correct place\n            positionModel(location)\n                \n            // Add the model to the scene\n            sceneView.scene.rootNode.addChildNode(self.modelNode)\n        }\n    }\n```\n\nNotice that there’s no need to create an [ARAnchor](https://developer.apple.com/documentation/arkit/aranchor) to add the node as a child of it. An `ARAnchor` gives you the ability to track positions and orientations of models relative to the camera.\n\nBut in this case, it’s better to work with the child directly. Mostly because you cannot delete or change the position of the whole `ARAnchor` manually -only of its children.\n\nFinally, create the arrow from an emoji, position it on top of the car (using the y-axis, I got the value by trial and error), and add it as a child of the model (so it stays with it at all times):\n\n``` swift\n    func updateLocation(_ latitude : Double, _ longitude : Double) {\n        ...\n        if self.modelNode == nil {\n            ...\n            // Create arrow from the emoji\n            let arrow = makeBillboardNode(\"⬇️\".image()!)\n            // Position it on top of the car\n            arrow.position = SCNVector3Make(0, 4, 0)\n            // Add it as a child of the car model\n            self.modelNode.addChildNode(arrow)\n        }\n    }\n```\n \nThis is the definition of the `makeBillboardNode` method (taken from this [StackOverflow answer](https://stackoverflow.com/a/44403042/3593852), modifying the width and height of the plane so the arrow can be properly seen):\n\n``` swift\n    func makeBillboardNode(_ image: UIImage) -\u003e SCNNode {\n        let plane = SCNPlane(width: 10, height: 10)\n        plane.firstMaterial!.diffuse.contents = image\n        let node = SCNNode(geometry: plane)\n        node.constraints = [SCNBillboardConstraint()]\n        return node\n    } \n```\n\nNow, if this is not the first update, you just need to position the model, animating the movement so it looks nice:\n\n``` swift\n    func updateLocation(_ latitude : Double, _ longitude : Double) {\n        ...\n        if self.modelNode == nil {\n            ...\n        } else {\n            // Begin animation\n            SCNTransaction.begin()\n            SCNTransaction.animationDuration = 1.0\n                \n            // Position the model in the correct place\n            positionModel(location)\n                \n            // End animation\n            SCNTransaction.commit()\n        }\n    }\n```\n\nTo position the model, you just need to rotate first, then translate it to the correct position and scale it:\n\n``` swift\n    func positionModel(_ location: CLLocation) {\n        // Rotate node\n        self.modelNode.transform = rotateNode(Float(-1 * (self.heading - 180).toRadians()), self.originalTransform)\n            \n        // Translate node\n        self.modelNode.position = translateNode(location)\n            \n        // Scale node\n        self.modelNode.scale = scaleNode(location)\n    }\n```\n\nThe order is important because of how matrix multiplication works (`a * b` is not the same than `b * a`).\n\nIn ARKit, rotation in the y-axis is counterclockwise (and handled in radians), so we need to subtract `180º` and make the angle negative. This is the definition of the method `rotateNode`:\n\n``` swift\n    func rotateNode(_ angleInRadians: Float, _ transform: SCNMatrix4) -\u003e SCNMatrix4 {\n        let rotation = SCNMatrix4MakeRotation(angleInRadians, 0, 1, 0)\n        return SCNMatrix4Mult(transform, rotation)\n    }\n```\n\nI scale the node in proportion to the distance. They are inversely proportional -the greater the distance, the less the scale. In my case, I just divide `1000` by the distance and don’t allow the value to be less than `1.5` or great than `3`:\n\n``` swift\n    func scaleNode (_ location: CLLocation) -\u003e SCNVector3 {\n        let scale = min( max( Float(1000/distance), 1.5 ), 3 )\n        return SCNVector3(x: scale, y: scale, z: scale)\n    }\n```\n\nI got these values from trial and error. They will vary depending on the model you’re using.\n\nTo translate the node, you have to calculate the transformation matrix and get the position values from that matrix (from its fourth column, referenced by a zero-based index):\n\n``` swift\n    func translateNode (_ location: CLLocation) -\u003e SCNVector3 {\n        let locationTransform = \n            transformMatrix(matrix_identity_float4x4, userLocation, location)\n        return positionFromTransform(locationTransform)\n    }\n    \n    func positionFromTransform(_ transform: simd_float4x4) -\u003e SCNVector3 {\n        return SCNVector3Make(\n            transform.columns.3.x, transform.columns.3.y, transform.columns.3.z\n        )\n    }\n```\n\nTo calculate the transformation matrix: \n\n- You use an identity matrix (you don’t have to use the matrix of the camera or something like that, the position and orientation of the driver are independent of your position and orientation.\n- You have to calculate the bearing using the formula explained in the previous section:\n    atan2 ( \n        sin(long2 - long1) * cos(long2),\n        cos(lat1) * sin(lat2) - sin(lat1) * cos(lat2) * cos(long2 - long1)\n    )\n- Using an identity matrix, get a rotation matrix in the y-axis using that bearing.\n- The distance is given by the z-axis, so create a four element vector with the distance in the z position to get a translation matrix.\n- Multiply both matrices (remember, the order is important) to combine them.\n- Get the final transformation by multiplying the result of the previous step with the matrix passed as an argument. \n\nAll this is done with the following methods:\n\n``` swift\n    func transformMatrix(_ matrix: simd_float4x4, _ originLocation: CLLocation, _ driverLocation: CLLocation) -\u003e simd_float4x4 {\n        let bearing = bearingBetweenLocations(userLocation, driverLocation)\n        let rotationMatrix = rotateAroundY(matrix_identity_float4x4, Float(bearing))\n            \n        let position = vector_float4(0.0, 0.0, -distance, 0.0)\n        let translationMatrix = getTranslationMatrix(matrix_identity_float4x4, position)\n            \n        let transformMatrix = simd_mul(rotationMatrix, translationMatrix)\n            \n        return simd_mul(matrix, transformMatrix)\n    }\n        \n    func getTranslationMatrix(_ matrix: simd_float4x4, _ translation : vector_float4) -\u003e simd_float4x4 {\n        var matrix = matrix\n        matrix.columns.3 = translation\n        return matrix\n    }\n        \n    func rotateAroundY(_ matrix: simd_float4x4, _ degrees: Float) -\u003e simd_float4x4 {\n        var matrix = matrix\n        \n        matrix.columns.0.x = cos(degrees)\n        matrix.columns.0.z = -sin(degrees)\n            \n        matrix.columns.2.x = sin(degrees)\n        matrix.columns.2.z = cos(degrees)\n        return matrix.inverse\n    }\n        \n    func bearingBetweenLocations(_ originLocation: CLLocation, _ driverLocation: CLLocation) -\u003e Double {  \n        let lat1 = originLocation.coordinate.latitude.toRadians()\n        let lon1 = originLocation.coordinate.longitude.toRadians()\n            \n        let lat2 = driverLocation.coordinate.latitude.toRadians()\n        let lon2 = driverLocation.coordinate.longitude.toRadians()\n            \n        let longitudeDiff = lon2 - lon1\n            \n        let y = sin(longitudeDiff) * cos(lat2);\n        let x = cos(lat1) * sin(lat2) - sin(lat1) * cos(lat2) * cos(longitudeDiff);\n            \n        return atan2(y, x)\n    }\n```\n\nAbout how to rotate in the y-axis, the method returns the inverse of the matrix because rotations in ARKit are counterclockwise. [Here’s an answer from Mathematics Stack Exchange that explains rotation matrices pretty well](https://math.stackexchange.com/a/1616461).\n\nAnd that’s it, time to test the app.\n\n\nThe first time you run the app, you’ll have to give permissions to the camera:\n\n![realtime-geolocation-arkit-corelocation-camera-permission](//images.contentful.com/1es3ne0caaid/1len5eGbVm0aMcAQMYseo8/2133654186603aed30f295ff245e649c/realtime-geolocation-arkit-corelocation-camera-permission.png)\n\nAnd to the location service:\n\n![realtime-geolocation-arkit-corelocation-location-permission](//images.contentful.com/1es3ne0caaid/2YLXGZu19miIY0uWWgsEGm/548ce8a657e39d8de95e9abcfab5653f/realtime-geolocation-arkit-corelocation-location-permission.png)\n\nAnd wait for a few seconds so the app can get the location and connect to Pusher.\n\nTo test it, you’ll need someone that publishes location events while driving.\n\nOn [this GitHub repository](https://github.com/eh3rrera/PublishLocationiOSPusher), you can find an app for iOS that publishes location events. \n\nIt uses CoreLocation, and the code is pretty similar to the one shown in the previous section but it requests the location information every one or two seconds. \n\nAs a note, for the heading measurement, it’s important to hold the device in the direction the driver is heading.\n\nFor a quick test, you can use the [following Node.js script](https://gist.github.com/eh3rrera/6a643e77d5dfdc6564b84921372f51ad) to manually send some location coordinates (that you can get [from this site](https://www.latlong.net/convert-address-to-lat-long.html)) every two seconds:\n\n``` javascript\n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n      appId: 'YOUR_PUSHER_APP_',\n      key: 'YOUR_PUSHER_APP_KEY',\n      secret: 'YOUR_PUSHER_APP_SECRET',\n      cluster: 'YOUR_PUSHER_APP_CLUSTER',\n      encrypted: true\n    });\n    \n    const locations = [\n        {latitude: \"\", longitude: \"-\", heading: \"\"},\n        {latitude: \"\", longitude: \"-\", heading: \"\"},\n        {latitude: \"\", longitude: \"-\", heading: \"\"},\n        {latitude: \"\", longitude: \"-\", heading: \"\"},\n        {latitude: \"\", longitude: \"-\", heading: \"\"},\n        {latitude: \"\", longitude: \"-\", heading: \"\"},\n        {latitude: \"\", longitude: \"-\", heading: \"\"},\n        {latitude: \"\", longitude: \"-\", heading: \"\"},\n        {latitude: \"\", longitude: \"-\", heading: \"\"}\n    ];\n    \n    locations.forEach((loc, index) =\u003e {\n        setTimeout(() =\u003e {\n            console.log(loc);\n            pusher.trigger('private-channel', 'client-new-location', loc);\n        }, 2000*index);\n    });\n```\n\nOnce you have Node.js installed, you just have to copy this script to a file, let’s say `publish.js`, create a `package.json` file with the command:\n\n``` javascript\n    npm init\n```\n\nInstall the [Pusher Node.js library](https://github.com/pusher/pusher-http-node) with:\n\n``` javascript\n    npm install --save pusher\n```\n\nEnter your Pusher and location info and execute the script with:\n\n```  javascript\n    node publish.js\n```\n\nOnce the app starts receiving location events, the 3D model of the car will appear in the direction where it is in the real world (with a small size if it’s far from you):\n\nhttps://www.youtube.com/watch?v=XBe65KD3CL4\u0026\n\n## Conclusion\n\nYou have learned how to combine the power of ARKit, CoreLocation and Pusher to create an AR app.\n\nYou can add more features to make it more useful:\n\n- Adding more information to the screen. For example, you can [convert the coordinates of the driver to an address](https://stackoverflow.com/a/38977983/3593852).\n- Adding a map so, in addition to seeing the 3D model moving in the world, you can see in which street the car is at any given time.\n- Add more car models.\n- Change the mechanism to get the car orientation. For example, by using deltas of the location.\n\nHowever, keep in mind that the app depends on the quality of the information received.\n\nIn my tests, for a few seconds after starting the driver’s app, the heading information was completely wrong, and overall, the position was off a few meters. \n\nARKit occasionally gets confused too. Sometimes this can be a problem, and it is another area of improvement. However, we’re just at the beginning. Without a doubt, these frameworks will be improved over time.","metaTitle":"Build a realtime geolocation app with ARKit and CoreLocation","metaDescription":"In this tutorial, build futuristic features for you ride hailing app by including a AR experience to find where is your car using ARKit, CoreLocation and Pusher for the realtime capabilities."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3XHz1LNPWMoIq8iSU2oaIq","type":"Entry","createdAt":"2018-02-28T11:35:06.790Z","updatedAt":"2018-03-01T17:51:41.230Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build realtime likes with Node.js","url":"realtime-likes-nodejs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3j821hA7aMgOiUEaO4Q8y6","type":"Entry","createdAt":"2018-02-26T19:00:03.819Z","updatedAt":"2018-03-20T12:22:11.602Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Shalvah Adebayo","url":"shalvah-adebayo","email":"shalvah.adebayo@gmail.com","twitter":"https://twitter.com/theshalvah","github":"https://shalvah.me/","guestWriter":true}}],"projectRepo":"https://github.com/shalvah/poster","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-12-08","description":"In this tutorial, you will enrich your app with realtime social features such as likes using Node.js and MongoDB.","prerequisite":"A basic understanding of JavaScript is needed to follow this tutorial.","content":"In June 2017, Twitter updated their web and Android apps with an interesting feature: realtime tweet statistics. In case you’re not familiar with Twitter, it simply means that you get to see the number of Likes or Retweets of a tweet increase (or decrease) as people around the world like or retweet it, without having to refresh the page. \n\nIn this article, I’ll walk you through implementing your own realtime post statistics (we’ll limit ourselves to Likes) in a simple Node.js app. Here’s how the app will work when done:\n\n![realtime-likes-nodejs-demo](//images.contentful.com/1es3ne0caaid/uFNPM8Sl7Eg6Y2U0OUYyA/5a280590f9c939393a1e3cf3b0ae0494/realtime-likes-nodejs-demo.gif)\n\nOn the home page of our app, users will see all posts and they can click a button to Like or Unlike a post. Whenever a user likes or unlikes a post, the likes count displayed next to the post should increment or decrement in every other browser tab or window where the page is open. \n\n\n## Setup the project\n\nThis tutorial assumes you have Node.js and MongoDB installed. We’ll be using Express, a popular lightweight Node.js framework. Let’s get our app set up quickly by using the [express application generator](https://expressjs.com/en/starter/generator.html):\n\n```\n    # if you don't already have it installed\n    npm install express-generator -g\n    \n    # create a new express app with view engine set to Handlebars (hbs)\n    express --view=hbs poster\n    cd poster \u0026\u0026 npm install\n[ ] \n```\n\nThen we’ll add our dependencies:\n\n```\n    npm install --save dotenv faker mongoose pusher\n```\n\nHere’s a breakdown of what each module is for.\n\n- We’re using MongoDB for our data store, so we’ll use **Mongoose** to map our models (JavaScript objects) to MongoDB documents.\n- **Faker** will help us generate fake data for our app, since we just want to demonstrate the likes feature.\n- We need **pusher** to talk to Pusher’s APIs.\n- Lastly, **dotenv** is a small package that helps us load our private configuration variables (like our Pusher app credentials) from a `.env` file.\n\nFirst, let’s define our data structures. We’ll limit the scope of this demo to two entities: **users** and **posts**. For users. we’ll store only their names. For posts, we’ll store:\n\n- the text\n- the date it was posted\n- the user who posted it (the author), and \n- the number of likes it has received\n\nSince the only detail we need about our users is their names, we won’t set up a User model; we’ll reference the user’s name directly from our Post model. So, let’s create a file, `models/post.js`:\n\n```\n    let mongoose = require('mongoose');\n    \n    let Post = mongoose.model('Post', {\n        text: String,\n        posted_at: Date,\n        likes_count: Number,\n        author: String\n    });\n    \n    module.exports = Post;\n```\n\nNow, we’ll write a small script to get some fake data into our database. Create a file called `seed.js` in the `bin` directory, with the following contents:\n\n```\n    #!/usr/bin/env node\n    \n    let faker = require('faker');\n    let Post = require('../models/post');\n    \n    // connect to MongoDB\n    require('mongoose').connect('mongodb://localhost/poster');\n    \n    // remove all data from the collection first\n    Post.remove({})\n        .then(() =\u003e {\n            let posts = [];\n            for (let i = 0; i \u003c 30; i++) {\n                posts.push({\n                    text: faker.lorem.sentence(),\n                    posted_at: faker.date.past(),\n                    likes_count: Math.round(Math.random() * 20),\n                    author: faker.name.findName()\n                });\n            }\n            return Post.create(posts);\n        })\n        .then(() =\u003e {\n            process.exit();\n        })\n        .catch((e) =\u003e {\n            console.log(e);\n            process.exit(1);\n        });\n```\n\nRun the seed using `node` (remember to start your MongoDB server by running `sudo mongod` first):\n\n```\n    node bin/seed.js\n```\n\nLet’s set up the route and view for our home page.\nThe first thing we’ll do is add our MongoDB connection setup to our `app.js`, so the connection gets created when our app gets booted. \n\n```\n    // below this line:\n    var app = express();\n    \n    // add this\n    require('mongoose').connect('mongodb://localhost/poster');\n```\n\nNext up, the route where we retrieve all posts from the db and pass them to the view. Replace the code in `routes/index.js` with this:\n\n```\n    let router = require('express').Router();\n    \n    let Post = require('./../models/post');\n    \n    router.get('/', (req, res, next) =\u003e {\n        Post.find().exec((err, posts) =\u003e {\n            res.render('index', { posts: posts });\n        });\n    \n    });\n    \n    module.exports = router;\n```\n\nLastly, the view where we render the posts. We’ll use Bootstrap for some quick styling.\n\n```\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"/\u003e\n    \u003c/head\u003e\n    \n    \u003cbody\u003e\n    \n    \u003cdiv class=\"container-fluid text-center\"\u003e\n    \n        {{#each posts }}\n            \u003cdiv class=\"jumbotron\"\u003e\n                \u003cdiv\u003eby\n                    \u003cb\u003e{{ this.author.name  }}\u003c/b\u003e\n                    on\n                    \u003csmall\u003e{{ this.posted_at }}\u003c/small\u003e\n                \u003c/div\u003e\n    \n                \u003cdiv\u003e\n                    \u003cp\u003e{{ this.text }}\u003c/p\u003e\n                \u003c/div\u003e\n    \n                \u003cdiv class=\"row\"\u003e\n                    \u003cbutton onclick=\"actOnPost(event);\"\n                            data-post-id=\"{{ this.id }}\"\u003eLike\n                    \u003c/button\u003e\n                    \u003cspan id=\"likes-count-{{ this.id }}\"\u003e{{ this.likes_count }}\u003c/span\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        {{/each}}\n    \n    \u003c/div\u003e\n    \n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nA few notes:\n\n- We attach a **data-post-id** attribute to each Like button so we can easily identify which post it points to.\n- We  give each `likes_count` field an `id` which includes the post ID, so we can directly reference the correct `likes_count` with just the post ID.\n- We have a click handler on the Like button (`actOnPost`) . This is where we’ll toggle the button text (Like → Unlike) and increment the `likes_count`. (And the reverse for when it’s an Unlike button). We’ll implement that in a bit.\n\n## Liking and unliking logic\n\nWhen a user clicks on 'Like', here’s what we want to happen:\n\n1. The text on the button changes from \"Like\" to \"Unlike\".\n2. The likes count displayed next to the post increases by 1.\n3. An AJAX request is made to the server to increment the `likes_count` in the database by 1.\n4. The likes count displayed next to the post increases by 1 in all other tabs/windows where the page is open. (This is where Pusher comes in.)\n\nFor unliking:\n\n1. The text on the button changes from \"Unlike\" to \"Like\".\n2. The likes count displayed next to the post decreases by 1.\n3. An AJAX request is made to the server to decrement the `likes_count` in the database by 1.\n4. The likes count displayed next to the post decreases by 1 in all other tabs/windows where the page is open. (Once again, via Pusher.)\n\nWe’ll classify both Likes and Unlikes as **actions** that can be carried out on a post, so we can handle them together.\n\nLet’s add some JavaScript to our home page for the `actOnPost` method. We’ll pull in [Axios](https://github.com/axios/axios) for easy HTTP requests.\n\n```\n    \u003c!-- in index.hbs --\u003e\n    \u003cscript src=\"https://unpkg.com/axios/dist/axios.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n        var updatePostStats = {\n            Like: function (postId) {\n                document.querySelector('#likes-count-' + postId).textContent++;\n            },\n            Unlike: function(postId) {\n                document.querySelector('#likes-count-' + postId).textContent--;\n            }\n        };\n    \n        var toggleButtonText = {\n            Like: function(button) {\n                button.textContent = \"Unlike\";\n            },\n            Unlike: function(button) {\n                button.textContent = \"Like\";\n            }\n        };\n    \n        var actOnPost = function (event) {\n            var postId = event.target.dataset.postId;\n            var action = event.target.textContent.trim();\n            toggleButtonText[action](event.target);\n            updatePostStats[action](postId);\n            axios.post('/posts/' + postId + '/act', { action: action });\n        };\n    \u003c/script\u003e\n```\n\nThen we define the **act** route. We’ll add it in our `routes/index.js`:\n\n```\n    router.post('/posts/:id/act', (req, res, next) =\u003e {\n        const action = req.body.action;\n        const counter = action === 'Like' ? 1 : -1;\n        Post.update({_id: req.params.id}, {$inc: {likes_count: counter}}, {}, (err, numberAffected) =\u003e {\n            res.send('');\n        });\n    });\n```\n\nHere, we change the `likes_count` using MongoDB’s built-in `$inc` operator for update operations.\n\n\n## Notifying other clients with Pusher\n\nAt this point, we’ve got our regular Liking and Unliking feature in place. Now it’s time to notify other clients when such an action happens. \nLet’s get our Pusher integration set up.  [Create a free Pusher account](https://pusher.com/signup) if you don’t have one already. Then visit [your dashboard](http://dashboard.pusher.com) and create a new app and take note of your app’s credentials. Since we’re using the `dotenv` package, we can put our Pusher credentials in a `.env` file in the root directory of our project:\n\n```\n    PUSHER_APP_ID=WWWWWWWWW\n    PUSHER_APP_KEY=XXXXXXXXX\n    PUSHER_APP_SECRET=YYYYYYYY\n    PUSHER_APP_CLUSTER=ZZZZZZZZ\n```\n\nReplace the stubs above with your app credentials from your Pusher dashboard. Then add the following line to the top of your `app.js`:\n\n``` language-javascript\n    require('dotenv').config();\n```\n\nNext we’ll modify our route handler to trigger a Pusher message whenever an action updates the `likes_count` in the database. We’ll initialise an instance of the Pusher client and use it to send a message by calling `pusher.trigger`. \nThe `trigger` method takes four parameters:\n\n- the name of the **channel** to send this message on\n- the name of the **message**\n- the **payload** (any data you wish to send with the message) \n- the **socket ID**. If this is supplied, Pusher will send this message to every client except the client with this ID. This is useful so we can exclude the client who caused the action from being notified of it again.\n\nHere’s what we want our payload to look like in the case of a `Like` action:\n\n```\n    {\n      \"action\": \"Like\",\n      \"postId\": 1234\n    }\n```\n\nSo let’s add this logic to our route handler:\n\n```\n    let Pusher = require('pusher');\n    let pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER\n    });\n    \n    router.post('/posts/:id/act', (req, res, next) =\u003e {\n        const action = req.body.action;\n        const counter = action === 'Like' ? 1 : -1;\n        Post.update({_id: req.params.id}, {$inc: {likes_count: counter}}, {}, (err, numberAffected) =\u003e {\n            pusher.trigger('post-events', 'postAction', { action: action, postId: req.params.id }, req.body.socketId);\n            res.send('');\n        });\n    });\n```\n\nOn the client side (`index.hbs`) we need to handle two things:\n\n- subscribe each client to the `post-events` channel\n- .add the client’s socket ID to our `act` API request, so the server can use it to exclude the client\n\nWe’ll pull in the Pusher SDK\n\n```\n    \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n    \n    \u003cscript\u003e\n        var pusher = new Pusher('your-app-id', {\n            cluster: 'your-app-cluster'\n        });\n        var socketId;\n    \n        // retrieve the socket ID on successful connection\n        pusher.connection.bind('connected', function() {\n            socketId = pusher.connection.socket_id;\n        });\n    \n    \n        var channel = pusher.subscribe('post-events');\n        channel.bind('postAction', function(data) {\n            // log message data to console - for debugging purposes\n            console.log(data);\n            var action = data.action;\n            updatePostStats[action](data.postId);\n        });\n    \u003c/script\u003e\n```\n\nAll done! Start your app by running:\n\n```\n    npm start\n```\n\nNow, if you open up http://localhost:3000 in two (or more) tabs in your browser, you should see that liking a post in one instantly reflects in the other. Also, because of our `console.log` statement placed earlier, you’ll see the event is logged:\n\n![realtime-likes-nodejs-console](//images.contentful.com/1es3ne0caaid/262xM0ZuzCuaCYe04SA4y8/0cd712b39dc85fc61547093d90731828/realtime-likes-nodejs-console.png)\n\n## Conclusion\n\nIn this article, we’ve seen how Pusher’s publish-subscribe messaging system makes it straightforward to implement a realtime view of activity on a particular post. Of course, this is just a starting point; we look forward to seeing all the great things you’ll build.","metaTitle":"Build realtime likes with Node.js","metaDescription":"Create a rich social features in your app like realtime likes using Node.js and MongoDB."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"rfQj5WSTm0Ayc4UIaw8sg","type":"Entry","createdAt":"2018-02-28T11:50:49.045Z","updatedAt":"2018-02-28T11:50:49.045Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build realtime likes with Laravel","url":"realtime-likes-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3j821hA7aMgOiUEaO4Q8y6","type":"Entry","createdAt":"2018-02-26T19:00:03.819Z","updatedAt":"2018-03-20T12:22:11.602Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Shalvah Adebayo","url":"shalvah-adebayo","email":"shalvah.adebayo@gmail.com","twitter":"https://twitter.com/theshalvah","github":"https://shalvah.me/","guestWriter":true}}],"projectRepo":"https://github.com/shalvah/chirper","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-11-30","description":"Learn how to build live social interactions like realtime likes using Laravel, a popular PHP framework.","prerequisite":"A basic understanding of Laravel is needed to follow this tutorial.","content":"In June 2017, Twitter updated their web and Android apps with an interesting feature: realtime tweet statistics. In case you’re not familiar with Twitter, it simply means that you get to see the number of Likes or Retweets of a tweet increase (or decrease) as people around the world like or retweet it, without having to refresh the page. \n\nIn this article, I’ll be demonstrating how to build your very own realtime likes count on the web using Laravel and Pusher. Here’s how our app will work when we’re done:\n\n![realtime-likes-laravel-demo](//images.contentful.com/1es3ne0caaid/6NMF7Kjf1KkEi0OOkAssUC/7110ea0706b745cd9d78649fc6293002/realtime-likes-laravel-demo.gif)\n\nWe’ll build a very simple app (which I’ll unimaginatively call Chirper) and stuff it with some fake data so we can get moving fast. On the home page of our app, users will see all chirps with the most recent ones first, and they can click a button to Like or Unlike them. Whenever a user likes or unlikes a chirp, the likes count displayed next to the chirp should increment or decrement in every other browser where the page is open.\n\n## Setup the project\n\nI’ll be using Laravel 5.4 in this post, but the techniques here should work for any version of Laravel 5.3 or above:\n\n```\n    composer create-project laravel/laravel=5.4.* chirper\n```\n\nThen set your app details in your .env file:\n\n```\n    APP_NAME=Chirper\n    DB_DATABASE=chirper\n```\n\nRemember to set your `DB_USERNAME` and `DB_PASSWORD` as appropriate for your machine, and to  create a database named “Chirper”.\n\nNext, we'll set up our data structures. To keep things simple, our app will have just two main entities: **users** and **chirps**. Since Laravel already provides us with a User model and migration, we just need to set up the Chirp model and migration.\n\n```\n    php artisan make:model Chirp -m\n```\n\nFor chirps, we'll store:\n\n- the text\n- the date it was posted\n- the user who posted it, and \n- the number of likes it has received\n\nSo we edit the `up` method in the migration file generated by the above command to look like this:\n\n```\n    public function up()\n    {\n        Schema::create('chirps', function (Blueprint $table) {\n            $table-\u003eincrements('id');\n            $table-\u003estring('text');\n            $table-\u003eunsignedInteger('user_id');\n            $table-\u003einteger('likes_count')-\u003edefault(0);\n            $table-\u003etimestamp('posted_at');\n    \n            $table-\u003eforeign('user_id')-\u003ereferences('id')-\u003eon('users');\n        });\n    }\n```\n\nLet's open up our Chirp model and make some changes to it. First, we have to tell Laravel that this model doesn't use the regular timestamps (`created_at` and `updated_at`). Then we need to allow its attributes to all be assigned in one go. Lastly, we'll add an accessor so we can easily retrieve the details of the User who posted the chirp.\n\n```\n    \n    class Chirp extends Model\n    {\n        public $timestamps = false;\n    \n        protected $guarded = [];\n    \n        public function author()\n        {\n            return $this-\u003ebelongsTo(User::class, 'user_id', 'id');\n        }\n    }\n```\n\nNext, we’ll write a seed to generate some fake users and their chirps for our app. If you open up the file `database/factories/ModelFactory.php`, you'll notice that Laravel already provides us with a seeder for Users. Let's add one for Chirps:\n\n```\n    $factory-\u003edefine(App\\Chirp::class, function (Faker\\Generator $faker) {\n    \n        return [\n            'text' =\u003e $faker-\u003esentence(),\n            'likes_count' =\u003e $faker-\u003erandomDigitNotNull,\n            'posted_at' =\u003e $faker-\u003edateTimeThisYear(),\n            'user_id' =\u003e random_int(1, 10)\n        ];\n    });\n```  \n\nAnd then we call the factory functions in our `database/seeds/DatabaseSeeder.php`:\n\n```\n    \u003c?php\n    \n    use App\\Chirp;\n    use App\\User;\n    use Illuminate\\Database\\Seeder;\n    \n    class DatabaseSeeder extends Seeder\n    {\n        public function run()\n        {\n            factory(User::class, 10)-\u003ecreate();\n            factory(Chirp::class, 30)-\u003ecreate();\n        }\n    }\n```\n\nNow, if we run \n\n```\n    php artisan migrate --seed\n```\n\nWe should see our database tables have been created and filled with fake data.\n*Note: if you run into this error \"Specified key was too long; max key length is 767 bytes \" when you run migrations, follow* [*these instructions*](https://laravel-news.com/laravel-5-4-key-too-long-error) *to fix it.*\n\n\n## Setup the views\n\nNext, we'll run the command:\n\n```\n    php artisan make:auth\n```\n\nWe won't be using any auth features, but we'll run this because it also saves us time by setting up some frontend templates and JavaScript for us.\n\nLet's set up our home routes and view.\n\nFirst, replace the home route in your `routes/web.php` with our home route:\n\n```\n    Route::get('/', 'HomeController@index');\n```\n\nThen in `app/Controllers/HomeController.php`, we'll implement the `index` method. (Don't forget to remove the `auth` middleware in the constructor):\n\n```\n    public function index()\n    {\n        $chirps = Chirp::with('author')\n            -\u003eorderBy('posted_at', 'desc')\n            -\u003eget();\n        return view('home', ['chirps' =\u003e $chirps]);\n    }\n```\n\nIn this method we simply retrieve all chirps along with their author details and pass them to the view to render. \n\nLastly, we set up the view, a simple UI that displays a list of chirps, with the author name, time posted and a Like button below it next to the number of likes the chirp has.\n\nWe’ll add a few attributes to some elements, though:\n\n- an **`onclick`**handler for each `Like` button.\n- a **`data-chirp-id`** on each button so we can identify which chirp the button references.\n- an **`id`** on each `likes_count` which includes the chirp’s id so we can easily locate it via `document.querySelector`.\n\n```\n    @extends('layouts.app')\n    \n    @section('content')\n        \u003cdiv class=\"container-fluid text-center\"\u003e\n    \n            @foreach($chirps as $chirp)\n            \u003cdiv class=\"jumbotro\"\u003e\n                \u003cdiv\u003eby\n                    \u003cb\u003e{{ $chirp-\u003eauthor-\u003ename  }}\u003c/b\u003e\n                    on\n                    \u003csmall\u003e{{ $chirp-\u003eposted_at }}\u003c/small\u003e\n                \u003c/div\u003e\n    \n                \u003cdiv\u003e\n                    \u003cp\u003e{{ $chirp-\u003etext }}\u003c/p\u003e\n                \u003c/div\u003e\n    \n                \u003cdiv class=\"row\"\u003e\n                    \u003cbutton onclick=\"actOnChirp(event);\" data-chirp-id=\"{{ $chirp-\u003eid }}\"\u003eLike\u003c/button\u003e\n                    \u003cspan id=\"likes-count-{{ $chirp-\u003eid }}\"\u003e{{ $chirp-\u003elikes_count }}\u003c/span\u003e\n                \u003c/div\u003e\n    \n    \n            \u003c/div\u003e\n                @endforeach\n        \u003c/div\u003e\n    @endsection\n```\n\nLet’s start our app to be sure everything’s fine thus far:\n \n```\n    php artisan serve\n```\n\nNow visit your homepage at http://localhost:8000 and you should see all the chirps displayed neatly. \n\n![realtime-likes-laravel-homepage](//images.contentful.com/1es3ne0caaid/183bOD4yKIeWUIIwUEEC2m/86322dc4fdb82799c4e02d7b793b0529/realtime-likes-laravel-homepage.png)\n\n## Implement the like logic\n\nNow we'll implement the logic for liking and unliking a chirp.\n\nFirst of all, we'll take a look at our frontend. When a user clicks on 'Like', we want a couple of things to happen:\n\n\n1. The text on the button changes from `Like` to `Unlike`.\n2. The likes count displayed next to the chirp increases by 1.\n3. An AJAX request is made to the server to increment the likes_count in the database by 1.\n4. The likes count displayed next to the chirp increases by 1 in all other tabs/windows where the page is open. (This is where Pusher comes in.)\n\nSimilarly, for \"unliking\":\n\n\n1. The text on the button changes from `Unlike` to `Like`.\n2. The likes count displayed next to the chirp decreases by 1.\n3. An AJAX request is made to the server to decrement the likes_count in the database by 1.\n4. The likes count displayed next to the chirp decreases by 1 in all other tabs/windows where the page is open. (Again, the Pusher magic.)\n\nIn order for us to easily manage these two types of events, we'll introduce the concept of **chirp actions**. For our basic use case here, we'll just have two types of actions: Like and Unlike. Both actions will go to the same endpoint, where the server will do the database update and return a 200 OK response. Let's define a route for that:\n\n```\n    Route::post('/chirps/{id}/act', 'HomeController@actOnChirp');\n```\n\nThe Like button should make a request of this form:\n\n```\n    {\n      \"action\": \"Like\"\n    }\n```\n\nIn the case of unlikes, the action will be \"Unlike\". In our controller, we retrieve the action value and increment or decrement as needed. We'll use the same HomeController to keep things simple:\n\n```\n    public function actOnChirp(Request $request, $id)\n    {\n        $action = $request-\u003eget('action');\n        switch ($action) {\n            case 'Like':\n                Chirp::where('id', $id)-\u003eincrement('likes_count');\n                break;\n            case 'Unlike':\n                Chirp::where('id', $id)-\u003edecrement('likes_count');\n                break;\n        }\n        return '';\n    }\n```\n\nNow let's implement the JavaScript for liking/unliking. Because the code isn't much, we'll add it directly to the \"content\" section of our home.blade.php:\n\nIn your base layout (`layouts/app.blade.php`), add a section for scripts after the script tag that includes `app.js` (so it gets run after Echo and Axios have been initialized):\n\n```\n    \u003cscript src=\"{{ asset('js/app.js') }}\"\u003e\u003c/script\u003e\n    @yield('js')\n```\n\nWe'll inject our page's JavaScript into that section in our home.blade.php\n\n```\n    @section('js')\n    \u003cscript\u003e\n        var updateChirpStats = {\n            Like: function (chirpId) {\n                document.querySelector('#likes-count-' + chirpId).textContent++;\n            },\n    \n            Unlike: function(chirpId) {\n                document.querySelector('#likes-count-' + chirpId).textContent--;\n            }\n        };\n    \n    \n        var toggleButtonText = {\n            Like: function(button) {\n                button.textContent = \"Unlike\";\n            },\n    \n            Unlike: function(button) {\n                button.textContent = \"Like\";\n            }\n        };\n    \n        var actOnChirp = function (event) {\n            var chirpId = event.target.dataset.chirpId;\n            var action = event.target.textContent;\n            toggleButtonText[action](event.target);\n            updateChirpStats[action](chirpId);\n            axios.post('/chirps/' + chirpId + '/act',\n                { action: action });\n        };\n    \n    \u003c/script\u003e\n    @endsection\n```\n\nFirst, we have two objects containing two methods each, corresponding to the two possible actions. The names of the methods are capitalised so we can easily call them via the text on the button.\n\nThe first object contains methods to update the likes count displayed below the chirp, while the second contains methods to change the text on the button. We've separated these two functionalities because of our criteria no. 4 above: for a different user viewing this page at the same time, only the likes count should update; the text on the button shouldn't change.\n\nWe attach an `onclick` handler (`actOnChirp`) to each chirp like button as they are rendered. In this method, we perform the desired actions: change the button text, update the likes count and send the action to the server using [Axios](https://github.com/axios/axios), which comes bundled with Laravel.\n\nAt this point, visiting the home page and clicking the Like button for a chirp works as expected. All good so far.\n\n\n## Broadcast the event with Pusher\n\nWe need to do one more thing when a chirp is liked or unliked is to ensure the likes count shown in every browser on that page shows the newly updated value. We'll do this by broadcasting a new event whenever a chirp is acted on. Pusher gives us the means to do this with their messaging system, and Laravel provides an events and broadcasting system that supports Pusher out of the box.\n\nFirst, let's create the event class:\n\n```\n    php artisan make:event ChirpAction\n```\n\nFor the browser to update the likes count on the UI accordingly, it needs to know two things:\n\n- which chirp was acted on\n- what kind of action\n\nWe need to send this data along with this event when broadcasting it, so let's open up the generated `app/Events/ChirpAction.php` and add those two. Our class should look something like this:\n\n```\n    \u003c?php\n    \n    namespace App\\Events;\n    \n    use Illuminate\\Queue\\SerializesModels;\n    use Illuminate\\Foundation\\Events\\Dispatchable;\n    use Illuminate\\Broadcasting\\InteractsWithSockets;\n    \n    class ChirpAction\n    {\n        use Dispatchable, InteractsWithSockets, SerializesModels;\n    \n        public $chirpId;\n        public $action;\n    \n        public function __construct($chirpId, $action)\n        {\n            $this-\u003echirpId = $chirpId;\n            $this-\u003eaction = $action;\n        }\n    }\n``` \n\nAnd now we need to fire this event whenever a new chirp action occurs. So we edit our `HomeController`'s `actOnChirp` method to include this:\n\n```\n    public function actOnChirp(Request $request, $id)\n    {\n        $action = $request-\u003eget('action');\n        switch ($action) {\n            case 'Like':\n                Chirp::where('id', $id)-\u003eincrement('likes_count');\n                break;\n            case 'Unlike':\n                Chirp::where('id', $id)-\u003edecrement('likes_count');\n                break;\n        }\n        event(new ChirpAction($id, $action)); // fire the event\n        return '';\n    }\n```\n\nAt this point, whenever a chirp is liked or unliked, the event will be fired. But it's only local to the server, so let's fix that by implementing broadcasting to other clients.\n\n[Create a free Pusher account](https://pusher.com/signup) if you don’t have one already. Then visit [your dashboard](http://dashboard.pusher.com) and create a new app, taking note of your app’s credentials. We’ll need them in a bit.\n\nLet’s set things up on the frontend. We'll use Laravel Echo to listen for and respond to broadcasts via Pusher.\n\nFirst install the needed dependencies:\n\n```\n    npm install --save laravel-echo pusher-js\n```\n\nIn your `resources/assets/bootstrap.js`, uncomment/add these lines:\n\n```\n    import Echo from 'laravel-echo'\n    \n    window.Pusher = require('pusher-js');\n    \n    window.Echo = new Echo({\n        broadcaster: 'pusher',\n        key: 'your-pusher-key',\n        cluster: 'your-app-cluster'\n    });\n``` \n\nReplace `your-pusher-key` and `your-app-cluster` with your app's Pusher key and cluster as seen in your Pusher dashboard.\nIn the script section of our `home.blade.php`, we'll tell Echo to listen for chirp actions and update the chirp's likes counts accordingly:\n\n```\n    Echo.channel('chirp-events')\n        .listen('ChirpAction', function (event) {\n            console.log(event);\n            var action = event.action;\n            updateChirpStats[action](event.chirpId);\n        })\n```\n\nI've named my channel 'chirp-events', but you can use anything you like. The event variable passed to the function will contain the properties we defined earlier on our `ChirpAction` event (`action` and `chirpId`), so we can simply access them and update the UI for the corresponding chirp.\n\nWe're logging the event data to our console, just for debugging purposes, so we can see what's going on.\n\nThen we install all our dependencies and compile our frontend assets so our updates to `bootstrap.js` show up:\n\n```\n    npm install \u0026\u0026 npm run dev\n```\n\nNow, let's set up Echo and Pusher on the server. First, we'll install the Pusher library:\n\n```\n    composer require pusher/pusher-php-server\n```\n\nNext, we'll configure our server to use broadcasting via Pusher. Add this to the `aliases` array of your `config/app.php`:\n\n```\n    'Pusher' =\u003e Pusher\\Pusher::class\n```\n\nAlso uncomment this line from the `providers` array to enable broadcasting:\n\n```\n    App\\Providers\\BroadcastServiceProvider::class,\n```\n\nLet's configure our broadcasting and Pusher settings. Laravel already comes with a `config/broadcasting.php` for this which pulls values from the `.env` file, so open up the `.env` file and edit it:\n\n```\n    BROADCAST_DRIVER=pusher\n    \n    PUSHER_APP_ID=XXXXXXXXX\n    PUSHER_APP_KEY=YYYYYYYY\n    PUSHER_APP_SECRET=ZZZZZZZZ\n```\n\nReplace the stubs above with your app credentials from your Pusher dashboard.\n\nLastly, add your cluster in the `options` array of `config/broadcasting.``php`.\n\nAfter making these changes, you might need to run `php artisan config:cache` so your changes get persisted from the `.env` to the config files.\n\nTo enable broadcasting of our event, we'll make it implement the `ShouldBroadcastNow` interface. (Normally, we would use the `ShouldBroadcast` interface, but then we would need to setup and configure queues. Using `ShouldBroadcastNow` forces the event to be dispatched immediately.)\n\nWe'll also implement a `broadcastOn` method that returns the channel (or channels) we want our event to be broadcast on. We'll use the same channel name we used on the frontend.\n\nAt this point, our event class looks like this:\n\n```\n    namespace App\\Events;\n    \n    use Illuminate\\Broadcasting\\Channel;\n    use Illuminate\\Queue\\SerializesModels;\n    use Illuminate\\Foundation\\Events\\Dispatchable;\n    use Illuminate\\Broadcasting\\InteractsWithSockets;\n    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcastNow;\n    \n    class ChirpAction implements ShouldBroadcastNow\n    {\n        use Dispatchable, InteractsWithSockets, SerializesModels;\n    \n        public $chirpId;\n        public $action;\n    \n        public function __construct($chirpId, $action)\n        {\n            $this-\u003echirpId = $chirpId;\n            $this-\u003eaction = $action;\n        }\n        \n        public function broadcastOn()\n        {\n            return new Channel('chirp-events');\n        }\n    }\n```\n\nOkay, we're all set! Open up the homepage of your app in two different tabs and try Liking and Unliking from the different windows. You should see the events get logged to your browser console like this:\n\n![realtime-likes-laravel-console](//images.contentful.com/1es3ne0caaid/6j6Fi0tQHumWq6UYci0iI/e696f4284bba95a306fdb819542551b3/realtime-likes-laravel-console.png)\n\n*Note: If you find an error logged to your console about the WebSocket connection being closed instead, try restarting your browser.*\n\n## Exclude the sender\n\nYou might have noticed that we have a small problem: when you click \"Like\" or \"Unlike\", the count increases or decreases by two, not one. This happens because the event is currently being broadcast to everyone, **including** the tab that sent it. So the first increase is due to the button click, and the second is due to the received message. We need to find a way of excluding the sender of the message from receiving it too. Luckily, we can do that easily with Laravel, by changing one line of code in our `HomeController`'s `actOnChirp` method:\n\n```\n    // replace this...\n    event(new ChirpAction($id, $action));\n    \n    // with this...\n    broadcast(new ChirpAction($id, $action))-\u003etoOthers();\n``` \n\nAnd now, if you Like or Unlike a chirp, you should see it shows up in the other window(s) and increments only by 1 on this window.\nHere's what actually goes on here:\n\n- Pusher provides each connected tab with an identifier called the socket ID. Whenever a Pusher message is sent containing this id, Pusher knows not to send the message to whichever tab owns that ID.\n- Laravel Echo automatically attaches this socket ID to the request sent by Axios as a header, `X-Socket-Id`. You can view it by running `Echo.socketId()` in your console.\n- By using the `broadcast...toOthers` combo, we're letting Laravel know that it should include the socket ID in its message data, so Pusher can exclude that tab. That's all there is to it.\n\n\n## Conclusion\n\nThis is just a proof-of-concept to demonstrate how this could be implemented with event broadcasting via Pusher. There are a lot more complex use cases available, so here's your chance to get started building more powerful things with Pusher and Laravel. Let us know what you build in the comments.","metaTitle":"Build realtime likes with Laravel","metaDescription":"In this tutorial, we will cover how to build important social network features namely realtime likes using Laravel."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4vrGYiV7WUOEyYI6WEQ8AC","type":"Entry","createdAt":"2018-02-28T13:08:28.413Z","updatedAt":"2018-02-28T23:44:17.266Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a design feedback app using Vue.js","url":"design-feedback-vuejs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/Design-Prototype-Feedback-Application","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Od9rZziIoMG4yaQ4EAeok","type":"Entry","createdAt":"2018-02-13T11:31:10.435Z","updatedAt":"2018-02-26T12:31:10.730Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":16,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live UX","url":"live-ux","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}}],"reviewDate":"2017-11-29","description":"In this tutorial, we are going to create a realtime design feedback application with Vue.js and Laravel.","prerequisite":"A basic understanding of Laravel and Vue.js is needed to follow this tutorial.","content":"Companies like Invision have built applications that designers use to get feedback from other people. A designer can just load the Invision application, upload their designs and send the link to the people that will leave feedback, and then they can leave their feedback on different parts of the design. This is good for the designer because they can see this feedback and act on them. \n\nIn this article, we are going to create a design feedback application. This will allow you to upload images, then send the link to someone else to leave feedback on your design that you can see in realtime.\n\nHere is a screen recording of what our application will be able to do once we are done building it:\n\n![design-feedback-vuejs-demo](//images.contentful.com/1es3ne0caaid/4lFe4YII6IyeiC48wyogQK/cd6ac36e8733b291b71a74e9b66f6922/design-feedback-vuejs-demo.gif)\n\n## Requirements we will need to build our application\n\nBefore we get started we need to have a few things in place first. Some of the requirements are as follows:\n- Knowledge of PHP \u0026 the [Laravel](https://laravel.com) framework.\n- Knowledge of JavaScript (ES6).\n- Knowledge of Vue.js.\n- PHP 7.0+ installed locally on your machine.\n- [Laravel CLI](https://laravel.com/docs/5.5/installation#installing-laravel) installed locally.\n- [Composer](https://getcomposer.org/doc/00-intro.md#installation-linux-unix-osx) installed locally.\n- [NPM](https://docs.npmjs.com/cli/install) and Node.js installed locally.\n- A Pusher application. Create one on [pusher.com](https://pusher.com).\n\nOnce you have verified you have the above requirements we can start creating our application.\n\n\n## Setting up our prototype feedback application\n\nLet us get started with setting up our application. Create a new Laravel application using the command below:\n\n```\n    $ laravel new your_application_name\n```\nWhen the installation is complete, `cd` to the application directory. Open the `.env` file and let us make a couple of changes in the file. \n\n### Setting up our database and migrations\nThe first thing to do is set up our database and create its migrations. Let us start by setting up the database. Replace the configuration items below:\n\n```\n    DB_CONNECTION=mysql\n    DB_HOST=127.0.0.1\n    DB_PORT=3306\n    DB_DATABASE=homestead\n    DB_USERNAME=homestead\n    DB_PASSWORD=secret\n```\n\nwith:\n\n```\n    DB_CONNECTION=sqlite\n```\n\nThis will now make the application use SQLite as the database choice. In your terminal, run the command below to create a new SQLite database:\n\n```\n    $ touch database/database.sqlite\n```\n\nNow let us create some migrations which will create the required tables to the database. In your terminal, run the following command to create the migrations we will need:\n\n```\n    $ php artisan make:model Photo --migration --controller\n    $ php artisan make:model PhotoComment --migration\n```\n\nThe above command will create a model and then the `--migration` and `--controller` flags will instruct it to create a migration and a controller alongside the model.\n\nFor now, we are interested in the Model and the migration. Open the two migration files created in the `./database/migrations` directory. Let us first edit the `CreatePhotosTable` class. Replace the content of the `up` method with the following below:\n\n```\n    public function up()\n    {\n        Schema::create('photos', function (Blueprint $table) {\n            $table-\u003eincrements('id');\n            $table-\u003estring('url')-\u003eunique();\n            $table-\u003estring('image')-\u003eunique();\n            $table-\u003etimestamps();\n        });\n    }\n```\n\nThis will create the `photos` table when the migrations are run using the artisan command. It will also create new columns inside the table as specified above.\n\nOpen the second migration class, `CreatePhotoCommentsTable`, and replace the `up` method with the contents below:\n\n```\n    public function up()\n    {\n        Schema::create('photo_comments', function (Blueprint $table) {\n            $table-\u003eincrements('id');\n            $table-\u003eunsignedInteger('photo_id');\n            $table-\u003etext('comment');\n            $table-\u003einteger('top')-\u003edefault(0);\n            $table-\u003einteger('left')-\u003edefault(0);\n            $table-\u003etimestamps();\n            \n            $table-\u003eforeign('photo_id')-\u003ereferences('id')-\u003eon('photos');\n        });\n    }\n```\n\nThis will create the table `photo_comments` when the migration is run and also will create a foreign key to the `photos` table.\n\nNow go to your terminal and run the command below to run the migrations:\n\n```\n    $ php artisan migrate\n```\n\nThis should now create the database tables.\n\n### Setting up the models\nNow that we have run our migrations, we need to make some changes to our model file so that it can work better with the table. \n\nOpen the `Photo` model and replace the contents with the following:\n\n```\n    \u003c?php\n    namespace App;\n    \n    use Illuminate\\Database\\Eloquent\\Model;\n    \n    class Photo extends Model\n    {\n        protected $with = ['comments'];\n        \n        protected $fillable = ['url', 'image'];\n    \n        public function comments()\n        {\n            return $this-\u003ehasMany(PhotoComment::class);\n        }\n    }\n```\n\nIn the above, we have added the `fillable` property which stops us from having mass assignment exceptions when trying to update those columns using `Photo::create`. We also set the `with` property which just eager loads the `comments` relationship.\n\nWe have defined an Eloquent relationship `comments` that just says the `Photo` has many `PhotoComments`.\n\nOpen the `PhotoComment` model and replace the contents with the following:\n\n```\n    \u003c?php\n    namespace App;\n    \n    use Illuminate\\Database\\Eloquent\\Model;\n    \n    class PhotoComment extends Model\n    {\n        protected $fillable = ['photo_id', 'comment', 'top', 'left'];\n    \n        protected $appends = ['position'];\n    \n        public function getPositionAttribute()\n        {\n            return [\n                'top' =\u003e $this-\u003eattributes['top'], \n                'left' =\u003e $this-\u003eattributes['left']\n            ];\n        }\n    }\n```\n\nJust like the `Photo` model, we have defined the `fillable`  property. We also use [Eloquent accessors](https://laravel.com/docs/5.5/eloquent-mutators#accessors-and-mutators) to configure a new property called `position` which is then appended because we specified that in the `appends` property.\n\n### Setting up the frontend for our application\nThe next thing we want to do is set up the frontend of our application. Let us start by installing a few NPM packages that we will need in the application. In your Terminal app, run the command below to install the needed packages:\n\n```\n    $ npm install --save laravel-echo pusher-js vue2-dropzone@^2.0.0\n    $ npm install\n```\n\nThis will install [Laravel Echo](https://laravel.com/docs/5.5/broadcasting#installing-laravel-echo), the [Pusher JS SDK](https://github.com/pusher/pusher-js) and [vue-dropzone](https://github.com/rowanwins/vue-dropzone). We will need these packages to handle realtime events later.\n\nWhen the packages have been installed successfully, we can now start adding some HTML and JavaScript.\n\nOpen the `./routes/web.php` file and let’s add some routes. Replace the contents of the file with the contents below:\n\n``` php\n    \u003c?php\n    \n    Route::post('/feedback/{image_url}/comment', 'PhotoController@comment');\n    Route::get('/feedback/{image_url}', 'PhotoController@show');\n    Route::post('/upload', 'PhotoController@upload');\n    Route::view('/', 'welcome');\n```\n\nIn the code above, we have defined a few routes. The first one will be handling `POST`ed feedback. The second route will display the image that is to receive feedback. The third route will handle uploads and the final route will display the homepage.\n\nNow open the `./resources/views/welcome.blade.php` file and in there replace the contents with the following HTML code:\n\n``` html\n    \u003c!doctype html\u003e\n    \u003chtml lang=\"{{ app()-\u003egetLocale() }}\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003cmeta name=\"csrf-token\" content=\"{{csrf_token()}}\"\u003e\n        \u003ctitle\u003eUpload to get Feedback\u003c/title\u003e\n        \u003clink href=\"https://fonts.googleapis.com/css?family=Roboto:400,600\" rel=\"stylesheet\" type=\"text/css\"\u003e\n        \u003clink href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"{{ asset('css/app.css') }}\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv id=\"app\"\u003e\n            \u003cdiv class=\"flex-center position-ref full-height\"\u003e\n                \u003cdiv class=\"content\"\u003e\n                    \u003cuploadarea\u003e\u003c/uploadarea\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"js/app.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThis is a simple HTML document, and if you look closely, you will see a reference to an `uploadarea` tag which does not exist in HTML but is a Vue component.\n\nOpen the `./resources/assets/sass/app.scss` file and paste the following code below the import statements:\n\n```\n    html, body {\n        background-color: #fff;\n        color: #636b6f;\n        font-family: 'Roboto', sans-serif;\n        font-weight: 100;\n        height: 100vh;\n        margin: 0;\n    }\n    .full-height {\n        height: 100vh;\n    }\n    .flex-center {\n        align-items: center;\n        display: flex;\n        justify-content: center;\n    }\n    .position-ref {\n        position: relative;\n    }\n    .content {\n        text-align: center;\n    }\n    .m-b-md {\n        margin-bottom: 30px;\n    }\n    .dropzone.dz-clickable {\n        width: 100vw;\n        height: 100vh;\n        .dz-message {\n            span {\n                font-size: 19px;\n                font-weight: 600;\n            }\n        }\n    }\n    #canvas {\n        width: 90%;\n        margin: 0 auto;\n        img {\n            width: 100%;\n        }\n    }\n    .modal {\n      text-align: center;\n      padding: 0!important;\n      z-index: 9999;\n    }\n    .modal-backdrop.in {\n        opacity: 0.8;\n        filter: alpha(opacity=80);\n    }\n    .modal:before {\n      content: '';\n      display: inline-block;\n      height: 100%;\n      vertical-align: middle;\n      margin-right: -4px;\n    }\n    .modal-dialog {\n      display: inline-block;\n      text-align: left;\n      vertical-align: middle;\n    }\n    .image-hotspot {\n        position: relative;\n        \u003e img {\n            display: block;\n            height: auto;\n            transition: all .5s;\n        }\n    }\n    .hotspot-point {\n        z-index: 2;\n        position: absolute;\n        display: block;\n        span {\n            position: relative;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            width: 1.8em;\n            height: 1.8em;\n            background: #cf00f1;\n            border-radius: 50%;\n            animation: pulse 3s ease infinite;\n            transition: background .3s;\n            box-shadow: 0 2px 10px rgba(#000, .2);\n            \u0026:after {\n                content: attr(data-price);\n                position: absolute;\n                bottom: 130%;\n                left: 50%;\n                color: white;\n                text-shadow: 0 1px black;\n                font-weight: 600;\n                font-size: 1.2em;\n                opacity: 0;\n                transform: translate(-50%, 10%) scale(.5);\n                transition: all .25s;\n            }\n        }\n        svg {\n            opacity: 0;\n            color: #cf00f1;\n            font-size: 1.4em;\n            transition: opacity .2s;\n        }\n        \u0026:before,\n        \u0026:after  {\n            content: '';\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            border-radius: 50%;\n            pointer-events: none;\n        }\n        \u0026:before {\n            z-index: -1;\n            border: .15em solid rgba(#fff, .9);\n            opacity: 0;\n            transform: scale(2);\n            transition: transform .25s, opacity .2s;\n        }\n        \u0026:after {\n            z-index: -2;\n            background:#fff;\n            animation: wave 3s linear infinite;\n        }\n        \u0026:hover{\n            span {\n                animation: none;\n                background: #fff;\n                \u0026:after {\n                    opacity: 1;\n                    transform: translate(-50%, 0) scale(1);\n                }\n            }\n            svg {\n                opacity: 1;\n            }\n            \u0026:before {\n                opacity: 1;\n                transform: scale(1.5);\n                animation: borderColor 2s linear infinite;\n            }\n            \u0026:after {\n                animation: none;\n                opacity: 0;\n            }\n        }\n    }\n    @-webkit-keyframes pulse{\n        0%, 100% { transform: scale(1); }\n        50% { transform: scale(1.1); }\n    }\n    @keyframes pulse{\n        0%, 100% { transform: scale(1); }\n        50% { transform: scale(1.1); }\n    }\n    .popover {\n        min-width: 250px;\n    }\n```\n\nSave the file and exit. Now let’s move on to creating our Vue components.\n\n## Using Vue to create the functionalities of our prototype feedback app\n\nOpen the `./resources/assets/js/app.js` file and in there let us create our Vue component. In this file find the line below:\n\n```\n    Vue.component('example', require('./components/Example.vue'));\n```\n\nand replace it with:\n\n```\n    Vue.component('uploadarea', require('./components/UploadArea.vue'));\n    Vue.component('feedback', require('./components/FeedbackCanvas.vue'));\n```\n\nNow let us create our first Vue component. In the `./resources/assets/js/components` directory create a file called `UploadArea.vue`. In the new file paste in the following:\n\n```\n    \u003ctemplate\u003e\n        \u003cdropzone ref=\"dropzone\" id=\"dropzone\"\n                url=\"/upload\"\n                accepted-file-types=\"image/*\"\n                v-on:vdropzone-success=\"showImagePage\"\n                :headers=\"csrfHeader\"\n                class=\"flex-center position-ref full-height\"\u003e\n            \u003cinput type=\"hidden\" name=\"csrf-token\" :value=\"csrfToken\"\u003e\n        \u003c/dropzone\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    import Dropzone from 'vue2-dropzone';\n    \n    const LARAVEL_TOKEN = document.head.querySelector('meta[name=\"csrf-token\"]').content\n    \n    export default {\n        components: { Dropzone },\n        data() {\n            return {\n                csrfToken: LARAVEL_TOKEN,\n                csrfHeader: { 'X-CSRF-TOKEN': LARAVEL_TOKEN }\n            }\n        },\n        methods: {\n            showImagePage: (file, response) =\u003e {\n                if (response.url) {\n                    return window.location = `/feedback/${response.url}`;\n                }\n            }\n        },\n        mounted () {\n            this.$refs.dropzone.dropzone.on('addedfile', function (file) {\n                if (this.files.length \u003e 1) {\n                    this.removeFile(this.files[0])\n                }\n            })\n        }\n    }\n    \u003c/script\u003e\n```\n\nIn the `template` section, we are simply using the Vue dropzone package to define an area through which files can be uploaded. You can view the documentation [here](https://github.com/rowanwins/vue-dropzone).\n\nIn the `script` section, we get the Laravel CSRF token from the header of the page and import the `Dropzone` component into our current Vue component.\n\nIn the `methods` property, we define a `showImagePage` method that just redirects the user to the image page after the image has been successfully uploaded. In the `mounted` method, we limit the dropzone file to allowing one file upload at a time.\n\nLet us create our next Vue component. In the `./resources/assets/js/components` directory create a new file called `FeedbackCanvas.vue` and paste in the following:\n\n```\n    \u003ctemplate\u003e\n        \u003cdiv class=\"feedback-area\"\u003e\n            \u003cdiv class=\"content\"\u003e\n                \u003cdiv id=\"canvas\"\u003e\n                    \u003cdiv class=\"image-hotspot\" id=\"imghotspot\"\u003e\n                        \u003ctransition-group name=\"hotspots\"\u003e\n                          \u003ca\n                            href=\"#\"\n                            class=\"hotspot-point\"\n                            v-for=\"(comment, index) in image.comments\"\n                            v-bind:style=\"{ left: comment.position.left+'%', top: comment.position.top+'%' }\"\n                            :key=\"index\"\n                            @click.prevent\n                            data-placement=\"top\"\n                            data-toggle=\"popover\"\n                            :data-content=\"comment.comment\"\n                          \u003e\n                                \u003cspan\u003e\n                                    \u003csvg class=\"icon icon-close\" viewBox=\"0 0 24 24\"\u003e\n                                        \u003cpath d=\"M18.984 12.984h-6v6h-1.969v-6h-6v-1.969h6v-6h1.969v6h6v1.969z\"\u003e\u003c/path\u003e\n                                    \u003c/svg\u003e\n                                \u003c/span\u003e\n                          \u003c/a\u003e\n                        \u003c/transition-group\u003e\n                        \u003cimg ref=\"img\" :src=\"'/storage/'+image.image\" id=\"loaded-img\"  @click=\"addCommentPoint\"\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cadd-comment-modal :image=\"image\"\u003e\u003c/add-comment-modal\u003e\n        \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nWe have defined the `template` for our Vue component. This is the area where the image will be displayed and where feedback will be given.\n\nLet us break some parts of it down a little. The `a` tag has a bunch of attributes set to it. The `v-for`  loops through each comment/feedback the image has. \n\nThe `v-bind:style` applies a `style` attribute to the `a` tag using the `left` and `top` properties of the comment/feedback. We also have the `:data-content`, `data-toggle`  and `data-placement` which Bootstrap needs for its [Popovers](https://www.w3schools.com/bootstrap/bootstrap_popover.asp).\n\nThe `img` tag has the `@click` event that fires the function `addCommentPoint` when an area of the image is clicked. And finally, there’s a Vue component `add-comment-modal` that accepts a property `image`. This component will display a form so anyone can leave a comment.\n\nIn this same file, after the closing `template` tag, paste in the following code:\n\n```\n    \u003cscript\u003e\n        let AddCommentModal = require('./AddCommentModal.vue')\n        \n        export default {\n            props: ['photo'],\n            components: { AddCommentModal },\n            data() {\n                return { image: this.photo }\n            },\n            mounted() {\n                let vm = this\n                \n                Echo.channel(`feedback-${this.photo.id}`)\n                    .listen('.added', (e) =\u003e {\n                        // Look through the comments and if no comment matches the \n                        // existing comments, add it\n                        if (vm.image.comments.filter((comment) =\u003e comment.id === e.comment.id).length === 0) {\n                            vm.image.comments.push(e.comment)\n                            $(document).ready(() =\u003e $('[data-toggle=\"popover\"]').popover())\n                        }\n                    })\n            },\n            created() {\n                /** Activate popovers */\n                $(document).ready(() =\u003e $('[data-toggle=\"popover\"]').popover());\n    \n                /** Calculates the coordinates of the click point */\n                this.calculateClickCordinates = function (evt) {\n                    let rect = evt.target.getBoundingClientRect()\n                    return {\n                        left: Math.floor((evt.clientX - rect.left - 7) * 100 / this.$refs.img.width),\n                        top: Math.floor((evt.clientY - rect.top - 7) * 100 / this.$refs.img.height)\n                    }\n                }\n                \n                /** Removes comments that have not been saved */\n                this.removeUnsavedComments = function () {\n                    var i = this.image.comments.length\n                    while (i--) {\n                        if ( ! this.image.comments[i]['id']) {\n                            this.image.comments.splice(i, 1)\n                        }\n                    }\n                }\n            },\n            methods: {\n                addCommentPoint: function(evt) {\n                    let vm       = this\n                    let position = vm.calculateClickCordinates(evt)\n                    let count    = this.image.comments.push({ position })\n                    \n                    // Show the modal and add a callback for when the modal is closed\n                    let modalElem = $(\"#add-modal\")\n                    modalElem.data({\"comment-index\": count-1, \"comment-position\": position})\n                    modalElem.modal(\"show\").on(\"hide.bs.modal\", () =\u003e vm.removeUnsavedComments())\n                }\n            },\n        }\n    \u003c/script\u003e\n```\n\n\u003e 💡  The `created` and `mounted` methods are hooks that are called automatically during the creation of the Vue component. You can [learn about Vue lifecycle here](https://alligator.io/vuejs/component-lifecycle).\n\nIn the `mounted` method, we use Laravel Echo to listen to a Pusher channel. The channel name depends on the ID of the image currently being viewed. Each image will have broadcasts on a different channel based on the ID of the image. \n\nWhen the `added` event is triggered on the `feedback-$id` channel, it looks through the available `image.comments` and, if the comment broadcasted does not exist, it adds it to the comments array.\n\nIn the `create` method, We activate Bootstrap popovers, define a function that calculates the coordinates of the click point, and we define a function that removes comments that have not been saved from the `image.comments` array.\n\nUnder `methods` we define the `addCommentPoint` method which calculates the click coordinates, and then launches a new Bootstrap modal which is going to be created in the `add-comment-modal` Vue component.\n\nFor Laravel Echo to work, we need to open the `./resources/assets/js/bootstrap.js` file and add the code below at the bottom of the file:\n\n```\n    import Echo from 'laravel-echo'\n    \n    window.Pusher = require('pusher-js');\n    \n    window.Echo = new Echo({\n        broadcaster: 'pusher',\n        key: 'PUSHER_KEY',\n        encrypted: true,\n        cluster: 'PUSHER_CLUSTER'\n    });\n```\n\nYou should replace `PUSHER_KEY` and `PUSHER_CLUSTER` with the key and cluster for your Pusher application. \n\nNow lets create our next Vue component, `AddCommentModal.vue`. It is already referenced in our `FeedbackCanvas.vue` Vue component. \n\nCreate an `AddCommentModal.vue`  file in the same directory as our other Vue components. In this file paste in the code below:\n\n```\n    \u003ctemplate\u003e\n      \u003cdiv id=\"add-modal\" class=\"modal fade\" role=\"dialog\" data-backdrop=\"static\" data-keyboard=\"false\"\u003e\n          \u003cdiv class=\"modal-dialog\"\u003e\n              \u003cdiv class=\"modal-content\"\u003e\n                  \u003cform method=\"post\" :action=\"'/feedback/'+photo.url+'post'\" @submit.prevent=\"submitFeedback()\"\u003e\n                      \u003cdiv class=\"modal-header\"\u003e\n                          \u003ch4 class=\"modal-title\"\u003eAdd Feedback\u003c/h4\u003e\n                      \u003c/div\u003e\n                      \u003cdiv class=\"modal-body\"\u003e\n                          \u003ctextarea name=\"feedback\" id=\"feedback-provided\" cols=\"10\" rows=\"5\" class=\"form-control\" v-model=\"feedback\" placeholder=\"Enter feedback...\" required minlength=\"2\" maxlength=\"2000\"\u003e\u003c/textarea\u003e\n                      \u003c/div\u003e\n                      \u003cdiv class=\"modal-footer\"\u003e\n                          \u003cbutton type=\"submit\" class=\"btn btn-primary pull-right\"\u003eSubmit\u003c/button\u003e\n                          \u003cbutton type=\"button\" class=\"btn btn-default pull-left\" data-dismiss=\"modal\"\u003eCancel\u003c/button\u003e\n                      \u003c/div\u003e\n                  \u003c/form\u003e\n              \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    export default {\n        props: ['image'],\n        data() {\n            return { photo: this.image, feedback: null }\n        },\n        methods: {\n            submitFeedback: function () {\n                let vm = this\n                let modal = $('#add-modal')\n                let position = modal.data(\"comment-position\")\n                \n                // Create url and payload\n                let url = `/feedback/${this.photo.url}/comment`;\n                let payload = {comment: this.feedback, left: position.left, top: position.top}\n                axios.post(url, payload).then(response =\u003e {\n                    this.feedback = null\n                    modal.modal('hide')\n                    vm.photo.comments[modal.data('comment-index')] = response.data\n                    $(document).ready(() =\u003e $('[data-toggle=\"popover\"]').popover())\n                })\n            }\n        }\n    }\n    \u003c/script\u003e\n```\nIn the `template` section, we have defined a typical Bootstrap modal. In the modal form, we have attached a call to `submitFeedback()` which is triggered when the form is submitted.\n\nIn the `script` section, we have defined the `submitFeedback()` method in the `methods` property of the Vue component. This function simply sends a comment to the backend for storage. If there is a favorable response from the API, the Bootstrap modal is hidden and the comment is appended to the `image.comments` array. The Bootstrap popover is then reloaded so it picks up the changes.\n\nWith that final change, we have defined all our Vue components. Open your terminal and run the command below to build your JS and CSS assets:\n\n```\n    $ npm run dev\n```\n\nGreat! Now let’s build the backend.\n\n## Creating the Endpoints for our prototype feedback application\n\nIn your terminal, enter the command below:\n\n```\n    php artisan make:event FeedbackAdded\n```\n\nThis will create an event class called `FeedbackAdded`. We will use this file to trigger events to Pusher when we add some feedback.This will make feedback appear in realtime to anyone looking at the image.\n\nOpen the `PhotoController` class and replace the contents with the code below:\n\n```\n    \u003c?php\n    namespace App\\Http\\Controllers;\n    \n    use App\\Events\\FeedbackAdded;\n    use App\\{Photo, PhotoComment};\n    \n    class PhotoController extends Controller\n    {\n        public function show($url)\n        {\n            $photo = Photo::whereUrl($url)-\u003efirstOrFail();\n    \n            return view('image', compact('photo'));\n        }\n        \n        public function comment(string $url)\n        {\n            $photo = Photo::whereUrl($url)-\u003efirstOrFail();\n    \n            $data = request()-\u003evalidate([\n                \"comment\" =\u003e \"required|between:2,2000\",\n                \"left\" =\u003e \"required|numeric|between:0,100\",\n                \"top\"  =\u003e \"required|numeric|between:0,100\",\n            ]);\n    \n            $comment = $photo-\u003ecomments()-\u003esave(new PhotoComment($data));\n    \n            event(new FeedbackAdded($photo-\u003eid, $comment-\u003etoArray()));\n    \n            return response()-\u003ejson($comment);\n        }\n        \n        public function upload()\n        {\n            request()-\u003evalidate(['file' =\u003e 'required|image']);\n            \n            $gibberish = md5(str_random().time());\n    \n            $imgName = \"{$gibberish}.\".request('file')-\u003egetClientOriginalExtension();\n    \n            request('file')-\u003emove(public_path('storage'), $imgName);\n    \n            $photo = Photo::create(['image' =\u003e $imgName, 'url' =\u003e $gibberish]);\n    \n            return response()-\u003ejson($photo-\u003etoArray());\n        }\n    }\n```\n\nIn the above, we have a `show` method which shows an image so people can leave feedback on it. Next, there is the `comment` method that saves a new comment on an image. The final method is the `upload` method that simply uploads an image to the server and saves it to the database.\n\nLet us create the view for the `show` method. Create a new file in the `./resources/views` directory called `image.blade.php`. In this file, paste the code below:\n\n```\n    \u003c!doctype html\u003e\n    \u003chtml lang=\"{{ app()-\u003egetLocale() }}\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003cmeta name=\"csrf-token\" content=\"{{csrf_token()}}\"\u003e\n        \u003ctitle\u003eLaravel\u003c/title\u003e\n        \u003clink href=\"https://fonts.googleapis.com/css?family=Roboto:400,600\" rel=\"stylesheet\" type=\"text/css\"\u003e\n        \u003clink href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"{{ asset('css/app.css') }}\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv id=\"app\"\u003e\n            \u003cfeedback :photo='@json($photo)'\u003e\u003c/feedback\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"{{asset('js/app.js')}}\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```    \n\nIn the above, the only thing that stands out is the `feedback` tag and it is basically in reference to the feedback Vue component we built earlier in the article. Every other thing is just basic Blade and HTML.\n\nNow that we have created the view, we need to add the directory for uploads defined in the `upload` method. In your terminal, run the command below:\n\n```\n    $ php artisan storage:link\n```\n\nThis command will create a symlink from the `./storage` directory to the `./public/storage` directory. If you look in the `./public` directory you should see the symlink.\n\nNow that we have created the backend to support our web application, we need to add Pusher to the backend so that the comments made are broadcasted and can be picked up by other people browsing the image.\n\n\n## Adding realtime functionality to the prototype feedback app using Pusher\n\nOpen your terminal and enter the command below to install the [Pusher PHP SDK](https://github.com/pusher/pusher-http-php):\n\n```\n    $ composer require pusher/pusher-php-server \"~3.0\" \n```\n\nOpen the `.env` file and scroll to the bottom and configure the Pusher keys as seen below:\n\n```\n    PUSHER_APP_ID=\"PUSHER_ID\"\n    PUSHER_APP_KEY=\"PUSHER_KEY\"\n    PUSHER_APP_SECRET=\"PUSHER_SECRET\" \n```\n\nAlso in the same file, look for the `BROADCAST_DRIVER` and change it from `log` to `pusher`.\n\nNext, open the `./config/broadcasting.php` and scroll to the `pusher` key. Replace the `options` key of that configuration to the code below:\n\n```\n    // ...\n    'options' =\u003e [\n        'cluster' =\u003e 'PUSHER_CLUSTER',\n        'encrypted' =\u003e true\n    ], \n    // ...\n```\n\n\u003e 💡 Remember to replace the `PUSHER_ID`, `PUSHER_KEY`, `PUSHER_SECRET` and `PUSHER_CLUSTER` with the values from your Pusher application.\n\nNow, open the `FeedbackAdded` class and replace the contents with the code below:\n\n```\n    \u003c?php\n    \n    namespace App\\Events;\n    \n    use Illuminate\\Broadcasting\\Channel;\n    use Illuminate\\Queue\\SerializesModels;\n    use Illuminate\\Foundation\\Events\\Dispatchable;\n    use Illuminate\\Broadcasting\\InteractsWithSockets;\n    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n    \n    class FeedbackAdded implements ShouldBroadcast\n    {\n        use Dispatchable, InteractsWithSockets, SerializesModels;\n        \n        public $comment;\n    \n        public $photo_id;\n    \n        public function __construct(int $photo_id, array $comment)\n        {\n            $this-\u003ecomment = $comment;\n            $this-\u003ephoto_id = $photo_id;\n        }\n    \n        public function broadcastOn()\n        {\n            return new Channel(\"feedback-{$this-\u003ephoto_id}\");\n        }\n    \n        public function broadcastAs()\n        {\n            return 'added';\n        }\n    }\n```\n\nIn the class above, we define the `comment` object and the `photo_id`  which will be used to compose the channel name in the `broadcastOn` method. We also define the `broadcastAs` method which will allow us to customise the name of the event being sent to Pusher.\n\nThat’s all. Now, let’s run our application. In your terminal, run the code below:\n\n```\n    $ php artisan serve\n```\n\n![design-feedback-vuejs-laravel-server](//images.contentful.com/1es3ne0caaid/uDXbpLoXUOG0iosQmUmAg/68a818e05502e8e4f425b6efdff13b2d/design-feedback-vuejs-laravel-server.png)\n\n\nThis should start a new PHP server and you can then use that to test your application. Go to the URL given and you should see your application.\n\n## Conclusion\n\nIn this article, we have successfully created a prototype application’s feedback feature that will allow designers share their designs with others and receive feedback on them.","metaTitle":"Build a design feedback app using Vue.js","metaDescription":"Design apps has become more and more collaborative friendly with apps like InVision. In this tutorial, we are building design feedback application with Vue.js and Laravel."}}],"defaultValue":"JavaScript","queryType":"tag","pages":33,"route":"/tutorials","query":{"tag":"JavaScript","page":"26"}}},"page":"/tutorials","query":{"tag":"JavaScript","page":"26"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=JavaScript&page=26 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:48 GMT -->
</html>