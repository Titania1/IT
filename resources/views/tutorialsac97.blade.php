<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=Kotlin&page=2 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:28:05 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">42</span> tutorials for “<span class="css-npldjc ehwuahf2">Kotlin</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorialsb595.html?product=Beams&amp;tag=Kotlin" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials.html" class="css-a3lpv2 e137azhw1"><svg fill="#C223CE" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#C223CE"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Kotlin"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/laravel-logger-part-3.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Creating a Laravel Logger - Part 3: Integrating our Pusher logger package</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">In this six-part series, build a Laravel error logging service. You will create a custom Laravel package to include in L...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/backend-developer-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Dart<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flutter<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Becoming a backend developer - Part 2: Building the server</h3><p class="css-k12xad e5jrto45">In this three-part series, we will cover all the basics of what it takes for a mobile app developer to become a backend ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/laravel-logger-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Creating a Laravel logger - Part 2: Creating a Pusher logger package</h3><p class="css-k12xad e5jrto45">In this six-part series, build a Laravel error logging service. You will create a custom Laravel package to include in L...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/backend-developer-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flutter<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Becoming a backend developer - Part 1: Foundational concepts</h3><p class="css-k12xad e5jrto45">This is a tutorial series for mobile app developers. In this three-part series, we will cover all the basics of what it ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/laravel-logger-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Creating a Laravel logger - Part 1: Getting started</h3><p class="css-k12xad e5jrto45">In this six-part series, build a Laravel error logging service. You will create a custom Laravel package to include in L...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/shopping-cart-kotlin-part-3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a shopping cart with Kotlin - Part 3: Adding reactivity to the app</h3><p class="css-k12xad e5jrto45">This three-part series will walk you through building a shopping cart for an Android app using Kotlin. In part three, us...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/shopping-cart-kotlin-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a shopping cart with Kotlin - Part 2: Building the shopping cart logic</h3><p class="css-k12xad e5jrto45">This three-part series will walk you through building a shopping cart for an Android app using Kotlin. In part two, impl...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/shopping-cart-kotlin-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a shopping cart with Kotlin - Part 1: Listing products</h3><p class="css-k12xad e5jrto45">This three-part series will walk you through building a shopping cart for an Android app using Kotlin. In part one, set ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-content-good-ux.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live UX</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Updating content in realtime without confusing your users</h3><p class="css-k12xad e5jrto45">This tutorial looks at some of the potential downsides of updating content in realtime, and presents solutions. You will...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialsd4ad.html?tag=Kotlin&amp;page=1" class="css-5s6711 edg0byb1">Prev</a><a href="tutorialsd4ad.html?tag=Kotlin&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsac97.html?tag=Kotlin&amp;page=2" class="css-2wakph edg0byb1">2</a><a href="tutorialse2a5.html?tag=Kotlin&amp;page=3" class="css-5s6711 edg0byb1">3</a><a href="tutorialsc484.html?tag=Kotlin&amp;page=4" class="css-5s6711 edg0byb1">4</a><a href="tutorials00da.html?tag=Kotlin&amp;page=5" class="css-5s6711 edg0byb1">5</a><a href="tutorialse2a5.html?tag=Kotlin&amp;page=3" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":42,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2azDRsWRuXljxyJlOXSI7a","type":"Entry","createdAt":"2019-03-25T15:47:55.706Z","updatedAt":"2019-03-25T15:47:55.706Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Creating a Laravel Logger - Part 3: Integrating our Pusher logger package","url":"laravel-logger-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/logger","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}}],"reviewDate":"2019-03-25","description":"In this six-part series, build a Laravel error logging service. You will create a custom Laravel package to include in Laravel apps, along with web, Android and iOS frontends. Alerts will publish in realtime, featuring push notifications to mobile. In part three, integrate the logger package into a Laravel app.","prerequisite":"For this part of the series, you will need PHP 7.13+, Laravel 5.7+ and Composer installed on your machine.","content":"In this part, we’ll see how we can connect our app and the Laravel package so that when a log form is submitted using the dispatch button, it is triggered to Pusher Channels and if the log level is of type error, it is also published through Pusher Beams too.\n\nIn the first two parts of this series, we built a simple Laravel app with a form to collect a log message and level and we also built a Laravel package to interact with the Pusher API.\n\n## Requirements\n\nTo follow along with this series you need the following things:\n\n- Completed previous parts of the series. [Part 1](https://pusher.com/tutorials/laravel-logger-part-1), [Part 2](https://pusher.com/tutorials/laravel-logger-part-2)\n- Laravel installed on your local machine. [Installation guide](https://laravel.com/docs/5.7/installation).\n- Knowledge of PHP and the Laravel framework.\n- Composer installed on your local machine. [Installation guide](https://getcomposer.org/doc/00-intro.md#installation-linux-unix-macos).\n- [Android Studio](https://developer.android.com/studio/install) \u003e= 3.x installed on your machine (If you are building for Android).\n- Knowledge of Kotlin and the Android Studio IDE.\n- [Xcode](https://developer.apple.com/xcode/) \u003e= 10.x installed on your machine (If you are building for iOS).\n- Knowledge of the Swift programming language and the Xcode IDE.\n- A Pusher application. [Create one here](https://pusher.com).\n- A Pusher Beams application. [Create one here](https://dash.pusher.com).\n\n\n## Connecting our Laravel app with the logger package\n\nTo get started, you need the code from the first part of the article, which is available in the [GitHub repository](https://github.com/neoighodaro/logger). When you have the code, `cd` to the directory of the code and copy the `.env.example`  to your`.env` file if you don’t already have it and update the following keys:\n\n```\n    # File: ./.env\n    # [...]\n    \n    PUSHER_APP_ID=\"PUSHER_APP_ID\"\n    PUSHER_APP_KEY=\"PUSHER_APP_KEY\"\n    PUSHER_APP_SECRET=\"PUSHER_APP_SECRET\"\n    PUSHER_APP_CLUSTER=\"PUSHER_APP_CLUSTER\"\n    PUSHER_BEAMS_SECRET_KEY=\"PUSHER_BEAMS_SECRET_KEY\"\n    PUSHER_BEAMS_INSTANCE_ID=\"PUSHER_BEAMS_INSTANCE_ID\"\n```\n\n\u003e Update with the keys from your Pusher Channels and Pusher Beams dashboard.\n\nNext, open the `config/broadcasting.php` file and scroll until you see the `connections` key. In there, you’ll have the `pusher` object. Add the `beams` object to it and make sure it looks like this:\n\n```php\n    // File: ./config/broadcasting.php\n    \n    'connections' =\u003e [\n    \n        // [...]\n    \n        'pusher' =\u003e [\n            'driver' =\u003e 'pusher',\n            'key' =\u003e env('PUSHER_APP_KEY'),\n            'secret' =\u003e env('PUSHER_APP_SECRET'),\n            'app_id' =\u003e env('PUSHER_APP_ID'),\n            'options' =\u003e [\n                'cluster' =\u003e env('PUSHER_APP_CLUSTER'),\n                'encrypted' =\u003e true,\n            ],\n            'beams' =\u003e [\n                'secret_key' =\u003e env('PUSHER_BEAMS_SECRET_KEY'),\n                'instance_id' =\u003e env('PUSHER_BEAMS_INSTANCE_ID'),\n            ],\n        ],\n    \n    ],\n```\n\nYou see that this file instructs Laravel to get the keys from the `.env` file. Inside our Laravel app, we need to add a new repository definition. Open `composer.json` in the root directory of the Laravel app and add this there:\n\n```json\n    // File: ./composer.json\n    // [...]\n    \n    \"repositories\": [\n        {\n            \"type\": \"path\",\n            \"url\": \"./packages/*\",\n            \"options\": {\n                \"symlink\": true\n            }\n        }\n    ],\n    \n    // [...]\n```\n\nBy setting the `\"type\": \"path\"`, the Composer knows that you would like to reference a local repository and the `url` defines the package location which can be relative or absolute to the package code.\n\nComposer will copy the package code into the `vendor` folder of our app and anytime there is an update change on the package there is a need to run `composer update`. To prevent Composer from doing so you need to specify the `symlink` option and composer will create a symlink to the package folder.\n\nRun this in the root directory of the app to install the package:\n\n```\n    $ composer require packagename/pusher-logger\n```\n\n\u003e If you used a different package name than this in the previous part, then use that package name.\n\n![laravel-log-3-1](//images.ctfassets.net/1es3ne0caaid/3OEqt4oBzC50ee7d3sRSyh/9f693c313590e7347d99424e5dd0443d/laravel-log-3-1.png)\n\nWhen your package installation is complete you’ll see the “Package manifest generated successfully” message.\n\nNow that our package is installed, let us create the logic to use the package. Open a new terminal tab, inside the root directory of the project folder and run:\n\n```\n    $ php artisan make:controller LogController\n```\n\nThis command will create a `LogController` class inside the `LogController.php` file found at the `app/Http/Controllers` directory.\n\nOpen the `LogController.php` and add the method below:\n\n```php\n    \u003c?php // File: ./app/Http/Controllers/LogController.php\n    \n    // [...]\n    \n    use Illuminate\\Http\\Request;\n    \n    class LogController extends Controller {\n    \n      public function  __invoke(Request $request)\n      {\n          // Logic Here   \n      }   \n      \n      // [...]\n    }\n```\n\nThe `__invoke` method is a magic method in `PHP` which gets called when the object is called as a function. `$request` is an instance of the `Illuminate\\Http\\Request` class via dependency injection and it returns the current HTTP request.\n\nNow, we will introduce the Laravel package into our `LogController` class, so at the top of the class after the namespace declaration add this:\n\n```php\n    use PackageNamespace\\PusherLogger\\PusherLogger;\n```\n\n\u003e If you used a different namespace, replace the namespace above with whatever you used.\n\nRemember that when we’re building our package, we could log a message and the level with the syntax below:\n\n```php\n    PusherLogger::log('Winter is Coming', PusherLogger::LEVEL_WARNING)\n            -\u003esetEvent('log-event')\n            -\u003esetChannel('log-channel')\n            -\u003esetInterests(['log-interest'])\n            -\u003esend()\n```\n\nSo let’s update our logic in the `__invoke` method like so:\n\n```php\n    // File: ./app/Http/Controllers/LogController.php\n    // [...]\n    \n    public function __invoke(Request $request)\n    {\n        $data = $request-\u003evalidate([\n            'message' =\u003e 'required|string',\n            'level' =\u003e 'required|string'\n        ]);\n    \n        $dispatched = PusherLogger::log($data['message'], $data['level'])\n            -\u003esetChannel('log-channel')\n            -\u003esetEvent('log-event')\n            -\u003esetInterests(['log-interest'])\n            -\u003esend();\n    \n        return response()-\u003ejson(['status' =\u003e $dispatched]);\n    }\n    \n    // [...]\n```\n\nFrom this snippet above, we first validate the request to make sure the message and level values are being sent to the server. Next, we set the log message, level, channel and event name. In a case where the log is an error, we set the interests to be sent to the Pusher Beam API using the `setInterests` method which accepts an array of interests.\n\nFinally, we triggered the `send` method that dispatches the log to both the Pusher Channels and Pusher Beams.\n\nNow open `api.php` located in the `routes` folder in the app directory and declare this route like so:\n\n```php\n    Route::post('/push', 'LogController')-\u003ename('log-message');\n```\n\nThis route can be accessed as `api/push` via a `POST` request. A name log-message has been set on this route which allows us to use the Laravel URL helper function `route()` to generate the endpoint anywhere inside the Laravel app. We will use this route shortly.\n\nNext, open the `welcome.blade.php` file located at `resources/views` directory and update it as instructed below:\n\nJust before the closing `head` tag add this link:\n\n```php\n    \u003c!-- File: ./resources/views/welcome.blade.php --\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css\" /\u003e\n```\n\nJust before the end of the `body` tag add these scripts:\n\n```php\n    \u003c!-- File: ./resources/views/welcome.blade.php --\u003e\n    \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n```\n\nHere, we added [Toastr](https://github.com/CodeSeven/toastr) and [Axios](https://github.com/axios/axios) to the frontend of the application. Toastr is a simple notification library and Axios is HTTP client for the browser that makes network requests.\n\nNext, add the following code below the code we just added:\n\n```php\n    \u003c!-- File: ./resources/views/welcome.blade.php --\u003e\n    \u003cscript\u003e\n    function dispatchLog() {\n        let level = document.getElementById('level').value;\n        let message = document.getElementById('message').value;\n        let errToastr = () =\u003e toastr.error(\"Oops! An error encountered\");\n    \n        axios.post('{{ route('log-message') }}', { message, level })\n            .then(r =\u003e r.data.status ? toastr.success('Log dispatch successful') : errToastr())\n            .catch(errToastr);\n    }\n    \u003c/script\u003e\n```\n\nThe function above is to help dispatch our log inputs (message and level).\n\nAxios is used to send both variables to our earlier declared route. When we get a response, we display a notification to the user.\n\nNow let us attach the function in the script above to the dispatch button in our modal.\n\nLook for this line of code in your `./resources/views/partials/modal.blade.php` file:\n\n```php\n    \u003cbutton type=\"button\" class=\"btn btn-danger\"\u003eDispatch\u003c/button\u003e\n```\n\nThen replace it with the following:\n\n```php\n    \u003cbutton type=\"button\" class=\"btn btn-danger\" onclick=\"dispatchLog()\"\u003eDispatch\u003c/button\u003e\n```\n\nSo, whenever the dispatch button is clicked, the `dispatchLog` function is triggered.\n\nIf you run your app, it should work like this (the view on the left is the Pusher Channels debug console):\n\n![laravel-log-3-2](//images.ctfassets.net/1es3ne0caaid/6FmWYRu5QEmSd6aStNYBYW/07b057e5fe8b5f1cd912417f88591b98/laravel-log-3-2.gif)\n\n## Pushing log messages without the trigger\n\nWhen creating actual applications, you won’t have a trigger and you’ll want the logged messages to automatically get pushed to the Pusher Channel. This is why we created the Monolog handler in the previous part.\n\nTo use this handler, open the `config/logging.php` file and add a new channel to the `channels` array:\n\n```php\n    'channels' =\u003e [\n        \n        // [...]\n    \n        'pusher' =\u003e [\n            'driver' =\u003e 'monolog',\n            'level' =\u003e 'debug',\n            'handler' =\u003e PackageNamespace\\PusherLogger\\PusherLoggerHandler::class,\n        ],\n    \n        // [...]\n    \n    ],\n```\n\n\u003e If you changed your packages namespace, don’t forget to change it above.\n\nFinally, in your `stack` channel in the same `channels` array, add the `pusher` channel to the list of channels as seen below:\n\n```php\n    'channels' =\u003e [\n        'stack' =\u003e [\n            'driver' =\u003e 'stack',\n            'channels' =\u003e ['daily', 'pusher'],\n            'ignore_exceptions' =\u003e false,\n        ],\n    \n        // [...]\n    \n    ],\n```\n\nTo test, you can go to the `routes/web.php` and add this to the file:\n\n```php\n    info('Testing');\n```\n\nThis should push the message to the Pusher Channel.\n\n\n## Conclusion\n\nIn this part of the series, we have been able to set up the logic we need to be able to push logs to Pusher. In the next part of the series, we will create the Android application for our logging monitor.\n\nThe source code is available on [GitHub](https://github.com/neoighodaro/logger). ","metaTitle":"Creating a Laravel Logger - Part 3","metaDescription":"In this six-part series, build a Laravel error logging service. You will create a custom Laravel package to include in Laravel apps, along with web, Android and iOS frontends. Alerts will publish in realtime, featuring push notifications to mobile. In part three, integrate the logger package."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3K4M08vitNFw90L1Urqnuj","type":"Entry","createdAt":"2019-03-22T18:25:24.515Z","updatedAt":"2019-03-22T18:25:24.515Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Becoming a backend developer - Part 2: Building the server","url":"backend-developer-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"58WBWjhcWcuAMI6qIAyiC4","type":"Entry","createdAt":"2018-12-13T20:46:00.073Z","updatedAt":"2018-12-13T20:46:36.867Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Suragch","url":"suragch","email":"studymongolian@gmail.com","twitter":"https://twitter.com/suragch","github":"https://github.com/suragch","guestWriter":true}}],"projectRepo":"https://github.com/suragch/backend_demo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1st5ugwNDbvlnFFHBadh5b","type":"Entry","createdAt":"2019-03-13T18:08:14.919Z","updatedAt":"2019-03-13T18:08:14.920Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Dart","url":"dart","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Q3oRmiXjOmcSmweY4gKY8","type":"Entry","createdAt":"2018-09-12T09:33:28.375Z","updatedAt":"2018-09-12T09:33:28.375Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flutter","url":"flutter","type":"framework","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}}],"reviewDate":"2019-03-22","description":"In this three-part series, we will cover all the basics of what it takes for a mobile app developer to become a backend developer. You will create backends using Node and Dart, with mobile frontend examples using Android, Swift, and Flutter.","prerequisite":"You need experience in at least one of Android, iOS or Flutter development.","content":"This is a guide for mobile app developers. In this three-part series we are covering all the basics of what it takes to become a backend developer.\n\n\n- [Part 1: Foundational concepts](https://pusher.com/tutorials/backend-developer-part-1)\n- Part 2: Building the server \n- Part 3: Connecting to the server from a mobile app\n\n\n## Introduction\n\nIn the [first tutorial](https://pusher.com/tutorials/backend-developer-part-1) we went over background knowledge related to client-server communication. This included URIs, HTTP, REST APIs, and JSON. If any of these topics are unfamiliar to you, go back and review them. \n\nNow, let’s build a server! \n\n## Prerequisites\n\nI'm not assuming you have any backend server experience, but I won't be repeating online documentation, so you will need to be able to following the installation directions from the links I give you. \n\nI will be using [Visual Studio Code](https://code.visualstudio.com/) to do the server programming. Feel free to use another IDE if you prefer.\n\n\n## Building the backend\n\nFor development purposes, we are going to install the server software on our local machine and have it communicate directly with our mobile app running in an emulator. \n\nBelow are two examples of a backend server: Node.js and Server-Side Dart. You only need to choose one. [Node.js](https://nodejs.org/) is very [popular](https://insights.stackoverflow.com/trends?tags=node.js) and you write the server code in JavaScript. [Server Side Dart](https://www.dartlang.org/server) is not nearly as popular as Node.js, but for Flutter developers the advantage is that you can use the same language for the frontend and the backend. It really doesn't matter which one you choose, but if you can't decide, go with Node.js.\n\n\n## Backend example one: Node.js\n\n\n\u003e **Note:** This tutorial was tested with Node.js 10.15.1\n\n### Install Node.js\n\nGo to [nodejs.org](https://nodejs.org) to download and install Node.js. \n\nThe [Getting Started Guide](https://nodejs.org/en/docs/guides/getting-started-guide/) shows the code for a basic HTTP server. It doesn’t explain the code, though, so I have added comments below:\n\n```javascript\n    // The require() function loads modules in Node.js. \n    // A module is code that is in another file.\n    // 'http' is a builtin module in Node.js. It allows data transfer\n    // using the HTTP protocol and enables setting up an HTTP server.\n    const http = require('http');\n    \n    // During development we will use the localhost.\n    const hostname = '127.0.0.1';\n    const port = 3000;\n    \n    // set up an http server\n    // Two parameters are passed in:\n    //     req = request (from the client)\n    //     res = response (from the server)\n    const server = http.createServer((req, res) =\u003e {\n    \n      // A status code of 200 means OK (A 404 would mean Not Found)\n      res.statusCode = 200;\n    \n      // A header adds additional information. \n      // Here we are using a name-value pair to set the\n      // media type (MIME type) as plain text (as opposed to html).\n      res.setHeader('Content-Type', 'text/plain');\n    \n      // This writes a message and then ends the response.\n      res.end('Hello World\\n');\n    });\n    \n    // This causes the server to listen for requests from clients on \n    // the hostname and port that we defined above.\n    server.listen(port, hostname, () =\u003e {\n      console.log(`Server running at http://${hostname}:${port}/`);\n    });\n```\n\nGo ahead and test the code by running the app as described in the Getting Started Guide. You should see “Hello World” in the browser window when you navigate to http://localhost:3000.\n\n### Implement our API\n\nIn Part 1 [ADD LINK] I told you the REST API that we were going to make would look like this:\n\n```\n    GET http://localhost:3000/              // get all items\n    GET http://localhost:3000/id            // get item at id\n    POST http://localhost:3000/             // create new item\n    PUT http://localhost:3000/id            // replace item at id\n    PATCH http://localhost:3000/id          // update item at id\n    DELETE http://localhost:3000/id         // delete item at id\n```\n\nOur client app that we will make in Part 3 is going to look like this:\n\n![backend-mobile-2-1](//images.ctfassets.net/1es3ne0caaid/7MvuGc4TMFanlAXX9KNXX7/a80f94db1eb63c5146ad64dc2daefd89/backend-mobile-2-1.png)\n\nSo we need to make our server handle all of these requests. First go to the terminal and create a new directory for our Node.js project.\n\n```\n    mkdir nodejs_server\n    cd nodejs_server\n```\n\nThe way to create a new project is to use the Node Package Manager (npm). Run the following command and accept the default values for everything. (If you need to edit this info later you can open `package.json`.)\n\n```\n    npm init\n```\n\nWe are also going to use the [Express](https://expressjs.com/) framework, which simplifies a lot of the HTTP protocol handling.\n\n```\n    npm install express --save\n```\n\nNow create the server file that we named in the `npm init` step above:\n\n```\n    touch index.js\n```\n\nOpen it in an editor (I'm using [VSCode](https://code.visualstudio.com/)), and paste in the following:\n\n```javascript\n    // nodejs_server/index.js\n    \n    var express = require('express');\n    var bodyParser = require('body-parser');\n    var app = express();\n    \n    // bodyParser is a type of middleware\n    // It helps convert JSON strings\n    // the 'use' method assigns a middleware\n    app.use(bodyParser.json({ type: 'application/json' }));\n    \n    const hostname = '127.0.0.1';\n    const port = 3000;\n    \n    // http status codes\n    const statusOK = 200;\n    const statusNotFound = 404;\n    \n    // using an array to simulate a database for demonstration purposes\n    var mockDatabase = [\n        {\n            fruit: \"apple\",\n            color: \"red\"\n        },\n        {\n            fruit: \"banana\",\n            color: \"yellow\"\n        }\n    ]\n    \n    // Handle GET (all) request\n    app.get('/', function(req, res) {\n        // error checking\n        if (mockDatabase.length \u003c 1) {\n            res.statusCode = statusNotFound;\n            res.send('Item not found');\n            return;\n        }\n        // send response\n        res.statusCode = statusOK;\n        res.send(mockDatabase);\n    });\n    \n    // Handle GET (one) request\n    app.get('/:id', function(req, res) {\n        // error checking\n        var id = req.params.id;\n        if (id \u003c 0 || id \u003e= mockDatabase.length) {\n            res.statusCode = statusNotFound;\n            res.send('Item not found');\n            return;\n        }\n        // send response\n        res.statusCode = statusOK;\n        res.send(mockDatabase[id]);\n    });\n    \n    // Handle POST request\n    app.post('/', function(req, res) {\n        // get data from request\n        var newObject = req.body; // TODO validate data\n        mockDatabase.push(newObject);\n        // send created item back with id included\n        var id = mockDatabase.length - 1;\n        res.statusCode = statusOK;\n        res.send(`Item added with id ${id}`);\n    });\n    \n    // Handle PUT request\n    app.put('/:id', function(req, res) {\n        // replace current object\n        var id = req.params.id;     // TODO validate id\n        var replacement = req.body; // TODO validate data\n        mockDatabase[id] = replacement;\n        // report back to the client\n        res.statusCode = statusOK;\n        res.send(`Item replaced at id ${id}`);\n    });\n    \n    // Handle PATCH request \n    app.patch('/:id', function(req, res) {\n        // update current object\n        var id = req.params.id;        // TODO validate id\n        var newColor = req.body.color; // TODO validate data\n        mockDatabase[id].color = newColor;\n        // report back to the client\n        res.statusCode = statusOK;\n        res.send(`Item updated at id ${id}`);\n    });\n    \n    // Handle DELETE request \n    app.delete('/:id', function(req, res) {\n        // delete specified item\n        var id = req.params.id;  // TODO validate id\n        mockDatabase.splice(id, 1);\n        // send response back\n        res.statusCode = statusOK;\n        res.send(`Item deleted at id ${id}`);\n    });\n    \n    app.listen(port, hostname, function () {\n        console.log(`Listening at http://${hostname}:${port}/...`);\n    });\n```\n\nSave the file and run it in the terminal.\n\n```\n    node index.js\n```\n\nThe server is now running on your machine. You can use [Postman](https://www.getpostman.com/) (see [docs](https://learning.getpostman.com/getting-started/) and [tutorial](https://www.youtube.com/watch?v=t5n07Ybz7yI)) to test the server now, or you can use one of the client apps that we will make in part three. \n\n![backend-mobile-2-2](//images.ctfassets.net/1es3ne0caaid/4gkCYUOTv1gGOai0cnnMlc/ce7cd897542def20af71963b0daf9116/backend-mobile-2-2.gif)\n\n### Further study\n\n\n- [NodeJS REST API](https://www.youtube.com/watch?v=F7NVpxxmmgM\u0026list=PL0dzCUj1L5JE4w_OctDGyZOhML6OtJSqR) \n- [Building a RESTful API with Node.js](https://www.youtube.com/watch?v=0oXYLzuucwE\u0026index=1\u0026list=PL55RiY5tL51q4D-B63KBnygU6opNPFk_q) \n- [Node.js Crash Course](https://www.youtube.com/watch?v=fBNz5xF-Kx4) \n- [Building a Node.js REST API with Express](https://medium.com/@jeffandersen/building-a-node-js-rest-api-with-express-46b0901f29b6) \n\n\n## Backend example two: Server Side Dart\n\n\n\u003e **Note:** This tutorial was tested with Dart 2.1.2\n\n### Install Dart\n\nIf you have Flutter installed on your system, then Dart is already installed. But if not, then go to [this link](https://www.dartlang.org/tools/sdk) to download and install the Dart SDK. \n\nCheck if `dart/bin` is in your system path:\n\n```\n    # Linux or Mac\n    echo $PATH\n    \n    # Windows Command Prompt\n    echo %path%\n    \n    # Windows Powershell\n    $env:Path -split ';'\n```\n\nIf it isn't and you just installed it from the link above (because you don't have Flutter), you can add it to your path like this:\n\n```\n    # Linux or Mac\n    export PATH=\"$PATH:/usr/lib/dart/bin\"\n```\n\nOn Windows it is easiest to use the GUI to set environment variables.\n\nIf you already had Flutter/Dart installed, find your Flutter SDK directory. Then you can add the path like this (replacing `\u003cflutter\u003e`):\n\n```\n    export PATH=\"$PATH:\u003cflutter\u003e/bin/cache/dart-sdk/bin\"\n```\n\nThis only updates the path until you restart your machine. You will probably want to update your `.bash_profile` (or whatever you use on your system) to make it permanent.\n\n### Install Aqueduct\n\nWe are also going to use the [Aqueduct](https://aqueduct.io/) framework to make HTTP request APIs easier to build. Now that we have Dart installed, we can install Aqueduct like this:\n\n```\n    pub global activate aqueduct\n```\n\nFollow the directions to add the `$HOME/.pub-cache/bin` to your path if you are instructed to.\n\n### Implement our API\n\nIn [part one](https://pusher.com/tutorials/backend-developer-part-1) I told you the REST API that we were going to make would look like this:\n\n```\n    GET http://localhost:3000/              // get all items\n    GET http://localhost:3000/id            // get item at id\n    POST http://localhost:3000/             // create new item\n    PUT http://localhost:3000/id            // replace item at id\n    PATCH http://localhost:3000/id          // update item at id\n    DELETE http://localhost:3000/id         // delete item at id\n```\n\nOur client app that we will make in part three is going to look like this:\n\n![backend-mobile-2-1](//images.ctfassets.net/1es3ne0caaid/7MvuGc4TMFanlAXX9KNXX7/a80f94db1eb63c5146ad64dc2daefd89/backend-mobile-2-1.png)\n\nSo we need to make our server handle all of these requests.\n\nFirst go to the terminal and cd to the directory that you want to create the server project folder in. Then type:\n\n```\n    aqueduct create dart_server\n```\n\nOpen the project in an editor. The [Aqueduct documentation](https://aqueduct.io/docs/) recommends [IntelliJ IDEA](https://www.jetbrains.com/idea/), but I am using [Visual Studio Code](https://code.visualstudio.com/) with the [Dart plugin](https://dartcode.org/).\n\nOpen the `lib/channel.dart` file and replace it with the following code:\n\n```dart\n    // dart_server/lib/channel.dart\n    \n    import 'package:dart_server/controller.dart';\n    import 'dart_server.dart';\n    \n    // This class sets up the controller that will handle our HTTP requests\n    class DartServerChannel extends ApplicationChannel {\n    \n      @override\n      Future prepare() async {\n        // auto generated code\n        logger.onRecord.listen((rec) =\u003e print(\"$rec ${rec.error ?? \"\"} ${rec.stackTrace ?? \"\"}\"));\n      }\n    \n      @override\n      Controller get entryPoint {\n        final router = Router();\n    \n        // We are only setting up one route. \n        // We could add more below if we had them.\n        // A route refers to the path portion of the URL.\n        router\n          .route('/[:id]') // the root path with an optional id variable\n          .link(() =\u003e MyController()); // requests are forwarded to our controller\n        return router;\n      }\n    }\n```\n\nIn the comments I talked about a controller. Let's make that now. Create a file called `controller.dart` in the `lib/` directory. Paste in the code below to handle HTTP requests:\n\n```dart\n    // dart_server/lib/controller.dart\n    \n    import 'dart:async';\n    import 'dart:io';\n    import 'package:aqueduct/aqueduct.dart';\n    \n    // using a list to simulate a database for demonstration purposes\n    List\u003cMap\u003cString, dynamic\u003e\u003e mockDatabase = [\n        {\n            'fruit': 'apple',\n            'color': 'red'\n        },\n        {\n            'fruit': 'banana',\n            'color': 'yellow'\n        }\n    ];\n    \n    class MyController extends ResourceController {\n    \n      // Handle GET (all) request\n      @Operation.get()\n      Future\u003cResponse\u003e getAllFruit() async {\n        // return the whole list\n        return Response.ok(mockDatabase);\n      }\n    \n      // Handle GET (one) request\n      @Operation.get('id')\n      Future\u003cResponse\u003e getFruitByID(@Bind.path('id') int id) async {\n        // error checking\n        if (id \u003c 0 || id \u003e= mockDatabase.length){\n          return Response.notFound(body: 'Item not found');\n        }\n        // return json for item at id\n        return Response.ok(mockDatabase[id]);\n      }\n    \n      // Handle POST request\n      @Operation.post()\n      Future\u003cResponse\u003e addFruit() async {\n        // get json from request\n        final Map\u003cString, dynamic\u003e item = await request.body.decode(); // TODO validate\n        // create item (TODO return error status code if there was a problem)\n        mockDatabase.add(item);\n        // report back to client\n        final int id = mockDatabase.length - 1;\n        return Response.ok('Item added with id $id');\n      }\n    \n      // Handle PUT request\n      @Operation.put('id')\n      Future\u003cResponse\u003e putContent(@Bind.path('id') int id) async {\n        // error checking\n        if (id \u003c 0 || id \u003e= mockDatabase.length){\n          return Response.notFound(body: 'Item not found');\n        }\n        // get the updated item from the client\n        final Map\u003cString, dynamic\u003e item = await request.body.decode(); // TODO validate\n        // make the update\n        mockDatabase[id] = item;\n        // report back to the client\n        return Response.ok('Item replaced at id $id');\n      }\n    \n      // Handle PATCH request \n      // (PATCH does not have its own @Operation method so \n      // the constructor parameter is used.)\n      @Operation('PATCH', 'id')\n      Future\u003cResponse\u003e patchContent(@Bind.path('id') int id) async {\n        // error checking\n        if (id \u003c 0 || id \u003e= mockDatabase.length){\n          return Response.notFound(body: 'Item not found');\n        }\n        // get the updated item from the client\n        final Map\u003cString, dynamic\u003e item = await request.body.decode(); // TODO validate\n        // make the partial update\n        mockDatabase\\[id\\]['color'] = item['color'];\n        // report back to the client\n        return Response.ok('Item updated at id $id');\n      }\n    \n      // Handle DELETE request \n      @Operation.delete('id')\n      Future\u003cResponse\u003e deleteContent(@Bind.path('id') int id) async {\n        // error checking\n        if (id \u003c 0 || id \u003e= mockDatabase.length){\n          return Response.notFound(body: 'Item not found');\n        }\n        // do the delete\n        mockDatabase.removeAt(id);\n        // report back to the client\n        return Response.ok('Item deleted at id $id');\n      }\n    }\n```\n\nSave your changes.\n\n### Testing the server\n\nMake sure you are inside the root of your project folder:\n\n```\n    cd dart_server\n```\n\nNormally you would start the server in the terminal like this:\n\n```\n    aqueduct serve\n```\n\nHowever, Aqueduct defaults to listening on port 8888. In all of the client apps and Node.js we are using port 3000, so let’s do that here, too. I'm also limiting the number of server instances (aka isolates) to one. This is only because we are using a mock database. For your production server with a real database, you can let the server choose the number of isolates to run. So start the server like this:\n\n```\n    aqueduct serve --port 3000 --isolates 1\n```\n\nThe server is now running on your machine. You can use [Postman](https://www.getpostman.com/) (see [docs](https://learning.getpostman.com/getting-started/) and [tutorial](https://www.youtube.com/watch?v=t5n07Ybz7yI)) to test the server now, or you can use one of the client apps that we will make in part three.\n\n![backend-mobile-2-3](//images.ctfassets.net/1es3ne0caaid/6OyYdQ0ng1ea5noxxMedcy/eb43f52374be3179130f22b48797b11a/backend-mobile-2-3.gif)\n\n### Supplemental code\n\nThe following is a model class that includes code to do JSON conversions. I’m including it here for your reference, but you don’t need to do anything with it today. For more help converting JSON to objects in Dart see [this post](https://stackoverflow.com/a/54657953).\n\n```dart\n    class Fruit {\n    \n      Fruit(this.fruit, this.color);\n    \n      // named constructor\n      Fruit.fromJson(Map\u003cString, dynamic\u003e json)\n          : fruit = json['fruit'] as String,\n            color = json['color'] as String;\n    \n      int id;\n      String fruit;\n      String color;\n    \n      // method\n      Map\u003cString, dynamic\u003e toJson() {\n        return {\n          'fruit': fruit,\n          'color': color,\n        };\n      }\n    }\n```\n\n### Further study\n\n\n- [Build RESTful Web APIs with Dart, Aqueduct and PostgreSQL #2: Routing and Controllers](https://youtu.be/K4EqGjMjCY0)\n- [Dart: First API And Create Controller | 1/7 | Aqueduct | Backend Course](https://youtu.be/XCOYxjoJDb8)\n\n\n## Conclusion\n\nIn this tutorial, we saw two ways to create a backend server. Although the details were somewhat different, the REST API that we implemented was exactly the same. If you don’t like Node.js or Server Side Dart, there are many more to choose from. (I was playing around with [Server Side Swift](https://stackoverflow.com/questions/47958172/server-side-swift-basic-client-server-communication-example-for-ios-and-android) for a while before I decided to pursue Flutter for the frontend.) Whatever server technology you choose, just implement the REST API that we used here.\n\nYou can find the server code for this lesson on [GitHub](https://github.com/suragch/backend_demo).\n\nIn the [last part](https://pusher.com/tutorials/backend-developer-part-3) of this tutorial we will learn how to make Android, iOS, and Flutter client apps that are able to communicate with the servers that we made in this lesson.","metaTitle":"Becoming a backend developer - Part 2: Building the server","metaDescription":"This is a guide for mobile app developers. In this three-part series we will cover all the basics of what it takes to become a backend developer. Create backends using Node and Dart, with mobile frontend examples using Android, Swift and Flutter. In part two, build backends with Node and Dart."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4jn7xUIcCX451DvTdSWgjO","type":"Entry","createdAt":"2019-03-21T16:19:33.774Z","updatedAt":"2019-03-21T16:19:33.774Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Creating a Laravel logger - Part 2: Creating a Pusher logger package","url":"laravel-logger-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/logger","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}}],"reviewDate":"2019-03-21","description":"In this six-part series, build a Laravel error logging service. You will create a custom Laravel package to include in Laravel apps, along with web, Android and iOS frontends. Alerts will publish in realtime, featuring push notifications to mobile. In part two, create the logger package.","prerequisite":"For this part of the series, you will need PHP 7.13+, Laravel 5.7+ and Composer installed on your machine.","content":"In this tutorial, we will build a Laravel package from scratch to help us dispatch logs to Pusher. All logs will be sent to Pusher Channels but error logs will be sent both to [Pusher Channels](https://pusher.com/channels) and [Pusher Beams](https://pusher.com/beams). Let’s dig in!\n\nThis is the second part of our six-part series on building a logging monitoring system. In the [first part](https://pusher.com/tutorials/laravel-logger-part-1), we created the shell for the Laravel application. The application has the UI that will help us manually dispatch logs.\n\n## Requirements\n\nTo follow along with this series you need the following things:\n\n\n- Completed previous parts of the series.\n- Laravel installed on your local machine. [Installation guide](https://laravel.com/docs/5.7/installation).\n- Knowledge of PHP and the Laravel framework.\n- Composer installed on your local machine. [Installation guide](https://getcomposer.org/doc/00-intro.md#installation-linux-unix-macos).\n- [Android Studio](https://developer.android.com/studio/install) \u003e= 3.x installed on your machine (If you are building for Android).\n- Knowledge of Kotlin and the Android Studio IDE.\n- [Xcode](https://developer.apple.com/xcode/) \u003e= 10.x installed on your machine (If you are building for iOS).\n- Knowledge of the Swift programming language and the Xcode IDE.\n\n\n## Creating our Laravel package\n\nThe first thing we will do is create a new folder to store the package. To do this `cd` to the project you started from the first part and create a new `packages` folder by running this on your terminal:\n\n```\n    $ mkdir packages\n```\n\nThis creates a new folder named `packages`. Next, we will create the main package folder based on the name of our package. Our package will be called `PusherLogger`. Create the folder like this:\n\n```\n    $ cd packages\n    $ mkdir PusherLogger\n```\n\nAfter creating the folder, we will start adding files to the folder. The first file we need is the `composer.json` file. This file will contain information about our package like the name, description, dependencies, and other properties. To generate this file, `cd` to the `PusherLogger` directory and run this command:\n\n```\n    $ composer init\n```\n\nThis initiates the composer config generator that will request information about your package. Follow the wizard to provide information about your package. At the end of it, your `composer.json` file should look similar to this:\n\n```json\n    {\n        \"name\": \"package/pusher-logger\",\n        \"description\": \"A package to distribute logs to Pusher\",\n        \"type\": \"library\",\n        \"authors\": [\n            {\n                \"name\": \"Neo Ighodaro\",\n                \"email\": \"neo@creativitykills.co\"\n            }\n        ],\n        \"require\": {}\n    }\n```\n\n\u003e You should change `package` in the `name` property to your own name.\n\nNext, we will add dependencies needed for package. We will add it to the the `require` object of the `composer.json` file. Add the dependencies like so:\n\n```json\n    {\n        // [...]\n        \n        \"require\": {\n          \"php\": \"\u003e=7.1.3\",\n          \"illuminate/support\": \"~5\",\n          \"monolog/monolog\": \"^1.24.0\",\n          \"pusher/pusher-php-server\": \"^3.2\",\n          \"pusher/pusher-push-notifications\": \"^1.0\"\n        }\n    }\n```\n\nFor this package, we require PHP `7.1.3`  and up, the Pusher channel package, and Pusher push notifications package to help us broadcast the logs to Pusher.\n\nNext, let’s instruct the package where it should load the files from. Add the snippet below to the `composer.json` file:\n\n```json\n    {\n        // [...]\n        \n        \"autoload\": {\n            \"psr-4\": {\n                \"PackageNamespace\\\\PusherLogger\\\\\": \"src/\"\n            }\n        },\n        \"autoload-dev\": {\n            \"psr-4\": {\n                \"PackageNamespace\\\\PusherLogger\\\\Tests\\\\\": \"tests\"\n            }\n        },\n        \"extra\": {\n            \"laravel\": {\n                \"providers\": [\n                    \"PackageNamespace\\\\PusherLogger\\\\PusherLoggerServiceProvider\"\n                ],\n                \"aliases\": {\n                    \"PusherLogger\": \"PackageNamespace\\\\PusherLogger\\\\PusherLogger\"\n                }\n            }\n        }\n    }\n```\n\n\u003e You can use a different camelcase namespace from `PackageNamespace` if you wish. Just remember to replace the namespace everywhere you changed it below.\n\nNow we have instructed Composer’s autoloader how to load files from a certain namespace. This tells the package to look out for the `/src` directory for the package files. This directory is not available yet so create the folder in your `PusherLogger` folder. You can do that by running this command:\n\n```\n    $ mkdir src\n```\n\nNavigate to the `src` folder and create two files. First we will create the `PusherLoggerServiceProvider.php` file and paste the following into it:\n\n```php\n    \u003c?php // File: ./src/PusherLoggerServiceProvider.php\n    \n    namespace PackageNamespace\\PusherLogger;\n    \n    use Pusher\\Pusher;\n    use Illuminate\\Support\\ServiceProvider;\n    use Pusher\\PushNotifications\\PushNotifications;\n    \n    class PusherLoggerServiceProvider extends ServiceProvider\n    {\n        /**\n         * Bootstrap the application services.\n         *\n         * @return void\n         */\n        public function boot()\n        {\n          //\n        }\n        \n        /**\n         * Register the application services.\n         *\n         * @return void\n         */\n        public function register()\n        {\n          //\n        }\n    }\n```\n\n\u003e You can replace `PackageNamespace` with your own namespace.\n\n\n\u003e Service providers are the central place of all Laravel application bootstrapping. Your own application, as well as all of Laravel's core services are bootstrapped via service providers. - [Laravel documentation](https://laravel.com/docs/5.7/providers)\n\nThis class extends the `Illuminate\\Support\\ServiceProvider` class. Our class contains two methods - `register` and `boot`. The `boot` method loads event listeners, routes, or any other piece of functionality while the `register` method only bind things into the service container.\n\nInside a service provider class, the `app` container can be accessed via the `$app` property. So in our `PusherLoggerServiceProvider` class we will bind an alias `pusher-logger` to the `PusherLogger` class. Update the `register` method like this:\n\n```php\n    \u003c?php // File: ./src/PusherLoggerServiceProvider.php\n    \n    // [...]\n    \n    class PusherLoggerServiceProvider extends ServiceProvider\n    {\n      // [...]\n      \n      public function register()\n      {\n          $this-\u003eapp-\u003ebind('pusher-logger', function () {\n              $config = config('broadcasting.connections.pusher');\n              \n              $key = $config['key'] ?? '';\n              $secret = $config['secret'] ?? '';\n              $app_id = $config['app_id'] ?? '';\n              \n              $pusher = new Pusher($key, $secret, $app_id, [\n                  'useTLS' =\u003e true,\n                  'encrypted' =\u003e true,\n                  'cluster' =\u003e $config\\['options'\\]['cluster'] ?? '',\n              ]);\n              \n              $beams = new PushNotifications([\n                  'secretKey' =\u003e $config\\['beams'\\]['secret_key'] ?? '',\n                  'instanceId' =\u003e $config\\['beams'\\]['instance_id'] ?? '',\n              ]);\n              \n              return new PusherLogger($pusher, $beams);\n          });\n      }\n    }\n```\n  \nAbove, we are binding `pusher-logger` to the `Closure` above. Inside the `Closure`, we are registering an instance of a `PusherLogger` class, which we will create later. This class receives an instance of a configured `Pusher` object, and a configured `PushNotifications` object. Since we are using Laravel’s [service container](https://laravel.com/docs/5.7/container#binding), it means anytime we try to use the `pusher-logger` service, we will get a `PusherLogger` instance with both Pusher and Push Notifications configured.\n\nNext, let us create our second class. The class will be a [Facade](https://laravel.com/docs/5.7/facades). A Facade is one of the architecture concepts Laravel provides. It is a static interface to classes that are available in the application's service container, meaning that our Facade classes represent another class bound in the service container.\n\nTo create this class, first make a directory named `Facades` in the `src` directory and then create the `PusherLogger.php` file inside it. When you have created the file, paste the following code into the file:\n\n```php\n    \u003c?php // File: ./src/Facades/PusherLogger.php\n    \n    namespace PackageNamespace\\PusherLogger\\Facades;\n    \n    use Illuminate\\Support\\Facades\\Facade;\n    \n    class PusherLogger extends Facade\n    {\n        protected static function getFacadeAccessor()\n        {\n            return 'pusher-logger';\n        }\n    }\n```\n\nIn the `getFacadeAccessor` method of the class above, we returned `pusher-logger` which corresponds to the alias we bound to the `PusherLogger` class earlier in the service provider.\n\nNow we can use the `PusherLogger` Facade as a proxy to the original `PusherLogger` class with the package logic. Let’s create the original `PusherLogger` class. In the `src` directory, create a new file named `PusherLogger.php` and paste the following code into it:\n\n```php\n    \u003c?php // File: ./src/PusherLogger.php\n    \n    namespace PackageNamespace\\PusherLogger;\n    \n    use Pusher\\Pusher;\n    use Pusher\\PushNotifications\\PushNotifications;\n    \n    class PusherLogger\n    {\n        /**\n         * @var \\Pusher\\Pusher\n         */\n        protected $pusher;\n        \n        /**\n         * @var \\Pusher\\PushNotifications\\PushNotifications\n         */\n        protected $beams;\n        \n        /**\n         * @var string\n         */\n        protected $event;\n    \n        /**\n         * @var string\n         */\n        protected $channel;\n    \n        /**\n         * @var string\n         */\n        protected $message;\n    \n        /**\n         * @var string\n         */\n        protected $level;\n    \n        /**\n         * @var array\n         */\n        protected $interests = [];\n    \n        // Log levels\n        const LEVEL_INFO  = 'info';\n        const LEVEL_DEBUG = 'debug';\n        const LEVEL_ERROR = 'error';\n    \n        /**\n         * PusherLogger constructor.\n         *\n         * @param \\Pusher\\Pusher $pusher\n         * @param \\Pusher\\PushNotifications\\PushNotifications $beams\n         */\n        public function __construct(Pusher $pusher, PushNotifications $beams)\n        {\n            $this-\u003ebeams = $beams;\n            \n            $this-\u003epusher = $pusher;\n        }\n    }\n```\n\nIn the snippet above, we declared some variables we will use later in the class. We also declared the class constructor to receive instances of the `Pusher` object and the `PushNotifications` object just as we did in the service provider binding above. \n\nWe also have some properties and constants for the class. We can use the constants outside the class when specifying the log level. This would make it easy to change the values later on if we wanted to.\n\nIn the same class, let’s define a some methods, which will be how we will set the other `protected` class properties. In the same file, paste the following code:\n\n```php\n    // File: ./src/PusherLogger.php\n    // [...]\n    \n    /**\n     * Sets the log message.\n     *\n     * @param  string $message\n     * @return self\n     */\n    public function setMessage(string $message): self\n    {\n        $this-\u003emessage = $message;\n        \n        return $this;\n    }\n    \n    /**\n     * Sets the log level.\n     *\n     * @param  string $level\n     * @return self\n     */\n    public function setLevel(string $level): self\n    {\n        $this-\u003elevel = $level;\n        \n        return $this;\n    }\n    \n    /**\n     * Sets the Pusher channel.\n     *\n     * @param  string $channel\n     * @return self\n     */\n    public function setChannel(string $channel): self\n    {\n        $this-\u003echannel = $channel;\n    \n        return $this;\n    }\n    \n    /**\n     * Sets the event name.\n     *\n     * @param  string $event\n     * @return self\n     */\n    public function setEvent(string $event): self\n    {\n        $this-\u003eevent = $event;\n    \n        return $this;\n    }\n    \n    /**\n     * Set the interests for Push notifications.\n     *\n     * @param  array $interests\n     * @return self\n     */\n    public function setInterests(array $interests): self\n    {\n        $this-\u003einterests = $interests;\n    \n        return $this;\n    }\n    \n    // [...]\n```\n\nAbove, we have defined some similar methods. They just set the corresponding `protected`  class properties and then return the class instance so they are chainable.\n\nNext, we will add other helper methods to be used in the package. Add the following methods to the `PusherLogger.php` class:\n\n```php\n    // File: ./src/PusherLogger.php\n    // [...]\n    \n    /**\n     * Quickly log a message.\n     *\n     * @param string $message\n     * @param string $level\n     * @return self\n     */\n    public static function log(string $message, string $level): self\n    {\n        return app('pusher-logger')\n            -\u003esetMessage($message)\n            -\u003esetLevel($level);\n    }\n    \n    /**\n     * Dispatch a log message.\n     *\n     * @return bool\n     */\n    public function send(): bool\n    {\n        $this-\u003epusher-\u003etrigger($this-\u003echannel, $this-\u003eevent, $this-\u003etoPushHttp());\n        \n        if ($this-\u003elevel === static::LEVEL_ERROR) {\n            $this-\u003ebeams-\u003epublishToInterests($this-\u003einterests, $this-\u003etoPushBeam());\n        }\n    \n        return true;\n    }\n    \n    // [...]\n```\n\nThe first method is a quick shorthand we can use when dispatching log messages and the second method is the method that dispatches log messages to the Pusher clients. In the `send` method, we are checking to see if the log level is an error level. If it is, we will also send a push notification so the administrator can be aware that an error has occurred.\n\nWhen creating a log, we need to set the channel, events and interests (when using Pusher Beams) in which the log would be sent to. Here’s an example of how we can use the logger:\n\n```php\n    use PackageNamespace\\PusherLogger\\PusherLogger;\n    \n    PusherLogger::log('Winter is Coming', PusherLogger::LEVEL_WARNING)\n            -\u003esetEvent('log-event')\n            -\u003esetChannel('log-channel')\n            -\u003esetInterests(['log-interest'])\n            -\u003esend()\n```\n\nThe final function in the snippet is the function that sends the data to Pusher. In the function, all logs are sent to Pusher Channels, but error logs are also sent to Pusher Beams so that the client can receive a notification.\n\nWhile defining the `send` function, we used two new methods that composes the data to be sent to Pusher Channels and Pusher Beams respectively. Add the methods to the same class like so:\n\n```php\n    // File: ./src/PusherLogger.php\n    // [...]\n    \n    public function toPushHttp()\n     {\n         return [\n             'title' =\u003e 'PusherLogger' . ' '. ucwords($this-\u003elevel),\n             'message' =\u003e $this-\u003emessage,\n             'loglevel' =\u003e $this-\u003elevel\n         ];\n     }\n    \n     public function toPushBeam()\n     {\n         return [\n             'apns' =\u003e [\n                 'aps' =\u003e [\n                     'alert' =\u003e [\n                         'title' =\u003e 'PusherLogger' . ' '. ucwords($this-\u003elevel),\n                         'body' =\u003e $this-\u003emessage,\n                         'loglevel' =\u003e $this-\u003elevel\n                     ],\n                 ],\n             ],\n             'fcm' =\u003e [\n                 'notification' =\u003e [\n                     'title' =\u003e 'PusherLogger' . ' '. ucwords($this-\u003elevel),\n                     'body' =\u003e $this-\u003emessage,\n                     'loglevel' =\u003e $this-\u003elevel\n                 ],\n             ],\n         ];\n    }\n```\n\n## Creating a log handler\n\nLaravel uses [Monolog](https://github.com/Seldaek/monolog), which is a powerful logging package for PHP. We can [create custom handlers](https://laravel.com/docs/5.7/logging#creating-monolog-handler-channels) for Monolog and so let’s do one that will be for our Pusher logger.\n\nCreate a new file in the `src`  directory of the package called `PusherLoggerHandler.php` and paste the following code:\n\n```php\n    \u003c?php // File: ./src/PusherLoggerHandler.php\n    \n    namespace PackageNamespace\\PusherLogger;\n    \n    use Monolog\\Logger;\n    use Monolog\\Handler\\AbstractProcessingHandler;\n    \n    class PusherLoggerHandler extends AbstractProcessingHandler\n    {\n        protected function write(array $record): void\n        {\n            $level = strtolower(Logger::getLevelName($record['level']));\n    \n            PusherLogger::log($record['message'], $level)\n                -\u003esetEvent('log-event')\n                -\u003esetChannel('log-channel')\n                -\u003esetInterests(['log-interest'])\n                -\u003esend();\n        }\n    }\n```\n\nAbove, we have the custom handler that will be hooked into our Laravel Monolog instance. When we do, logs will be automatically pushed to our Pusher application as needed. We will do that in the next part. \n\nThat’s all.\n\n\n## Conclusion\n\nIn this part of the series, we have been able to set up the logic we need to be able to push logs to Pusher. In the [next part](https://pusher.com/tutorials/laravel-logger-part-3) of the series, we will integrate this package with our Laravel application and see how everything will work together.\n\nThe source code is available on [GitHub](https://github.com/neoighodaro/logger). ","metaTitle":"Creating a Laravel logger - Part 2","metaDescription":"In this six-part series, build a Laravel error logging service. You will create a custom Laravel package to include in Laravel apps, along with web, Android and iOS frontends. Alerts will publish in realtime, featuring push notifications to mobile. In part two, create the logger package."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"QRNM2nbB5h8g4zlBUYGaR","type":"Entry","createdAt":"2019-03-19T17:36:04.012Z","updatedAt":"2020-06-15T16:02:14.641Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Becoming a backend developer - Part 1: Foundational concepts","url":"backend-developer-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"58WBWjhcWcuAMI6qIAyiC4","type":"Entry","createdAt":"2018-12-13T20:46:00.073Z","updatedAt":"2018-12-13T20:46:36.867Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Suragch","url":"suragch","email":"studymongolian@gmail.com","twitter":"https://twitter.com/suragch","github":"https://github.com/suragch","guestWriter":true}}],"projectRepo":"https://github.com/suragch/backend_demo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Q3oRmiXjOmcSmweY4gKY8","type":"Entry","createdAt":"2018-09-12T09:33:28.375Z","updatedAt":"2018-09-12T09:33:28.375Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flutter","url":"flutter","type":"framework","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1st5ugwNDbvlnFFHBadh5b","type":"Entry","createdAt":"2019-03-13T18:08:14.919Z","updatedAt":"2019-03-13T18:08:14.920Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Dart","url":"dart","type":"language"}}],"reviewDate":"2019-03-19","description":"This is a tutorial series for mobile app developers. In this three-part series, we will cover all the basics of what it takes to become a backend developer. You will create backends using Node and Dart, with mobile frontend examples using Android, Swift and Flutter. In part one, cover key concepts around APIs.","prerequisite":"You need experience in at least one of Android, iOS or Flutter development.","content":"This is a guide for mobile app developers. In this three-part series we will cover all the basics of what it takes to become a backend developer.\n\n\n- Part 1: Foundational concepts\n- Part 2: Building the server\n- Part 3: Connecting to the server from a mobile app\n\n\n## Introduction\n\nSo you have some experience developing mobile apps for Android or iOS. You may even have a few apps on Google Play or in the App Store. More and more, though, you are getting ideas for new apps that would require a server backend. The problem is that you don't know how to do server programming. Maybe you work for a small company or maybe you’re on your own, and you don't have the resources to hire a backend developer. Now you've decided that it's finally time to take the leap and learn how to do it yourself. If that's you, then you've come to the right place.\n\nIn this series I will take you through everything you need to know to get started building a backend server and connecting it to your mobile apps. There are a myriad of choices of platforms and frameworks for both the backend and frontend. I will show you how to build two backend servers (Node.js and Server-Side Dart) and three frontend apps (Android, iOS, and Flutter). Choose one backend server and one frontend app to follow along with. \n\nThe purpose of telling you how to do the same thing on different platforms is so that you can see that the process is basically the same no matter what you choose. Even if you decide on a different technology, you can still follow along and just Google how to adapt it to your particular situation.\n\nNo matter what platforms you choose for your backend and frontend, there are a few foundational topics related to client-server communication that are important to know. They include URIs, HTTP, REST APIs, and JSON. If you are already familiar with these topics, feel free to skip directly to Part 2: Building the server.\n\n\n## URI\n\nA URI (Uniform Resource Identifier) is an address for a resource. A resource, for example, could be a webpage or a file or a database row. A specific type of URI is a URL. (See [difference between URI, URL, and URN](https://stackoverflow.com/questions/176264/what-is-the-difference-between-a-uri-a-url-and-a-urn).) You’re probably familiar with URIs from your mobile app development and certainly familiar with URLs from web browsers, but you might not be aware of their components, especially the query string.\n\n![backend-mobile-1-1](//images.ctfassets.net/1es3ne0caaid/5GMcbCR4mwdfYzuWPd1v8Z/89f52b49dc6a2d01b0d676bafa2b7e6d/backend-mobile-1-1.png)\n\nThe query string starts with a `?` question mark and is followed by parameters. The parameters are separated by `\u0026` ampersands. So in the example above we have two parameters:\n\n\n- `q = flutter`\n- `language = en`\n\nSee [this page](https://doepud.co.uk/blog/anatomy-of-a-url) for more explanation about the parts of a URI. \n\n### URI example\n\nWhen our client app accesses resources on our server, it will use a URI to reference them. Here is an actual example that we will use:\n\n```\n    http://localhost:3000/0\n```\n\nI’ll talk about the `http` protocol part of the URI in the next section. We’ll be using `localhost` (that is, `127.0.0.1`) to refer to our own machine, where the server will be running. This will simplify the development process. Then we will (somewhat arbitrarily) choose port `3000` to communicate over. Our path is simply the root `/`. We could have used something like `/fruit` or `/items`. In fact, a more complex server app would probably define several different paths (also known as routes) that clients could connect to to access different types of resources. In our minimal server, though, we’ll just use one path. The final `0` at the end of the path will be used as a parameter to refer to the ID of a database row. (Actually for us it will refer to the index of an array that is pretending to be a database, but the client doesn’t have to know that.)\n\n## HTTP\n\nHTTP (Hypertext Transfer Protocol) is a set of rules for how to transfer data on the web. You've seen `http://` in web addresses, of course. Now you’re going to use the same protocol to transfer data between your app and the server.\n\n### Verbs\n\nThe primary HTTP verbs that we are going to be using are:\n\n\n- `GET` - for requesting data from the server\n- `POST` - for sending new data to the server\n- `PUT` - for updating data on the server (fully replace an existing resource)\n- `PATCH` - for updating data on the server (partially modify an existing resource)\n- `DELETE` - for deleting data on the server\n\nYou will note that these are very similar to the CRUD operations of a database:\n\n\n- Create -\u003e `POST`\n- Read -\u003e `GET`\n- Update -\u003e `PUT` or `PATCH`\n- Delete -\u003e `DELETE`\n\nThese HTTP verbs are sent by clients to the server. This is known as a **request**. After the server receives a request it processes it and then sends back a **response** to the client. Both the request and the response contain metadata known as **headers**. The primary data itself is sent in the **body**. \n\n### Status codes\n\nOne of the headers is the status code. When a client makes an HTTP request, the server should send back an HTTP status code in its response. This lets the client know if the request was successful or not. You’ve seen the 404 Not Found response whenever you click on a broken link. Here are some more that you should get familiar with:\n\n\n- 1xx Informational\n- 2xx Success\n\n      - 200 OK\n      - 201 Created\n\n- 3xx Redirection\n\n      - 301 Moved Permanently\n\n- 4xx Client Error\n\n      - 400 Bad Request\n      - 401 Unauthorized\n      - 403 Forbidden\n      - 404 Not Found\n\n- 5xx Server Error \n\n      - 500 Internal Server Error\n      - 502 Bad Gateway\n\nIt’s your responsibility as a backend developer to choose the right code to add in your response to a client request. You can read more about HTTP status codes [here](https://www.restapitutorial.com/httpstatuscodes.html) and [here](https://restfulapi.net/http-status-codes/). \n\n### Content type\n\nAnother header is `Content-Type`, which is the Media Type (formerly known as MIME type). This tells us the type of data that is in the body. It could be plain text or HTML or JSON. Here are a few examples as they look encoded:\n\n\n- `application/json`\n- `application/x-www-form-urlencoded`\n- `image/png`\n- `text/plain`\n- `text/html`\n\nHere is a [complete list](https://www.iana.org/assignments/media-types/media-types.xhtml). We will be using JSON ( `application/json` ) primarily. I’ll explain it more in a little while.\n\n### Examples\n\nLet’s look at a few examples of the raw text of some HTTP requests. The following is a GET request:\n\n```\n    GET 3000/0\n    Content-Type: application/json\n    cache-control: no-cache\n    Postman-Token: 00572d5b-a2ec-4195-8436-ef1e797c0751\n    User-Agent: PostmanRuntime/7.6.0\n    Accept: */*\n    Host: localhost:3000\n    accept-encoding: gzip, deflate\n```\n\nNotice that it starts with the HTTP verb and URI path. The rest of the lines here are headers. I used [Postman](https://www.getpostman.com/) to make the request so that I could get the raw text. \n\nThis is the response that the server gave to that GET request:\n\n```\n    HTTP/1.1 200\n    status: 200\n    X-Powered-By: Express\n    Content-Type: application/json; charset=utf-8\n    Content-Length: 31\n    ETag: W/\"1f-xulzIcqO6GqXGwKlplM3A8YgRg8\"\n    Date: Fri, 08 Mar 2019 19:30:16 GMT\n    Connection: keep-alive\n    \n    {\"fruit\":\"apple\",\"color\":\"red\"}\n```\n\nYou can see that the status code is 200. Everything is OK. The content type of the body is JSON. You can find the body at the end, separated from the headers by a single blank line.\n\nHere is a POST request:\n\n```\n    POST 3000\n    Content-Type: application/json\n    cache-control: no-cache\n    Postman-Token: 6b985c28-ef59-4dac-930c-63b3245de3f1\n    User-Agent: PostmanRuntime/7.6.0\n    Accept: */*\n    Host: localhost:3000\n    accept-encoding: gzip, deflate\n    content-length: 46\n    \n    { \"fruit\": \"kiwi\", \"color\": \"purple\" }\n```\n\nAnd here is the response from the server:\n\n```\n    HTTP/1.1 200\n    status: 200\n    X-Powered-By: Express\n    Content-Type: text/html; charset=utf-8\n    Content-Length: 20\n    ETag: W/\"14-gSUAeNN7vCHjCoiKRj0ziSuiiQI\"\n    Date: Fri, 08 Mar 2019 19:34:18 GMT\n    Connection: keep-alive\n    \n    Item added with id 2\n```\n\nYou don’t need to understand the details of all that raw text. The frameworks that we are going to use to interact with the HTTP protocol will hide most of it from us. I just share these examples with you to let you know what is happening under the hood. If you do need to get at the headers, though, you will be able to access them from within the framework.\n\n\n## REST API\n\n### REST\n\nWhen we do our client-server communication, we will be using what is called a REST (or RESTful) API. (REST stands for Representational State Transfer, but I’ve never found it very helpful to know that.) In addition to using the HTTP protocol, REST adds some additional rules for how the client and the server should interact. As a beginner, remember these important REST principles:\n\n\n- The server should not save any state about a client.\n- Only use the HTTP verbs as they are defined. For example, while it is technically possible to create a resource on the server by sending the data through a GET request, REST says we should use a POST request for creating new resources.\n\nThere is a lot more to REST, but you don't need to understand everything right now. Check out [this](https://www.youtube.com/watch?v=Q-BpqyOT3a8) and [this](https://www.youtube.com/watch?v=0oXYLzuucwE\u0026index=1\u0026list=PL55RiY5tL51q4D-B63KBnygU6opNPFk_q) if you are interested.\n\n### API\n\nThe API is the set of methods that we will handle on the server. It’s our own personal protocol for communicating between the client and the server. Once we have our API defined, it doesn't matter what is running on the server or who the clients are. This is a prime example of [clean architecture](https://pusher.com/tutorials/clean-architecture-introduction).\n\n![backend-mobile-1-2](//images.ctfassets.net/1es3ne0caaid/5fFYkzDLBS2G0hqW7s8kII/cac6226ef0211c8b4c10e6234705866e/backend-mobile-1-2.png)\n\n### Our API\n\nThe REST API is defined in terms of HTTP verbs ( `GET`, `POST`, `PUT`, etc.) along with a URI path. This is the API that we will use for our server and clients in the second and third parts of this series:\n\n```\n    GET http://localhost:3000/              // get all items\n    GET http://localhost:3000/id            // get item at id\n    POST http://localhost:3000/             // create new item\n    PUT http://localhost:3000/id            // replace item at id\n    PATCH http://localhost:3000/id          // update item at id\n    DELETE http://localhost:3000/id         // delete item at id\n```\n\n## JSON\n\nWhen communicating with a server we need to pass data back and forth. This becomes more difficult when we want to pass complex objects (that is, most anything besides strings, numbers, and booleans). Since we can't pass an object directly using in the HTTP protocol, we can convert it to a string (also known as serialization), transfer it in the body of an HTTP message, and then convert it from a string back to an object.\n\nA common way to do that is with JavaScript Object Notation (JSON). We’re not limited to JavaScript, though. There are JSON libraries for Java, Kotlin, Swift, Objective-C, Dart, and many other languages.\n\n### Example\n\nJSON formats the data in a class to a list of key-value pairs. Here is what a simple User object would look like when converted to JSON:\n\n```json\n    {\n       \"id\" : 3,\n       \"name\" : \"Mary\",\n    }\n```\n\nNotes:\n\n- The curly braces represent an object.\n- The keys and any string values need double quotes. Other values don’t.\n- JSON encodes objects, arrays, strings, numbers, booleans, and nulls. \n- Objects and arrays can be nested.\n- See the [documentation](https://www.json.org/) for a full explanation.  Here are [a few more examples](https://medium.com/@studymongolian/easy-json-examples-7c70785b4707?source=friends_link\u0026sk=dbca368da83bc2273c9a6073159c8c39).\n\nWhite space does not matter. So this:\n\n```json\n    {\"fruit\":\"apple\",\"color\":\"red\"}\n```\n\nis the same as this:\n\n```json\n    {\n      \"fruit\": \"apple\",\n      \"color\": \"red\"\n    }\n```\n\n### In a model object\n\nWhen you create a model object, it’s convenient to add a constructor and helper method that can serialize and deserialize (encode and decode) between the object and JSON. For example, here is a model object in Dart. The constructor creates an object from a JSON map. And a JSON map can be created from the object using the `toJson()` method. \n\n```dart\n    class Fruit {\n    \n      int id;\n      String fruit;\n      String color;\n    \n      Fruit(this.fruit, this.color);\n    \n      // named constructor\n      Fruit.fromJson(Map\u003cString, dynamic\u003e json)\n          : fruit = json['fruit'],\n            color = json['color'];\n    \n      // method\n      Map\u003cString, dynamic\u003e toJson() {\n        return {\n          'fruit': fruit,\n          'color': color,\n        };\n      }\n    }\n```\n\nAs I said, all of the platforms and languages have libraries for converting between a raw JSON string (which is what you have in the HTTP body) and a Map or Dictionary or whatever key-value data structure is used in your language.\n\n\n## Conclusion\n\nYou now have all of the basic background knowledge you need to start building your backend server. In part two I’ll show you how to make the server, and in part three we’ll make a simple frontend app to connect to the server. These will implement the REST API that we learned about above.\n\nThe code for the servers and for the frontend apps is on [GitHub](https://github.com/suragch/backend_demo).","metaTitle":"Becoming a backend developer - Part 1: Foundational concepts","metaDescription":"This is a guide for mobile app developers. In this three-part series we will cover all the basics of what it takes to become a backend developer. You will create backends using Node and Dart, with mobile frontend examples using Android, Swift and Flutter. In part one, cover key concepts around APIs."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5xDBTJKeJXrmXfcEF1UMoh","type":"Entry","createdAt":"2019-03-19T17:31:02.421Z","updatedAt":"2019-03-19T17:31:02.421Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Creating a Laravel logger - Part 1: Getting started","url":"laravel-logger-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/logger","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}}],"reviewDate":"2019-03-19","description":"In this six-part series, build a Laravel error logging service. You will create a custom Laravel package to include in Laravel apps, along with web, Android and iOS frontends. Alerts will publish in realtime, featuring push notifications to mobile. In part one, build the log dispatcher.","prerequisite":"For this part of the series, you will need PHP 7.13+, Laravel 5.7+ and Composer installed on your machine.","content":"In this tutorial series, we will see how we can create a simple realtime monitoring application. It will have mobile applications that will be able to see logs as they happen on your application and thus make it easier to find out what is wrong with an application and fix it.\n\nWhen building applications, logging is an essential part of diagnosing the problems with the application. Many times, applications can fail when a client is viewing the website or application. These incidents can often go unnoticed especially if it is not reported by the client, which happens a lot.\n\nMost languages and frameworks come with in-built logging systems that will help you diagnose problems with your application. However, these logs are stored on the filesystem and will require logging into your server and searching for the log messages, which is inconvenient. There are services like [BugSnag](https://bugsnag.com) and [Sentry](https://sentry.io) that offer log monitoring as a service which makes it easy to work with application logs. \n\nThe system will include a log dispatcher that will work hand in hand with a Laravel package to distribute logs to various clients (a web dashboard, an Android app, an iOS app) in realtime. For this first part, we will build the dispatcher. The app will contain a simple page with a modal that has a form. \n\nHere’s a demo of how the page will look and the modal behavior:\n\n![laravel-log-1-1](//images.ctfassets.net/1es3ne0caaid/nvHlteXI4Kbxasz7yd7aR/f17aef7a58276ce9b38b57b4ce029890/laravel-log-1-1.gif)\n\n## Requirements\n\nTo follow along with this series you need the following things:\n\n- Laravel installed on your local machine. [Installation guide](https://laravel.com/docs/5.7/installation).\n- Knowledge of PHP and the Laravel framework.\n- Composer installed on your local machine. [Installation guide](https://getcomposer.org/doc/00-intro.md#installation-linux-unix-macos).\n- [Android Studio](https://developer.android.com/studio/install) \u003e= 3.x installed on your machine (If you are building for Android).\n- Knowledge of Kotlin and the Android Studio IDE.\n- [Xcode](https://developer.apple.com/xcode/) \u003e= 10.x installed on your machine (If you are building for iOS).\n- Knowledge of the Swift programming language and the Xcode IDE.\n\n\n## Setting up \n\nLet’s start setting up our environment so we can build the logging dispatcher.\n\n### Installing PHP\n\n\u003e If you already have PHP 7.1.3 or above installed on your machine, you can skip this section.\n\nThe first step for our setup is to install PHP. This can be more complicated than usual depending on your machine. So, in order to not unnecessarily elongate this post, I will just provide explicit resources for that.\n\nTo install PHP:\n\n- For Windows users, use [this](https://www.sitepoint.com/how-to-install-php-on-windows/) guide.\n- For Ubuntu users, use [this](https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu-16-04) guide.\n- For Mac, PHP usually comes pre-installed. You can verify using this command:\n\n```\n    $ php -v\n```\n\nIf you don’t have it installed or it’s a lower version that required, you can use [this post](https://medium.com/@romaninsh/install-php-7-2-xdebug-on-macos-high-sierra-with-homebrew-july-2018-d7968fe7e8b8) as a guide to installing PHP on your Mac.\n\n### Installing Composer and the Laravel installer\n\n\u003e If you have already installed the Laravel CLI, you can skip this part entirely.\n\nNext, let’s install Laravel. Laravel utilizes Composer to manage its dependencies so, before using Laravel, we have to make sure Composer is installed. If you don’t have it, you can follow the following steps to get it installed:\n\nRun this command in your terminal to download the composer installer:\n\n```\n    // For Mac\n    $ php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\"\n    \n    // For Linux\n    $ curl -sS https://getcomposer.org/installer -o composer-setup.php\n```\n\n\u003e If you are using a Windows machine, you can use the composer setup file [here](https://getcomposer.org/Composer-Setup.exe).\n\nNext, run this command to verify your downloaded file:\n\n```\n    $ php -r \"if (hash_file('sha384', 'composer-setup.php') === '48e3236262b34d30969dca3c37281b3b4bbe3221bda826ac6a9a62d6444cdb0dcd0615698a5cbe587c3f0fe57a54d8f5') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;\"\n```\n\nFrom the snippet above, you are verifying the hash of the downloaded installer. If the hash matches the expected hash from Composer. You can find the current Composer hash [here](https://composer.github.io/pubkeys.html).\n\nNext, let’s install composer globally so we can run the command from anywhere. To do this, run the following command on your terminal:\n\n```\n    $ php composer-setup.php --install-dir=/usr/local/bin --filename=composer\n```\n\nThis command installs composer in the `/usr/local/bin` directory.\n\n\n\u003e If you are using Linux, you might want to add `sudo` before the `php` command so the command is run as the `root` user.\n\nNext, run the command below to install the Laravel installer: \n\n```\n    $ composer global require laravel/installer\n```\n\nAfter the installation is complete, you should be able to run the `laravel` command on your terminal. Try this to verify:\n\n```\n    $ laravel -V\n```\n\nIf you have installed it successfully, you would see the version of the Laravel installer currently installed on your machine. \n\n## Building our app\n\nNow that we have the Laravel installer, let’s create a new Laravel application. To create a new Laravel application, run the following command:\n\n```\n    $ laravel new logger-app\n```\n\nThis command will create a new Laravel application in a directory named `logger-app`. \n\nAlternatively, you can create a Laravel app using the composer `create-project` command like this:\n\n```\n    $ composer create-project --prefer-dist laravel/laravel logger-app\n```\n\nNow you can `cd` to your applications directory and run the following command:\n\n```\n    $ php artisan serve\n```\n\n![laravel-log-1-2](//images.ctfassets.net/1es3ne0caaid/6XYpNStMGJRjQIv7MXGusD/a9998eea0ba5f9eed21e8e1c9740aef6/laravel-log-1-2.png)\n\nThis will start a local PHP server on port 8000. Now, you can visit the URL http://localhost:8000 and you will see the Laravel welcome screen.\n\n![laravel-log-1-3](//images.ctfassets.net/1es3ne0caaid/18qfpZpAYIfVWEODINv6Qx/537dbb83900ea8dc6312e5e6ad9b4ea2/laravel-log-1-3.png)\n\nThe page rendered here is the default view of newly created apps. This route is registered in the `routes/web.php`  file. If you look at the single route there, you should see that it loads the `welcome.blade.php` view. All views are in the `/resources/views/` directory. For the sake of brevity, let’s update this view instead of creating a new one.\n\nFirst, we need to import the app CSS file, add the link to the file in the `\u003chead\u003e` tag like so:\n\n```php\n    \u003c!-- File: ./resources/views/welcome.blade.php --\u003e\n    \u003c!-- [...] --\u003e\n    \u003chead\u003e\n        \u003c!-- Leave existing styles --\u003e\n        \u003c!-- [...] --\u003e\n        \u003clink rel=\"stylesheet\" href=\"{{ asset('css/app.css') }}\"\u003e \n        \u003cmeta name=\"csrf-token\" content=\"{{ csrf_token() }}\" /\u003e\n    \u003c/head\u003e\n```\n\nAbove, we are using the `asset` function to load the asset from the `public/css` directory. It is recommended that you use the `asset` function as it will add the full URL to the asset.\n\n![laravel-log-1-4](//images.ctfassets.net/1es3ne0caaid/3QaBwNbV3ucuVaOcWd0gHK/1ce5de7a3fe769f7c796e7e50c827683/laravel-log-1-4.png)\n\nNext, let’s replace the design with ours. Still in the `welcome.blade.php` file, replace the code in the `\u003cbody\u003e` tag with this:\n\n```php\n    \u003c!-- File: ./resources/views/welcome.blade.php --\u003e\n    \u003c!-- [...] --\u003e\n    \u003cdiv class=\"flex-center position-ref full-height\"\u003e\n        \u003cdiv class=\"content\"\u003e\n            \u003cdiv class=\"title m-b-md\"\u003e\n              Laravel Logger\n            \u003c/div\u003e\n    \n            \u003cdiv class=\"button\"\u003e\n              \u003cbutton type=\"button\" class=\"btn btn-lg btn-primary\" data-toggle=\"modal\" data-target=\"#exampleModal\"\u003e\n                Send Log\n              \u003c/button\u003e\n            \u003c/div\u003e\n            \n            \u003c!-- Modal will be inserted here --\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e   \n    \n    \u003cscript src=\"{{ asset('js/app.js') }}\"\u003e\u003c/script\u003e     \n    \u003c!-- [...] --\u003e\n```\n\nAbove, we replaced the HTML on the previous page with ours. We also added a button that when clicked a modal, which we will create soon, will open. In the snippet, we added comments for where other parts of the code will be added, you should watch out for that too.\n\nNow for the modal, in the same file where it specifies the “Modal will be inserted here” add the following code:\n\n```php\n    @includeIf('partials.modal')\n```\n\nThis will include the view `resources/views/partials/modal.blade.php` if it exists. Right now it does not so create it and paste the following code into the file:\n\n```php\n    \u003c!-- File: ./resources/views/partials/modal.blade.php --\u003e\n    \u003cdiv class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\"\u003e\n        \u003cdiv class=\"modal-dialog\" role=\"document\"\u003e\n            \u003cdiv class=\"modal-content\"\u003e\n                \u003cdiv class=\"modal-header\"\u003e\n                    \u003ch5 class=\"modal-title\" id=\"exampleModalLabel\"\u003e\n                        Send Log\n                    \u003c/h5\u003e\n                    \u003cbutton type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"\u003e\n                    \u003cspan aria-hidden=\"true\"\u003e\u0026times;\u003c/span\u003e\n                    \u003c/button\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"modal-body\"\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"exampleFormControlSelect1\"\u003eLog Level\u003c/label\u003e\n                        \u003cselect name=\"level\" class=\"form-control\" id=\"level\"\u003e\n                            \u003coption value=\"info\"\u003eInfo\u003c/option\u003e\n                            \u003coption value=\"warning\"\u003eWarning\u003c/option\u003e\n                            \u003coption value=\"error\"\u003eError\u003c/option\u003e\n                        \u003c/select\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"exampleFormControlTextarea1\"\u003eLog Message\u003c/label\u003e\n                        \u003ctextarea name=\"message\" class=\"form-control\" id=\"message\" rows=\"2\"\u003e\u003c/textarea\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"modal-footer\"\u003e\n                    \u003cbutton type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\"\u003eClose\u003c/button\u003e\n                    \u003cbutton type=\"button\" class=\"btn btn-danger\"\u003eDispatch\u003c/button\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nThe modal content is made of three sections, the header, body and, footer. The header shows a description of the modal. Next, is the body which contains the form. This contains an input for the log message and the log level (warning, error, or info). Lastly, the footer has two buttons: a button to dispatch (send) the form details and another to close the modal.\n\nWith this, we have finished building the frontend of the app. Now, we can run our app, and it should look like this:\n\n![laravel-log-1-1](//images.ctfassets.net/1es3ne0caaid/nvHlteXI4Kbxasz7yd7aR/f17aef7a58276ce9b38b57b4ce029890/laravel-log-1-1.gif)\n\n## Conclusion\n\nIn this first tutorial of the series, we have built a logger app that will trigger logs using Laravel. The app dispatches logs of different levels. For now, this app does not actually send the log anywhere or even generate it. \n\nIn the next [part](https://pusher.com/tutorials/laravel-logger-part-2), we will build a package that will send the log messages to Pusher. We will then link the package to this app to make it work then the **Dispatch** button on the modal is pressed.\n\nThe source code is available on [GitHub](https://github.com/neoighodaro/logger).","metaTitle":"Creating a Laravel logger - Part 1: Getting started","metaDescription":"In this six-part series, build a Laravel error logging service. You will create a custom Laravel package to include in Laravel apps, along with web, Android and iOS frontends. Alerts will publish in realtime, featuring push notifications to mobile. In part one, build the log dispatcher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2FgED8BAgQc3tzjemsWGko","type":"Entry","createdAt":"2019-03-12T17:07:19.493Z","updatedAt":"2019-03-12T17:07:19.493Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a shopping cart with Kotlin - Part 3: Adding reactivity to the app","url":"shopping-cart-kotlin-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Ok7hdNlHGsaAME2MCGEeq","type":"Entry","createdAt":"2018-09-17T17:53:10.446Z","updatedAt":"2018-09-17T17:53:10.446Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ethiel Adiassa","url":"ethiel-adiassa","email":"ethiel97@gmail.com","twitter":"https://twitter.com/ethiel97","github":"https://github.com/ethiel97","guestWriter":true}}],"projectRepo":"https://github.com/Ethiel97/kotlin-shoppingCart/tree/part-three","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}}],"reviewDate":"2019-03-12","description":"This three-part series will walk you through building a shopping cart for an Android app using Kotlin. In part three, use RxKotlin to make the app UI reactive, and add the final features to the app.","prerequisite":"You will need an Android development environment set up on your machine. Some knowledge of Android development is required.","content":"## Introduction\n\nIn this last part of the tutorial series, we will add some reactivity to our app using RxKotlin, and complete our shopping cart.\n\n## Prerequisites\n\nIn order to follow along with the tutorial, make sure you meet the following requirements:\n\n- [IntelliJ IDEA](https://www.jetbrains.com/idea/) or [Android Studio](https://developer.android.com/studio/index.html).\n- Experience with the Kotlin language\n- Having followed and completed the previous parts of the tutorial series: [Part 1](https://pusher.com/tutorials/shopping-cart-kotlin-part-1) [Part 2](https://pusher.com/tutorials/shopping-cart-kotlin-part-2)\n- An emulator or physical device (for app testing/debugging purpose)\n\n\n## What’s RxKotlin?\n\nYou may not know what RxKotlin  is about. Well I cannot blame you for that 🙂 . The first thing you should know is that RxKotlin is about Reactive programming with Kotlin. And you may also ask what is reactive programming, right ? \n\nAccording to [Wikipedia](https://en.wikipedia.org/wiki/Reactive_programming),\n\n\u003e **Reactive programming** is a [programming paradigm](https://en.wikipedia.org/wiki/Programming_paradigm) oriented around [data flows](https://en.wikipedia.org/wiki/Dataflow_programming) and the propagation of change. This means that it should be possible to express static or dynamic data flows with ease in the programming languages used, and that the underlying execution model will automatically propagate changes through the data flow\n\nThis paradigm is built on the ideology of the observable pattern, and provides us with many tools to build reactive apps. We have essentially three components involved in  reactive programming:\n\n\n- Observers: an observer subscribes to an observable.\n\n\n- Observables: an observable emits a stream of data which the the observer listens for and reacts to.\n\n\n- Operators: they allow the observer to perform a set of really useful operations over the sequence  of items emitted by the the observable.\n\nNow that you grasp some basic concepts of reactive programming, I can explain you what RxKotlin is about. \n\nAccording to [the official definition](https://github.com/ReactiveX/RxKotlin),\n\n\u003e RxKotlin is a lightweight library that adds convenient extension functions to [RxJava](https://github.com/ReactiveX/RxJava). You can use RxJava with Kotlin out-of-the-box, but Kotlin has language features (such as [extension functions](https://kotlinlang.org/docs/reference/extensions.html)) that can streamline usage of RxJava even more. RxKotlin aims to conservatively collect these conveniences in one centralized library, and standardize conventions for using RxJava with Kotlin.\n\nSo from what is said, we see that RxKotlin is a wrapper around RxJava which is itself an open-source implementation of the ReactiveX library that helps you create applications in the reactive programming style.\n\nNow we can move on to the implementation of this concept into our shopping cart app.\n\n\n## Adding reactivity to the counter with RxKotlin\n\nNow, head over to your `build.gradle` file, then add  the RxJava and RxKotlin libraries to your dependencies block:\n\n``` gradle\n    //..app/build.gradle\n    implementation 'io.reactivex.rxjava2:rxjava:2.1.9'\n    implementation 'io.reactivex.rxjava2:rxkotlin:2.2.0'\n```\n\nYou remembered in the previous part we’ve added some listeners to our buttons to perform some operations over our cart. We’ll update this section, we’ll add a taste of reactivity using the really cool possibilities RxKotlin offers us.\n\nMove to your `ProductAdapter` file where you defined listeners,\n\n``` kotlin\n     \n     itemView.addToCart.setOnClickListener { view -\u003e\n        \n            val item = CartItem(product)\n    \n            ShoppingCart.addItem(item)\n            //notify users\n            Snackbar.make(\n                (itemView.context as MainActivity).coordinator,\n                \"${product.name} added to your cart\",\n                Snackbar.LENGTH_LONG\n            ).show()\n    \n        }\n    \n        itemView.removeItem.setOnClickListener { view -\u003e\n    \n            val item = CartItem(product)\n    \n            ShoppingCart.removeItem(item, itemView.context)\n    \n            Snackbar.make(\n                (itemView.context as MainActivity).coordinator,\n                \"${product.name} removed from your cart\",\n                Snackbar.LENGTH_LONG\n            ).show()\n    \n        }\n```        \n\nand amend this section like the following:\n\n``` kotlin\n    ../app/src/main/java/yourPackage/ProductAdapter.kt\n    \n    Observable.create(ObservableOnSubscribe\u003cMutableList\u003cCartItem\u003e\u003e {\n    \n        itemView.addToCart.setOnClickListener { view -\u003e\n    \n            val item = CartItem(product)\n    \n            ShoppingCart.addItem(item)\n            //notify users\n            Snackbar.make(\n                (itemView.context as MainActivity).coordinator,\n                \"${product.name} added to your cart\",\n                Snackbar.LENGTH_LONG\n            ).show()\n    \n            it.onNext(ShoppingCart.getCart())\n    \n        }\n    \n        itemView.removeItem.setOnClickListener { view -\u003e\n    \n            val item = CartItem(product)\n    \n            ShoppingCart.removeItem(item, itemView.context)\n    \n            Snackbar.make(\n                (itemView.context as MainActivity).coordinator,\n                \"${product.name} removed from your cart\",\n                Snackbar.LENGTH_LONG\n            ).show()\n    \n            it.onNext(ShoppingCart.getCart())\n        }\n    \n    \n    }).subscribe { cart -\u003e\n        var quantity = 0\n    \n        cart.forEach { cartItem -\u003e\n            quantity += cartItem.quantity\n        }\n    \n        (itemView.context as MainActivity).cart_size.text = quantity.toString()\n        Toast.makeText(itemView.context, \"Cart size $quantity\", Toast.LENGTH_SHORT).show()\n    }\n```    \n\nWhat we’ve done above is pretty simple. We’ve created an Observable from our shopping cart data as we know it is basically a list of `CartItem`: \n\n``` kotlin\n    Observable.create(ObservableOnSubscribe\u003cMutableList\u003cCartItem\u003e\u003e {\n```\n\nThen whenever an item is added or removed, we pulled the new state of the shopping cart to the data stream with this line:  `it.onNext(ShoppingCart.getCart())`. \n \nNext we subscribe to this stream of data, once we get it, we made some basic operation to get the updated shopping cart size and finally we display it on the counter: `(itemView.context as MainActivity).cart_size.text = quantity.toString()`. Pretty simple, right?\n \nYou should agree that in just a few lines of code, we’ve added some reactivity to our shopping cart 😎.\n \nNow if you run and test your app, you should see it behaving like expected. No more disappointment like in the previous article 😁. \n \nLet’s finish our app by adding a review functionality with a **Checkout** button.\n\n\n## Adding the review functionality to the shopping cart\n\nIn this section, we’ll build an activity responsible for reviewing our shopping cart items as well as convenient details.\n\nCreate a `cart_list_item` file and paste the following inside. This layout is responsible for handling the view of a single cart item. It simply contains the cart item image, its name, price and quantity.\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    //../app/src/main/java/res/layout/cart_list_item.xml\n    \u003candroid.support.v7.widget.CardView\n            xmlns:android=\"http://schemas.android.com/apk/res/android\"\n            xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n            app:cardUseCompatPadding=\"true\"\n            app:cardElevation=\"1.5dp\"\n            android:layout_margin=\"2dp\"\n            app:cardBackgroundColor=\"@android:color/white\"\n            app:cardCornerRadius=\"2dp\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\u003e\n    \n        \u003cLinearLayout\n                xmlns:android=\"http://schemas.android.com/apk/res/android\"\n                android:layout_width=\"match_parent\"\n                android:gravity=\"center_vertical\"\n                android:weightSum=\"1.5\"\n                android:layout_height=\"match_parent\"\u003e\n    \n    \n            \u003cImageView\n                    android:layout_weight=\".5\"\n                    android:scaleType=\"fitXY\"\n                    android:id=\"@+id/product_image\"\n                    android:layout_width=\"170dp\"\n                    android:layout_height=\"135dp\"/\u003e\n    \n    \n            \u003cLinearLayout\n                    android:layout_weight=\".5\"\n                    android:gravity=\"center_vertical\"\n                    android:layout_marginRight=\"8dp\"\n                    android:padding=\"8dp\"\n                    android:orientation=\"vertical\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"match_parent\"\n                    android:layout_marginEnd=\"8dp\"\u003e\n    \n    \n                \u003cTextView\n                        android:textSize=\"19sp\"\n                        android:textColor=\"@android:color/black\"\n                        android:id=\"@+id/product_name\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"/\u003e\n    \n    \n                \u003cTextView\n                        android:layout_marginTop=\"10dp\"\n                        android:textSize=\"16sp\"\n                        android:textStyle=\"bold\"\n                        android:id=\"@+id/product_price\"\n                        android:textColor=\"@android:color/holo_red_light\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"/\u003e\n    \n    \n            \u003c/LinearLayout\u003e\n    \n    \n            \u003cTextView\n                    android:textStyle=\"bold\"\n                    android:layout_marginEnd=\"12dp\"\n                    android:gravity=\"center_vertical\"\n                    android:layout_gravity=\"center_vertical\"\n                    android:padding=\"8dp\"\n                    android:textColor=\"@android:color/black\"\n                    android:textSize=\"16sp\"\n                    android:background=\"@drawable/round_background\"\n                    android:id=\"@+id/product_quantity\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_marginRight=\"12dp\"/\u003e\n    \n        \u003c/LinearLayout\u003e\n    \u003c/android.support.v7.widget.CardView\u003e\n```    \n    \n\nWe’ll also a need adapter to render our shopping cart items properly.\nCreate a `ShoppingCartAdapter.kt` file and paste the following inside:\n\n```kotlin\n    //..app/src/main/java/yourPackage/ShoppingCartAdapter.kt\n    \n    import android.content.Context\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import com.squareup.picasso.Picasso\n    import kotlinx.android.synthetic.main.cart_list_item.view.*\n    \n    class ShoppingCartAdapter(var context: Context, var cartItems: List\u003cCartItem\u003e) :\n        RecyclerView.Adapter\u003cShoppingCartAdapter.ViewHolder\u003e() {\n        override fun onCreateViewHolder(parent: ViewGroup, p1: Int): ShoppingCartAdapter.ViewHolder {\n    \n            // The layout design used for each list item\n            val layout = LayoutInflater.from(context).inflate(R.layout.cart_list_item, parent, false)\n    \n            return ViewHolder(layout)\n        }\n    \n            // This returns the size of the list.\n        override fun getItemCount(): Int = cartItems.size\n    \n        override fun onBindViewHolder(viewHolder: ShoppingCartAdapter.ViewHolder, position: Int) {\n    \n         //we simply call the `bindItem` function here\n            viewHolder.bindItem(cartItems[position])\n        }\n        class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {\n    \n            fun bindItem(cartItem: CartItem) {\n    \n            // This displays the cart item information for each item\n                Picasso.get().load(cartItem.product.photos[0].filename).fit().into(itemView.product_image)\n    \n                itemView.product_name.text = cartItem.product.name\n    \n                itemView.product_price.text = \"$${cartItem.product.price}\"\n    \n                itemView.product_quantity.text = cartItem.quantity.toString()\n    \n            }\n        }\n    \n    }\n```    \n\n\nNow, we are a few to finish our mobile app. The next step is build the activity responsible for handing the review of our shopping cart. It will have the following rendering 😋 \n\n![kotlin-shopping-part-3-1](//images.ctfassets.net/1es3ne0caaid/3ibJ0VX5GxMB5nukJVHpOd/d69cdb3dbd4017faed0c7ff2c34a4fcf/kotlin-shopping-part-3-1.jpeg)\n\nCreate an empty activity named `ShoppingCartActivity` or whatever you want. Then, move on to your `activity_shopping_cart.xml` file and  replace the content with the following:\n \n```xml\n    //../app/src/main/java/res/layout/activity_shopping_cart.xml\n    \n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.design.widget.CoordinatorLayout\n            xmlns:android=\"http://schemas.android.com/apk/res/android\"\n            xmlns:tools=\"http://schemas.android.com/tools\"\n            xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n            android:layout_width=\"match_parent\"\n            android:background=\"#fffffdff\"\n            android:layout_height=\"match_parent\"\n            tools:context=\".ShoppingCartActivity\"\u003e\n    \n        \u003candroid.support.design.widget.AppBarLayout\n                android:background=\"@android:color/transparent\"\n                android:fitsSystemWindows=\"true\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"?attr/actionBarSize\"\u003e\n    \n            \u003candroid.support.v7.widget.Toolbar\n                    android:id=\"@+id/toolbar\"\n                    app:titleTextColor=\"@color/colorAccent\"\n                    app:title=\"Shopping Cart\"\n                    android:background=\"@android:color/white\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"?attr/actionBarSize\"/\u003e\n    \n        \u003c/android.support.design.widget.AppBarLayout\u003e\n    \n    \n        \u003candroid.support.v7.widget.RecyclerView\n                app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"\n                android:id=\"@+id/shopping_cart_recyclerView\"\n                android:layout_margin=\"2dp\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\"/\u003e\n    \n    \n        \u003cRelativeLayout\n                android:padding=\"8dp\"\n                app:elevation=\"4dp\"\n                android:layout_gravity=\"bottom\"\n                android:elevation=\"15dp\"\n                android:background=\"@color/colorAccent\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"66dp\"\n                tools:targetApi=\"lollipop\"\u003e\n    \n    \n            \u003cLinearLayout\n                    android:layout_alignParentStart=\"true\"\n                    android:layout_centerVertical=\"true\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_marginLeft=\"15dp\"\n                    android:layout_height=\"wrap_content\"\n                    tools:ignore=\"RtlCompat\"\u003e\n    \n                \u003cTextView\n                        android:id=\"@+id/totalLabel\"\n                        android:textSize=\"18sp\"\n                        android:textStyle=\"bold\"\n                        android:text=\"Total\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        /\u003e\n    \n                \u003cTextView\n                        android:layout_marginStart=\"18dp\"\n                        android:id=\"@+id/total_price\"\n                        android:textSize=\"24sp\"\n                        android:textColor=\"@android:color/white\"\n                        android:textStyle=\"bold\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        tools:ignore=\"RtlCompat\"/\u003e\n    \n            \u003c/LinearLayout\u003e\n    \n    \n            \u003cButton\n                    android:textSize=\"19sp\"\n                    android:layout_centerVertical=\"true\"\n                    android:layout_marginEnd=\"15dp\"\n                    android:layout_marginRight=\"15dp\"\n                    android:padding=\"10dp\"\n                    android:layout_alignParentEnd=\"true\"\n                    android:text=\"Checkout\"\n                    android:textAllCaps=\"false\"\n                    android:background=\"@drawable/round_background\"\n                    android:textColor=\"@android:color/white\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_alignParentRight=\"true\"/\u003e\n    \n    \n        \u003c/RelativeLayout\u003e\n    \n    \u003c/android.support.design.widget.CoordinatorLayout\u003e\n```    \n\nThe above layout contains a recycler view to display our shopping cart items, and a bottom bar containing the total price of our shopping and a **Checkout** button.\n\nAlso, replace the content of your `ShoppingCartActivity` like the following:\n\n```kotlin\n    //..app/src/main/java/yourPackage/ShoppingCartActivity.kt\n    \n    import android.graphics.PorterDuff\n    import android.support.v7.app.AppCompatActivity\n    import android.os.Bundle\n    import android.support.v4.content.ContextCompat\n    import android.support.v7.widget.LinearLayoutCompat\n    import android.support.v7.widget.LinearLayoutManager\n    import android.support.v7.widget.RecyclerView\n    import android.view.MenuItem\n    import kotlinx.android.synthetic.main.activity_shopping_cart.*\n    \n    class ShoppingCartActivity : AppCompatActivity() {\n    \n        lateinit var adapter: ShoppingCartAdapter\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_shopping_cart)\n    \n            setSupportActionBar(toolbar)\n    \n            supportActionBar?.setDisplayShowHomeEnabled(true)\n            supportActionBar?.setDisplayHomeAsUpEnabled(true)\n    \n            val upArrow = ContextCompat.getDrawable(this, R.drawable.abc_ic_ab_back_material)\n            upArrow?.setColorFilter(ContextCompat.getColor(this, R.color.colorPrimary), PorterDuff.Mode.SRC_ATOP)\n            supportActionBar?.setHomeAsUpIndicator(upArrow)\n    \n            adapter = ShoppingCartAdapter(this, ShoppingCart.getCart())\n            adapter.notifyDataSetChanged()\n    \n            shopping_cart_recyclerView.adapter = adapter\n    \n            shopping_cart_recyclerView.layoutManager = LinearLayoutManager(this)\n    \n            var totalPrice = ShoppingCart.getCart()\n                .fold(0.toDouble()) { acc, cartItem -\u003e acc + cartItem.quantity.times(cartItem.product.price!!.toDouble()) }\n    \n            total_price.text = \"$${totalPrice}\"\n        }\n    \n        override fun onOptionsItemSelected(item: MenuItem?): Boolean {\n    \n            when (item?.itemId) {\n                android.R.id.home -\u003e {\n                    onBackPressed()\n                }\n            }\n    \n            return super.onOptionsItemSelected(item)\n        }\n    }\n```    \n\nIn this activity, we are doing three essential things,  first we provide our adapter with the shopping cart items to handle, then we configure and tell our recycler view that its adapter is ready to use and we assigned it, then we compute the total price from the shopping cart items and display it.\n\nWe get a reference to the arrow back icon, and tint its color to fit our design needs.\n\n```kotlin\n     \n      val upArrow = ContextCompat.getDrawable(this, R.drawable.abc_ic_ab_back_material)\n            upArrow?.setColorFilter(ContextCompat.getColor(this, R.color.colorPrimary), PorterDuff.Mode.SRC_ATOP)\n            supportActionBar?.setHomeAsUpIndicator(upArrow)\n```            \n\n\n```kotlin    \n    override fun onOptionsItemSelected(item: MenuItem?): Boolean {\n            when (item?.itemId) {\n                android.R.id.home -\u003e {\n                    onBackPressed()\n                }\n            }\n            return super.onOptionsItemSelected(item)\n        }\n```        \n\nThis block of code simply redirects the user to the previous screen/activity when the back arrow icon is clicked.\n\nNow we need a way to link our two screens, the `MainActivity` one and the `ShoppingCartActivity` one. But how? 🤔  We just need to add a click listener to the `showCart` button defined in the `MainActivity` class, the listener handler will head us to the `ShoppingCartActivity` screen.\n\nSo add this block of code into your `MainActivity.kt` file after the `getProducts` method:\n\n```kotlin\n    //..app/src/main/java/yourPackage/MainActivity.kt\n    \n    showCart.setOnClickListener {\n        startActivity(Intent(this, ShoppingCartActivity::class.java))\n    }\n```    \n\nOur app is complete now with all the expected features. You can run and test it, hopefully everything should be working fine. Otherwise, check if you haven’t missed any step.\n\n## Conclusion\n\nFinally we reached the end of this tutorial series. I think this part has been more useful to you than others because you have learned a new concept : Reactive programming and put it into practice. \nYou can grab the source code for the  last part [here](https://github.com/Ethiel97/kotlin-shoppingCart/tree/part-three); if you want and you can even fork the repo to add more features to the app 😉.","metaTitle":"Build a shopping cart with Kotlin - Part 3","metaDescription":"This three-part series will walk you through building a shopping cart for an Android app using Kotlin. In part three, use RxKotlin to make the app UI reactive, and add the final features to the app."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6QdKKTn8X2fsFADA7lx3KS","type":"Entry","createdAt":"2019-03-08T17:15:51.195Z","updatedAt":"2019-03-08T17:16:02.885Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a shopping cart with Kotlin - Part 2: Building the shopping cart logic","url":"shopping-cart-kotlin-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Ok7hdNlHGsaAME2MCGEeq","type":"Entry","createdAt":"2018-09-17T17:53:10.446Z","updatedAt":"2018-09-17T17:53:10.446Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ethiel Adiassa","url":"ethiel-adiassa","email":"ethiel97@gmail.com","twitter":"https://twitter.com/ethiel97","github":"https://github.com/ethiel97","guestWriter":true}}],"projectRepo":"https://github.com/Ethiel97/kotlin-shoppingCart/tree/part-two","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}}],"reviewDate":"2019-03-08","description":"This three-part series will walk you through building a shopping cart for an Android app using Kotlin. In part two, implement the shopping cart logic.","prerequisite":"You will need an Android development environment set up on your machine. Some knowledge of Android development is required.","content":"## Introduction\n\nIn this second tutorial of this series, we’ll build the shopping cart logic and other things involved in the process. This should allow our users to add products to the cart and know exactly the size of the cart. It’s time to dive into the code.\n\n\nIn the [previous tutorial](https://pusher.com/tutorials/shopping-cart-kotlin-part-1), we’ve built an app that is able to fetch some data from a remote web service and render them using a recycler view to the users. \n\n## Prerequisites\n\nTo follow along with this tutorial, you will need the following:\n\n- [IntelliJ IDEA](https://www.jetbrains.com/idea/) or [Android Studio](https://developer.android.com/studio/index.html).\n- Experience with the Kotlin language\n- Completed [part one](https://pusher.com/tutorials/shopping-cart-kotlin-part-1) of the series\n- An emulator or physical device (for app testing/debugging purpose)\n\n\n\n## Build the shopping cart logic \n\nWe’ll be building the shopping cart logic and workflow. \nFirst, let’s create a `CartItem` entity (a `CartItem.kt` as it happens) which represents  a single shopping cart item in the `../app/src/main/java/yourPackage` directory:\n\n\n```\n    data class CartItem(var product: Product, var quantity: Int = 0)\n```    \n\nAs you can see, this class is pretty straightforward, it only has two fields:\n\n- the product to manipulate: `product`, an instance of the Product class we defined in the first part of the tutorial\n- and the product quantity: `quantity`, just an integer, by default equal to zero\n\nNext, we’ll define a custom class responsible for handling the shopping cart operations such as adding items to the cart, removing items from the cart, getting the cart size and so on.\n\nFirst, you must add this dependency [Paper](https://github.com/pilgr/Paper) into your app. It’s a simple but efficient NoSQL-like for Android apps. This library will made things easily for us as we no more need to maintain an SQLite database which is very cumbersome. If you need some info about how to use the Paper library, you can read the documentation [here](https://github.com/pilgr/Paper#add-dependency).\n\nNow, head over to your `build.gradle` file, then add  the following to your dependencies block:\n\n``` gradle\n    //..app/build.gradle\n    implementation 'io.paperdb:paperdb:2.6'\n```\n\nOur custom class `ShoppingCart` is a wrapper around the Paper library, and contains a set of useful (static) functions for specific purposes. We made use of the Paper library to store our shoppping cart data, and retrieve them whenever we want.\n\nCreate a `ShoppingCart.kt`  file and add the following class:\n\n\n``` kotlin\n    //..app/src/main/java/yourPackage/ShoppingCart.kt\n    import android.content.Context\n    import android.widget.Toast\n    import io.paperdb.Paper\n    \n    class ShoppingCart {\n    \n        companion object {\n            fun addItem(cartItem: CartItem) {\n              val cart = ShoppingCart.getCart()\n    \n              val targetItem = cart.singleOrNull { it.product.id == cartItem.product.id }\n                if (targetItem == null) {\n                    cartItem.quantity++\n                    cart.add(cartItem)\n                } else {\n                    targetItem.quantity++\n                }\n                ShoppingCart.saveCart(cart)\n            }\n    \n            fun removeItem(cartItem: CartItem, context: Context) {\n              val cart = ShoppingCart.getCart()\n    \n              val targetItem = cart.singleOrNull { it.product.id == cartItem.product.id }\n                if (targetItem != null) {\n                    if (targetItem.quantity \u003e 0) {\n                        targetItem.quantity--\n                    } else {\n                        cart.remove(targetItem)\n                    }\n                }\n    \n                ShoppingCart.saveCart(cart)\n            }\n    \n            fun saveCart(cart: MutableList\u003cCartItem\u003e) {\n                Paper.book().write(\"cart\", cart)\n            }\n    \n            fun getCart(): MutableList\u003cCartItem\u003e {\n                return Paper.book().read(\"cart\", mutableListOf())\n            }\n    \n            fun getShoppingCartSize(): Int {\n                var cartSize = 0\n                ShoppingCart.getCart().forEach {\n                    cartSize += it.quantity;\n                }\n    \n                return cartSize\n            }\n        }\n    \n    }\n```\n\nWe have five dedicated functions in our class:\n\n\n- `addItem`: this function basically gets a `cartItem` instance as a parameter, checks first whether it is on the cart or not. If it’s in the cart, we just increment its quantity by one, if this is not the case not only we increment its quantity but we also add it the cart and save the shopping cart to keep it updated.\n\n\n- `removeItem`: here, we also check if the `cartItem` instance is present in the cart, then we remove it from the shopping cart if its quantity is equal to zero, but if its quantity is superior to zero we just decreased it by one. Finally, we keep the cart updated by saving it.\n\n\n- `saveCart`: with the help of this function, we can save the state of our app\n\n\n- `getCart`: this function returns our shopping cart itself, basically a list of `CartItem`\n\n\n- `getShoppingCartSize`:  helps us get the actual number of items present in our cart\n\n\n## Add remove/add buttons to the design with their listeners\n\nWe just added two buttons to our product cart design, one for adding the product to the shopping cart and the second one to remove it. So amend your `product_row_item` layout file like the following:\n\n``` xml\n    //../app/src/main/res/layout/product_row_item.xml\n    \n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.v7.widget.CardView\n            xmlns:card_view=\"http://schemas.android.com/tools\"\n            xmlns:android=\"http://schemas.android.com/apk/res/android\"\n            xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n            app:cardUseCompatPadding=\"true\"\n            android:layout_margin=\"2dp\"\n            app:cardBackgroundColor=\"@android:color/white\"\n            app:cardCornerRadius=\"4dp\"\n            android:background=\"?attr/selectableItemBackground\"\n            app:cardElevation=\"3dp\"\n            android:foreground=\"?attr/selectableItemBackground\"\n            card_view:cardElevation=\"4dp\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\u003e\n    \n        \u003cLinearLayout\n                android:orientation=\"vertical\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\"\u003e\n    \n            \u003cImageView\n                    android:id=\"@+id/product_image\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"180dp\"/\u003e\n    \n            \u003cLinearLayout\n                    android:layout_marginStart=\"5dp\"\n                    android:layout_marginLeft=\"5dp\"\n                    android:padding=\"10dp\"\n                    android:orientation=\"vertical\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"wrap_content\"\u003e\n    \n    \n                \u003cTextView\n                        android:textColor=\"@android:color/black\"\n                        android:textSize=\"22sp\"\n                        android:layout_marginBottom=\"12dp\"\n                        android:id=\"@+id/product_name\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"/\u003e\n    \n    \n                \u003cTextView\n                        android:textSize=\"19sp\"\n                        android:id=\"@+id/product_price\"\n                        android:textColor=\"@android:color/holo_red_light\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"/\u003e\n            \u003c/LinearLayout\u003e\n    \n    \n            \u003cLinearLayout\n                    android:layout_gravity=\"end\"\n                    android:orientation=\"horizontal\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\u003e\n    \n                \u003cImageButton\n                        android:id=\"@+id/removeItem\"\n                        android:layout_width=\"wrap_content\"\n                        android:paddingHorizontal=\"16dp\"\n                        android:tint=\"@android:color/white\"\n                        android:paddingVertical=\"4dp\"\n                        android:src=\"@drawable/ic_remove_shopping_cart\"\n                        android:background=\"@color/colorPrimary\"\n                        android:layout_height=\"wrap_content\"\n                        card_view:targetApi=\"o\"/\u003e\n    \n                \u003cImageButton\n                        android:id=\"@+id/addToCart\"\n                        android:paddingHorizontal=\"16dp\"\n                        android:tint=\"@android:color/white\"\n                        android:paddingVertical=\"4dp\"\n                        android:src=\"@drawable/ic_add_shopping\"\n                        android:background=\"@color/colorAccent\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        card_view:targetApi=\"o\"/\u003e\n    \n            \u003c/LinearLayout\u003e\n    \n    \n        \u003c/LinearLayout\u003e\n    \n    \u003c/android.support.v7.widget.CardView\u003e\n```\n\nHere you can find the [ic_remove_shopping_cart](https://github.com/Ethiel97/kotlin-shoppingCart/blob/master/app/src/main/res/drawable/ic_remove_shopping_cart.xml) resource file to paste in `../app/src/main/res/drawable` folder.\n\nNow, head over to your `ProductAdapter` file, and add the following inside the view holder inner class in the `bindProduct` method body:\n\n``` kotlin\n    ../app/src/main/java/yourPackage/ProductAdapter.kt\n    \n    import android.content.Context\n    import android.support.design.widget.Snackbar\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.Toast\n    import com.squareup.picasso.Picasso\n    import io.paperdb.Paper\n    import kotlinx.android.synthetic.main.activity_main.*\n    import kotlinx.android.synthetic.main.product_row_item.view.*\n    \n    class ViewHolder(){\n    \n    ......\n    ......\n    ......\n    \n      \n      fun bindProduct(product:Product){\n      ...\n      ...\n      ...\n      \n       itemView.addToCart.setOnClickListener { view -\u003e\n        \n            val item = CartItem(product)\n    \n            ShoppingCart.addItem(item)\n            //notify users\n            Snackbar.make(\n                (itemView.context as MainActivity).coordinator,\n                \"${product.name} added to your cart\",\n                Snackbar.LENGTH_LONG\n            ).show()\n    \n        }\n    \n        itemView.removeItem.setOnClickListener { view -\u003e\n    \n            val item = CartItem(product)\n    \n            ShoppingCart.removeItem(item, itemView.context)\n    \n            Snackbar.make(\n                (itemView.context as MainActivity).coordinator,\n                \"${product.name} removed from your cart\",\n                Snackbar.LENGTH_LONG\n            ).show()\n    \n        }\n      \n      }\n        \n    }\n```\n\nWe just add the listeners to our buttons. When the `addToCart` button is clicked, we create a new instance of the `CartItem` class is created provided with the product to add, then we add it to the shopping cart with the help of the `addItem` utility function we created. Next, we show a snack bar to the user to give them a visual feedback about the success of his action. The process is the same for the `removeToCart` click event, except that we removed the item from the shopping cart using our `removeItem` utility function.\n\n\n\n## Add the shopping cart size counter\n\nNow, we want to let our users know our cart size, and keep them updated when an item is added or removed, as you can see in the picture below. Let’s add this button, and the counter to our `src/main/res/layout/activity_main.xml` as well as the logic required to make it work as expected. Basically the counter is a text view updated with the shopping cart size.\n\nFirst, we designed a custom shape to provide a background for our shopping cart counter\n\n``` xml\n    ../app/src/main/java/res/drawable/item_counter.xml\n    \n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cselector xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003e\n        \u003citem\u003e\n            \u003cshape android:shape=\"oval\"\u003e\n                \u003csolid android:color=\"@color/colorPrimary\"/\u003e\n                \u003ccorners android:radius=\"50dp\"/\u003e\n                \u003csize android:height=\"25dp\"/\u003e\n                \u003csize android:width=\"25dp\"/\u003e\n            \u003c/shape\u003e\n        \u003c/item\u003e\n    \u003c/selector\u003e\n```\n\nAdd the following after the `SwipeRefreshLayout` in the file.\n\n``` xml\n    ../src/main/java/res/layout/activity_main.xml\n     ...\n    \u003c/android.support.v4.widget.SwipeRefreshLayout\u003e\n    \n    \u003cRelativeLayout\n            android:id=\"@+id/showCart\"\n            android:layout_margin=\"16dp\"\n            android:layout_gravity=\"bottom|end\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\u003e\n    \n        \u003candroid.support.design.widget.FloatingActionButton\n                android:id=\"@+id/basketButton\"\n                android:src=\"@drawable/ic_shopping_basket\"\n                android:tint=\"@android:color/white\"\n                app:fabSize=\"normal\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"/\u003e\n    \n        \u003cTextView\n                android:padding=\"8dp\"\n                android:layout_marginBottom=\"25dp\"\n                android:elevation=\"50dp\"\n                android:layout_marginStart=\"5dp\"\n                android:textColor=\"@android:color/white\"\n                android:textStyle=\"bold\"\n                android:layout_alignRight=\"@id/basketButton\"\n                android:id=\"@+id/cart_size\"\n                android:textSize=\"13sp\"\n                android:background=\"@drawable/item_counter\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_alignEnd=\"@id/basketButton\"\n                tools:targetApi=\"lollipop\"\n                android:layout_marginLeft=\"15dp\"/\u003e\n    \n    \u003c/RelativeLayout\u003e\n```\n\nNow, we can refer to our counter with the help of its ID, and provide it with the shopping cart size.\nJust add this line to your file in the `onCreate` method, before the `getProducts` method.\n\n``` kotlin\n    ../app/src/main/java/yourPackage/MainActivity.kt\n    \n    cart_size.text = ShoppingCart.getShoppingCartSize().toString()\n```\n\n## Test your app\n\nNow if you run your app and test it, first you should have get the shopping cart shown in the counter. And if you try to add or remove items I guess you get the visual feedback, I mean the snackbar we provided the user with to keep him updated with what it’s going on, but strangely you’re not seeing the counter updated with the actual cart size.  You may think that something is going wrong but this is quite normal. Our app is not reactive yet, and we have not even provided it with a means to behave in such an expected way. Well, in the following part we’ll see a more advanced topic, *RxKotlin Reactive programming in Kotlin*  which hopefully will help us add some reactivity to our shopping cart app. \n\n\n## Conclusion\n\nUntil now, you’ve learned how to show a list of products to users, built your shopping cart logic enabling your users to add and remove items from your cart. \n\nIn the last, [part third](https://pusher.com/tutorials/shopping-cart-kotlin-part-3) of this tutorial series we’ll make our mobile app more reactive using a powerful tool: *RxKotlin*. We’ll also add a shopping cart review functionality to our app to make it more complete 😉.\n\nNevertheless, you can grab the code for the second part [here](https://github.com/Ethiel97/kotlin-shoppingCart/tree/part-two).","metaTitle":"Build a shopping cart with Kotlin - Part 2","metaDescription":"This three-part series will walk you through building a shopping cart for an Android app using Kotlin. In part two, implement the shopping cart logic."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"36XjHWLMBT51XwkHwXSr8D","type":"Entry","createdAt":"2019-03-08T03:02:19.829Z","updatedAt":"2019-03-08T03:02:19.829Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a shopping cart with Kotlin - Part 1: Listing products","url":"shopping-cart-kotlin-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Ok7hdNlHGsaAME2MCGEeq","type":"Entry","createdAt":"2018-09-17T17:53:10.446Z","updatedAt":"2018-09-17T17:53:10.446Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ethiel Adiassa","url":"ethiel-adiassa","email":"ethiel97@gmail.com","twitter":"https://twitter.com/ethiel97","github":"https://github.com/ethiel97","guestWriter":true}}],"projectRepo":"https://github.com/Ethiel97/kotlin-shoppingCart/tree/part-one","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}}],"reviewDate":"2019-03-07","description":"This three-part series will walk you through building a shopping cart for an Android app using Kotlin. In part one, set up your project, prepare your API calls and create a list of products.","prerequisite":"You will need an Android development environment set up on your machine. Some knowledge of Android development is required.","content":"## Introduction\n\nIn this tutorial I’ll show you how to build a shopping cart using Kotlin. A shopping cart is a must-have in any e-commerce application. This course will guide you through building a full shopping cart with Kotlin. \n\nOur end result will be an Android app built with the Kotlin language (rather than Java for the sake of productivity) listing some products to the user and allowing them to add some to their shopping cart. They should also be able to review their shopping cart.\n\nIn this first part of this tutorial series we’ll be building our app that shows a list of products to the users.\n\n## Demo \n\nHere is the final result of the first part of the tutorial series 😎 \n\n![kotlin-shopping-part-1-1](//images.ctfassets.net/1es3ne0caaid/1bKfXQhiwhNhZHUQ44FpiD/10d1dddfa0f62c9cf65aedae6c8c95e0/kotlin-shopping-part-1-1.gif)\n\n## Prerequisites\n\nIn order to follow along, you will need some experience with the Kotlin programming language.\nYou will also need appropriate IDEs. I suggest [IntelliJ IDEA](https://www.jetbrains.com/idea/) or [Android Studio](https://developer.android.com/studio/index.html).\nIt is also assumed that you know how to use the IDEs that you are working with, including interacting with either an emulated or physical mobile device for running  your apps.\n\n\n## Configuring your project\n\nOpen Android Studio, create a new project. Insert the name of your app and company domain name then select the **Include Kotlin support** checkbox to enable Kotlin in the project.\n\n![kotlin-shopping-part-1-2](//images.ctfassets.net/1es3ne0caaid/4RGAlHRO9jAPuPagStPhI6/f379f6599c4b05bdfddbf2f2d979a15c/kotlin-shopping-part-1-2.png)\n\nFor this article, we will set the minimum supported Android version at 4.03 (API 15). Next, choose an empty activity template and click on **Finish**.\n\n![kotlin-shopping-part-1-3](//images.ctfassets.net/1es3ne0caaid/3JDLs392PwEeSN4H6ZjZIw/b650939c67d69f80c2d60f4badc3bb1d/kotlin-shopping-part-1-3.png)\n\nThen head over to your `../app/build.gradle` file and paste this inside the `dependencies` block, as we’ll be using these dependencies in this tutorial\n\n``` gradle\n    //..app/build.gradle\n    implementation 'com.google.code.gson:gson:2.8.2'\n    implementation 'com.squareup.picasso:picasso:2.71828'\n    implementation 'com.squareup.retrofit2:retrofit:2.4.0'\n    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'\n    implementation 'com.squareup.retrofit2:converter-scalars:2.3.0'\n    implementation 'com.android.support:design:28.0.0'\n    implementation 'com.android.support:cardview-v7:28.0.0'\n    implementation 'com.android.support:recyclerview-v7:28.0.0'\n```    \n\n\n- Retrofit: We will need the [Retrofit](https://github.com/square/retrofit) library (a “type-safe HTTP client”) to enable us send messages to our remote server which we will build later on.\n- Picasso: Picasso is \"A powerful image downloading and caching library for Android”\n\n\nAlso, amend your `styles.xml` like the following. This should enable us to use a toolbar inside our application.\n\n``` xml\n    //..app/src/main/res/values/styles.xml\n    \n    \u003cresources\u003e\n    \n        \u003c!-- Base application theme. --\u003e\n        \u003cstyle name=\"AppTheme\" parent=\"Theme.AppCompat.NoActionBar\"\u003e\n            \u003c!-- Customize your theme here. --\u003e\n            \u003citem name=\"colorPrimary\"\u003e@color/colorPrimary\u003c/item\u003e\n            \u003citem name=\"colorPrimaryDark\"\u003e@color/colorPrimaryDark\u003c/item\u003e\n            \u003citem name=\"colorAccent\"\u003e@color/colorAccent\u003c/item\u003e\n        \u003c/style\u003e\n    \n    \u003c/resources\u003e\n```\n\n## Build your product model, adapter and layout\n\nOur product should have a unique identifier, a price, a name, a description and a set of images if possible. Now that we know the structure of our product item, let’s define its model. We’ll build our product entity using a Kotlin data class. \n\nCreate a `Product.kt`  file, then copy and paste the following piece of code inside:\n\n``` kotlin\n    //..app/src/main/java/yourPackage/Product.kt\n    import com.google.gson.annotations.SerializedName\n    \n    data class Product(\n        @SerializedName(\"description\")\n        var description: String? = null,\n    \n        @SerializedName(\"id\")\n        var id: Int? = null,\n    \n        @SerializedName(\"name\")\n        var name: String? = null,\n    \n        @SerializedName(\"price\")\n        var price: String? = null,\n    \n        @SerializedName(\"photos\")\n        var photos: List\u003cPhoto\u003e = arrayListOf()\n    )\n```\n\nAs our product has a set of photos, we’ll also define its entity. Create a `Photo.kt` file, then paste the following code inside as well:\n\n``` kotlin\n    //..app/src/main/java/yourPackage/Photo.kt\n    import com.google.gson.annotations.SerializedName\n    \n    data class Photo(\n        @SerializedName(\"filename\")\n        var filename: String? = null\n    )\n```\n\nNext, we’ll build our product adapter responsible to handle the display of our products list.\n\nCreate a `ProductAdapter.kt` file and paste the following inside:\n\n``` kotlin\n    //..app/src/main/java/yourPackage/ProductAdapter.kt\n    \n    import android.annotation.SuppressLint\n    import android.content.Context\n    import android.support.design.widget.Snackbar\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.Toast\n    import com.squareup.picasso.Picasso\n    import kotlinx.android.synthetic.main.activity_main.*\n    import kotlinx.android.synthetic.main.product_row_item.view.*\n    \n    class ProductAdapter(var context: Context, var products: List\u003cProduct\u003e = arrayListOf()) :\n        RecyclerView.Adapter\u003cProductAdapter.ViewHolder\u003e() {\n        override fun onCreateViewHolder(p0: ViewGroup, p1: Int): ProductAdapter.ViewHolder {\n            // The layout design used for each list item\n            val view = LayoutInflater.from(context).inflate(R.layout.product_row_item, null)\n            return ViewHolder(view)\n    \n        }\n            // This returns the size of the list.\n        override fun getItemCount(): Int = products.size\n    \n        override fun onBindViewHolder(viewHolder: ProductAdapter.ViewHolder, position: Int) {\n         //we simply call the `bindProduct` function here\n            viewHolder.bindProduct(products[position])\n        }\n    \n        class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {\n    \n            // This displays the product information for each item\n            fun bindProduct(product: Product) {\n    \n                itemView.product_name.text = product.name\n                itemView.product_price.text = \"$${product.price.toString()}\"\n                Picasso.get().load(product.photos[0].filename).fit().into(itemView.product_image)\n            }\n    \n        }\n    \n    }\n```\n\nNext, let’s create our product item layout. This layout file contains:\n\n- an `ImageView` to display the product image\n- two `TextView` one to display the product name and the other for the product price.\n\nAll these widgets are wrapped inside a `CardView` to add a shadow and a radius to the layout 🙂.\n\nCreate a `product_row_item` file and paste the following inside. This layout is responsible for handling the view of a single item of our list.\n\n``` xml\n    //../app/src/main/java/res/layout/product_row_item.xml\n    \n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.v7.widget.CardView\n            xmlns:card_view=\"http://schemas.android.com/tools\"\n            xmlns:android=\"http://schemas.android.com/apk/res/android\"\n            xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n            app:cardUseCompatPadding=\"true\"\n            android:layout_margin=\"4dp\"\n            app:cardBackgroundColor=\"@android:color/white\"\n            app:cardCornerRadius=\"4dp\"\n            android:background=\"?attr/selectableItemBackground\"\n            app:cardElevation=\"3dp\"\n            android:foreground=\"?attr/selectableItemBackground\"\n            card_view:cardElevation=\"4dp\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\u003e\n    \n        \u003cLinearLayout\n                android:orientation=\"vertical\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\"\u003e\n    \n            \u003cImageView\n                    android:id=\"@+id/product_image\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"140dp\"/\u003e\n    \n            \u003cLinearLayout\n                    android:padding=\"10dp\"\n                    android:orientation=\"vertical\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"wrap_content\"\u003e\n    \n    \n                \u003cTextView\n                        android:textColor=\"@android:color/black\"\n                        android:textSize=\"22sp\"\n                        android:layout_marginBottom=\"12dp\"\n                        android:id=\"@+id/product_name\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"/\u003e\n    \n    \n                \u003cTextView\n                        android:textSize=\"19sp\"\n                        android:textColor=\"@android:color/black\"\n                        android:id=\"@+id/product_price\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"/\u003e\n            \u003c/LinearLayout\u003e\n    \n            \u003cImageButton\n                    android:id=\"@+id/addToCart\"\n                    android:paddingHorizontal=\"16dp\"\n                    android:tint=\"@android:color/white\"\n                    android:paddingVertical=\"4dp\"\n                    android:src=\"@drawable/ic_add_shopping\"\n                    android:layout_gravity=\"end\"\n                    android:background=\"@color/colorAccent\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    card_view:targetApi=\"o\"/\u003e\n    \n        \u003c/LinearLayout\u003e\n    \n    \u003c/android.support.v7.widget.CardView\u003e\n```\n\nThese are the links to get the drawable icons we used in our layout : [ic_add_shopping](https://github.com/Ethiel97/kotlin-shoppingCart/tree/master/app/src/main/res/drawable/ic_add_shopping.xml) and [ic_shopping_basket](https://github.com/Ethiel97/kotlin-shoppingCart/blob/master/app/src/main/res/drawable/ic_shopping_basket.xml). They are to paste in `../app/src/main/res/drawable` folder.\n\n## Preparing API calls\n\nWe’ll make calls to an external API to get our products data. \n\nCreate an `APIConfig.kt` file. This class gives us an instance of Retrofit for our network calls:\n\n``` kotlin\n    //..app/src/main/java/yourPackage/APIConfig.kt\n    import android.content.Context\n    import okhttp3.OkHttpClient\n    import retrofit2.Retrofit\n    import retrofit2.converter.gson.GsonConverterFactory\n    import com.google.gson.GsonBuilder\n    import retrofit2.converter.scalars.ScalarsConverterFactory\n    \n    object APIConfig {\n    \n        val BASE_URL = \"https://all-spices.com/api/products/\"\n    \n        private var retrofit: Retrofit? = null\n    \n        var gson = GsonBuilder()\n            .setLenient()\n            .create()\n    \n        fun getRetrofitClient(context: Context): Retrofit {\n    \n            val okHttpClient = OkHttpClient.Builder()\n                .build()\n    \n            if (retrofit == null) {\n                retrofit = Retrofit.Builder()\n                    .baseUrl(BASE_URL)\n                    .client(okHttpClient)\n                            .addConverterFactory(ScalarsConverterFactory.create())\n                    .addConverterFactory(GsonConverterFactory.create(gson))\n                    .build()\n            }\n            return retrofit!!\n        }\n    }\n```    \n\nNext, create an API Interface file in the `src/main/java/yourPackage` folder called `ApiService.kt`. This interface is used to define endpoints to be used during network calls. For this application, we will create just one endpoint:\n\n``` kotlin\n    import retrofit2.Call\n    import retrofit2.http.*\n    \n    interface APIService {\n        @Headers(\"Content-Type: application/json\", \"Accept: application/json\")\n        @GET(\"bestRated\")\n        fun getProducts(\n        ): Call\u003cList\u003cProduct\u003e\u003e\n    \n    }\n```\n\n\n## Listing products\n\nFor listing products, we’ll need a recycler view (a recycler view is a widget for listing a list of items, as it happens our products list). Now, move on to your `src/main/java/res/layout/activity_main.xml` file, amend it like the following: \n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.design.widget.CoordinatorLayout\n            xmlns:android=\"http://schemas.android.com/apk/res/android\"\n            xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n            android:layout_height=\"match_parent\"\n            android:background=\"#fffffa\"\n            android:id=\"@+id/coordinator\"\n            android:layout_width=\"match_parent\"\u003e\n    \n    \n        \u003candroid.support.design.widget.AppBarLayout\n                android:background=\"@android:color/transparent\"\n                android:fitsSystemWindows=\"true\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"?attr/actionBarSize\"\u003e\n    \n            \u003candroid.support.v7.widget.Toolbar\n                    android:id=\"@+id/toolbar\"\n                    app:titleTextColor=\"@color/colorAccent\"\n                    app:title=\"Shopping List\"\n                    android:background=\"@android:color/white\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"?attr/actionBarSize\"\u003e\n    \n            \u003c/android.support.v7.widget.Toolbar\u003e\n    \n        \u003c/android.support.design.widget.AppBarLayout\u003e\n    \n    \n        \u003candroid.support.v4.widget.SwipeRefreshLayout\n                android:id=\"@+id/swipeRefreshLayout\"\n                app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\u003e\n    \n            \u003candroid.support.v7.widget.RecyclerView\n                    android:id=\"@+id/products_recyclerview\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"match_parent\"/\u003e\n    \n        \u003c/android.support.v4.widget.SwipeRefreshLayout\u003e\n    \n    \n        \u003candroid.support.design.widget.FloatingActionButton\n                android:id=\"@+id/showBasket\"\n                android:src=\"@drawable/ic_shopping_basket\"\n                android:tint=\"@android:color/white\"\n                android:layout_margin=\"16dp\"\n                android:layout_gravity=\"bottom|end\"\n                app:fabSize=\"normal\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"/\u003e\n    \n    \u003c/android.support.design.widget.CoordinatorLayout\u003e\n```\n\nThe above layout contains a recycler view which itself is wrapped in a `SwipeRefreshLayout` widget. We also add a button for adding items to our shopping cart, but this will be handled in the second part of the tutorial.\n\n\nNext, move on to your  `src/main/MainActvity.kt`  file, and amend like the following:\n\n``` kotlin\n    //..app/src/main/java/yourPackage/MainActivity.kt\n    \n    import android.content.Intent\n    import android.support.v7.app.AppCompatActivity\n    import android.os.Bundle\n    import android.support.v4.content.ContextCompat\n    import android.support.v7.widget.StaggeredGridLayoutManager\n    import android.util.Log\n    import android.widget.Toast\n    import kotlinx.android.synthetic.main.activity_main.*\n    import retrofit2.Call\n    import retrofit2.Response\n    \n    class MainActivity : AppCompatActivity() {\n    \n        private lateinit var apiService: APIService\n        private lateinit var productAdapter: ProductAdapter\n    \n        private var products = listOf\u003cProduct\u003e()\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n    \n            setContentView(R.layout.activity_main)\n    \n            setSupportActionBar(toolbar)\n            apiService = APIConfig.getRetrofitClient(this).create(APIService::class.java)\n    \n            swipeRefreshLayout.setColorSchemeColors(ContextCompat.getColor(this, R.color.colorPrimary))\n    \n            swipeRefreshLayout.isRefreshing = true\n    \n            // assign a layout manager to the recycler view\n            products_recyclerview.layoutManager = StaggeredGridLayoutManager(2, StaggeredGridLayoutManager.VERTICAL)\n    \n            getProducts()\n    \n        }\n    \n    \n        fun getProducts() {\n            apiService.getProducts().enqueue(object : retrofit2.Callback\u003cList\u003cProduct\u003e\u003e {\n                override fun onFailure(call: Call\u003cList\u003cProduct\u003e\u003e, t: Throwable) {\n    \n                    print(t.message)\n                    Log.d(\"Data error\", t.message)\n                    Toast.makeText(this@MainActivity, t.message, Toast.LENGTH_SHORT).show()\n    \n                }\n    \n                override fun onResponse(call: Call\u003cList\u003cProduct\u003e\u003e, response: Response\u003cList\u003cProduct\u003e\u003e) {\n    \n                    swipeRefreshLayout.isRefreshing = false\n                    products = response.body()!!\n    \n                    productAdapter = ProductAdapter(this@MainActivity, products)\n    \n                    products_recyclerview.adapter = productAdapter\n                    productAdapter.notifyDataSetChanged()\n    \n                }\n    \n            })\n        }\n    \n    }\n```    \n\nWe declared an `APIService` instance, a `ProductAdapter` instance we’ll initialize later.\nNext, we initialized the list to hold the products: `private var products = listOf\u003cProduct\u003e()`.\nThen, in the `onCreate` method, we initialized our `APIService` instance, configured our swipe refresh layout and made it refreshing, and assigned a proper layout to our recycler view. \n\nIn the `getProducts` methods, we made an API call to fetch our products, if everything gets well we first disable the swipe refresh layout, then assign the result to our products list, initialised our product adapter, assigned the adapter to the recycler view, and tell the adapter data its state has changed. Otherwise, we just logged the error for debugging purpose.\n\nNext up is to add the Internet permission in your `AndroidManifest.xml` file. Update the file with the code snippet below:\n\n``` xml\n    //app/src/main    \n        \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n```\n\nWe are done with the first part of this article. Now you can run your app to see if everything is correct.\n\n\n## Conclusion\n\nIn this first tutorial of this series, we have demonstrated how to get data/products from an external API, and render it with the help of a recycler view. In the next part, we’ll see how to add products to cart. This is the [code](https://github.com/Ethiel97/kotlin-shoppingCart/tree/part-one) for the first of the tutorial series.","metaTitle":"Build a shopping cart with Kotlin - Part 1","metaDescription":"This three-part series will walk you through building a shopping cart for an Android app using Kotlin. In part one, set up your project, prepare your API calls and create a list of products."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2dSt19gGyAOC8wEKyAkAgy","type":"Entry","createdAt":"2018-12-07T18:47:38.965Z","updatedAt":"2018-12-07T18:47:38.965Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Updating content in realtime without confusing your users","url":"realtime-content-good-ux","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro-articles/updating-contents-realtime","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Od9rZziIoMG4yaQ4EAeok","type":"Entry","createdAt":"2018-02-13T11:31:10.435Z","updatedAt":"2018-02-26T12:31:10.730Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":16,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live UX","url":"live-ux","type":"use case"}}],"reviewDate":"2018-12-07","description":"This tutorial looks at some of the potential downsides of updating content in realtime, and presents solutions. You will build a simple Android app, and experiment with ways to improve the user experience of realtime functionality.","prerequisite":"You will need Android Studio installed on your machine, and basic knowledge of Android development.","content":"## Introduction\n\nIn this tutorial, we will look at the possible ways of confusing your users when providing realtime content and also the proper ways you can achieve it using two use cases.\n\nRealtime functionality involves making content available to users without them having to manually refresh or request an update.  This functionality characterizes most modern apps.\n\nHowever, there is a pit you can easily fall into in the process of implementing these realtime functionalities and that is confusing your users in the process. \n\n## Prerequisites\n\nTo follow along with this tutorial, you should have the following:\n\n- Android Studio installed on your machine. Download the latest stable version [here](https://developer.android.com/studio/index.html).\n- A Pusher application. Create one [here](https://pusher.com).\n- Basic knowledge of Android development and an ability to navigate through the Android Studio IDE.\n- Basic knowledge of the Kotlin programming language. Visit the [official docs](https://kotlinlang.org/docs/reference/).\n\n\n## A common mistake\n\nMaking your application work and update content in realtime is invaluable. However, lets see a simple mistake that you need to watch out for when building realtime applications.\n\nBelow, we have a screen recording of a sample application:\n\n![realtime-content-demo-1](//images.ctfassets.net/1es3ne0caaid/gLJc7IvtKw2KaG4AIiQEE/36f1e43662bb8312fccc5eb76f9d2646/realtime-content-demo-1.gif)\n\nIn the GIF above, when a new content comes in, irrespective of where the user was, they are taken back to the top of the page to view the contents right away. \n\nThis is a bad experience and it can be annoying to the user especially if there are hundreds of content and the user has gone all the way down. \n\nAnother mistake you can make, especially in a timeline based application, is not specifying where the new data added to the application starts. If you can, temporarily give the new content a slightly different background color that would hint the user of the application that the new content has not been consumed. \n\nUsers don’t like being interrupted, so silent updates to the content is welcome as long as there is a visual cue. If you have to alert users of new content, use a non-invasive pop-up without surprising the user as seen below:\n\n![realtime-content-twitter](//images.ctfassets.net/1es3ne0caaid/1XVv9ZiICgA4a2840gCyEm/088ec543088987bf0cca70609c7702df/realtime-content-twitter.jpeg)\n\nHaving noted the bad practices here, let us now build the right way.\n\n## Doing it the right way\n\nThere are many ways you can potentially introduce new content to your application without annoying your users. I will talk about two in this article.\n\nThe first one is by giving the user the option to show the new contents and not making the contents refresh without their knowledge. This model is used by Twitter to add new content to the timeline. The user gets a notification on the screen telling them that new content is available. \n\nThe second one is keeping new content at the bottom and is mostly used by chat clients like WhatsApp to display new content.\n\nLet’s set up sample applications to demonstrate these methods.\n\n\n## Setting up Pusher Channels\n\nTo get started, we need a Pusher Channels app to use in our sample Android application. Log in to your [Pusher dashboard](https://dashboard.pusher.com). If you don’t have an account, you can easily create one. Your dashboard should look like this:\n\n![realtime-content-pusher](//images.ctfassets.net/1es3ne0caaid/2UHAylgTG0Mq0euykqUA40/057c4db1c57325b88f844c167978018b/realtime-content-pusher.png)\n\nCreate a new channel app. You can easily do this by clicking the big **Create new Channels app** card at the bottom right. After you create a new app, you will be provided with the keys. Keep them around as you will need them later on.\n\n\n## Model one - the Twitter model\n\nOpen the Android studio and create a new application. Enter the name of your application, say **TwitterModel** and the package name. Make sure the **Enable Kotlin Support** check box is checked. Choose the minimum SDK, click **Next**, choose an **Empty Activity** template, stick with the `MainActivity` naming and click **finish**. After this, you wait for some seconds for Android Studio to prepare your project for you.\n\nNext, we will add the necessary dependencies in the app-module `build.gradle` file. Add them like so:\n\n``` gradle\n    // File: ./app/build.gradle\n    dependencies {\n        // [...]\n        \n        implementation 'com.pusher:pusher-java-client:1.8.0'\n        implementation 'com.android.support:recyclerview-v7:28.0.0'\n    }\n```\n\nAbove, we added the Pusher client dependency and the `recyclerview` support dependency. Sync your Gradle files so that it can be downloaded and made available for use within the application.\n\nNext, let’s update our layout. Remember that a layout was generated for us, named `activity_main.xml` . This is the layout for the `MainActivity` class. Paste this snippet to the layout file:\n\n``` xml\n    \u003c!-- File: ./app/src/main/res/layout/activity_main.xml --\u003e\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout \n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\".MainActivity\"\u003e\n    \n        \u003cTextView\n            app:layout_constraintTop_toTopOf=\"parent\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"New contents available\"\n            android:textSize=\"16sp\"\n            android:visibility=\"gone\"\n            android:padding=\"10dp\"\n            android:background=\"@android:color/darker_gray\"\n            android:textColor=\"@android:color/white\"\n            android:gravity=\"center\"\n            android:id=\"@+id/textViewNewContents\"\n            /\u003e\n    \n        \u003candroid.support.v7.widget.RecyclerView\n            android:layout_marginTop=\"10dp\"\n            android:id=\"@+id/recyclerViewContents\"\n            app:layout_constraintTop_toBottomOf=\"@id/textViewNewContents\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"/\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nThe layout above contains a `recyclerview` to show the contents in a list and a `textview` to notify the user when there is new content. By default, the `textview` is hidden and only pops up when there is a new content from Pusher.\n\nNext, we will create an adapter for our `recyclerview`. Create a class called `RecyclerListAdapter` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/updatingrealtimecontentpusher/RecyclerListAdapter.kt\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.TextView\n    \n    class RecyclerListAdapter: RecyclerView.Adapter\u003cRecyclerListAdapter.ViewHolder\u003e() {\n    \n      private val contentList: ArrayList\u003cString\u003e = ArrayList()\n    \n      override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        return ViewHolder(\n          LayoutInflater.from(parent.context)\n            .inflate(android.R.layout.simple_list_item_1, parent, false)\n        )\n      }\n    \n      override fun onBindViewHolder(holder: ViewHolder, position: Int) = holder.bind(\n        contentList.get(position)\n      )\n    \n      override fun getItemCount(): Int = contentList.size\n    \n      fun addItem(item:String){\n        contentList.add(0,item)\n        notifyDataSetChanged()\n      }\n    \n     inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        private val userName: TextView = itemView.findViewById(android.R.id.text1)\n        \n        fun bind(item: String) = with(itemView) {\n          userName.text = item\n        }\n      }\n    }\n```\n\nThis class controls the `recyclerview`. It manages how each list item looks using the `onCreateViewHolder` method, it manages the size using the `getItemCount` method, it adds item to each list using the `onBindViewHolder` method and we have a custom `addItem` method that makes sure the new items are added to the top of the list.\n\nNext, we will complete the rest of the logic in the `MainActivity.kt` file. Paste this into the file:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/updatingrealtimecontentpusher/MainActivity.kt\n    import android.support.v7.app.AppCompatActivity\n    import android.os.Bundle\n    import android.support.v7.widget.LinearLayoutManager\n    import android.util.Log\n    import android.view.View\n    import com.pusher.client.channel.SubscriptionEventListener\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import kotlinx.android.synthetic.main.activity_main.*\n    import org.json.JSONObject\n    \n    class MainActivity : AppCompatActivity() {\n      private val newList = ArrayList\u003cString\u003e()\n      private val recyclerListAdapter = RecyclerListAdapter()\n    \n      override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        \n        setContentView(R.layout.activity_main)\n        setupRecyclerView()\n        setupPusher()\n        setupClickListeners()\n      }\n    }\n```\n\nIn this class, we have a list variable and the `recyclerview` adapter initialized. We then call our three main methods in the `onCreate` method. Let us see how these methods look like.\n\nFirst, we have the `setupRecyclerView` method where we initialize our `recyclerview` and assign the adapter to it. Copy and paste the following into the class:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/updatingrealtimecontentpusher/MainActivity.kt\n    private fun setupRecyclerView() {\n    \n      with(recyclerViewContents){\n        layoutManager = LinearLayoutManager(this@MainActivity)\n        adapter = recyclerListAdapter\n      }\n      \n      recyclerListAdapter.addItem(\"Hello World\")\n      recyclerListAdapter.addItem(\"New article alert!\")\n    }\n```\n\nAs seen above, we added some dummy data to the list. \n\nNext, we have the `setupPusher` method. Add the method to your class:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/updatingrealtimecontentpusher/MainActivity.kt\n    private fun setupPusher() {\n      val options = PusherOptions()\n      options.setCluster(\"PUSHER_CLUSTER\")\n      val pusher = Pusher(\"PUSHER_KEY\", options)\n    \n      val channel = pusher.subscribe(\"my-channel\")\n    \n      channel.bind(\"my-event\") { channelName, eventName, data -\u003e\n        Log.d(\"TAG\",data)\n        runOnUiThread {\n          textViewNewContents.visibility = View.VISIBLE\n          newList.add(JSONObject(data).getString(\"message\"))\n        }\n      } \n      pusher.connect()\n    }\n```\n\nThis is the method where we connect to our Pusher Channels instance. In this method, when a new content shows up, instead of adding it to the adapter’s list, we add it to a new list and notify the user of the presence of new content.\n\n\n\u003e Replace the PUSHER placeholders with actual keys from your dashboard.\n\nThe last method is the `setupClickListeners` method. Add the method to your class like so:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/updatingrealtimecontentpusher/MainActivity.kt\n    private fun setupClickListeners() {\n      textViewNewContents.setOnClickListener {\n        for (item in newList){\n          recyclerListAdapter.addItem(item)\n        }\n        \n        textViewNewContents.visibility = View.GONE\n      }\n    }\n```\n\nThis method adds a click listener to the `textview`. When it is clicked, we add each new item to the top of the list using the custom adapter method we created - `addItem`.\n\nSince this app requires the use of internet connection, we need to request for the internet permission. Open your `AndroidManifest.xml` file and add this permission:\n\n``` xml\n    \u003c!-- File: ./app/src/main/AndroidManifest.xml --\u003e\n    \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n```\n\nWith this, we are done building our app. You can now run your app! To send a sample message, open the debug console of your Pusher Channels app and send an event like so:\n\n![realtime-content-pusher-event](//images.ctfassets.net/1es3ne0caaid/2oJBI3MxdWAKiwciqIQMKm/fa9da7f9aa651426fcd6b3cc13a04bd7/realtime-content-pusher-event.png)\n\nHere is the raw data to send to the channel `my-channel` and the event `my-event`:\n\n``` \n    {\n      \"message\": \"Hi there\"\n    }\n```\n\nYour app should now work like this:\n\n![realtime-content-demo-2](//images.ctfassets.net/1es3ne0caaid/5dzDrdoa6W8ACGYAge8AY8/491bced3596332db970ac77d75ef0895/realtime-content-demo-2.gif)\n\n\n## Model two - the WhatsApp model\n\nIn the second model, the new items will be shown at the bottom of the screen as seen on most major chat platforms. One of the popular platforms to use this model is WhatsApp. \n\nSometimes, you might want to read previous messages in your chat and when new messages come in, bringing you back to the new messages when there is one is just a bad way to build an application. Instead, you can simply notify the user that there are new messages and if they please, they can go to them immediately. Let’s build a sample application to show this in action.\n\nCreate a new Android project like we did earlier but this time call it **WhatsAppModel**. We will still use the same dependencies as we did in the first sample. \n\nAdd these to your app-module `build.gradle` file:\n\n``` gradle\n    // File: ./app/build.gradle\n    dependencies {\n        // [...]\n    \n        implementation 'com.pusher:pusher-java-client:1.8.0'\n        implementation 'com.android.support:recyclerview-v7:28.0.0'\n    }\n```\n\nOpen the `activity_main.xml` generated for you replace the contents with the following:\n\n``` xml\n    \u003c!-- File: ./app/src/main/res/layout/activity_main.xml --\u003e\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cFrameLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\".MainActivity\"\u003e\n    \n        \u003candroid.support.v7.widget.RecyclerView\n            android:id=\"@+id/recyclerViewContents\"\n            app:layout_constraintTop_toTopOf=\"parent\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"/\u003e\n    \n        \u003cTextView\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:padding=\"10dp\"\n            android:textSize=\"16sp\"\n            app:layout_constraintRight_toRightOf=\"parent\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            android:layout_margin=\"16dp\"\n            android:background=\"@drawable/rounded_corner\"\n            android:textColor=\"@android:color/black\"\n            android:visibility=\"gone\"\n            android:layout_gravity=\"right|bottom\"\n            android:id=\"@+id/textViewNewContents\" /\u003e\n    \n    \u003c/FrameLayout\u003e\n```\n\nHere, we have a `recyclerview` to show the contents and a `textview` to notify the user of the number of new messages available. The`textview` uses a special drawable as background to distinguish it easily. \n\nCreate a new drawable named `rounded_corner` and paste this:\n\n``` xml\n    \u003c!-- File: ./app/src/main/res/drawable/rounded_corner.xml --\u003e\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cshape xmlns:android=\"http://schemas.android.com/apk/res/android\" \u003e\n        \u003cstroke\n            android:width=\"1dp\" /\u003e\n    \n        \u003csolid android:color=\"#ffffff\" /\u003e\n    \n        \u003cpadding\n            android:left=\"1dp\"\n            android:right=\"1dp\"\n            android:bottom=\"1dp\"\n            android:top=\"1dp\" /\u003e\n    \n        \u003ccorners android:radius=\"5dp\" /\u003e\n    \u003c/shape\u003e\n```\n\nNext, let us create an adapter for the `recyclerview`. Create a new class called `RecyclerListAdapter` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/updatingrealtimecontentpusher/RecyclerListAdapter.kt\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.TextView\n    \n    class RecyclerListAdapter(private val listener:OnLastPositionReached): RecyclerView.Adapter\u003cRecyclerListAdapter.ViewHolder\u003e() {\n    \n      private val contentList: ArrayList\u003cString\u003e = ArrayList()\n    \n      override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        return ViewHolder(\n           LayoutInflater\n             .from(parent.context)\n             .inflate(android.R.layout.simple_list_item_1, parent, false)\n        )\n      }\n    \n      override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n        holder.bind(contentList[position])\n        \n        if (position == contentList.size-1){\n          listener.lastPositionReached()\n        } else {\n          listener.otherPosition()\n        }\n      }\n    \n      override fun getItemCount(): Int = contentList.size\n    \n      fun addItem(item:String) {\n        contentList.add(item)\n        notifyDataSetChanged()\n      }\n    \n      inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        private val userName: TextView = itemView.findViewById(android.R.id.text1)\n    \n        fun bind(item: String) = with(itemView) {\n          userName.text = item\n        }\n      }\n    \n      interface OnLastPositionReached {\n        fun lastPositionReached()\n        fun otherPosition()\n      }\n    }\n```\n\nThis is very similar to the adapter we created earlier. The difference here is that the new items are added to the bottom and we have an interface to tell us when the `recyclerview` is on the last item and when it is not.\n\nFinally, open the `MainActivity` and set it up like so:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/updatingrealtimecontentpusher/MainActivity.kt\n    import android.os.Bundle\n    import android.support.v7.app.AppCompatActivity\n    import android.support.v7.widget.LinearLayoutManager\n    import android.view.View\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import kotlinx.android.synthetic.main.activity_main.*\n    import org.json.JSONObject\n    \n    class MainActivity : AppCompatActivity(), RecyclerListAdapter.OnLastPositionReached {\n    \n      private var count = 0\n      private val recyclerListAdapter = RecyclerListAdapter(this)\n    \n      private var lastPosition = false\n      override fun otherPosition() {\n        lastPosition = false\n      }\n    \n      override fun lastPositionReached() {\n        lastPosition = true\n        textViewNewContents.visibility = View.GONE\n        count = 0\n      }\n    \n      override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        setupClickListeners()\n        setupRecyclerView()\n        setupPusher()\n      }\n    }\n```\n\nThe `MainActivity` class implements the interface from the adapter to tell us when the `recyclerview` is at the last position or not. We use this to update the `lastPosition` boolean variable in our class. Let us add the other methods called into the class.\n\nThe `setupClickListeners` method is setup like so:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/updatingrealtimecontentpusher/MainActivity.kt\n    private fun setupClickListeners() {\n      textViewNewContents.setOnClickListener {\n        recyclerViewContents.scrollToPosition(recyclerListAdapter.itemCount-1)\n        textViewNewContents.visibility = View.GONE\n        count = 0\n      }\n    }\n```\n\nWhen the `textview` that shows the count of the new messages is clicked, it scrolls down immediately to recent messages, set the count to 0 and hides the `textview`.\n\nThe next method is the `setupRecyclerView` method. Set it up like this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/updatingrealtimecontentpusher/MainActivity.kt\n    private fun setupRecyclerView() {\n      with(recyclerViewContents){\n        layoutManager = LinearLayoutManager(this@MainActivity)\n        adapter = recyclerListAdapter\n      }\n     \n      recyclerListAdapter.addItem(\"Hello World\")\n      recyclerListAdapter.addItem(\"New article alert!\")\n      recyclerListAdapter.addItem(\"Pusher is actually awesome\")\n      recyclerListAdapter.addItem(\"Realtime functionality freely provided \")\n      recyclerListAdapter.addItem(\"Checkout pusher.com/tutorials\")\n      recyclerListAdapter.addItem(\"You can also checkout blog.pusher.com\")\n      recyclerListAdapter.addItem(\"Learn how to update contents properly \")\n      recyclerListAdapter.addItem(\"Hello World\")\n      recyclerListAdapter.addItem(\"New article alert!\")\n      recyclerListAdapter.addItem(\"Pusher is actually awesome\")\n      recyclerListAdapter.addItem(\"Realtime functionality freely provided \")\n      recyclerListAdapter.addItem(\"Checkout pusher.com/tutorials\")\n      recyclerListAdapter.addItem(\"You can also checkout blog.pusher.com\")\n      recyclerListAdapter.addItem(\"Learn how to update contents properly \")\n    }\n```\n\nThis method setups the recyclerview with a layout manager and an adapter. We also added items to the list. \n\nThe next method is the `setupPusher` method. Set it up like so:\n\n``` kotlin\n    private fun setupPusher() {\n      val options = PusherOptions()\n      options.setCluster(\"PUSHER_CLUSTER\")\n    \n      val pusher = Pusher(\"PUSHER_KEY\", options)\n      val channel = pusher.subscribe(\"my-channel\")\n    \n      channel.bind(\"my-event\") { channelName, eventName, data -\u003e\n        runOnUiThread {  \n          if (!lastPosition){\n            count ++\n            textViewNewContents.text = count.toString()\n            textViewNewContents.visibility = View.VISIBLE\n            recyclerListAdapter.addItem(JSONObject(data).getString(\"message\"))    \n          } else {\n            recyclerListAdapter.addItem(JSONObject(data).getString(\"message\"))\n            recyclerViewContents.scrollToPosition(recyclerListAdapter.itemCount-1)\n          } \n        }\n      }\n      \n      pusher.connect()\n    }\n```\nThis is the method where we connect to our Pusher Channels instance. When a new message is gotten, we use the `lastPosition` variable to know if the user is already at the end of the `recyclerview`, then we just append the new messages and refresh the list. If the user is not at the last position, we add a `textview` notification to show that there is new content.\n\n\n\u003e Replace the PUSHER placeholders with actual keys from your dashboard.\n\nAdd the internet permission in the `AndroidManifest.xml` file like so:\n\n``` xml\n    \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n```\n\nRun the application and then go ahead to your Pusher app debug console and send new messages.\n\nHere is the raw data to send to the channel `my-channel` and the event `my-event`:\n\n```\n    {\n      \"message\": \"Hi there\"\n    }\n```\n\nYour app should now work like this:\n\n![realtime-content-demo-3](//images.ctfassets.net/1es3ne0caaid/1jFK7p9Z3Qks4qYGusKI4Q/67a00cab8cf0f10a57cf7b0720063bec/realtime-content-demo-3.gif)\n\n\n## Conclusion\n\nIn this tutorial, we have learned about updating contents the right way. We looked at a possible bad UX use case where a user can get confused. We also looked at two good UX models you can easily adapt.\n\nFeel free to play around the GitHub repo [here](https://github.com/neoighodaro-articles/updating-contents-realtime).","metaTitle":"Updating content in realtime without confusing your users","metaDescription":"This tutorial looks at some of the potential downsides of updating content in realtime, and presents solutions. You will build a simple Android app, and experiment with ways to improve the user experience of realtime functionality."}}],"defaultValue":"Kotlin","queryType":"tag","pages":5,"route":"/tutorials","query":{"tag":"Kotlin","page":"2"}}},"page":"/tutorials","query":{"tag":"Kotlin","page":"2"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=Kotlin&page=2 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:28:09 GMT -->
</html>