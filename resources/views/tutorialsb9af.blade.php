<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=Android&page=9 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:36:40 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">86</span> tutorials for “<span class="css-npldjc ehwuahf2">Android</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorialsa785.html?product=Beams&amp;tag=Android" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials.html" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#C223CE" xmlns="http://www.w3.org/2000/svg"><path fill="#C223CE" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#C223CE" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#C223CE" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#C223CE" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Android"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/push-notifications-social-android-part-1.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li></ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Send push notifications in a social network Android app - Part 1</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">In this two-part series, build a social network Android app with event planning functionality, supported by push notific...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/read-receipts-kotlin.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build read receipts using Kotlin</h3><p class="css-k12xad e5jrto45">Discover how to build read receipts and integrate it in your Kotlin chat app.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/social-network-kotlin.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a simple social network with Kotlin</h3><p class="css-k12xad e5jrto45">Social feed have become a major feature of many apps and websites. Learn how to build one with Kotlin and Node.js.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/activity-feed-android.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Java</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an activity feed in Android </h3><p class="css-k12xad e5jrto45">Discover how you can create a realtime activity feed for your Android app.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-map-kotlin.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Maps<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Android</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime map using Kotlin</h3><p class="css-k12xad e5jrto45">In this tutorial, you will learn how to build a realtime map using Kotlin, Node.js and Google Maps API.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-table-android.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Java<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime table with Android </h3><p class="css-k12xad e5jrto45">In this tutorial, build a simple live table for Android devices with Java.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-comments-kotlin.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Comments</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build live comments using Kotlin</h3><p class="css-k12xad e5jrto45">Realtime comments are a natural feature of any social app. In this tutorial, you will learn to build it with Kotlin.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/counter-kotlin.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime counter using Kotlin</h3><p class="css-k12xad e5jrto45">Counters are always useful for any app. In this tutorial, we will buld a live click counter using Kotlin.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-notifications-android.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Java<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Trading</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build live notifications for Android</h3><p class="css-k12xad e5jrto45">Build live notifications that show the movement of the price of Bitcoin, Ether, or your favourite cryptocurrency on Andr...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialsb4d9.html?tag=Android&amp;page=8" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials7538.html?tag=Android&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorialsf0a6.html?tag=Android&amp;page=7" class="css-za1ua3 edg0byb1">7</a><a href="tutorialsb4d9.html?tag=Android&amp;page=8" class="css-za1ua3 edg0byb1">8</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsb9af.html?tag=Android&amp;page=9" class="css-2wakph edg0byb1">9</a><a href="tutorials3b60.html?tag=Android&amp;page=10" class="css-5s6711 edg0byb1">10</a><a href="tutorials3b60.html?tag=Android&amp;page=10" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":86,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5QTIN5Z53aayW6cs24m2mo","type":"Entry","createdAt":"2018-04-12T14:44:35.964Z","updatedAt":"2020-06-19T14:31:41.818Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":7,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Send push notifications in a social network Android app - Part 1","url":"push-notifications-social-android-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5XNUJSocQo6scKsiMs2Iko","type":"Entry","createdAt":"2018-02-14T13:34:52.032Z","updatedAt":"2018-02-14T13:34:52.032Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Graham Cox","url":"graham-cox","email":"graham@grahamcox.co.uk","twitter":"https://twitter.com/grahamcox82","github":"https://github.com/sazzer","guestWriter":true}}],"projectRepo":"https://github.com/sazzer/pusher-events","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2018-04-12","description":"In this two-part series, build a social network Android app with event planning functionality, supported by push notifications. Part one covers the creation of the app and implements the basic functionality.","prerequisite":"In order to follow this tutorial, you will need some experience with the Kotlin programming language. You will also need appropriate IDEs (IntelliJ IDEA and Android Studio are recommended)","content":"*This is part 1 of a 2 part tutorial. You can find part 2 [here](https://pusher.com/tutorials/push-notifications-social-android-part-2).*\n\n## Introduction\n\nPush notifications are the frontline interaction between a user and their connections within a social network, updating them when something has happened so they can pick up where they left off.\n\nPush notifications for social networks include updates like hearts or comments on Instagram posts, dating matches on Tinder, or host-guest communication on Airbnb. \n\nSetting up push notifications can be confusing and time-consuming. However, with Pusher’s [Beams API](https://pusher.com/push-notifications), the process is a lot easier and faster.\n\nIn this article, we are going to build a simple Android application for event management, where users can express interest in a registered event. In part 2, we will then extend this application to send and receive push notifications whenever anything happens with these events.\n\n\n![android-social-network-push-notifications-app-preview](//images.ctfassets.net/1es3ne0caaid/6l9KMABOpOMyEEiWKg0AK4/a7fc3fab35a2fa0cebd16ccb51a612e5/android-social-network-push-notifications-app-preview.gif)\n\n\n\n## Prerequisites\n\nIn order to follow along, you will need some experience with the Kotlin programming language, which we are going to use for both the backend and frontend of our application. \n\nYou will also need appropriate IDEs. We suggest [IntelliJ IDEA](https://www.jetbrains.com/idea/) and [Android Studio](https://developer.android.com/studio/index.html).\n\n## Building the backend\n\nThe backend of our system is responsible for storing and providing the event details, and for triggering our push notifications anytime anything changes with them. We are going to build this in Kotlin using the Spring Boot framework, as this is a very quick way to get going for server-side Kotlin applications.\n\nHead over to https://start.spring.io/ to create our project structure. We need to specify that we are building a **Gradle** project with **Kotlin** and Spring Boot **2.0.0** (Or newer if available at the time of reading), and we need to include the “Web” components:\n\n![android-social-network-push-notifications-spring-initializr](//images.ctfassets.net/1es3ne0caaid/1fVHqcrrkYeMAGMUEMy8wM/ad6dbd60492cbd89882c15b93651aaa5/android-social-network-push-notifications-spring-initializr.png)\n\n\nThe **Generate Project** button will give you a zip file containing our application structure. Unpack this somewhere. At any time, you can execute `./gradlew bootRun` to build and start your backend server running.\n\nFirstly though, we need to add some dependencies. Open up the `build.gradle` file and add the following to the `dependencies` section:\n\n```\n    runtime 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.2'\n```\n\nThis is the Jackson module needed for serialising and deserialising Kotlin classes into JSON.\n\nNow, build the project. This will ensure that all of the dependencies are downloaded and made available and that everything compiles and builds correctly:\n\n```\n    $ ./gradlew build\n    \n    BUILD SUCCESSFUL in 1s\n    5 actionable tasks: 5 up-to-date\n```\n\n### Users and Friends APIs\n\nAny Social Networking Application will need to have mechanisms to manage users and friends. In this example, we are not going to support creating new users or adding and removing friends. Instead, we are simply going to have a read-only API to support the rest of the application.\n\n\n\u003e **Note:** we’re not going to be building a UI for the backend so we will have to interact with this using a REST client such as [Postman](https://www.getpostman.com/).\n\nThe endpoints that we need are:\n\n- GET /users/{id}\n- GET /users/{id}/friends\n\nFirstly, let’s create a class to represent the API payloads. We’re going to use the exact same class for both User and Friend, with the only difference being that the endpoint for listing friends returns a list of *User* classes instead of just one.\n\nWhen the `jackson-module-kotlin` dependency is included Spring automatically supports marshalling Kotlin Data classes to and from JSON, so all we need is to define this class:\n\n``` kotlin\n    data class User(\n            val id: String?,\n            val name: String\n    )\n```\n\nNext we need the Controller to work with this data:\n\n``` kotlin\n    @RestController\n    @RequestMapping(\"/users\")\n    class UserController {\n        private val users = mutableListOf(\n                User(id = \"john\", name = \"John\"),\n                User(id = \"paul\", name = \"Paul\"),\n                User(id = \"george\", name = \"George\"),\n                User(id = \"ringo\", name = \"Ringo\")\n        )\n    \n        private val friends = mapOf(\n                \"john\" to listOf(\"paul\", \"george\", \"ringo\"),\n                \"paul\" to listOf(\"john\", \"george\", \"ringo\"),\n                \"george\" to listOf(\"john\", \"paul\", \"ringo\"),\n                \"ringo\" to listOf(\"john\", \"paul\", \"george\")\n        )\n    \n        @RequestMapping(\"/{id}\")\n        fun getUser(@PathVariable(\"id\") id: String) =\n                users.find { it.id == id }\n                        ?.let { ResponseEntity.ok(it) }\n                        ?: ResponseEntity.notFound().build()\n    \n        @RequestMapping(\"/{id}/friends\")\n        fun getFriends(@PathVariable(\"id\") id: String) =\n                friends[id]?.map {friendId -\u003e users.find { user -\u003e user.id == friendId } }\n                        ?.filterNotNull()\n                        ?.let { ResponseEntity.ok(it) }\n                        ?: ResponseEntity.notFound().build()\n    }\n```\n\n\u003e **Note:** there is absolutely no effort put into authentication or authorization of this API. If you do this for real you will need to address that concern, but for our example application this is good enough.\n\nIn order to keep this simple, we’ve used a simple in-memory list inside of the controller for the data, and we’ve stored the API payload objects directly. In reality this would come from the database and would go through some translation layer to convert the DAO objects into the API objects - since it is unlikely they will be exactly the same structure - but for the sake of simplicity this gives us what we need.\n\nAs long as this is in the same package or a child package of the one containing your main Application class then Spring will automatically find it - because of the `@RestController` annotation - and make it available. This then gives us most of the API functionality that we wanted straight away.\n\n### Events APIs\n\nWe now need some endpoints for interacting with events. \n\nThe endpoints that we need are:\n\n- GET /events - To list all of the events that are known.\n- GET /events/{id} - To get the details of a single event.\n- POST /events - To create a new event.\n- PUT /events/{id} - To update an existing event.\n- DELETE /events/{id} - To delete an event.\n- GET /events/{id}/interest - To get all of the users interested in an event.\n- PUT /events/{id}/interest/{user} - To register interest in an event.\n- DELETE /events/{id}/interest/{user} - To unregister interest in an event.\n- POST /events/{id}/share - To share the event with another user\n\n\n\u003e **Note:** Registering and unregistering interest in an event is done by providing the User ID in the URL. In reality the system would know which user you are by the authentication details provided, but since we aren’t implementing authentication we’ve got to do something else instead.\n\nThis seems like a lot, but we’re not going to do anything complicated with them. Instead, as before, we’re going to use a simple list to contain the events, and the event data will directly be the API payload.\n\nFirstly, let's create our Event API payload. Create a new class called `Event` as follows:\n\n``` kotlin\n    data class Event(\n            val id: String?,\n            val name: String,\n            val description: String,\n            val start: Instant\n    )\n```\n\nNext we need the Controller to work with this data:\n\n``` kotlin\n    @RestController\n    @RequestMapping(\"/events\")\n    class EventController {\n        private val events = mutableListOf(\n                Event(\n                        id = \"xmas\",\n                        name = \"Christmas\",\n                        description = \"It's the most wonderful time of the year\",\n                        start = Instant.parse(\"2018-12-25T00:00:00Z\")\n                )\n        )\n    \n        @RequestMapping\n        fun getEvents() = events\n    \n        @RequestMapping(\"/{id}\")\n        fun getEvent(@PathVariable(\"id\") id: String) =\n                events.find { it.id == id }\n                        ?.let { ResponseEntity.ok(it) }\n                        ?: ResponseEntity.notFound().build()\n    \n        @RequestMapping(method = [RequestMethod.POST])\n        fun createEvent(@RequestBody event: Event): Event {\n            val newEvent = Event(\n                    id = UUID.randomUUID().toString(),\n                    name = event.name,\n                    description = event.description,\n                    start = event.start\n            )\n            events.add(newEvent)\n            return newEvent\n        }\n    \n        @RequestMapping(value = [\"/{id}\"], method = [RequestMethod.DELETE])\n        fun deleteEvent(@PathVariable(\"id\") id: String) {\n            events.removeIf { it.id == id }\n        }\n    \n        @RequestMapping(value = [\"/{id}\"], method = [RequestMethod.PUT])\n        fun updateEvent(@PathVariable(\"id\") id: String, @RequestBody event: Event): ResponseEntity\u003cEvent\u003e? {\n            return if (events.removeIf { it.id == id }) {\n                val newEvent = Event(\n                        id = id,\n                        name = event.name,\n                        description = event.description,\n                        start = event.start\n                )\n                events.add(newEvent)\n                ResponseEntity.ok(newEvent)\n            } else {\n                ResponseEntity.notFound().build()\n            }\n        }   \n    \n        @RequestMapping(value = [\"/{id}/share\"], method = [RequestMethod.POST])\n    fun shareEvent(@PathVariable(\"id\") event: String, @RequestBody friends: List\u003cString\u003e) {\n        } \n    }\n```\n\nNote that there’s no functionality here for sharing events. That is because the only thing it does is to send push notifications, which will be covered in the second article.\n\nNext we want a controller to allow users to show interest in events. This is going to be based on simple in-memory data types again for simplicity sake. Add the following to the same Controller class:\n\n``` kotlin\n    private val interest: MutableMap\u003cString, MutableSet\u003cString\u003e\u003e = mutableMapOf()\n    \n    @RequestMapping(\"/{id}/interest\")\n    fun getInterest(@PathVariable(\"id\") event: String) =\n            interest.getOrElse(event) {\n                mutableSetOf()\n            }\n    \n    @RequestMapping(value = [\"/{id}/interest/{user}\"], method = [RequestMethod.PUT])\n    fun registerInterest(@PathVariable(\"id\") event: String, @PathVariable(\"user\") user: String) {\n        val eventInterest = interest.getOrPut(event) {\n            mutableSetOf()\n        }\n    \n        eventInterest.add(user)\n    }\n    \n    @RequestMapping(value = [\"/{id}/interest/{user}\"], method = [RequestMethod.DELETE])\n    fun unregisterInterest(@PathVariable(\"id\") event: String, @PathVariable(\"user\") user: String) {\n        val eventInterest = interest.getOrPut(event) {\n            mutableSetOf()\n        }\n    \n        eventInterest.remove(user)\n    }\n```\n\nAt this point, all of our API methods can be called and will work exactly as expected. You can use a tool like cURL or Postman to test them out for yourselves.\n\n## Building the Android application\n\nThe frontend Android application will also be built in Kotlin, using Android Studio. To start, open up Android Studio and create a new project, entering some appropriate details and ensuring that you select the **Include Kotlin support** option.\n\n![android-social-network-push-notifications-create-android-project](//images.ctfassets.net/1es3ne0caaid/17GwOxmIa2WOSw84qYcU4q/c29aa9c0758d2dfb1ab2aa1baa9f509a/android-social-network-push-notifications-create-android-project.png)\n\n\nThen on the next screen, ensure that you select support for **Phone and Tablet** using at least API 16:\n\n![android-social-network-push-notifications-target-android-devices](//images.ctfassets.net/1es3ne0caaid/5jPPISaE9aa2QckkAUsuiW/569509ed5c30560d5fba6d4e61818575/android-social-network-push-notifications-target-android-devices.png)\n\nEnsure that an **Empty Activity** is selected:\n\n![android-social-network-push-notifications-add-activity-mobile](//images.ctfassets.net/1es3ne0caaid/6C5qUTernyMckA2uSGcMWm/cb62447585c23780f62ab20d9c108923/android-social-network-push-notifications-add-activity-mobile.png)\n\nAnd change the **Activity Name** to “LoginActivity”:\n\n![android-social-network-push-notifications-configure-activity](//images.ctfassets.net/1es3ne0caaid/1bB2S6fgt4yUOumMkuyaIs/1170352e5a6f072d484ef6e4bc0aac2a/android-social-network-push-notifications-configure-activity.png)\n\nThen add the following to the `dependencies` section of the App level `build.gradle`:\n\n```\n    compile 'com.loopj.android:android-async-http:1.4.9'\n    compile 'com.google.code.gson:gson:2.2.4'\n```\n\nFinally, we need to add some permissions to our application. Open up the `AndroidManifest.xml` file and add the following immediately before the `\u003capplication\u003e` tag:\n\n```\n    \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n```\n\n### Remembering the logged in user\n\nFor the application to work, we need to know which user we have logged in as. We are going to do this by extending the standard `Application` class to add our own data value for the username.\n\nTo do this, first create a new class called `EventsApplication` as follows:\n\n``` kotlin\n    class EventsApplication : Application() {\n        var username: String? = null\n    }\n```\n\nThen update the `AndroidManifest.xml` file to reference it:\n\n``` xml\n    \u003capplication\n        android:name=\".EventsApplication\"\n```\n\nFrom now on, any of our `Activity`  classes will see `this.application` as being the same instance of `EventsApplication`, and any changes we make to `EventsApplication.username` will persist between activities.\n\n## User login screen\n\nThe first thing we want to create in our Android application is the **User Login** screen. For our application, this is a trivial case of entering a username. Remember that we are not implementing authentication or authorization so we are are not going to request passwords, and we are not going to remember which user you are logged in as.\n\nUpdate `activity_login.xml` to contain the following:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:gravity=\"center_vertical|fill_horizontal\"\n        android:orientation=\"vertical\"\n        tools:layout_editor_absoluteX=\"8dp\"\n        tools:layout_editor_absoluteY=\"8dp\"\u003e\n    \n        \u003cTextView\n            android:id=\"@+id/userNameLabel\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Username:\" /\u003e\n    \n        \u003cEditText\n            android:id=\"@+id/userNameInput\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:ems=\"10\"\n            android:inputType=\"textVisiblePassword\" /\u003e\n    \n        \u003cButton\n            android:id=\"@+id/loginButton\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Login\"\n            android:onClick=\"onClickLogin\" /\u003e\n    \u003c/LinearLayout\u003e\n```\n\nNotice that we have an entry in the `Button` for `android:onClick`. This sets us up to have a handler for clicking on the button straight away, so let’s make use of this.\n\nAdd the following to `LoginActivity`:\n\n``` kotlin\n    fun onClickLogin(v: View) {\n        val usernameInput = findViewById\u003cEditText\u003e(R.id.userNameInput)\n        val username = usernameInput.text.toString()\n        if (username.isBlank()) {\n            Toast.makeText(this, \"No username entered!\", Toast.LENGTH_LONG).show()\n        } else {\n            (this.application as EventsApplication).username = username\n            startActivity(Intent(this, EventsListActivity::class.java))\n        }\n    }\n```\n\nIn the case that a username was not entered, we display a Toast message informing the user of this fact. If they have, we store it onto our `EventsApplication` class and transition to the `EventsListActivity` that we are about to write.\n\n## Listing events\n\nOnce we have logged in, we can show the list of events in the system. For this, we will create a new Activity containing the list of events. \n\nCreate a new resource layout file called `activity_eventslist.xml` as follows:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:background=\"#fff\"\u003e\n        \u003cScrollView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\u003e\n            \u003cLinearLayout\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:orientation=\"vertical\"\u003e\n    \n                \u003cTableLayout\n                    android:layout_marginTop=\"10dp\"\n                    android:id=\"@+id/table_layout\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"wrap_content\"\u003e\n    \n                    \u003cTableRow\n                        android:layout_height=\"wrap_content\"\n                        android:layout_width=\"match_parent\"\n                        android:id=\"@+id/table_row1\"\n                        android:padding=\"10dp\"\u003e\n    \n                        \u003cTextView\n                            android:id=\"@+id/name\"\n                            android:fontFamily=\"serif\"\n                            android:layout_height=\"wrap_content\"\n                            android:layout_width=\"match_parent\"\n                            android:layout_weight=\"1\"\n                            android:textColor=\"#000\"\n                            android:text=\"Name\"/\u003e\n                        \u003cTextView\n                            android:id=\"@+id/date\"\n                            android:textColor=\"#000\"\n                            android:fontFamily=\"serif\"\n                            android:layout_height=\"wrap_content\"\n                            android:layout_width=\"match_parent\"\n                            android:layout_weight=\"1\"\n                            android:text=\"Date\"/\u003e\n    \n                    \u003c/TableRow\u003e\n                    \u003cView\n                        android:layout_height=\"3dip\"\n                        android:layout_width=\"match_parent\"\n                        android:background=\"#ff0000\"/\u003e\n                \u003c/TableLayout\u003e\n    \n                \u003cListView\n                    android:id=\"@+id/records_view\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"500dp\"\n                    android:layout_marginTop=\"16dp\"\u003e\n                \u003c/ListView\u003e\n            \u003c/LinearLayout\u003e\n        \u003c/ScrollView\u003e\n    \u003c/LinearLayout\u003e\n```\n\nThis layout gives us a table layout to represent our header and a list view in which we are going to render the individual events that are currently available.\n\nNext create a new class called `EventsListActivity` as follows:\n\n``` kotlin\n    class EventsListActivity : AppCompatActivity() {\n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_eventslist)\n        }\n    }\n```\n\nAnd finally add an entry to `AndroidManifest.xml` inside the `application` tag to register the new Activity:\n\n```\n    \u003cactivity android:name=\".EventsListActivity\" /\u003e\n```\n\nNow we want to populate our list view from our backend data. The first thing we need is a class to represent the data in each row. Create a new class called `Event` as follows:\n\n``` kotlin\n    data class Event(\n            val id: String,\n            val name: String,\n            val description: String,\n            val start: String\n    )\n```\n\nYou will notice that this is almost the same as the equivalent class in the backend. The differences are that the ID is not nullable because every event is guaranteed to have an ID here; and the start time is a string, because Android runs on Java 6 and the `Instant` class is not available here.\n\nNow we need a means to convert the `Event` data into a record to display in our list view. For this, create a new `EventAdapter` class:\n\n``` kotlin\n    class EventAdapter(private val recordContext: Context) : BaseAdapter() {\n        var records: List\u003cEvent\u003e = listOf()\n            set(value) {\n                field = value\n                notifyDataSetChanged()\n            }\n    \n        override fun getView(i: Int, view: View?, viewGroup: ViewGroup): View {\n            val theView = if (view == null) {\n                val recordInflator = recordContext.getSystemService(Activity.LAYOUT_INFLATER_SERVICE) as LayoutInflater\n    \n                val theView = recordInflator.inflate(R.layout.record, null)\n                val newEventViewHolder = EventViewHolder(\n                        theView.findViewById(R.id.event_name),\n                        theView.findViewById(R.id.event_date)\n                )\n                theView.tag = newEventViewHolder\n    \n                theView\n            } else {\n                view\n            }\n    \n            val eventViewHolder = theView.tag as EventViewHolder\n    \n            val event = getItem(i)\n            eventViewHolder.nameView.text = event.name\n            eventViewHolder.dateView.text = event.start\n            eventViewHolder.id = event.id\n    \n            return theView\n        }\n    \n        override fun getItem(i: Int) = records[i]\n    \n        override fun getItemId(i: Int) = 1L\n    \n        override fun getCount() = records.size\n    }\n    \n    data class EventViewHolder(\n        val nameView: TextView,\n        val dateView: TextView\n    ) {\n        var id: String? = null\n    }\n```\n\nAmongst other things, this is responsible for creating and populating a new view that we will describe soon. This view is then populated with data from the appropriate event object, as held by our new `EventViewHolder` class.\n\nNext we need to describe our view. For this, create a new layout file called `event.xml` as follows:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"horizontal\" android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\u003e\n        \u003cTextView\n            android:id=\"@+id/event_name\"\n            android:fontFamily=\"serif\"\n            android:layout_height=\"wrap_content\"\n            android:layout_width=\"match_parent\"\n            android:layout_weight=\"1\"\n            android:textColor=\"#000\"\n            android:text=\"Name\"/\u003e\n        \u003cTextView\n            android:id=\"@+id/event_date\"\n            android:textColor=\"#000\"\n            android:fontFamily=\"serif\"\n            android:layout_height=\"wrap_content\"\n            android:layout_width=\"match_parent\"\n            android:layout_weight=\"1\"\n            android:text=\"Date\"/\u003e\n    \u003c/LinearLayout\u003e\n```\n\nNow we want to retrieve the list of events from our backend service. For this article we will do this on startup for simplicity. Open up `EventsListActivity`, and add the following. Firstly we need a constant to define the URL to retrieve the events from:\n\n``` kotlin\n    private val EVENTS_ENDPOINT = \"http://10.0.2.2:8080/events\"\n```\n\n\u003e **Note:** The IP Address “10.0.2.2” is used when running on an Android emulator to refer to the host machine. In reality this should be the correct address of the backend server.\n\nNext add a new field to the `EventsListActivity` class:\n\n``` kotlin\n    private lateinit var recordAdapter: EventAdapter\n```\n\nCreate a new function to refresh the events list:\n\n``` kotlin\n    private fun refreshEventsList() {\n        val client = AsyncHttpClient()\n        client.get(EVENTS_ENDPOINT, object : JsonHttpResponseHandler() {\n            override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, response: JSONArray) {\n                super.onSuccess(statusCode, headers, response)\n                runOnUiThread {\n                    val events = IntRange(0, response.length() - 1)\n                            .map { index -\u003e response.getJSONObject(index) }\n                            .map { obj -\u003e\n                                Event(\n                                        id = obj.getString(\"id\"),\n                                        name = obj.getString(\"name\"),\n                                        description = obj.getString(\"description\"),\n                                        start = obj.getString(\"start\")\n                                )\n                            }\n    \n                    recordAdapter.records = events\n                }\n            }\n        })\n    }\n```\n\nNow add this to the `onCreate` method:\n\n``` kotlin\n    recordAdapter = EventAdapter(this)\n    val recordsView = findViewById\u003cView\u003e(R.id.records_view) as ListView\n    recordsView.setAdapter(recordAdapter)\n    \n    refreshEventsList()\n```\n\nAt this point, running the Android application would show the list of events as they are in the backend server, displaying the event name and start time in the list.\n\n![android-social-network-push-notifications-list-events](//images.ctfassets.net/1es3ne0caaid/2LO4251AFqUmOe8qW82aSq/ea471bd2193c549f695d149638b128df/android-social-network-push-notifications-list-events.png)\n\nThe next thing we want is to add a menu to this screen. That will act as our route to creating new events, and to allowing the user to manually reload the events list (as a stand-in for automatically refreshing the list).\n\nCreate a new resource file `eventslist.xml` under `res/menu`:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cmenu xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003e\n    \n        \u003citem\n            android:icon=\"@android:drawable/ic_input_add\"\n            android:title=\"New Event\"\n            app:showAsAction=\"ifRoom\"\n            android:onClick=\"onClickNewEvent\" /\u003e\n        \u003citem\n            android:icon=\"@android:drawable/ic_popup_sync\"\n            android:title=\"Refresh\"\n            app:showAsAction=\"ifRoom\"\n            android:onClick=\"onClickRefresh\" /\u003e\n    \u003c/menu\u003e\n```\n\nThen update the `EventsListActivity` class to inflate this menu:\n\n``` kotlin\n    override fun onCreateOptionsMenu(menu: Menu?): Boolean {\n        menuInflater.inflate(R.menu.eventslist, menu)\n        return true\n    }\n```\n\nWe also need to add handlers for our menu items:\n\n``` kotlin\n    fun onClickNewEvent(v: MenuItem) {\n        startActivity(Intent(this, CreateEventsActivity::class.java))\n    }\n    \n    fun onClickRefresh(v: MenuItem) {\n        refreshEventsList()\n    }\n```\n\nThe `onClickRefresh` handler uses our already existing `refreshEventsList` method, and the `onClickNewEvent` handler will start an as-yet-unwritten activity.\n\n\n## Creating new events\n\nNext we want the ability to create new events in the system. This will be a simple form allowing the user to enter a name, description and start time for the event, and will then send this to the backend.\n\nCreate a new resource layout file called `activity_createevent.xml` as follows:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:gravity=\"center_vertical|fill_horizontal\"\n        android:orientation=\"vertical\"\n        tools:layout_editor_absoluteX=\"8dp\"\n        tools:layout_editor_absoluteY=\"8dp\"\u003e\n    \n        \u003cTextView\n            android:id=\"@+id/nameLabel\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Event Name:\" /\u003e\n    \n        \u003cEditText\n            android:id=\"@+id/nameInput\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:ems=\"10\"\n            android:inputType=\"textCapWords|textAutoCorrect\" /\u003e\n    \n        \u003cTextView\n            android:id=\"@+id/descriptionLabel\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Description:\" /\u003e\n    \n        \u003cEditText\n            android:id=\"@+id/descriptionInput\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:ems=\"10\"\n            android:inputType=\"textCapSentences|textAutoCorrect|textAutoComplete\" /\u003e\n    \n        \u003cTextView\n            android:id=\"@+id/startLabel\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Start Time:\" /\u003e\n    \n        \u003cEditText\n            android:id=\"@+id/startInput\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:ems=\"10\" /\u003e\n    \n        \u003cButton\n            android:id=\"@+id/createButton\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:onClick=\"onClickCreate\"\n            android:text=\"Create Event\" /\u003e\n    \u003c/LinearLayout\u003e\n```\n\nThis layout gives us a very simple form and a button that will be used to actually create the event. \n\n\n\u003e **Note:** it does require us to enter the start time in the very specific format, which is not good user experience. Adding a Date/Time picker is left as an exercise to the reader.\n\nNext create a new class called `CreateEventsActivity` as follows:\n\n``` kotlin\n    class CreateEventsActivity : AppCompatActivity() {\n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_createevent)\n        }\n    \n        fun onClickCreate(v: View) {\n        }\n    }\n```\n\nAnd finally add an entry to `AndroidManifest.xml` inside the `application` tag to register the new Activity:\n\n``` xml\n    \u003cactivity android:name=\".CreateEventsActivity\" android:windowSoftInputMode=\"adjustResize\"/\u003e\n```\n\n\u003e Note the new `android:windowSoftInputMode` attribute. This tells Android to resize the activity whenever the keyboard is displayed, rather than displaying the keyboard over the top of it.\n\nNow we just need to actually create the event. Open up `CreateEventsActivity`, and add the following. Firstly we need a constant to define the URL to send the event details to:\n\n``` kotlin\n    private val EVENTS_ENDPOINT = \"http://10.0.2.2:8080/events\"\n```\n\nThen we need to implement our `onClickCreate` method:\n\n``` kotlin\n    fun onClickCreate(v: View) {\n        val nameInput = findViewById\u003cEditText\u003e(R.id.nameInput)\n        val descriptionInput = findViewById\u003cEditText\u003e(R.id.descriptionInput)\n        val startInput = findViewById\u003cEditText\u003e(R.id.startInput)\n    \n        val name = nameInput.text.toString()\n        val description = descriptionInput.text.toString()\n        val start = startInput.text.toString()\n    \n        if (name.isBlank()) {\n            Toast.makeText(this, \"No event name entered!\", Toast.LENGTH_LONG).show()\n        } else if (start.isBlank()) {\n            Toast.makeText(this, \"No start time entered!\", Toast.LENGTH_LONG).show()\n        } else {\n            val transitionIntent = Intent(this, EventsListActivity::class.java)\n    \n            val client = AsyncHttpClient()\n            val request = JSONObject(mapOf(\n                    \"name\" to name,\n                    \"description\" to description,\n                    \"start\" to start\n            ))\n            client.post(applicationContext, EVENTS_ENDPOINT, StringEntity(request.toString()), \"application/json\", object : JsonHttpResponseHandler() {\n                override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, response: JSONObject) {\n                    startActivity(transitionIntent)\n                }\n            })\n        }\n    }\n```\n\nThis will send the appropriate HTTP Request to our server, providing the event details, and then - on a successful response - direct the user back to the **Events List**. By the time our user gets there, the event will have been created and it will automatically appear in the list.\n\n![android-social-network-push-notifications-create-event](//images.ctfassets.net/1es3ne0caaid/5IUTG0qyVGyAgeeK2kkmOI/176c80fbf388f358c3ff4f9de6b832c0/android-social-network-push-notifications-create-event.gif)\n\n## Viewing event details\n\nThe final part of the UI is to be able to see the full details of an event, rather than just the list. This will include the description, the number of users that are interested, and whether or not the current user is on the list. It will also give the ability to register or remove interest in the event.\n\nCreate a new resource layout file called `activity_viewevent.xml` as follows:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:gravity=\"center_vertical|fill_horizontal\"\n        android:orientation=\"vertical\"\n        tools:layout_editor_absoluteX=\"8dp\"\n        tools:layout_editor_absoluteY=\"8dp\"\u003e\n    \n        \u003cTextView\n            android:id=\"@+id/nameLabel\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Event Name:\" /\u003e\n    \n        \u003cTextView\n            android:id=\"@+id/nameValue\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"\" /\u003e\n    \n        \u003cTextView\n            android:id=\"@+id/descriptionLabel\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Description:\" /\u003e\n    \n        \u003cTextView\n            android:id=\"@+id/descriptionValue\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"\" /\u003e\n    \n        \u003cTextView\n            android:id=\"@+id/startLabel\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Start Time:\" /\u003e\n    \n        \u003cTextView\n            android:id=\"@+id/startValue\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"\" /\u003e\n    \n        \u003cTextView\n            android:id=\"@+id/numberInterestLabel\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"No. of Interested Users:\" /\u003e\n    \n        \u003cTextView\n            android:id=\"@+id/numberInterestValue\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"\" /\u003e\n    \n        \u003cButton\n            android:id=\"@+id/interestedButton\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:onClick=\"onClickInterested\"\n            android:text=\"Interested\" /\u003e\n    \n        \u003cButton\n            android:id=\"@+id/disinterestedButton\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:onClick=\"onClickDisinterested\"\n            android:text=\"Not Interested\" /\u003e\n    \u003c/LinearLayout\u003e\n```\n\nNext create a new class called `ViewEventActivity` as follows:\n\n``` kotlin\n    class ViewEventActivity : AppCompatActivity() {\n        private lateinit var eventId: String\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_viewevent)\n            eventId = intent.getStringExtra(\"event\")\n    \n            refreshEventDetails()\n        }\n    \n        private fun refreshEventDetails() {\n            Log.v(\"ViewEvent\", eventId)\n        }\n    \n        fun onClickInterested(v: View?) {\n        }\n    \n        fun onClickDisinterested(v: View) {\n        }\n    }\n```\n\nAnd register it in the `AndroidManifest.xml` file:\n\n``` xml\n    \u003cactivity android:name=\".ViewEventActivity\" /\u003e\n```\n\nThen we need to be able to get to this new activity by clicking on an event in the list. Update `EventsListActivity`. \n\nFirstly, add a superclass of `AdapterView.OnItemClickListener` and then implement it by adding the following method:\n\n``` kotlin\n    override fun onItemClick(parent: AdapterView\u003c*\u003e, view: View, position: Int, id: Long) {\n        val eventViewHolder = view.tag as EventViewHolder\n        val intent = Intent(this, ViewEventActivity::class.java)\n        intent.putExtra(\"event\", eventViewHolder.id)\n        startActivity(intent)\n    }\n```\n\nThen register this by adding the following to `onCreate`:\n\n``` kotlin\n    recordsView.onItemClickListener = this\n```\n\nWe are using this to pass some extra data in the Intent to display an Activity - namely the ID of the event that is being displayed. We can now use that to load the event data and display it to the user.\n\nFor that, let’s implement the `refreshEventDetails`  method of `ViewEventActivity`.\n\n``` kotlin\n    private fun refreshEventDetails() {\n        val client = AsyncHttpClient()\n        client.get(EVENTS_ENDPOINT + eventId, object : JsonHttpResponseHandler() {\n            override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, response: JSONObject) {\n                super.onSuccess(statusCode, headers, response)\n                \n                val nameDisplay = findViewById\u003cTextView\u003e(R.id.nameValue)\n                val descriptionDisplay = findViewById\u003cTextView\u003e(R.id.descriptionValue)\n                val startDisplay = findViewById\u003cTextView\u003e(R.id.startValue)\n    \n                val name = response.getString(\"name\")\n                val description = response.getString(\"description\")\n                val start = response.getString(\"start\")\n    \n                runOnUiThread {\n                    nameDisplay.text = name\n                    descriptionDisplay.text = description\n                    startDisplay.text = start\n                }\n            }\n        })\n    \n        client.get(EVENTS_ENDPOINT + eventId + \"/interest\", object : JsonHttpResponseHandler() {\n            override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, response: JSONArray) {\n                super.onSuccess(statusCode, headers, response)\n    \n                val numberInterestedDisplay = findViewById\u003cTextView\u003e(R.id.numberInterestValue)\n                val interestedButton = findViewById\u003cButton\u003e(R.id.interestedButton)\n                val notInterestedButton = findViewById\u003cButton\u003e(R.id.disinterestedButton)\n    \n                val numberInterested = response.length().toString()\n                val imInterested = IntRange(0, response.length() - 1)\n                        .map { index -\u003e response.getString(index) }\n                        .contains((application as EventsApplication).username)\n    \n                runOnUiThread {\n                    numberInterestedDisplay.text = numberInterested\n    \n                    if (imInterested) {\n                        interestedButton.visibility = View.GONE\n                        notInterestedButton.visibility = View.VISIBLE\n                    } else {\n                        interestedButton.visibility = View.VISIBLE\n                        notInterestedButton.visibility = View.GONE\n                    }\n                }\n            }\n        })\n    }\n```\n\nThis is a busy method, but essentially it is making two API calls - the first to get the event details, the second to get the list of people interested in the event - and then updating the UI to display these details.\n\nFinally, let’s allow the user to express interest in the event. This is done by implementing the `onClickInterested` and `onClickDisinterested` buttons:\n\n``` kotlin\n    fun onClickInterested(v: View?) {\n        val client = AsyncHttpClient()\n        val username = (application as EventsApplication).username\n    \n        client.put(EVENTS_ENDPOINT + eventId + \"/interest/\" + username, object : AsyncHttpResponseHandler() {\n            override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e?, responseBody: ByteArray?) {\n                runOnUiThread {\n                    refreshEventDetails()\n                }\n            }\n    \n            override fun onFailure(statusCode: Int, headers: Array\u003cout Header\u003e?, responseBody: ByteArray?, error: Throwable?) {\n                runOnUiThread {\n                    refreshEventDetails()\n                }\n            }\n        })\n    }\n    \n    fun onClickDisinterested(v: View) {\n        val client = AsyncHttpClient()\n        val username = (application as EventsApplication).username\n    \n        client.delete(EVENTS_ENDPOINT + eventId + \"/interest/\" + username, object : AsyncHttpResponseHandler() {\n            override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e?, responseBody: ByteArray?) {\n                runOnUiThread {\n                    refreshEventDetails()\n                }\n            }\n    \n            override fun onFailure(statusCode: Int, headers: Array\u003cout Header\u003e?, responseBody: ByteArray?, error: Throwable?) {\n                runOnUiThread {\n                    refreshEventDetails()\n                }\n            }\n        })\n    }\n```\n\nWe do no handling of the response at all here, simply using the callback to refresh the view details. This is far from ideal but is good enough for now.\n\nAt this point, you can click on the buttons and see the interest levels changing.\n\n![android-social-network-push-notifications-respond-to-event](//images.ctfassets.net/1es3ne0caaid/2CpD9TJNROCe2sKamUmcMm/2e471ce0689ed17e86c3beb39622eba2/android-social-network-push-notifications-respond-to-event.gif)\n\n## Sharing an event with friends\n\nThe last part of our UI is to be able to share an event with friends. This will use a dialog from the **View Event** page and send the request to our server, which will in turn broadcast it on to the appropriate users.\n\nFirstly, we want a dialog to display to the user allowing them to select the friends to share the event with. Create a new `ShareEventDialog` class:\n\n``` kotlin\n    class ShareEventDialog : DialogFragment() {\n        private val EVENTS_ENDPOINT = \"http://10.0.2.2:8080/events/\"\n    \n        lateinit var event: String\n        lateinit var friends: List\u003cFriend\u003e\n    \n        override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {\n            val names = friends.map { it.name }\n            val selected = mutableSetOf\u003cString\u003e()\n            return AlertDialog.Builder(activity)\n                    .setTitle(\"Share\")\n                    .setMultiChoiceItems(names.toTypedArray(), null) { dialog, which, isChecked -\u003e\n                        val friend = friends[which]\n                        if (isChecked) {\n                            selected.add(friend.id)\n                        } else {\n                            selected.remove(friend.id)\n                        }\n                    }\n                    .setPositiveButton(\"Share\") { dialog, which -\u003e\n                        Log.v(\"ShareEventDialog\", \"Sharing with: \" + selected)\n                        val client = AsyncHttpClient()\n                        val request = JSONArray(selected)\n    \n                        client.post(null,EVENTS_ENDPOINT + event + \"/share\", StringEntity(request.toString()), \"application/json\",\n                                object : JsonHttpResponseHandler() {\n    \n                                })\n                    }\n                    .setNegativeButton(\"Cancel\") { dialog, which -\u003e }\n                    .create()\n        }\n    }\n```\n\nThis does all of the work of displaying our dialog and sending the request to the server on success. \n\nNext, we want to create a menu with the **Share** button on it. For this, create a new menu resource called `view.xml` as follows:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cmenu xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003e\n    \n        \u003citem\n            android:icon=\"@android:drawable/ic_menu_share\"\n            android:title=\"Share\"\n            app:showAsAction=\"ifRoom\"\n            android:onClick=\"onClickShare\" /\u003e\n    \u003c/menu\u003e\n```\n\nThen we need to actually display it. Add the following to `ViewEventActivity`:\n\n``` kotlin\n    override fun onCreateOptionsMenu(menu: Menu?): Boolean {\n        menuInflater.inflate(R.menu.view, menu)\n        return true\n    }\n```\n\nAnd we need to implement the `onClickShare` method.\n\nWe need to obtain our list of friends from the API that we can share with. We’ll create a `Friend` class to represent each friend:\n\n``` kotlin\n    data class Friend(\n            val id: String,\n            val name: String\n    )\n```\n\nThen obtain the actual list of friends. Add the following field to `ViewEventActivity`:\n\n``` kotlin\n    private val USERS_ENDPOINT = \"http://10.0.2.2:8080/users/\"\n```\n\nAnd then an implementation of `onClickShare`:\n\n``` kotlin\n    fun onClickShare(v: MenuItem) {\n        val client = AsyncHttpClient()\n        client.get(USERS_ENDPOINT + (application as EventsApplication).username + \"/friends\", object : JsonHttpResponseHandler() {\n            override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e?, response: JSONArray) {\n                super.onSuccess(statusCode, headers, response)\n    \n                val friends = IntRange(0, response.length() - 1)\n                        .map { index -\u003e response.getJSONObject(index) }\n                        .map { obj -\u003e\n                            Friend(\n                                    id = obj.getString(\"id\"),\n                                    name = obj.getString(\"name\")\n                            )\n                        }\n    \n                runOnUiThread {\n                    val dialog = ShareEventDialog()\n                    dialog.event = eventId\n                    dialog.friends = friends\n                    dialog.show(supportFragmentManager, \"ShareEventDialog\")\n                }\n            }\n        })\n    }\n```\n\n![android-social-network-push-notifications-share](//images.ctfassets.net/1es3ne0caaid/3XR7lZxYT6q8uOMkSuqoCE/1431023fa9947593c5ec3385cb710d54/android-social-network-push-notifications-share.png)\n\n## Conclusion\n\nSo far, we have a very simple application that can be used as a basic social events platform.\n\nThe full source for the entire application is available on [Github](https://github.com/sazzer/pusher-events).\n\n*This is part 1 of a 2 part tutorial. You can find part 2 [here](https://pusher.com/tutorials/push-notifications-social-android-part-2).*","metaTitle":"Push notifications in a social network Android app - Part 1","metaDescription":"Learn to build an Android app featuring push notifications. In this part of the series, create a social network app with event scheduling functionality."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Qx8I5EmhOGu4eIAyAK2ie","type":"Entry","createdAt":"2018-03-05T16:13:45.181Z","updatedAt":"2018-03-05T16:13:45.181Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build read receipts using Kotlin","url":"read-receipts-kotlin","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/Message-Delivery-Status-Feature-Using-Kotlin","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}}],"reviewDate":"2018-03-05","description":"Discover how to build read receipts and integrate it in your Kotlin chat app.","prerequisite":"A basic understanding of Kotlin and Node.js is needed to follow this tutorial.","content":"If you have ever used messaging services like iMessage, WhatsApp or Messenger you’ll notice that when you send a message, you get a ‘Delivered’ notice when the message is delivered. This helps improve engagement because knowing when the message hits the users device is just good information to have.\n\nIn this article, we will consider how to build a read receipts using the Kotlin and Pusher. We will be building a simple messaging application to demonstrate this feature.\n\nHere is a screen recording of the application we will be building in action:\n![read-receipts-kotlin-demo](//images.contentful.com/1es3ne0caaid/1JJHhEZQ28oGaYwSS6Iogi/763b2c65f2a2a1f95ed77103512b0af7/read-receipts-kotlin-demo.gif)\n\n# Prerequisites\n- Knowledge of the Kotlin programming language. \n- [Android Studio](https://developer.android.com/studio/archive.html) installed locally (version 3.0.1 or newer is recommended).\n- [Node.js and NPM](https://docs.npmjs.com/getting-started/installing-node) installed on your machine.\n- Basic knowledge of JavaScript.\n- A Pusher application. Create one [here](https://pusher.com).\n\nWhen you have all the requirements you can proceed with the tutorial.\n\n# Setting up a Node.js Backend\n\nFor our application, we need a server to trigger the messages and delivery status to the Pusher channel and events we subscribe to. For the backend, we will use the Express Node.js framework.\n\nCreate a new folder for your project, we will name ours **message-delivery-backend**. Open the empty folder, create a `package.json` file and paste this:\n\n```\n    {\n      \"name\": \"realtime-status-update\",\n      \"version\": \"1.0.0\",\n      \"description\": \"\",\n      \"main\": \"index.js\",\n      \"scripts\": {\n        \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\"\n      },\n      \"keywords\": [],\n      \"author\": \"\",\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.18.2\",\n        \"express\": \"^4.16.2\",\n        \"pusher\": \"^1.5.1\"\n      }\n    }\n```\n\nThis file contains dependencies needed by our server and some other key details for the server. \n\nNext, let’s create the `index.js` file:\n\n```\n    // Load packages\n    const express = require('express')\n    const bodyParser = require('body-parser')\n    const app = express()\n    const Pusher = require('pusher');\n    \n    // Middleware\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // Temp Variables\n    var userId = 0;\n    var messageId = 0;\n    \n    // Pusher instance\n    var pusher = new Pusher({\n        appId: 'PUSHER_APP_ID',\n        key: 'PUSHER_APP_KEY',\n        secret: 'PUSHER_APP_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n        encrypted: true\n    });\n    \n    // POST: /message\n    app.post('/message', (req, res) =\u003e {\n        messageId++;\n        \n        pusher.trigger('my-channel', 'new-message', {\n            \"id\": messageId,\n            \"message\": req.query.msg,\n            \"sender\": req.query.sender,\n        }); \n    \n        res.json({id: messageId, sender: req.query.sender, message: req.query.msg})\n    })\n    \n    // POST: /delivered\n    app.post('/delivered', (req, res) =\u003e {\n        pusher.trigger('my-channel', 'delivery-status', {\n            \"id\": req.query.messageId,\n            \"sender\": req.query.sender,\n        }); \n        \n        res.json({success: 200})\n    })\n    \n    // POST: /auth\n    app.post('/auth', (req, res) =\u003e {\n        userId++;\n        res.json({id: \"userId\" + userId})\n    })\n    \n    // GET: /\n    app.get('/', (req, res, next) =\u003e res.json(\"Working!!!\"))\n    \n    // Serve application\n    app.listen(9000, _ =\u003e console.log('Running application...'))\n```\n\nIn the code above, we have the `messageId` variable to giver every message a unique ID and the `userId` variable to give every user a unique id. This will help us clearly distinguish messages and users so as to know when and where to place the delivery status tags under each message.\n\nYou are expected to add the keys from your dashboard into the above code replacing the `PUSHER_APP_*` values. \n\nOpen your terminal, and `cd` to the root directory of your project. Run the commands below to install the NPM packages and start our Node.js server:\n\n```\n    $ npm install\n    $ node index.js\n```\n\nWith this, our server is up and running on port **9000**.\n\n# Setting up the Android client\n## Creating a Project\n\nOpen Android studio, create a new project and fill in your application name and package name. It is recommended that your minimum SDK should not be less than API 14. Then, select an ‘Empty Activity’, name it `LoginActivity` and click finish.\n\n## Setting up Retrofit\n\n[Retrofit](https://github.com/square/retrofit) is a type-safe HTTP client that will enable us make requests to our node server. The first step in making this happen is adding the Retrofit dependency. In your app module `build.gradle` file, add the following to the dependencies list:\n\n```\n    implementation 'com.squareup.retrofit2:retrofit:2.3.0'\n    implementation 'com.squareup.retrofit2:converter-scalars:2.3.0'\n```\n\nSync the gradle files after adding the dependencies. Thereafter, we create an interface that provides the endpoints we will access during this demo. Create a new Kotlin class, name it `ApiService.kt` and paste this:\n\n```\n    import retrofit2.Call\n    import retrofit2.http.POST\n    import retrofit2.http.Query\n    \n    interface ApiService {\n    \n        @POST(\"/message\")\n        fun sendMessage(@Query(\"sender\") sender:String, @Query(\"msg\") message:String): Call\u003cString\u003e\n        \n        @POST(\"/delivered\")\n        fun delivered(@Query(\"sender\") sender:String, @Query(\"messageId\") messageId:String): Call\u003cString\u003e\n    \n        @POST(\"/auth\")\n        fun login(): Call\u003cString\u003e\n    }\n```\n\nIn the code above, we have interfaced our three endpoints. The first, `/message`, is where we will send the message to, `/delivered` where we will tell the server that a message with a particular `id` has delivered, and finally, `/auth` for a make-believe user login.\n\nNext, create a class that that will provide a Retrofit object to enable us make requests. Create a new Kotlin class named `RetrofitClient.kt`:\n\n```\n    import retrofit2.Retrofit\n    import okhttp3.OkHttpClient\n    import retrofit2.converter.scalars.ScalarsConverterFactory\n    \n    class RetrofitClient {\n    \n        companion object {\n            fun getRetrofitClient(): ApiService {\n                val httpClient = OkHttpClient.Builder()\n                val builder = Retrofit.Builder()\n                        .baseUrl(\"http://10.0.2.2:9000/\")\n                        .addConverterFactory(ScalarsConverterFactory.create())\n    \n                val retrofit = builder\n                        .client(httpClient.build())\n                        .build()\n                return retrofit.create(ApiService::class.java)\n            }\n        }\n    }  \n```\n\n\u003e We are using the `10.0.2.2` instead of `127.0.0.1` used for localhost because this is how the Android emulator recognizes it. Using `127.0.0.1` will not work.\n\nThat’s all for setting up the Retrofit client. Let’s move on to setting up Pusher.\n\n## Setting up Pusher\n\nPusher provides the realtime functionalities we need to know when a message has been delivered to another user. To use Pusher, we need to add the dependency in our app-module `build.gradle` file:\n\n```\n    implementation 'com.pusher:pusher-java-client:1.5.0'\n```\n\nSync the gradle files to make the library available for use. That’s all.\n\n\n## Designing Our Layouts\n\nOur app will have two screens. We already have the `LoginActivity` created. We need to create the second activity and name it `ChatActivity`. Our `LoginActivity` will have just one button to log the user in and its layout file `activity_login.xml` will look have this:\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_margin=\"16dp\"\n        tools:context=\"com.example.android.messagedeliverystatus.LoginActivity\"\u003e\n        \u003cButton\n            android:layout_gravity=\"center\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:id=\"@+id/login\"\n            android:text=\"Anonymous Login\" /\u003e\n    \u003c/LinearLayout\u003e\n```\n\nThe `activity_chat.xml` will contain a `RecyclerView` and a `FloatingActionButton`. For these views to be available, you have to add the design support library in the `build.gradle` file:\n\n```\n    implementation 'com.android.support:design:26.1.0'\n```\n\nSync your gradle file to keep the project up to date. Next, paste this code in the `activity_chat.xml` file:\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cRelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_margin=\"16dp\"\u003e\n    \n        \u003candroid.support.v7.widget.RecyclerView\n            android:layout_width=\"match_parent\"\n            android:id=\"@+id/recyclerView\"\n            android:layout_height=\"match_parent\"/\u003e\n    \n        \u003candroid.support.design.widget.FloatingActionButton\n            android:id=\"@+id/fab\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_margin=\"16dp\"\n            android:layout_alignParentBottom=\"true\"\n            android:layout_alignParentRight=\"true\"\n            app:srcCompat=\"@android:drawable/ic_input_add\"\n            android:layout_alignParentEnd=\"true\" /\u003e\n    \u003c/RelativeLayout\u003e\n```\n\nThe recycler view will contain the chat messages while the `FloatingActionButton` will open a dialog to help us add a new message. There are other things that go with a recycler view: a custom layout of how a single row looks like, an adapter that handles items on the list and sometimes a custom model class. \n\nThe model class mimics the data that each item in the list will have. So, we have to create these three things. Create a new layout named `custom_chat_row.xml` and paste this:\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cRelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:orientation=\"vertical\"\n        android:layout_margin=\"16dp\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\u003e\n        \u003cTextView\n            android:textAppearance=\"@style/Base.TextAppearance.AppCompat.Medium\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            tools:text=\"Neo Ighodaro\"\n            android:id=\"@+id/message\" /\u003e\n        \u003cTextView\n            android:layout_below=\"@+id/message\"\n            android:textAppearance=\"@style/Base.TextAppearance.AppCompat.Small\"\n            tools:text=\"sent\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:id=\"@+id/delivery_status\" /\u003e\n    \u003c/RelativeLayout\u003e\n```\n\nEach row will be styled according to our layout above. There are two `TextView`s, one to show the main message and the other to show the delivery status which can either be send or delivered. Next, create a new file named `MessageAdapter.kt` and paste this:\n\n```\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.RelativeLayout\n    import android.widget.TextView\n    import java.util.*\n    \n    class MessageAdapter : RecyclerView.Adapter\u003cMessageAdapter.ViewHolder\u003e() {\n    \n        private var messages = ArrayList\u003cMessageModel\u003e()\n        \n        fun addMessage(message: MessageModel){\n            messages.add(message)\n            notifyDataSetChanged()\n        }\n    \n        override fun getItemCount(): Int {\n            return messages.size\n        }\n    \n        override fun onCreateViewHolder(parent: ViewGroup?, viewType: Int): ViewHolder {\n            return ViewHolder(\n                LayoutInflater.from(parent!!.context)\n                              .inflate(R.layout.custom_chat_row,parent, false)\n            )\n        }\n    \n        override fun onBindViewHolder(holder: ViewHolder?, position: Int) {\n            val params = holder!!.message.layoutParams as RelativeLayout.LayoutParams\n            val params2 = holder!!.deliveryStatus.layoutParams as RelativeLayout.LayoutParams\n    \n            if (messages[position].sender == App.currentUser){\n                params.addRule(RelativeLayout.ALIGN_PARENT_RIGHT)\n                params2.addRule(RelativeLayout.ALIGN_PARENT_RIGHT)\n            }\n    \n            holder.message.text = messages[position].message\n            holder.deliveryStatus.text = messages[position].status\n        }\n    \n        inner class ViewHolder(itemView: View?): RecyclerView.ViewHolder(itemView) {\n            var message: TextView = itemView!!.findViewById(R.id.message)\n            var deliveryStatus: TextView = itemView!!.findViewById(R.id.delivery_status)\n        }\n    \n        fun updateData(id: String) {\n            for(item in messages) {\n                if (item.messageId == id) {\n                    item.status = \"delivered\"\n                    notifyDataSetChanged()\n                }\n            }\n        }\n    }\n```\n\nThe adapter handles the display of items. We used the overridden functions to structure how many items will be on the list, how each row should be styled, and how o get data from each row. We also created our own functions to add a new message to the list and update an item on the list. \n\nNext, create a new class named `MessageModel.kt` and paste this:\n\n```\n    data class MessageModel(var sender:String,\n                            var messageId:String,\n                            var message:String,\n                            var status:String)\n```\n\nThis is known as a data class. A data class is used to hold data. This replaces the usual POJO (Plain Old Java Object) classes we would have created if we were using Java. We will be using a dialog to send messages in this demo, so we need to create a layout for it. \n\nCreate a new layout file named `dialog_message.xml` and past this:\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\" android:layout_width=\"match_parent\"\n        android:padding=\"16dp\"\n        android:layout_height=\"match_parent\"\u003e\n        \u003cEditText\n            android:id=\"@+id/edit_message\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\" /\u003e\n        \u003cButton\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:id=\"@+id/send\"\n            android:text=\"Send message\"/\u003e\n    \u003c/LinearLayout\u003e\n```\n\nThe layout contains an `EditText` for text input and a `Button` to send the message and they are wrapped in a vertical `LinearLayout`.\n\n\n## Adding logic to our application\n\nWe will create a class that extends `Application`. Create a new class named `App.kt` and paste this:\n\n```\n    import android.app.Application\n    \n    class App: Application() {\n        companion object {\n            lateinit var currentUser:String\n        }\n    }\n```\n\nThis class will be used to store our unique user ID globally so that it can easily be accessed by all other classes.\n\nNext, open the `LoginActivity.kt` class and paste this:\n\n```\n    import android.app.Activity\n    import android.content.Intent\n    import android.os.Bundle\n    import kotlinx.android.synthetic.main.activity_login.*\n    import org.json.JSONObject\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    \n    class LoginActivity : Activity() {\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            \n            setContentView(R.layout.activity_login)\n    \n            login.setOnClickListener {\n                RetrofitClient.getRetrofitClient().login().enqueue(object: Callback\u003cString\u003e {\n                    override fun onFailure(call: Call\u003cString\u003e?, t: Throwable?) {\n                        // Do something on failure\n                    }\n                    \n                    override fun onResponse(call: Call\u003cString\u003e?, response: Response\u003cString\u003e?) {\n                        val jsonObject = JSONObject(response!!.body().toString())\n                        val currentUserId = jsonObject[\"id\"].toString()\n                        App.currentUser = currentUserId\n                        startActivity(Intent(this@LoginActivity, ChatActivity::class.java))\n                    }\n                })\n            }\n        }\n    }\n```\n\nIn this activity, we assigned a click listener to our button so when the button is clicked, a request is then made to the `/auth` endpoint of the server to log the user in. A unique user ID is returned to the client. After the ID is received, we store it in our `App` class and open the next activity, `ChatActivity`.\n\nNext, create a file called `ChatActivity.kt` and paste the following into the file:\n\n```\n    import android.os.Bundle\n    import android.support.design.widget.FloatingActionButton\n    import android.support.v7.app.AlertDialog\n    import android.support.v7.app.AppCompatActivity\n    import android.support.v7.widget.LinearLayoutManager\n    import android.util.Log\n    import android.widget.Button\n    import android.widget.EditText\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import kotlinx.android.synthetic.main.activity_chat.*\n    import org.json.JSONObject\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    \n    class ChatActivity: AppCompatActivity() {\n    \n        private lateinit var myUserId: String\n        private lateinit var adapter: MessageAdapter\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_chat)\n            myUserId = App.currentUser\n            setupRecyclerView()\n            setupFabListener()\n            setupPusher()\n        }\n    }\n```\n\nThis class is minimized into various functions for proper clarity. Before getting to the functions, we have a class variable which takes in the value of our unique user ID from the `App` class, this is for easy accessibility.  \n\nThe first function `setupRecyclerView()` is used to initialize the recycler view and its adapter. Add the function below to the class:\n\n```\n    private fun setUpRecyclerView() {\n        recyclerView.layoutManager = LinearLayoutManager(this)\n        adapter = MessageAdapter()\n        recyclerView.adapter = adapter\n    }\n```\n\nNext, we created a vertical layout manager and assigned it to our recycler view, we also initialized `MessageAdapter` and assigned it to the recycler view as well.\n\nThe next function, `setupFabListener()` is used to add a listener to the `FloatingActionButton`. Paste the function below into the same class:\n\n```\n    private fun setupFabListener() {\n        val fab: FloatingActionButton = findViewById(R.id.fab)\n        fab.setOnClickListener({\n            createAndShowDialog()\n        })\n    }\n```\n\nThe next function is `createAndShowDialog()`. Paste the function below into the same class:\n\n```\n    private fun createAndShowDialog() {\n        val builder: AlertDialog = AlertDialog.Builder(this).create()\n    \n        // Get the layout inflater\n        val view = this.layoutInflater.inflate(R.layout.dialog_message, null)\n        builder.setMessage(\"Compose new message\")\n        builder.setView(view)\n    \n        val sendMessage: Button = view.findViewById(R.id.send)\n        val editTextMessage: EditText = view.findViewById(R.id.edit_message)\n        sendMessage.setOnClickListener({\n    \n            if (editTextMessage.text.isNotEmpty())\n                RetrofitClient.getRetrofitClient().sendMessage(myUserId, editTextMessage.text.toString()).enqueue(object : Callback\u003cString\u003e {\n                    override fun onResponse(call: Call\u003cString\u003e?, response: Response\u003cString\u003e?) {\n                        // message has sent\n                        val jsonObject = JSONObject(response!!.body())\n                        val newMessage = MessageModel(\n                                jsonObject[\"sender\"].toString(),\n                                jsonObject[\"id\"].toString(),\n                                jsonObject[\"message\"].toString(),\n                                \"sent\"\n                        )\n                        adapter.addMessage(newMessage)\n                        builder.dismiss()\n                    }\n    \n                    override fun onFailure(call: Call\u003cString\u003e?, t: Throwable?) {\n                        // Message could not send\n                    }\n                })\n        })\n    \n        builder.show()\n    }\n```\n\nThis function builds a dialog and displays it for the user to enter a new message. When the send button on the dialog is clicked, the message entered is sent to the server through the `/message` endpoint. \n\nAfter the message is received, the server assigns a unique ID to the message then `Pusher` triggers data which contains the message just received together with its ID and the sender’s ID to the `new-message` event. \n\nMeanwhile, as soon as a message is sent, we add it to our recycler view and update the adapter using the `adapter.addMessage()` function.\n\nThe final function to add to the class is `setupPusher()` , this will initialize `Pusher` and listen for events. Paste the function below into the class:\n\n```\n    private fun setupPusher() {\n        val options = PusherOptions()\n        options.setCluster(\"PUSHER_APP_CLUSTER\")\n    \n        val pusher = Pusher(\"PUSHER_APP_KEY\", options)\n        val channel = pusher.subscribe(\"my-channel\")\n    \n        channel.bind(\"new_message\") { channelName, eventName, data -\u003e\n            val jsonObject = JSONObject(data)\n            val sender = jsonObject[\"sender\"].toString()\n    \n            if (sender != myUserId) {\n                // this message is not from me, instead, it is from another user\n                val newMessage = MessageModel(\n                        sender,\n                        jsonObject[\"id\"].toString(),\n                        jsonObject[\"message\"].toString(),\n                        \"\"\n                )\n                \n                runOnUiThread {\n                    adapter.addMessage(newMessage)\n                }\n    \n                // tell the sender that his message has delivered\n                RetrofitClient.getRetrofitClient().delivered(sender, jsonObject[\"id\"].toString()).enqueue(object : Callback\u003cString\u003e {\n                \n                    override fun onResponse(call: Call\u003cString\u003e?, response: Response\u003cString\u003e?) {\n                        // I have told the sender that his message delivered\n                    }\n    \n                    override fun onFailure(call: Call\u003cString\u003e?, t: Throwable?) {\n                        // I could not tell the sender\n                    }\n                })\n            }\n        }\n    \n        channel.bind(\"delivery-status\") { channelName, eventName, data -\u003e\n            val jsonObject = JSONObject(data)\n            val sender = jsonObject[\"sender\"]\n            \n            if (sender == myUserId) {\n                runOnUiThread {\n                    adapter.updateData(jsonObject[\"id\"].toString())\n                }\n            }\n        }\n    \n        pusher.connect()\n    }\n```\n\nIn the above snippets, we initialized `Pusher`, subscribed to a channel - `my-channel` and listened to events. We have two events: the first is `new_message` which enables us receive new messages. Since messages sent by us are already added to the list, we won’t add them here again. Instead, we only look for messages from other users hence the need for a unique user ID.\n\nWhen we receive messages from other users, we send a network call to the `/delivered` endpoint passing the message ID and the current sender’s ID as a parameter. The endpoint then triggers a message to the `delivery-status` event to alert the the sender at the other end that the message has been delivered. Note that from our server setup, each message also has a unique ID.\n\nThe second event we listen to is the `delivery-status` event. When we receive data in this event, we check the data received to see if the sender matches the current user logged in user and if it does, we send the message ID to our `updateData()` function. This function checks the list to see which message has the unique ID in question and updates it with “delivered”.\n\n# Conclusion\n\nIn this article, we have been able to demonstrate how to implement a  read receipt feature in Kotlin. Hopefully, you have picked up a few things on how you can use Pusher and Kotlin.","metaTitle":"Build read receipts using Kotlin","metaDescription":"In this tutorial, you will discover how to build read receipts using Kotlin and Node.js."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2jXImCuurO66mYOOuyUkSo","type":"Entry","createdAt":"2018-02-28T12:38:00.459Z","updatedAt":"2018-02-28T12:38:00.459Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a simple social network with Kotlin","url":"social-network-kotlin","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/status-update-kotlin","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2018-02-19","description":"Social feed have become a major feature of many apps and websites. Learn how to build one with Kotlin and Node.js.","prerequisite":"A basic understanding of Kotlin and Node.js is needed to follow this tutorial.","content":"Social networks require live updates to your status stack. Take for instance, Facebook. If you are on your main profile page and you post a new status, it is reflected immediately on the page without need to refresh it.\n\nIt is engaging and saves users the extra muscle of having to click the refresh button. Taking this to a mobile context, if this feature is not present, we would have to restart the ativity or have to wait till the user closes the app and opens it again before he can see anything new. This is obviously a bad user experience.\n\n## What we will build\n\nIn this article, we will build a simple android app that shows our status as soon as it is posted.\n\n![social-network-kotlin-demo](//images.contentful.com/1es3ne0caaid/5a4CDFW9rqi2oM2KQIE8Sw/9a75e68b3c6f77616bd1558305b3f74b/social-network-kotlin-demo.gif)\n\n## Prerequisites \n\nYou need the following;\n\n- Knowledge of the Kotlin programming language\n- A Pusher application\n- Node JS - This is to enable us to setup a server.\n- [Android Studio](https://developer.android.com/studio/archive.html) - Android studio 3.0.1 is recommended as it is the latest stable version at the time of this publication and it integrates Kotlin support with ease.\n\n## Pusher app setup\n\nHead to the [Pusher dashboard](https://dashboard.pusher.com/), create an account if you have none, login to your dashboard, and create a new Pusher app.\n\n![social-network-kotlin-create-app](//images.contentful.com/1es3ne0caaid/5b4kPGLl8k2K6YcyUwgG4C/3ce3541b4296019db93c57021d0c43b8/social-network-kotlin-create-app.png)\n\nBe careful to take not of the cluster used, `eu` in our case. Open your app details and note the keys in the App Keys tab. You will need these later in the article.\n\n## Server setup\n\nWe will build a Node.js server and run it locally. We first create a new folder and name it accordingly, say `user-status-backend`.  `cd` to the folder, create a `package.json` file and paste this:\n \n```\n    {\n      \"name\": \"realtime-status-update\",\n      \"version\": \"1.0.0\",\n      \"description\": \"\",\n      \"main\": \"index.js\",\n      \"scripts\": {\n        \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\"\n      },\n      \"keywords\": [],\n      \"author\": \"\",\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.18.2\",\n        \"express\": \"^4.16.2\",\n        \"pusher\": \"^1.5.1\"\n      }\n    }\n```\n\nWe also create an `index.js` file within the folder and paste this:\n\n```\n    // Load dependencies\n    const express = require('express')\n    const bodyParser = require('body-parser')\n    const app = express()\n    \n    // App middlewares\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // Initialize Pusher\n    var Pusher = require('pusher');\n    var pusher = new Pusher({\n        appId: 'PUSHER_APP_ID',\n        key: 'PUSHER_APP_KEY',\n        secret: 'PUSHER_APP_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n        encrypted: true\n    });\n    \n    // app's routes\n    app.post('/update-status', (req, res) =\u003e {\n    \n        pusher.trigger('my-channel', 'my-event', {\n            \"message\": req.query.status\n        });\n    \n        res.json(req.query.status)\n    \n    })\n    \n    app.get('/', (req, res, next) =\u003e {\n        res.json(\"Yeaaaa!!!!\")\n    })\n    \n    app.listen(3000, () =\u003e console.log('Running application...'))\n```\n\nOur server has one major endpoint, `update-status` which accepts an `HTTP POST` method with the message to be posted sent as one of the parameters. \n\n\u003e Use your app keys in this file.\n\nWe then install the Node and Pusher modules in our folder directory using the following commands:\n\n```\n    npm install\n```\n\nFinally, we run the server:\n\n```\n    node index.js\n```\n\nWith this, our server is up and running on port `3000`, you can check it out on your browser first before forging ahead.\n\n## Building our realtime Kotlin application\n\n### Setting up the project\n\nOpen android studio and create a new project. Details to be provided include: the application name and the domain name. Click the “include kotlin support” checkbox to enable Kotlin in the project. \n\nNext up, you select the `minimum SDK` which is the least Android version our app will support. Choose Empty Activity when asked to add an activity.\n\n![social-network-kotlin-create-new-project](//images.contentful.com/1es3ne0caaid/2PevzqZ2UUeywQ8keIeIoq/df1386314dbdfd0db3857fcde0a05391/social-network-kotlin-create-new-project.png)\n\nThe next screen gives you a chance to customize the name of the activity. We will leave ours as the default `MainActivity`  and click finish. \n\n### Adding dependencies\n\nWe need the support library dependencies, Pusher client dependency and Retrofit dependency. The first will give us extra features to access while using the Android SDK, Pusher will provide us with the much needed real-time feature and Retrofit will enable us make network requests to our server. These dependencies will be added in our app-module `build.gradle`:\n\n```\n    // pusher dependency\n    compile 'com.pusher:pusher-java-client:1.5.0'\n    \n    // part of the support libraries\n    implementation 'com.android.support:design:26.1.0'\n    \n    // retrofit dependency\n    implementation 'com.squareup.retrofit2:retrofit:2.3.0'\n    implementation 'com.squareup.retrofit2:converter-scalars:2.3.0'\n```\n\nAfter adding the dependencies, we sync it so that it can be downloaded and made available for use in our app.\n\n### Setting up Retrofit\n\n[Retrofit](https://github.com/square/retrofit) is a type-safe HTTP client for Android and Java built by [Square, Inc](https://github.com/square). It is used for making network requests. For us to use Retrofit, we need an interface to define our endpoints. Create a new Kotlin file named `ApiInterface.kt` and paste this:\n\n```\n    import retrofit2.Call\n    import retrofit2.http.POST\n    import retrofit2.http.Query\n    \n    interface ApiInterface {\n        @POST(\"/update-status\")\n        fun updateStatus(@Query(\"status\") status:String): Call\u003cString\u003e\n    }\n```\n\nThereafter, we need to provide a Retrofit object. We will do this by creating a class named `RetrofitClient.kt` and pasting this: \n\n```\n    import okhttp3.OkHttpClient\n    import retrofit2.Retrofit\n    import retrofit2.converter.scalars.ScalarsConverterFactory\n    \n    class RetrofitClient {\n        fun getClient(): ApiInterface {\n            val httpClient = OkHttpClient.Builder()\n            val builder = Retrofit.Builder()\n                    .baseUrl(\"http://10.0.2.2:3000/\")\n                    .addConverterFactory(ScalarsConverterFactory.create())\n    \n            val retrofit = builder\n                    .client(httpClient.build())\n                    .build()\n            return retrofit.create(ApiInterface::class.java)\n        }\n    }\n```\n\nThe `getClient` function gives us an instance of Retrofit. While declaring the Retrofit object, the base url for our network requests and the converter to be used are defined.\n\n\n\u003e We are using `10.0.2.2`  because this is how the Android emulator recognizes localhost as against the usual  `127.0.0.1` \n\nWe also add the internet permission in the `AndroidManifest.xml` file. This should be done under the `\u003cmanifest\u003e` tag:\n\n```\n    \u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        package=\"YOUR_APP_PACKAGE_NAME\"\u003e\n    \n        \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n    \n    \u003c/manifest\u003e    \n```\n\n### Designing our layout\n\nIn this app, we will have just one screen. It will contain an `EditText` for our input, a `Button` to send the message inputted and trigger a request to the server, and finally a `RecyclerView` to display our status messages. This will be housed in the `activity_main.xml` layout file:\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_margin=\"16dp\"\n        android:layout_height=\"match_parent\"\n        tools:showIn=\"@layout/activity_main\"\u003e\n    \n        \u003cLinearLayout\n            android:layout_width=\"match_parent\"\n            android:orientation=\"vertical\"\n            android:layout_height=\"wrap_content\"\u003e\n    \n            \u003cEditText\n                android:paddingLeft=\"10dp\"\n                android:hint=\"Whats on your mind?\"\n                android:background=\"@drawable/background\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:minHeight=\"100dp\"\n                android:id=\"@+id/newStatus\" /\u003e\n    \n            \u003cButton\n                android:layout_gravity=\"end\"\n                android:id=\"@+id/buttonPost\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"post\" /\u003e\n    \n            \u003candroid.support.v7.widget.RecyclerView\n                android:id=\"@+id/recyclerView\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"/\u003e\n    \n        \u003c/LinearLayout\u003e\n    \n    \u003c/ScrollView\u003e\n```    \n\nWe added a seprate drawable as background for the `EditText` tag. This gives it a box like look. Create a new drawable resource named `background.xml` and paste this:\n\n```\n    \u003cshape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:thickness=\"0dp\"\n        android:shape=\"rectangle\"\u003e\n        \u003csolid android:color=\"#FFFFFF\" /\u003e\n        \u003cstroke android:width=\"2dp\"\n            android:color=\"@color/colorAccent\"/\u003e\n    \n    \u003c/shape\u003e\n```\n\nIf you build the project right now our layout will look like this:\n\n\n![social-network-kotlin-app-ui](//images.contentful.com/1es3ne0caaid/7DAvEkCwRqOeKsAWkGA86g/40f69dce56f672d2ba0fdba46f76cc3f/social-network-kotlin-app-ui.png)\n\n\nThis takes the shape of a generic social media platform where status updates are made. Next up, we create an adapter to handle the display of status messages on a list. Create a new class `StatusAdapter.kt` and paste this:\n\n```\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.TextView\n    import java.util.*\n    \n    class StatusAdapter : RecyclerView.Adapter\u003cStatusAdapter.ViewHolder\u003e() {\n    \n        private var statusList = ArrayList\u003cString\u003e()\n        private var reversedList = ArrayList\u003cString\u003e()\n    \n        fun addMessage(newMessage: String){\n            statusList.add(newMessage)\n            reversedList = statusList\n            Collections.reverse(reversedList)\n            notifyDataSetChanged()\n        }\n    \n        override fun getItemCount(): Int {\n            return statusList.size\n        }\n    \n        override fun onCreateViewHolder(parent: ViewGroup?, viewType: Int): ViewHolder {\n            val view = LayoutInflater.from(parent!!.context).inflate(android.R.layout.simple_list_item_1,parent,false)\n            return ViewHolder(view)\n        }\n    \n        override fun onBindViewHolder(holder: ViewHolder?, position: Int) {\n            holder!!.statusText.text = reversedList[position]\n        }\n    \n        inner class ViewHolder(itemView: View?): RecyclerView.ViewHolder(itemView) {\n            var statusText: TextView = itemView!!.findViewById(android.R.id.text1)\n        }\n    \n    }\n```\n\nThe `onCreateViewHolder` function returns an instance of our `ViewHolder`  coupled with the view that gives us the layout design for each list item. The `addMessage` function adds a new message to the list. Still in this function, we also assign `list` to `reversedList` and reverse `reversedList` so that we can have the most recent updates on top of the list. The `reversedList` is used based on position to display each item in the `onBindViewHolder` function.\n\nIn the `MainActivity` class, paste this:\n\n```\n    import android.app.Activity\n    import android.os.Bundle\n    import android.support.v7.app.AppCompatActivity\n    import android.support.v7.widget.LinearLayoutManager\n    import android.view.View\n    import android.view.inputmethod.InputMethodManager\n    import android.widget.Toast\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import kotlinx.android.synthetic.main.activity_main.*\n    import org.json.JSONObject\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    \n    class MainActivity : AppCompatActivity() {\n    \n        lateinit var pusher:Pusher\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_main)\n    \n            // setup recycler view and adapter\n            val adapter = StatusAdapter()\n            recyclerView.layoutManager = LinearLayoutManager(this)\n            recyclerView.adapter = adapter\n    \n            // setup pusher to receive status update\n            val options = PusherOptions()\n            options.setCluster(PUSHER_CLUSTER)\n            pusher = Pusher(PUSHER_API_KEY, options)\n            val channel = pusher.subscribe(\"my-channel\")\n            channel.bind(\"my-event\") { channelName, eventName, data -\u003e\n                val jsonObject = JSONObject(data)\n                runOnUiThread { adapter.addMessage(jsonObject.getString(\"message\")) }\n            }\n    \n            // post status to server\n            buttonPost.setOnClickListener {\n    \n                if (newStatus.text.isNotEmpty())\n                    RetrofitClient().getClient().updateStatus(newStatus.text.toString()).enqueue(object : Callback\u003cString\u003e {\n                        override fun onResponse(call: Call\u003cString\u003e?, response: Response\u003cString\u003e?) {\n                            newStatus.text.clear()\n                            hideKeyboard()\n                        }\n    \n                        override fun onFailure(call: Call\u003cString\u003e?, t: Throwable?) {\n                            Toast.makeText(this@MainActivity,\"Error occurred\",Toast.LENGTH_SHORT).show()\n                        }\n                    })\n            }\n    \n        }\n    \n        private fun hideKeyboard() {\n            val imm = this.getSystemService(Activity.INPUT_METHOD_SERVICE) as InputMethodManager\n            var view = this.currentFocus\n            if (view == null)\n                view = View(this)\n            imm.hideSoftInputFromWindow(view.windowToken, 0)\n        }\n    \n        override fun onResume() {\n            super.onResume()\n            pusher.connect()\n        }\n    \n        override fun onPause() {\n            super.onPause()\n            pusher.disconnect()\n        }\n    \n    }\n```\n \nIn this snippet, we initialized the recycler view together with its adapter, we initialized Pusher using our keys from our dashboard and subscribed to a channel so as to get realtime updates, then we created a listener for our button that posts a message to the server when clicked. \n\nFinally, we connected and disconnected Pusher in the `onResume` and `onPause` functions.\n\nWith this, the application is ready! When we run it, we see results like this example:\n\n![social-network-kotlin-demo-2](//images.contentful.com/1es3ne0caaid/494w4EZhOMaquswAs2wAQ6/2ca493bb960040d48ea088c997afb0ec/social-network-kotlin-demo-2.gif)\n\n## Conclusion\n\nIn this article, we have used Pusher to quickly and easily add realtime updates to the social network app.","metaTitle":"Build a simple social network with Kotlin","metaDescription":"Learn how to build a live social feed with Kotlin and Node.js."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2U9mAVUR3aeeW2YIM24W2O","type":"Entry","createdAt":"2018-02-22T15:02:42.776Z","updatedAt":"2018-02-28T14:43:57.656Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an activity feed in Android ","url":"activity-feed-android","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"29U2yrruIQmo6UkY0MMsyK","type":"Entry","createdAt":"2018-02-13T11:27:38.132Z","updatedAt":"2018-02-14T10:08:48.377Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Esteban Herrera","url":"esteban-herrera","email":"estebanhb2@gmail.com","twitter":"https://twitter.com/eh3rrera","github":"https://github.com/eh3rrera/","guestWriter":true}}],"projectRepo":"https://github.com/eh3rrera/feed-pusher-android","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1hvzJaMiAkEQOq088wwo4O","type":"Entry","createdAt":"2018-02-12T14:50:04.128Z","updatedAt":"2018-02-26T12:31:15.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Java","url":"java","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-02-14","description":"Discover how you can create a realtime activity feed for your Android app.","prerequisite":"A basic understanding of Java and Node.js is needed to follow this tutorial.","content":"We'd like to track and visualize our applications in a central place. Feeds are great for this! Let's build an Android app with an activity feed showing the temperature of your home.\n\nIn this tutorial, using [Pusher](https://pusher.com), we are going to build a feed as an Android app to monitor the activity of a [Node.js](https://nodejs.org) REST API. Every time an endpoint of the API is hit, it will publish an event with some information (let's say temperatures) to a channel. This event will be received in realtime, on all the connected Android devices.\n\nThis is how our final Android app will look like:\n\n![activity-feed-android-demo](//images.contentful.com/1es3ne0caaid/1WGAtH6OC86GEaAKKWm2YS/1b76e83dad7a0470f499e2ccbd382b59/activity-feed-android-demo.gif)\n\nFor the back-end, we will be using [Node.js](https://nodejs.org) with [Express](https://expressjs.com) to create a simple REST API. A basic knowledge of Node/Express is required to understand the code, but we won't be using a database or anything special so you can replace this stack with the one you're most comfortable with. The source code of this part is also available on [Github](https://github.com/eh3rrera/node-api-pusher).\n\nSo let's get started!\n\n## Setting up Pusher\n\nCreate a free account at [https://pusher.com/signup](https://pusher.com/signup).\n\nWhen you first log in, you'll be asked to enter some configuration options:\n\n![activity-feed-android-create-app](//images.contentful.com/1es3ne0caaid/2yiZXxFDc4ys0Ui0acuK8E/e942424e38712df4c88e55a5e4d0ad44/activity-feed-android-create-app.png)\n\nEnter a name, choose *Android* as your front-end tech, and *Node.js* as your back-end tech. This will give you some sample code to get you started:\n\n![activity-feed-android-pusher-libraries](//images.contentful.com/1es3ne0caaid/4Yi7ILOJhCE46KmqeKC4yy/acef29d86deb38cdf3d95d1b1b739e12/activity-feed-android-pusher-libraries.png)\n\nBut don't worry, this won't lock you into this specific set of technologies, you can always change them. With Pusher, you can use any combination of libraries.\n\nThen go to the *App Keys* tab to copy your App ID, Key, and Secret credentials, we'll need them later.\n\n## The Node server\n\nFirst, let's create a default `package.json` configuration file with:\n\n``` \nnpm init -y\n```\n\nWe'll need Express, Pusher, and other dependencies, let's add them with:\n\n``` \nnpm install --save express body-parser pusher\n```\n\nIn case a future version of a dependency breaks the code, here's the dependencies section on the `package.json` file:\n\n```\n{\n  ...\n    \"dependencies\": {\n    \"body-parser\": \"1.16.0\",\n    \"express\": \"4.14.1\",\n    \"pusher\": \"1.5.1\"\n  }\n}\n```\n\nNext, create a [server.js](https://github.com/eh3rrera/node-api-pusher/blob/16b75dcd39cde3bb0f454bfed808a7e80e8c8c93/server.js) file. First, let's require the modules we're going to need:\n\n```\nvar express = require('express');\nvar bodyParser = require('body-parser');\nvar crypto = require('crypto');\nvar Pusher = require('pusher');\n```\n\nThen, configure the Express object:\n\n```\nvar app = express();\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n```\n\nNext, the Pusher object is created by passing the configuration object with the ID, key, and the secret for the app created in the [Pusher Dashboard](https://dashboard.pusher.com):\n\n```\nvar pusher = new Pusher({\n  appId      : process.env.PUSHER_APP_ID,\n  key        : process.env.PUSHER_APP_KEY,\n  secret     : process.env.PUSHER_APP_SECRET,\n  encrypted  : true,\n});\n```\n\nPusher will be used to publish any events that happen in our application. These events have a *channel*, which allows events to relate to a particular topic, an *event-name* used to identify the type of the event, and a *payload*, which you can attach any additional information to the message.\n\nWe are going to publish an event to a Pusher channel when an endpoint of our API is called to create/update/delete a record, and send the information as an attachment so we can show it in an activity feed.\n\nHere's the definition of our API's REST endpoints. Notice how an ID for the record is created using the first four characters of the `hex` string generated by `crypto.randomBytes(16)` (to avoid using an external library):\n\n```\napp.post('/api', function (req, res) {\n  var event = {\n    data: req.body.data,\n    id: crypto.randomBytes(16).toString('hex').substring(0, 4),\n  };\n\n  // Do something with the data...\n\n  // Publish event to the Pusher channel\n  pusher.trigger(channel, 'created', event);\n\n  res.status(200).json(event);\n});\n\napp.route('/api/:id')\n  // PUT  endpoint to update a record\n  .put(function (req, res) {\n    var event = {\n     data: req.body.data,\n     id: req.params.id,\n    };\n\n    // Do something with the data...\n\n    // Publish event to the Pusher channel\n    pusher.trigger(channel, 'updated', event);\n\n    res.status(200).json(event);\n  })\n\n  // DELETE  endpoint to delete a record\n  .delete(function (req, res) {\n    var event = {\n      id: req.params.id,\n    };\n\n    // Do something with the data...\n\n    // Publish event to the Pusher channel\n    pusher.trigger(channel, 'deleted', event);\n\n    res.status(200).json(event);\n  });\n```\n\nThis way, a POST request like this:\n\n``` \n{\n  \"data\": \"Temperature: 75°F\"\n}\n```\n\nWill return something like the following:\n\n``` \n{\n  \"data\": \"Temperature: 75°F\",\n  \"id\": \"d2t6\"\n}\n```\n\nWe start the server with:\n\n```\napp.listen(3000, function () {\n  console.log('Node server running on port 3000');\n});\n```\n\nAnd that's all. To run the server, execute the following command passing your Pusher credentials:\n\n``` \nPUSHER_APP_ID=XXXXXX PUSHER_APP_KEY=XXXXXX PUSHER_APP_SECRET=XXXXXX node server.js\n```\n\n## The android app\n\nOpen Android Studio and create a new project:\n\n![activity-feed-android-create-project](//images.contentful.com/1es3ne0caaid/1Kv2lAKIY4mwoY2Mywq0gI/8c26426d81ec3da7247246baff95fc9a/activity-feed-android-create-project.png)\n\nWe're not going to use anything special, so we can safely support a low API level:\n\n![activity-feed-android-target-device](//images.contentful.com/1es3ne0caaid/27mSDfxqYowQs80KIOcQAM/96714408b4c7866569e31c57eaa54aa3/activity-feed-android-target-device.png)\n\nNext, create an initial empty activity:\n\n![activity-feed-android-add-activity](//images.contentful.com/1es3ne0caaid/5LmK2Ij7NemKwsmoe4Es84/47eb17b20b83969fd71ce839df85865c/activity-feed-android-add-activity.png)\n\nAnd use the default name of `MainActivity` with backward compatibility:\n\n![activity-feed-android-customize-activity](//images.contentful.com/1es3ne0caaid/3q9QEPf3NmOKco6S2aiciM/121fdec6ed6f91779d08ddd69e0488b8/activity-feed-android-customize-activity.png)\n\nOnce everything is set up, let's install the project dependencies. In the `dependencies` section of the `build.gradle` file of your application module add:\n\n```\ndependencies {\n    ...\n    compile 'com.pusher:pusher-java-client:1.4.0'\n    compile 'com.android.support:recyclerview-v7:25.1.1'\n    compile 'com.android.support:cardview-v7:25.1.1'\n    compile 'com.github.curioustechizen.android-ago:library:1.3.2'\n    compile 'com.google.code.gson:gson:2.4'\n    ...\n}\n```\n\nAt the time of this writing, the latest SDK version is 25, so that's my target SDK version.\n\nWe're going to use the `RecyclerView` and `CardView` components from the [Support Library](https://developer.android.com/topic/libraries/support-library/features.html), so make sure you have it installed (in *Tools -\u003e Android -\u003e SDK Manager -\u003e SDK Tools tab* the *Android Support Repository* must be installed).\n\nSync the Gradle project so the modules can be installed and the project built.\n\nBefore we forget (I always do), let's add the `INTERNET` permission to the `AndroidManifest.xml` file. This is required so we can connect to Pusher and get the events in realtime:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.pusher.feed\"\u003e\n\n    \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n\n    \u003capplication\n        ...\n    \u003c/application\u003e\n\n\u003c/manifest\u003e\n```\n\nIf you want to modify the style of the app, in the `res/values` folder, modify the [colors.xml](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/res/values/colors.xml) file so it looks like this:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\n\u003cresources\u003e\n    \u003ccolor name=\"primary\"\u003e#03A9F4\u003c/color\u003e\n    \u003ccolor name=\"primary_dark\"\u003e#0288D1\u003c/color\u003e\n    \u003ccolor name=\"primary_light\"\u003e#B3E5FC\u003c/color\u003e\n    \u003ccolor name=\"accent\"\u003e#FF4081\u003c/color\u003e\n    \u003ccolor name=\"primary_text\"\u003e#212121\u003c/color\u003e\n    \u003ccolor name=\"secondary_text\"\u003e#757575\u003c/color\u003e\n    \u003ccolor name=\"icons\"\u003e#FFFFFF\u003c/color\u003e\n    \u003ccolor name=\"divider\"\u003e#BDBDBD\u003c/color\u003e\n\u003c/resources\u003e\n```\n\nAs well as the [styles.xml](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/res/values/styles.xml) file to match these color definitions:\n\n```\n\u003cresources\u003e\n\n    \u003c!-- Base application theme. --\u003e\n    \u003cstyle name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\"\u003e\n        \u003c!-- Customize your theme here. --\u003e\n        \u003citem name=\"colorPrimary\"\u003e@color/primary\u003c/item\u003e\n        \u003citem name=\"colorPrimaryDark\"\u003e@color/primary_dark\u003c/item\u003e\n        \u003citem name=\"colorAccent\"\u003e@color/accent\u003c/item\u003e\n    \u003c/style\u003e\n\n\u003c/resources\u003e\n```\n\nNow, modify the layout file [activity_main.xml](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/res/layout/activity_main.xml) so it looks like this:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cRelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/activity_main\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:paddingBottom=\"@dimen/activity_vertical_margin\"\n    android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n    android:paddingRight=\"@dimen/activity_horizontal_margin\"\n    android:paddingTop=\"@dimen/activity_vertical_margin\"\n    tools:context=\"com.pusher.feed.MainActivity\"\u003e\n\n    \u003candroid.support.v7.widget.RecyclerView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_alignParentTop=\"true\"\n        android:layout_alignParentLeft=\"true\"\n        android:layout_alignParentStart=\"true\"\n        android:id=\"@+id/recycler_view\"\n        android:scrollbars=\"vertical\" /\u003e\n\u003c/RelativeLayout\u003e\n```\n\nWe're going to use a [RecyclerView](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html) to display the events, which we'll store in a list. Each item in this list is displayed in an identical manner, so let's define another layout file to inflate each item.\n\nCreate the file [event_row.xml](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/res/layout/event_row.xml) with the following content:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003candroid.support.v7.widget.CardView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:card_view=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    card_view:cardCornerRadius=\"4dp\"\n    card_view:cardElevation=\"4dp\"\n    card_view:cardUseCompatPadding=\"true\"\n    card_view:contentPadding=\"8dp\"\u003e\n\n    \u003cRelativeLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\u003e\n\n        \u003cTextView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:textAppearance=\"?android:attr/textAppearanceLarge\"\n            android:text=\"Event\"\n            android:id=\"@+id/event\"\n            android:layout_alignParentTop=\"true\"\n            android:textAlignment=\"center\" /\u003e\n\n        \u003cTextView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:textAppearance=\"?android:attr/textAppearanceMedium\"\n            android:text=\"ID\"\n            android:id=\"@+id/id\"\n            android:layout_below=\"@+id/event\"\n            android:textAlignment=\"center\" /\u003e\n\n        \u003ccom.github.curioustechizen.ago.RelativeTimeTextView\n            android:id=\"@+id/timestamp\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:textAppearance=\"?android:attr/textAppearanceSmall\"\n            android:layout_below=\"@+id/id\"\n            android:textAlignment=\"center\" /\u003e\n\n        \u003cTextView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Data\"\n            android:id=\"@+id/data\"\n            android:layout_below=\"@+id/timestamp\"\n            android:textAlignment=\"center\"\n            android:layout_marginTop=\"8dp\" /\u003e\n    \u003c/RelativeLayout\u003e\n\n\u003c/android.support.v7.widget.CardView\u003e\n```\n\nHere we're using a [CardView](https://developer.android.com/reference/android/support/v7/widget/CardView.html) to show the information inside a card, with shadows and rounded corners. For each item, we're going to present:\n\n- A `TextView` for the name of the event (*created*, *updated*, or *deleted*).\n- A `TextView` for the ID of the record (for example, *c2d6*).\n- A [RelativeTimeTextView](https://github.com/curioustechizen/android-ago), a custom `TextView` that displays the relative time with respect to the reference point (the moment the event is received), automatically refreshing the text as needed.\n- A `TextView` for the data contained in the record (anything the user sends, for example, *Temperature: 80°F*).\n \nNow, to store the information of each event, let's create a class, [com.pusher.feed.Event](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/java/com/pusher/feed/Event.java):\n\n```\npublic class Event  {\n    private String name;\n    private String id;\n    private String data;\n\n    public Event(String name, String eventId, String data) {\n        this.name = name;\n        this.id = eventId;\n        this.data = data;\n    }\n\n    // Getters and setters\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getData() {\n        return data;\n   }\n}\n```\n\n`RecyclerView` works with an [Adapter](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html) to manage the items of its data source (in this case a list of `Event` instances), and a [ViewHolder](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ViewHolder.html) to hold a view representing a single list item, so first create the class [com.pusher.feed.EventAdapter](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/java/com/pusher/feed/EventAdapter.java) with the following code:\n\n```\npublic class EventAdapter extends RecyclerView.Adapter\u003cEventAdapter.EventViewHolder\u003e {\n    private List\u003cEvent\u003e items;\n\n    public EventAdapter(List\u003cEvent\u003e items) {\n        this.items = items;\n    }\n\n    public void addEvent(Event event) {\n        // Add the event at the beginning of the list\n        items.add(0, event);\n        // Notify the insertion so the view can be refreshed\n        notifyItemInserted(0);\n    }\n\n    @Override\n    public int getItemCount() {\n        return items.size();\n    }\n\n    @Override\n    public EventViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {\n\n    }\n\n    @Override\n    public void onBindViewHolder(EventViewHolder viewHolder, int i) {\n\n    }\n}\n```\n\nWe initialize the class with a list of `Event`, provide a method to add `Event` instances at the beginning of the list (`addEvent(Event)`) and then notify the insertion so the view can be refreshed, and implement `getItemCount` so it returns the size of the list.\n\nThen, let's add the `ViewHolder` as an inner class, it references the `View` components for each item in the list:\n\n```\npublic class EventAdapter extends RecyclerView.Adapter\u003cEventAdapter.EventViewHolder\u003e {\n    private ArrayList\u003cEvent\u003e items;\n\n    public static class EventViewHolder extends RecyclerView.ViewHolder {\n        // Card fields\n        public TextView event;\n        public TextView id;\n        public RelativeTimeTextView timestamp;\n        public TextView data;\n\n        public EventViewHolder(View v) {\n            super(v);\n            event = (TextView) v.findViewById(R.id.event);\n            id = (TextView) v.findViewById(R.id.id);\n            timestamp = (RelativeTimeTextView) v.findViewById(R.id.timestamp);\n            data = (TextView) v.findViewById(R.id.data);\n        }\n    }\n\n    ...\n}\n```\n\nAnd implement the methods `onCreateViewHolder` and `onBindViewHolder`:\n\n```\npublic class EventAdapter extends RecyclerView.Adapter\u003cEventAdapter.EventViewHolder\u003e {\n    ...\n\n    @Override\n    public EventViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {\n        View v = LayoutInflater.from(viewGroup.getContext())\n                .inflate(R.layout.event_row, viewGroup, false);\n\n        return new EventViewHolder(v);\n    }\n\n    @Override\n    public void onBindViewHolder(EventViewHolder viewHolder, int i) {\n        Event event = items.get(i);\n\n        viewHolder.event.setText(event.getName());\n        viewHolder.id.setText(event.getId());\n        viewHolder.timestamp.setReferenceTime(System.currentTimeMillis());\n        viewHolder.data.setText(event.getData());\n    }\n}\n```\n\nIn the `onCreateViewHolder` method, we inflate the layout with the content of the `event_row.xml` file we created earlier, and in `onBindViewHolder`, we set the values of the views with the event in turn. Notice how we set the reference time on `RelativeTimeTextView` so it can display a text like *Just now* or *10 minutes ago*.\n\nIn the class [com.pusher.feed.MainActivity](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/java/com/pusher/feed/MainActivity.java), let's start by defining the private fields we're going to need:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    private RecyclerView.LayoutManager lManager;\n    private EventAdapter adapter;\n    private Pusher pusher = new Pusher(\"ENTER_PUSHER_APP_KEY_HERE\");\n    private static final String CHANNEL_NAME = \"events_to_be_shown\";\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ....\n    }\n}\n```\n\n`RecyclerView` works with a [LayoutManager](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.LayoutManager.html) to handle the layout and scroll direction of the list. We declare the `EventAdapter`, the `Pusher` object and the identifier for the Pusher channel. Remember to replace your Pusher app key, if you still don't have one, this would be a good time to [sign up for a free account](https://pusher.com/signup) and [create you app](https://dashboard.pusher.com).\n\nInside the `onCreate` method, let's assign a [LinearLayoutManager](https://developer.android.com/reference/android/support/v7/widget/LinearLayoutManager.html) to the `RecyclerView` and create the `EventAdapter` with an empty list:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // Get the RecyclerView\n        RecyclerView recycler = (RecyclerView) findViewById(R.id.recycler_view);\n\n        // Use LinearLayout as the layout manager\n        lManager = new LinearLayoutManager(this);\n        recycler.setLayoutManager(lManager);\n\n        // Set the custom adapter\n        List\u003cEvent\u003e eventList = new ArrayList\u003c\u003e();\n        adapter = new EventAdapter(eventList);\n        recycler.setAdapter(adapter);\n    }\n}\n```\n\nFor the Pusher part, we first subscribe to the channel:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ...\n\n        Channel channel = pusher.subscribe(CHANNEL_NAME);\n}\n```\n\nThen, we create the listener that will be executed when an event arrives:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n    ...\n    SubscriptionEventListener eventListener = new SubscriptionEventListener() {\n            @Override\n            public void onEvent(String channel, final String event, final String data) {\n                runOnUiThread(new Runnable() {\n                    @Override\n                    public void run() {\n                        System.out.println(\"Received event with data: \" + data);\n                        Gson gson = new Gson();\n                        Event evt = gson.fromJson(data, Event.class);\n                        evt.setName(event + \":\");\n                        adapter.addEvent(evt);\n                        ((LinearLayoutManager)lManager).scrollToPositionWithOffset(0, 0);\n                    }\n                });\n            }\n        };\n    }\n}\n```\n\nHere, the JSON string that we receive is converted to an `Event` object, the name of the event is set to the name of the event received, and the object is added to the adapter. Finally, we move to the top of the list.\n\nNext, bind the events to this listener and call the `connect` method on the Pusher object:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ...\n        channel.bind(\"created\", eventListener);\n        channel.bind(\"updated\", eventListener);\n        channel.bind(\"deleted\", eventListener);\n\n        pusher.connect();\n    }\n}\n```\n\nThe `connect` method can take a listener that can be helpful to debug problems you might have:\n\n```\npusher.connect(new ConnectionEventListener() {\n    @Override\n    public void onConnectionStateChange(ConnectionStateChange change) {\n        System.out.println(\"State changed to \" + change.getCurrentState() +\n            \" from \" + change.getPreviousState());\n    }\n\n   @Override\n    public void onError(String message, String code, Exception e) {\n        System.out.println(\"There was a problem connecting!\");\n        e.printStackTrace();\n    }\n});\n```\n\nFinally, `MainActivity` also needs to implement the `onDestroy()` method so we can have the opportunity to unsubscribe from Pusher when the activity is destroyed:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        pusher.disconnect();\n    }\n}\n```\n\nAnd that's all the code on the Android part. Let's test it.\n\n## Testing the app\n\nExecute the app, either on a real device or a virtual one:\n\n![activity-feed-android-deploy-app](//images.contentful.com/1es3ne0caaid/CFHd4HGgfYmmOc42MgO40/f530f27b6586deb77c4d711817697e80/activity-feed-android-deploy-app.png)\n\nYou'll be presented with an almost blank screen:\n\n![activity-feed-android-app](//images.contentful.com/1es3ne0caaid/63EKVtRYqcssUa6MmcwGY4/27d4d24fdb3dc81d4366dba37fc441f1/activity-feed-android-app.png)\n\nFor the back-end, you can use something to call the API endpoints with a JSON payload, like [cURL](https://curl.haxx.se/):\n\n``` \n# POST\ncurl -H \"Content-Type: application/json\" -X POST -d '{\"data\":\"Temperature: 80°F\"}' http://localhost:3000/api\n# PUT\ncurl -H \"Content-Type: application/json\" -X PUT -d '{\"data\":\"Temperature: 85°F\"}' http://localhost:3000/api/aqw3\n# DELETE\ncurl -X DELETE http://localhost:3000/api/aqw3\n\n# In Windows, change single quotes to quotation marks and escape the ones inside curly brackets\ncurl -H \"Content-Type: application/json\" -X POST -d \"{\\\"data\\\":\\\"Temperature: 80°F\\\"}\" http://localhost:3000/api\n\n# Or use file, for example data.json\ncurl -H \"Content-Type: application/json\" -X POST --data @data.json http://localhost:3000/api\n```\n\nOr use a tool like [Postman](https://www.getpostman.com/):\n\n![activity-feed-android-postman](//images.contentful.com/1es3ne0caaid/3jUxsuEEgUM8c6mmEwiuGU/ab37f83253c98a637d66b8837a45baf9/activity-feed-android-postman.png)\n\nWhen a request is received on the API side, the event will show up in the app:\n\n![activity-feed-android-app-test](//images.contentful.com/1es3ne0caaid/4XKXil7es0EGkICAqgUA4S/cb52327f73792a6adb269b506bbd36fa/activity-feed-android-app-test.png)\n\nOr if you only want to test the app, you can use the [Pusher Debug Console on your dashboard](http://dashboard.pusher.com/):\n\n![activity-feed-android-pusher-debug-console](//images.contentful.com/1es3ne0caaid/74tDZ8NMlyosmg6MU6kWIG/1cfe3514ad6666e8578c3e196a53431b/activity-feed-android-pusher-debug-console.png)\n\n## Conclusion\n\nHopefully, this tutorial has shown you in an easy way how to build an activity feed for Android apps with Pusher. You can improve the app by changing the design, showing more information, or saving it to a database.\n\n## Further reading\n\n- [Pusher Java client](https://github.com/pusher/pusher-websocket-java)\n- [Android-ago](https://github.com/curioustechizen/android-ago)\n- [Activity's lifecycle](https://developer.android.com/guide/components/activities/activity-lifecycle.html)\n- [Creating Lists and Cards](https://developer.android.com/training/material/lists-cards.html)","metaTitle":"Build an activity feed in Android ","metaDescription":"Build a live activity feed in Android using Java, Node.js and Pusher for the realtime features."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1W0o3xrMZWMK4SuGQUAIo","type":"Entry","createdAt":"2018-02-28T11:57:19.883Z","updatedAt":"2018-02-28T11:57:19.883Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime map using Kotlin","url":"realtime-map-kotlin","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/realtime-map-example-kotlin","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-02-09","description":"In this tutorial, you will learn how to build a realtime map using Kotlin, Node.js and Google Maps API.","prerequisite":"A basic understanding of Kotlin and Node.js is needed to follow this tutorial.","content":"Just as the name implies, the aim of this article is to show the realtime movement of a marker on a map. This feature is common in location tracking applications. We see taxi apps and food ordering apps making use of features like this. Google provides an extremely easy map API, which we will take advantage of, while the realtime functionalities will be taken care of by Pusher. \n\n## What we will build\n\nWe will build an application that will receive coordinates from the server based on the initial coordinates we inject into it. When these coordinates are received, we update the map on our app.\n\n![realtime-map-kotlin-demo](//images.contentful.com/1es3ne0caaid/5u93CRuILe084MwgCgwym6/e3ad9d2c35219aa3f3c2820d3f8fae3d/realtime-map-kotlin-demo.gif)\n\n## Requirements\n\nFor this tutorial, we need the following:\n- [Android studio](https://developer.android.com/studio/archive.html) - version 3.0.1 or higher is recommended.\n- [Node JS](https://nodejs.org/) and npm installed on your machine.\n- A [Pusher](https://dashboard.pusher.com) application.\n- [Google Maps API key](https://developers.google.com/maps/documentation/android-api/signup).\n- An Android device with Google Play Services installed.\n\n## Building our server\n\nWe will build our server using Node JS. The server will generate random coordinates for us. To start with, create a new folder. Inside it, create a new file named `package.json` and paste this:\n\n```\n    {\n        \"main\": \"index.js\",\n        \"dependencies\": {\n            \"body-parser\": \"^1.16.0\",\n            \"express\": \"^4.14.1\",\n            \"pusher\": \"^1.5.1\"\n        }\n    }\n```\n\nNext, create file called `index.js` in the root directory and paste this:\n\n```\n    // Load the required libraries\n    let Pusher = require('pusher');\n    let express = require('express');\n    let bodyParser = require('body-parser');\n    \n    // initialize express and pusher\n    let app = express();\n    let pusher = new Pusher(require('./config.js'));\n    \n    // Middlewares\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // Generates 20 simulated GPS coords and sends to Pusher\n    app.post('/simulate', (req, res, next) =\u003e {\n      let loopCount = 0\n      let operator  = 0.001000  \n      let longitude = parseFloat(req.body.longitude)\n      let latitude  = parseFloat(req.body.latitude)\n    \n      let sendToPusher = setInterval(() =\u003e {\n        loopCount++;\n    \n        // Calculate new coordinates and round to 6 decimal places...\n        longitude = parseFloat((longitude + operator).toFixed(7))\n        latitude  = parseFloat((latitude - operator).toFixed(7))\n    \n        // Send to pusher\n        pusher.trigger('my-channel', 'new-values', {longitude, latitude})\n    \n        if (loopCount === 20) {\n          clearInterval(sendToPusher)\n        }\n      }, 2000);\n      \n      res.json({success: 200})\n    })\n    \n    // Index\n    app.get('/', (req, res) =\u003e res.json(\"It works!\"));\n    \n    // Serve app\n    app.listen(4000, _ =\u003e console.log('App listening on port 4000!'));\n```\n\nThe code above is an Express application. In the `/simulate` route, we are simulating longitude and latitude values and then sending them to Pusher. These will then be picked by our application. \n\n\u003e 💡 The longitude and latitude values will typically be obtained from the device being tracked in a real-life scenario.\n\nFinally, we will create the configuration file, named `config.js`. Paste this snippet there:\n\n```\n    module.exports = {\n        appId: 'PUSHER_APP_ID',\n        key: 'PUSHER_APP_KEY',\n        secret: 'PUSHER_APP_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n    };\n```\n\nReplace the values there with the keys from your Pusher dashboard. Then install the modules needed by our server by running this command in the root directory:\n\n```\n    $ npm install\n```\n\nOur server should be up and running on port **4000**.\n\n\n## Building our realtime map in Android Studio\n\n### Create a new Android project\nOpen Android studio and create a new project. Enter your application details, include Kotlin support, choose a minimum SDK (this should not be less than API 14), choose an Empty Activity, and finish the process. Here is a quick GIF of the process:\n\n![realtime-map-kotlin-create-project](//images.contentful.com/1es3ne0caaid/1VNHmrSYbuOCuWUGMsQS4i/97fc57e24e9d9bfce38468218383b651/realtime-map-kotlin-create-project.gif)\n\n### Adding app dependencies\nThis demo has several dependencies. We need the Pusher dependency for realtime functionality, the Google Maps API for easy integration of maps into our app, and Retrofit to access our server with ease. \n\nOpen your app-module `build.gradle` file and paste the following dependencies:\n\n```\n    // Pusher dependency\n    implementation 'com.pusher:pusher-java-client:1.5.0'\n    \n    // Google maps API\n    implementation 'com.google.android.gms:play-services-maps:11.8.0'\n    \n    // Retrofit dependencies\n    implementation 'com.squareup.retrofit2:retrofit:2.3.0'\n    implementation 'com.squareup.retrofit2:converter-scalars:2.3.0'\n```\n\nSync your Gradle files so that the libraries can be downloaded and made available.\n\n### Building our layout\nOpen the `activity_main.xml` and paste this:\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cFrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\"\u003e\n        \u003cfragment xmlns:android=\"http://schemas.android.com/apk/res/android\"\n            xmlns:tools=\"http://schemas.android.com/tools\"\n            android:layout_marginTop=\"50dp\"\n            android:id=\"@+id/map\"\n            android:name=\"com.google.android.gms.maps.SupportMapFragment\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            tools:context=\"com.example.mapwithmarker.MapsMarkerActivity\" /\u003e\n        \u003cButton\n            android:id=\"@+id/simulateButton\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Simulate\" /\u003e\n    \n    \u003c/FrameLayout\u003e\n```\n\nIn the snippet above, we have a fragment which will hold our map and a button.\n\n### Setting up Google Maps API key\nIt is expected that at this point, you have obtained your API key. You can follow the steps [here](https://developers.google.com/maps/documentation/android-api/signup) to get it. We now want to configure the application with our key. Open your `strings.xml` file and paste it in. This is located at `name-of-project/app/src/main/res/values`:\n\n```\n    \u003cresources\u003e\n        \u003c!-- ... --\u003e\n        \u003cstring name=\"google_maps_key\"\u003eGOOGLE_MAPS_KEY\u003c/string\u003e\n    \u003c/resources\u003e\n```\n\n\u003e ⚠️  Replace the `GOOGLE_MAPS_KEY` placeholder with the actual key from Google.\n\nThis file contains all strings used during the development of the application. All raw strings within the app are kept here. It is required when there is a need to translate your app into multiple languages.\n\nNext, open the `AndroidManifest.xml` file and paste these under the `\u003capplication\u003e` tag:\n\n```\n    \u003cmeta-data\n        android:name=\"com.google.android.gms.version\"\n        android:value=\"@integer/google_play_services_version\" /\u003e\n    \u003cmeta-data\n        android:name=\"com.google.android.geo.API_KEY\"\n        android:value=\"@string/google_maps_key\" /\u003e\n```\n\nWith this, our app knows how and where to fetch our key.\n\n### Setting up Retrofit\nWe already have Retrofit available as a dependency, but we need two more things - an interface to show endpoints/routes to be accessed and our retrofit object. First create a new Kotlin file name `ApiInterface.kt` and paste this:\n\n```\n    import okhttp3.RequestBody\n    import retrofit2.Call\n    import retrofit2.http.Body\n    import retrofit2.http.POST\n    \n    interface ApiInterface {\n        @POST(\"/simulate\")\n        fun sendCoordinates(@Body coordinates: RequestBody): Call\u003cString\u003e\n    }\n```\n\nSince we will make just one request in this demo, we will limit the scope of our Retrofit object to the `MainActivity.kt` class. This means we will create a function within a class for it. Paste this function into the class:\n\n```\n    fun getRetrofitObject(): ApiInterface {\n        val httpClient = OkHttpClient.Builder()\n        val builder = Retrofit.Builder()\n                .baseUrl(\"http://10.0.3.2:4000/\")\n                .addConverterFactory(ScalarsConverterFactory.create())\n    \n        val retrofit = builder\n                .client(httpClient.build())\n                .build()\n        return retrofit.create(ApiInterface::class.java)\n    }\n```\n\nI used a Genymotion emulator and the recognized localhost address for it is `10.0.3.2`.\n\nAdd the internet permission to the `AndroidManifest.xml` file:\n\n```\n    \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n```\n\n### Configuring our map and getting realtime updates\nFor us to initialize and use the map, our the `MainActivity.kt` class must implement the `OnMapReadyCallback` interface and override the `onMapReady` method. We also need to setup Pusher to listen to events and receive the simulated coordinates in realtime. Open your `MainActivity.kt` and paste this:\n\n```\n    import android.support.v7.app.AppCompatActivity\n    import android.os.Bundle\n    import android.util.Log\n    import com.google.android.gms.maps.*\n    import com.google.android.gms.maps.model.MarkerOptions\n    import com.google.android.gms.maps.model.LatLng\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import kotlinx.android.synthetic.main.activity_main.*\n    import okhttp3.MediaType\n    import okhttp3.OkHttpClient\n    import org.json.JSONObject\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    import retrofit2.Retrofit\n    import retrofit2.converter.scalars.ScalarsConverterFactory\n    import okhttp3.RequestBody\n    import com.google.android.gms.maps.model.CameraPosition\n    import com.google.android.gms.maps.model.Marker\n    \n    class MainActivity : AppCompatActivity(), OnMapReadyCallback {\n        private lateinit var markerOptions:MarkerOptions\n        private lateinit var marker:Marker\n        private lateinit var cameraPosition:CameraPosition\n        var defaultLongitude = -122.088426\n        var defaultLatitude  = 37.388064\n        lateinit var googleMap:GoogleMap\n        lateinit var pusher:Pusher\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_main)\n            markerOptions = MarkerOptions()\n            val latLng = LatLng(defaultLatitude,defaultLongitude)\n            markerOptions.position(latLng)\n            cameraPosition = CameraPosition.Builder()\n                    .target(latLng)\n                    .zoom(17f).build()\n    \n        }\n    \n        override fun onMapReady(googleMap: GoogleMap?) {\n            this.googleMap = googleMap!!\n            marker = googleMap.addMarker(markerOptions)\n            googleMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition))\n        }\n    }\n```\n\nWe first created some class variables to hold our initial coordinates and other map utilities like the camera position and the marker position. We initialized them in the `onCreate` function. Next, we added a click listener to the simulate button. \n\nThe next thing to do is still in the `MainActivity.kt` class. In the `onCreate` method, paste this:\n\n```\n    simulateButton.setOnClickListener {\n        callServerToSimulate()\n    }\n```\n\nWhen the button is clicked, it calls the `callServerToSimulate` function. Create a function `callServerToSimulate` within the class like this:\n\n```\n    private fun callServerToSimulate() {\n        val jsonObject = JSONObject()\n        jsonObject.put(\"latitude\",defaultLatitude)\n        jsonObject.put(\"longitude\",defaultLongitude)\n    \n        val body = RequestBody.create(\n            MediaType.parse(\"application/json\"), \n            jsonObject.toString()\n        )\n    \n        getRetrofitObject().sendCoordinates(body).enqueue(object:Callback\u003cString\u003e{\n            override fun onResponse(call: Call\u003cString\u003e?, response: Response\u003cString\u003e?) {\n                Log.d(\"TAG\",response!!.body().toString())\n            }\n    \n            override fun onFailure(call: Call\u003cString\u003e?, t: Throwable?) {\n                Log.d(\"TAG\",t!!.message)\n            }\n        })\n    }\n```\n\nIn this function, we sent our initial coordinates to our server. The server then generates twenty coordinates similar to the initial ones sent and uses Pusher to send them to channel `my-channel`, firing the `new-values` event.\n\nNext, we create and initialize a `SupportMapFragment` object with the view ID of the map:\n\n```\n    val mapFragment = supportFragmentManager.findFragmentById(R.id.map) as SupportMapFragment\n    mapFragment.getMapAsync(this)\n    setupPusher()\n```\n                \nNext add the the `setupPusher` function to the class and it should looks like this:\n\n```\n    private fun setupPusher() {\n        val options = PusherOptions()\n        options.setCluster(PUSHER_CLUSTER)\n        pusher = Pusher(PUSHER_API_KEY, options)\n    \n        val channel = pusher.subscribe(\"my-channel\")\n    \n        channel.bind(\"new-values\") { channelName, eventName, data -\u003e\n            val jsonObject = JSONObject(data)\n            val lat:Double = jsonObject.getString(\"latitude\").toDouble()\n            val lon:Double = jsonObject.getString(\"longitude\").toDouble()\n    \n            runOnUiThread {\n                val newLatLng = LatLng(lat, lon)\n                marker.position = newLatLng\n                cameraPosition = CameraPosition.Builder()\n                        .target(newLatLng)\n                        .zoom(17f).build()\n                googleMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition))\n            }\n        }\n    }\n```\n\nWe initialized Pusher here and listened for coordinate updates. When we receive any update, we update our marker and move the camera view towards the new point. You are expected to replace the Pusher parameters with the keys and details found on your Pusher dashboard.\n\nWe then call the disconnect and connect functions in the `onPause` and `onResume` functions respectively in the class. These functions are inherited from the parent class `AppCompatActivity`:\n\n```\n    override fun onResume() {\n        super.onResume()\n        pusher.connect()\n    }\n    \n    override fun onPause() {\n        super.onPause()\n        pusher.disconnect()\n    }\n```\n\n## Conclusion\n\nWe have been able to leverage the power of Pusher, Kotlin and Google Maps API to create a realtime location tracking app. Hopefully you have picked up a thing or two from the tutorial and can use the knowledge to build beautiful realtime apps using Pusher and Kotlin.","metaTitle":"Build a realtime map using Kotlin","metaDescription":"The intersection of geolocation and technology has become a very important part of our live. This tutorial is going to help your on how you can create a live map with Kotlin and Node.js."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Oj0XeT59CGOEuY24sUwEK","type":"Entry","createdAt":"2018-02-28T14:04:12.045Z","updatedAt":"2020-06-19T13:18:43.153Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime table with Android ","url":"realtime-table-android","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/pusher-android-table","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1hvzJaMiAkEQOq088wwo4O","type":"Entry","createdAt":"2018-02-12T14:50:04.128Z","updatedAt":"2018-02-26T12:31:15.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Java","url":"java","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}}],"reviewDate":"2018-01-19","description":"In this tutorial, build a simple live table for Android devices with Java.","prerequisite":"A basic understanding of Java and Node.js is needed to follow this tutorial.","content":"If you are building an app that handles extensive amounts of data, you might want to implement realtime tables at some point. Let’s take a content management system for instance. Large amounts of data are added and removed often, and we would like the changes to be available to consumers in realtime. \n\nIn this tutorial, we will be utilizing the Pusher Android SDK's client-side library to quickly and easily build a realtime data table. \n\nWe’ll be using a few developer tools to achieve this fit, including:\n\n- [Android Studio](https://developer.android.com/studio/intro/index.html) - The Official IDE for Android Development, it provides the fastest tools for building apps on every type of Android device.\n- [Pusher](https://pusher.com/) - A free, realtime, easy to use pub/sub service. Pusher makes realtime as easy as using basic events.\n\nThe flow of our app is that the user will fill out a form to add a new employee to an employees table and click a “save” button. This will send a POST request to our server. In this tutorial, we will use a simple NodeJS server to provide a single API endpoint.\nOnce our server receives the POST request, it will render the data to all connected clients, which will show the data on their tables in realtime.\n\nHere is a glimpse of what we are going to build:\n\n![realtime-table-android-add-employee](//images.contentful.com/1es3ne0caaid/2GYgpYFQIESI8eaEMaICIC/269bb72f1bbfd90ebbe4e7fbef85438e/realtime-table-android-add-employee.jpg)\n\n![realtime-table-android-employee-1](//images.contentful.com/1es3ne0caaid/58oMsLwdvq4EA0U8S0eacM/d7c0b9a0204d906e19411cae59743f63/realtime-table-android-employee-1.jpg)\n\n![realtime-table-android-employee-3](//images.contentful.com/1es3ne0caaid/1aHlfafnXuoqmqsg0Uiq8/92d5b45f60e9d8b2b063abf446680343/realtime-table-android-employee-3.jpg)\n\n## Set Up\n### Create a new project:\n\n\n1. Open Android Studio and select New Project from the File menu.\n2. Set the minimum SDK for the app to be API 16 (Android 4.1, Jelly Bean).\n3. Click through the wizard, ensuring that Empty Activity is selected. Leave the Activity Name set to `MainActivity`, and leave the Layout Name set to `activity_main`.\n\n\n### Add the Pusher Android SDK to gradle:\n\nOnce you’ve set up your application on Android Studio, or your preferred IDE, then install Pusher as a dependency. In the `build.gradle` file of your application module, add:\n \n```\n    repositories {\n      maven { url 'http://clojars.org/repo' }\n    }\n    \n    dependencies {\n      compile 'com.pusher:pusher-java-client:1.0.0'\n      compile 'com.loopj.android:android-async-http:1.4.9' \n      compile 'com.google.code.gson:gson:2.2.4' \n    }\n```\n\nSync the gradle project. Pusher along with other modules we’ll need later, should now be installed. \n\nHowever, you can find your Pusher credentials when you create an app after [signing up for a free account](https://pusher.com/signup). Be sure to keep them handy for when we start adding some realtime features. \n\n## Client-Side\n### Creating the form\n\nIn the created project, open the `activity_main.xml` file and create the input form to collate the user details:\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:background=\"#fff\"\u003e\n    \u003cScrollView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\u003e\n        \u003cLinearLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\u003e\n    \n        \u003cLinearLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            android:layout_margin=\"10dp\"\n            android:layout_centerVertical=\"true\"\n            android:background=\"@drawable/layoutstyle\"\n            android:layout_centerHorizontal=\"true\"\u003e\n    \n            \u003cTextView\n                android:layout_gravity=\"center\"\n                android:layout_margin=\"16dp\"\n                android:textSize=\"20sp\"\n                android:textStyle=\"bold\"\n                android:textColor=\"#000\"\n                android:fontFamily=\"serif\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"Add Employee\"/\u003e\n    \n            \u003cEditText\n                android:background=\"@drawable/buttonstyle\"\n                android:layout_margin=\"8dp\"\n                android:id=\"@+id/edtName\"\n                android:padding=\"8dp\"\n                android:fontFamily=\"serif\"\n                android:textColor=\"#fff\"\n                android:hint=\"Name\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\" /\u003e\n    \n            \u003cEditText\n                android:padding=\"8dp\"\n                android:background=\"@drawable/buttonstyle\"\n                android:layout_margin=\"8dp\"\n                android:id=\"@+id/edtAge\"\n                android:fontFamily=\"serif\"\n                android:textColor=\"#fff\"\n                android:layout_width=\"match_parent\"\n                android:hint=\"Age\"\n                android:layout_height=\"wrap_content\" /\u003e\n            \u003cEditText\n                android:background=\"@drawable/buttonstyle\"\n                android:layout_margin=\"8dp\"\n                android:id=\"@+id/edtPosition\"\n                android:padding=\"8dp\"\n                android:textColor=\"#fff\"\n                android:hint=\"Position\"\n                android:fontFamily=\"serif\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\" /\u003e\n            \u003cEditText\n                android:background=\"@drawable/buttonstyle\"\n                android:layout_margin=\"8dp\"\n                android:fontFamily=\"serif\"\n                android:id=\"@+id/edtAddress\"\n                android:padding=\"8dp\"\n                android:textColor=\"#fff\"\n                android:hint=\"Address\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\" /\u003e\n    \n            \u003cButton\n                android:id=\"@+id/BtnSave\"\n                android:layout_gravity=\"center\"\n                android:fontFamily=\"serif\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:onClick=\"AddEmployee\"\n                android:text=\"Save\"/\u003e\n    \n          \u003c/LinearLayout\u003e\n        \u003c/LinearLayout\u003e\n      \u003c/ScrollView\u003e\n    \u003c/LinearLayout\u003e \n```\n\nNext we define some custom button styles and layout styles to give our app the desired user interface as can be seen in the snapshots earlier posted. So create two new drawable files called buttonstyle.xml and layoutstyle.xml and copy the codes therein into them.\nThese files only add round shapes to the EditText fields and LinearLayout. Hence, you could decide not to add my designs to your own work. However, to run the app with my designs and avert any xml errors, simply copy these files from the gist we attached above and paste in your own drawable files or simply delete every occurrence of `buttonstyle.xml` or `layoutstyle``.xml` in your xml. Your app will work just fine either way.\n\nThen open the `MainActivity.java` class and update it as follows to provide references to the EditText objects. This allows us to get the text from them:\n\n```\n    package com.example.ekene.pushapp;\n    \n    import android.support.v7.app.AppCompatActivity;\n    import android.os.Bundle;\n    import android.widget.EditText;\n    \n    public class MainActivity extends AppCompatActivity {\n    \n      private EditText edtName, edtAge, edtPosition, edtAddress;\n      private Button btnSave;\n      @Override\n      protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    \n        edtName = (EditText)findViewById(R.id.edtName);\n        edtAddress = (EditText)findViewById(R.id.edtAddress);\n        edtAge = (EditText)findViewById(R.id.edtAge);\n        edtPosition = (EditText)findViewById(R.id.edtPosition);\n       }\n    }\n```\n\n### Creating the table\n\nNext we create the Employee’s Table where we’ll render the form data. We’ll do this with Android Studio’s [TableLayout](https://developer.android.com/reference/android/widget/TableLayout.html) and [TableRow](https://developer.android.com/reference/android/widget/TableLayout.html). So inside the `activity_main.xml` file, just below the form’s Linear Layout, we add:\n\n```\n    \u003cTextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:textColor=\"#000\"\n        android:textSize=\"20sp\"\n        android:fontFamily=\"serif\"\n        android:text=\"Employees\"\n        android:gravity=\"center\"/\u003e\n    \n        \u003cTableLayout\n            android:layout_marginTop=\"10dp\"\n            android:id=\"@+id/table_layout\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\u003e\n    \n            \u003cTableRow\n                android:layout_height=\"wrap_content\"\n                android:layout_width=\"match_parent\"\n                android:id=\"@+id/table_row1\"\n                android:padding=\"10dp\"\u003e\n    \n                \u003cTextView\n                    android:id=\"@+id/name\"\n                    android:fontFamily=\"serif\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_weight=\"1\"\n                    android:textColor=\"#000\"\n                    android:text=\"Name\"/\u003e\n                \u003cTextView\n                    android:id=\"@+id/age\"\n                    android:textColor=\"#000\"\n                    android:fontFamily=\"serif\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_weight=\"1\"\n                    android:text=\"Age\"/\u003e\n                \u003cTextView\n                    android:textColor=\"#000\"\n                    android:id=\"@+id/position\"\n                    android:fontFamily=\"serif\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_weight=\"1\"\n                    android:text=\"Position\"/\u003e\n                \u003cTextView\n                    android:textColor=\"#000\"\n                    android:id=\"@+id/address\"\n                    android:fontFamily=\"serif\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_weight=\"1\"\n                    android:text=\"location\"/\u003e\n    \n            \u003c/TableRow\u003e\n            \u003cView\n                android:layout_height=\"3dip\"\n                android:layout_width=\"match_parent\"\n                android:background=\"#ff0000\"/\u003e\n          \u003c/TableLayout\u003e\n        \u003c/LinearLayout\u003e\n      \u003c/ScrollView\u003e\n    \u003c/LinearLayout\u003e\n```    \n\nBasically, this table is temporarily serving as a mock up for our application at this point. Later on we’’ll be creating the table dynamically with a `ListView`*.*\n\n## Adding new employees to the table\n\nTo add new records to our table, we set up the event listener for the ‘Save’ button like so:\n\n```\n    public class MainActivity extends AppCompatActivity implements View.OnClickListener {\n    \n        private EditText edtName, edtAge, edtPosition, edtAddress;\n        private Button btnSave;\n    \n        @Override\n        protected void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            setContentView(R.layout.activity_main);\n    \n            // get our input fields by its ID        \n              edtName = (EditText)findViewById(R.id.edtName);\n              edtAddress = (EditText)findViewById(R.id.edtAddress);\n              edtAge = (EditText)findViewById(R.id.edtAge);\n              edtPosition = (EditText)findViewById(R.id.edtPosition);\n    \n             // get our button by its ID\n            btnSave = (Button) findViewById(R.id.BtnSave);\n    \n            // set its click listener\n            btnSave.setOnClickListener(this);\n        }\n```\n\nWe’ll then define a method that will execute when the save button is clicked to get the data from our input fields and post to the server.\n\n```\n        @Override\n        public void onClick(View v) {\n            addEmployee();\n        }\n    \n        private void addEmployee()  {\n        }\n```\n\nThe `addEmployee()` method will simply get the values from the `EditText` objects and POST it to the server. In this tutorial, we’ll be using the [AsyncHTTPClient](https://github.com/AsyncHttpClient/async-http-client) library to send records to our server.\n\nSo let’s go ahead with creating and sending our request parameters in the `MainActivity.java` file:\n\n```\n    package com.example.ekene.pushapp;\n    \n    import com.loopj.android.http.AsyncHttpClient;\n    import com.loopj.android.http.JsonHttpResponseHandler;\n    import com.loopj.android.http.RequestParams;\n    import org.json.JSONArray;\n    import android.text.TextUtils;\n    \n    public class MainActivity extends AppCompatActivity {\n    \n        private void addEmployee(View v)  {\n    \n            String employeeName = edtName.getText().toString();\n            String employeeAge = edtAge.getText().toString();\n            String employeePosition = edtPosition.getText().toString();\n            String employeeAddress = edtAddress.getText().toString();\n    \n             // return if the input fields are blank\n                if (TextUtils.isEmpty(employeeName) \u0026\u0026 TextUtils.isEmpty(employeeAge) \u0026\u0026 \n                    TextUtils.isEmpty(employeePosition)\u0026\u0026 \n                    TextUtils.isEmpty(employeeAddress)) {\n                return;\n            }\n            \n            RequestParams params = new RequestParams();\n            // set our JSON object\n            params.put(\"name\", employeeName);\n            params.put(\"age\", employeeAge);\n            params.put(\"position\", employeePosition);\n            params.put(\"address\", employeeAddress);\n    \n            // create our HTTP client\n            AsyncHttpClient client = new AsyncHttpClient();\n            ...\n        }\n```\n\nWe’ll then define a String variable called  `RECORDS_ENDPOINT` in `MainActivity` and set it to point to the URL of our server e.g:\n\n```\n    private static final String RECORDS_ENDPOINT = \"http://localhost:3000/records\";\n```\n\nThen let’s make it so that when the request is successful it clears the `inputFields`, or when it fails it alerts the user that it “Couldn’t Post” with a Toast.\nSo we continue creating our HTTP client inside the `MainActivity` like so:\n\n```\n    ....\n    client.post(RECORDS_ENDPOINT, params, new JsonHttpResponseHandler(){\n    \n        @Override\n        public void onSuccess(\n        int statusCode, \n        cz.msebera.android.httpclient.Header[] headers, \n        JSONArray response) {\n            super.onSuccess(statusCode, headers, response);\n            runOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    edtName.setText(\"\");\n                    edtAge.setText(\"\");\n                    edtPosition.setText(\"\");\n                    edtAddress.setText(\"\");\n                }\n            });\n        }\n    \n        @Override\n        public void onFailure(\n        int statusCode, \n        cz.msebera.android.httpclient.Header[] headers, \n        String responseString, \n        Throwable throwable) {\n            super.onFailure(statusCode, headers, responseString, throwable);\n                  Toast.makeText(\n                          getApplicationContext(), \"Couldn't Post!\",\n                          Toast.LENGTH_LONG\n                  ).show();\n          }\n        });\n      }\n    }\n```\n\nAt this point the client is set up to send the input to the server. Next we’ll set up our mini API \n\n## Server-side\n\nAt this point we will integrate Pusher at the back end. Pusher is a simple hosted API for quickly, easily and securely implementing realtime two-way functionality on web and mobile apps. To achieve this, we’ll need to set it up on the server-side.\n\nInstall [NodeJS](https://nodejs.org/en/) and [Express](http://expressjs.com/) if you haven’t already. Generate your table-backend with:\n\n```\n    $ express table-backend \n    $ cd table-backend \n    $ npm install\n```\n\nNow install the [Pusher Node library](http://github.com/pusher-http-node) with:\n\n```\n    $ npm install pusher --save\n```\n\nNow we initialize the `Pusher` object in our `app.js` file with the application credentials:\n\n```\n    var Pusher = require('pusher');\n    var express = require('express');\n    var options = PusherOptions();\n        options.setCluster(PUSHER_APP_CLUSTER);\n    var pusher = new Pusher({\n        appId: \"your app id\",\n        key: \"your app key\",\n        secret: \"your app secret\"    \n    });\n```\n\nNext we create the endpoint that receives JSON from the client. Then we’ll fire up a Pusher event called `new_record` on a channel called `records`, passing along the data we received from the client.\n\n```\n    app.post('/records', function(req, res){\n      var record = req.body;\n      pusher.trigger('records', 'new_record', record);\n      res.json({success: 200});\n    });\n```\n\nNext open your `AndroidManifest.xml` file and enable internet permissions. Just before the Application tag, add:\n\n`\u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e`\n\nNow let’s fire up our server, and run the mobile app either on an emulator or on any android device. Meanwhile, open up the Pusher Debug Console for your app on [your dashboard](http://dashboard.pusher.com/). Then on your emulator or device, you should see the Add Employee form, fill in the fields and and click the `Save` button, you should see the information you just supplied pop up in realtime on your Debug Console. \n\n## Render Live Table Records\n\nWe’ve come a long way but we are not done, Let’s now have our Android client listen for incoming employee records, and show them in a list.\nSo in `activity_main.xml`, add a `ListView` as the last child of `LinearLayout` and above the `TableLayout` that wraps our table headings. Your layout XML starting from the TableLayout  should look like so:\n\n```\n    \u003cTableLayout\n            android:layout_marginTop=\"10dp\"\n            android:id=\"@+id/table_layout\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\u003e\n    \n            \u003cTableRow\n                android:layout_height=\"wrap_content\"\n                android:layout_width=\"match_parent\"\n                android:id=\"@+id/table_row1\"\n                android:padding=\"10dp\"\u003e\n    \n                \u003cTextView\n                    android:id=\"@+id/name\"\n                    android:fontFamily=\"serif\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_weight=\"1\"\n                    android:textColor=\"#000\"\n                    android:text=\"Name\"/\u003e\n                \u003cTextView\n                    android:id=\"@+id/age\"\n                    android:textColor=\"#000\"\n                    android:fontFamily=\"serif\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_weight=\"1\"\n                    android:text=\"Age\"/\u003e\n                \u003cTextView\n                    android:textColor=\"#000\"\n                    android:id=\"@+id/position\"\n                    android:fontFamily=\"serif\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_weight=\"1\"\n                    android:text=\"Position\"/\u003e\n                \u003cTextView\n                    android:textColor=\"#000\"\n                    android:id=\"@+id/address\"\n                    android:fontFamily=\"serif\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_weight=\"1\"\n                    android:text=\"location\"/\u003e\n    \n            \u003c/TableRow\u003e\n            \u003cView\n                android:layout_height=\"3dip\"\n                android:layout_width=\"match_parent\"\n                android:background=\"#ff0000\"/\u003e\n        \u003c/TableLayout\u003e\n        // add a listview to display our table records \n        \u003cListView\n        android:id=\"@+id/records_view\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"500dp\"\n        android:layout_marginTop=\"16dp\"\u003e\n        \u003c/ListView\u003e\n       \u003c/LinearLayout\u003e\n      \u003c/ScrollView\u003e\n    \u003c/LinearLayout\u003e\n```\n\nIn order to display each message within the `ListView`, we’ll have to create an adapter that turns a list into a set of views. In our MainActivity `onCreate` method, let’s bind our `ListView` to this adapter like so: **NB** *we haven’t created the adapter yet, we’ll do that in a bit.*\n\n```\n    public class MainActivity extends AppCompatActivity implements View.OnClickListener {\n        ...\n        private RecordAdapter recordAdapter;\n        @Override\n        protected void onCreate(Bundle savedInstanceState) {\n            ...\n            recordAdapter= new RecordAdapter(this, new ArrayList\u003cRecord\u003e());\n            final ListView recordsView = (ListView) findViewById(R.id.records_view);\n            recordsView.setAdapter(recordAdapter);\n        }\n```\n\nNext we create the `Record.java` class which comprises a single row in the List:\n\n```\n    public class Record {\n        public String age;\n        public String name;\n        public String position;\n        public String address;\n    }\n```\n\nNext we create the adapter. Create a new class `RecordAdapter`. We initialized it in the `MainActivity` Class with our `MainActivity`‘s context. We’ll create it like so:\n\n```\n    public class RecordAdapter extends BaseAdapter {\n    \n        private Context recordContext;\n        private List\u003cRecord\u003e recordList;\n    \n        public RecordsAdapter(Context context, List\u003cRecord\u003e records) {\n            recordList = records;\n            recordContext = context;\n        }\n```\n\nBecause we extended `BaseAdapter`, Android Studio will prompt us to implement it’s three associating methods `getCount`, `getItem` and `getItemId`, which we can do like so:\n\n```\n    @Override\n    public int getCount() {\n        return recordList.size();\n    }\n    @Override\n    public Object getItem(int i) {\n        return recordList.get(i);\n    }\n    @Override\n    public long getItemId(int i) {\n        return i;\n    }\n```\n\nFinally we’ll have to implement a method called `getView()` that will convert an item in the `ArrayList` of `Records` to a view. But first we need to create a `RecordViewHolder`  private class to encapsulate the views we would like to be part of the message. In this case, we’re going to have a:\n\n- nameView - for the employees name\n- ageView - for the employees name\n- nameView - for the employees name\n- nameView - for the employees name\n\nSo within our `RecordAdapter`, add a private nested class:\n\n```\n    private static class RecordViewHolder {\n    \n        public TextView nameView;\n        public TextView positionView;\n        public TextView ageView;\n        public TextView addressView;\n    }\n```\nNext we create another layout resource file called `record.xml`. This layout will hold the views we defined in the `RecordViewHolder` class and render it to the list. Hence it’ll contain four `TextViews` for the name, age, position and address respectively.\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"horizontal\" android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\u003e\n        \u003cTextView\n            android:id=\"@+id/record_name\"\n            android:fontFamily=\"serif\"\n            android:layout_height=\"wrap_content\"\n            android:layout_width=\"match_parent\"\n            android:layout_weight=\"1\"\n            android:textColor=\"#000\"\n            android:text=\"Name\"/\u003e\n        \u003cTextView\n            android:id=\"@+id/record_age\"\n            android:textColor=\"#000\"\n            android:fontFamily=\"serif\"\n            android:layout_height=\"wrap_content\"\n            android:layout_width=\"match_parent\"\n            android:layout_weight=\"1\"\n            android:text=\"Age\"/\u003e\n        \u003cTextView\n            android:textColor=\"#000\"\n            android:id=\"@+id/record_position\"\n            android:fontFamily=\"serif\"\n            android:layout_height=\"wrap_content\"\n            android:layout_width=\"match_parent\"\n            android:layout_weight=\"1\"\n            android:text=\"Position\"/\u003e\n        \u003cTextView\n            android:textColor=\"#000\"\n            android:id=\"@+id/record_address\"\n            android:fontFamily=\"serif\"\n            android:layout_height=\"wrap_content\"\n            android:layout_width=\"match_parent\"\n            android:layout_weight=\"1\"\n            android:text=\"location\"/\u003e        \n    \u003c/LinearLayout\u003e\n```\n\nNow that we have a `RecordViewHolder` to encapsulate the visual elements that comprise a record, and a `record.xml` layout to inflate those elements into, we can go ahead and implement our  `getView` method inside our RecordAdapter class like so:\n\n```\n    @Override\n    public View getView(int i, View view, ViewGroup viewGroup) {\n            RecordViewHolder holder;\n            \n        if (view ==null){\n            LayoutInflater recordInflater = (LayoutInflater) \n            recordContext.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);\n            view = recordInflater.inflate(R.layout.record, null);\n            \n            holder = new RecordViewHolder();\n            holder.ageView = (TextView) view.findViewById(R.id.record_age);\n            holder.nameView = (TextView) view.findViewById(R.id.record_name);\n            holder.positionView = (TextView) view.findViewById(R.id.record_position);\n            holder.addressView = (TextView) view.findViewById(R.id.record_address);\n            view.setTag(holder);\n            \n        }else {\n            holder = (RecordViewHolder) view.getTag();\n        }\n        \n            Record record = (Record) getItem(i);\n            holder.nameView.setText(record.name);\n            holder.ageView.setText(record.age);\n            holder.positionView.setText(record.position);\n            holder.addressView.setText(record.address);\n            return view;\n    }\n```\n\nWhat we want to do now is, when we receive an event from Pusher about a new record, we want to add that new record to our `RecordAdapter` and update our `recordsList` with that new employee record. Here’s how we achieve that:\n\n```\n    //...\n    public class RecordsAdapter extends BaseAdapter {\n      //...\n      public void add(Record record) {\n        recordList.add(record);\n        notifyDataSetChanged();\n      }\n    }\n```\n\nThis will add the record to the `recordsList` and `notifyDataSetChange()` will refresh the adapter, showing the new record.\nNow we can go back to `MainActivity` and start listening for Pusher records:\n\n```\n        @Override\n        protected void onCreate(Bundle savedInstanceState) {\n             ...\n             // initialize Pusher\n            Pusher pusher = new Pusher(\"pusher_key\"); \n            pusher.setCluster(\"app_cluster\");\n             // subscribe to our \"records\" channel\n            Channel channel = pusher.subscribe(\"records\"); \n              // listen for the \"new_record\" event\n            channel.bind(\"new_record\", new SubscriptionEventListener() {\n                ...\n            }); \n            // connect to the Pusher API\n            pusher.connect(); \n        }\n```\n\nNow that we have initialized Pusher, connected to the API, and subscribed to the `records` channel, we can add our `SubscriptionEventListener` to execute when an event comes in. All we’ll need to do is parse the JSON (for this example we used the [Gson library](https://github.com/google/gson) to parse it into the `Record` object) and then add it to the `RecordAdapter` inside the `MainActivity` like so:\n\n```\n    channel.bind(\"new_record\", new SubscriptionEventListener() {\n        @Override\n        public void onEvent(String channelName, String eventName, final String data) {\n            runOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    Gson gson = new Gson();\n                    Record record = gson.fromJson(data, Record.class);\n                    recordAdapter.add(record);\n                    recordsView.setSelection(recordsAdapter.getCount() - 1);\n                }\n            });\n        }\n    });\n```\n\nAt this point, whenever we have a `new_record` event come in, we simply add it to our `RecordAdapter`, and the new record will appear in realtime! wow, that was amazing!\n\nNow run your app on an emulator or any android device, and give it a spin. If you encounter any issues, do consult the [source code](https://github.com/christiannwamba/pusher-android-table).\nIf you have an android device, you can [install the app here](https://drive.google.com/file/d/1yicGkXQyOLCnhhkmIHjVTDgAB_j-_9jm/view?usp=sharing) and see how it works.\n\n## Conclusion\n\nWith this walk through, you should be able to build cross platform realtime apps with ease. Other Pusher features are available but their use depends on the requirements of your app. You can have a look at [Pusher’s](https://pusher.com/docs/) documentation for a deeper comprehension of the project.\n\n### Appendix: Pusher Setup\n\n1. [Sign up](https://dashboard.pusher.com/accounts/sign_in) for a free Pusher account:\n![realtime-table-android-signup](//images.contentful.com/1es3ne0caaid/qUrCl4R2BauEiIckOwCAS/fc02e2b21cfdc56c05a09d2e3525bcff/realtime-table-android-signup.png)\n\n2. Create a new app by selecting **Apps** on the sidebar and clicking **Create New** button on the bottom of the sidebar:\n![realtime-table-android-dashboard](//images.contentful.com/1es3ne0caaid/4Z3RALCwV2AO42YcmcayII/8b534c87265b7eacb6be6c00de639954/realtime-table-android-dashboard.png)\n\n3. Configure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with for a better setup experience:\n![realtime-table-android-create-app](//images.contentful.com/1es3ne0caaid/47GBScjOI0MWIq2GsokAU8/0ab3ef594630f3548b39b7cfd4e760a6/realtime-table-android-create-app.png)\n\n4. You can retrieve your keys from the **App Keys** tab:\n![realtime-table-android-api-keys](//images.contentful.com/1es3ne0caaid/50Epp9EnvqmOOWUUUuE0Sy/71df392b707f50ed6fd04da9d375ee65/realtime-table-android-api-keys.png)","metaTitle":"Build a realtime table with Android ","metaDescription":"In this tutorial, we will be using our Android library to quickly and easily build a live data table. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1w2V25uaQoO0ugIg2QAWwi","type":"Entry","createdAt":"2018-02-28T12:58:47.883Z","updatedAt":"2018-02-28T16:13:29.564Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build live comments using Kotlin","url":"live-comments-kotlin","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/kotlin-pusher-live-commenting-sample","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}}],"reviewDate":"2017-12-07","description":"Realtime comments are a natural feature of any social app. In this tutorial, you will learn to build it with Kotlin.","prerequisite":"A basic understanding of Kotlin is needed to follow this tutorial.","content":"When building out applications, it's not uncommon to have a commenting feature. With live commenting, comments added will update in realtime across all devices without the user refreshing the page. Applications like Facebook already have this feature.\n\nIn this post, we will build a basic commenting application. We will assume that the user is leaving a comment to a make-believe post. Here is a screen recording of what we will be building:\n\n![live-comments-kotlin-demo](//images.contentful.com/1es3ne0caaid/4p8lPc6uc8IG4A4uC4wA26/5cbb70d07c608431e78d79aa9780e9f0/live-comments-kotlin-demo.gif)\n\n## Requirements\n\nTo follow along in this tutorial you will need the following requirements:\n- Knowledge of the [Kotlin](http://kotlinlang.org/docs/tutorials/) programming language.\n- Android Studio 3.0 installed. [Download here](https://developer.android.com/studio/archive.html).\n- A Pusher application. [Create one here](https://pusher.com).\n- IntelliJ IDEA installed. [Download](https://www.jetbrains.com/idea/download/) here.\n\nWhen you have all the requirements let's start.\n\n\n## Create new application on Pusher\n\nLog into your Pusher dashboard, select apps on the left navigation bar and create a new app. Input your app name (test-app in my own case), select a cluster (eu - Ireland in my case).\n\n![live-comments-kotlin-create-app](//images.contentful.com/1es3ne0caaid/3GV8oGbqPeEQCMU60Q40gS/d131341f910f4ca42580e88f9eb0401d/live-comments-kotlin-create-app.png)\n\nWhen you have created the Pusher app, we will move on to creating our Kotlin application.\n\n## Creating our Android project with Kotlin support\n\nOpen android studio, create a new project. Insert the name of your app and Company domain name then select the “include kotlin support” checkbox to enable Kotlin in the project.\n\n![live-comments-kotlin-create-android-project](//images.contentful.com/1es3ne0caaid/klIIGGdOQEoo0eSWG02qM/56e04ff94e60c9b908a8bda40edc8fec/live-comments-kotlin-create-android-project.png)\n\nFor this article, we will set the minimum supported Android version at 4.03 (API 15). Next, choose an empty activity template and click on Finish.\n\n![live-comments-kotlin-activity-mobile](//images.contentful.com/1es3ne0caaid/7FOAQZ01P2qaU8i4KmY0ou/9accd0b9f696a88f20c3f583e7ef049a/live-comments-kotlin-activity-mobile.png)\n\n\n## Getting the client ready\n\nAdd the pusher dependency in your app `build.gradle` file:\n\n```\n    implementation 'com.pusher:pusher-java-client:1.5.0'\n```\n\nOur layout file will contain:\n\n- A recycler view (to display the comments).\n- An edit-text view (to input our message).\n- A button (to trigger an action to send a message).\n\nA default project is created with the recycler view dependencies, however, look out for this dependency:\n\n```\n    implementation 'com.android.support:design:26.1.0'\n```\n\nand if you don’t find it, add it. \n\nHere is our layout snippet:\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cRelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\u003e\n        \n        \u003candroid.support.v7.widget.RecyclerView\n            android:id=\"@+id/recycler_view\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\" /\u003e\n        \u003cFrameLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"?attr/actionBarSize\"\n            android:layout_alignParentBottom=\"true\"\u003e\n            \u003cLinearLayout\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:orientation=\"horizontal\"\u003e\n                \u003cEditText\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_weight=\"1\" /\u003e\n                \u003cButton\n                    android:id=\"@+id/button_send\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                        android:text=\"Send\" /\u003e\n            \u003c/LinearLayout\u003e\n        \u003c/FrameLayout\u003e\n    \u003c/RelativeLayout\u003e\n```\n\nThis is what our app looks like at the moment. It is very bare with no comments yet:\n\n\n![live-comments-kotlin-app-ui](//images.contentful.com/1es3ne0caaid/2qXHi5YssY6Iqkk4SkOC2O/a1c1c4a17ef83d75fd2a1fb9cf75e191/live-comments-kotlin-app-ui.png)\n\n\nWe then create a recycler view adapter class named `RecyclerViewAdapter.kt` . This adapter is a class that handles the display of items in a list.\n\nPaste the code below into our new class:\n\n```\n    class RecyclerViewAdapter (private val mContext: Context) \n      :RecyclerView.Adapter\u003cRecyclerViewAdapter.MyViewHolder\u003e() {        \n       \n        // The initial empty list used by the adapter\n        private var arrayList: ArrayList\u003cString\u003e = ArrayList()\n        \n        // This updates the adapter list with list from MainActivity.kt which contains the messages.  \n        fun setList(arrayList: ArrayList\u003cString\u003e) {\n            this.arrayList = arrayList\n            notifyDataSetChanged()\n        }\n        \n        // The layout design used for each list item\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MyViewHolder {\n            val view = LayoutInflater.from(mContext).inflate(android.R.layout.simple_list_item_1, parent, false)\n            return MyViewHolder(view)\n        }\n        \n        // This displays the text for each list item\n        override fun onBindViewHolder(holder: RecyclerViewAdapter.MyViewHolder, position: Int) { \n            holder.text.setText(arrayList.get(position))\n        }\n        \n        // This returns the size of the list.\n        override fun getItemCount(): Int {\n            return arrayList.size\n        }\n        \n        inner class MyViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView), \n        \n        View.OnClickListener {\n            var text: TextView = itemView.findViewById\u003cView\u003e(android.R.id.text1) as \n            TextView\n            init {\n                itemView.setOnClickListener(this)\n            }\n            \n            override fun onClick(view: View) {\n            \n            }\n        }\n    }\n```\n\nWe will need the [Retrofit](https://github.com/square/retrofit) library (a “type-safe HTTP client”) to enable us send messages to our remote server which we will build later on. \n\nAfter adding the retrofit dependencies, your app `build.gradle` file should look like this:\n\n```\n    apply plugin: 'com.android.application'\n    apply plugin: 'kotlin-android'\n    apply plugin: 'kotlin-android-extensions'\n    \n    android {\n        compileSdkVersion 26\n        defaultConfig {\n            applicationId \"com.example.android.pushersample\"\n            minSdkVersion 15\n            targetSdkVersion 26\n            versionCode 1\n            versionName \"1.0\"\n            testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\"\n        }\n        buildTypes {\n            release {\n                minifyEnabled false\n                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n            }\n        }\n    }\n    \n    dependencies {\n        implementation fileTree(dir: 'libs', include: ['*.jar'])\n        implementation \"org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version\"\n        implementation 'com.android.support:appcompat-v7:26.1.0'\n        implementation 'com.android.support:design:26.1.0'\n    \n        // pusher depencency\n        implementation 'com.pusher:pusher-java-client:1.5.0'\n        \n        // retrofit dependencies\n        implementation 'com.squareup.retrofit2:retrofit:2.3.0'\n        implementation 'com.squareup.retrofit2:converter-scalars:2.3.0'\n        implementation 'com.squareup.retrofit2:converter-gson:2.3.0'\n        \n        // testing dependencies\n        testImplementation 'junit:junit:4.12'\n        androidTestImplementation 'com.android.support.test:runner:1.0.1'\n        androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'\n    }\n```\n\nNext, create an API Interface file in the `src/main/kotlin` folder called `ApiService.kt`. This interface is used to define endpoints to be used during network calls. For this application, we will create just one endpoint:\n\n```\n    interface ApiService {\n        @GET(\"/{message}\")\n        fun sendMessage(@Path(\"message\") title: String):Call\u003cString\u003e\n    }\n```\n\nCreate a Retrofit Client class in the `src/main/kotlin` folder called `RetrofitClient.kt`. This class gives us an instance of Retrofit for our network calls:\n\n```\n    class RetrofitClient {\n        fun getClient(): ApiService {\n            val httpClient = OkHttpClient.Builder()\n            \n            val builder = Retrofit.Builder()\n                    .baseUrl(\"http://10.0.2.2:5000/\")\n                    .addConverterFactory(ScalarsConverterFactory.create())\n                    .addConverterFactory(GsonConverterFactory.create())\n    \n            val retrofit = builder\n                    .client(httpClient.build())\n                    .build()\n    \n            return retrofit.create(ApiService::class.java)\n        }\n    }\n```\n\n\u003e 💡 We are using the address `10.0.2.2` because this is how the Android default emulator recognises localhost. So the IP address refers to a local server running on your machine.\n\nWe now move to our `MainActivity.kt` file and update it with the methods below:\n\n```\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        \n        setContentView(R.layout.activity_main)\n        \n        // list to hold our messages\n        var arrayList: ArrayList\u003cString\u003e = ArrayList()\n        \n        // Initialize our adapter\n        val adapter = RecyclerViewAdapter(this)\n    \n        // assign a layout manager to the recycler view\n        recycler_view.layoutManager = LinearLayoutManager(this)\n    \n        // assign adapter to the recycler view\n        recycler_view.adapter = adapter\n    \n        // Initialize Pusher\n        val options = PusherOptions()\n        options.setCluster(\"PUSHER_APP_CLUSTER\")\n        val pusher = Pusher(\"PUSHER_APP_KEY\", options)\n    \n        // Subscribe to a Pusher channel\n        val channel = pusher.subscribe(\"my-channel\")\n    \n        // this listener recieves any new message from the server\n        channel.bind(\"my-event\") { channelName, eventName, data -\u003e\n            val jsonObject = JSONObject(data)\n            arrayList.add(jsonObject.getString(\"message\"))\n            runOnUiThread { adapter.setList(arrayList) }\n        }\n        pusher.connect()\n    \n        // We check for button clicks and if any text was inputed, we send the message\n        button_send.setOnClickListener(View.OnClickListener {\n            if (edit_text.text.length\u003e0) {\n                sendMessage(edit_text.text.toString())\n            }\n        })\n    \n    } // end of onCreate method\n    \n    fun sendMessage(message:String) {\n        val call = RetrofitClient().getClient().sendMessage(message)\n        \n        call.enqueue(object : Callback\u003cString\u003e {\n            override fun onResponse(call: Call\u003cString\u003e, response: Response\u003cString\u003e) {\n                edit_text.setText(\"\")\n                hideKeyboard(this@MainActivity)\n            }\n            override fun onFailure(call: Call\u003cString\u003e, t: Throwable) {\n                \n            }\n        })\n    } // end of sendMessage method\n    \n    fun hideKeyboard(activity: Activity) {\n        val imm = activity.getSystemService(Activity.INPUT_METHOD_SERVICE) as InputMethodManager\n        \n        // Find the currently focused view, so we can grab the correct window token from it.\n        var view = activity.currentFocus\n    \n        // If no view currently has focus, create a new one, just so we can grab a window token from it\n        if (view == null) {\n            view = View(activity)\n        }\n        \n        imm.hideSoftInputFromWindow(view.windowToken, 0)\n    } // end of hideKeybnoard method\n```\n\n\u003e ⚠️ You will need to replace the `PUSHER_APP_*`  keys with the credentials found in your Pusher application dashboard.\n\nIn the `onCreate` method, we initialised the list to hold the messages, the recycler view adapter to handle the display of items on the list, and assigned the recycler view accordingly.\n\nWe then initialised `PusherOptions` and `Pusher` objects with the necessary parameters. Remember to set the Pusher objects first parameter with your own app key. Your app keys can be found on the App Keys tab of the app you created. If you have forgotten the cluster you chose when creating the app, you can also find it there.\n\nNext, we create a listener for events on that channel. When a new message is received, it will be added to our list and the updated list will be assigned to our adapter so that it can be displayed immediately.\n\nFinally, we added a listener to the button in our layout to enable us send messages. After messages are successfully sent, we clear the text and hide the keyboard.\n\nNext up is to add the Internet permission in your `AndroidManifest.xml` file. Update the file with the code snippet below:\n\n```\n    \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n```\n\nWith this change, we are done building our client application.\n\n\n## Building our Kotlin backend server\n\nOur server will be built with Kotlin and hosted locally. You can follow the steps below to quickly get your server running.\n\nCreate a new Gradle based Kotlin project in IntelliJ IDEA.\n\n![live-comments-kotlin-gradle](//images.contentful.com/1es3ne0caaid/6oRjIY2mU86aiI8aq2yIEs/51f15843b628725558ad1908eeecbed5/live-comments-kotlin-gradle.png)\n\nEnter a “groupId” for your app. A groupId can be a package name and it’s usually something like “com.example”.\n\nNext, enter an “artifactId”, it’s usually something like “pusher-server”\n\n![live-comments-kotlin-gradle-wrapper](//images.contentful.com/1es3ne0caaid/3O88Z1M9jiWu0CwGSWoomm/25eb6a298ea1e719d66cd27eee61142c/live-comments-kotlin-gradle-wrapper.png)\n\nIn our project `build.gradle` file, we will add Ktor and pusher server dependencies. Ktor is a framework for building servers and clients in connected systems using the Kotlin programming language.\n\nHere is our complete `build.gradle` file which includes all the dependencies we need:\n\n```\n    group 'com.example'\n    version '1.0-SNAPSHOT'\n    \n    buildscript {\n        // dependency version variables\n        ext.kotlin_version = '1.1.4-3'\n        ext.ktor_version = '0.2.4'\n        repositories {\n            mavenCentral()\n        }\n        dependencies {\n            classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n        }\n    }\n    \n    apply plugin: 'application'\n    apply plugin: 'kotlin'\n    \n    sourceCompatibility = 1.8\n    \n    repositories {\n        mavenCentral()\n        maven {\n            url 'http://dl.bintray.com/kotlin/kotlinx.support'\n        }\n        maven {\n            url 'http://dl.bintray.com/kotlin/ktor'\n        }\n    }\n    \n    mainClassName = 'org.jetbrains.ktor.jetty.DevelopmentHost'\n    \n    dependencies {\n        compile \"org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version\"\n        // ktor dependencies\n        compile \"org.jetbrains.ktor:ktor-core:$ktor_version\"\n        compile \"org.jetbrains.ktor:ktor-locations:$ktor_version\"\n        runtime \"org.jetbrains.ktor:ktor-jetty:$ktor_version\"\n        // pusher server dependency\n        compile \"com.pusher:pusher-http-java:1.0.0\"\n        testCompile group: 'junit', name: 'junit', version: '4.12'\n    }\n    \n    compileKotlin {\n        kotlinOptions.jvmTarget = \"1.8\"\n    }\n    \n    compileTestKotlin {\n        kotlinOptions.jvmTarget = \"1.8\"\n    }\n```\n\nIn your `src/main/kotlin` folder, create a `Main.kt` file and insert this snippet:\n\n```\n    fun Application.main() {\n    \n        val pusher = Pusher(\"PUSHER_APP_ID\", \"PUSHER_APP_KEY\", \"PUSHER_APP_SECRET\")\n        pusher.setCluster(\"PUSHER_APP_CLUSTER\")\n    \n        install(DefaultHeaders)\n        install(CallLogging)\n        install(Routing) {\n            get(\"/{message}\") {\n                val i = call.parameters[\"message\"]!!\n                pusher.trigger(\"my-channel\", \"my-event\", Collections.singletonMap(\"message\", i))\n                call.respond(\"response sent\")\n            }\n    \n        }\n    }\n```\n\n\u003e ⚠️ You will need to replace the `PUSHER_APP_*`  keys with the credentials found in your Pusher application dashboard.\n\nIn the above snippet, we have defined a route that handles new messages. When a message is received, it sends the message to the Pusher channel so it can be picked up by any event listeners on the same channel.\n\nNext, open the `src/main/resources/application.conf` file and set the port to `5000`. If the file does not exist, create it and insert this snippet:\n\n```\n    ktor {\n        deployment {\n            environment = development\n            port = 5000\n        }\n    \n        application {\n            modules = [com.example.MainKt.main]\n        }\n    }\n```\n\nThis file allows you configure the server parameters.\n\nAfter that, open the Terminal on the IDE, and type `./gradlew run` to run the server. To test your server, open `http://localhost:5000/message` and you should see a display saying “response sent”.\n\nNow we’re done with everything. We can make comments and receive updates with no stress, thanks to Pusher.\n\n![live-comments-kotlin-demo](//images.contentful.com/1es3ne0caaid/4p8lPc6uc8IG4A4uC4wA26/5cbb70d07c608431e78d79aa9780e9f0/live-comments-kotlin-demo.gif)\n\n## Conclusion\n\nIn this article, we have demonstrated how to work with Pusher and Kotlin while creating the commenting system. It is a very simple implementation and, of course, you can do more. I am curious to see what you will come up with.","metaTitle":"Build live comments using Kotlin","metaDescription":"Discover how you can build realtime comments with Kotlin for your Android app."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"18eJwYM8iSyw20owAk2K22","type":"Entry","createdAt":"2018-02-28T12:47:47.749Z","updatedAt":"2018-02-28T12:47:47.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime counter using Kotlin","url":"counter-kotlin","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5HjouOQyOIwCcyuswYcIuc","type":"Entry","createdAt":"2018-02-16T18:20:46.412Z","updatedAt":"2018-04-23T13:19:32.814Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Perfect Makanju","url":"perfect-makanju","email":"damiperfect@gmail.com","twitter":"https://twitter.com/perfectmak","github":"https://github.com/perfectmak","guestWriter":true}}],"projectRepo":"https://github.com/perfectmak/kotlin-realtime-counter-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5WBKKiARVKggKEsq8gSuOS","type":"Entry","createdAt":"2018-02-12T15:10:05.476Z","updatedAt":"2018-02-26T12:31:10.466Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Counter","url":"live-counter","type":"use case"}}],"reviewDate":"2017-11-09","description":"Counters are always useful for any app. In this tutorial, we will buld a live click counter using Kotlin.","prerequisite":"A basic understanding of Kotlin is needed to follow this tutorial.","content":"It is important to show realtime updates of what is happening in an application, and one form of this is a realtime counter. A realtime counter can be used to show users of an app how other users are interacting with their content. For example, Instagram uses a realtime counter to show when viewers like a live video. This makes users of the application feel more engaged as they will be getting immediate feedback when things change.\n\nIn this tutorial, I’ll show you how to use Pusher to create a realtime counter in Kotlin. We will be creating a simple Android application with a counter showing how many users have clicked on a button. This click count also updates in realtime when other users click on it. Below is a GIF of how the application will work:\n\n![counter-kotlin-demo](//images.contentful.com/1es3ne0caaid/4RFWmypH1mE4guKcMYkw8M/329b583077cae82ad6cda5e12cb8b1d8/counter-kotlin-demo.gif)\n\nWe will be using Kotlin to develop both the realtime web server and the Android application, so a basic working knowledge of Kotlin and Android development will be required to follow this tutorial.\n\n\n## Overview\n\nWe will build a web server that keeps track of how many times a button has been clicked. The web server will also expose an endpoint which the Android application can call to send click events, the web server would then increment the click count and send a broadcast using Pusher to all clients currently subscribed to the click event. \n\nSo based on the above, this post is going to be in two sections:\n\n1. Building the realtime server using Kotlin\n2. Building the Android application using Kotlin\n\nSo lets get started.\n\n\n### Create a Pusher account\n\nBefore we get started, you would need to create a Pusher application. Go on to [Pusher](https://pusher.com) and create an account, but if you already have an account, just login. Then, create a new app from the dashboard and store the apps keys as we would be using them later in this post.\n\n### Building the realtime server\n\nKotlin is a very versatile language and one of its interesting features is its ability to be compiled to Javascript. We are going to use this feature to build a Kotlin server application that would be run with Node.js.\n\nIn order to compile Kotlin to Javascript and run on Node.js, you would need to have [Node.js](https://nodejs.org/en/download/) and [Gradle](https://gradle.org/install/) installed on your computer. The remaining part of this tutorial will assume you have both installed on your machine.\n\nFirst, run the command:\n\n```\n    npm init\n```\n\nAfter entering the appropriate setup information, you should have your `package.json` file created for you in your directory. \nNext, create a `build.gradle` file in the same directory and copy the following into the file:\n\n```\n    group 'kotlin-realtime-counter'\n    version '1.0'\n    buildscript {\n      ext.kotlin_version = '1.1.3'\n        repositories {\n          mavenCentral()\n          jcenter()\n        }\n      dependencies {\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n      }\n    }\n    apply plugin: 'kotlin2js'\n    repositories {\n      mavenCentral()\n      jcenter()\n    }\n    dependencies {\n      compile \"org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version\"\n    }\n    compileKotlin2Js.kotlinOptions {\n      moduleKind = \"commonjs\"\n      outputFile = \"build/app.js\"\n    }\n```\n\nThis `build.gradle` file would compile our Kotlin code into Javascript to run. Some things to note are:\n\n1. You can change the `group` and `version` to something that suits your project. In this case it is set to `kotlin-realtime-counter`.\n2. The `outputFile`  option at the bottom of the file is used to set where the location of the Javascript file that our Kotlin code will be compiled into. In this case it would be compiled into the `build` directory inside an `app.js` file.\n\nNow in order for this build to work, all the Kotlin code needs to be put in the directory `src/main/kotlin`. This can be created with the following command:\n\n```\n    mkdir -p src/main/kotlin\n```\n\nAfter executing the above command, your project directory structure should look like this:\n\n```\n    |- src\n      |- main\n        |- kotlin\n    |- build.gradle\n    |- package.json\n```\n\nSo, let’s get down to coding our server. We need to install the following Node.js libraries using npm:\n\n```\n    npm install --save kotlin express pusher\n```\n\nThis will install the Kotlin.js library needed for our compiled Javascript code to work. It will also be installing express for creating our server and the Pusher library for making realtime event broadcasts.\n\nNow, create a file named `ClickCount.kt` inside the `src/main/kotlin` folder, and write the following code in it:\n\n```\n    data class ClickCount(val count: Int)\n```\n\nThis `ClickCount` class will be used as a data object to encapsulate information about the number of times a click has be recorded. It’s importance will be seen later in the post.\n\nNext, create a file named `App.kt` inside the `src/main/kotlin` folder. In the `App.kt` file, we need to first define some external functions and classes that would exist normally in the Node.js environment. This way, Kotlin would know the signature of these functions and not throw an error when they are being used.\n\n```\n    external fun require(module: String): dynamic\n    \n    @JsModule(\"pusher\")\n    external class Pusher(config: Any) {\n        fun trigger(channel: String, event: String, data: Any)\n    }\n```\nHere we define the following functions:\n\n- require(): This is declaring the standard nodejs require function used to import modules. We will be using it later to import the express library. The `[dynamic](https://kotlinlang.org/docs/reference/dynamic-type.html)` type only exists for Kotlin codes targeting Javascript. The most peculiar feature of `dynamic` is that we are allowed to call any property or function with any parameters on it, hence giving us the dynamic typed feature of Javascript.\n- Pusher: Here we are declaring the Pusher class and the `Pusher.trigger()` function we will be using later on. The `[@JsModule](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/-js-module/index.html)` indicates that this class should be imported from the `pusher` library we added as a dependency earlier.\n\n\n\u003e External functions and class declarations are generally used to declare functions or objects that exists on the Javascript global object. \n\u003e \n\u003e External class declarations having the `@JsModule` are typically used to declare classes of external modules that need to be instantiated using the `new` keyword, as Kotlin doesn’t support the `new` keyword.\n\nNext, we initialize our server and Pusher configuration values.\n\n```\n    val express = require(\"express\")\n    val pusherConfig  = object {\n        val appId = \"YOUR_PUSHER_APP_ID\"\n        val key = \"YOUR_PUSHER_KEY\"\n        val secret = \"YOUR_PUSHER_SECRET\"\n        val cluster = \"YOUR_PUSHER_APP_CLUSTER\"\n        val encrypted = true\n    }\n    val clickChannel = \"click-channel\"\n    val clickEvent = \"click-event\"\n    var currentClickCount = 0\n```\n\nYou would need to update your `pusherConfig` object values with the keys you got from creating a Pusher application earlier. The `currentClickCount` variable will be used to keep track of the number of times a click has been recorded.\n\nNext, we implement the main function that would be run when our code is executed.\n\n```\n    fun main(args: Array\u003cString\u003e) {\n        val app = express()\n        val pusher = Pusher(pusherConfig)\n        \n        app.get(\"/counts\", { _, res -\u003e\n            res.json(ClickCount(currentClickCount))\n        })\n        app.post(\"/clicks\", { _, res -\u003e\n            currentClickCount++\n            // broadcast new ClickCount\n            pusher.trigger(clickChannel, clickEvent, ClickCount(currentClickCount))\n            res.status(200).send()\n        })\n        \n        app.listen(9999, {\n            println(\"Listening on port 9999\")\n        })\n    }\n```\n\nHere we initialize the `express` server and create a pusher object using the `pusherConfig` declared earlier. We then expose two endpoints:\n\n1. `GET /counts`: HTTP GET requests will be sent to this endpoint to get the current click counts recorded so far. The `currentClickCount` is then returned as a JSON object of `ClickCount`.\n2. `POST /clicks`: POST requests will be made to this endpoint to indicate that the button has been clicked. This will record the click count by incrementing the `currentClickCount` and then send a broadcast of the updated `currentClickCount` using pusher to all listeners of the `clickEvent` on the `clickChannel`.\n\nAnd lastly in the `main()` function, we expose the `express` server to listen on port `9999`.\n\nNow the server code is ready and we just need to compile to Javascript so we can run with node. To build, run the following Gradle command in the same directory containing the `build.gradle` file created earlier:\n\n```\n    gradle build\n```\n\nOn completion, this would generate a Javascript file in `build/app.js`. We just need to run this file using node like this:\n\n```\n    node build/app.js\n```\n\nAnd voila 👏, you should have the realtime server now running on port `9999`.\nThe whole code for this server can be found in this [repository](https://github.com/perfectmak/kotlin-realtime-counter-server-pusher).\n\nNow, let’s go on to build the Android application that would be interacting with this server.\n\n### 2. Building the Android application\n\nTo make it easy to get started with Kotlin for Android development, we will be using [Android Studio 3.0](https://developer.android.com/studio/preview/index.html) as this version has the Kotlin plugin bundled with it. If you are using an Android Studio version less than than 3.0 refer [here](https://kotlinlang.org/docs/tutorials/kotlin-android.html) for detailed instructions to get started.\n\nSo launch your Android Studio 3.0 IDE and create a new project. You can give the project any name but for this tutorial we will name the project ‘Click Counter’. Also ensure that you check the `Include Kotlin Support` option as shown in the image below:\n\n\n![counter-kotlin-create-project](//images.contentful.com/1es3ne0caaid/5IRj10lAooKuQwYyIkUimo/26aac60bbc03e75fa57277ce3b07bf23/counter-kotlin-create-project.png)\n\n\nClick on `Next` several times and then `Finish` and the Android project will be created and setup.\n\nAfter the project has finished building, open up your app module’s `build.gradle` file and add the following to the `dependencies` section:\n\n```\n    apply plugin: 'com.android.application'\n    apply plugin: 'kotlin-android'\n    apply plugin: 'kotlin-android-extensions'\n    \n    android {\n      ...\n    }\n    \n    dependencies {\n      ... \n      implementation \"org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version\"\n         \n      implementation 'com.pusher:pusher-java-client:1.5.0'\n      implementation 'com.squareup.okhttp3:okhttp:3.8.0'\n      implementation 'com.google.code.gson:gson:2.8.0'\n    }\n```\n\n\u003e If you are using an Android Studio version earlier than 3.0, you should replace `implementation` with `compile`. `implementation` was introduced with Gradle 3.0 and `compile` is now being deprecated. You can read more about these changes [here](https://docs.gradle.org/current/userguide/java_library_plugin.html#sec:java_library_separation).\n\u003e \n\u003e Also ensure the applied ‘kotlin-android-extensions’ plugin is added to the `build.gradle` file if you are using an Android Studio version earlier than 3.0\n\nNext, open up your AndroidManifest.xml file and add the Internet permission like so:\n\n```\n    \u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        package=\"pusher.com.clickcounter\"\u003e\n        \n        \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n    \n        \u003capplication\n            ...\u003e\n            ...\n        \u003c/application\u003e\n    \n    \u003c/manifest\u003e\n```\n\nNext, let us design the interface of our application. The application would have a single activity which contains a single button and text view showing the current number of times the button has been clicked. So open your `activity_main.xml` layout file and update it with the following code:\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.design.widget.CoordinatorLayout\n        android:id=\"@+id/rootLayout\"\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\"pusher.com.clickcounter.MainActivity\"\u003e\n        \u003candroid.support.constraint.ConstraintLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\u003e\n    \n            \u003cTextView\n                android:id=\"@+id/descriptionText\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginTop=\"55dp\"\n                android:text=\"Click to show some love\"\n                app:layout_constraintEnd_toEndOf=\"parent\"\n                app:layout_constraintStart_toStartOf=\"parent\"\n                app:layout_constraintTop_toTopOf=\"parent\" /\u003e\n    \n            \u003candroid.support.design.widget.FloatingActionButton\n                android:id=\"@+id/clickButton\"\n                android:layout_width=\"50dp\"\n                android:layout_height=\"50dp\"\n                android:layout_marginTop=\"15dp\"\n                android:src=\"@mipmap/heart\"\n                app:fabSize=\"auto\"\n                app:layout_constraintEnd_toEndOf=\"parent\"\n                app:layout_constraintStart_toStartOf=\"parent\"\n                app:layout_constraintTop_toBottomOf=\"@+id/descriptionText\"/\u003e\n    \n            \u003cTextView\n                android:id=\"@+id/textView\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"27dp\"\n                android:layout_marginEnd=\"8dp\"\n                android:layout_marginStart=\"8dp\"\n                android:layout_marginTop=\"55dp\"\n                android:text=\"Number of clicks so far is:\"\n                android:textSize=\"21sp\"\n                app:layout_constraintEnd_toEndOf=\"parent\"\n                app:layout_constraintStart_toStartOf=\"parent\"\n                app:layout_constraintTop_toBottomOf=\"@+id/clickButton\" /\u003e\n    \n            \u003cTextView\n                android:id=\"@+id/countTextView\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginEnd=\"8dp\"\n                android:layout_marginStart=\"8dp\"\n                android:layout_marginTop=\"8dp\"\n                android:text=\"loading...\"\n                android:textSize=\"30sp\"\n                android:textStyle=\"bold\"\n                app:layout_constraintEnd_toEndOf=\"parent\"\n                app:layout_constraintStart_toStartOf=\"parent\"\n                app:layout_constraintTop_toBottomOf=\"@+id/textView\" /\u003e\n        \u003c/android.support.constraint.ConstraintLayout\u003e\n    \u003c/android.support.design.widget.CoordinatorLayout\u003e\n```\n\nThe layout is pretty straight forward, things to note are the `FloatingActionButton` with id `clickButton` and the `countTextView` to display the current click count.\n\nNow, create a new Kotlin class named `ClickCount` inside the `com.pusher.clickcounter` and copy the following into the file:\n\n```\n    package pusher.com.clickcounter\n    \n    data class ClickCount(val count: Int)\n```\n\nNext, open the `MainActivity.kt` class and lets write the code that ties all the functionality together. Inside this file, start by defining some configuration constants and initializing some required variables.\n\n```\n    package com.pusher.clickcounter\n    \n    ...\n    \n    class MainActivity : AppCompatActivity() {\n      companion object {\n          const val SERVER_URL = \"http://NODE_JS_SERVER_ENDPOINT\"\n          const val PUSHER_API_KEY = \"PUSHER_API_KEY\"\n          const val PUSHER_CLUSTER = \"PUSHER_APP_CLUSTER\"\n          const val CLICK_CHANNEL = \"click-channel\"\n          const val CLICK_EVENT = \"click-event\"\n      }\n    \n      val pusherOptions = PusherOptions().setCluster(PUSHER_CLUSTER)\n      val pusher = Pusher(PUSHER_API_KEY, pusherOptions)\n      val httpClient = OkHttpClient()\n      \n      ...  \n    }\n```\n\nNote that you would have to set the `SERVER_URL` to the actual url where your realtime server is running. Also, update the `PUSHER_API_KEY` and `PUSHER_CLUSTER` values to your Pusher applications credentials.\n\nNext, the `onCreate()` method should look like this:\n\n```\n    package com.pusher.clickcounter\n    \n    ...\n    import kotlinx.android.synthetic.main.activity_main.*\n    ...\n    \n    class MainActivity : AppCompatActivity() {\n      ...\n      \n      override fun onCreate(savedInstanceState: Bundle?) {\n          super.onCreate(savedInstanceState)\n          setContentView(R.layout.activity_main)\n      \n          fetchCurrentClickCount()\n          connectToRealtimeUpdates()\n          clickButton.setOnClickListener { postClick() }\n      }\n      \n      ...  \n    }\n```\n\nFirst, we fetch the current click count by invoking the `fetchCurrentClickCount()` method. Next, we connect to get realtime updates of when the click count changes. Finally we attach an `onClickListener` to the `clickButton` button.\n\n\u003e We are able to get a reference to the `clickButton` button directly without having to use `findViewById()` because of the [Kotlin Android Extensions](https://kotlinlang.org/docs/tutorials/android-plugin.html) plugin we applied to this project in the `build.gradle` file.\n\nNow let us explore the contents of the `fetchCurrentClickCount()`, `connectToRealtimeUpdates()` and `postClick()` functions respectively.\n\n#### The fetchCurrentClickCount() method\n\nThis method makes a GET request to the servers `/counts` endpoint and updates the `countTextView`'s text with the count gotten from the servers response. \n\n```\n    private fun fetchCurrentClickCount() {\n      val getClickCountRequest = Request.Builder().url(\"$SERVER_URL/counts\").build()\n    \n      httpClient.newCall(getClickCountRequest)\n        .enqueue(object: Callback {\n          override fun onResponse(call: Call?, response: Response?) {\n            response?.body()?.also { body -\u003e\n              val clickCount = Gson().fromJson(body.string(), ClickCount::class.java)\n              runOnUiThread { countTextView.text = clickCount.count.toString() }\n            }\n          }\n          \n          override fun onFailure(call: Call?, e: IOException?) {\n            runOnUiThread {\n              showError(\"Network error loading current count\", \"Retry\") {\n                fetchCurrentClickCount()\n                dismiss()\n              }\n            }\n          }\n        })\n    }\n```\n\nIf an error occurs while making the request, an error message will be displayed using the `showError()` function:\n\n```\n    private fun showError(msg: String, action: String, callback: Snackbar.(View) -\u003e Unit) {\n        val errorSnackbar = Snackbar.make(rootLayout, msg, Snackbar.LENGTH_INDEFINITE)\n        errorSnackbar.setAction(action) {\n            callback(errorSnackbar, it)\n        }\n        errorSnackbar.show()\n    }\n```\n\nThe `showError()` function displays a Snackbar containing the `msg` passed in and an `action` button. When the action button is clicked, the `callback` is invoked.\n\n\n\u003e Notice the type of the `callback` function is an [extension function](https://kotlinlang.org/docs/reference/extensions.html) on Snackbar ( i.e. `Snackbar.(View) → Unit` ). This makes it easy for the calling code to have access the Snackbar instance without explicitly passing a reference to the `callback`.\n\n\n#### The connectToRealtimeUpdates() method\n\nThe `connectToRealtimeUpdates()` method subscribes to the Pusher `CLICK_CHANNEL` and binds an event listener to  `CLICK_EVENT`' events on the channel.\n\n```\n    private fun connectToRealtimeUpdates() {\n      val pusherChannel = pusher.subscribe(CLICK_CHANNEL)\n      pusherChannel.bind(CLICK_EVENT) { _, _, data -\u003e\n        val clickCount = Gson().fromJson(data, ClickCount::class.java)\n        runOnUiThread { countTextView.text = clickCount.count.toString() }\n      }\n    }\n```\n\nThe event listener deserializes the `data` into a `ClickCount` object using `Gson` and then updates the `countTextView`'s text with the count provided.\n\n\n#### The postClick() method\n\nThe `postClick()` method is invoked when the `clickButton` is tapped. It sends a `POST` request to the servers `/clicks` endpoint.\n\n```\n    private fun postClick() {\n      val emptyBody = RequestBody.create(null, \"\")\n      val postClickRequest = Request.Builder().url(\"$SERVER_URL/clicks\").post(emptyBody)\n                              .build()\n    \n      httpClient.newCall(postClickRequest)\n        .enqueue(object: Callback {\n          override fun onResponse(call: Call?, response: Response?) { }\n          \n          override fun onFailure(call: Call?, e: IOException?) {\n            runOnUiThread {\n                showError(\"Network error sending click\",\"Retry\") {\n                    postClick()\n                    dismiss()\n                }\n            }\n          }\n        })\n    }\n```\n\nIf an error occurs while posting the click event, a error Snackbar is displayed via the `showError()` function.\n\nAnd finally, in the activity we connect and disconnect pusher in the `onResume()` and `onPause()` lifecycle methods respectively.\n\n```\n    class MainActivity : AppCompatActivity() {\n      ...\n      \n      override fun onResume() {\n        super.onResume()\n        pusher.connect()\n      }\n      \n      override fun onPause() {\n        pusher.disconnect()\n        super.onPause()\n      }\n    }\n```\n\nThere you have it. The realtime counter Android application is now ready. \nYou can find the complete code for the Android application [here](https://github.com/perfectmak/kotlin-realtime-counter-pusher).\n\n\n## Testing it out\n\nTo test it out, ensure that the realtime server we built earlier is running and the Android application’s `SERVER_URL` is updated accordingly.\n\nNow, run the application on multiple devices. You would notice that as you click on the button, the count increases in realtime across all the devices.\n\n\n## Conclusion\n\nIt has been a long post, but we were able to see how Pusher can be used to build a realtime counter. We have also seen how we can use Kotlin’s super powers to supercharge our application.\n\nSome additional things that can be done to improve this application include:\n\n- Sharing similar Kotlin code between the server and Android application. For example, the `ClickCount` class can be moved out to a separate module and shared between the server and Android applications. Link to a sample project that achieved this can be found below.\n- Changing the data type for the counter from `Int` to something like `BigInteger` to handle larger counts.\n- Persisting the `currentClickCount` to a database. Note that this may give rise to some other issues that need consideration such as atomically incrementing the click count to avoid race conditions.\n\nLet me know in the comments below if you have any questions or suggestions to improve this tutorial. I’ll love to hear your thoughts. Cheers!\n\n## Further Reading\n- [Getting Started with Kotlin and Javascript](https://kotlinlang.org/docs/tutorials/javascript/getting-started-gradle/getting-started-with-gradle.html)\n- [Getting Started with Android and Kotlin](https://kotlinlang.org/docs/tutorials/kotlin-android.html)\n- [Kotlin Android Extensions](https://kotlinlang.org/docs/tutorials/android-plugin.html)\n- [Sharing Kotlin Code across Platforms](https://github.com/wojta/hello-kotlin)","metaTitle":"Build a realtime counter using Kotlin","metaDescription":"In this tutorial, find out how you can build a realtime click counter leveraging from the power of Kotlin."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1FfldHkHIAiSc6YuOEuak0","type":"Entry","createdAt":"2018-02-27T12:10:01.081Z","updatedAt":"2020-06-19T14:27:48.741Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build live notifications for Android","url":"live-notifications-android","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4oX8JhZUI0oIgmUKyQAGUe","type":"Entry","createdAt":"2018-02-15T18:07:40.087Z","updatedAt":"2018-02-15T18:07:40.087Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Zan Markan","url":"zan-markan","email":"zan@pusher.com","twitter":"https://twitter.com/zmarkan","github":"https://github.com/zmarkan","guestWriter":false}}],"projectRepo":"https://github.com/pusher/LiveCryptocurrencyNotifications","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1hvzJaMiAkEQOq088wwo4O","type":"Entry","createdAt":"2018-02-12T14:50:04.128Z","updatedAt":"2018-02-26T12:31:15.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Java","url":"java","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4kOTcNAC12gwWEyE6MimMY","type":"Entry","createdAt":"2018-02-12T15:08:28.581Z","updatedAt":"2018-02-26T12:31:12.766Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Trading","url":"trading","type":"use case"}}],"reviewDate":"2017-08-02","description":"Build live notifications that show the movement of the price of Bitcoin, Ether, or your favourite cryptocurrency on Android.\n","prerequisite":"A basic understanding of Android and JavaScript is needed to follow this tutorial.","content":"I was fascinated at how the Guardian Media Lab covered the US presidential election last fall. They created what they call a _live notification_. It's a persistent notification that stays in the drawer, and can change each time it receives new data.\n\nThey used it to indicate which candidate was winning, and by how many delegates. You can read more about it and how they created it [on their Medium blog](https://medium.com/the-guardian-mobile-innovation-lab/building-the-guardians-live-elections-notifications-87bafbcf510).\n\nToday I will show you how to add something similar to your apps. In this concrete example, we'll be building a notification that shows the movement of the price of BitCoin, Ether, or your favourite cryptocurrency.\n\nThe end product will look similar to this:\n\n![live-notifications-android-example](//images.contentful.com/1es3ne0caaid/6KDV6VLrvGye6sCGGiw4Qq/3a4c84481a2fe4eee463e5f115ae74ec/live-notifications-android-example.png)\n\nThe technologies we will be using are:\n\n- Android app as the primary user interface\n- Firebase Cloud Messaging (FCM) as delivery mechanism for Push notifications\n- Pusher Push Notifications service to interact with FCM\n- Node.JS for our server component that will orchestrate sending Push notifications\n- Cryptocurrency APIs:\n   - Bitstamp for raw data,\n   - and BitcoinCharts for the charts in image format\n\nThis tutorial assumes you're familiar with the basics of Android and JavaScript/Node.js, and that you have accounts on Pusher and Firebase. If not, I'll wait. Chop, chop.\n\n## Setup\n\nThere's a few things we'll do to make it work:\n\n- Set up the server component that sends the pushes at a regular interval\n- Add Glide library for loading images 🛫\n- Implement a custom `FirebaseMessagingService` 🚀\n- Create the View for displaying the notification 👀\n- Tie everything together 🎁\n\n### Sending the notification\n\nFCM allows us to specify 2 types of payloads - `notification` and `data`. They differ in how a push notification is handled when the application is not in the foreground.\n\nUsing the `notification` payload requires less work as Android will automatically show the notification if a push is received when the application is not currently in the foreground.\n\nThe `data` payload gives us more freedom in showing the notification and allows us to style it to our liking. That is the one we will use. You can read more about their differences on [FCM documentation](https://firebase.google.com/docs/cloud-messaging/concept-options).\n\nThe `data` payload takes any combination of primitive key/values. On the device we'll get them as an Android `Bundle` object using `remoteMessage.getData()`.\n\nOur sample bundle could look like this:\n\n```\nlet payload = {\n  graphUrl: \"http://www.example.com/path/to/graph.png\",\n  currentPrice: \"2387.88\",\n  openPrice: \"2371.22\",\n  currencyPair: \"BTCUSD\"\n}\n```\n\nAs I mentioned, we will get the data from two sources - the current price data from [Bitstamp's API](https://www.bitstamp.net/api/), as well as an image of the current price chart - from [BitcoinCharts](https://bitcoincharts.com/charts/bitstampUSD#rg1zig15-minztgMzm1g10zm2g25zv).\n\nThe current ticker value can be found [here](https://www.bitstamp.net/api/v2/ticker_hour/btcusd/).\n\nTo get the image from BitcoinCharts we'll need to be a bit clever and inspect the element with the image in our browser to get its URL. With the interval set to 15 minutes the chart's URL looks like this:\n\n![live-notifications-bitcoin-graph](//images.contentful.com/1es3ne0caaid/4ISBUZfTVKCyS8O2MEsKmc/7bde1bab44882b6efdb29677372b4562/live-notifications-bitcoin-graph.png)\n\nTo get the latest price data we can use the `sync-request` Node library. Making the request synchronously is fine as we are making them on an one-by-one basis.\n\n```\nconst request = require('sync-request');\nlet btcprice = JSON.parse(request('GET', 'https://www.bitstamp.net/api/v2/ticker_hour/btcusd/').getBody('utf8'));\nlet currentPrice = btcprice.last;\nlet openPrice = btcprice.open;\n```\n\nNow we need to send this as a Push to FCM, using the `data` payload.\n\n```\nconst Pusher = require('pusher');\nconst pusher = new Pusher({\n    appId: '[APP_ID]', //Get these from your Pusher dashboard\n    key: '[KEY]', //Get these from your Pusher dashboard\n    secret: '[SECRET]', //Get these from your Pusher dashboard\n});\n\npusher.notify(['BTCUSD'], {\n  fcm: {\n    data: payload //We defined the payload above\n  }\n});\n```\n\nLast thing to do is to make this run not in a one-off, but as a recurring cron job instead. To do that we can wrap our `notify` call in a function called `updatePrice` and use the `node-cron` library to schedule it:\n\n```\nconst cron = require('node-cron');\n\nconst updatePrice = () =\u003e {\n  let btcprice = JSON.parse(request('GET', 'https://www.bitstamp.net/api/v2/ticker_hour/btcusd/').getBody('utf8'));\n    let currentPrice = btcprice.last;\n    let openPrice = btcprice.open;\n    let currencyPair = \"BTCUSD\";\n\n    let payload = {\n      graphUrl: \"https://bitcoincharts.com/charts/chart.png?width=940\u0026m=bitstampUSD\u0026SubmitButton=Draw\u0026r=1\u0026i=15-min\u0026c=0\u0026s=\u0026e=\u0026Prev=\u0026Next=\u0026t=W\u0026b=\u0026a1=\u0026m1=10\u0026a2=\u0026m2=25\u0026x=0\u0026i1=\u0026i2=\u0026i3=\u0026i4=\u0026v=1\u0026cv=1\u0026ps=0\u0026l=0\u0026p=0\u0026\",\n      currentPrice: currentPrice,\n      openPrice: openPrice,\n      currencyPair: currencyPair\n    }\n\n    pusher.notify([currencyPair], {\n        fcm: {\n            data: {\n                graphUrl: graph_url_minute,\n                currentPrice: currentPrice,\n                openPrice: openPrice,\n                currencyPair: currencyPair,\n                counter: counter\n            }\n        }\n    });\n}\n\n//This will run every 15 minutes\nvar task = cron.schedule('*/15 * * * *', () =\u003e {\n    updatePrice();\n});\n```\n\nWe can then run it via the standard `node index.js` command.\n\n### Implementing the client\n\nIf you followed the Pusher quick start guide to setting up push notifications you'll have a simple app that subscribes to an interest. It assumes you use the built in `FCMMessagingService` and attach a listener using `nativePusher.setFCMListener(...)`. This is perfectly fine if you use the `notification` FCM payload, as the background pushes will be handled and displayed as notifications by the system. Notifications will also stack one after the other.\n\nFor live notifications that technique will not work unfortunately. We want more freedom in displaying the notifications and we want to reuse existing notifications to show updates.\nWe need to implement our own `FirebaseMessagingService`.\n\nIn the AndroidManifest replace the `FCMMessagingService` declaration with the new one (I called it `CryptoNotificationsService`):\n\n```\n\u003cservice android:name=\".CryptoNotificationsService\"\u003e\n    \u003cintent-filter\u003e\n        \u003caction android:name=\"com.google.firebase.MESSAGING_EVENT\"/\u003e\n    \u003c/intent-filter\u003e\n\u003c/service\u003e\n```\n\nWe also need to create its class to extend FirebaseMessagingService and implement its `onMessageReceived` method:\n\n```\npublic class CryptoNotificationsService extends FirebaseMessagingService {\n\n    @Override\n    public void onMessageReceived(RemoteMessage remoteMessage) {\n      ...\n    }\n}\n```\n\nThis is where we'll consume the data from the push payload, use it to build the notification object from it and show it in a custom view. We can get the data from the `remoteMessage` - the keys will be named the same as we named them in our FCM payload:\n\n```\nMap\u003cString, String\u003e data = remoteMessage.getData();\nString graphUrl = data.get(\"graph_url\");\nString currentPrice = data.get(\"currentPrice\");\nString openPrice = data.get(\"openPrice\");\nString currencyPair = data.get(\"currencyPair\");\n```\n\nIt's now time to display the data in a notification. \n\nWith the `data` payload we're handling the notification ourselves. Create a new `View` layout and make it include one `ImageView` for the chart, and two `TextViews` for the price data. Everything will be wrapped in a simple `RelativeLayout`. The layout size is limited to what Android notification tray limits - so `256dp`. I called it `notification_view`:\n\n```\n\u003cRelativeLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"256dp\"\u003e\n\n    \u003cImageView\n        android:id=\"@+id/chart_img\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"192dp\"\n        /\u003e\n\n    \u003cTextView\n        android:id=\"@+id/price_text\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:textSize=\"24sp\"\n        android:layout_below=\"@id/chart_img\"\n        android:layout_alignParentStart=\"true\"\n        android:padding=\"8dp\"\n        /\u003e\n\n    \u003cTextView\n        android:id=\"@+id/price_difference_text\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_below=\"@id/chart_img\"\n        android:textSize=\"24sp\"\n        android:padding=\"8dp\"\n        android:layout_alignParentEnd=\"true\"\n        /\u003e\n\n\u003c/RelativeLayout\u003e\n```\n\nTo inflate the layout in a notification context we'll use `RemoteViews`. This is a construct that allows us to create views outside of the parent process.\n\nBesides notifications, we can also use them to create the home screen Widgets.\n\nOn a `RemoteViews` object we can call methods such as `setTextViewText` and `setTextColor`\n\n```\nRemoteViews notificationViews = new RemoteViews(getApplicationContext().getPackageName(), R.layout.notification_view);\nnotificationViews.setTextViewText(R.id.price_text, String.format(\"%s: %s\", currencyPair, currentPrice));\n\n//Some simple view styling:\nString arrow = \"↑\";\nif(difference \u003e 0) {\n   notificationViews.setTextColor(R.id.price_difference_text, getColor(R.color.green));\n}\nelse if(difference == 0){\n    notificationViews.setTextColor(R.id.price_difference_text, getColor(R.color.black));\n    arrow = \"\";\n}\nelse{\n    notificationViews.setTextColor(R.id.price_difference_text, getColor(R.color.red));\n    arrow = \"↓\";\n}\nnotificationViews.setTextViewText(R.id.price_difference_text, String.format(\"%.2f %s\", difference, arrow));\n```       \n\nNow that our view is inflated with some data, we can create and display our `Notification` object. For that we'll use the `NotificationCompat.Builder`, and call `setCustomBitContentView` with the `RemoteViews` object from the previous step. Also take note of the notificationId. This ensures we will reuse the same notification each time a new push notification gives us new data. Finally we display the notification with the `notifiy` call on the `notificationManager` passing in the ID and notification object itself:\n\n```\nint notificationId = 1;\nNotification notification = new NotificationCompat.Builder(this)\n        .setSmallIcon(R.drawable.ic_show_chart_black_24px)\n        .setCustomBigContentView(notificationViews)\n        .build();\n\n\nNotificationManager notificationManager =\n        (NotificationManager) getSystemService(NOTIFICATION_SERVICE);\nnotificationManager.notify(notificationId, notification);\n```\n\nNow that we have created a notification with the data, we also need an image.\n\nGlide is an excellent tool for that. It allows loading images in a `RemoteViews` object. First, add the library to your `app/build.gradle` dependencies. At the time of writing, the latest version of Glide is `4.0.0-RC1`.\n\n```\ncompile 'com.github.bumptech.glide:glide:4.0.0-RC1'\nannotationProcessor 'com.github.bumptech.glide:compiler:4.0.0-RC1'\n```\n\nGlide has the concept of `NotificationTarget` where you specify the `RemoteViews` object and the view ID of an `ImageView` contained in it. It will then load the image using that target.\n\nWe'll load the image from a URL we get in the notification. Note that you might also need to call `clearDiskCache` to clear the image from the cache - in case it has the same hostname and path as the previous image. This will make it always fetch the new image.\n\nLast thing to note is that a call to `Glide.load` needs to happen on the main thread. As a push is received outside of the main thread we'll need to ensure we call it there.\nThat's where the `new Handler(Looper.getMainLooper()).post(...)` comes to play.\n\n```\nfinal NotificationTarget notificationTarget = new NotificationTarget(\n                this,\n                R.id.chart_img,\n                stockViews,\n                notification,\n                1);\n\nfinal Uri uri = Uri.parse(graphUrl);\nGlide.get(getApplicationContext()).clearDiskCache();\n\nnew Handler(Looper.getMainLooper()).post(new Runnable() {\n    @Override\n    public void run() {\n        Glide.get(getApplicationContext()).clearMemory();\n        Glide.with( getApplicationContext() )\n                .asBitmap()\n                .load(uri)\n                .into( notificationTarget );\n    }\n});\n```\n\nThe final thing to do is to subscribe to our interest with Pusher. We named it \"BTCUSD\".\n\n```\nfinal PusherAndroid pusher = new PusherAndroid(\"[PUSHER_KEY]\");\nPushNotificationRegistration nativePusher = pusher.nativePusher();\ntry {\n    nativePusher.registerFCM(this);\n    nativePusher.subscribe(\"BTCUSD\");\n} catch (ManifestValidator.InvalidManifestException e) {\n    e.printStackTrace();\n}\n```\n\nAnd we're done! After running the app we can see the notifications being shown on the devices and the BitCoin price updating every 15 minutes. 🎉","metaTitle":"Build live notifications for Android","metaDescription":"Build live notifications that show the movement of the price of BitCoin, Ether, or your favourite cryptocurrency on Android."}}],"defaultValue":"Android","queryType":"tag","pages":10,"route":"/tutorials","query":{"tag":"Android","page":"9"}}},"page":"/tutorials","query":{"tag":"Android","page":"9"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=Android&page=9 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:36:41 GMT -->
</html>