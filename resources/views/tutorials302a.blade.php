<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=Node.js&page=13 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:39:19 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">133</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels &amp; Node.js</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorials124f.html?tag=Node.js" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsd3fd.html?product=Beams&amp;tag=Node.js" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials0e67.html?product=Channels" class="css-a3lpv2 e137azhw1"><svg fill="#C223CE" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#C223CE" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Channels &amp; Node.js"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/secure-chat-javascript.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li></ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a secure chat web app with JavaScript and Auth0 </h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Build a chat application with Pusher, add user authentication with Auth0 Lock, and  manage users in the dashboard.</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/collaborative-text-editor-swift.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Collaboration</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a collaborative text editor using Swift</h3><p class="css-k12xad e5jrto45">Build a realtime collaborative text editor on iOS using Swift and Pusher.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/floating-hearts-swift.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a floating hearts effect in Swift</h3><p class="css-k12xad e5jrto45">Create a realtime social interactions like floating hearts for your iOS app using Swift</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/ride-hailing-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a ride hailing app with React Native</h3><p class="css-k12xad e5jrto45">In this tutorial, we will cover how to build a ride hailing app using React Native and Node.js.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/photo-feed-vuejs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a photo feed using Vue.js</h3><p class="css-k12xad e5jrto45">Build a photo feed with Vue.js, Node.js, Pusher, and Cloudinary.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-app-vuejs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime app with Vue.js</h3><p class="css-k12xad e5jrto45">Build a movie review application with Vue.js and add realtime functionality to it.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chart-vuejs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Realtime Chart</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime chart with Vue.js</h3><p class="css-k12xad e5jrto45">Build an expense and income tracker chart with realtime features. </p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/typing-indicator-swift.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a typing indicator in Swift</h3><p class="css-k12xad e5jrto45">Build a typing indicator for you iOS app using Swift, Node.js and Pusher for the realtime features.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-poll-nodejs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Live Polls<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live poll using Node.js</h3><p class="css-k12xad e5jrto45">Make a simple realtime poll app with Pusher and JavaScript in 5 steps.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials1720.html?product=Channels&amp;tag=Node.js&amp;page=12" class="css-5s6711 edg0byb1">Prev</a><a href="tutorialsc190.html?product=Channels&amp;tag=Node.js&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorialse586.html?product=Channels&amp;tag=Node.js&amp;page=11" class="css-za1ua3 edg0byb1">11</a><a href="tutorials1720.html?product=Channels&amp;tag=Node.js&amp;page=12" class="css-za1ua3 edg0byb1">12</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials302a.html?product=Channels&amp;tag=Node.js&amp;page=13" class="css-2wakph edg0byb1">13</a><a href="tutorialsfd10.html?product=Channels&amp;tag=Node.js&amp;page=14" class="css-5s6711 edg0byb1">14</a><a href="tutorials6b27.html?product=Channels&amp;tag=Node.js&amp;page=15" class="css-5s6711 edg0byb1">15</a><a href="tutorialsfd10.html?product=Channels&amp;tag=Node.js&amp;page=14" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":133,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"19Ko1PlZeuYwoee8gUsOqC","type":"Entry","createdAt":"2018-02-22T15:02:44.048Z","updatedAt":"2019-01-02T15:31:21.491Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a secure chat web app with JavaScript and Auth0 ","url":"secure-chat-javascript","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6AoCDqsg00U2ueqoaGSCWu","type":"Entry","createdAt":"2018-02-20T14:11:52.427Z","updatedAt":"2018-02-22T15:36:01.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Peter Mbanugo","url":"peter-mbanugo","email":"chuksgerrard@yahoo.com","twitter":"https://twitter.com/p_mbanugo","github":"https://github.com/pmbanugo","guestWriter":true}}],"projectRepo":"https://github.com/pmbanugo/Pusher-Auth0-ChatApp","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2017-08-22","description":"Build a chat application with Pusher, add user authentication with Auth0 Lock, and  manage users in the dashboard.","prerequisite":"A basic understanding of JavaScript is needed to follow this tutorial.","content":"Security is hard. Often when we build applications we want to allow only registered users to access the application. We want to be able to manage user accounts, see when they last logged in, be able to disable suspicious accounts and have a dashboard to view and manage all this data. We might also decide to support multi-factor authentication and social login. \n\nBut security isn’t just hard, it also takes a while to implement. What if there’s a service that could take away this part of the development hassle from you? Why spend weeks or months rolling your own auth?  This is where Auth0 shines. In this tutorial, I’ll show you how to build a chat application with Pusher, add user authentication with Auth0 Lock, and manage users from the Auth0 dashboard. \n\n## Introduction to Auth0\n\n[Auth0](https://auth0.com/) is an Authentication-as-a-Service (or Identity-as-a-Service) provider focused on encapsulating user authentication and management,  which provides an SDK to allow developers to easily add authentication and manage users. Its user management dashboard allows for breach detection and multifactor authentication, and Passwordless login.\n\n## Building the application\n\nWe will be building a chat application that’ll allow users to communicate with each other where everyone sees every other person’s messages. It’ll work similarly to how channels work in Slack: just one channel for everybody to communicate.\n\nHere’s what we’ll be building:\n\n![secure-chat-javascript-demo](//images.contentful.com/1es3ne0caaid/1FolhPXgDOQAoWIssIkMaM/e52a0c5cd19ce35fedbc71c48437400a/secure-chat-javascript-demo.gif)\n\n### Setting up the backend\nWe’ll start by building the backend which will facilitate receiving and broadcasting chat messages, serving static files, and also setting up Auth0 and Pusher. \n\nFirst, you’ll need to signup for a Pusher and Auth0 account. Go to [pusher.com](https://pusher.com/) and [auth0.com](https://auth0.com) and sign up for an account. To use Pusher API we have to signup and create a Pusher app from the dashboard. We can create as many applications as we want and each one will get an application id and secret key which we’ll use to initialise a Pusher instance on client or server side code. \n\n### Create a new Pusher account\nTo create a new Pusher app, click the **Your apps** side menu, then click the **Create a new app** button below the drawer. This brings up the setup wizard.\n\n1. Enter a name for the application. In this case I’ll call it “chat”.\n2. Select a cluster.\n3. Select the option “Create app for multiple environments” if you want to have different instances for development, staging and production.\n4. Select **Vanilla JS** as the frontend and **NodeJS** as the backend.\n5. Complete the process by clicking `Create App` button to set up your app instance.\n\n![secure-chat-javascript-create-app](//images.contentful.com/1es3ne0caaid/2zeiLGobV2S0c20ka4MeM6/2b0d977350ce32db5e6e9bcd76bd28a5/secure-chat-javascript-create-app.png)\n\nSince we’re building our backend in Node using Express, let’s initialise a new Node app and install the needed dependencies. Run the following command:\n\n1. **npm init** and select the default options\n2. **npm i --save body-parser express pusher** to install express and the Pusher node package\n\nAdd a new file called `server.js` which will contain logic to authenticate the Pusher client and also render the static files we’ll be adding later. This file will contain the content below:\n\n```\n    var express = require('express');\n    var bodyParser = require('body-parser');\n    var Pusher = require('pusher');\n    \n    var app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    var pusher = new Pusher({ appId: APP_ID, key: APP_KEY, secret:  APP_SECRET, cluster: eu });\n    \n    app.post('/pusher/auth', function(req, res) {\n      var socketId = req.body.socket_id;\n      var channel = req.body.channel_name;\n      var auth = pusher.authenticate(socketId, channel);\n      res.send(auth);\n    });\n    \n    app.post('/message', function(req, res) {\n      var message = req.body.message;\n      var name = req.body.name;\n      pusher.trigger( 'private-chat', 'message-added', { message, name });\n      res.sendStatus(200);\n    });\n    \n    app.get('/',function(req,res){      \n         res.sendFile('/public/index.html', {root: __dirname });\n    });\n    \n    app.use(express.static(__dirname + '/public'));\n    \n    var port = process.env.PORT || 5000;\n    app.listen(port, function () {\n      console.log(`app listening on port ${port}!`)\n    });\n```\n\nWe instantiate Pusher by passing in an object that contains the details of our app ID and secret key, which can be found on the **App Keys** tab in your Pusher dashboard. Pusher also provides a mechanism for authenticating users to a channel at the point of subscription. To do this, we expose an endpoint on the server that will validate the request and respond with a success or failure. This endpoint will be called by Pusher client libraries and can be named anything. We used the default name for this endpoint on Pusher, which is `/pusher/auth`. The line `var auth = pusher.authenticate(socketId, channel);` authenticates the client with Pusher and returns an authentication code to the calling client. \n\nTo allow this file to run when we start npm, we update **package.json** with the following value:\n\n```\n    \"scripts\": {\n        \"start\": \"node server.js\",\n        \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\"\n      }\n```\n\n### Create an Auth0 client\nTo create an Auth0 client\n\n1. Select  **Clients** from the side menu.\n2. On the new page, click the **Create Client** button\n3. Enter a name for the app and select **Single Page App** as an option\n4. Click the **Create** button to create the client.\n\n\n![secure-chat-javascript-auth0-clients](//images.contentful.com/1es3ne0caaid/6bWbdlVChiCQGYkiGAcieQ/773cfaec3f0713c33b78472b4aced418/secure-chat-javascript-auth0-clients.png)\n\n\nAn Auth0 client provides us with Client Id and Secret which we’ll use to interact with Auth0 from the code. On the settings tab, we can see the Name, Client Id, Secret, Client Type and many more. I want to enable CORS for my domain http://localhost:5000, set the log out URL and the URL to redirect to after the user has been authenticated with Auth0. Update the following settings with **http://localhost:5000**\n\n1. Allowed Callback URLs\n2. Allowed Logout URLs\n3. Allowed Origins (CORS)\n\n### Building the frontend\nWith the backend all good to go, we build the web page that will facilitate messaging. Create a folder named **public** which will contain the html and javascript file. Create two new files **style.css and** **index.html** with the following content:\n\n```\n**style.css** \n\n    @import url(\"http://netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css\");\n    .chat\n    {\n        list-style: none;\n        margin: 0;\n        padding: 0;\n    }\n    .chat li\n    {\n        margin-bottom: 10px;\n        padding-bottom: 5px;\n        border-bottom: 1px dotted #B3A9A9;\n    }\n    .chat li.left .chat-body\n    {\n        margin-left: 60px;\n    }\n    .chat li.right .chat-body\n    {\n        margin-right: 60px;\n    }\n    \n    .chat li .chat-body p\n    {\n        margin: 0;\n        color: #777777;\n    }\n    .panel .slidedown .glyphicon, .chat .glyphicon\n    {\n        margin-right: 5px;\n    }\n    .body-panel\n    {\n        overflow-y: scroll;\n        height: 250px;\n    }\n    ::-webkit-scrollbar-track\n    {\n        -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);\n        background-color: #F5F5F5;\n    }\n    ::-webkit-scrollbar\n    {\n        width: 12px;\n        background-color: #F5F5F5;\n    }\n    ::-webkit-scrollbar-thumb\n    {\n        -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,.3);\n        background-color: #555;\n    }\n```\n\n```\n**index.html** \n\n    \u003c!-- template from http://bootsnipp.com/snippets/6eWd --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n        \u003c!-- Latest compiled and minified CSS --\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"\u003e\n        \u003c!-- Optional theme --\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css\" integrity=\"sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp\" crossorigin=\"anonymous\"\u003e\n        \u003cscript\n            src=\"https://code.jquery.com/jquery-2.2.4.min.js\"\n            integrity=\"sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44=\"\n            crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n        \u003c!-- Latest compiled and minified JavaScript --\u003e\n        \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n        \u003clink rel=\"stylesheet\" href=\"style.css\"\u003e\n        \u003cscript src=\"https://cdn.auth0.com/js/lock/10.18.0/lock.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"index.js\"\u003e\u003c/script\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row form-group\"\u003e\n            \u003cdiv class=\"col-xs-12 col-md-offset-2 col-md-8 col-lg-8 col-lg-offset-2\"\u003e\n                \u003cdiv class=\"panel panel-primary\"\u003e\n                    \u003cdiv class=\"panel-heading\"\u003e\n                        \u003cspan class=\"glyphicon glyphicon-comment\"\u003e\u003c/span\u003e \u003cspan id=\"username\"\u003e\u003c/span\u003e\n                        \u003cdiv class=\"btn-group pull-right\"\u003e\n                            \u003cbutton type=\"button\" class=\"btn btn-default btn-xs dropdown-toggle\" data-toggle=\"dropdown\"\u003e\n                                \u003cspan class=\"glyphicon glyphicon-chevron-down\"\u003e\u003c/span\u003e\n                            \u003c/button\u003e\n                            \u003cul class=\"dropdown-menu slidedown\"\u003e\n                                \u003cli\u003e\u003ca\u003e\u003cspan class=\"glyphicon glyphicon-refresh\"\u003e\n                                \u003c/span\u003eRefresh\u003c/a\u003e\u003c/li\u003e\n                                \u003cli\u003e\u003ca\u003e\u003cspan class=\"glyphicon glyphicon-ok-sign\"\u003e\n                                \u003c/span\u003eAvailable\u003c/a\u003e\u003c/li\u003e\n                                \u003cli\u003e\u003ca\u003e\u003cspan class=\"glyphicon glyphicon-remove\"\u003e\n                                \u003c/span\u003eBusy\u003c/a\u003e\u003c/li\u003e\n                                \u003cli\u003e\u003ca\u003e\u003cspan class=\"glyphicon glyphicon-time\"\u003e\u003c/span\u003e\n                                    Away\u003c/a\u003e\u003c/li\u003e\n                                \u003cli class=\"divider\"\u003e\u003c/li\u003e\n                                \u003cli\u003e\u003ca id=\"logout\"\u003e\u003cspan class=\"glyphicon glyphicon-off\"\u003e\u003c/span\u003e\n                                    Sign Out\u003c/a\u003e\u003c/li\u003e\n                            \u003c/ul\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"panel-body body-panel\"\u003e\n                        \u003cul class=\"chat\"\u003e\n                            \n                        \u003c/ul\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"panel-footer clearfix\"\u003e\n                        \u003ctextarea id=\"message\" class=\"form-control\" rows=\"3\"\u003e\u003c/textarea\u003e\n                        \u003cspan class=\"col-lg-6 col-lg-offset-3 col-md-6 col-md-offset-3 col-xs-12\" style=\"margin-top: 10px\"\u003e\n                            \u003cbutton class=\"btn btn-warning btn-lg btn-block\" id=\"btn-chat\"\u003eSend\u003c/button\u003e\n                        \u003c/span\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \u003cscript id=\"new-message\" type=\"text/template\"\u003e\n        \u003cli id=\"{{id}}\" class=\"right clearfix\"\u003e\n            \u003cdiv class=\"chat-body clearfix\"\u003e\n                \u003cdiv class=\"header\"\u003e\n                    \u003csmall class=\"text-muted\"\u003e{{name}}\u003c/small\u003e\n                \u003c/div\u003e\n                \u003cp\u003e\n                    {{body}}\n                \u003c/p\u003e\n            \u003c/div\u003e\n        \u003c/li\u003e\n    \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThis file uses template from [bootsnip](http://bootsnipp.com/snippets/6eWd) and also includes a script reference to Auth0 Lock `\u003cscript src=\"https://cdn.auth0.com/js/lock/10.18.0/lock.min.js\"\u003e\u003c/script\u003e`. [Lock](https://auth0.com/docs/libraries#lock-login-signup-widgets) is  a drop-in authentication widget that provides a standard set of behaviours required for  and a customisable user interface. It provides a simple way to integrate with Auth0 with very minimal configuration. \n\nWe want to allow users to sign in when they enter the application and be able to send messages once they’re authenticated. Add a new file **index.js** with the following content:\n\n```\n    $(document).ready(function(){\n        // Initiating our Auth0Lock\n        let lock = new Auth0Lock(\n            'CLIENT_ID',\n            'CLIENT_DOMAIN',//example: lotus.auth0.com\n            {\n                auth: {\n                    params: {\n                        scope: 'openid profile'\n                    }   \n                },\n                autoclose: true,\n                closable: false,\n                rememberLastLogin: true\n            }\n        );\n    \n        let profile = JSON.parse(localStorage.getItem('profile'));\n        let isAuthenticated = localStorage.getItem('isAuthenticated');\n    \n        function updateValues(userProfile, authStatus) {\n            profile = userProfile;\n            isAuthenticated = authStatus;\n        }\n        \n        if(!isAuthenticated \u0026\u0026 !window.location.hash){\n            lock.show();//show Lock widget\n        }\n    \n        // Listening for the authenticated event\n        lock.on(\"authenticated\", function(authResult) {\n            // Use the token in authResult to getUserInfo() and save it to localStorage\n            lock.getUserInfo(authResult.accessToken, function(error, profile) {\n                if (error) {\n                    // Handle error\n                    return;\n                }\n                \n                localStorage.setItem('accessToken', authResult.accessToken);\n                localStorage.setItem('profile', JSON.stringify(profile));\n                localStorage.setItem('isAuthenticated', true);\n                updateValues(profile, true);\n                $(\"#username\").html(profile.name);\n            });\n        });\n    });\n```\n\nWe initialise Lock by passing it the Client Id of the app, your user domain which starts with your username followed by `.auth0.com` or `.{YOUR_SELECTED_REGION}.auth0.com` e.g `lotus.eu.auth0.com`. The widget is configurable and we can send in configuration options like *closable*, *autoClose*, and *auth*. Within the *auth* option we tell it to return the `openid`  and `profile` claims. \n\nWe check if the user is authenticated and show the widget when they’re not. Once the user is authenticated, Lock emits the `authenticated` event which we’ve subscribed to. When it’s raised, we store the user profile and other credentials to localStorage and set the user’s name to be displayed on the page. Once the user is authenticated, we want to connect to Pusher and send messages across. Update index.js with the following code: \n\n```\n    if(!isAuthenticated \u0026\u0026 !window.location.hash){\n        lock.show();\n    }\n    else{\n        \n        // Enable pusher logging - don't include this in production\n        Pusher.logToConsole = true;\n    \n        var pusher = new Pusher('APP_SECRET', {\n            cluster: 'e.g eu',\n            encrypted: false\n        });\n    \n        var channel = pusher.subscribe('private-chat');\n        channel.bind('message-added', onMessageAdded); \n    }\n    \n    function onMessageAdded(data) {\n        let template = $(\"#new-message\").html();\n        template = template.replace(\"{{body}}\", data.message);\n        template = template.replace(\"{{name}}\", data.name);\n    \n        $(\".chat\").append(template);\n    }\n```\n\nPusher is initialised with the **APP_SECRET** and **CLUSTER** which you can get from the app dashboard on Pusher. We subscribe to a channel called `private-chat`. Pusher has 3 types of channels: Public, Private and Presence channel. Private and Presence channels let your server control access to the data you are broadcasting. Presence channels go further to force subscribers to register user information when subscribing. Private channels are named starting with `private-` and authenticated in the server when subscribing. \n\nAnd finally we want to send the message to the user when they click send and also log them out when they select signout. Update **index.js** with the code below\n\n```\n    $('#btn-chat').click(function(){\n        const message = $(\"#message\").val();\n        $(\"#message\").val(\"\");\n            //send message\n        $.post( \"http://localhost:5000/message\", { message, name: profile.name } );\n    }); \n    \n    $(\"#logout\").click((e) =\u003e {\n        e.preventDefault();\n        logout();\n    });\n    \n    function logout(){\n        localStorage.clear();\n        isAuthenticated = false;\n        lock.logout({ \n            returnTo: \"http://localhost:5000\" \n        });\n    }\n```\n\nWhen the user clicks the send button, we take the message and put it in an object with the user’s profile name and send it to the `/message` endpoint on the server. When the logout button is clicked, it calls the logout function which clears the data stored in localStorage and call `lock.logout()` which logs the user out on Auth0 and redirects them back to our website. With all these additions, index.js should have the following content:\n\n```\n    $(document).ready(function(){\n        // Initiating our Auth0Lock\n        let lock = new Auth0Lock(\n            'CLIENT_ID',\n            'CLIENT_DOMAIN',\n            {\n                auth: {\n                    params: {\n                        scope: 'openid profile'\n                    }   \n                },\n                autoclose: true,\n                closable: false,\n                rememberLastLogin: true\n            }\n        );\n    \n        // Listening for the authenticated event\n        lock.on(\"authenticated\", function(authResult) {\n            // Use the token in authResult to getUserInfo() and save it to localStorage\n            lock.getUserInfo(authResult.accessToken, function(error, profile) {\n                if (error) {\n                    // Handle error\n                    console.log(error);\n                    return;\n                }\n                \n                localStorage.setItem('accessToken', authResult.accessToken);\n                localStorage.setItem('profile', JSON.stringify(profile));\n                localStorage.setItem('isAuthenticated', true);\n                updateAuthenticationValues(profile, true);\n                $(\"#username\").html(profile.name);\n            });\n        });\n    \n        let profile = JSON.parse(localStorage.getItem('profile'));\n        let isAuthenticated = localStorage.getItem('isAuthenticated');\n    \n        function updateAuthenticationValues(userProfile, authStatus) {\n            profile = userProfile;\n            isAuthenticated = authStatus;\n        }\n    \n        $(\"#logout\").click((e) =\u003e {\n            e.preventDefault();\n            logout();\n        });\n    \n        function logout(){\n            localStorage.clear();\n            isAuthenticated = false;\n            lock.logout({ \n                returnTo: \"http://localhost:5000\" \n            });\n        }\n        \n        function onMessageAdded(data) {\n            let template = $(\"#new-message\").html();\n            template = template.replace(\"{{body}}\", data.message);\n            template = template.replace(\"{{name}}\", data.name);\n    \n            $(\".chat\").append(template);\n        }\n    \n        if(!isAuthenticated \u0026\u0026 !window.location.hash){\n            lock.show();\n        }\n        else{\n            if(profile){\n                $(\"#username\").html(profile.name);\n            }\n            \n            // Enable pusher logging - don't include this in production\n            Pusher.logToConsole = true;\n    \n            var pusher = new Pusher('APP_SECRET', {\n                cluster: 'eu',\n                encrypted: false\n            });\n    \n            var channel = pusher.subscribe('private-chat');\n            channel.bind('message-added', onMessageAdded);\n    \n            $('#btn-chat').click(function(){\n                const message = $(\"#message\").val();\n                $(\"#message\").val(\"\");\n                 //send message\n                $.post( \"http://localhost:5000/message\", { message, name: profile.name } );\n            });  \n        }\n    });\n```\n\nTo test the app, run `npm start` on the terminal and open `http://localhost:5000` on two separate browsers. Here’s a run through of it:\n\n![secure-chat-javascript-demo](//images.contentful.com/1es3ne0caaid/1FolhPXgDOQAoWIssIkMaM/e52a0c5cd19ce35fedbc71c48437400a/secure-chat-javascript-demo.gif)\n\n## Wrap\n\nThis is an app to show how you can use Pusher to send messages in real-time and secure the channels, add user authentication and account management with Auth0, and easily integrate to Auth0 using Auth0 Lock. On your auth0 [dashboard](https://manage.auth0.com/#/) you can see the total number of users, logins and new signups. \n\n![secure-chat-javascript-stats](//images.contentful.com/1es3ne0caaid/4PRw4w6XgsGgOKqWG6qmYw/a040fac7f88b2deac878accf0e11e816/secure-chat-javascript-stats.png)\n\n![secure-chat-javascript-login-signups](//images.contentful.com/1es3ne0caaid/57ctsrk83YaWCYIQWQK0A6/11807e0d8e92009d4d0bbfda1cf5aaae/secure-chat-javascript-login-signups.png)\n\nYou can also see all your users when you click on the **Users** side menu.  On this page you can see the list of your users and their mode of login. \n\n![secure-chat-javascript-users](//images.contentful.com/1es3ne0caaid/66fytSfiy4soG26mqGKWy8/093174b5645bb84f428b9539b497638b/secure-chat-javascript-users.png)\n\nSelecting a user takes you to a more detailed page where you can take various actions on the account, for example,  blocking an account or sending a verification email. \n\n![secure-chat-javascript-users-details](//images.contentful.com/1es3ne0caaid/4LmCUeA3YAKEiI8gKOGaiW/ae6351dcbefb810250cc3f9e7c408e82/secure-chat-javascript-users-details.png)\n\nAlso on Pusher, you can go to your application dashboard, under the **Stats**, where you’ll see statistics concerning your application, such as connection frequency and how many messages were sent through that app. The combination of these two technologies makes it faster and easier to build real-time secured applications.","metaTitle":"Build a secure chat web app with JavaScript and Auth0 ","metaDescription":"Build a secure chat web application with Vanilla JavaScript, Node.js, Auth0 and Pusher. Create realtime features with Pusher, user authentication with Auth0 Lock, and manage users in the dashboard."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mER83XhYhEyKo0e0ScA4S","type":"Entry","createdAt":"2018-02-27T12:26:19.116Z","updatedAt":"2018-02-27T12:26:19.116Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a collaborative text editor using Swift","url":"collaborative-text-editor-swift","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/realtime-collaborative-text-editor","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-08-16","description":"Build a realtime collaborative text editor on iOS using Swift and Pusher.","prerequisite":"A basic understanding of Swift and Node.js is needed to follow this tutorial.","content":"Text editors are increasingly popular these days, whether embedded in a website comment form, or as a notepad, there are many forms of text editors. In this post, we are not only going to learn how to build a beautiful text editor mobile app in iOS, we are also going to learn how to make it possible to collaborate on a note in realtime using Pusher. Please note, however, that to keep the application simple, the article will not cover concurrent edits, thus only one person can edit at the same time while others watch.\n\nThe application will work by triggering an event when some text is entered. This event will be sent to Pusher and then picked up by the collaborator’s device and updated automatically. Here is a screen recording of how it would work:\n\n![collaborative-text-editor-swift-demo](//images.contentful.com/1es3ne0caaid/54Tr5OQYJOiusKc6u8QEsE/2eb738867ffe2cd186433a7bbfc62588/collaborative-text-editor-swift-demo.gif)\n\nTo follow along in this tutorial, you will need the following:\n\n1. **Cocoapods**, to install run `gem install cocoapods` on your machine\n2. **Xcode**\n3. A **Pusher application** - you can create a free account and application [here](https://pusher.com)\n4. Some knowledge of the **Swift** language\n5. **NodeJS**\n\n## Getting started with our iOS application in Xcode\n\nLaunch Xcode and create a new project. We are calling ours **Collabo**. After following the set up wizard, and with the workspace open, close Xcode and then `cd` to the root of your project and run the command `pod init`. This should generate a `Podfile` for you. Change the contents of the `Podfile`:\n\n\n```\n    # Uncomment the next line to define a global platform for your project\n    platform :ios, '9.0'\n    \n    target 'textcollabo' do\n      # Comment the next line if you're not using Swift and don't want to use dynamic frameworks\n      use_frameworks!\n    \n      # Pods for anonchat\n      pod 'Alamofire'\n      pod 'PusherSwift'\n    end\n```\n\nNow run the command `pod install` so the Cocoapods package manager can pull in the necessary dependencies. When this is complete, close Xcode (if open) and then open the `.xcworkspace` file that is in the root of your project folder.\n\n\n## Designing the views for our iOS application\n\nWe are going to create some views for our iOS application and these will be the backbone where we will hook all the logic into. Using the Xcode story board, make your views look a little like the screenshots below.\n\nThis is the **LaunchScreen.storyboard** file. We have just designed something simple with no functionality at all.\n\n![collaborative-text-editor-swift-launch-screen](//images.contentful.com/1es3ne0caaid/16PdfyN2Z6oEa6E6gsiy8G/e141cca33b1f4a80175b86e232cf4620/collaborative-text-editor-swift-launch-screen.png)\n\nThe next storyboard we will design is the **Main.storyboard** and, as the name implies, this is the main storyboard. This is where we have all the important views that are attached to some logic.\n\n![collaborative-text-editor-swift-app-flow](//images.contentful.com/1es3ne0caaid/4oPd9JprTaCUeYcYQwsY2q/ad9d60625b7b4a809027986d2bfd6216/collaborative-text-editor-swift-app-flow.png)\n\nHere we have 3 views. The first view is designed to look exactly like the launch screen, with the exception of a button that we have linked to open up the second view. The second view is the Navigation controller, this is attached to a third view which is a `ViewController`. We have set the third view as the root controller to our Navigation Controller.\n\nIn the third view, we have a `UITextView` that is editable, placed in the view, and also a label that is supposed to be a character counter. This is the place where we will increment the characters as the user is typing text into the text view.\n\n\n## Coding the iOS collaborative text editor application\n\nNow that we have successfully created the views required for the application to load, the next thing we will do is start coding the logic for the application.\n\nCreate a new cocoa class file and name it `TextEditorViewController` and link it to the third view in the `Main.storyboard` file. The `TextViewController` should also adopt the `UITextViewDelegate`. Now, you can `ctrl+drag` the `UITextView` and also `ctrl+drag` the `UILabel` in the `Main.storyboard` file to the `TextEditorViewController` class.\n\nAlso, you should import the `PusherSwift` and `AlamoFire` libraries to the `TextViewController`. You should have something close to this after you are done:\n\n```\n    import UIKit\n    import PusherSwift\n    import Alamofire\n    \n    class TextEditorViewController: UIViewController, UITextViewDelegate {\n        @IBOutlet weak var textView: UITextView!\n        @IBOutlet weak var charactersLabel: UILabel!\n    }\n```\n\nNow we need to add some properties that we will be needing sometime later in the controller.\n\n```\n    import UIKit\n    import PusherSwift\n    import Alamofire\n    \n    class TextEditorViewController: UIViewController, UITextViewDelegate {\n        static let API_ENDPOINT = \"http://localhost:4000\";\n    \n        @IBOutlet weak var textView: UITextView!\n        \n        @IBOutlet weak var charactersLabel: UILabel!\n        \n        var pusher : Pusher!\n        \n        var chillPill = true\n        \n        var placeHolderText = \"Start typing...\"\n        \n        var randomUuid : String = \"\"\n    }\n```\n\nNow we will break up the logic into three parts:\n\n1. View and Keyboard events\n2. UITextViewDelegate methods\n3. Handling Pusher events.\n\nThe first is **View and Keyboard events**. Open the `TextEditorViewController` and update it with the methods below:\n\n```\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        // Notification trigger\n        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow), name: NSNotification.Name.UIKeyboardWillShow, object: nil)\n        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide), name: NSNotification.Name.UIKeyboardWillHide, object: nil)\n    \n        // Gesture recognizer\n        view.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(tappedAwayFunction(_:))))\n    \n        // Set the controller as the textView delegate\n        textView.delegate = self\n        \n        // Set the device ID\n        randomUuid = UIDevice.current.identifierForVendor!.uuidString\n    \n        // Listen for changes from Pusher\n        listenForChanges()\n    }\n    \n    override func viewWillAppear(_ animated: Bool) {\n        super.viewWillAppear(animated)\n        \n        if self.textView.text == \"\" {\n            self.textView.text = placeHolderText\n            self.textView.textColor = UIColor.lightGray\n        }\n    }\n    \n    func keyboardWillShow(notification: NSNotification) {\n        if let keyboardSize = (notification.userInfo?[UIKeyboardFrameBeginUserInfoKey] as? NSValue)?.cgRectValue {\n            if self.charactersLabel.frame.origin.y == 1.0 {\n                self.charactersLabel.frame.origin.y -= keyboardSize.height\n            }\n        }\n    }\n    \n    func keyboardWillHide(notification: NSNotification) {\n        if let keyboardSize = (notification.userInfo?[UIKeyboardFrameBeginUserInfoKey] as? NSValue)?.cgRectValue {\n            if self.view.frame.origin.y != 1.0 {\n                self.charactersLabel.frame.origin.y += keyboardSize.height\n            }\n        }\n    }\n```\n\nIn the `viewDidLoad` method, we registered the keyboard functions so they respond to keyboard events, and we added gesture recognizers that will dismiss the keyboard when you tap outside the `UITextView`. We also set the `textView` delegate to the controller itself and finally, we called a function to listen for new updates (we will create this later).\n\nIn the `viewWillAppear` method, we simply hacked the `UITextView` into having a placeholder text, because, by default, the `UITextView` does not have that feature. Wonder why, Apple.\n\nIn the `keyboardWillShow` and `keyboardWillHide` functions, we made the character count label rise up with the keyboard and descend with it respectively. This will prevent the Keyboard from covering the label when it is active.\n\nThe second thing is **UITextViewDelegate methods**. Update the `TextEditorViewController` with the following:\n\n```\n    func textViewDidChange(_ textView: UITextView) {\n        charactersLabel.text = String(format: \"%i Characters\", textView.text.characters.count)\n        \n        if textView.text.characters.count \u003e= 2 {\n            sendToPusher(text: textView.text)\n        }\n    }\n    \n    func textViewShouldBeginEditing(_ textView: UITextView) -\u003e Bool {\n        self.textView.textColor = UIColor.black\n        \n        if self.textView.text == placeHolderText {\n            self.textView.text = \"\"\n        }\n        \n        return true\n    }\n    \n    func textViewDidEndEditing(_ textView: UITextView) {\n        if textView.text == \"\" {\n            self.textView.text = placeHolderText\n            self.textView.textColor = UIColor.lightGray\n        }\n    }\n    \n    func tappedAwayFunction(_ sender: UITapGestureRecognizer) {\n        textView.resignFirstResponder()\n    }\n```\n\nThe `textViewDidChange` method simply updates the character count label and also sends the changes to Pusher using our backend API (which we will create later in the article). The `textViewShouldBeginEditing` is gotten from the `UITextViewDelegate` and it is triggered when the text view is about to be edited. In here, we basically play around with the placeholder, same as the `textViewDidEndEditing`  method. Finally, in the `tappedAwayFunction` we define the event callback for the gesture we registered in the previous section. In the method, we basically dismiss the keyboard.\n\nThe last thing to do is **Handling Pusher events**. Update the controller with the following methods:\n\n```\n    func sendToPusher(text: String) {\n        let params: Parameters = [\"text\": text, \"from\": randomUuid]\n        \n        Alamofire.request(TextEditorViewController.API_ENDPOINT + \"/update_text\", method: .post, parameters: params).validate().responseJSON { response in\n            switch response.result {\n                \n            case .success:\n                print(\"Succeeded\")\n            case .failure(let error):\n                print(error)\n            }\n        }\n    }\n    \n    func listenForChanges() {\n        pusher = Pusher(key: \"PUSHER_KEY\", options: PusherClientOptions(\n            host: .cluster(\"PUSHER_CLUSTER\")\n        ))\n        \n        let channel = pusher.subscribe(\"collabo\")\n        let _ = channel.bind(eventName: \"text_update\", callback: { (data: Any?) -\u003e Void in\n            \n            if let data = data as? [String: AnyObject] {\n                let fromDeviceId = data[\"deviceId\"] as! String\n                \n                if fromDeviceId != self.randomUuid {\n                    let text = data[\"text\"] as! String\n                    self.textView.text = text\n                    self.charactersLabel.text = String(format: \"%i Characters\", text.characters.count)\n                }\n            }\n        })\n        \n        pusher.connect()\n    }\n```\n\nIn the `sendToPusher` method, we send the payload to our backend application using `AlamoFire`, which will, in turn, send it to Pusher. In the `listenForChanges` method, we then listen for changes to the text and, if there are any, we apply the changes to the text view.\n\n\u003e 💡 **Remember to replace the key and cluster with the actual value you have gotten from your Pusher dashboard**.\n\nIf you have followed the tutorial closely. then your `TextEditorViewController` should look something like this:\n\n```\n    import UIKit\n    import PusherSwift\n    import Alamofire\n    \n    class TextEditorViewController: UIViewController, UITextViewDelegate {\n        static let API_ENDPOINT = \"http://localhost:4000\";\n    \n        @IBOutlet weak var textView: UITextView!\n        \n        @IBOutlet weak var charactersLabel: UILabel!\n        \n        var pusher : Pusher!\n        \n        var chillPill = true\n        \n        var placeHolderText = \"Start typing...\"\n        \n        var randomUuid : String = \"\"\n        \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            \n            // Notification trigger\n            NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow), name: NSNotification.Name.UIKeyboardWillShow, object: nil)\n            NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide), name: NSNotification.Name.UIKeyboardWillHide, object: nil)\n    \n            // Gesture recognizer\n            view.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(tappedAwayFunction(_:))))\n    \n            // Set the controller as the textView delegate\n            textView.delegate = self\n            \n            // Set the device ID\n            randomUuid = UIDevice.current.identifierForVendor!.uuidString\n    \n            // Listen for changes from Pusher\n            listenForChanges()\n        }\n        \n        override func viewWillAppear(_ animated: Bool) {\n            super.viewWillAppear(animated)\n            \n            if self.textView.text == \"\" {\n                self.textView.text = placeHolderText\n                self.textView.textColor = UIColor.lightGray\n            }\n        }\n        \n        func keyboardWillShow(notification: NSNotification) {\n            if let keyboardSize = (notification.userInfo?[UIKeyboardFrameBeginUserInfoKey] as? NSValue)?.cgRectValue {\n                if self.charactersLabel.frame.origin.y == 1.0 {\n                    self.charactersLabel.frame.origin.y -= keyboardSize.height\n                }\n            }\n        }\n        \n        func keyboardWillHide(notification: NSNotification) {\n            if let keyboardSize = (notification.userInfo?[UIKeyboardFrameBeginUserInfoKey] as? NSValue)?.cgRectValue {\n                if self.view.frame.origin.y != 1.0 {\n                    self.charactersLabel.frame.origin.y += keyboardSize.height\n                }\n            }\n        }\n        \n        func textViewDidChange(_ textView: UITextView) {\n            charactersLabel.text = String(format: \"%i Characters\", textView.text.characters.count)\n            \n            if textView.text.characters.count \u003e= 2 {\n                sendToPusher(text: textView.text)\n            }\n        }\n        \n        func textViewShouldBeginEditing(_ textView: UITextView) -\u003e Bool {\n            self.textView.textColor = UIColor.black\n            \n            if self.textView.text == placeHolderText {\n                self.textView.text = \"\"\n            }\n            \n            return true\n        }\n        \n        func textViewDidEndEditing(_ textView: UITextView) {\n            if textView.text == \"\" {\n                self.textView.text = placeHolderText\n                self.textView.textColor = UIColor.lightGray\n            }\n        }\n        \n        \n        func tappedAwayFunction(_ sender: UITapGestureRecognizer) {\n            textView.resignFirstResponder()\n        }\n        \n        func sendToPusher(text: String) {\n            let params: Parameters = [\"text\": text, \"from\": randomUuid]\n            \n            Alamofire.request(TextEditorViewController.API_ENDPOINT + \"/update_text\", method: .post, parameters: params).validate().responseJSON { response in\n                switch response.result {\n                    \n                case .success:\n                    print(\"Succeeded\")\n                case .failure(let error):\n                    print(error)\n                }\n            }\n        }\n        \n        func listenForChanges() {\n            pusher = Pusher(key: \"PUSHER_KEY\", options: PusherClientOptions(\n                host: .cluster(\"PUSHER_CLUSTER\")\n            ))\n            \n            let channel = pusher.subscribe(\"collabo\")\n            let _ = channel.bind(eventName: \"text_update\", callback: { (data: Any?) -\u003e Void in\n                \n                if let data = data as? [String: AnyObject] {\n                    let fromDeviceId = data[\"deviceId\"] as! String\n                    \n                    if fromDeviceId != self.randomUuid {\n                        let text = data[\"text\"] as! String\n                        self.textView.text = text\n                        self.charactersLabel.text = String(format: \"%i Characters\", text.characters.count)\n                    }\n                }\n            })\n            \n            pusher.connect()\n        }\n    }\n```\n\nGreat! Now we need to make the backend of the application.\n\n## Building the backend Node application\n\nNow that we are done with the Swift part, we can focus on creating the NodeJS backend for the application. We are going to be using Express so that we can quickly get something running.\n\nCreate a directory for the web application and then create some new files:\n\nThe **index.js** file…\n\n```\n    let path = require('path');\n    let Pusher = require('pusher');\n    let express = require('express');\n    let bodyParser = require('body-parser');\n    let app = express();\n    let pusher = new Pusher(require('./config.js'));\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    app.post('/update_text', function(req, res){\n      var payload = {text: req.body.text, deviceId: req.body.from}\n      pusher.trigger('collabo', 'text_update', payload)\n      res.json({success: 200})\n    });\n    \n    app.use(function(req, res, next) {\n        var err = new Error('Not Found');\n        err.status = 404;\n        next(err);\n    });\n    \n    module.exports = app;\n    \n    app.listen(4000, function(){\n      console.log('App listening on port 4000!');\n    });\n```\n\nIn the JS file above, we are using Express to create a simple application and in the `/update_text` route, we simply receive the payload and pass it on to Pusher. Nothing complicated there.\n\nCreate a **package.json** file also:\n\n```\n    {\n      \"main\": \"index.js\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.17.2\",\n        \"express\": \"^4.15.3\",\n        \"path\": \"^0.12.7\",\n        \"pusher\": \"^1.5.1\"\n      }\n    }\n```\n\nThe **package.json** file is where we define all the NPM dependencies.\n\nThe last file to create is a **config.js** file. This is where we will define the configuration values for our Pusher application:\n\n```\n    module.exports = {\n      appId: 'PUSHER_ID',\n      key: 'PUSHER_KEY',\n      secret: 'PUSHER_SECRET',\n      cluster: 'PUSHER_CLUSTER',\n      encrypted: true\n    };\n```\n\n\u003e 💡 **Remember to replace the key and cluster with the actual value you have gotten from your Pusher dashboard**.\n\nNow run `npm install` on the directory and then `node index.js` once the npm installation is complete. You should see *App listening on port 4000!* message.\n\n![collaborative-text-editor-swift-nodejs](//images.contentful.com/1es3ne0caaid/Cjmh5pEqkgOo2oUY0yq6Y/bca46b60bcc64782d2536cd82a589d01/collaborative-text-editor-swift-nodejs.png)\n\n## Testing the application\n\nOnce you have your local node web server running, you will need to make some changes so your application can talk to the local web server. In the `info.plist` file, make the following changes:\n\n![collaborative-text-editor-swift-allow-arbitrary-loads](//images.contentful.com/1es3ne0caaid/5Rpga0iwScAecK8cS0cIoE/449a9c282d298b533b6b261110c8b507/collaborative-text-editor-swift-allow-arbitrary-loads.png)\n\nWith this change, you can build and run your application and it will talk directly with your local web application.\n\n\n## Conclusion\n\nIn this article, we have covered how to build a realtime collaborative text editor on iOS using Pusher. Hopefully, you have learnt a thing or two from following the tutorials. For practice, you can expand the statuses to support more instances.","metaTitle":"Build a collaborative text editor using Swift","metaDescription":"Build a realtime collaborative text editor on iOS using Swift and Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SkmKrcQxy0YGm8uqUYSE0","type":"Entry","createdAt":"2018-02-27T12:36:50.591Z","updatedAt":"2018-03-01T18:12:51.945Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a floating hearts effect in Swift","url":"floating-hearts-swift","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/Realtime-Floating-Hearts-iOS-Pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2017-08-07","description":"Create a realtime social interactions like floating hearts for your iOS app using Swift","prerequisite":"A basic understanding of Swift and Node.js is needed to follow this tutorial.","content":"If you are a user of applications like Periscope, Instagram and Facebook, then you may have noticed they have a feature in their live streams where anytime someone likes the live content, the ‘likes’ float on your screen. This article will show you how you can implement the realtime floating hearts feature on your iOS application using Swift and Pusher. \n\nHere is a screen recording of what we will be achieving in this tutorial using Swift and Pusher.\n\n![floating-hearts-swift-demo](//images.contentful.com/1es3ne0caaid/7yuRqr4Fc4MWQ2oUeooS6Y/42c37cc1c3036e2faf1571a79d8b9fd9/floating-hearts-swift-demo.gif)\n\nFrom the recording, you can see that when the like button is tapped, the likes float to the top and they are also replicated on another device viewing the video being played. \n\nNow, let's begin the journey.\n\n## Requirements\nTo follow along in this tutorial you will need the following things:\n\n- Knowledge of Swift and Xcode storyboards.\n- Xcode installed on your machine.\n- A Pusher application - you can create a free Pusher account [here](https://pusher.com).\n- Node.js and NPM installed on your machine.\n- Cocoapods installed on your machine - install it using Ruby by running: `gem install cocoapods`.\n\nHopefully, you have all the requirements checked off. Let’s get started.\n\n\n## Creating the floating hearts application in Xcode\n\nLaunch Xcode and in there create a new project. We are going to call the app **streamlove** (yes, it’s lame we know). When you are done with the initial setup, close Xcode and launch terminal. `cd` to the root directory of your application and run `pod init`. This will create a `Podfile`  in the root directory. Open it in your text editor and replace the code there with the following:\n\n```\n    platform :ios, '9.0'\n    target 'streamlove' do\n      use_frameworks!\n      pod 'PusherSwift', '~\u003e 4.0'\n      pod 'Alamofire', '~\u003e 4.4'\n    end \n```\n\nAfter that save and close the file and run the command `pod install`. This should start installing all the dependencies required for the application we are creating. Now open the `streamlove.xcworkspace` file in Xcode.\n\nThe next thing we need to do is design our applications storyboard. Open the `Main.storyboard` file. We are going to add some mock views because we do not really want to implement anything on them and they are just there for the aesthetics. The main things we will focus on are the button and the background video. After designing our storyboard, this is what we hope to have:\n\n\n![floating-hearts-swift-storyboard](//images.contentful.com/1es3ne0caaid/11wmWB3OJgGcMyeYow6Gsc/516599ff54eea378db9739a6e0c70b0f/floating-hearts-swift-storyboard.png)\n\n\nIn this storyboard, we have a button to the bottom right of the screen, and that button has an `@IBAction`  in the `ViewController` so you will need to `ctrl+drag` to make the connection between the button and the `ViewController`.\n\nThis should add the `@IBAction` to the `ViewController` as shown below:\n\n```\n    @IBAction func hearted(_ sender: Any) {\n        // This function will be fired every time the button is tapped!\n    }\n```\n\n## Creating a background looping video in iOS using Swift\n\nNext, we will create the video background that will just simulate a live stream (since creating an actual live stream falls far out of the scope of this article). Open the `ViewController` file and paste the following in it:\n\n```\n    import UIKit\n    import PusherSwift\n    import Alamofire\n    \n    class ViewController: VideoSplashViewController {\n    \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            loadVideoStreamSample()\n        }\n    \n        private func loadVideoStreamSample() {\n            let url = NSURL.fileURL(withPath: Bundle.main.path(forResource: \"video\", ofType: \"mp4\")!)\n            self.videoFrame = view.frame\n            self.fillMode = .resizeAspectFill\n            self.alwaysRepeat = true\n            self.sound = true\n            self.startTime = 0.0\n            self.duration = 10.0\n            self.alpha = 0.7\n            self.backgroundColor = UIColor.black\n            self.contentURL = url\n            self.restartForeground = true\n        }\n        \n        override var prefersStatusBarHidden: Bool {\n            return true\n        }  \n        \n        @IBAction func hearted(_ sender: Any) {\n            // This function will be called everytime the button is tapped!\n        }\n    }\n```\n\nIn the first line, we have imported the libraries we will need, but mostly later in the tutorial. Now, let us focus on the others. The `ViewController` extends a `VideoSplashViewController` that we have not yet created. In the `viewDidLoad` method we have called a method `loadVideoStreamSample` and in that method, we are basically loading a video and setting some parameters for the video. These parameters will be implemented in the `VideoSplashViewController`.\n\nNow for the `VideoSplashViewController`, we will be using a Swift library that is [available on Github](https://github.com/svtek/VideoSplashKit/). However, because the library does not support Swift 3, we will be picking out the files we need and converting them to support Swift 3. The first one is the [VideoSplashViewController](https://github.com/svtek/VideoSplashKit/blob/master/VideoSplashKit/Source/VideoSplashViewController.swift). Create a new file `VideoSplashViewController` that extends `UIViewController` and in there paste the following:\n\n```\n    import UIKit\n    import MediaPlayer\n    import AVKit\n    \n    public enum ScalingMode {\n        case resize\n        case resizeAspect\n        case resizeAspectFill\n    }\n    \n    public class VideoSplashViewController: UIViewController {\n        \n        private let moviePlayer = AVPlayerViewController()\n        private var moviePlayerSoundLevel: Float = 1.0\n        \n        public var videoFrame: CGRect = CGRect()\n        public var startTime: CGFloat = 0.0\n        public var duration: CGFloat = 0.0\n        public var backgroundColor = UIColor.black { didSet { view.backgroundColor = backgroundColor } }\n        public var contentURL: URL = URL(fileURLWithPath: \"\") { didSet { setMoviePlayer(url: contentURL) } }\n        public var sound: Bool = true { didSet { moviePlayerSoundLevel = sound ? 1 : 0 } }\n        public var alpha: CGFloat = 1 { didSet { moviePlayer.view.alpha = alpha } }\n        \n        public var alwaysRepeat: Bool = true {\n            \n            didSet {\n                \n                if alwaysRepeat {\n                    NotificationCenter.default.addObserver(forName:.AVPlayerItemDidPlayToEndTime, object:nil, queue:nil) { [weak self] (notification) in\n                        self?.playerItemDidReachEnd()\n                    }\n                    return\n                }\n                \n                if !alwaysRepeat {\n                    NotificationCenter.default.removeObserver(self, name:.AVPlayerItemDidPlayToEndTime, object: nil)\n                }\n            }\n        }\n        \n        public var fillMode: ScalingMode = .resizeAspectFill {\n            didSet {\n                switch fillMode {\n                case .resize:\n                    moviePlayer.videoGravity = AVLayerVideoGravityResize\n                case .resizeAspect:\n                    moviePlayer.videoGravity = AVLayerVideoGravityResizeAspect\n                case .resizeAspectFill:\n                    moviePlayer.videoGravity = AVLayerVideoGravityResizeAspectFill\n                }\n            }\n        }\n        \n        public var restartForeground: Bool = false {\n            didSet {\n                if restartForeground {\n                    NotificationCenter.default.addObserver(forName:.UIApplicationWillEnterForeground, object:nil, queue:nil) { [weak self] (notification) in\n                        self?.playerItemDidReachEnd()\n                    }\n                }\n            }\n        }\n        \n        override public func viewDidAppear(_ animated: Bool) {\n            super.viewDidAppear(animated)\n            moviePlayer.view.frame = videoFrame\n            moviePlayer.view.backgroundColor = self.backgroundColor;\n            moviePlayer.showsPlaybackControls = false\n            moviePlayer.view.isUserInteractionEnabled = false\n            view.addSubview(moviePlayer.view)\n            view.sendSubview(toBack: moviePlayer.view)\n        }\n        \n        private func setMoviePlayer(url: URL){\n            let videoCutter = VideoCutter()\n            videoCutter.cropVideoWithUrl(videoUrl: url, startTime: startTime, duration: duration) { [weak self] (videoPath, error) -\u003e Void in\n                guard let path = videoPath, let strongSelf = self else { return }\n                strongSelf.moviePlayer.player = AVPlayer(url: path)\n                strongSelf.moviePlayer.player?.addObserver(strongSelf, forKeyPath: \"status\", options: .new, context: nil)\n                strongSelf.moviePlayer.player?.play()\n                strongSelf.moviePlayer.player?.volume = strongSelf.moviePlayerSoundLevel\n            }\n        }\n        \n        public override func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) {\n            \n            guard let player = object as? AVPlayer else {\n                super.observeValue(forKeyPath: keyPath, of: object, change: change, context: context)\n                return\n            }\n            \n            if player.status == .readyToPlay {\n                movieReadyToPlay()\n            }\n        }\n        \n        deinit{\n            moviePlayer.player?.removeObserver(self, forKeyPath: \"status\")\n            NotificationCenter.default.removeObserver(self)\n        }\n        \n        // Override in subclass\n        public func movieReadyToPlay() { }\n        \n        func playerItemDidReachEnd() {\n            moviePlayer.player?.seek(to: kCMTimeZero)\n            moviePlayer.player?.play()\n        }\n        \n        func playVideo() {\n            moviePlayer.player?.play()\n        }\n        \n        func pauseVideo() {\n            moviePlayer.player?.pause()\n        }\n    }\n```\n\nNow create another file called `VideoCutter` that extends `NSObject` and paste in the following:\n\n```\n    import UIKit\n    import AVFoundation\n    \n    extension String {\n        var convert: NSString { return (self as NSString) }\n    }\n    \n    public class VideoCutter: NSObject {\n        \n        /**\n         Block based method for crop video url\n         \n         @param videoUrl Video url\n         @param startTime The starting point of the video segments\n         @param duration Total time, video length\n         \n         */\n        public func cropVideoWithUrl(videoUrl url: URL, startTime: CGFloat, duration: CGFloat, completion: ((_ videoPath:URL?, _ error: NSError?) -\u003e Void)?) {\n            \n            DispatchQueue.global().async {\n                \n                let asset = AVURLAsset(url: url, options: nil)\n                var outputPath = NSHomeDirectory()\n                let documentPaths = NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true)\n                if (documentPaths.count \u003e 0) {\n                    outputPath = documentPaths.first!\n                }\n                let fileManager = FileManager.default\n                \n                guard let exportSession = AVAssetExportSession(asset: asset, presetName: \"AVAssetExportPresetHighestQuality\") else { return }\n                let outputFilePath = outputPath.convert.appendingPathComponent(\"output.mp4\")\n                \n                if fileManager.fileExists(atPath: outputFilePath) {\n                    do {\n                        try fileManager.removeItem(atPath: outputFilePath)\n                    } catch let error {\n                        print(error)\n                    }\n                }\n                \n                do {\n                    try fileManager.createDirectory(atPath:outputPath, withIntermediateDirectories: true, attributes: nil) }\n                catch let error {\n                    print(error)\n                }\n                \n                let start = CMTimeMakeWithSeconds(Float64(startTime), 600)\n                let duration = CMTimeMakeWithSeconds(Float64(duration), 600)\n                let range = CMTimeRangeMake(start, duration)\n                let outputURL = URL(fileURLWithPath: outputFilePath)\n                exportSession.outputURL = outputURL\n                exportSession.timeRange = range\n                exportSession.shouldOptimizeForNetworkUse = true\n                exportSession.outputFileType = AVFileTypeMPEG4\n                exportSession.exportAsynchronously(completionHandler: {\n                    switch exportSession.status {\n                    case .completed:\n                        DispatchQueue.main.async { completion?(exportSession.outputURL, nil) }\n                    default:\n                        DispatchQueue.main.async { completion?(nil, nil) }\n                    }\n                })\n            }\n        }\n    }\n```\n\nIn the files above we just created, it basically helps you manage the video background and sets a video of your choosing as the background video and loops it forever. This can also be useful for application landing pages. However, we are just using it for a make-believe video stream.\n\n\n\u003e 💡 **If you are using a Swift version below 3, then you can use the source code as is in the repository, however, if you use Swift 3 or above you may need these modifications to make it work.**\n\nNow the last thing we need to do is add an mp4 file to our workspace. You can use any mp4 file you wish to use. Drop the video file `video.mp4` into the workspace and **make sure it is copied** and added to the application target.\n\nIf you build and preview your application now you should see the video looping in the background. Great.\n\n\n## Adding floating hearts to your iOS application\n\nNow that we have the video looping in the background, the next thing we will do is add the floating heart functionality to the application. Basically, every time someone clicks the heart button, a heart icon should float to the top and slowly disappear. \n\nOpen the `Main.storyboard` file and in the bottom right above the heart button, add a View with no background. This will be the viewport where the floating hearts will travel. You can make it a rectangle of about 250x350.\n\nNext, we will be using another [library from Github](https://github.com/ravenshore/iOS-Floaters) to add the floating hearts functionality to the application. The file we actually need is the [Floater.swift](https://github.com/ravenshore/iOS-Floaters/blob/master/floaters/Floater.swift) file. The library does not yet have any package manager way to install it so we will be copying the contents of the file and adding it to a file in our workspace. \n\nWe are building with Swift 3 so we need to make some modifications to the class, so copy and paste the code below if you are using Swift 3, and use as is if you are not. Create a new file `Floater.swift` and extend the `UIView` object. Paste this into the class:\n\n```\n    import UIKit\n    \n    @IBDesignable public class Floater: UIView {\n        \n        var image1: UIImage?\n        var image2: UIImage?\n        var image3: UIImage?\n        var image4: UIImage?\n        \n        var isAnimating: Bool = false\n        var views: [UIView]!\n        var duration: TimeInterval = 1.0\n        var duration1: TimeInterval = 2.0\n        var duration2: TimeInterval = 2.0\n        var floatieSize = CGSize(width: 50, height: 50)\n        var floatieDelay: Double = 10\n        var delay: Double = 10.0\n        var startingAlpha: CGFloat = 1.0\n        var endingAlpha: CGFloat = 0.0\n        var upwards: Bool = true\n        var remove: Bool = true\n        \n        @IBInspectable var removeAtEnd: Bool = true {\n            didSet {\n                remove = removeAtEnd\n            }\n        }\n        @IBInspectable var FloatingUp: Bool = true {\n            didSet {\n                upwards = FloatingUp\n            }\n        }\n        @IBInspectable var alphaAtStart: CGFloat = 1.0 {\n            didSet {\n                startingAlpha = alphaAtStart\n            }\n        }\n        @IBInspectable var alphaAtEnd: CGFloat = 0.0 {\n            didSet {\n                endingAlpha = alphaAtEnd\n            }\n        }\n        @IBInspectable var rotationSpeed: Double = 10 {\n            didSet {\n                duration2 = 20 / rotationSpeed\n            }\n        }\n        @IBInspectable var density: Double = 10 {\n            didSet {\n                floatieDelay = 1 / density\n            }\n        }\n        @IBInspectable var delayedStart: Double = 10 {\n            didSet {\n                delay = delayedStart\n            }\n        }\n        @IBInspectable var speedY: CGFloat = 10 {\n            didSet {\n                duration = Double(10/speedY)\n            }\n        }\n        @IBInspectable var speedX: CGFloat = 5 {\n            didSet {\n                duration1 = Double(10/speedX)\n            }\n        }\n        @IBInspectable var floatieWidth: CGFloat = 50 {\n            didSet {\n                floatieSize.width = floatieWidth\n            }\n        }\n        @IBInspectable var floatieHeight: CGFloat = 50 {\n            didSet {\n                floatieSize.height = floatieHeight\n            }\n        }\n        @IBInspectable var borderColor: UIColor = UIColor.clear {\n            didSet {\n                layer.borderColor = borderColor.cgColor\n            }\n        }\n        \n        @IBInspectable var borderWidth: CGFloat = 0 {\n            didSet {\n                layer.borderWidth = borderWidth\n            }\n        }\n        \n        @IBInspectable var cornerRadius: CGFloat = 0 {\n            didSet {\n                layer.cornerRadius = cornerRadius\n            }\n        }\n        \n        @IBInspectable var floaterImage1: UIImage? {\n            didSet {\n                image1 = floaterImage1\n            }\n        }\n        @IBInspectable var floaterImage2: UIImage? {\n            didSet {\n                image2 = floaterImage2\n            }\n        }\n        @IBInspectable var floaterImage3: UIImage? {\n            didSet {\n                image3 = floaterImage3\n            }\n        }\n        @IBInspectable var floaterImage4: UIImage? {\n            didSet {\n                image4 = floaterImage4\n            }\n        }\n        \n        override public func awakeFromNib() {\n            super.awakeFromNib()\n        }\n        \n        func startAnimation() {\n            print(\"Start Animating\")\n            isAnimating = true\n            views = []\n            var imagesArray = [UIImage?]()\n            var actualImages = [UIImage]()\n            let frameW = self.frame.width\n            let frameH = self.frame.height\n            var startingPoint: CGFloat!\n            var endingPoint: CGFloat!\n            if upwards {\n                startingPoint = frameH\n                endingPoint = floatieHeight*2\n            } else {\n                startingPoint = 0\n                endingPoint = frameH - floatieHeight*2\n            }\n            imagesArray += [image1, image2, image3, image4]\n            if !imagesArray.isEmpty {\n                for i in imagesArray {\n                    if i != nil {\n                        actualImages.append(i!)\n                    }\n                }\n            }\n            \n            let deadlineTime = DispatchTime.now() + .seconds(Int(self.delay * Double(NSEC_PER_SEC)))\n            \n            DispatchQueue.global().asyncAfter(deadline: deadlineTime, execute: {\n                var goToNext = true\n                while self.isAnimating {\n                    if goToNext {\n                        goToNext = false\n                        \n                        DispatchQueue.main.asyncAfter(deadline: .now()+0.3, execute: {\n                            let randomNumber = self.randomIntBetweenNumbers(firstNum:1, secondNum: 2)\n                            var randomRotation: CGFloat!\n                            if randomNumber == 1 {\n                                randomRotation = -1\n                            } else {\n                                randomRotation = 1\n                            }\n                            let randomX = self.randomFloatBetweenNumbers(firstNum: 0 + self.floatieSize.width/2, secondNum: self.frame.width - self.floatieSize.width/2)\n                            let floatieView = UIView(frame: CGRect(x: randomX, y: startingPoint, width: 50, height: 50))\n                            self.addSubview(floatieView)\n                            \n                            let floatie = UIImageView(frame: CGRect(x: 0, y: 0, width: self.floatieSize.width, height: self.floatieSize.height))\n                            \n                            if !actualImages.isEmpty {\n                                \n                                let randomImageIndex = (self.randomIntBetweenNumbers(firstNum: 1, secondNum: actualImages.count) - 1 )\n                                floatie.image = actualImages[randomImageIndex]\n                                floatie.center = CGPoint(x: 0, y: 0)\n                                floatie.backgroundColor = UIColor.clear\n                                floatie.layer.zPosition = 10\n                                floatie.alpha = self.startingAlpha\n                                \n                                floatieView.addSubview(floatie)\n                                var xChange: CGFloat!\n                                if randomX \u003c self.frame.width/2 {\n                                    xChange = randomX + self.randomFloatBetweenNumbers(firstNum: randomX, secondNum: frameW-randomX)\n                                } else {\n                                    xChange = self.randomFloatBetweenNumbers(firstNum: self.floatieSize.width*2, secondNum: randomX)\n                                }\n                                \n                                \n                                self.views.append(floatieView)\n                                UIView.animate(withDuration: self.duration, delay: 0,\n                                               options: [], animations: {\n                                                floatieView.center.y = endingPoint\n                                                floatie.alpha = self.endingAlpha\n                                                goToNext = false\n                                }, completion: {(value: Bool) in\n                                    if self.remove {\n                                        floatieView.removeFromSuperview()\n                                    }\n                                })\n                                UIView.animate(withDuration: self.duration1, delay: 0,\n                                               options: [.repeat, .autoreverse], animations: {\n                                                floatieView.center.x = xChange\n                                }, completion: nil)\n                                UIView.animate(withDuration: self.duration2, delay: 0, options: [.repeat, .autoreverse], animations: {                 floatieView.transform = CGAffineTransform(rotationAngle: CGFloat(M_PI_2)*randomRotation)\n                                }, completion: nil)\n                            }\n                        })\n                    }\n                }\n            })\n        }\n        \n        func stopAnimation() {\n            print(\"Stop Animating\")\n            views = []\n            isAnimating = false\n            if !views.isEmpty {\n                for i in views {\n                    i.removeFromSuperview()\n                }\n            }\n        }\n        \n        func randomFloatBetweenNumbers(firstNum: CGFloat, secondNum: CGFloat) -\u003e CGFloat{\n            return CGFloat(arc4random()) / CGFloat(UINT32_MAX) * abs(firstNum - secondNum) + min(firstNum, secondNum)\n        }\n        \n        func randomIntBetweenNumbers(firstNum: Int, secondNum: Int) -\u003e Int{\n            return firstNum + Int(arc4random_uniform(UInt32(secondNum - firstNum + 1)))\n        }\n    }\n```\n\nThe library simply creates a floating heart when the `startAnimation` method is called and stops it when the `stopAnimation` method is called. Now that the file is created, open your `Main.storyboard` file and add the `Floater.swift`  View to the floater view we created earlier. This should add some new options in the side bar. These options are due to `@IBDesignable` and `@IBInspectable` that were added to the `Floater.swift` class.\n\n\n\u003e 💡  `**IBDesignable**` **and** `**IBInspectable**` **, a way to create custom elements and the attributes. This can be directly added to the iOS Interface Builder.** [**Read more about IBDesignable and IBInspectable**](https://medium.com/@Anantha1992/ibdesignable-and-ibinspectable-in-swift-3-702d7dd00ca)**.**\n\nNow in the new options fields, add the following values:\n\n\n![floating-hearts-swift-floater-view](//images.contentful.com/1es3ne0caaid/DK4nH4QJNI6WGgMowSYC8/d94465731cb3045d8e86d9b3d7f68e48/floating-hearts-swift-floater-view.png)\n\n\nFor the floater image, add a 30x30 heart image to your workspace and then select it in the floater image section.\n\nNow open the `ViewController` and add the following methods:\n\n```\n    @IBOutlet weak var floaterView: Floater!\n    \n    private func startEndAnimation() {\n        floaterView.startAnimation()\n        DispatchQueue.main.asyncAfter(deadline: .now() + 1, execute: {\n            self.floaterView.stopAnimation()\n        })\n    }\n```\n\nNow call the `startEndAnimation` from the `hearted` method so it is invoked when the button is pressed. Make sure the `@IBOutlet floaterView` is linked to the view port that we created earlier in the article. Now, when you build and preview, you should see the heart floating every time the button is clicked.\n\n\n## Adding realtime functionality to our floating hearts using Pusher\n\nNow that we have successfully added the floating hearts, the next thing to do is add realtime functionality using Pusher. If you have not already, [create a Pusher account](https://pusher.com), create a new application and copy the credentials as you will need them.\n\nOpen the `ViewController`  and in there add the following:\n\n```\n    static let API_ENDPOINT = \"http://localhost:4000\";\n    \n    var pusher : Pusher!\n    \n    let deviceUuid : String = UIDevice.current.identifierForVendor!.uuidString\n    \n    private func listenForNewLikes() {\n        pusher = Pusher(key: \"PUSHER_KEY\", options: PusherClientOptions(host: .cluster(\"PUSHER_CLUSTER\")))\n        \n        let channel = pusher.subscribe(\"likes\")\n        let _ = channel.bind(eventName: \"like\", callback: { (data: Any?) -\u003e Void in\n            if let data = data as? [String: AnyObject] {\n                let uuid = data[\"uuid\"] as! String\n                \n                if uuid != self.deviceUuid {\n                    self.startEndAnimation()\n                }\n            }\n        })\n        pusher.connect()\n    }\n    \n    private func postLike() {\n        let params: Parameters = [\"uuid\": deviceUuid]\n        \n        Alamofire.request(ViewController.API_ENDPOINT + \"/like\", method: .post, parameters: params).validate().responseJSON { response in\n            switch response.result {\n                \n            case .success:\n                print(\"Liked\")\n            case .failure(let error):\n                print(error)\n            }\n        }\n    }\n```\n\nFirst, we define some class properties for storing the API endpoint base URL, the Pusher instance and the device UUID. The `listenForNewLikes` is where we define a listener that waits for events sent from Pusher and then fires a callback when it receives the event. We will be using that to trigger the floating hearts `startAndEndAnimation` method. The `postLike` method is where we use `AlamoFire` to hit an endpoint (we will create this next). The endpoint will be where we send “like” events to Pusher so they can be broadcast to other listeners on the channel.\n\nIf all is well, your `ViewController` should now look like this:\n\n```\n    import UIKit\n    import PusherSwift\n    import Alamofire\n    \n    class ViewController: VideoSplashViewController {\n        \n        @IBOutlet weak var floaterView: Floater!\n        \n        static let API_ENDPOINT = \"http://localhost:4000\";\n        \n        var pusher : Pusher!\n        \n        let deviceUuid : String = UIDevice.current.identifierForVendor!.uuidString\n        \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            loadVideoStreamSample()\n            listenForNewLikes()\n        }\n        \n        @IBAction func hearted(_ sender: Any) {\n            postLike()\n            startEndAnimation()\n        }\n        \n        private func startEndAnimation() {\n            floaterView.startAnimation()\n            DispatchQueue.main.asyncAfter(deadline: .now() + 1, execute: {\n                self.floaterView.stopAnimation()\n            })\n        }\n        \n        private func listenForNewLikes() {\n            pusher = Pusher(key: \"PUSHER_KEY\", options: PusherClientOptions(host: .cluster(\"PUSHER_CLUSTER\")))\n            \n            let channel = pusher.subscribe(\"likes\")\n            let _ = channel.bind(eventName: \"like\", callback: { (data: Any?) -\u003e Void in\n                if let data = data as? [String: AnyObject] {\n                    let uuid = data[\"uuid\"] as! String\n                    \n                    if uuid != self.deviceUuid {\n                        self.startEndAnimation()\n                    }\n                }\n            })\n            pusher.connect()\n        }\n        \n        private func postLike() {\n            let params: Parameters = [\"uuid\": deviceUuid]\n            \n            Alamofire.request(ViewController.API_ENDPOINT + \"/like\", method: .post, parameters: params).validate().responseJSON { response in\n                switch response.result {\n                    \n                case .success:\n                    print(\"Liked\")\n                case .failure(let error):\n                    print(error)\n                }\n            }\n        }\n        \n        private func loadVideoStreamSample() {\n            let url = NSURL.fileURL(withPath: Bundle.main.path(forResource: \"video\", ofType: \"mp4\")!)\n            self.videoFrame = view.frame\n            self.fillMode = .resizeAspectFill\n            self.alwaysRepeat = true\n            self.sound = true\n            self.startTime = 0.0\n            self.duration = 10.0\n            self.alpha = 0.7\n            self.backgroundColor = UIColor.black\n            self.contentURL = url\n            self.restartForeground = true\n        }\n        \n        override var prefersStatusBarHidden: Bool {\n            return true\n        }  \n    }\n```\n\n\u003e ⚠️  **You should replace the “PUSHER_CLUSTER” and “PUSHER_KEY” with the actual values gotten from your Pusher application dashboard.**\n\nThat should do it for the Xcode side of things. Now we need to create a backend application for our application. This backend app will just receive the payload from the application and send it to Pusher.\n\n\n## Creating the Node.js backend for our realtime floating hearts app\n\nCreate a directory for the web application and then create two new files:\n\nThe **index.js** file…\n\n```\n    let Pusher     = require('pusher');\n    let express    = require('express');\n    let app        = express();\n    let bodyParser = require('body-parser')\n    let pusher     = new Pusher(require('./config.js')['config']);\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    app.post('/like', (req, res, next) =\u003e {\n      let payload = {uuid: req.body.uuid}\n      pusher.trigger('likes', 'like', payload)\n      res.json({success: 200})\n    })\n    \n    app.get('/', (req, res) =\u003e {\n      res.json(\"It works!\");\n    });\n    \n    app.use((req, res, next) =\u003e {\n        let err = new Error('Not Found');\n        err.status = 404;\n        next(err);\n    });\n    \n    app.listen(4000, function() {\n        console.log('App listening on port 4000!')\n    });\n```\n\nThe `index.js` file also has one route where it receives messages from the iOS application and triggers the Pusher event which is picked up by the application. \n\nThe next file is the **packages.json** where we define the NPM dependencies:\n\n```\n    {\n      \"main\": \"index.js\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.16.0\",\n        \"express\": \"^4.14.1\",\n        \"pusher\": \"^1.5.1\"\n      }\n    }\n```\n\nFinally, we have the **config.js**  where we will put our Pusher configuration:\n\n```\n    module.exports = {\n        appId: 'PUSHER_ID',\n        key: 'PUSHER_KEY',\n        secret: 'PUSHER_SECRET',\n        cluster: 'PUSHER_CLUSTER',\n    };\n```\n\nNow run `npm install` on the directory and then `node index.js` once the npm installation is complete. You should see *App listening on port 4000!* message.\n\n\n## Testing our floating hearts application\n\nOnce you have your local node web server running, you will need to make some changes so your application can talk to the local web server. In the `info.plist` file, make the following changes:\n\n\n![floating-hearts-swift-allow-arbitrary-loads](//images.contentful.com/1es3ne0caaid/7K1HQwIDFm0kYOykE4OaYm/005559df4f1430b742d2b8530d86c151/floating-hearts-swift-allow-arbitrary-loads.png)\n\n\nWith this change, you can build and run your application and it will talk directly with your local web application.\n\n## Conclusion\n\nIn this article, we have been able to replicate the floating hearts feature that apps like Facebook, Instagram, Periscope etc have. You can use this as a base to expand the actual feature into a working application of your own.","metaTitle":"Build a floating hearts effect in Swift","metaDescription":" Build a realtime floating hearts feature on your iOS application using Swift and Pusher and create your own Periscope, Instagram and Facebook hearts feature."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4fnStfcnGMaGCokSCMYCiE","type":"Entry","createdAt":"2018-04-23T15:04:56.770Z","updatedAt":"2018-04-23T15:11:30.223Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a ride hailing app with React Native","url":"ride-hailing-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/grabClone","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2017-08-04","description":"In this tutorial, we will cover how to build a ride hailing app using React Native and Node.js.","prerequisite":"You will need the following installed on your machine: Android Studio, React Native and Genymotion. You will also need an Android device, and a Pusher account.","content":"In this tutorial, we’ll create a ride hailing app(similar to Uber or Lyft) with React Native and Pusher.\nReact Native will be used to create an Android app for both the driver and the passenger. Pusher will be used for realtime communication between the two.\n\n\n## App flow\n\nThe clone that we’re going to create will pretty much have the same flow as any ride hailing app out there: passenger books a ride → app looks for a driver → driver accepts the request → driver picks up passenger → driver drives to destination → passenger pays the driver.\n\n- The app determines the user’s location and shows it in a map (note: GPS needs to be enabled at this point). \n\n![ride-hailing-react-native-1](//images.contentful.com/1es3ne0caaid/3lGtmHhoQMswewIyQoukqm/f3b16bf63fb7b331383313ed0a5ed9a5/ride-booking-app-react-native-1.png)\n\n- From the passenger app, the user clicks on “Book a Ride”.\n\n- A modal will open that will allow the passenger to pick the place where they want to go.\n\n![ride-hailing-react-native-2](//images.contentful.com/1es3ne0caaid/1KPTnqIR3OYM6eeCEYOuW4/4da9d54c44eb0a27d4195aae876768bd/ride-booking-app-react-native-2.png)\n\n- The app asks the passenger to confirm their destination.\n\n![ride-hailing-react-native-3](//images.contentful.com/1es3ne0caaid/N5RnV9XN4GUIKa4IOOgYm/c19c3a3118153ec249932f014fe578d5/ride-booking-app-react-native-3.png)\n\n- Once confirmed, the app sends a request to the driver app to pick up the passenger. A loading animation is shown while the app is waiting for a driver to accept the request.\n\n![ride-hailing-react-native-4](//images.contentful.com/1es3ne0caaid/QU6AU3DDkkkcW0yKUkseC/3c3b49544f03aef98e51317555fe247f/ride-booking-app-react-native-4.png)\n\n- The driver app receives the request. From here, the driver can either accept or reject the request.\n\n![ride-hailing-react-native-5](//images.contentful.com/1es3ne0caaid/5M6ViDbHtCK0qE6mq62uKs/c1b43321e4f36230eaef99a7b3f2946f/ride-booking-app-react-native-5.png)\n\n- Once the driver accepts the request, the driver’s details are shown in the passenger app.\n\n![ride-hailing-react-native-6](//images.contentful.com/1es3ne0caaid/6I0sY1Xl0AyOC8IKkKUkgq/ecaebf16dafe573b6523388359c57f9f/ride-booking-app-react-native-6.png)\n\n- The passenger app shows the current location of the driver on the map.\n\n![ride-hailing-react-native-7](//images.contentful.com/1es3ne0caaid/5eG7JXP27YuWksCImsmyOS/dc5598ed883a6eb99cc63a9ed678cd85/ride-booking-app-react-native-7.png)\n\n- Once the driver is within 50 meters of the passenger’s location, they will see an alert saying that the driver is near.\n- Once the driver is within 20 meters of the passenger’s location, the driver app sends a message to the passenger app that the driver is almost there.\n\n![ride-hailing-react-native-8](//images.contentful.com/1es3ne0caaid/2ilAvtad84cSKGEE26u6Ei/70decc6ec70ca1f70f0a88f7673c9b2d/ride-booking-app-react-native-8.png)\n\n- After picking up the passenger, the driver drives to their destination.\n- Once the driver is within 20 meters of their destination, the driver app sends a message to the passenger app that they’re very near their destination. \n\n![ride-hailing-react-native-9](//images.contentful.com/1es3ne0caaid/tP606fyRcyswesYqCS4aM/c619165d0c92879fe2244fab574001cf/ride-booking-app-react-native-9.png)\n\nAt this point, the ride ends and the passenger can book another ride. The driver is also free to accept any incoming ride request.\n\n\n## Prerequisites\n\n\n- [**Pusher Account**](https://pusher.com/) - [signup for a Pusher account](https://dashboard.pusher.com/accounts/sign_up) or [login with your existing one](https://dashboard.pusher.com/accounts/sign_in). Once you’ve created an account, create a new app → select “React” for front-end technology → select “Node.js” for back-end technology. \n\n![ride-hailing-react-native-create-app](//images.contentful.com/1es3ne0caaid/2i8c2xGReUuykQI0wCEEiq/cb75380059f0a8e25cba07528338a212/ride-booking-app-react-native-create-app.png)\n\nNext, click on the “App Settings” tab and check “Enable client events”. This allows us to have the driver and passenger app directly communicate with each other. \n\n![ride-hailing-react-native-app-settings](//images.contentful.com/1es3ne0caaid/4LmOAz8kAggQymiU4cqIq4/821cb22fd4b30e416fa829bccb6009d3/ride-booking-app-react-native-app-settings.png)\n\nLast, click on the “App keys” and copy the credentials. If you’re worried about pricing, [the Pusher sandbox plan is pretty generous](https://dashboard.pusher.com/plans) so you can use it for free when testing the app.\n\n- [**Genymotion**](https://www.genymotion.com/fun-zone/) - for testing the driver app. We’re using this instead of the default Android emulator because it comes with a GPS simulation tool that allows us to search for a specific location and have it used as the location of the emulated device. It uses Google maps as the interface and you can move the marker as well. This allows us to simulate a moving vehicle. Once Genymotion is installed, you need to login to your account in order to add a device. For me I’ve installed Google Nexus 5x for testing. \n\n![ride-hailing-react-native-genymotion](//images.contentful.com/1es3ne0caaid/4B6XeSUkA8qSOkimswQsek/74dadbd979cc14bdb813b4a2a365a113/ride-booking-app-react-native-genymotion.png)\n\n- **Android Device** - this will be used for testing the passenger app. You need Android 6.0 or higher.\n\n![ride-hailing-react-native-sdk-platform](//images.contentful.com/1es3ne0caaid/2dUjpZ2rkoWowEwQoWYaqQ/1157ce5b341ba62c0e4577d982611d7c/ride-booking-app-react-native-sdk-platform.png)\n\nWhile you’re there, click on the “SDK Tools” and make sure that you also have the same tools installed as mine:\n\n![ride-hailing-react-native-sdk-tools](//images.contentful.com/1es3ne0caaid/1FuIv7YcUk8ogq0wceQe6q/eb517ca00c6fc8afe6dfd5ced731896b/ride-booking-app-react-native-sdk-tools.png)\n\n\n## Creating the Auth server\n\nFirst, let’s work on the auth server. This is required because we will be sending [client events](https://pusher.com/docs/client_api_guide/client_events) from the app, client events requires the Pusher channel to be private, and private channels have restricted access. This is where the auth server comes in. It serves as a way for Pusher to know if a user that’s trying to connect is indeed a registered user of the app.\n\nStart by installing the dependencies:\n\n```\n    npm install --save express body-parser pusher\n```\n\nNext, create a `server.js` file and add the following code:\n\n``` javascript\n    var express = require('express');\n    var bodyParser = require('body-parser');\n    var Pusher = require('pusher');\n    \n    var app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    var pusher = new Pusher({ // connect to pusher\n      appId: process.env.APP_ID, \n      key: process.env.APP_KEY, \n      secret:  process.env.APP_SECRET,\n      cluster: process.env.APP_CLUSTER, \n    });\n    \n    app.get('/', function(req, res){ // for testing if the server is running\n      res.send('all is well...');\n    });\n    \n    // for authenticating users\n    app.get(\"/pusher/auth\", function(req, res) {\n      var query = req.query;\n      var socketId = query.socket_id;\n      var channel = query.channel_name;\n      var callback = query.callback;\n    \n      var auth = JSON.stringify(pusher.authenticate(socketId, channel));\n      var cb = callback.replace(/\\\"/g,\"\") + \"(\" + auth + \");\";\n    \n      res.set({\n        \"Content-Type\": \"application/javascript\"\n      });\n    \n      res.send(cb);\n    });\n    \n    app.post('/pusher/auth', function(req, res) {\n      var socketId = req.body.socket_id;\n      var channel = req.body.channel_name;\n      var auth = pusher.authenticate(socketId, channel);\n      res.send(auth);\n    });\n    \n    var port = process.env.PORT || 5000;\n    app.listen(port);\n```\n\nI’m no longer going to go into detail what the code above does since its already explained in the docs for [Authenticating Users](https://pusher.com/docs/authenticating_users). \nTo keep things simple, I haven’t added the code to check if a user really exists in a database. You can do that in the `/pusher/auth`  endpoint by checking if a username exists. Here’s an example:\n\n``` javascript\n    var users = ['luz', 'vi', 'minda'];\n    var username = req.body.username;\n    \n    if(users.indexOf(username) !== -1){\n      var socketId = req.body.socket_id;\n      var channel = req.body.channel_name;\n      var auth = pusher.authenticate(socketId, channel);\n      res.send(auth);\n    }\n    \n    // otherwise: return error\n```\n\nDon’t forget to pass in the `username` when connecting to Pusher on the client-side later on.\n\nTry running the server once that’s done:\n\n```\n    node server.js\n```\n\nAccess `http://localhost:5000` on your browser to see if it works.\n\n\n## Deploying the Auth server\n\nSince Pusher will have to connect to the auth server, it needs to be accessible from the internet. \nYou can use [now.sh](https://zeit.co/now) to deploy the auth server. You can install it with the following command:\n\n```\n    npm install now\n```\n\nOnce installed, you can now navigate to the folder where you have the `server.js` file and execute `now`. You’ll be asked to enter your email and verify your account. \n\nOnce your account is verified, execute the following to add your Pusher app settings as environment variables to your now.sh account so you can use it from inside the server:\n\n\n``` javascript\n    now secret add pusher_app_id YOUR_PUSHER_APP_ID\n    now secret add pusher_app_key YOUR_PUSHER_APP_KEY\n    now secret add pusher_app_secret YOUR_PUSHER_APP_SECRET\n    now secret add pusher_app_cluster YOUR_PUSHER_APP_CLUSTER\n```\n\nNext, deploy the server while supplying the secret values that you’ve added:\n\n```\n    now -e APP_ID=@pusher_app_id -e APP_KEY=@pusher_app_key -e APP_SECRET=@pusher_app_secret APP_CLUSTER=@pusher_app_cluster\n```\n\nThis allows you to access your Pusher app settings from inside the server like so:\n\n``` javascript\n    process.env.APP_ID\n```\n\nThe deploy URL that now.sh returns is the URL that you’ll use later on to connect the app to the auth server.\n\n\n## Creating the driver app\n\n\nFirst, create a new React Native app:\n\n``` javascript\n    react-native init grabDriver\n```\n\n### Installing the dependencies\n\nOnce that’s done, navigate inside the `grabDriver`  directory and install the libraries that we’ll need. This includes [pusher-js](https://github.com/pusher/pusher-js) for working with Pusher, [React Native Maps](https://github.com/airbnb/react-native-maps/) for displaying a map, and [React Native Geocoding](https://github.com/marlove/react-native-geocoding) for reverse-geocoding coordinates to the actual name of a place: \n\n```\n    npm install --save pusher-js react-native-maps react-native-geocoding\n```\n\nOnce all the libraries are installed, React Native Maps needs some additional steps in order for it to work. First is linking the project resources:\n\n``` javascript\n    react-native link react-native-maps\n```\n\nNext, you need to create a Google project, get an API key from the [Google developer console](https://console.developers.google.com/apis/credentials), and enable the [Google Maps Android API](https://console.developers.google.com/apis/api/maps-android-backend.googleapis.com/overview) and [Google Maps Geocoding API](https://console.developers.google.com/apis/api/geocoding-backend.googleapis.com/overview). After that, open the `android\\app\\src\\main\\AndroidManifest.xml` file in your project directory. Under the `\u003capplication\u003e` tag, add a `\u003cmeta-data\u003e` containing the server API key.\n\n``` javascript\n    \u003capplication\u003e\n        \u003cmeta-data\n          android:name=\"com.google.android.geo.API_KEY\"\n          android:value=\"YOUR GOOGLE SERVER API KEY\"/\u003e\n    \u003c/application\u003e\n```\n\nWhile you’re there, add the following below the default permissions. This allows us to check for network status and request for Geolocation data from the device.\n\n``` javascript\n    \u003cuses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/\u003e\n    \u003cuses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" /\u003e\n```\nAlso make sure that it's targeting the same API version as the device you installed with Genymotion. As I’ve said earlier, if its version 23 or above you won’t really need to do anything, but if its lower than that then it has to be exact for the app to work.\n\n``` javascript\n    \u003cuses-sdk\n            android:minSdkVersion=\"16\"\n            android:targetSdkVersion=\"23\" /\u003e\n```\n\nLastly, since we’ll be primarily using Genymotion for testing the driver app, you need to follow the [instructions here](https://www.genymotion.com/help/desktop/faq/#google-play-services).\n\nWe need to do this because the React Native Maps library primarily uses Google Maps. We need to add Google Play Services in order for it to work. Unlike most Android phones which already comes with this installed, Genymotion doesn’t have it by default due to intellectual property reasons. Thus, we need to manually install it.\n\nIf you’re reading this sometime after it was published, be sure to check out the [Installation docs](https://github.com/airbnb/react-native-maps/blob/master/docs/installation.md) to make sure you’re not missing anything.\n\n### Coding the driver app\n\nNow you’re ready to start coding the app. Start by opening the `index.android.js` file and replace the default code with the following:\n\n``` javascript\n    import { AppRegistry } from 'react-native';\n    import App from './App';\n    AppRegistry.registerComponent('grabDriver', () =\u003e App);\n```\n\nWhat this does is importing the `App` component which is the main component for the app. It is then registered as the default component so it will be rendered on the screen.\n\nNext, create the `App.js` file and import the things we need from the React Native package:\n\n``` javascript\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      Text,\n      View,\n      Alert\n    } from 'react-native';\n```\n\nAlso, import the third-party libraries that we installed earlier:\n\n``` javascript\n    import Pusher from 'pusher-js/react-native';\n    import MapView from 'react-native-maps';\n    \n    import Geocoder from 'react-native-geocoding';\n    Geocoder.setApiKey('YOUR GOOGLE SERVER API KEY');\n```\n\nLastly, import the `helpers` file:\n\n``` javascript\n    import { regionFrom, getLatLonDiffInMeters } from './helpers';\n```\n\nThe `helpers.js` file contains the following:\n\n``` javascript\n    export function regionFrom(lat, lon, accuracy) {\n      const oneDegreeOfLongitudeInMeters = 111.32 * 1000;\n      const circumference = (40075 / 360) * 1000;\n    \n      const latDelta = accuracy * (1 / (Math.cos(lat) * circumference));\n      const lonDelta = (accuracy / oneDegreeOfLongitudeInMeters);\n    \n      return {\n        latitude: lat,\n        longitude: lon,\n        latitudeDelta: Math.max(0, latDelta),\n        longitudeDelta: Math.max(0, lonDelta)\n      };\n    } \n    \n    export function getLatLonDiffInMeters(lat1, lon1, lat2, lon2) {\n      var R = 6371; // Radius of the earth in km\n      var dLat = deg2rad(lat2-lat1);  // deg2rad below\n      var dLon = deg2rad(lon2-lon1); \n      var a = \n        Math.sin(dLat/2) * Math.sin(dLat/2) +\n        Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * \n        Math.sin(dLon/2) * Math.sin(dLon/2)\n        ; \n      var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \n      var d = R * c; // Distance in km\n      return d * 1000;\n    }\n    \n    function deg2rad(deg) {\n      return deg * (Math.PI/180)\n    }\n```\n\nThese functions are used for getting the latitude and longitude delta values needed by the React Native Maps library to display a map. The other function (`getLatLonDiffInMeters`) is used for determining the distance in meters between two coordinates. Later on, this will allow us to inform the user’s whether they’re already near each other or when they’re near their destination.\n\nNext, create the main app component and declare the default states:\n\n``` javascript\n    export default class grabDriver extends Component {\n    \n      state = {\n        passenger: null, // for storing the passenger info\n        region: null, // for storing the current location of the driver\n        accuracy: null, // for storing the accuracy of the location\n        nearby_alert: false, // whether the nearby alert has already been issued\n        has_passenger: false, // whether the driver has a passenger (once they agree to a request, this becomes true)\n        has_ridden: false // whether the passenger has already ridden the vehicle\n      }\n    }\n    // next: add constructor code\n```\n\nInside the constructor,  initialize the variables that will be used throughout the app:\n\n``` javascript\n    constructor() {\n      super();\n    \n      this.available_drivers_channel = null; // this is where passengers will send a request to any available driver\n      this.ride_channel = null; // the channel used for communicating the current location\n      // for a specific ride. Channel name is the username of the passenger\n     \n      this.pusher = null; // the pusher client\n    }\n    \n    // next: add code for connecting to pusher\n```\n\nBefore the component is mounted, connect to the auth server that you created earlier. Be sure to replace the values for the pusher key, `authEndpoint` and `cluster`.\n\n``` javascript\n    componentWillMount() {\n      this.pusher = new Pusher('YOUR PUSHER KEY', {\n        authEndpoint: 'YOUR PUSHER AUTH SERVER ENDPOINT',\n        cluster: 'YOUR PUSHER CLUSTER',\n        encrypted: true\n      });\n      \n      // next: add code for listening to passenger requests\n    }\n```\n\nNow that you’ve connected to the auth server, you can now start listening for requests coming from the passenger app. The first step is to subscribe to a [private channel](https://pusher.com/docs/client_api_guide/client_private_channels). This channel is where all passengers and drivers subscribe to. In this case, its used by drivers to listen for ride requests. It needs to be a private channel because [client events](https://pusher.com/docs/client_api_guide/client_events#trigger-events) can only be triggered on private and presence channels due to security reasons. You know that it’s a private channel because of the `private-`  prefix. \n\n``` javascript\n    this.available_drivers_channel = this.pusher.subscribe('private-available-drivers'); // subscribe to \"available-drivers\" channel\n```\n\nNext, listen to the `client-driver-request` event. You know that this is a client event because of the `client-` prefix. Client events don't need server intervention in order to work, the messages are sent directly to from client to client. That’s the reason why we need an auth server to make sure all the users that are trying to connect are real users of the app.\n\nGoing back to the code, we listen for client events by calling the `bind` method on the channel that we subscribed to and passing in the name of the event as the first argument. The second argument is the function that you want to execute once this event is triggered from another client (from anyone using the passenger app to request a ride). In the code below, we show an alert message asking the driver if they want to accept the passenger. Note that the app assumes that there can only be one passenger at any single time.\n\n``` javascript\n    // listen to the \"driver-request\" event\n    this.available_drivers_channel.bind('client-driver-request', (passenger_data) =\u003e {\n      \n      if(!this.state.has_passenger){ // if the driver has currently no passenger\n        // alert the driver that they have a request\n        Alert.alert(\n          \"You got a passenger!\", // alert title\n          \"Pickup: \" + passenger_data.pickup.name + \"\\nDrop off: \" + passenger_data.dropoff.name, // alert body\n          [\n            {\n              text: \"Later bro\", // text for rejecting the request\n              onPress: () =\u003e {\n                console.log('Cancel Pressed');\n              },\n              style: 'cancel'\n            },\n            {\n              text: 'Gotcha!', // text for accepting the request\n              onPress: () =\u003e {\n                // next: add code for when driver accepts the request\n              }  \n            },\n          ],\n          { cancelable: false } // no cancel button\n        );\n    \n      }\n    \n    });\n```\n\nOnce the driver agrees to pick up the passenger, we subscribe to their private channel. This channel is reserved only for communication between the driver and the passenger, that’s why we’re using the unique passenger username as part of the channel’s name.\n\n``` javascript\n    this.ride_channel = this.pusher.subscribe('private-ride-' + passenger_data.username);\n```\n\nNot unlike the `available-drivers` channel, we’ll need to listen for when the subscription actually succeeded (`pusher:subscription_succeeded`) before we do anything else. This is because we’re going to immediately trigger a client event to be sent to the passenger. This event (`client-driver-response`) is a handshake event to let the passenger know that the driver they sent their request to is still available. If the passenger still hasn’t gotten a ride at that time, the passenger app triggers the same event to let the driver know that they’re still available for picking up. At this point, we update the state so that the UI changes accordingly.\n\n``` javascript\n    this.ride_channel.bind('pusher:subscription_succeeded', () =\u003e {\n       // send a handshake event to the passenger\n      this.ride_channel.trigger('client-driver-response', {\n        response: 'yes' // yes, I'm available\n      });\n      \n      // listen for the acknowledgement from the passenger\n      this.ride_channel.bind('client-driver-response', (driver_response) =\u003e {\n        \n        if(driver_response.response == 'yes'){ // passenger says yes\n    \n          //passenger has no ride yet\n          this.setState({\n            has_passenger: true,\n            passenger: {\n              username: passenger_data.username,\n              pickup: passenger_data.pickup,\n              dropoff: passenger_data.dropoff\n            }\n          });\n          \n          // next: reverse-geocode the driver location to the actual name of the place\n          \n        }else{\n          // alert that passenger already has a ride\n          Alert.alert(\n            \"Too late bro!\",\n            \"Another driver beat you to it.\",\n            [\n              {\n                text: 'Ok'\n              },\n            ],\n            { cancelable: false }\n          );\n        }\n    \n      });\n    \n    });\n```\n\nNext, we use the Geocoding library to determine the name of the place where the driver is currently at. Behind the scenes, this uses the Google Geocoding API and it usually returns the street name. Once we get a response back, we trigger the `found-driver` event to let the passenger know that the app has found a driver for them. This contains driver info such as the name and the current location.\n\n``` javascript\n    Geocoder.getFromLatLng(this.state.region.latitude, this.state.region.longitude).then(\n      (json) =\u003e {\n        var address_component = json.results[0].address_components[0];\n        \n        // inform passenger that it has found a driver\n        this.ride_channel.trigger('client-found-driver', { \n          driver: {\n            name: 'John Smith'\n          },\n          location: { \n            name: address_component.long_name,\n            latitude: this.state.region.latitude,\n            longitude: this.state.region.longitude,\n            accuracy: this.state.accuracy\n          }\n        });\n    \n      },\n      (error) =\u003e {\n        console.log('err geocoding: ', error);\n      }\n    );  \n    // next: add componentDidMount code\n```\n\nOnce the component is mounted, we use [React Native’s Geolocation API](https://facebook.github.io/react-native/docs/geolocation.html) to watch for location updates. The function that you pass to the `watchPosition` function gets executed everytime the location changes.\n\n``` javascript\n    componentDidMount() {\n      this.watchId = navigator.geolocation.watchPosition(\n        (position) =\u003e {\n         \n          var region = regionFrom(\n            position.coords.latitude, \n            position.coords.longitude, \n            position.coords.accuracy\n          );\n          // update the UI\n          this.setState({\n            region: region,\n            accuracy: position.coords.accuracy\n          });\n          \n          if(this.state.has_passenger \u0026\u0026 this.state.passenger){\n            // next: add code for sending driver's current location to passenger\n          }\n        },\n        (error) =\u003e this.setState({ error: error.message }),\n        { \n          enableHighAccuracy: true, // allows you to get the most accurate location\n          timeout: 20000, // (milliseconds) in which the app has to wait for location before it throws an error\n          maximumAge: 1000, // (milliseconds) if a previous location exists in the cache, how old for it to be considered acceptable \n          distanceFilter: 10 // (meters) how many meters the user has to move before a location update is triggered\n        },\n      );\n    }\n```\n\nNext, send the driver’s current location to the passenger. This will update the UI on the passenger app to show the current location of the driver. You’ll see how the passenger app binds to this event later on when we move on to coding the passenger app.\n\n``` javascript\n    this.ride_channel.trigger('client-driver-location', { \n      latitude: position.coords.latitude,\n      longitude: position.coords.longitude,\n      accuracy: position.coords.accuracy\n    });\n```\n\nNext, we want to inform both the passenger and the driver that they’re already near each other. For that, we use the `getLatLonDiffInMeters` function from the `helpers.js` file in order to determine the number of meters between the passenger and the driver. Since the driver already received the passenger location when they accepted the request, it’s only a matter of getting the current location of the driver and passing it to the `getLanLonDiffInMeters` function to get the difference in meters. From there, we simply inform the driver or the passenger based on the number of meters. Later on you’ll see how these events are received in the passenger app.\n\n``` javascript\n    var diff_in_meter_pickup = getLatLonDiffInMeters(\n      position.coords.latitude, position.coords.longitude, \n      this.state.passenger.pickup.latitude, this.state.passenger.pickup.longitude);\n    \n    if(diff_in_meter_pickup \u003c= 20){\n      \n      if(!this.state.has_ridden){\n        // inform the passenger that the driver is very near\n        this.ride_channel.trigger('client-driver-message', {\n          type: 'near_pickup',\n          title: 'Just a heads up',\n          msg: 'Your driver is near, let your presence be known!'\n        });\n    \n        /*\n        we're going to go ahead and assume that the passenger has rode \n        the vehicle at this point\n        */\n        this.setState({\n          has_ridden: true\n        });\n      }\n    \n    }else if(diff_in_meter_pickup \u003c= 50){\n      \n      if(!this.state.nearby_alert){\n        this.setState({\n          nearby_alert: true\n        });\n        /* \n        since the location updates every 10 meters, this alert will be triggered \n        at least five times unless we do this\n        */\n        Alert.alert(\n          \"Slow down\",\n          \"Your passenger is just around the corner\",\n          [\n            {\n              text: 'Gotcha!'\n            },\n          ],\n          { cancelable: false }\n        );\n    \n      }\n    \n    }\n    \n    // next: add code for sending messages when near the destination\n```\n\nAt this point, we assume that the driver has picked up the passenger and that they’re now heading to their destination. So this time we get the distance between the current location and the drop-off point. Once they’re 20 meters to the drop-off point, the driver app sends a message to the passenger that they’re very close to their destination. Once that’s done, we assume that the passenger will get off in a few seconds. So we unbind the events that we’re listening to and unsubscribe from the passenger’s private channel. This effectively cuts the connection between the driver and passenger app. The only connection that stays open is the `available-drivers` channel.\n\n``` javascript\n    var diff_in_meter_dropoff = getLatLonDiffInMeters(\n      position.coords.latitude, position.coords.longitude, \n      this.state.passenger.dropoff.latitude, this.state.passenger.dropoff.longitude);\n    \n    if(diff_in_meter_dropoff \u003c= 20){\n      this.ride_channel.trigger('client-driver-message', {\n        type: 'near_dropoff',\n        title: \"Brace yourself\",\n        msg: \"You're very close to your destination. Please prepare your payment.\"\n      });\n    \n      // unbind from passenger event\n      this.ride_channel.unbind('client-driver-response');\n      // unsubscribe from passenger channel \n      this.pusher.unsubscribe('private-ride-' + this.state.passenger.username);\n    \n      this.setState({\n        passenger: null,\n        has_passenger: false,\n        has_ridden: false\n      });\n    \n    }\n    \n    // next: add code for rendering the UI\n```\n\nThe UI for the driver app only displays the map and the markers for the driver and passenger.\n\n``` javascript\n    render() {\n      return (\n        \u003cView style={styles.container}\u003e\n          {\n            this.state.region \u0026\u0026 \n            \u003cMapView\n              style={styles.map}\n              region={this.state.region}\n            \u003e\n                \u003cMapView.Marker\n                  coordinate={{\n                  latitude: this.state.region.latitude, \n                  longitude: this.state.region.longitude}}\n                  title={\"You're here\"}\n                /\u003e\n                {\n                  this.state.passenger \u0026\u0026 !this.state.has_ridden \u0026\u0026 \n                  \u003cMapView.Marker\n                    coordinate={{\n                    latitude: this.state.passenger.pickup.latitude, \n                    longitude: this.state.passenger.pickup.longitude}}\n                    title={\"Your passenger is here\"}\n                    pinColor={\"#4CDB00\"}\n                  /\u003e\n                }\n            \u003c/MapView\u003e\n          }\n        \u003c/View\u003e\n      );\n    }\n    // next: add code when component unmounts\n```\n\nBefore the component unmounts, we stop the location watcher by calling the `clearWatch` method:\n\n``` javascript\n    componentWillUnmount() {\n      navigator.geolocation.clearWatch(this.watchId);\n    } \n```\n\nLastly, add the styles:\n\n``` javascript\n    const styles = StyleSheet.create({\n      container: {\n        ...StyleSheet.absoluteFillObject,\n        justifyContent: 'flex-end',\n        alignItems: 'center',\n      },\n      map: {\n        ...StyleSheet.absoluteFillObject,\n      },\n    });\n```\n\n## Creating the Passenger App\n\nThe passenger app is going to be pretty similar to the driver app so I’ll no longer go into detail on parts that are similar. Go ahead and create a  new app:\n\n```\n    react-native init grabClone\n```\n\n### Installing the Dependencies\n\nYou’d also need to install the same libraries plus a couple more:\n\n```\n    npm install --save pusher-js react-native-geocoding github:geordasche/react-native-google-place-picker react-native-loading-spinner-overlay react-native-maps\n```\n\nThe other two libraries are [Google Place Picker](https://github.com/q6112345/react-native-google-place-picker) and [Loading Spinner Overlay](https://github.com/joinspontaneous/react-native-loading-spinner-overlay). Though we’ve used a [fork](https://github.com/geordasche/react-native-google-place-picker) of the Google Place Picker because of a compatibility issue with React Native Maps that wasn’t fixed in the original repo yet.\n\nSince we’ve installed the same libraries, you can go back to the section where we did some additional configuration in order for the library to work. Come back here once you’ve done those.\n\nNext, the Google Place Picker also needs some additional configuration for it to work. First, open the `android/app/src/main/java/com/grabClone/MainApplication.java` file and add the following below the last import:\n\n``` javascript\n    import com.reactlibrary.RNGooglePlacePickerPackage;\n```\n \n Add the library that you just imported under the `getPackages()` function. While you’re there, also make sure that the `MapsPackage()` is listed as well.\n \n``` javascript\n    protected List\u003cReactPackage\u003e getPackages() {\n      return Arrays.\u003cReactPackage\u003easList(\n          new MainReactPackage(),\n          new MapsPackage(),\n          new RNGooglePlacePickerPackage() // \u003c- add this\n      );\n    }\n```\n\nNext, open the `android/settings.gradle` file and add these right above the `include ':app'` directive:\n\n``` javascript\n    include ':react-native-google-place-picker'\n    project(':react-native-google-place-picker').projectDir = new File(rootProject.projectDir,         '../node_modules/react-native-google-place-picker/android')\n```\n\nWhile you’re there, also make sure that the resources for React Native Maps are also added:\n\n``` javascript\n    include ':react-native-maps'\n    project(':react-native-maps').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-maps/lib/android')\n```\n\nNext, open the `android/app/build.gradle` file and add the following under the `dependencies`:\n\n``` javascript\n    dependencies {\n      compile project(':react-native-google-place-picker') // \u003c- add this\n    }\n```\n\nLastly, make sure that React Native Maps is also compiled:\n\n``` javascript\n    compile project(':react-native-maps')\n```\n\n### Coding the passenger app\n\nOpen the `index.android.js` file and add the following:\n\n``` javascript\n    import { AppRegistry } from 'react-native';\n    import App from './App';\n    AppRegistry.registerComponent('grabClone', () =\u003e App);\n```\n\nJust like the driver app, it also uses `App.js` as the main component. Go ahead and import the libraries. It also uses the same `helpers.js` file so you can copy it from the driver app as well.\n\n``` javascript\n    import React, { Component } from 'react';\n    import { StyleSheet, Text, View, Button, Alert } from 'react-native';\n    \n    import Pusher from 'pusher-js/react-native';\n    import RNGooglePlacePicker from 'react-native-google-place-picker';\n    import Geocoder from 'react-native-geocoding';\n    import MapView from 'react-native-maps';\n    import Spinner from 'react-native-loading-spinner-overlay';\n    \n    import { regionFrom, getLatLonDiffInMeters } from './helpers'; \n    \n    Geocoder.setApiKey('YOUR GOOGLE SERVER API KEY');\n```\n\nCreate the component and declare the default states:\n\n``` javascript\n    export default class App extends Component {\n      state = {\n        location: null, // current location of the passenger\n        error: null, // for storing errors\n        has_ride: false, // whether the passenger already has a driver which accepted their request\n        destination: null, // for storing the destination / dropoff info\n        driver: null, // the driver info\n        origin: null, // for storing the location where the passenger booked a ride\n        is_searching: false, // if the app is currently searching for a driver\n        has_ridden: false // if the passenger has already been picked up by the driver\n      };\n      \n      // next: add constructor code\n    }\n```\n\nTo keep things simple, we declare the username of the passenger in the constructor. We also initialize the Pusher channels:\n\n``` javascript\n    constructor() {\n      super();\n      this.username = 'wernancheta'; // the unique username of the passenger\n      this.available_drivers_channel = null; // the pusher channel where all drivers and passengers are subscribed to\n      this.user_ride_channel = null; // the pusher channel exclusive to the passenger and driver in a given ride\n      this.bookRide = this.bookRide.bind(this); // bind the function for booking a ride\n    }\n    // next: add bookRide() function\n```\n\nThe `bookRide()` function gets executed when the user taps on the “Book Ride” button. This opens a place picker which allows the user to pick their destination. Once a location is picked, the app sends a ride request to all drivers. As you have seen in the driver app earlier, this triggers an alert to show in the driver app which asks if the driver wants to accept the request or not. At this point the loader will keep on spinning until a driver accepts the request.\n\n``` javascript\n    bookRide() {\n    \n      RNGooglePlacePicker.show((response) =\u003e {\n        if(response.didCancel){\n          console.log('User cancelled GooglePlacePicker');\n        }else if(response.error){\n          console.log('GooglePlacePicker Error: ', response.error);\n        }else{\n          this.setState({\n            is_searching: true, // show the loader\n            destination: response // update the destination, this is used in the UI to display the name of the place\n          });\n          \n          // the pickup location / origin\n          let pickup_data = {\n            name: this.state.origin.name,\n            latitude: this.state.location.latitude,\n            longitude: this.state.location.longitude\n          };\n          \n          // the dropoff / destination\n          let dropoff_data = {\n            name: response.name,\n            latitude: response.latitude,\n            longitude: response.longitude\n          };\n          \n          // send a ride request to all drivers\n          this.available_drivers_channel.trigger('client-driver-request', {\n            username: this.username,\n            pickup: pickup_data,\n            dropoff: dropoff_data\n          });\n    \n        }\n      });\n    }\n    // next: add _setCurrentLocation() function\n```\n\nThe `_setCurrentLocation()` function gets the passenger’s current location. Note that here we’re using  `getCurrentPosition()` as opposed to `watchPosition()` which we used in the driver app earlier. The only difference between the two is that `getCurrentPosition()` only gets the location once. \n\n``` javascript\n    _setCurrentLocation() {\n    \n      navigator.geolocation.getCurrentPosition(\n        (position) =\u003e {\n          var region = regionFrom(\n            position.coords.latitude, \n            position.coords.longitude, \n            position.coords.accuracy\n          );\n          \n          // get the name of the place by supplying the coordinates      \n          Geocoder.getFromLatLng(position.coords.latitude, position.coords.longitude).then(\n            (json) =\u003e {\n              var address_component = json.results[0].address_components[0];\n              \n              this.setState({\n                origin: { // the passenger's current location\n                  name: address_component.long_name, // the name of the place\n                  latitude: position.coords.latitude,\n                  longitude: position.coords.longitude\n                },\n                location: region, // location to be used for the Map\n                destination: null, \n                has_ride: false, \n                has_ridden: false,\n                driver: null    \n              });\n    \n            },\n            (error) =\u003e {\n              console.log('err geocoding: ', error);\n            }\n          );\n    \n        },\n        (error) =\u003e this.setState({ error: error.message }),\n        { enableHighAccuracy: false, timeout: 10000, maximumAge: 3000 },\n      );\n    \n    }\n    \n    // next: add componentDidMount() function\n```\n\nWhen the component mounts, we want to set the current location of the passenger, connect to the auth server and subscribe to the two channels: available drivers and the passenger’s private channel for communicating only with the driver’s where the ride request was sent to.\n\n``` javascript\n    componentDidMount() {\n    \n      this._setCurrentLocation(); // set current location of the passenger\n      // connect to the auth server\n      var pusher = new Pusher('YOUR PUSHER API KEY', {\n        authEndpoint: 'YOUR AUTH SERVER ENDPOINT',\n        cluster: 'YOUR PUSHER CLUSTER',\n        encrypted: true\n      });\n      \n      // subscribe to the available drivers channel\n      this.available_drivers_channel = pusher.subscribe('private-available-drivers');\n      \n      // subscribe to the passenger's private channel\n      this.user_ride_channel = pusher.subscribe('private-ride-' + this.username);\n      \n      // next: add code for listening to handshake responses\n      \n    }\n```\n\nNext, add the code for listening to the handshake response by the driver. This is being sent from the driver app when the driver accepts a ride request. This allows us to make sure that the passenger is still looking for a ride. If the passenger responds with “yes” then that’s the only time that the driver sends their information.\n\n``` javascript\n    this.user_ride_channel.bind('client-driver-response', (data) =\u003e {\n      let passenger_response = 'no';\n      if(!this.state.has_ride){ // passenger is still looking for a ride\n        passenger_response = 'yes';\n      }\n    \n      // passenger responds to driver's response\n      this.user_ride_channel.trigger('client-driver-response', {\n        response: passenger_response\n      });\n    });\n    \n    // next: add listener for when a driver is found\n```\n\nThe driver sends their information by triggering the `client-found-driver` event. As you have seen in the driver app earlier, this contains the name of the driver as well as their current location.\n\n``` javascript\n    this.user_ride_channel.bind('client-found-driver', (data) =\u003e {\n      // the driver's location info  \n      let region = regionFrom(\n        data.location.latitude,\n        data.location.longitude,\n        data.location.accuracy \n      );\n    \n      this.setState({\n        has_ride: true, // passenger has already a ride\n        is_searching: false, // stop the loading UI from spinning\n        location: region, // display the driver's location in the map\n        driver: { // the driver location details\n          latitude: data.location.latitude,\n          longitude: data.location.longitude,\n          accuracy: data.location.accuracy\n        }\n      });\n      \n      // alert the passenger that a driver was found\n      Alert.alert(\n        \"Orayt!\",\n        \"We found you a driver. \\nName: \" + data.driver.name + \"\\nCurrent location: \" + data.location.name,\n        [\n          {\n            text: 'Sweet!'\n          },\n        ],\n        { cancelable: false }\n      );      \n    });\n    // next: add code for listening to driver's current location\n```\n\nAt this point, the passenger can now listen to location changes from the driver. We simply update the UI everytime this event is triggered:\n\n``` javascript\n    this.user_ride_channel.bind('client-driver-location', (data) =\u003e {\n      let region = regionFrom(\n        data.latitude,\n        data.longitude,\n        data.accuracy\n      );\n      \n      // update the Map to display the current location of the driver\n      this.setState({\n        location: region, // the driver's location\n        driver: {\n          latitude: data.latitude,\n          longitude: data.longitude\n        }\n      });\n    \n    });\n```\n\nNext is the event that is triggered on specific instances. It’s main purpose is to send updates to the passenger regarding the location of the driver (`near_pickup` ) and also when they’re already near the drop-off location (`near_dropoff`). \n\n``` javascript\n    this.user_ride_channel.bind('client-driver-message', (data) =\u003e {\n      if(data.type == 'near_pickup'){ // the driver is very near the pickup location\n        // remove passenger marker since we assume that the passenger has rode the vehicle at this point\n        this.setState({\n          has_ridden: true \n        });\n      }\n    \n      if(data.type == 'near_dropoff'){ // they're near the dropoff location\n        this._setCurrentLocation(); // assume that the ride is over, so reset the UI to the current location of the passenger\n      }\n      \n      // display the message sent from the driver app\n      Alert.alert(\n        data.title,\n        data.msg,\n        [\n          {\n            text: 'Aye sir!'\n          },\n        ],\n        { cancelable: false }\n      );        \n    });\n    \n    // next: render the UI\n```\n\nThe UI composed of the loading spinner (only visible when the app is searching for a driver), the header, the button for booking a ride, the passenger location (`origin`) and their destination, and the map which initially displays the current location of the user and then displays the current location of the driver once a ride has been booked.\n\n``` javascript\n    render() {\n    \n      return (\n        \u003cView style={styles.container}\u003e\n          \u003cSpinner \n              visible={this.state.is_searching} \n              textContent={\"Looking for drivers...\"} \n              textStyle={{color: '#FFF'}} /\u003e\n          \u003cView style={styles.header}\u003e\n            \u003cText style={styles.header_text}\u003eGrabClone\u003c/Text\u003e\n          \u003c/View\u003e\n          {\n            !this.state.has_ride \u0026\u0026 \n            \u003cView style={styles.form_container}\u003e\n              \u003cButton\n                onPress={this.bookRide}\n                title=\"Book a Ride\"\n                color=\"#103D50\"\n              /\u003e\n            \u003c/View\u003e\n          }\n          \n          \u003cView style={styles.map_container}\u003e  \n          {\n            this.state.origin \u0026\u0026 this.state.destination \u0026\u0026\n            \u003cView style={styles.origin_destination}\u003e\n              \u003cText style={styles.label}\u003eOrigin: \u003c/Text\u003e\n              \u003cText style={styles.text}\u003e{this.state.origin.name}\u003c/Text\u003e\n             \n              \u003cText style={styles.label}\u003eDestination: \u003c/Text\u003e\n              \u003cText style={styles.text}\u003e{this.state.destination.name}\u003c/Text\u003e\n            \u003c/View\u003e  \n          }\n          {\n            this.state.location \u0026\u0026\n            \u003cMapView\n              style={styles.map}\n              region={this.state.location}\n            \u003e\n              {\n                this.state.origin \u0026\u0026 !this.state.has_ridden \u0026\u0026\n                \u003cMapView.Marker\n                  coordinate={{\n                  latitude: this.state.origin.latitude, \n                  longitude: this.state.origin.longitude}}\n                  title={\"You're here\"}\n                /\u003e\n              }\n      \n              {\n                this.state.driver \u0026\u0026\n                \u003cMapView.Marker\n                  coordinate={{\n                  latitude: this.state.driver.latitude, \n                  longitude: this.state.driver.longitude}}\n                  title={\"Your driver is here\"}\n                  pinColor={\"#4CDB00\"}\n                /\u003e\n              }\n            \u003c/MapView\u003e\n          }\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nLastly, add the styles:\n\n``` javascript\n    const styles = StyleSheet.create({\n      container: {\n        ...StyleSheet.absoluteFillObject,\n        justifyContent: 'flex-end'\n      },\n      form_container: {\n        flex: 1,\n        justifyContent: 'center',\n        padding: 20\n      },\n      header: {\n        padding: 20,\n        backgroundColor: '#333',\n      },\n      header_text: {\n        color: '#FFF',\n        fontSize: 20,\n        fontWeight: 'bold'\n      },  \n      origin_destination: {\n        alignItems: 'center',\n        padding: 10\n      },\n      label: {\n        fontSize: 18\n      },\n      text: {\n        fontSize: 18,\n        fontWeight: 'bold',\n      },\n      map_container: {\n        flex: 9\n      },\n      map: {\n       flex: 1\n      },\n    });\n```\n\n## Running the app\n\nNow you’re ready to run the app. If you have two machines, this will allow you to enable logging (`console.log`) for both. But if you have only one machine then you have to run them in particular order: passenger app first and then driver app.\n\nGo ahead and connect your Android device to your computer and run the following command:\n\n```\n    react-native run-android\n```\n\nThis will compile, install and run the app on your device. Once its running, terminate the watcher and disconnect your device from the computer. \n\n![ride-hailing-react-native-package](//images.contentful.com/1es3ne0caaid/6m6sD1Tx6gSeu8SC4CEGQq/061d03bb334f732a9cb033e6ebbf9bb7/ride-booking-app-react-native-package.png)\n\nNext, open Genymotion and launch the device that you installed earlier. This time, run the driver app. Once the app runs you’ll see a blank screen. This is normal because the app needs a location in order to render something. You can do that by clicking on “GPS” located on the upper right-side of the emulator UI then enable GPS. \n\nYou can also click on the map button and select a specific location if you want:\n\n![ride-hailing-react-native-example](//images.contentful.com/1es3ne0caaid/23YvBXFgRWI02w0Aa8wUw8/7310ca01fc8efc15ce221ef51f20054a/ride-booking-app-react-native-example.png)\n\nOnce you’ve selected a location, the map UI in the app should show the same location that you selected.\n\nNext, you can now follow the steps on the **App Flow** section earlier.  Note that you can emulate a moving vehicle by clicking around the Genymotion Map UI. If a passenger has already booked a ride and the driver has accepted the request, it should start updating both the passenger app and the driver app of the current location of the driver.\n\nIf you’re using two machines, then you can simply run `react-native run-android` on both. One should be connected to your device and the other should have the Genymotion emulator open.\n\n## Conclusion\n\nThat’s it! In this tutorial you’ve learned how to make use of Pusher to create a ride hailing app. As you have seen, the app that you’ve built is pretty bare-bones. If you want you can add more features to the app and maybe use it on your own projects. The code for the completed app is available on [GitHub](https://github.com/anchetaWern/grabClone)","metaTitle":"Build a ride hailing app with React Native","metaDescription":"Learn how to build a ride hailing app similar to Uber, Lyft or Gett using React Native for the frontend, Node.js for the backend and Pusher for the realtime features."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4mADBlWvfacEiEm6ga8qQ6","type":"Entry","createdAt":"2018-02-28T10:53:22.724Z","updatedAt":"2018-02-28T10:53:22.724Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a photo feed using Vue.js","url":"photo-feed-vuejs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/pusher-realtime-upload","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2017-08-03","description":"Build a photo feed with Vue.js, Node.js, Pusher, and Cloudinary.","prerequisite":"A basic understanding of Vue.js and Node.js is needed to follow this tutorial.","content":"When your app offers social sharing features, realtime notifications could be vital.\n\nOne example is Instagram, a popular app for editing and sharing photos and videos with friends \u0026 family. Users get realtime updates as feeds on posts made by their friends and other people they follow on the the platform.\n\nIn this tutorial, we will implement a similar social sharing app using some common developer tools, such as:\n- [Vue](https://vuejs.org): Frontend framework to simplify our DOM interactions.\n- [Node](https://nodejs.org): JavaScript server for handling requests from clients, as well as sending responses\n- [Pusher](https://pusher.com): Free realtime pub/sub service. Pusher makes realtime as easy as using basic events.\n- [Cloudinary](https://cloudinary.com/users/register/free?utm_source=Pusher\u0026utm_medium=Post_1\u0026utm_content=Vue_Image_Upload): End-to-end image management solution that enables storage, manipulation, optimization and delivery.\n\n![photo-feed-vuejs-app-architecture](//images.contentful.com/1es3ne0caaid/1nxyJE7begcQgOuCiUWOMA/6b19851723644cd83ee57ba66fe5ada1/photo-feed-vuejs-app-architecture.png)\n\nOf course, there are other utility tools, like Bootstrap, Express and NeDB, that simplify some time-consuming tasks. We will learn about those while we walk through the demo.\n\nLet's first build a server for the app.\n\n## Setting Up a Node Server\n\nA simple Node server is enough for the task at hand. To create one, run the following init command in an empty directory:\n\n```\n    npm init -y\n```\n\nYou should see a package.json file right in the folder. You can start installing the dependencies needed in the project:\n\n```\n    npm install --save express nedb cors body-parser connect-multiparty pusher cloudinary\n```\n\nThe dependencies help with the following outlined tasks:\n\n\n- [express](http://expressjs.com/): Routing framework for Node\n- [nedb](https://github.com/louischatriot/nedb): Disk database. This is not recommended for a large project, but is good enough to persist data in our demo.\n- [cors](https://github.com/expressjs/cors): Express middleware to enable CORS.\n- [body-parser](https://github.com/expressjs/body-parser): Express middleware that parses the request body and attaches to the express request object.\n- [connect-multiparty](https://github.com/expressjs/connect-multiparty): Just like body-parser, but parses uploaded files\n- [pusher](https://pusher.com/): Pusher SDK\n- [cloudinary](http://cloudinary.com/): Cloudinary SDK\n\nNext step is to import these installed dependencies into the entry JavaScript file. Create a file named `index.js` at the root of the directory and start importing the dependencies:\n\n```\n    // Import dependecies\n    const express = require('express');\n    const multipart = require('connect-multiparty');\n    const bodyParser = require('body-parser')\n    const cloudinary = require('cloudinary');\n    const cors = require('cors');\n    const Datastore = require('nedb');\n    const Pusher = require('pusher');\n    \n    // Create an express app\n    const app = express();\n    // Create a database\n    const db = new Datastore()\n    \n    // Configure middlewares\n    app.use(cors());\n    app.use(bodyParser.urlencoded({ extended: false }))\n    app.use(bodyParser.json())\n    \n    // Setup multiparty\n    const multipartMiddleware = multipart();\n```\n\nNot only have we imported the dependencies, we also configured the Express middleware that was installed.\n\n### Configurations\nWe need to configure Pusher and Cloudinary before actually making use of them. Configuration involves telling the SDKs who or what server should it talk to. This is done by passing it a config object that contains the credentials you retrieve after creating an account. (To learn how to set up both accounts, refer to Appendix 1 and 2 at the end of the article.)\n\n``` language-javascript\n    // Pusher configuration\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APPID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      encrypted: true,\n      cluster: process.env.PUSHER_CLUSTER\n    });\n    \n    // Cloudinary configuration\n    cloudinary.config({\n        cloud_name: process.env.CL_CLOUD_NAME,\n        api_key: process.env.CL_KEY,\n        api_secret: process.env.CL_SECRET\n    });\n```\n\nIt’s bad practice to hard code credentials in your code, hence we have added them using environmental variables. \n\n### Routes\nTwo routes are needed for the application — one to serve all the gallery images and another to create new gallery images from a request. Here is one for listing images:\n\n```\n    app.get('/', (req, res) =\u003e {\n      db.find({}, function (err, docs) {\n        if(err) {\n          return res.status(500).send(err);\n        }\n        res.json(docs)\n      });\n    })\n```\n\nThis looks for all the items in our database, and if no error was encountered, sends them as a JSON response to the requesting client. If an error was encountered, the error will be sent as a server error (500).\n\nLet’s now see how the images are uploaded, how data is persisted, and how Pusher emits a real time event that a new image was added to the collection:\n\n```\n    app.post('/upload', multipartMiddleware, function(req, res) {\n      // Upload image\n      cloudinary.v2.uploader.upload(\n        req.files.image.path,\n        { /* Transformation if needed */ },\n        function(error, result) {\n          if(error) {\n            return res.status(500).send(error)\n          }\n          // Save record\n          db.insert(Object.assign({}, result, req.body), (err, newDoc) =\u003e {\n            if(err) {\n              return res.status(500).send(err);\n            }\n            // Emit realtime event\n            pusher.trigger('gallery', 'upload', newDoc);\n            res.status(200).json(newDoc)\n          })\n      })\n    });  \n```\n\nWhat’s going on will be better explained as points, so let’s do that:\n\n\n- The middleware, `multipartMiddleware`, was not included in all the routes with `use`. Rather, it was added to the only route that needs it, which is the above `POST /upload` route.\n- We use Cloudinary’s `upload()` method to send the image received to your server. It takes the path to the image being uploaded, a transformation object and the callback function.\n- If the upload was successful, we store the image upload response alongside the request body in our database.\n- After storing the new data, we emit a Pusher `upload` event on the gallery channel. This event has a payload of the newly created item. All subscriptions to this channel’s event will be notified when an image is successfully uploaded.\n\n### Listen and Run\nFinally, in the server, we can bind to a port:\n\n```\n    app.listen(process.env.PORT || 5000, () =\u003e console.log('Running...'))\n```\n\nThis uses the port provided in the environmental variable. If none, it sticks to port 5000.\n\nYou can start running the server with:\n\n```\n    node index.js\n```\n\n## Setting up Vue.js\n\nVue is the framework that powers our client app. With a  server running, we can now implement a client that communicates with this server via HTTP requests and Pusher events.\n\nStart with initializing a Vue project using the Vue CLI:\n\n\n```\n    ## Install Vue CLI\n    npm install -g vue-cli\n    \n    ## Scafold a project. Syntax: vue init \u003ctemplate\u003e \u003cname\u003e\n    vue init webpack-simple gallery-client\n```\n\nNext, install dependencies:\n\n```\n    npm install --save axios vodal pusher-js cloudinary-core\n```\n\n- [axios](https://github.com/mzabriskie/axios): This is a HTTP library that simplifies how we make Ajax requests by enabling us to use promises to handle async.\n- [vodal](https://github.com/chenjiahan/vodal): Vue widget for dialog boxes\n- [pusher-js](https://github.com/pusher/pusher-js): Pusher client SDK\n- [cloudinary-core](https://github.com/cloudinary/pkg-cloudinary-core): Cloudinary client SDK\n\n## Gallery items list\n\nWe need to display a list of existing images in the gallery at start up. Therefore, when the app is launched, the user should be presented with a list of all the images available. To achieve this, in the `App.vue` (the entry component) `created` lifecycle method, make a request for all the images using axios:\n\n```\n    \u003cscript\u003e\n    // ./App.vue\n    import axios from 'axios';\n    import cloudinary from 'cloudinary-core'\n    \n    export default {\n      name: 'app',\n      data () {\n        return {\n          images: [],\n          cl: null,\n          spin: false\n        }\n      },\n      created() {\n        this.spin = true\n        this.cl = new cloudinary.Cloudinary({cloud_name: '\u003cCLOUD_NAME\u003e', secure: true})\n        axios.get('http://localhost:5000')\n          .then(({data}) =\u003e {\n            this.spin = false\n            this.images = data.map(image =\u003e {\n              image.url = this.cl.url(image.public_id, {width: 500, height: 400, crop: \"fill\"})\n              return image;\n            });\n          })\n      },\n      methods: {\n        // Coming soon\n      }\n    }\n    \u003c/script\u003e\n```\n\nWhen the images are fetched, we transform them by manipulating the dimensions (width and height) to fit our design idea. The transformed data is then bound to the view by setting it as the value of the `images` property :\n\n```\n    \u003ctemplate\u003e\n     \u003c!-- ./App.vue --\u003e\n      \u003cdiv id=\"app\"\u003e\n        \u003cdiv class=\"container\"\u003e\n          \u003ch3 class=\"text-center\"\u003eRealtime Gallery \u003cbutton class=\"btn btn-info\" @click=\"showModal\"\u003e\u003cspan class=\"glyphicon glyphicon-upload\"\u003e\u003c/span\u003e\u003c/button\u003e\u003c/h3\u003e\n          \u003cgallery-list :images=\"images\"\u003e\u003c/gallery-list\u003e\n        \u003c/div\u003e\n        \u003cspan v-show=\"spin\" class=\"glyphicon glyphicon-repeat fast-right-spinner\"\u003e\u003c/span\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nThere is also a `spin` boolean property that determines if a loading spinner should be shown or not. Soon, we will implement the `showModal` method that is called when the upload button is clicked.\n\nRather than having native elements all over in the `App`'s template, we have a created an abstraction. The `gallery-list` element is used and is passed the list of images. For it to work, you need to create, import and declare the `GalleryList` component in App.\n\nFirst, import and declare it:\n\n```\n    \u003cscript\u003e\n    // ./App.vue\n    import GalleryList from './GalleryList.vue'\n    //...\n    export default {\n      components: {\n        'gallery-list': GalleryList\n      }\n    }\n    \u003c/script\u003e\n```\n\nThen create the component:\n\n```\n    \u003c!-- ./GalleryList.vue --\u003e\n    \u003ctemplate\u003e\n      \u003cdiv\u003e\n        \u003cdiv class=\"row\" v-for=\"i in Math.ceil(images.length / 3)\" :key=\"i\"\u003e\n          \u003cdiv class=\"col-md-4\" v-for=\"image in images.slice((i - 1) * 3, i * 3)\" :key=\"image._id\"\u003e\n            \u003cgallery-item :image=\"image\"\u003e\n            \u003c/gallery-item\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \u003cscript\u003e\n    import GalleryItem from './GalleryItem.vue'\n    export default {\n      props: ['images'],\n      components: {\n        'gallery-item': GalleryItem\n      }\n    }\n    \u003c/script\u003e\n```   \n\nThe component receives `images` sent from the parent `App` component via `props`. We then iterate over the images and display each of them with another component called `gallery-item`:\n\n```\n    \u003ctemplate\u003e\n      \u003cdiv class=\"card\"\u003e\n        \u003ch4 class=\"card-title\"\u003e{{image.title}}\u003c/h4\u003e\n        \u003cdiv class=\"card-image\"\u003e\n          \u003cimg :src=\"image.url\" class=\"img-responsive\"/\u003e\n        \u003c/div\u003e \n        \u003cp class=\"card-description\"\u003e{{image.description}}\u003c/p\u003e \n      \u003c/div\u003e\n    \u003c/template\u003e\n    \u003cscript\u003e\n    export default {\n      props: ['image']\n    }\n    \u003c/script\u003e\n```\n\nWith existing images (which I assume you don’t have yet), you should see the following at `localhost:8080` when you run the app with `npm run dev`:\n\n![photo-feed-vuejs-web](//images.contentful.com/1es3ne0caaid/5C5mHW4NOggKye6A4KqGgW/5dbd22f40fca53639a2232aa4ae92f9d/photo-feed-vuejs-web.png)\n\n## Gallery image upload\n\nNow that we have a list of images to show, the next question is how they came to exist. We have to upload them to the server. Fortunately, the server already made provision for that so all we have left to do is implement the upload logic.\n\nLet’s start by creating an `Upload` component which contains a form for the upload:\n\n```\n    \u003ctemplate\u003e\n      \u003cdiv class=\"upload\"\u003e\n        \u003cform @submit.prevent=\"handleSubmit\" enctype=\"multipart/form-data\"\u003e\n          \u003cdiv class=\"form-group\"\u003e\n            \u003clabel\u003eTitle\u003c/label\u003e\n            \u003cinput type=\"text\" class=\"form-control\" v-model=\"model.title\" /\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"form-group\"\u003e\n            \u003clabel\u003eImage\u003c/label\u003e\n            \u003cinput type=\"file\" class=\"form-control\" @change=\"handleUpload($event.target.files)\" /\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"form-group\"\u003e\n            \u003clabel\u003eDescription\u003c/label\u003e\n            \u003ctextarea row=\"5\" class=\"form-control\" v-model=\"model.description\"\u003e\u003c/textarea\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"form-group\"\u003e\n            \u003cbutton class=\"btn btn-info\"\u003eSubmit\u003c/button\u003e\n          \u003c/div\u003e\n        \u003c/form\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \u003cscript\u003e\n    export default {\n      data() {\n        return {\n          model: {\n            title: '',\n            description: '',\n            imageFile: null\n          }\n        }\n      },\n      methods: {\n        handleSubmit() {\n          this.$emit('submit', this.model)\n        },\n        handleUpload(files) {\n          this.model.imageFile = files[0];\n        }\n      }\n    }\n    \u003c/script\u003e\n```\n\nThe form contains a title (text), description (text area) and file inputs. These controls are tracked by the `model` property, which is updated when the values change. `title` and `description` are automatic but `imageFile` is not because it’s read only. Therefore, we have to manually update the model by calling `handleUpload` every time the file control value changes.\n\nWhen the form is submitted, we need to call `handleSubmit`, which triggers an event that will be handled in the parent component (`App`). Let’s have a look how `App` handles this:\n\n\n```\n    \u003ctemplate\u003e\n      \u003cdiv id=\"app\"\u003e\n        \u003cdiv class=\"container\"\u003e\n          \u003ch3 class=\"text-center\"\u003eRealtime Gallery \u003cbutton class=\"btn btn-info\" @click=\"showModal\"\u003e\u003cspan class=\"glyphicon glyphicon-upload\"\u003e\u003c/span\u003e\u003c/button\u003e\u003c/h3\u003e\n          \u003cvodal :show=\"show\" animation=\"zoom\" @hide=\"show = false\"\u003e\n            \u003cupload @submit=\"handleSubmit\"\u003e\u003c/upload\u003e\n          \u003c/vodal\u003e\n          \u003cgallery-list :images=\"images\"\u003e\u003c/gallery-list\u003e\n        \u003c/div\u003e\n        \u003cspan v-show=\"spin\" class=\"glyphicon glyphicon-repeat fast-right-spinner\"\u003e\u003c/span\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \u003cscript\u003e\n    import Upload from './Upload.vue'\n    import GalleryList from './GalleryList.vue'\n    import axios from 'axios';\n    import cloudinary from 'cloudinary-core'\n    var Pusher = require('pusher-js');\n    export default {\n      name: 'app',\n      data () {\n        return {\n          images: [],\n          show: false,\n          cl: null,\n          spin: false\n        }\n      },\n      created() {\n        // truncated\n      },\n      methods: {\n        showModal() {\n          this.show = true\n        },\n        handleSubmit(model) {\n          this.show = false;\n          this.spin = true\n          const formData = new FormData()\n          formData.append('image', model.imageFile);\n          formData.append('title', model.title);\n          formData.append('description', model.description);\n          \n          axios.post('http://localhost:5000/upload', formData)\n          .then(({data}) =\u003e {\n            this.spin = false\n          })\n        }\n      },\n      components: {\n        'gallery-list': GalleryList,\n        'upload': Upload\n      }\n    }\n    \u003c/script\u003e\n```\n\nBecause of the way we added `GalleryList`, the `Upload` container is imported and included in the list of components. The dialog plugin, `vodal` is used to only show the form as a dialog when the upload button beside the header is clicked. This is possible by toggling `show`.\n\nNotice how the upload component handles the emitted submit event:\n\n```\n    \u003cupload @submit=\"handleSubmit\"\u003e\u003c/upload\u003e\n```\n\nIt calls `handleSubmit` on the containing (parent) component, which uploads the image with axios, hides the model and uses a loading spinner to tell us the status of the upload.\n\nThe `vodal` plugin needs to be imported and configured for it to work. You can do this in the `./main.js` file:\n\n```\n    import Vodal from 'vodal';\n    Vue.component(Vodal.name, Vodal);\n```\n\nNow you can run the app again (if you stopped it), and try to upload an image:\n\nWhen you upload an image, you won’t see any UI updates unless you refresh the browser. Let’s implement realtime updates to make UI updates happen.\n\n## Realtime updates\n\nWe already have the upload feature fleshed out but we need to let the users know their upload was successful. The server is already triggering an event, all we need do is listen to this event and prepend incoming payload to the existing list of images:\n\n```\n    \u003cscript\u003e\n    import Upload from './Upload.vue'\n    import GalleryList from './GalleryList.vue'\n    import axios from 'axios';\n    import cloudinary from 'cloudinary-core'\n    var Pusher = require('pusher-js');\n    export default {\n      name: 'app',\n      data () {\n        return {\n          images: [],\n          show: false,\n          cl: null,\n          spin: false\n        }\n      },\n      created() {\n        this.spin = true;\n        var pusher = new Pusher('\u003cAPP_ID\u003e', {\n          encrypted: true,\n          cluster: 'CLUSTER'\n        });\n        var channel = pusher.subscribe('gallery');\n        channel.bind('upload', (data) =\u003e {\n          data.url = this.cl.url(data.public_id, {width: 500, height: 400, crop: \"fill\"})\n          this.images.unshift(data)\n        });\n        // Truncated...\n      },\n      methods: {\n        // Truncated...\n      },\n    }\n    \u003c/script\u003e\n```\n\nWe bind to the `upload` event, which we created on the `gallery` channel, then add the new image that comes into the existing array of images. You can now see image upload and UI updates happen in real time:\n\n\n![photo-feed-vuejs-demo](//images.contentful.com/1es3ne0caaid/49dCViSXss2kg8E4aosKaw/94b0ab167fd7e3a08e913a7cd9752384/photo-feed-vuejs-demo.gif)\n\n\n## Conclusion\n\nAt this point, if you have followed the article, you can stop wondering how realtime image sharing apps work and start building one for yourself.\n\n\n## Appendix 1: Pusher Setup\n\n- [Sign up](https://dashboard.pusher.com/accounts/sign_in) for a free Pusher account\n\n![photo-feed-vuejs-signup](//images.contentful.com/1es3ne0caaid/6Gi9ARqH3UUM8ICUCIcUOY/5a5946ac652e92bd44b7319530ce0a33/photo-feed-vuejs-signup.png)\n\n- Create a new app by selecting **Apps** on the sidebar and clicking **Create New** button on the bottom of the sidebar:\n\n![photo-feed-vuejs-dashboard](//images.contentful.com/1es3ne0caaid/4fY7jsiReweMeewMimsusk/93525dc8f20aee19f5d795535fac5dd7/photo-feed-vuejs-dashboard.png)\n\n- Configure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with for a better setup experience:\n\n![photo-feed-vuejs-create-app](//images.contentful.com/1es3ne0caaid/tK8YSwICMCMGaEEgOk4gy/5ee05bbd1bb97dfccad69e3aa9100123/photo-feed-vuejs-create-app.png)\n\n- You can retrieve your keys from the **App Keys** tab\n\n![photo-feed-vuejs-app-keys](//images.contentful.com/1es3ne0caaid/2jCymWqEewG0ccEO0gayc4/27a94a00c34fc4bfec9d0e1ce7684d9b/photo-feed-vuejs-app-keys.png)\n\n## Appendix 2: Cloudinary Setup\n\n- [Sign up](https://cloudinary.com/users/register/free?utm_source=Pusher\u0026utm_medium=Post_1\u0026utm_content=Vue_Image_Upload) on Cloudinary for a free account:\n\n![photo-feed-vuejs-cloudinary-signup](//images.contentful.com/1es3ne0caaid/4Y5EVO2XZY2eaUMAAkUmyU/612c6f3895fa8befe394841eee5a0476/photo-feed-vuejs-cloudinary-signup.png)\n\n- When you sign up successfully, you're presented with a dashboard that holds your cloud credentials. You can safely store them for future use:\n\n![photo-feed-vuejs-cloudinary-app-keys](//images.contentful.com/1es3ne0caaid/3uXTzrXraUc8sigywuW2mQ/cb75f306d85057906e37722367e77d1f/photo-feed-vuejs-cloudinary-app-keys.png)","metaTitle":"Build a photo feed using Vue.js","metaDescription":"In this tutorial you'll learn how to build an app for editing and sharing photos: you'll use Vue.js in the front-end and Node.js in the back-end, Pusher to add realtime features, and Cloudinary for end-to-end image management."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4lEHfz5V5SOmAaaACoeuCM","type":"Entry","createdAt":"2018-02-22T15:04:12.904Z","updatedAt":"2020-06-19T12:58:31.327Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime app with Vue.js","url":"realtime-app-vuejs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3sixk7zsAoQqqSsUWM8I8y","type":"Entry","createdAt":"2018-02-13T18:06:00.483Z","updatedAt":"2018-02-14T10:08:13.372Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Olayinka Omole","url":"olayinka-omole","email":"olayinka.omole@gmail.com","twitter":"https://twitter.com/olayinkaos","github":"https://github.com/olayinkaos","guestWriter":true}}],"projectRepo":"https://github.com/olayinkaos/revue","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}}],"reviewDate":"2017-06-28","description":"Build a movie review application with Vue.js and add realtime functionality to it.","prerequisite":"A basic understanding of Vue.js and Node.js are needed to follow this tutorial.","content":"In this tutorial, I will walk you through getting started with a Vue.js 2.0 app, and adding realtime functionality to it with Pusher. The sample app we will be building is a movie review app called “revue”.\n\nHere is what the final app will look like:\n\n![realtime-app-vuejs-demo](//images.contentful.com/1es3ne0caaid/32ygS1dEAgAaMAMmuCGEog/42629c86879ce9d90de71a8468e4f026/movie-review-app-vuejs-demo.gif)\n\nYou can find the complete code [hosted on Github](https://github.com/olayinkaos/revue).\n\n## Setting up with Vue-cli\n\n[Vue-cli](https://github.com/vuejs/vue-cli) is a great command line tool for scaffolding Vue.js projects, so we don’t have to spend too much time on configuration, and can jump right into writing code!\n\nIf you haven’t already, install vue-cli:\n\n```\nnpm install -g vue-cli\n```\n\nWe will create a project with the [webpack template](https://github.com/vuejs-templates/webpack), and install the dependencies with this set of commands:\n\n```\nvue init webpack revue\ncd revue\nnpm install\n```\n\n\u003e Webpack is a build tool that helps us do a bunch of things like parse Vue [single file components](https://vuejs.org/v2/guide/single-file-components.html), and convert our ES6 code to ES5 so we don’t have to worry about browser compatibility. You can check [here](https://github.com/vuejs-templates/webpack) for more details about the webpack template.\n\nTo run the app:\n\n```\nnpm run dev\n```\n\nWe can also optionally include [Foundation](http://foundation.zurb.com/) in the `index.html` file to take advantage of some preset styling:\n\n```\n\u003c!-- ./index.html --\u003e\n\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n  \u003chead\u003e\n    \u003cmeta charset=\"utf-8\"\u003e\n    \u003c!-- import foundation --\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/foundation/6.3.1/css/foundation.min.css\"\u003e \n    \u003ctitle\u003erevue\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody\u003e\n    \u003cdiv id=\"app\"\u003e\u003c/div\u003e\n    \u003c!-- built files will be auto injected --\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n```\n\n## Creating the movie review app\n\nWe will get started by creating the movie and review components of the app:\n\n```\ntouch ./src/components/Movie.vue\ntouch ./src/components/Reviews.vue\n```\n\nIt is helpful to know that one of the things that makes Vue so powerful is its components, much like other modern JavaScript frameworks. A typical app should be a series of components built on top of one another. This keeps our app modular, and helps make different parts of the app reusable.\n\n### Searching and retrieving a movie\nTo show the movie to be reviewed, we will create a simple form which we will use to fetch a movie from the [Netflix Roulette public database API](http://netflixroulette.net/api/):\n\n\n```\n\u003c!-- ./src/components/Movie.vue --\u003e\n\u003ctemplate\u003e\n  \u003cdiv class=\"container\"\u003e\n    \u003cdiv class=\"row\"\u003e\n      \u003cform @submit.prevent=\"fetchMovie()\"\u003e\n        \u003cdiv class=\"columns large-8\"\u003e\n          \u003cinput type=\"text\" v-model=\"title\"\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"columns large-4\"\u003e\n          \u003cbutton type=\"submit\" :disabled=\"!title\" class=\"button expanded\"\u003e\n            Search titles\n          \u003c/button\u003e\n        \u003c/div\u003e\n      \u003c/form\u003e\n    \u003c/div\u003e\n    \u003c!-- /search form row --\u003e\n  \u003c/div\u003e\n  \u003c!-- /container --\u003e\n\u003c/template\u003e\n```\n\nIn the above code, we created a form, and specified a custom `fetchMovie()` event handler on form submit. Don’t worry, we will define this handler in a bit. \n\nThe `@submit` directive is shorthand for `v-on:submit`. The `v-on` directive is used to listen to DOM events and run actions (or handlers) when they’re triggered. The `.prevent` modifier helps us abstract the need to write `event.preventDefault()` in the handler logic… which is pretty cool.\n\n\u003e You can read more on Vue.js event handlers [here](https://vuejs.org/v2/guide/events.html).\n\nWe also use the `v-model` directive to bind the value of the text input to `title`. And finally we bind the `disabled` attribute of the button such that it is set to true if `title` is absent, and vice versa. `:disabled` is shorthand for `v-bind:disabled`.\n\nNext we define the methods and data values for the component:\n\n```\n\u003c!-- ./src/components/Movie.vue --\u003e\n\u003cscript\u003e\n// define the external API URL\nconst API_URL = 'https://netflixroulette.net/api/api.php'\n// Helper function to help build urls to fetch movie details from title\nfunction buildUrl (title) {\n  return `${API_URL}?title=${title}`\n}\n\nexport default {\n  name: 'movie', // component name\n  data () {\n    return {\n      title: '',\n      error_message: '',\n      loading: false, // to track when app is retrieving data\n      movie: {}\n    }\n  },\n  methods: {\n    fetchMovie () {\n      let title = this.title\n      if (!title) {\n        alert('please enter a title to search for')\n        return\n      }\n      this.loading = true \n      fetch(buildUrl(title))\n      .then(response =\u003e response.json())\n      .then(data =\u003e {\n        this.loading = false\n        this.error_message = ''\n        if (data.errorcode) {\n          this.error_message = `Sorry, movie with title '${title}' not found. Try searching for \"Fairy tail\" or \"The boondocks\" instead.`\n          return\n        }\n        this.movie = data\n      }).catch((e) =\u003e {\n        console.log(e)\n      })\n    }\n  }\n}\n\u003c/script\u003e\n```\n\nIn the above code, after defining the external URL we want to query to get movies from, we specify the key Vue options we need for the component:\n\n- `data`: this specifies properties we’ll be needing in our component. Note that in a regular Vue construct it is an object, but it has to be [returned as a function in a component](https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function).\n- `methods`: this specifies the methods we are using in the component. For now, we only define one method — the `fetchMovie()` method to retrieve movies. Notice we also use the [Fetch API](https://developer.mozilla.org/en/docs/Web/API/Fetch_API) for retrieving results, to keep things simple.\n\n\u003e Note: The JavaScript Fetch API is great for making AJAX requests, although it requires a polyfill for older browsers. A great alternative is [axios](https://github.com/mzabriskie/axios).\n\nNext, we can add the code to display the movie, and show a notice when the movie title isn’t found, inside the `\u003ctemplate\u003e`:\n\n```\n\u003c!-- ./src/components/Movie.vue --\u003e\n\u003ctemplate\u003e\n\u003c!-- // ... --\u003e\n\u003cdiv v-if=\"loading\" class=\"loader\"\u003e\n  \u003cimg src=\"https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/0.16.1/images/loader-large.gif\" alt=\"loader\"\u003e\n\u003c/div\u003e\n\n\u003cdiv v-else-if=\"error_message\"\u003e\n  \u003ch3\u003e{{ error_message }}\u003c/h3\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"row\" v-else-if=\"Object.keys(movie).length !== 0\" id=\"movie\"\u003e\n  \u003cdiv class=\"columns large-7\"\u003e\n    \u003ch4\u003e {{ movie.show_title }}\u003c/h4\u003e\n    \u003cimg :src=\"movie.poster\" :alt=\"movie.show_title\"\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"columns large-5\"\u003e\n    \u003cp\u003e{{ movie.summary }}\u003c/p\u003e\n    \u003csmall\u003e\u003cstrong\u003eCast:\u003c/strong\u003e {{ movie.show_cast }}\u003c/small\u003e\n  \u003c/div\u003e\n\u003c/div\u003e\n\u003c/template\u003e\n```\n\nWe use double curly braces for text interpolation. We also introduced new `v-if`, `v-else-if` and `v-else` directives, which we use to [conditionally render](https://vuejs.org/v2/guide/conditional.html#v-if) elements.\n\nWe can add some optional styling at the bottom of the component:\n\n```\n\u003c!-- ./src/components/Movie.vue --\u003e\n\u003c!-- Add \"scoped\" attribute to limit CSS to this component only --\u003e\n\u003cstyle scoped\u003e\n#movie {\n  margin: 30px 0;\n}\n.loader {\n  text-align: center;\n}\n\u003c/style\u003e\n```\n\nThe final `Movie.vue` file will look like [this](https://github.com/olayinkaos/revue/blob/master/src/components/Movie.vue).\n\n### Retrieving and writing movie reviews\nNext, we will edit the review component, which will contain the logic and view for reviews, using the same Single File Component approach.\n\nFirst, we use a `v-for` directive to loop through the available reviews for a movie and display it in the template:\n\n```\n\u003c!-- ./src/components/Review.vue --\u003e\n\u003ctemplate\u003e\n  \u003cdiv class=\"container\"\u003e\n    \u003ch4 class=\"uppercase\"\u003ereviews\u003c/h4\u003e\n    \u003cdiv class=\"review\" v-for=\"review in reviews\"\u003e\n      \u003cp\u003e{{ review.content }}\u003c/p\u003e\n      \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"columns medium-7\"\u003e\n          \u003ch5\u003e{{ review.reviewer }}\u003c/h5\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"columns medium-5\"\u003e\n          \u003ch5 class=\"pull-right\"\u003e{{ review.time }}\u003c/h5\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  \u003c/div\u003e\n\u003c/template\u003e\n\n\u003cscript\u003e\nconst MOCK_REVIEWS = [\n  {\n    movie_id: 7128,\n    content: 'Great show! I loved every single scene. Defintiely a must watch!',\n    reviewer: 'Jane Doe',\n    time: new Date().toLocaleDateString()\n  }\n]\nexport default {\n  name: 'reviews',\n  data () {\n    return {\n      mockReviews: MOCK_REVIEWS,\n      movie: null,\n      review: {\n        content: '',\n        reviewer: ''\n      }\n    }\n  },\n  computed: {\n    reviews () {\n      return this.mockReviews.filter(review =\u003e {\n        return review.movie_id === this.movie\n      })\n    }\n  }\n}\n\u003c/script\u003e\n```\n\nWe create `MOCK_REVIEWS` to mock the available reviews, gotten from a resource, for example, an API. Then, we use a [computed property](https://vuejs.org/v2/guide/computed.html) to filter out the reviews for a particular movie. This would typically be gotten from the API or resource.\n\nNext, we add a form and method for adding a new review:\n\n```\n\u003c!-- ./src/components/Review.vue --\u003e\n\u003ctemplate\u003e\n  \u003cdiv class=\"container\"\u003e\n    \u003c!-- //... --\u003e\n    \u003cdiv class=\"review-form\" v-if=\"movie\"\u003e\n      \u003ch5\u003eadd new review.\u003c/h5\u003e\n      \u003cform @submit.prevent=\"addReview\"\u003e\n        \u003clabel\u003e\n          Review\n          \u003ctextarea v-model=\"review.content\" cols=\"30\" rows=\"5\"\u003e\u003c/textarea\u003e\n        \u003c/label\u003e\n        \u003clabel\u003e\n          Name\n          \u003cinput v-model=\"review.reviewer\" type=\"text\"\u003e\n        \u003c/label\u003e\n        \u003cbutton :disabled=\"!review.reviewer || !review.content\" type=\"submit\" class=\"button expanded\"\u003eSubmit\u003c/button\u003e\n      \u003c/form\u003e\n    \u003c/div\u003e\n    \u003c!-- //... --\u003e   \n  \u003c/div\u003e \n\u003c/template\u003e\n\n\u003cscript\u003e\nexport default {\n  // ..\n  methods: {\n    addReview () {\n      if (!this.movie || !this.review.reviewer || !this.review.content) {\n        return\n      }\n      let review = {\n        movie_id: this.movie, \n        content: this.review.content, \n        reviewer: this.review.reviewer, \n        time: new Date().toLocaleDateString()\n      }\n      this.mockReviews.unshift(review)\n    }\n  },\n  //...\n}\n\u003c/script\u003e\n```\n\nWe can add some optional styling at the bottom of the component:\n\n```\n\u003c!-- ./src/components/Review.vue --\u003e\n\u003c!-- Add \"scoped\" attribute to limit CSS to this component only --\u003e\n\u003cstyle scoped\u003e\n  .container {\n    padding: 0 20px;\n  }\n  .review {\n    border:1px solid #ddd;\n    font-size: 0.95em;\n    padding: 10px;\n    margin: 15px 0 5px 0;\n  }\n  .review h5 {\n    text-transform: uppercase;\n    font-weight: bolder;\n    font-size: 0.7em\n  }\n  .pull-right {\n    float: right;\n  }\n  .review-form {\n    margin-top: 30px;\n    border-top: 1px solid #ddd;\n    padding: 15px 0 0 0;\n  }\n\u003c/style\u003e\n```\n\nTo fetch and post reviews, we need to use the `movie` identifier, which is gotten in the `Movie` component. Thankfully, component-to-component communication can be done really easily in Vue.\n\n### Component-to-component communication\n[As recommended in the official documentation](https://vuejs.org/v2/guide/components.html#Non-Parent-Child-Communicationhttps://vuejs.org/v2/guide/components.html#Non-Parent-Child-Communication), we can create a new Vue instance and use it as a message bus. The message bus is an object that components can emit and listen to events on. In a larger application, a more robust [state management](https://vuejs.org/v2/guide/state-management.html) solution like [Vuex](https://github.com/vuejs/vuex) is recommended.\n\nCreating the message bus:\n\n```\ntouch ./src/bus.js\n```\n\n\n\n```\n// ./src/bus.js\nimport Vue from 'vue'\nconst bus = new Vue()\n\nexport default bus\n```\n\nTo emit an event once a movie is found, we update the `fetchMovies()` method:\n\n```\n\u003c!-- ./src/components/Movie.vue --\u003e\nimport bus from '../bus'\n\nexport default {\n  // ...\n  methods: {\n    fetchMovie (title) {\n      this.loading = true\n      fetch(buildUrl(title))\n      .then(response =\u003e response.json())\n      .then(data =\u003e {\n        this.loading = false\n        this.error_message = ''\n        bus.$emit('new_movie', data.unit) // emit `new_movie` event\n        if (data.errorcode) {\n          this.error_message = `Sorry, movie with title '${title}' not found. Try searching for \"Fairy tail\" or \"The boondocks\" instead.`\n          return\n        }\n        this.movie = data\n      }).catch(e =\u003e { console.log(e) })\n    }\n  }\n}\n```\n\nListening for the event in the `Review` component, in the `created` hook:\n\n```\n\u003c!-- ./src/components/Review.vue --\u003e\n\u003cscript\u003e\nimport bus from '../bus'\nexport default {\n  // ...\n  created () {\n    bus.$on('new_movie', movieId =\u003e {\n      this.movie = movieId\n    })\n  },\n  // ...\n}\n\u003c/script\u003e\n```\n\nIn the above code, we specify that whenever the `new_movie` event is fired, we set the `movie` property to be the value of the `movieId` that is broadcast by the event.\n\n\u003e For a better understanding of the Vue lifecycle hooks, you can check out the [official documentation on the subject](https://vuejs.org/v2/guide/instance.html#Instance-Lifecycle-Hooks).\n\nFinally to complete our base app, we register our components in `App.vue`, and display the templates:\n\n```\n\u003c!-- ./src/App.vue --\u003e\n\u003ctemplate\u003e\n  \u003cdiv id=\"app\"\u003e\n    \u003cdiv class=\"container\"\u003e\n      \u003cdiv class=\"heading\"\u003e\n        \u003ch2\u003erevue.\u003c/h2\u003e\n        \u003ch6 class=\"subheader\"\u003erealtime movie reviews with Vue.js and Pusher.\u003c/h6\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"columns small-7\"\u003e\n          \u003cmovie\u003e\u003c/movie\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"columns small-5\"\u003e\n          \u003creviews\u003e\u003c/reviews\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  \u003c/div\u003e\n\u003c/template\u003e\n\n\u003cscript\u003e\n  import Movie from './components/Movie'\n  import Reviews from './components/Reviews'\n\n  export default {\n    name: 'app',\n    components: {\n      Movie, Reviews\n    }\n  }\n\u003c/script\u003e\n\n\u003cstyle\u003e\n  #app .heading {\n    font-family: 'Avenir', Helvetica, Arial, sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    text-align: center;\n    color: #2c3e50;\n    margin: 60px 0 30px;\n    border-bottom: 1px solid #eee;\n  }\n\u003c/style\u003e\n```\n\nNow, we can run the app, and see the basic functionalities of retrieving movies and adding reviews!\n\n```\nnpm run dev\n```\n\n\n![realtime-app-vuejs-demo2](//images.contentful.com/1es3ne0caaid/4tI40eF4qQiSs4mUim2CYm/e0a9a66d0443153619f3844f3fec53fa/movie-review-app-vuejs-demo2.gif)\n\n\n\u003e **Note:** To retrieve movies from the public API, the movie titles have to be typed in full. Also, the available movies are limited, so don’t be too disappointed if you don’t find a title you search for. :) \n\n\n\n## Adding realtime updates to the app with Pusher\n\nWe can add realtime functionality to our app so that whenever a review is added, it is updated in real time to all users viewing that movie.\n\nWe will set up a simple backend where we can process post requests with new reviews, and broadcast an event via Pusher whenever a review is added.\n\n### Pusher setup\nHead over to Pusher and [register for a free account](https://pusher.com/signup?plan=sandbox), if you don’t already have one. Then create an app on the [dashboard](https://dashboard.pusher.com/), and copy out the app credentials (App ID, Key, Secret and Cluster). It is super straight-forward.\n\n### Backend setup and broadcasting an event\nWe will build a simple server with Node.js. Let us add some dependencies we will be needing to our `package.json` and pull them in:\n\n```\nnpm install -S express body-parser pusher\n```\n\nNext, we create a `server.js` file, where we will build an [Express](https://expressjs.com/) app:\n\n```\n// ./server.js\n/*\n * Initialise Express\n */\nconst express = require('express');\nconst path = require('path');\nconst app = express();\nconst bodyParser = require('body-parser');\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(express.static(path.join(__dirname)));\n\n/*\n * Initialise Pusher\n */\nconst Pusher = require('pusher');\nconst pusher = new Pusher({\n  appId:'YOUR_PUSHER_APP_ID',\n  key:'YOUR_PUSHER_APP_KEY',\n  secret:'YOUR_PUSHER_SECRET',\n  cluster:'YOUR_CLUSTER'\n});\n\n/*\n * Define post route for creating new reviews\n */\napp.post('/review', (req, res) =\u003e {\n  pusher.trigger('reviews', 'review_added', {review: req.body});\n  res.status(200).send();\n});\n\n/*\n * Run app\n */\nconst port = 5000;\napp.listen(port, () =\u003e { console.log(`App listening on port ${port}!`)});\n```\n\nFirst we initialise an `express` app, then we initialise Pusher with the required credentials. Remember to replace `YOUR_PUSHER_APP_ID`, `YOUR_PUSHER_APP_KEY`, `YOUR_PUSHER_SECRET` and `YOUR_CLUSTER` with your actual details from the Pusher dashboard.\n\nNext, we define a route for creating reviews: `/review` . Whenever this endpoint is hit, we utilise Pusher to trigger a `review_added` event on the `reviews` channel and broadcast the entire payload as the review.\n\nThe `trigger` method has this syntax: `pusher.trigger(channels, event, data, socketId, callback);`. You can read more on it [here](https://pusher.com/docs/server_api_guide/interact_rest_api#publishing_events).\n\nWe are broadcasting on a [public channel](https://pusher.com/docs/client_api_guide/client_public_channels) as we want the data to be accessible to everyone. Pusher also allows broadcasting on [private](https://pusher.com/docs/client_api_guide/client_private_channels) (prefixed by `private-`) and [presence](https://pusher.com/docs/client_api_guide/client_presence_channels) (prefixed by `private-`) channels, which require some form of authentication.\n\n### Creating an API proxy\nTo access our API server from the front-end server created by the Vue Webpack scaffolding, we can create a proxy in `config/index.js`, and run the dev server and the API backend side-by-side. All requests to `/api` will be proxied to the actual backend:\n\n```\n// config/index.js\nmodule.exports = {\n  // ...\n  dev: {\n    // ...\n    proxyTable: {\n        '/api': {\n        target: 'http://localhost:5000', // you should change this, depending on the port your server is running on\n        changeOrigin: true,\n        pathRewrite: {\n          '^/api': ''\n        }\n      }\n    },\n    // ...\n  }\n}\n```\n\nThen, we adjust our `addReview` method to post to the API in `./src/components/Reviews.vue`:\n\n```\n\u003c!-- ./src/components/Review.vue --\u003e\n\u003cscript\u003e\n// ...\nexport default {\n  // ...\n  methods: {\n    addReview () {\n      if (!this.movie || !this.review.reviewer || !this.review.content) {\n        alert('please make sure all fields are not empty')\n        return\n      }\n      let review = {\n        movie_id: this.movie, content: this.review.content, reviewer: this.review.reviewer, time: new Date().toLocaleDateString()\n      }\n      fetch('/api/review', {\n        method: 'post',\n        body: JSON.stringify(review)\n      }).then(() =\u003e {\n        this.review.content = this.review.reviewer = ''\n      })\n    }\n    // ...\n  },\n  // ...\n}\n\u003c/script\u003e\n```\n\n### Listening for events\nFinally, in our view, we can listen for events broadcast by Pusher, and update it with details, whenever a new review is published. First we add the `pusher-js` library:\n\n```\nnpm install -S pusher-js\n```\n\nUpdating `Review.vue`:\n\n```\n\u003c!-- ./src/components/Review.vue --\u003e\n\u003cscript\u003e\nimport Pusher from 'pusher-js' // import Pusher\n\nexport default {\n  // ...\n  created () {\n    // ...\n    this.subscribe()\n  },\n  methods: {\n    // ...\n    subscribe () {\n      let pusher = new Pusher('YOUR_PUSHER_APP_KEY', { cluster: 'YOUR_CLUSTER' })\n      pusher.subscribe('reviews')\n      pusher.bind('review_added', data =\u003e {\n        this.mockReviews.unshift(data.review)\n      })\n    }\n  },\n  // ...\n}\n\u003c/script\u003e\n```\n\nIn the above code, first we import the `Pusher` object from the `pusher-js` library, then we create a `subscribe` method that does the following:\n\n- Subscribes to the `reviews` channel with `pusher.subscribe('reviews')`\n- Listens for the `review_added` event, with `pusher.bind`, which receives a callback function as its second argument. Whenever it receives a broadcast, it triggers the callback function with the data broadcast as the function parameter. We update the view in this callback function by adding the new object to the `mockReviews`  array.\n\n## Bringing it all together\n\nWe can add `node server.js` to our app’s dev/start script so the API server starts along with the server provided by the webpack template:\n\n```\n{\n  // ...\n  \"scripts\": {\n    \"dev\": \"node server.js \u0026 node build/dev-server.js\",\n    \"start\": \"node server.js \u0026 node build/dev-server.js\",\n    // ...\n  }\n}\n```\n\nTo compile and run the complete app:\n\n```\nnpm run dev\n```\n\nVisit [localhost:8080](http://localhost:8080/) to view the app in action!\n\n## Conclusion\n\nIn this tutorial, we have learned how to build a Vue.js app with the webpack template. We also learned how to work with Single File Components and common Vue template directives. Finally, we learned how to make our Vue.js app realtime, utilising the simplicity and power of Pusher.\n\nIn my opinion, Vue.js is a really robust, and yet simple framework. It provides a great base for building robust realtime applications. There is also another great example [here](https://blog.pusher.com/exploring-real-time-apps-with-vuejs-es2016-and-webpack/) of using Vue.js and Pusher for realtime applications.","metaTitle":"Build a realtime app with Vue.js","metaDescription":"Build a movie review application with realtime features using Vue.js with the webpack template. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"7AEyZ87Q4M2qKguEwMkUqc","type":"Entry","createdAt":"2018-02-16T11:25:38.941Z","updatedAt":"2020-06-19T10:13:38.055Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime chart with Vue.js","url":"chart-vuejs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2iE6KIsESkeOEcCmEmCQM8","type":"Entry","createdAt":"2018-02-13T12:06:21.229Z","updatedAt":"2018-02-14T10:08:19.561Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Yomi Eluwande","url":"yomi-eluwande","email":"yomi.eluwande@gmail.com","twitter":"https://twitter.com/yomieluwande","github":"https://github.com/yomete","guestWriter":true}}],"projectRepo":"https://github.com/yomete/realtime-chart-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4E7t0TtVFSAyeeA0ckeYe0","type":"Entry","createdAt":"2018-02-12T15:09:41.899Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Chart","url":"realtime-chart","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6i1HPBqlwsE24YEKwqQyuq","type":"Entry","createdAt":"2018-02-12T15:09:31.050Z","updatedAt":"2018-02-26T12:31:11.548Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Graph","url":"realtime-graph","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2017-06-22","description":"Build an expense and income tracker chart with realtime features. ","prerequisite":"A basic understanding of Vue.js and Node.js are needed to follow this tutorial.","content":"Data has become a very important part of our lives recently and making sense of that data is equally important. There is no point in having data if you cannot track or analyze it, especially if this data has anything to do with finances.\n \nThat’s why we will be building an expense and income tracker chart, with realtime features using [Pusher](http://pusher.com). Our interactive dashboard will have a line chart that displays your income and expenses for each day. You’ll be able to add new expenses and income and see the chart update in real time.\n\nThe dashboard chart will be powered by [Node.js](http://nodejs.org) + [Express](http://expressjs.com) as the backend server and [Vue](http://vuejs.org) + [vue-chartjs](https://github.com/apertureless/vue-chartjs) for the frontend bootstrapped by [vue-cli](https://github.com/vuejs/vue-cli).\n\nHere’s a preview of what we’ll be building:\n\n![realtime-chart-vue-js-pusher-demo](//images.contentful.com/1es3ne0caaid/3vOQp0xLssSCSsOwyuO8sg/e694e558938421dee65e09138e3bc8bc/realtime-chart-vue-js-pusher-demo.gif)\n\n## Scaffolding the app with vue-cli\n\nvue-cli is a simple CLI for scaffolding Vue.js projects. We’ll install `vue-cli` and then use it to bootstrap the app using the webpack template, with the following commands:\n\n```\n    npm install -g vue-cli\n    vue init webpack-simple realtime-chart-pusher\n```\n\n\u003e Tip: The webpack-simple template is a simple webpack + vue-loader setup for quick prototyping. You can read more about that [here](https://github.com/vuejs/vue-cli).\n\n## Setting up Node.js Server\n\nNext thing to do is set up a server that will help us communicate with Pusher. I’m going to assume that both  Node and `npm` are installed on your system. We will then install the dependencies we will be using for the Node server. \n\n```\n    npm install body-parser express nodemon pusher\n```\n\n\u003e Tip: nodemon will watch the files in the directory in which nodemon was started, and if any files change, nodemon will automatically restart your node application.\n\nOne more thing, we are going to need an entry point/file for our Node server. We can do that by creating a `server.js` file in the root of the app.\n\n## Pusher Setup\n\nTo implement the realtime functionality, we’ll need the power of Pusher. If you haven’t already, [sign up for a Pusher account](https://pusher.com/signup) and create a new app. When your new app is created, get your app_id, keys and cluster from the Pusher dashboard.\n\n## App Setup\n\nNow that we have a Pusher account, and have installed the dependencies needed for the Node.js backend, let’s get building.\n\nLet’s write code for the `server.js` file.\n\n```\n    const express = require('express');\n    const path = require('path');\n    const bodyParser = require(\"body-parser\");\n    const app = express();\n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n        appId: 'YOUR_APP_ID',\n        key: 'YOUR_APP_KEY',\n        secret: 'YOUR_APP_SECRET',\n        cluster: 'eu',\n        encrypted: true\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use(express.static(path.join(__dirname + '/app')));\n    \n    app.set('port', (process.env.PORT || 5000));\n    \n    app.listen(app.get('port'), function() {\n        console.log('Node app is running on port', app.get('port'));\n    });\n```\n\nLet’s have a look at what’s happening here. We require Express, path, body-parser and Pusher and we initialized `express()` with `app`. \n\nWe use `body-parser` to extract the entire body portion of an incoming request stream and expose it on `req.body`.\n\nPusher is also initialized with the app credentials and cluster from your dashboard. Make sure to update that, or else the Node server will have no connection to the dashboard. Lastly, the Node server will run on the `5000` port.\n\nNext thing to do is define our app’s route and also add mock data for the expenses and income chart. Update your `server.js` file with the following.\n\n```\n    let expensesList = {\n        data: [\n            {\n                date: \"April 15th 2017\",\n                expense: 100,\n                income: 4000\n            },\n            {\n                date: \"April 22nd 2017\",\n                expense: 500,\n                income: 2000\n            },\n            {\n                date: \"April 24th 2017\",\n                expense: 1000,\n                income: 2300\n            },\n            {\n                date: \"April 29th 2017\",\n                expense: 2000,\n                income: 1234\n            },\n            {\n                date: \"May 1st 2017\",\n                expense: 500,\n                income: 4180\n            },\n            {\n                date: \"May 5th 2017\",\n                expense: 4000,\n                income: 5000\n            },\n        ]\n    }\n```\n\nFirst, we have an `expensesList` object with the data containing expenses and income for particular days.\n\n```\n    app.get('/finances', (req,res) =\u003e {\n        res.send(expensesList);\n    });\n```\n\nThis route simply sends the `expensesList` object as JSON. We use this route to get the data and display on the frontend.\n\n```\n    app.post('/expense/add', (req, res) =\u003e {\n        let expense = Number(req.body.expense)\n        let income = Number(req.body.income)\n        let date = req.body.date;\n    \n        let newExpense  = {\n            date: date,\n            expense: expense,\n            income: income\n        };\n    \n        expensesList.data.push(newExpense);\n    \n        pusher.trigger('finance', 'new-expense', {\n            newExpense: expensesList\n        });\n    \n        res.send({\n            success : true,\n            income: income,\n            expense: expense,\n            date: date,\n            data: expensesList\n        })\n    });\n```\n\nThe `/expense/add` route sure does a lot. It’s a POST route, which means we will be expecting some incoming data (in this case, expense amount and income amount). \n\nWe then push this new income and expense to the existing one, after which we also push the updated `expensesList` to Pusher.\n\nLastly, we send a JSON as a response to the route, containing the latest income, expense, date and updated `expensesList`.\n\nYour final `server.js` should look like this:\n\n```\n    const express = require('express');\n    const path = require('path');\n    const bodyParser = require(\"body-parser\");\n    const app = express();\n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n        appId: '338977',\n        key: '3e6b0e8f2442b34330b7',\n        secret: 'bafd22e1acf4f096c8f2',\n        cluster: 'eu',\n        encrypted: true\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use(express.static(path.join(__dirname + '/app')));\n    \n    app.set('port', (process.env.PORT || 5000));\n    \n    let expensesList = {\n        data: [\n            {\n                date: \"April 15th 2017\",\n                expense: 100,\n                income: 4000\n            },\n            {\n                date: \"April 22nd 2017\",\n                expense: 500,\n                income: 2000\n            },\n            {\n                date: \"April 24th 2017\",\n                expense: 1000,\n                income: 2300\n            },\n            {\n                date: \"April 29th 2017\",\n                expense: 2000,\n                income: 1234\n            },\n            {\n                date: \"May 1st 2017\",\n                expense: 500,\n                income: 4180\n            },\n            {\n                date: \"May 5th 2017\",\n                expense: 4000,\n                income: 5000\n            },\n        ]\n    }\n    \n    app.get('/finances', (req,res) =\u003e {\n        res.send(expensesList);\n    });\n    \n    app.post('/expense/add', (req, res) =\u003e {\n        let expense = Number(req.body.expense)\n        let income = Number(req.body.income)\n        let date = req.body.date;\n    \n        let newExpense  = {\n            date: date,\n            expense: expense,\n            income: income\n        };\n    \n        expensesList.data.push(newExpense);\n    \n        pusher.trigger('finance', 'new-expense', {\n            newExpense: expensesList\n        });\n    \n        res.send({\n            success : true,\n            income: income,\n            expense: expense,\n            date: date,\n            data: expensesList\n        })\n    });\n    \n    app.listen(app.get('port'), function() {\n        console.log('Node app is running on port', app.get('port'));\n    });\n```  \n\n## Building the Frontend (Vue + vue-chartjs)\n\nMost of the frontend work will be done inside the `src/components` folder. Navigate to that directory and you should see a `Hello.vue` file. You can either delete that file or rename to `Home.vue` as we will be needing a `Home.vue` file inside the components folder.\n\n Before we get started with building the chart and displaying it, there are a couple of things we need to do. Open up the `App.vue` file in the `src` folder and replace with the following code:\n\n```\n    \u003ctemplate\u003e\n      \u003cdiv id=\"app\"\u003e\n        \u003chome\u003e\u003c/home\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    import Home from './components/Home' //We are importing the Home component\n    \n    export default {\n      name: 'app',\n      components: {\n        Home\n      }\n    }\n    \u003c/script\u003e\n    \n    \u003cstyle\u003e\n    #app {\n      font-family: 'Avenir', Helvetica, Arial, sans-serif;\n      -webkit-font-smoothing: antialiased;\n      -moz-osx-font-smoothing: grayscale;\n      text-align: center;\n      color: #2c3e50;\n      margin-top: 60px;\n    }\n    \u003c/style\u003e\n```\n\nWe essentially just replaced every instance of `Hello` with `Home` since the Hello component no longer exists.\nNext, we will install [vue-chartjs](https://github.com/apertureless/vue-chartjs), [momentjs](http://momentjs.com), [pusher-js](https://github.com/pusher/pusher-js) (Pusher’s Javascript library) and [axios](https://github.com/mzabriskie/axios) (We’ll use axios to make API requests). and then add them to the Vue.js app. \n\n```\n    npm install axios vue-chartjs pusher-js moment\n```\n\nOnce that’s done, we’ll import axios and register it globally in our app. We can do that by opening the `main.js` file in the `src` folder.\n\n```\n    // src/main.js\n    import Vue from 'vue'\n    import App from './App'\n    import axios from 'axios' // we import axios from installed dependencies\n    \n    Vue.config.productionTip = false\n    \n    Vue.use(axios) // we register axios globally\n    \n    /* eslint-disable no-new */\n    new Vue({\n      el: '#app',\n      template: '\u003cApp/\u003e',\n      components: { App }\n    })\n```\n\nNow that has been done, let’s create a Vue.js component that will help to display our chart. We are going to use this to specify what type of chart we want, configure its appearance and how it behaves.\n\nWe’ll then import this component into the `Home.vue` component and use it there. This is one of the advantages of vue-chartjs, it works by importing the base chart class, which we can then extend. Let’s go ahead and create that component. Create a new file called LineChart.vue inside the `src/components/` folder, open it up and type in this code.\n\n```\n    \u003cscript\u003e\n      import {Line, mixins} from 'vue-chartjs' // We specify what type of chart we want from vue-chartjs and the mixins module\n      const { reactiveProp } = mixins\n      export default Line.extend({ //We are extending the base chart class as mentioned above\n        mixins: [reactiveProp],\n        data () {\n          return {\n            options: { //Chart.js options\n              scales: {\n                yAxes: [{\n                  ticks: {\n                    beginAtZero: true\n                  },\n                  gridLines: {\n                    display: true\n                  }\n                }],\n                xAxes: [ {\n                  gridLines: {\n                    display: false\n                  }\n                }]\n              },\n              legend: {\n                display: true\n              },\n              responsive: true,\n              maintainAspectRatio: false\n            }\n          }\n        },\n        mounted () {\n          // this.chartData is created in the mixin\n          this.renderChart(this.chartData, this.options)\n        }\n      })\n    \u003c/script\u003e\n```\n\nIn the code block above, we imported the Line Chart from vue-chartjs and the mixins module. Chart.js ordinarily does not provide an option for an automatic update whenever a dataset changes but that can be done in vue-chartjs with the help of the following mixins:\n\n1. reactiveProp\n2. reactiveData\n\nThese mixins automatically create `chartData` as a prop or data and add a watcher. If data has changed, the chart will update. Read more [here](https://github.com/apertureless/vue-chartjs).\n\nAlso, the `this.renderChart()` function inside the `mounted` function is responsible for rendering the chart. `this.chartData` is usually an object containing the dataset needed for the chart and we’ll get that by including it as a prop in the Home.vue template, `this.options` contains the options object that determines the appearance and configuration of the chart.\n\nWe now have a LineChart component, but how can we see our chart and test its realtime functionality? We do that by adding the LineChart to our Home.vue component as well as subscribing to our Pusher channel via `pusher-js`.\n\nOpen up the Home.vue file and replace the following:\n\n```\n    \u003ctemplate\u003e\n      \u003cdiv class=\"hello\"\u003e\n        \u003cdiv class=\"container\"\u003e\n          \u003cdiv class=\"row\"\u003e\n            \u003ch2 class=\"title\"\u003eRealtime Chart with Vue and Pusher\u003c/h2\u003e\n            \u003ch3 class=\"subtitle\"\u003eExpense and Income Tracker\u003c/h3\u003e\n            \u003c!--We are using the LineChart component imported below in the script and also setting the chart-data prop to the datacollection object--\u003e\n            \u003cline-chart :chart-data=\"datacollection\"\u003e\u003c/line-chart\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"container\"\u003e\n          \u003cdiv class=\"row\"\u003e\n            \u003cform class=\"form\" @submit.prevent=\"addExpenses\"\u003e\n              \u003ch4\u003eAdd New Entry\u003c/h4\u003e\n              \u003cdiv class=\"form-group\"\u003e\n                \u003clabel\u003eExpenses\u003c/label\u003e\n                \u003cinput class=\"form-control\" placeholder=\"How much did you spend?\" type=\"number\" v-model=\"expenseamount\" required\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"form-group\"\u003e\n                \u003clabel\u003eIncome\u003c/label\u003e\n                \u003cinput class=\"form-control\" placeholder=\"How much did you earn?\" type=\"number\" v-model=\"incomeamount\" required\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"form-group\"\u003e\n                \u003clabel\u003eDate\u003c/label\u003e\n                \u003cinput class=\"form-control\" placeholder=\"Date\" type=\"date\" v-model=\"entrydate\" required\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"form-group\"\u003e\n                \u003cbutton class=\"btn btn-primary\"\u003eAdd New Entry\u003c/button\u003e\n              \u003c/div\u003e\n            \u003c/form\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n      import axios from 'axios'\n      import moment from 'moment'\n      import Pusher from 'pusher-js'\n      import LineChart from '@/components/LineChart'\n    \n      const socket = new Pusher('APP_KEY', {\n        cluster: 'eu',\n        encrypted: true\n      })\n      const channel = socket.subscribe('finance')\n    \n      export default {\n        name: 'home',\n        components: {LineChart},\n        data () {\n          return {\n            expense: null,\n            income: null,\n            date: null,\n            expenseamount: null,\n            incomeamount: null,\n            datacollection: null,\n            entrydate: null\n          }\n        },\n        created () {\n          this.fetchData()\n          this.fillData()\n        },\n        mounted () {\n          this.fillData()\n        },\n        methods: {\n          fillData () {\n          },\n          addExpenses () {\n          },\n          fetchData () {\n          }\n        }\n      }\n    \u003c/script\u003e\n    \n    \n    \u003c!-- Add \"scoped\" attribute to limit CSS to this component only --\u003e\n    \u003cstyle scoped\u003e\n    \n      .title {\n        text-align: center;\n        margin-top: 40px;\n      }\n      .subtitle {\n        text-align: center;\n      }\n      .form {\n        max-width: 600px;\n        width: 100%;\n        margin: 20px auto 0 auto;\n      }\n      .form h4 {\n        text-align: center;\n        margin-bottom: 30px;\n      }\n    \n      h1, h2 {\n      font-weight: normal;\n    }\n    \n    ul {\n      list-style-type: none;\n      padding: 0;\n    }\n    \n    li {\n      display: inline-block;\n      margin: 0 10px;\n    }\n    \n    a {\n      color: #42b983;\n    }\n    \u003c/style\u003e\n```  \n\nIn the code block above, we imported Pusher,  axios, momentjs and the newly created LineChart component and also established a [connection](https://pusher.com/docs/client_api_guide/client_connect) to Pusher from our clientside Javascript. We added the `line-chart` component in our template and also initialized Vue along with three functions (`fillData`, `addExpenses`, `fetchData`) in the method object.\n\nLet’s start with the functions and implement them.\n\n### fillData\n\nThis function gets called immediately the app is [mounted](https://vuejs.org/v2/api/#mounted) and it basically makes an API request to the Node backend ( `/finances`) and retrieves the `expensesList`\n\n```\n      fillData () {\n        axios.get('/finances')\n          .then(response =\u003e {\n            let results = response.data.data\n        \n            let dateresult = results.map(a =\u003e a.date)\n            let expenseresult = results.map(a =\u003e a.expense)\n            let incomeresult = results.map(a =\u003e a.income)\n        \n            this.expense = expenseresult\n            this.income = incomeresult\n            this.date = dateresult\n        \n            this.datacollection = {\n              labels: this.date,\n              datasets: [\n                {\n                  label: 'Expense',\n                  backgroundColor: '#f87979',\n                  data: this.expense\n                },\n                {\n                  label: 'Income',\n                  backgroundColor: '#5bf8bf',\n                  data: this.income\n                }\n              ]\n            }\n          })\n          .catch(error =\u003e {\n            console.log(error)\n          })\n      }\n```\n\nWe are making a GET request to the `/finances` Node.js route which in turn returns the latest `expensesList` and we then manipulate that data with Javascript’s  `.map` and assign it to various variables.\n\n```\n## addExpenses\n    addExpenses () {\n      //We first get the new entries via the v-model we defined on the income and expense input tag\n      let expense = this.expenseamount\n      let income = this.incomeamount\n      let today = moment(this.entrydate).format('MMMM Do YYYY') //Formats the date via momentJS\n      \n      //Sends a POST request to /expense/new along with the expense, income and date.\n      axios.post('/expense/add', {\n          expense: expense,\n          income: income,\n          date: today\n      })\n        .then(response =\u003e {\n          this.expenseamount = ''\n          this.incomeamount = ''\n          //We are bound to new-expense on Pusher and once it detects a change via the new entry we just submitted, we use it to build the Line Chart again.\n          channel.bind('new-expense', function(data) {\n              let results = data.newExpense.data\n      \n              let dateresult = results.map(a =\u003e a.date);\n              let expenseresult = results.map(a =\u003e a.expense);\n              let incomeresult = results.map(a =\u003e a.income);\n              \n              //The instance data are updated here with the latest data gotten from Pusher\n              this.expense = expenseresult\n              this.income = incomeresult\n              this.date = dateresult\n      \n              //The Chart's dataset is updated with the latest data gotten from Pusher\n              this.datacollection = {\n                  labels: this.date,\n                  datasets: [\n                      {\n                          label: 'Expense Charts',\n                          backgroundColor: '#f87979',\n                          data: this.expense\n                      },\n                      {\n                          label: 'Income Charts',\n                          backgroundColor: '#5bf8bf',\n                          data: this.income\n                      }\n                  ]\n              }\n          });\n      })\n    }\n```\n\nThe code block above simply utilizes a POST method route to `/expense/add` to update `expensesList` (Remember `/expense/add` route in the Node server sends the updated `expensesList` to the Pusher Dashboard) along with the income, expense and date data. \n\nIt then uses the data gotten from [Pusher](https://pusher.com/docs/client_api_guide/client_events#bind-events) via `channel.bind` to build the Line Chart again and adds the new entry automatically to the Chart.\n\n\n### fetchData\n\nThis function gets called after the Vue instance is [created](https://vuejs.org/v2/api/#created) and it also listens for changes to the Chart’s dataset via Pusher and automatically updates the Line Chart.\n\n```\n    fetchData () {\n       //We are bound to new-expense on Pusher and it listens for changes to the dataset so it can automatically rebuild the Line Chart in realtime.    \n        channel.bind('new-expense', data =\u003e {\n            let _results = data.newExpense.data\n            let dateresult = _results.map(a =\u003e a.date);\n            let expenseresult = _results.map(a =\u003e a.expense);\n            let incomeresult = _results.map(a =\u003e a.income);\n            \n            //The instance data are updated here with the latest data gotten from Pusher\n            this.expense = expenseresult\n            this.income = incomeresult\n            this.date = dateresult\n    \n            //The Chart's dataset is updated with the latest data gotten from Pusher\n            this.datacollection = {\n                labels: this.date,\n                datasets: [\n                    {\n                        label: 'Expense Charts',\n                        backgroundColor: '#f87979',\n                        data: this.expense\n                    },\n                    {\n                        label: 'Income Charts',\n                        backgroundColor: '#5bf8bf',\n                        data: this.income\n                    }\n                ]\n            }\n        });\n    }\n```\n\nYour final Home.vue file should look like this:\n\n``` language-javascript\n    \u003ctemplate\u003e\n      \u003cdiv class=\"hello\"\u003e\n        \u003cdiv class=\"container\"\u003e\n          \u003cdiv class=\"row\"\u003e\n            \u003ch2 class=\"title\"\u003eRealtime Chart with Vue and Pusher\u003c/h2\u003e\n            \u003ch3 class=\"subtitle\"\u003eExpense and Income Tracker\u003c/h3\u003e\n            \u003cline-chart :chart-data=\"datacollection\"\u003e\u003c/line-chart\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"container\"\u003e\n          \u003cdiv class=\"row\"\u003e\n            \u003cform class=\"form\" @submit.prevent=\"addExpenses\"\u003e\n              \u003ch4\u003eAdd New Entry\u003c/h4\u003e\n              \u003cdiv class=\"form-group\"\u003e\n                \u003clabel\u003eExpenses\u003c/label\u003e\n                \u003cinput class=\"form-control\" placeholder=\"How much did you spend today?\" type=\"number\" v-model=\"expenseamount\" required\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"form-group\"\u003e\n                \u003clabel\u003eIncome\u003c/label\u003e\n                \u003cinput class=\"form-control\" placeholder=\"How much did you earn today?\" type=\"number\" v-model=\"incomeamount\" required\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"form-group\"\u003e\n                \u003cbutton class=\"btn btn-primary\"\u003eAdd New Entry\u003c/button\u003e\n              \u003c/div\u003e\n            \u003c/form\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n      import axios from 'axios'\n      import moment from 'moment'\n      import Pusher from 'pusher-js'\n      import LineChart from '@/components/LineChart'\n    \n      const socket = new Pusher('3e6b0e8f2442b34330b7', {\n        cluster: 'eu',\n        encrypted: true\n      })\n      const channel = socket.subscribe('finance')\n    \n      export default {\n        name: 'home',\n        components: {LineChart},\n        data () {\n          return {\n            expense: null,\n            income: null,\n            date: null,\n            expenseamount: null,\n            incomeamount: null,\n            datacollection: null\n          }\n        },\n        created () {\n          this.fetchData()\n          this.fillData()\n        },\n        mounted () {\n          this.fillData()\n        },\n        methods: {\n          fillData () {\n            axios.get('/finances')\n              .then(response =\u003e {\n                let results = response.data.data\n    \n                let dateresult = results.map(a =\u003e a.date)\n                let expenseresult = results.map(a =\u003e a.expense)\n                let incomeresult = results.map(a =\u003e a.income)\n    \n                this.expense = expenseresult\n                this.income = incomeresult\n                this.date = dateresult\n    \n                this.datacollection = {\n                  labels: this.date,\n                  datasets: [\n                    {\n                      label: 'Expense',\n                      backgroundColor: '#f87979',\n                      data: this.expense\n                    },\n                    {\n                      label: 'Income',\n                      backgroundColor: '#5bf8bf',\n                      data: this.income\n                    }\n                  ]\n                }\n              })\n              .catch(error =\u003e {\n                console.log(error)\n              })\n          },\n          addExpenses () {\n            let expense = this.expenseamount\n            let income = this.incomeamount\n            let today = moment().format('MMMM Do YYYY')\n            axios.post('/expense/add', {\n              expense: expense,\n              income: income,\n              date: today\n            })\n              .then(response =\u003e {\n                this.expenseamount = ''\n                this.incomeamount = ''\n                channel.bind('new-expense', function (data) {\n                  let results = data.newExpense.data\n    \n                  let dateresult = results.map(a =\u003e a.date)\n                  let expenseresult = results.map(a =\u003e a.expense)\n                  let incomeresult = results.map(a =\u003e a.income)\n    \n                  this.expense = expenseresult\n                  this.income = incomeresult\n                  this.date = dateresult\n    \n                  this.datacollection = {\n                    labels: this.date,\n                    datasets: [\n                      {\n                        label: 'Expense',\n                        backgroundColor: 'transparent',\n                        pointBorderColor: '#f87979',\n                        data: this.expense\n                      },\n                      {\n                        label: 'Income',\n                        backgroundColor: 'transparent',\n                        pointBorderColor: '#5bf8bf',\n                        data: this.income\n                      }\n                    ]\n                  }\n                })\n              })\n              .catch(error =\u003e {\n                console.log(error)\n              })\n          },\n          fetchData () {\n            channel.bind('new-expense', data =\u003e {\n              let results = data.newExpense.data\n              let dateresult = results.map(a =\u003e a.date)\n              let expenseresult = results.map(a =\u003e a.expense)\n              let incomeresult = results.map(a =\u003e a.income)\n    \n              this.expense = expenseresult\n              this.income = incomeresult\n              this.date = dateresult\n    \n              this.datacollection = {\n                labels: this.date,\n                datasets: [\n                  {\n                    label: 'Expense Charts',\n                    backgroundColor: '#f87979',\n                    data: this.expense\n                  },\n                  {\n                    label: 'Income Charts',\n                    backgroundColor: '#5bf8bf',\n                    data: this.income\n                  }\n                ]\n              }\n            })\n          }\n        }\n      }\n    \u003c/script\u003e\n    \n    \n    \u003c!-- Add \"scoped\" attribute to limit CSS to this component only --\u003e\n    \u003cstyle scoped\u003e\n    \n      .title {\n        text-align: center;\n        margin-top: 40px;\n      }\n      .subtitle {\n        text-align: center;\n      }\n      .form {\n        max-width: 600px;\n        width: 100%;\n        margin: 20px auto 0 auto;\n      }\n      .form h4 {\n        text-align: center;\n        margin-bottom: 30px;\n      }\n    \n      h1, h2 {\n      font-weight: normal;\n    }\n    \n    ul {\n      list-style-type: none;\n      padding: 0;\n    }\n    \n    li {\n      display: inline-block;\n      margin: 0 10px;\n    }\n    \n    a {\n      color: #42b983;\n    }\n    \u003c/style\u003e\n```\n\n## One more thing!\n\nBefore we can run our app, we need to do something called [API proxying](https://vuejs-templates.github.io/webpack/proxy.html). API proxying allows us to integrate our vue-cli app with a backend server (Node server in our case). This means we can run the dev server and the API backend side-by-side and let the dev server proxy all API requests to the actual backend.\n\nWe can enable API proxying by editing the `dev.proxyTable` option in `config/index.js`. You can replace with the code below.\n\n```\n    proxyTable: {\n      '/expense/add': {\n        target: 'http://localhost:5000',\n        changeOrigin: true\n      },\n      '/finances': {\n        target: 'http://localhost:5000',\n        changeOrigin: true\n      },\n    }\n```\n\nAfter that has been done, we are finally ready to see our app and you can run `npm run dev` to start the app.\n\nThat’s it! At this point, you should have a realtime chart that updates in realtime.\n\n## Conclusion\n\nWe’ve seen how to build a basic Line Chart with ChartJS in Vue with the help of vue-chartjs and also added realtime features thanks to Pusher. \n\nThen we saw how to use `reactiveProps` to make ChartJS update its dataset if there’s been a change in the dataset. We also saw how to use Pusher to trigger events on the server and listen for them on the client side using JS.\n\nThe use-cases of combining Vue and Pusher are numerous, another example can be seen [here](https://blog.pusher.com/exploring-real-time-apps-with-vuejs-es2016-and-webpack/). If you are interested in seeing other methods in which realtime charts can be made, you can check [here](https://blog.pusher.com/build-realtime-graph-using-javascript/), and [here](https://blog.pusher.com/build-realtime-chart-using-laravel-pusher/).\n\nHave you built anything cool with Pusher recently, a chart maybe? Let’s know in the comment below.","metaTitle":"Build a realtime chart with Vue.js","metaDescription":"Build an expense and income tracker line chart that updates in realtime using Vue.js. Create a line chart that displays your income and expenses fdaily. You’ll be able to add new expenses and income and see the chart  live updates."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2pB3EQAPBaqiSOuAk6m6WA","type":"Entry","createdAt":"2018-02-22T15:02:41.593Z","updatedAt":"2018-02-28T14:11:46.908Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a typing indicator in Swift","url":"typing-indicator-swift","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/anonymous-ios-app-pusher/tree/v1.1.2","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2017-06-12","description":"Build a typing indicator for you iOS app using Swift, Node.js and Pusher for the realtime features.","prerequisite":"A basic understanding of Swift and Node.js is needed to follow this tutorial.","content":"In a previous tutorial we covered [How to create a public anonymous iOS chat application](https://blog.pusher.com/create-anonymous-public-ios-chat-app/). We were able to create the application using Swift and Pusher so the application won't save state.\n\nIn this article, we are going to expand that application and add a typing indicator to the application. If you have not read the previous article, I suggest you do so, but if you do not want to then you can grab the [source code to the article here](https://github.com/neoighodaro/anonymous-ios-app-pusher/tree/v1.0) and follow along.\n\n## What we will be building\n\nAs mentioned earlier, we will be adding a typing indicator to our application. This feature indicates that someone is typing a message on the other end - just like WhatsApp, WeChat or instant messaging clients do.\n\n![typing-indicator-swift-demo](//images.contentful.com/1es3ne0caaid/4Yz3GLLR8A6MwmeokuWusC/e9e8bcb3edb949803c463cdb88ab3551/typing-indicator-swift-demo.gif)\n\n## Setting up the application\n\nOpen the root directory of the source code you downloaded above, then open the `.xcworkspace` file included in the directory; this should launch XCode. Now we already have a storyboard. In the story board we have an entry controller, and this has a button to login anonymously. Clicking the button leads to the navigation controller which in turn loads the `ChatViewController`.\n\n![typing-indicator-swift-appflow](//images.contentful.com/1es3ne0caaid/LWiPdnYJqeWqmSkg4KoUk/608ba4bb44c7ba56fd86c86aa5dc407e/typing-indicator-swift-appflow.png)\n\n\u003e **Note**: To test the application you might need to customize the Pusher application credentials in the `ChatViewController` and the `index.js` file in the web app directory. You will also need to run `node index.js` in the webapp directory to start a local web server.\n\n## What we need to do\n\nTo make this application do what we need it to do we need to do some new things. First, we will add a new endpoint to the web server application that will trigger Pusher once someone starts typing. We will add a new listener in the application that listens in for when someone is typing and finally we will trigger the new endpoint when someone is entering text into the 'New message' field.\n\n## Adding the endpoint on the web server\n\nNow we want to add an endpoint on the web server that will trigger Pusher events every time someone is typing. Open the `index.js` in the `webapp` directory on your editor of choice. You can now add the `/typing` endpoint to the code as shown below:\n\n```\napp.post('/typing', function (req, res) {\n  var message = {\n    sender: req.body.sender,\n    text: req.body.sender + \" is typing...\"\n  };\n  pusher.trigger('chatroom', 'user_typing', message);\n  res.json({success: 200})\n})\n```\n\nSo now, every time we hit the `/typing` endpoint, it should trigger Pusher with the message `senderId is typing…`. Great.\n\n### Triggering Pusher from the application when typing\n\nThe next thing to do would be to trigger Pusher every time the current user is typing on the application. This would basically hit the `/typing` endpoint we just created with the `username` as the `sender` parameter.\n\nTo make sure we keep our code DRY, we have refactored the code a little. We have abstracted the part that hits our endpoint into one method called `hitEndpoint` and we use that now whenever we want to hit the endpoint.\n\n```\nvar isBusySendingEvent : Bool = false\n\nprivate func postMessage(name: String, message: String) {\n    let params: Parameters = [\"sender\": name, \"text\": message]\n    hitEndpoint(url: ChatViewController.API_ENDPOINT + \"/messages\", parameters: params)\n}\n\nprivate func sendIsTypingEvent(forUser: String) {\n    if isBusySendingEvent == false {\n        isBusySendingEvent = true\n        let params: Parameters = [\"sender\": forUser]\n        hitEndpoint(url: ChatViewController.API_ENDPOINT + \"/typing\", parameters: params)\n    } else {\n        print(\"Still sending something\")\n    }\n}\n\nprivate func hitEndpoint(url: String, parameters: Parameters) {\n    Alamofire.request(url, method: .post, parameters: parameters).validate().responseJSON { response in\n        switch response.result {\n        case .success:\n            self.isBusySendingEvent = false\n            // Succeeded, do something\n            print(\"Succeeded\")\n        case .failure(let error):\n            self.isBusySendingEvent = false\n            // Failed, do something\n            print(error)\n        }\n    }\n}\n\noverride func textViewDidChange(_ textView: UITextView) {\n    super.textViewDidChange(textView)\n    sendIsTypingEvent(forUser: senderId)\n}\n```\n\nIn the `sendIsTypingEvent` we have a quick flag that we use to stop the application from sending too many requests, especially if the last one has not been fulfilled. Because we trigger this method every time someone changes something on the text field this check is necessary.\n\n### Adding a listener to pick up when others are typing\n\nThe last piece of the puzzle is adding a listener that picks up when someone else is typing and changes the view controller's title bar to `someone is typing…`. To do this, we would use the `subscribe` method on the `PusherChannel` object.\n\n```\noverride func viewDidLoad() {\n    super.viewDidLoad()\n\n    let n = Int(arc4random_uniform(1000))\n\n    senderId = \"anonymous\" + String(n)\n    senderDisplayName = senderId\n\n    inputToolbar.contentView.leftBarButtonItem = nil\n\n    incomingBubble = JSQMessagesBubbleImageFactory().incomingMessagesBubbleImage(with: UIColor.jsq_messageBubbleBlue())\n    outgoingBubble = JSQMessagesBubbleImageFactory().outgoingMessagesBubbleImage(with: UIColor.jsq_messageBubbleGreen())\n\n    collectionView!.collectionViewLayout.incomingAvatarViewSize = CGSize.zero\n    collectionView!.collectionViewLayout.outgoingAvatarViewSize = CGSize.zero\n\n    automaticallyScrollsToMostRecentMessage = true\n\n    collectionView?.reloadData()\n    collectionView?.layoutIfNeeded()\n\n    listenForNewMessages()\n\n    isTypingEventLifetime = Timer.scheduledTimer(timeInterval: 2.0,\n                                                 target: self,\n                                                 selector: #selector(isTypingEventExpireAction),\n                                                 userInfo: nil,\n                                                 repeats: true)\n\n}\n\nprivate func listenForNewMessages() {\n    let options = PusherClientOptions(\n        host: .cluster(\"PUSHER_CLUSTER\")\n    )\n\n    pusher = Pusher(key: \"PUSHER_ID\", options: options)\n\n    let channel = pusher.subscribe(\"chatroom\")\n\n    channel.bind(eventName: \"new_message\", callback: { (data: Any?) -\u003e Void in\n        if let data = data as? [String: AnyObject] {\n            let author = data[\"sender\"] as! String\n\n            if author != self.senderId {\n                let text = data[\"text\"] as! String\n                self.addMessage(senderId: author, name: author, text: text)\n                self.finishReceivingMessage(animated: true)\n            }\n        }\n    })\n\n    channel.bind(eventName: \"user_typing\", callback: { (data: Any?) -\u003e Void in\n        if let data = data as? [String: AnyObject] {\n            let author = data[\"sender\"] as! String\n            if author != self.senderId {\n                let text = data[\"text\"] as! String\n                self.navigationItem.title = text\n            }\n        }\n    })\n\n    pusher.connect()\n}\n\npublic func isTypingEventExpireAction() {\n    navigationItem.title = \"AnonChat\"\n}\n```\n\nAbove we made some changes. In the `listenForNewMessages` we added a new subscription to the `user_typing` event, and in the `viewDidLoad` method, we added a timer that just runs on intervals and resets the title of the application. So basically, the subscriber picks up the changes in the event from Pusher, updates the navigation title, then the timer resets the title every x seconds.\n\nWith this we have completed our task and we should have the typing indicator feature working.\n\n## Conclusion\n\nThere are many improvements you can obviously add to make the experience a little more seamless, but this demonstrates how the feature can be implemented easily into your iOS application.","metaTitle":"Build a typing indicator in Swift","metaDescription":"In this this tutorial you'll learn how to add a typing indicator to your iOS app: it indicates that someone is typing a message on the other end. You'll use Swift, Node.js and Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"7gc0TmSogwi6kwmOWAqmO2","type":"Entry","createdAt":"2018-02-22T15:02:42.072Z","updatedAt":"2018-02-28T11:14:21.797Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live poll using Node.js","url":"live-poll-nodejs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/pusher-poll-demo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6N8l3o0yD6QK2ooI2ME8wW","type":"Entry","createdAt":"2018-02-12T15:09:06.190Z","updatedAt":"2018-02-26T12:31:10.478Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Polls","url":"live-polls","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}}],"reviewDate":"2017-06-06","description":"Make a simple realtime poll app with Pusher and JavaScript in 5 steps.","prerequisite":"A basic understanding of JavaScript and HTML is needed to follow this tutorial.","content":"An electronic poll simplifies the way polls are carried out and aggregates data in realtime. (These days, nobody needs to take a bus to town just to cast a vote for their favorite soccer team!) As voters cast their votes, every connected client that is authorised to see the poll data should see the votes as they come in.\n\nThis article explains how to seamlessly add realtime features to your polling app using Pusher while visualising the data on a chart using [CanvasJS](http://canvasjs.com), in just 5 steps. \n\nSome of the tools we will be using to build our app are:\n\n- **Node**: JavaScript on a server. Node will handle all our server related needs.\n- **Express**: Node utility for handling HTTP requests via routes\n- **Body Parser**: Attaches the request payload on Express’s `req`, hence `req.body` stores this payload for each request.\n- **Pusher**: Pub/Sub pattern for building realtime solutions.\n- **CanvasJS**: A UI library to facilitate data visualization with JavaScript on the DOM.\n\nTogether, we will build a minimalist app where users can select their favourite JavaScript framework. Our app will also include an admin page where the survey owner can see the polls come in.\n\nLet's walk through the steps one by one:\n\n## 1. Polling screen\n\nFirst things first. The survey participants or voters (call them whatever fits your context) need to be served with a polling screen. This screen contains clickable items from which they are asked to pick an option.\n\n![live-poll-nodejs-screen](//images.contentful.com/1es3ne0caaid/HnX3zUqt68kaiC88ywM4g/aac416bfb9c0eec80c92c9402f3c8eed/live-poll-nodejs-screen.png)\n\nTry not to get personal with the options, we're just making a realtime demo. The following is the HTML behind the scenes:\n\n```\n\u003c!-- ./index.html --\u003e\n\u003cdiv class=\"main\"\u003e\n      \u003cdiv class=\"container\"\u003e\n        \u003ch1\u003ePick your favorite\u003c/h1\u003e\n        \u003cdiv class=\"col-md-8 col-md-offset-2\"\u003e\n          \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-md-6\"\u003e\n              \u003cdiv class=\"poll-logo angular\"\u003e\n                \u003cimg src=\"images/angular.svg\" alt=\"\"\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-md-6\"\u003e\n              \u003cdiv class=\"poll-logo ember\"\u003e\n                \u003cimg src=\"images/ember.svg\" alt=\"\"\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-md-6\"\u003e\n              \u003cdiv class=\"poll-logo react\"\u003e\n                \u003cimg src=\"images/react.svg\" alt=\"\"\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-md-6\"\u003e\n              \u003cdiv class=\"poll-logo vue\"\u003e\n                \u003cimg src=\"images/vue.svg\" alt=\"\"\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n    \u003cdiv class=\"js-logo\"\u003e\n      \u003cimg src=\"images/js.png\" alt=\"\"\u003e\n    \u003c/div\u003e\n    \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.16.2/axios.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"app.js\"\u003e\u003c/script\u003e\n```\n\nThe HTML renders the polling cards and imports `axios` and our custom `app.js` file. `axios` will be used to make HTTP calls to a server we will create. This server is responsible for triggering/emitting realtime events using Pusher.\n\n## 2. Send vote requests\n\nWhen a user clicks on their chosen option, we want to react with a response. The response would be to trigger a HTTP request. This request is expected to create a Pusher event, but we are yet to implement that:\n\n```\n// ./app.js\nwindow.addEventListener('load', () =\u003e {\n  var app = {\n    pollLogo: document.querySelectorAll('.poll-logo'),\n    frameworks: ['Angular', 'Ember', 'React', 'Vue']\n  }\n \n  // Sends a POST request to the\n  // server using axios\n  app.handlePollEvent = function(event, index) {\n    const framework = this.frameworks[index];\n    axios.post('http://localhost:3000/vote', {framework: framework})\n    .then((data) =\u003e {\n      alert (`Voted ${framework}`);\n    })\n  }\n\n  // Sets up click events for\n  // all the cards on the DOM\n  app.setup = function() {\n    this.pollLogo.forEach((pollBox, index) =\u003e {\n      pollBox.addEventListener('click', (event) =\u003e {\n        // Calls the event handler\n        this.handlePollEvent(event, index)\n      }, true)\n    })\n  }\n\n  app.setup();\n\n})\n```\n\nWhen each of the cards are clicked, `handlePollEvent` is called with the right values as argument depending on the index. The method, in turn, sends the framework name to the server as payload via the `/vote` (yet to be implemented) endpoint.\n\n## 3. Set up a Pusher account and app\n\nBefore we jump right into setting up a server where Pusher will trigger events based on the request sent from the client, you’ll need to create a Pusher account and app, if you don’t already have one:\n\n1. [Sign up](https://pusher.com/sign_in) for a free Pusher account.\n\n2. Create a new app by selecting **Apps** on the sidebar and clicking **Create New** button on the bottom of the sidebar.\n\n3. Configure your app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher into for a better setup experience. \n\n4. You can retrieve your app credentials from the **App Keys** tab\n\n\n\n## 4. Realtime server\n\nThe easiest way to set up a Node server is by using the Express project generator. You need to install this generator globally on your machine using npm:\n\n```\nnpm install express-generator -g\n```\n\nThe generator is a scaffold tool, therefore it’s useless after installation unless we use its command to create a new Express app. We can do that by running the following command:\n\n```\nexpress poll-server\n```\n\nThis generates a few helpful files including the important entry point (`app.js`) and routes (found in the `routes` folder).\n\nWe just need one route to get things moving: a `/vote` route which is where the client is sending a post request. \n\nCreate a new `vote.js` file in the routes folder with the following logic:\n\n```\n// ./routes/votes.js\nvar express = require('express');\nvar Pusher = require('pusher');\n\nvar router = express.Router();\nvar pusher = new Pusher({\n  appId: '\u003cAPP_ID\u003e',\n  key: '\u003cAPP_KEY\u003e',\n  secret: '\u003cAPP_SECRET\u003e',\n  cluster: '\u003cAPP_CLUSTER\u003e',\n  encrypted: true\n});\n// /* Vote\nrouter.post('/', function(req, res, next) {\n  pusher.trigger('poll', 'vote', {\n    points: 10,\n    framework: req.body.framework\n  });\n  res.send('Voted');\n});\nmodule.exports = router;\n```\n\nFor the above snippet to run successfully, we need to install the Pusher SDK using npm. The module is already used but it’s not installed yet:\n\n```\nnpm install --save pusher\n```\n\n- At the top of the file, we import Express and Pusher, then configure a route with Express and a Pusher instance with the credentials we retrieved from the Pusher dashboard.\n- The configured router is used to create a `POST /vote`  route which, when hit, triggers a Pusher event. The trigger is achieved using the `trigger` method which takes the trigger identifier(`poll`), an event name (`vote`), and a payload.\n- The payload can be any value, but in this case we have a JS object. This object contains the points for each vote and the name of the option (in this case, a framework) being voted. The name of the framework is sent from the client and received by the server using `req.body.framework` .\n- We still go ahead to respond with “Voted” string so we don’t leave the server hanging in the middle of an incomplete request.\n\nIn the `app.js` file, we need to import the route we have just created and add it as part of our Express middleware. We also need to configure CORS because our client lives in a different domain, therefore the requests will NOT be made from the same domain:\n\n```\n// ./app.js\n```\n\n```\n// Other Imports\nvar vote = require('./routes/vote');\n\n// CORS\napp.all('/*', function(req, res, next) {\n  // CORS headers\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  // Only allow POST requests\n  res.header('Access-Control-Allow-Methods', 'POST');\n  // Set custom headers for CORS\n  res.header('Access-Control-Allow-Headers', 'Content-type,Accept,X-Access-Token,X-Key');\n});\n\n// Ensure that the CORS configuration\n// above comes before the route middleware\n// below\napp.use('/vote', vote);\n\nmodule.exports = app;\n```\n\n\n## 5. Connect a dashboard\n\nThe last step is the most interesting aspect of the example. We will create another page in the browser which displays a chart of the votes for each framework. We intend to access this dashboard via the client domain but on the `/admin.html` route.\n\nHere is the markup for the chart:\n\n```\n\u003c!-- ./admin.html --\u003e\n\u003cdiv class=\"main\"\u003e\n  \u003cdiv class=\"container\"\u003e\n    \u003ch1\u003eChart\u003c/h1\u003e\n    \u003cdiv id=\"chartContainer\" style=\"height: 300px; width: 100%;\"\u003e\u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e\n\u003cscript src=\"https://js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/canvasjs/1.7.0/canvasjs.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"app.js\"\u003e\u003c/script\u003e\n```\n\n- The div with the id `charContainer` is where we will mount the chart.\n- We have imported Pusher and Canvas JS (for the chart) via CDN as well as the same `app.js` that our home page uses.\n\n\n![live-poll-nodejs-chart](//images.contentful.com/1es3ne0caaid/6pr3Ovcm9UwA2G6ccQkCU4/3dfcb6897465028e40414225319d8e80/live-poll-nodejs-chart.png)\n\n\nWe need to initialize the chart with a default dataset. Because this is a simple example, we won’t bother with persisted data, rather we can just start at empty (zeros):\n\n```\n// ./app.js\nwindow.addEventListener('load', () =\u003e {\n  // Event handlers for\n  // vote cards was here.\n  // Just truncated for brevity\n  \n  let dataPoints = [\n      { label: \"Angular\", y: 0 },\n      { label: \"Ember\", y: 0 },\n      { label: \"React\", y: 0 },\n      { label: \"Vue\", y: 0 },\n    ]\n    const chartContainer = document.querySelector('#chartContainer');\n    \n    if(chartContainer) {\n      var chart = new CanvasJS.Chart(\"chartContainer\",\n        {\n          animationEnabled: true,\n          theme: \"theme2\",\n          data: [\n          {\n            type: \"column\",\n            dataPoints: dataPoints\n          }\n          ]\n        });\n      chart.render();\n    }\n    \n    // Here:\n    // - Configure Pusher\n    // - Subscribe to Pusher events\n    // - Update chart\n})\n```\n\n- The `dataPoints` array is the data source for the chart. The objects in the array have a uniform structure of `label` which stores the frameworks and `y` which stores the points.\n- We check if the `chartContainer` exists before creating the chart because the `index.html` file doesn’t have a ``chartContainer``.\n- We use the `Chart` constructor function to create a chart by passing the configuration for the chart which includes the data. The chart is rendered by calling `render()` on constructor function instance.\n\nWe can start listening to Pusher events in the comment placeholder at the end:\n\n```\n// ./app.js\n// ...continued\n// Allow information to be\n// logged to console\nPusher.logToConsole = true;\n\n// Configure Pusher instance\nvar pusher = new Pusher('\u003cAPP_KEY\u003e', {\n  cluster: '\u003cAPP_CLUSTER\u003e',\n  encrypted: true\n});\n\n// Subscribe to poll trigger\nvar channel = pusher.subscribe('poll');\n// Listen to vote event\nchannel.bind('vote', function(data) {\n  dataPoints = dataPoints.map(x =\u003e {\n    if(x.label == data.framework) {\n      // VOTE\n      x.y += data.points;\n      return x\n    } else {\n      return x\n    }\n  });\n  \n  // Re-render chart\n  chart.render()\n});\n```\n\n- First we ask Pusher to log every information about realtime transfers to the console. You can leave that out in production.\n- We then configure Pusher with our credentials by passing the app key and config object as arguments to the Pusher constructor function.\n- The name of our trigger is `poll`, so we subscribe to it and listen to its `vote` event. Hence, when the event is triggered, we update the `dataPoints` variable and re-render the chart with `render()`\n\n\n![live-poll-nodejs-demo](//images.contentful.com/1es3ne0caaid/ppleupsAdqcGy0eCMccQy/8a66aca285edf48569667d273b3218c7/live-poll-nodejs-demo.gif)\n\n## Conclusion\n\nWe didn’t spend time building a full app with identity and all, but you should now understand the model for building a fully fleshed poll system. We just made a simple realtime poll app with Pusher showing how powerful Pusher can be.","metaTitle":"Build a live poll using Node.js","metaDescription":"Seamlessly add realtime features to your polling app using Pusher while visualising the data on a chart using CanvasJS in just 5 steps. "}}],"defaultValue":"Channels \u0026 Node.js","queryType":"tag","pages":15,"route":"/tutorials","query":{"product":"Channels","tag":"Node.js","page":"13"}}},"page":"/tutorials","query":{"product":"Channels","tag":"Node.js","page":"13"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=Node.js&page=13 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:39:23 GMT -->
</html>