<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=Node.js&page=3 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:30:44 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">133</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels &amp; Node.js</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorials124f.html?tag=Node.js" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsd3fd.html?product=Beams&amp;tag=Node.js" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials0e67.html?product=Channels" class="css-a3lpv2 e137azhw1"><svg fill="#C223CE" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#C223CE" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Channels &amp; Node.js"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/live-node-rethinkdb.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li></ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">How to build a realtime application with Node.js and RethinkDB</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This tutorial introduces RethinkDB, a sophisticated database solution. It provides a practical example with Node.js and ...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/code-playground-react.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Collaboration<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">How to build a live code playground with React</h3><p class="css-k12xad e5jrto45">In this tutorial you will create a collaborative web coding playground, using a simple Node server, and React for the fr...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/react-native-pong-game.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Gaming</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a two-player Pong game with React Native</h3><p class="css-k12xad e5jrto45">This in-depth tutorial will show you how to create a complete two-player mobile Pong game using React Native. You will u...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-map-react.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Maps</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live map application with React</h3><p class="css-k12xad e5jrto45">In this tutorial, you will build a web application using React, Node.js and Google Maps. Users will be able to see their...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/messaging-queue-node-go.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Pusher Channels as an alternative messaging queue</h3><p class="css-k12xad e5jrto45">Use Node.js, Golang and Pusher Channels to create a message queue backend. The demo application features a login service...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/score-feed-chrome-extension.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">HTML<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Feeds</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live score feed Chrome extension</h3><p class="css-k12xad e5jrto45">This brief tutorial guides you through creating a simple Chrome extension. It hooks into a Node backend to provide a liv...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/comment-voting-react-node.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a comment voting system with React and Node</h3><p class="css-k12xad e5jrto45">This tutorial will show you how to create a simple comments ranking system using React and Node. Users will be able to c...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/react-zapier-tweet-stream.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">How to stream user tweets with Zapier and React</h3><p class="css-k12xad e5jrto45">Learn how to use Zapier, together with Pusher Channels, to create a live tweet stream. You will build a simple web app w...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/service-discovery-microservices.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Service discovery in a microservice architecture with Pusher Channels</h3><p class="css-k12xad e5jrto45">Learn how to use Pusher Channels to support service discovery when creating a microservices architecture. This tutorial ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials64f1.html?product=Channels&amp;tag=Node.js&amp;page=2" class="css-5s6711 edg0byb1">Prev</a><a href="tutorialsc190.html?product=Channels&amp;tag=Node.js&amp;page=1" class="css-5s6711 edg0byb1">1</a><a href="tutorials64f1.html?product=Channels&amp;tag=Node.js&amp;page=2" class="css-5s6711 edg0byb1">2</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials958e.html?product=Channels&amp;tag=Node.js&amp;page=3" class="css-2wakph edg0byb1">3</a><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorials7a7b.html?product=Channels&amp;tag=Node.js&amp;page=4" class="css-za1ua3 edg0byb1">4</a><a href="tutorials4a56.html?product=Channels&amp;tag=Node.js&amp;page=5" class="css-za1ua3 edg0byb1">5</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials6b27.html?product=Channels&amp;tag=Node.js&amp;page=15" class="css-5s6711 edg0byb1">15</a><a href="tutorials7a7b.html?product=Channels&amp;tag=Node.js&amp;page=4" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":133,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rMpEfIF72i4kymOIUew08","type":"Entry","createdAt":"2019-03-11T17:49:00.199Z","updatedAt":"2019-03-11T17:49:00.199Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"How to build a realtime application with Node.js and RethinkDB","url":"live-node-rethinkdb","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3j821hA7aMgOiUEaO4Q8y6","type":"Entry","createdAt":"2018-02-26T19:00:03.819Z","updatedAt":"2018-03-20T12:22:11.602Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Shalvah Adebayo","url":"shalvah-adebayo","email":"shalvah.adebayo@gmail.com","twitter":"https://twitter.com/theshalvah","github":"https://shalvah.me/","guestWriter":true}}],"projectRepo":"https://github.com/shalvah/rethinkdb-pusher-node-demo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2019-03-11","description":"This tutorial introduces RethinkDB, a sophisticated database solution. It provides a practical example with Node.js and Handlebars, constructing a simple blog post feed, to demonstrate the realtime capabilities of RethinkDB.","prerequisite":"You will need Node 8.10+ and RethinkDB 2.3.6+ installed on your machine.","content":"In this tutorial, we’ll explore RethinkDB, a database system that was built with realtime functionality in mind. We’ll build a social app that pairs RethinkDB with Pusher Channels to bring an improved experience to users. Let’s go!\n\nIn traditional web apps, database systems were used as “dumb” data stores—they only held data (usually textual or binary) for you and gave it back when you asked nicely. But over time, database systems have become more and more powerful. They can hold data in a wide range of formats and perform actions on (or with) the data. \n\n## Prerequisites\n1. [Node.js](http://nodejs.org) 8.10.0 or higher\n2. RethinkDB 2.3.6 or higher. [Get it here.](https://rethinkdb.com/docs/install)\n3. A [Pusher account](http://pusher.com/signup).\n\n\n## Setting up\n\nWe’ll start by using the [express application generator](https://expressjs.com/en/starter/generator.html):\n\n```\n    # if you don't already have it installed\n    npm install express-generator -g\n    \n    # create a new express app with view engine set to Handlebars (hbs)\n    express --view=hbs rethinkdb-pusher-nodejs-demo\n    cd rethinkdb-pusher-nodejs-demo \u0026\u0026 npm install\n```\n\nThen we’ll add our dependencies:\n\n```\n    npm install dotenv rethinkdb pusher\n```\n\nWe'll use **dotenv** to load sensitive data (our Pusher app credentials) from a `.env` file. The **rethinkdb** and **pusher** libraries are the Node.js clients for communicating with RethinkDB and Pusher’s realtime APIs respectively.\n\n\n## What is RethinkDB?\n\n[RethinkDB](https://rethinkdb.com) is an open-source database built for realtime applications. It aims to improve application performance and simplify the developer experience by pushing data to the app, rather than having it poll the database for changes. RethinkDB is built to do this in an efficient and scalable way.\n\nRethinkDB is a NoSQL database, so it stores its data as JSON documents. However, it incorporates concepts from SQL (such as its query language, Rethink Query Language, or ReQL) to create an even better experience for its users.  RethinkDB is used by thousands of developers, including NASA and Social Radar.\n\nWe’ll build an application where people can create posts and all posts can be seen in realtime on the home page without having to reload the page. Our application will rely on RethinkDB to inform us of new posts in the database and use Pusher to push these changes to the frontend. Let’s get started.\n\n\n## Building the feed\n\nThe feed (the home page) will show a list of all posts, with the newest first. Let’s set up the route and view for this page. In the route, we retrieve all posts from the database and pass them to the view. Replace the code in `routes/index.js` with this:\n\n\n``` javascript\n    // routes/index.js\n    const router = require('express').Router();\n    const r = require('rethinkdb');\n    \n    let connection;\n    r.connect({host: 'localhost', port: 28015, db: 'test'})\n        .then(conn =\u003e {\n          connection = conn;\n        });\n    \n    /* Render the feed. */\n    router.get('/', async (req, res, next) =\u003e {\n      const posts = await r.table('posts').orderBy(r.desc('date')).run(connection)\n          .then(cursor =\u003e cursor.toArray());\n      res.render('index', { posts });\n    });\n    \n    module.exports = router;\n```    \n\nLet’s walk through what’s going on here. We’re connecting to our database via the RethinkDB client (`r`). Then, in the home route, we retrieve all posts from the database. In ReQL, we can do this by calling `table()`. We want the results to have the newest posts first, so we add `orderBy(r.desc('date')).` This query will return all the documents in the table as a **cursor**. RethinkDB uses a cursor because it allows for easy pagination of large tables. We convert this cursor to an array of the documents by calling `cursor.toArray()`, then we render them on the frontend.\n\n\nNow we’ll create the view where we render the posts. We’ll use Bootstrap for some quick styling. Put the following code in your `views/layout.hbs` (the base layout):\n\n``` handlebars\n    \u003c!-- views/layout.hbs --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n      \u003chead\u003e\n        \u003ctitle\u003e{{title}}\u003c/title\u003e\n          \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\"\u003e\n      \u003cbody\u003e\n        {{{body}}}\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThen, in the file `views/index.hbs`:\n\n``` handlebars\n    \u003c!-- views/index.hbs --\u003e\n    \u003cdiv class=\"container-fluid text-center\" id=\"posts-list\"\u003e\n    \n        {{#each posts }}\n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003ch5 class=\"card-title\"\u003e{{ this.title }}\u003c/h5\u003e\n                    \u003ch6 class=\"card-subtitle mb-2 text-muted\"\u003e{{ this.date }}\u003c/h6\u003e\n                    \u003cp class=\"card-text\"\u003e{{ this.content }}\u003c/p\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        {{/each}}\n    \n    \u003c/div\u003e\n```    \n\nOne more thing. Replace the contents of your `app.js` with the following:\n\n``` javascript\n    // app.js\n    require('dotenv').config();\n    const express = require('express');\n    const path = require('path');\n    const logger = require('morgan');\n    \n    const app = express();\n    \n    // view engine setup\n    app.set('views', path.join(__dirname, 'views'));\n    app.set('view engine', 'hbs');\n    \n    app.use(logger('dev'));\n    app.use(express.urlencoded({ extended: false }));\n    \n    app.use('/', require('./routes/index'));\n    \n    // error handler\n    app.use((err, req, res, next) =\u003e {\n      res.locals.message = err.message;\n      res.locals.error = err;\n    \n      // render the error page\n      res.status(err.status || 500);\n      res.render('error');\n    });\n    \n    module.exports = app;\n```\n\n## Creating a post\n\nNext, we’ll make it possible for a user to create a post. Let’s add the necessary routes. Open up your route file (`routes/index.js`) and replace the last line (`module.exports = router`) with the following:\n\n``` javascript\n    // routes/index.js\n    \n    /* Show the view to create a new post. */\n    router.get('/new', (req, res, next) =\u003e {\n      res.render('new');\n    });\n    \n    /* Save a new post to the database */\n    router.post('/new', async (req, res, next) =\u003e {\n        const post = {\n            title: req.body.title,\n            content: req.body.content,\n            date: new Date(),\n        };\n      r.table('posts').insert(post).run(connection)\n          .then(() =\u003e res.redirect('/'));\n    });\n    \n    module.exports = router;\n```\n\nHere we’re creating two routes. The first route will render the form for creating new posts when you visit `/new` in your browser. The second route is where the form submits to. Within this route, we pull data from the request and create a new post in the database. With RethinkDB, this is as easy as calling `insert(post)`. For each post, we store a title, content and the date it was created.\n\nNext up, create the file `views/new.hbs` with the following contents:\n\n``` handlebars\n    \u003c!-- views/new.hbs --\u003e\n    \n    \u003cdiv class=\"container-fluid text-center mt-5\"\u003e\n    \u003ch4\u003eCreate Post\u003c/h4\u003e\n    \u003cform method=\"post\" action=\"/new\"\u003e\n    \n        \u003cdiv class=\"form-group\"\u003e\n            \u003clabel\u003eTitle\n                \u003cinput type=\"text\" class=\"form-control\" name=\"title\"\u003e\n            \u003c/label\u003e\n        \u003c/div\u003e\n    \n        \u003cdiv class=\"form-group\"\u003e\n            \u003clabel\u003eContent\n                \u003ctextarea class=\"form-control\" name=\"content\" rows=\"3\"\u003e\u003c/textarea\u003e\n            \u003c/label\u003e\n        \u003c/div\u003e\n    \n        \u003cbutton type=\"submit\" class=\"btn btn-primary\"\u003ePublish post\u003c/button\u003e\n    \u003c/form\u003e\n    \u003c/div\u003e\n```    \n\nAt this point, you can take the app for a spin to be sure it works as expected. Here’s what you need to do:\n\n- Start your RethinkDB server by following the instructions for your operating system [here](https://rethinkdb.com/docs/install/).\n- RethinkDB comes with an included web interface where you can explore your database and modify or query data. After starting the server, you should be able to access this UI at http://localhost:8080. \n- You can run queries and commands from the **Data Explorer** tab. We’ll test it out by creating our `posts` table. Enter the command `r.tableCreate('posts')` in the text box and click the **Run** button. The result of the query will be shown in the lower pane, as shown in the screenshot below.\n\n![rethinkdb-node-express-database-test](//images.ctfassets.net/1es3ne0caaid/4spXglH6bYKkwUIuECy8YA/67b4ae6d145242105bd26526f970e94d/rethinkdb-node-express-database-test.png)\n\n\n- Start your Express app by running this terminal command in its directory:\n\n```\n    npm start\n```\n\n- Visit your app on http://localhost:3000. You should see a blank page because our database is currently empty. Visit http://localhost:3000/new to create a new post. Create a couple of posts, and when you reload the home page, you should see your posts sorted from newest to oldest.\n\nNow that we’ve verified the app works, let’s make it realtime.\n\n## Going realtime with RethinkDB changefeeds\n\nRethinkDB has a useful feature called [changefeeds](https://www.rethinkdb.com/docs/changefeeds/javascript/) that makes it well-suited for realtime applications. Using changefeeds, we can ask RethinkDB to notify us when there are any changes to the database. We can even specify a query (such as “all items in Food category and with price greater than 500 dollars”), and RethinkDB will watch for changes to the result set.\n\nWe’ll add changefeeds to our app so the server gets notified of any new posts. Note that since RethinkDB is a database system, it can’t talk directly to the frontend. It can only send the changes to our servers, then we can have the server send the changes to the frontend via a service like Pusher.\n\nTo add changefeeds to our app, we need to make a small change to our `routes/index.js`. Replace this snippet (where we connect to the RethinkDB server):\n\n``` javascript\n    let connection;\n    r.connect({host: 'localhost', port: 28015, db: 'test'})\n        .then(conn =\u003e {\n          connection = conn;\n        });\n```\n\nwith this:\n\n``` javascript\n    let connection;\n    r.connect({host: 'localhost', port: 28015, db: 'test'})\n        .then(conn =\u003e {\n          connection = conn;\n          return r.table('posts').changes().run(connection);\n        }).then(cursor =\u003e {\n          cursor.each((err, row) =\u003e {\n            if (err) throw err;\n            const post = row.new_val;\n            console.log(post);\n            // publish row to the frontend\n        });\n    });\n```\n\nWe’re still connecting to the server as before, but this time, after the connection is established, we set up a changefeed by using the `changes()` method, telling RethinkDB to notify us of any changes to the data in the `posts` table. Once again, changes are returned as a cursor, which has keys `new_val` and `old_val`. For now, we simply log the new document to the console.\n\nOur backend is realtime now. Let’s make our frontend realtime too.\n\n## Going realtime with Pusher Channels\n\nFirst, let’s get our credentials set up. Log in to your [Pusher app dashboard](https://dashboard.pusher.com) and retrieve your app credentials from the **App Keys** tab. Then create a `.env` file in your project and add your credentials to it:\n\n```\n    # .env\n    \n    PUSHER_APP_ID=your-app-id\n    PUSHER_APP_KEY=your-app-key\n    PUSHER_APP_SECRET=your-app-secret\n    PUSHER_APP_CLUSTER=your-app-cluster\n```\n\nNow, we’ll modify our app to push changes to the frontend when notifications come in from RethinkDB. Modify your `routes/index.js` so it looks like this:\n\n``` javascript\n    // routes/index.js\n    \n    const router = require('express').Router();\n    const r = require('rethinkdb');\n    const Pusher = require('pusher');\n    const pusher = new Pusher({\n        appId: process.env.PUSHER_APP_ID,\n        key: process.env.PUSHER_APP_KEY,\n        secret: process.env.PUSHER_APP_SECRET,\n        cluster: process.env.PUSHER_APP_CLUSTER\n    });\n    \n    let connection;\n    r.connect({host: 'localhost', port: 28015, db: 'test'})\n        .then(conn =\u003e {\n          connection = conn;\n          return r.table('posts').changes().run(connection);\n        }).then(cursor =\u003e {\n          cursor.each((err, row) =\u003e {\n            if (err) throw err;\n            const post = row.new_val;\n            pusher.trigger('post-events', 'new-post', { post }, (err) =\u003e console.log(err));\n        });\n    });\n    \n    /* Render the feed. */\n    router.get('/', async (req, res, next) =\u003e {\n      const posts = await r.table('posts').orderBy(r.desc('date')).run(connection)\n          .then(cursor =\u003e cursor.toArray());\n      res.render('index', { posts, appKey: process.env.PUSHER_APP_KEY });\n    });\n    \n    /* Show the view to create a new post. */\n    router.get('/new', (req, res, next) =\u003e {\n      res.render('new');\n    });\n    \n    /* Save a new post to the database */\n    router.post('/new', async (req, res, next) =\u003e {\n        const post = {\n            title: req.body.title,\n            content: req.body.content,\n            date: new Date(),\n        };\n      r.table('posts').insert(post).run(connection)\n          .then(() =\u003e res.redirect('/'));\n    });\n    \n    module.exports = router;\n```\n\nThe final step is to update our frontend to add the newly created post to the list when it receives the event via Pusher. Add the following code to the end of your `views/index.hbs`:\n\n``` handlebars\n    \u003c!-- views/index.hbs --\u003e\n    \n    \u003cscript src=\"https://js.pusher.com/4.3/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n        // Enable pusher logging\n        Pusher.logToConsole = true;\n        const pusher = new Pusher(\"{{ appKey }}\", {\n            cluster: 'eu'\n        });\n        const channel = pusher.subscribe('post-events');\n        channel.bind('new-post', (data) =\u003e {\n            const postsList = document.getElementById('posts-list');\n            postsList.insertBefore(createPostCard(data.post), postsList.firstChild);\n        });\n    \n        function createPostCard(post) {\n            let cardElement = document.querySelector('.card');\n            let newCard = cardElement.cloneNode(true);\n            newCard.querySelector('.card-title').innerText = post.title;\n            // we wrap the date here and call toString() \n            // because RethinkDB returns it in a different format for changefeeds\n            newCard.querySelector('.card-subtitle').innerText = new Date(post.date).toString();\n            newCard.querySelector('.card-text').innerText = post.content;\n            return newCard;\n        }\n    \u003c/script\u003e\n```    \n\nAll done! Now our app is ready.\n\nMake sure your RethinkDB server is running. Start the app by running `npm start`. If you had it running earlier, be sure to exit and restart it. Tinker with the app as before, creating new posts at http://localhost:3000/new. This time, leave the homepage (http://localhost:3000) open in another tab. You should see your posts showing up in realtime on the feed, as in the GIF below:\n\n![rethinkdb-node-express-demo](//images.ctfassets.net/1es3ne0caaid/3zsqQel6X6UsQayAIOuyyg/7ee559333958a7d973cc0b3860287c6a/rethinkdb-node-express-demo.gif)\n\n\n## Conclusion\n\nIn this tutorial, we’ve explored RethinkDB, a database system built for realtime applications. Without RethinkDB’s native changefeeds functionality, we’d have to spend time writing code that listens for any database inserts and dispatches events, introducing a lot of complexity. When paired with Pusher, RethinkDB allows us to deliver pleasant realtime experiences to our users. It’s a great choice worth checking out if you’re building a realtime application. You can visit [the RethinkDB docs](https://rethinkdb.com/docs/) for more, and check out the source code of the completed application [on GitHub](https://github.com/shalvah/rethinkdb-pusher-node-demo).","metaTitle":"How to build a live application with Node.js and RethinkDB","metaDescription":"This article introduces RethinkDB, a sophisticated database solution. It provides a practical example with Node.js and Handlebars, constructing a simple blog post feed, to demonstrate the realtime capabilities of RethinkDB."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3raqlXulcjZV0R8dgGZkg3","type":"Entry","createdAt":"2019-02-27T20:44:38.705Z","updatedAt":"2019-02-27T20:44:38.705Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"How to build a live code playground with React","url":"code-playground-react","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4Cn04Zjx284MSEoSumwUau","type":"Entry","createdAt":"2018-08-13T17:38:51.972Z","updatedAt":"2018-08-13T17:38:51.972Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ayooluwa Isaiah","url":"ayooluwa-isaiah","email":"ayisaiah@gmail.com","twitter":"https://twitter.com/AyIsaiah","github":"http://github.com/ayoisaiah","guestWriter":true}}],"projectRepo":"https://github.com/ayoisaiah/pusher-code-playground","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2019-02-26","description":"In this tutorial you will create a collaborative web coding playground, using a simple Node server, and React for the frontend. Users will be able to code together, seeing each others' contributions update in realtime.","prerequisite":"You will need Node 6+ installed on your machine.","content":"In this tutorial, we’ll go through how to build a code editor with React, while syncing the changes made in realtime across all connected clients with Pusher Channels. You can find the entire source code for the application in this [GitHub repository](https://github.com/ayoisaiah/pusher-code-playground).\n\n## Prerequisites\n\nYou need to have experience with building [React](https://reactjs.org/) and [Node.js](https://nodejs.org/en/download/) applications to follow through with this tutorial. You also need to have Node.js (version 6 or later) and npm installed on your machine. Installation instructions for Node.js can be found on [this page](https://www.npmjs.com/get-npm).\n\n## Set up the server\n\nCreate a new directory for this project on your machine and `cd` into it:\n\n```\n    mkdir code-playground\n    cd code-playground\n```\n\nNext, initialize a new Node project by running the command below. The `-y` flag allows us to accept all the defaults without being prompted.\n\n```\n    npm init -y\n```\n\nNext, install the dependencies we’ll be using to set up the Node server:\n\n```\n    npm install express body-parser dotenv cors pusher --save\n```\n\nOnce the dependencies have been installed, create a new `server.js` file in the root of your project directory and paste in the following code:\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config({ path: '.env' });\n    \n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const cors = require('cors');\n    const Pusher = require('pusher');\n    \n    const app = express();\n    \n    app.use(cors())\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use(bodyParser.json());\n    \n    app.set('port', process.env.PORT || 5000);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running → PORT ${server.address().port}`);\n    });\n```\n\nSave the file and create a `.env` file in the root of your project directory. Change its contents to look like this:\n\n```\n    // .env\n    \n    PORT=5000\n```\n\n## Set up Channels integration\n\nHead over to the Pusher website and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). Select **Channels apps** on the sidebar, and hit **Create Channels app** to create a new app. Once your app is created, retrieve your credentials from the API Keys tab, then add the following to the `.env` file:\n\n```\n    // .env\n    \n    PORT=5000\n    PUSHER_APP_ID=\u003cyour app id\u003e\n    PUSHER_APP_KEY=\u003cyour app key\u003e\n    PUSHER_APP_SECRET=\u003cyour app secret\u003e\n    PUSHER_APP_CLUSTER=\u003cyour app cluster\u003e\n```\n\nNext, initialize the Pusher SDK within `server.js`:\n\n``` javascript\n    require('dotenv').config({ path: '.env' });\n    \n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const cors = require('cors');\n    const Pusher = require('pusher');\n    \n    const app = express();\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      useTLS: true,\n    });\n    \n    app.use(cors())\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use(bodyParser.json());\n    \n    app.set('port', process.env.PORT || 5000);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running → PORT ${server.address().port}`);\n    });\n```\n\n## Set up the React application\n\nMake sure you have the [create-react-app](https://github.com/facebook/create-react-app) package installed globally on your machine. Otherwise, run, `npm install -g create-react-app`.\n\nNext, run the following command to bootstrap your React app:\n\n```\n    create-react-app client\n```\n\nOnce the command above has finished running, `cd` into the newly created `client` directory and install the other dependencies which we’ll be needing for our app’s frontend:\n\n```\n    npm install pusher-js axios pushid react-codemirror2 codemirror --save\n```\n\nNow, you can run `npm start` from within the `client` directory to start the development server and navigate to http://localhost:3000 in your browser.\n\n## Add the styles for the app\n\nBefore we tackle the application logic, let’s add all the styles we need to create the code playground. Within the `client` directory, locate `src/App.css` and change its contents to look like this:\n\n``` css\n    // client/src/App.css\n    \n    html {\n      box-sizing: border-box;\n    }\n    \n    *, *::before, *::after {\n      box-sizing: inherit;\n      margin: 0;\n      padding: 0;\n    }\n    \n    .playground {\n      position: fixed;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      width: 600px;\n      background-color: #1E1E2C;\n    }\n    \n    .code-editor {\n      height: 33.33%;\n      overflow: hidden;\n      position: relative;\n    }\n    \n    .editor-header {\n      height: 30px;\n      content: attr(title);\n      display: flex;\n      align-items: center;\n      padding-left: 20px;\n      font-size: 18px;\n      color: #fafafa;\n    }\n    \n    .react-codemirror2 {\n      max-height: calc(100% - 30px);\n      overflow: auto;\n    }\n    \n    .result {\n      position: fixed;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 600px;\n      overflow: hidden;\n    }\n    \n    .iframe {\n      width: 100%;\n      height: 100%;\n    }\n```\n\n## Render the code playground\n\nOpen up `client/src/App.js` and change it to look like this:\n\n``` javascript\n    // client/src/App.js\n    \n    import React, { Component } from 'react';\n    import { Controlled as CodeMirror } from 'react-codemirror2';\n    import Pusher from 'pusher-js';\n    import pushid from 'pushid';\n    import axios from 'axios';\n    \n    import './App.css';\n    import 'codemirror/lib/codemirror.css';\n    import 'codemirror/theme/material.css';\n    \n    import 'codemirror/mode/htmlmixed/htmlmixed';\n    import 'codemirror/mode/css/css';\n    import 'codemirror/mode/javascript/javascript';\n    \n    class App extends Component {\n      constructor() {\n        super();\n        this.state = {\n          id: '',\n          html: '',\n          css: '',\n          js: '',\n        };\n      }\n    \n      componentDidUpdate() {\n        this.runCode();\n      }\n    \n      componentDidMount() {\n        this.setState({\n          id: pushid(),\n        });\n      }\n    \n      runCode = () =\u003e {\n        const { html, css, js } = this.state;\n    \n        const iframe = this.refs.iframe;\n        const document = iframe.contentDocument;\n        const documentContents = `\n          \u003c!DOCTYPE html\u003e\n          \u003chtml lang=\"en\"\u003e\n          \u003chead\u003e\n            \u003cmeta charset=\"UTF-8\"\u003e\n            \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n            \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n            \u003ctitle\u003eDocument\u003c/title\u003e\n            \u003cstyle\u003e\n              ${css}\n            \u003c/style\u003e\n          \u003c/head\u003e\n          \u003cbody\u003e\n            ${html}\n    \n            \u003cscript type=\"text/javascript\"\u003e\n              ${js}\n            \u003c/script\u003e\n          \u003c/body\u003e\n          \u003c/html\u003e\n        `;\n    \n        document.open();\n        document.write(documentContents);\n        document.close();\n      };\n    \n      render() {\n        const { html, js, css } = this.state;\n        const codeMirrorOptions = {\n          theme: 'material',\n          lineNumbers: true,\n          scrollbarStyle: null,\n          lineWrapping: true,\n        };\n    \n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003csection className=\"playground\"\u003e\n              \u003cdiv className=\"code-editor html-code\"\u003e\n                \u003cdiv className=\"editor-header\"\u003eHTML\u003c/div\u003e\n                \u003cCodeMirror\n                  value={html}\n                  options={{\n                    mode: 'htmlmixed',\n                    ...codeMirrorOptions,\n                  }}\n                  onBeforeChange={(editor, data, html) =\u003e {\n                    this.setState({ html });\n                  }}\n                /\u003e\n              \u003c/div\u003e\n              \u003cdiv className=\"code-editor css-code\"\u003e\n                \u003cdiv className=\"editor-header\"\u003eCSS\u003c/div\u003e\n                \u003cCodeMirror\n                  value={css}\n                  options={{\n                    mode: 'css',\n                    ...codeMirrorOptions,\n                  }}\n                  onBeforeChange={(editor, data, css) =\u003e {\n                    this.setState({ css });\n                  }}\n                /\u003e\n              \u003c/div\u003e\n              \u003cdiv className=\"code-editor js-code\"\u003e\n                \u003cdiv className=\"editor-header\"\u003eJavaScript\u003c/div\u003e\n                \u003cCodeMirror\n                  value={js}\n                  options={{\n                    mode: 'javascript',\n                    ...codeMirrorOptions,\n                  }}\n                  onBeforeChange={(editor, data, js) =\u003e {\n                    this.setState({ js });\n                  }}\n                /\u003e\n              \u003c/div\u003e\n            \u003c/section\u003e\n            \u003csection className=\"result\"\u003e\n              \u003ciframe title=\"result\" className=\"iframe\" ref=\"iframe\" /\u003e\n            \u003c/section\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default App;\n```\n\nWe’re making use of [react-codemirror2](https://www.npmjs.com/package/react-codemirror2), a thin wrapper around the `codemirror` package for our code editor. We have three instances here, one for HTML, another for CSS and the last one for JavaScript.\n\nOnce the code in any one of the editors is updated, the `runCode()` function is triggered and the code is executed and rendered in an iframe.\n\n![react-code-playground-demo-1](//images.ctfassets.net/1es3ne0caaid/5H9lLeFt1l3uVtLLtKNM38/27a73849ba7cd4ab2b4336733a8e7c7d/react-code-playground-demo-1.gif)\n\n## Sync updates in realtime with Pusher\n\nLet’s make it possible for multiple collaborators to edit and preview the code at the same time. We can do this pretty easily with Channels.\n\nFirst, return to the `server.js` file you created earlier and add the following code into it :\n\n``` javascript\n    // server.js\n    \n    //beginning of the file\n    app.use(bodyParser.json());\n    \n    app.post('/update-editor', (req, res) =\u003e {\n      pusher.trigger('editor', 'code-update', {\n       ...req.body,\n      });\n    \n      res.status(200).send('OK');\n    });\n    \n    // rest of the file\n```\n\nWe’ll make a `POST` request to this route from the application frontend and pass in the contents of each of the code editors in the request body. We then trigger a `code-update` event on the `editor` channel each time a request is make to this route.\n\nFor this to work, we need to subscribe to the `editor` channel and listen for the `code-update` event on the frontend.\n\nLet’s do just that in `App.js`:\n\n``` javascript\n    // client/src/App.js\n    \n    // beginning of the file\n    \n    class App extends Component {\n      constructor() {\n        super();\n        this.state = {\n          id: \"\",\n          html: \"\",\n          css: \"\",\n          js: \"\"\n        };\n    \n        this.pusher = new Pusher(\"\u003cyour app key\u003e\", {\n          cluster: \"\u003cyour app cluster\u003e\",\n          forceTLS: true\n        });\n    \n        this.channel = this.pusher.subscribe(\"editor\");\n      }\n    \n      componentDidUpdate() {\n        this.runCode();\n      }\n    \n      componentDidMount() {\n        this.setState({\n          id: pushid()\n        });\n        \n        this.channel.bind(\"code-update\", data =\u003e {\n          const { id } = this.state;\n          if (data.id === id) return;\n    \n          this.setState({\n            html: data.html,\n            css: data.css,\n            js: data.js,\n          });\n        });\n      }\n    \n      syncUpdates = () =\u003e {\n        const data = { ...this.state };\n    \n        axios\n          .post(\"http://localhost:5000/update-editor\", data)\n          .catch(console.error);\n      };\n      \n      // rest of the file\n    }\n    \n    export default App;\n```\n\nThen update the render function as follows:\n\n``` javascript\n    // client/src/App.js\n    \n      render() {\n        const { html, js, css } = this.state;\n        const codeMirrorOptions = {\n          theme: \"material\",\n          lineNumbers: true,\n          scrollbarStyle: null,\n          lineWrapping: true\n        };\n    \n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003csection className=\"playground\"\u003e\n              \u003cdiv className=\"code-editor html-code\"\u003e\n                \u003cdiv className=\"editor-header\"\u003eHTML\u003c/div\u003e\n                \u003cCodeMirror\n                  value={html}\n                  options={{\n                    mode: \"htmlmixed\",\n                    ...codeMirrorOptions\n                  }}\n                  onBeforeChange={(editor, data, html) =\u003e {\n                    this.setState({ html }, () =\u003e this.syncUpdates()); // update this line\n                  }}\n                /\u003e\n              \u003c/div\u003e\n              \u003cdiv className=\"code-editor css-code\"\u003e\n                \u003cdiv className=\"editor-header\"\u003eCSS\u003c/div\u003e\n                \u003cCodeMirror\n                  value={css}\n                  options={{\n                    mode: \"css\",\n                    ...codeMirrorOptions\n                  }}\n                  onBeforeChange={(editor, data, css) =\u003e {\n                    this.setState({ css }, () =\u003e this.syncUpdates()); // update this line\n                  }}\n                /\u003e\n              \u003c/div\u003e\n              \u003cdiv className=\"code-editor js-code\"\u003e\n                \u003cdiv className=\"editor-header\"\u003eJavaScript\u003c/div\u003e\n                \u003cCodeMirror\n                  value={js}\n                  options={{\n                    mode: \"javascript\",\n                    ...codeMirrorOptions\n                  }}\n                  onBeforeChange={(editor, data, js) =\u003e {\n                    this.setState({ js }, () =\u003e this.syncUpdates()); // update this line\n                  }}\n                /\u003e\n              \u003c/div\u003e\n            \u003c/section\u003e\n            \u003csection className=\"result\"\u003e\n              \u003ciframe title=\"result\" className=\"iframe\" ref=\"iframe\" /\u003e\n            \u003c/section\u003e\n          \u003c/div\u003e\n        );\n      }\n```\n\nIn the class constructor, we initialized the Pusher client library and subscribed to the `editor` channel. In the `syncUpdates()` method, we’re making a request to the `/update-editor` route that was created earlier. This method is triggered each time a change is made in any of the code editors.\n\nFinally, we’re listening for the `code-update` event in `componentDidMount()` and updating the application state once the event is triggered. This allows code changes to be synced across all connected clients in realtime.\n\nBefore you test the app, make sure to kill the server with `Ctrl-C`  (if you have it running), and start it again with `node server.js` so that the latest changes are applied.\n\n![react-code-playground-demo-2](//images.ctfassets.net/1es3ne0caaid/1znCSUXkuSn6kYVjg5Wi2l/e25c8d2360008fb1808177d7e8bff1c0/react-code-playground-demo-2.gif)\n\n## Wrap up\n\nYou have now learned how easy it is to create a code playground with realtime collaboration features with Pusher Channels. \n\nThanks for reading! Remember that you can find the source code of this app in this [GitHub repository](https://github.com/ayoisaiah/pusher-code-playground).","metaTitle":"How to build a live code playground with React","metaDescription":"In this tutorial you will create a collaborative web coding playground, using a simple Node server, and React for the frontend. Users will be able to code together, seeing each others' contributions update in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"24GlVU2UC9vSAOWAgsb0p5","type":"Entry","createdAt":"2019-02-20T20:34:28.936Z","updatedAt":"2019-02-20T20:34:28.936Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a two-player Pong game with React Native","url":"react-native-pong-game","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNPong","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6nDfV1cd5C6464wgCoOQii","type":"Entry","createdAt":"2018-02-12T15:08:13.901Z","updatedAt":"2018-02-26T12:31:12.764Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Gaming","url":"gaming","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4IiTE4WzzyQkoeAoaOqgcu","type":"Entry","createdAt":"2018-02-12T15:10:28.101Z","updatedAt":"2018-02-26T12:31:12.455Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Multiplayer Game","url":"multiplayer-game","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2019-02-20","description":"This in-depth tutorial will show you how to create a complete two-player mobile Pong game using React Native. You will use Node for the backend and MatterJS as the physics engine.","prerequisite":"You will need Node 11+, Yarn and React Native 0.57.8+ installed on your machine.","content":"In this tutorial, we’ll re-create the classic video game “Pong”. For those unfamiliar, Pong is short for Ping-pong. It’s another term for table tennis in which two players hit a lightweight ball back and forth across a table using small rackets. So Pong is basically the video game equivalent of the sport. \n\n\n## Prerequisites\n\nBasic knowledge of [React Native](https://facebook.github.io/react-native/) and [React Navigation](https://reactnavigation.org) is required. We’ll also be using Node, but knowledge is optional since we’ll only use it minimally.\n\nWe’ll be using the following package versions:\n\n\n- Yarn 1.13.0\n- Node 11.2.0\n- React Native 0.57.8\n- React Native Game Engine 0.10.1\n- MatterJS 0.14.2\n\nFor compatibility reasons, I recommend you to install the same package versions used in this tutorial before trying to update to the latest ones.\n\nWe’ll be using Pusher Channels in this tutorial. So you should know how to create and set up a new app instance on their [website](https://pusher.com/channels). The only requirement is for the app to allow client events. You can enable it from your app settings page. \n\nLastly, you’ll need an [ngrok account](https://ngrok.com/), so you can use it for exposing the server to the internet.\n\n\n## App overview\n\nWe’ll re-create the Pong game with React Native and Pusher Channels. Users have to log in using a unique username before they can start playing the game. The server is responsible for signaling for when an opponent is found and when the game starts. Once in the game, all the users have to do is land the ball on their opponent’s base and also prevent them from landing the ball on their base. For the rest of the tutorial, I’ll be referring to the object which the users will move as “plank”.\n\nHere’s what it will look like:\n\n\n![Pusher Pong](https://d2mxuefqeaa7sj.cloudfront.net/s_AF1C44C5364586C0D563D34F8C93326419297074F68554974FEDCEF531C77072_1547644438673_ping-pong-pusher.gif)\n\n\nYou can find the code on this [GitHub repo](https://github.com/anchetaWern/RNPong).\n\n\n## Creating the app\n\nStart by initializing a new React Native project:\n\n```\n    react-native init RNPong\n    cd RNPong\n```\n\nOnce the project is created, open your `package.json` file and add the following to your dependencies:\n\n``` json\n    \"dependencies\": {\n      \"matter-js\": \"^0.14.2\",\n      \"pusher-js\": \"^4.3.1\",\n      \"react-native-game-engine\": \"^0.10.1\",\n      \"react-native-gesture-handler\": \"^1.0.12\",\n      \"react-navigation\": \"^3.0.9\",\n      // your existing dependencies..\n    }\n```\n\nExecute `yarn install` to install the packages.\n\nWhile that’s doing its thing, here’s a brief overview of what each package does:\n\n\n- [matter-js](https://github.com/liabru/matter-js) - a JavaScript physics engine. This allows us to simulate how objects respond to applied forces and collisions. It’s responsible for animating the ball and the planks as they move through space.\n- [pusher-js](https://github.com/pusher/pusher-js) - used for sending realtime messages between the two users so the UI stays in sync.\n- [react-native-game-engine](https://github.com/bberak/react-native-game-engine) - provides useful components for effectively managing and rendering the objects in our game. As you’ll see later, it’s the one which orchestrates the different objects so they can be managed by a system which specifies how the objects will move or react to collisions.\n- [react-navigation](https://github.com/react-navigation/react-navigation) - for handling navigation between the login and the game screen.\n- [react-native-gesture-handler](https://github.com/kmagiera/react-native-gesture-handler) - you might think that we’re using it for handling the swiping motion for moving the planks. But the truth is we don’t really need this directly. react-navigation uses it for handling gestures when navigating between pages.\n\nOnce that’s done, link all the packages with `react-native link`. \n\nNext, set the permission to access the network state and set the orientation to `landscape`:\n\n``` xml\n    // android/app/src/main/AndroidManifest.xml\n    \u003cmanifest ...\u003e\n      \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n      \u003cuses-permission android:name=\"android.permission.SYSTEM_ALERT_WINDOW\"/\u003e\n      \u003cuses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/\u003e\n      \u003capplication\n        android:name=\".MainApplication\"\n        ...\n      \u003e\n        \u003cactivity\n          android:name=\".MainActivity\"\n          android:screenOrientation=\"landscape\"\n          ...\n        \u003e\n          ...\n        \u003c/activity\u003e\n      \u003c/application\u003e\n    \u003c/manifest\u003e\n```\n\n### React Navigation boilerplate code\n\nStart by adding the boilerplate code for setting up React Navigation. This includes the main app file and the root file for specifying the app screens:\n\n``` javascript\n    // App.js\n    import React, { Component } from \"react\";\n    import { View } from \"react-native\";\n    \n    import Root from \"./Root\";\n    \n    export default class App extends Component {\n      render() {\n        return (\n          \u003cView style={styles.container}\u003e\n            \u003cRoot /\u003e\n          \u003c/View\u003e\n        );\n      }\n    }\n    \n    const styles = {\n      container: {\n        flex: 1\n      }\n    };\n\n\n    // Root.js\n    import React, { Component } from \"react\";\n    import { YellowBox } from 'react-native';\n    import { createStackNavigator, createAppContainer } from \"react-navigation\";\n    import LoginScreen from './src/screens/Login';\n    import GameScreen from './src/screens/Game';\n    \n    // to suppress timer warnings (has to do with Pusher)\n    YellowBox.ignoreWarnings([\n      'Setting a timer'\n    ]);\n    \n    const RootStack = createStackNavigator(\n      {\n        Login: LoginScreen,\n        Game: GameScreen\n      },\n      {\n        initialRouteName: \"Login\"\n      }\n    );\n    \n    const AppContainer = createAppContainer(RootStack);\n    \n    class Router extends Component {\n      render() {\n        return (\n          \u003cAppContainer /\u003e\n        );\n      }\n    }\n    \n    export default Router;\n```\n\nIf you don’t know what’s going on with the code above, be sure to check out the [React Navigation docs](https://reactnavigation.org/docs/en/getting-started.html).\n\n### Login screen\n\nWe’re now ready to add the code for the login screen of the app. Start by importing the things we need. If you haven’t created a Pusher app instance yet, now is a good time to do so. Then replace the placeholders below. As for the ngrok URL, you can add it later once we run the app:\n\n``` javascript\n    // src/screens/Login.js\n    import React, { Component } from \"react\";\n    import {\n      View,\n      Text,\n      TextInput,\n      TouchableOpacity,\n      Alert\n    } from \"react-native\";\n    \n    import Pusher from 'pusher-js/react-native';\n    \n    const pusher_app_key = 'YOUR PUSHER APP KEY';\n    const pusher_app_cluster = 'YOUR PUSHER APP CLUSTER';\n    const base_url = 'YOUR HTTPS NGROK URL';\n```\n\nNext, initialize the state and instance variables that we’ll be using:\n\n``` javascript\n    class LoginScreen extends Component {\n      static navigationOptions = {\n        title: \"Login\"\n      };\n    \n      state = {\n        username: \"\",\n        enteredGame: false\n      };\n    \n      constructor(props) {\n        super(props);\n        this.pusher = null;\n        this.myChannel = null;\n      }\n      \n      // next: add render method\n      \n    }\n```\n\nIn the `render` method, we have the login form:\n\n``` javascript\n    render() {\n    \n      return (\n        \u003cView style={styles.wrapper}\u003e\n    \n          \u003cView style={styles.container}\u003e\n            \u003cView style={styles.main}\u003e\n              \u003cView\u003e\n                \u003cText style={styles.label}\u003eEnter your username\u003c/Text\u003e\n                \u003cTextInput\n                  style={styles.textInput}\n                  onChangeText={username =\u003e this.setState({ username })}\n                  value={this.state.username}\n                /\u003e\n              \u003c/View\u003e\n    \n              {\n                !this.state.enteredGame \u0026\u0026\n                \u003cTouchableOpacity onPress={this.enterGame}\u003e\n                  \u003cView style={styles.button}\u003e\n                    \u003cText style={styles.buttonText}\u003eLogin\u003c/Text\u003e\n                  \u003c/View\u003e\n                \u003c/TouchableOpacity\u003e\n              }\n    \n              {this.state.enteredGame \u0026\u0026 (\n                \u003cText style={styles.loadingText}\u003eLoading...\u003c/Text\u003e\n              )}\n            \u003c/View\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nWhen the **Login** button is clicked, we authenticate the user through the server. This is a requirement for Pusher apps that communicate directly from the client side. So to save on requests, we also submit the `username` as an additional request parameter. Once the app receives a response from the server, we subscribe to the current user’s own channel. This allows the app to receive messages from the server, and from their opponent later on:\n\n``` javascript\n    enterGame = async () =\u003e {\n      const username = this.state.username;\n      \n      if (username) {\n        this.setState({\n          enteredGame: true // show loading text\n        });\n      \n        this.pusher = new Pusher(pusher_app_key, {\n          authEndpoint: `${base_url}/pusher/auth`,\n          cluster: pusher_app_cluster,\n          auth: {\n            params: { username: username }\n          },\n          encrypted: true\n        });\n      \n        this.myChannel = this.pusher.subscribe(`private-user-${username}`);\n        this.myChannel.bind(\"pusher:subscription_error\", status =\u003e {\n          Alert.alert(\n            \"Error\",\n            \"Subscription error occurred. Please restart the app\"\n          );\n        });\n      \n        this.myChannel.bind(\"pusher:subscription_succeeded\", () =\u003e {\n          // next: add code for when the opponent is found\n        });\n      }\n    };\n```\n\nWhen the `opponent-found` event is triggered by the server, this is the cue for the app to navigate to the game screen. But before that, we first subscribe to the opponent’s channel and determine which objects should be assigned to the current user. The game is set up in a way that the first player who logs in is always considered “player one”, and the next one is always “player two”. Player one always assumes the left side of the screen, while player two assumes the right side. Each player has a plank and a wall assigned to them. Most of the code below is used to determine which objects should be assigned to the current player:\n\n``` javascript\n    this.myChannel.bind(\"opponent-found\", data =\u003e {\n      let opponent = username == data.player_one ? data.player_two : data.player_one;\n    \n      const playerOneObjects = {\n        plank: \"plankOne\",\n        wall: \"leftWall\",\n        plankColor: \"green\"\n      };\n    \n      const playerTwoObjects = {\n        plank: \"plankTwo\",\n        wall: \"rightWall\",\n        plankColor: \"blue\"\n      };\n    \n      const isPlayerOne = username == data.player_one ? true : false;\n    \n      const myObjects = isPlayerOne ? playerOneObjects : playerTwoObjects;\n      const opponentObjects = isPlayerOne\n        ? playerTwoObjects\n        : playerOneObjects;\n    \n      const myPlank = myObjects.plank;\n      const myPlankColor = myObjects.plankColor;\n      const opponentPlank = opponentObjects.plank;\n      const opponentPlankColor = opponentObjects.plankColor;\n    \n      const myWall = myObjects.wall;\n      const opponentWall = opponentObjects.wall;\n    \n      Alert.alert(\"Opponent found!\", `Your plank color is ${myPlankColor}`);\n    \n      this.opponentChannel = this.pusher.subscribe(\n        `private-user-${opponent}`\n      );\n      this.opponentChannel.bind(\"pusher:subscription_error\", data =\u003e {\n        console.log(\"Error subscribing to opponent's channel: \", data);\n      });\n    \n      this.opponentChannel.bind(\"pusher:subscription_succeeded\", () =\u003e {\n        \n        this.props.navigation.navigate(\"Game\", {\n          pusher: this.pusher,\n          username: username,\n          myChannel: this.myChannel,\n          opponentChannel: this.opponentChannel,\n    \n          opponent: opponent,\n          isPlayerOne: isPlayerOne,\n          myPlank: myPlank,\n          opponentPlank: opponentPlank,\n          myPlankColor: myPlankColor,\n          opponentPlankColor: opponentPlankColor,\n    \n          myWall: myWall,\n          opponentWall: opponentWall\n        });\n      });\n    \n      this.setState({\n        username: \"\",\n        enteredGame: false\n      });\n    });\n```\n\nNext, add the styles for the login screen. You can get it from this [file](https://github.com/anchetaWern/RNPong/blob/master/src/screens/Login.js#L154-L191).\n\n### Server code\nCreate a `server` folder inside the root of the React Native project. Inside, create a `package.json` file with the following contents:\n\n``` json\n    {\n      \"name\": \"pong-authserver\",\n      \"version\": \"1.0.0\",\n      \"description\": \"\",\n      \"main\": \"index.js\",\n      \"scripts\": {\n        \"start\": \"node server.js\"\n      },\n      \"author\": \"\",\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.17.2\",\n        \"dotenv\": \"^4.0.0\",\n        \"express\": \"^4.15.3\",\n        \"pusher\": \"^1.5.1\"\n      }\n    }\n```\n\nExecute `yarn install` to install the dependencies.\n\nNext, create a `.env` file and add your Pusher app credentials:\n\n```\n    APP_ID=\"YOUR PUSHER APP ID\"\n    APP_KEY=\"YOUR PUSHER APP KEY\"\n    APP_SECRET=\"YOUR PUSHER APP SECRET\"\n    APP_CLUSTER=\"YOUR PUSHER APP CLUSTER\"\n```\n\nNext, import all the packages we need and initialize Pusher:\n\n``` javascript\n    // server/server.js\n    var express = require('express');\n    var bodyParser = require('body-parser');\n    var Pusher = require('pusher');\n    \n    require('dotenv').config();\n    \n    var app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    var pusher = new Pusher({\n      appId: process.env.APP_ID,\n      key: process.env.APP_KEY,\n      secret:  process.env.APP_SECRET,\n      cluster: process.env.APP_CLUSTER,\n    });\n```\n\nNext, we add the route for authenticating the user. I said authentication, but to simplify things, we’re going to skip the actual authentication. Normally, you would have a database for checking whether the user has a valid account before you call the `pusher.authenticate` method:\n\n``` javascript\n    var users = [];\n    \n    app.post(\"/pusher/auth\", function(req, res) {\n      var socketId = req.body.socket_id;\n      var channel = req.body.channel_name;\n      var username = req.body.username;\n    \n      users.push(username); // temporarily store the username to be used later\n      console.log(username + \" logged in\");\n    \n      var auth = pusher.authenticate(socketId, channel);\n      res.send(auth);\n    });\n```\n\nNext, add the route for triggering the event for informing the users that an opponent was found. When you access this route on the browser, it will show an alert that an opponent is found, and the game screen will show up. Again, this isn’t what you’d do in a production app. This is only a demo, so this is done to have finer control over when things are triggered:\n\n``` javascript\n    app.get(\"/opponent-found\", function(req, res) {\n      var unique_users = users.filter((value, index, self) =\u003e {\n        return self.indexOf(value) === index;\n      });\n      var player_one = unique_users[0];\n      var player_two = unique_users[1];\n    \n      console.log(\"opponent found: \" + player_one + \" and \" + player_two);\n    \n      pusher.trigger(\n        [\"private-user-\" + player_one, \"private-user-\" + player_two],\n        \"opponent-found\",\n        {\n          player_one: player_one,\n          player_two: player_two\n        }\n      );\n    \n      res.send(\"opponent found!\");\n    });\n```\n\nLastly, the start game route is what triggers the ball to actually start moving:\n\n``` javascript\n    app.get(\"/start-game\", function(req, res) {\n      var unique_users = users.filter((value, index, self) =\u003e {\n        return self.indexOf(value) === index;\n      });\n    \n      var player_one = unique_users[0];\n      var player_two = unique_users[1];\n      \n      console.log(\"start game: \" + player_one + \" and \" + player_two);\n    \n      pusher.trigger(\n        [\"private-user-\" + player_one, \"private-user-\" + player_two],\n        \"start-game\",\n        {\n          start: true\n        }\n      );\n    \n      users = [];\n    \n      res.send(\"start game!\");\n    });\n    \n    // run the server on a specific port\n    var port = 5000;\n    app.listen(port);\n```\n\n### Game screen\nLet’s go back the app itself. This time, we proceed to coding the game screen. Start by importing the packages and components we need:\n\n``` javascript\n    // src/screens/Game.js\n    import React, { PureComponent } from 'react';\n    import { View, Text, Alert } from \"react-native\";\n    import { GameEngine } from \"react-native-game-engine\";\n    import Matter from \"matter-js\";\n    \n    import Circle from '../components/Circle'; // for rendering the ball\n    import Box from '../components/Box'; // for rendering the planks and walls\n```\n\nNext, we declare the size of the objects. Here, we’re using hard-coded dimensions to constrain the world to a single size. Because someone might be playing the game on a tablet, and their opponent is only playing on a phone with a small screen. This means that the ball will travel longer distances compared the phone, and the UI won’t be perfectly synced:\n\n``` javascript\n    import React, { PureComponent } from \"react\";\n    import { View, Text, Dimensions, Alert } from \"react-native\";\n    import { GameEngine } from \"react-native-game-engine\";\n    import Circle from \"../components/Circle\";\n    import Box from \"../components/Box\";\n    \n    import Matter from \"matter-js\";\n    \n    const BALL_SIZE = 50;\n    const PLANK_HEIGHT = 70;\n    const PLANK_WIDTH = 20;\n    \n    const GAME_WIDTH = 650;\n    const GAME_HEIGHT = 340;\n    \n    const BALL_START_POINT_X = GAME_WIDTH / 2 - BALL_SIZE;\n    const BALL_START_POINT_Y = GAME_HEIGHT / 2;\n    const BORDER = 15;\n    \n    const WINNING_SCORE = 5; \n```\n\nNext, we specify the properties of the objects in the game. These properties decide how they move through space and respond to collisions with other objects:\n\n``` javascript\n    const plankSettings = {\n      isStatic: true\n    };\n    \n    const wallSettings = {\n      isStatic: true\n    };\n    \n    const ballSettings = {\n      inertia: 0,\n      friction: 0,\n      frictionStatic: 0,\n      frictionAir: 0,\n      restitution: 1\n    };\n```\n\nHere’s what each property does. Note that most of these properties are only applicable to the ball. All the ones applied to other objects are simply used to replace the default values:\n\n\n- [isStatic](http://brm.io/matter-js/docs/classes/Body.html#property_isStatic) - used for specifying that the object is immovable. This means that it won’t change position no matter the amount of force applied to it by another object.\n- [inertia](http://brm.io/matter-js/docs/classes/Body.html#property_inertia) - the amount of external force it takes to move a specific object. We’re specifying a value of `0` for the ball so it requires no force at all to move it.\n- [friction](http://brm.io/matter-js/docs/classes/Body.html#property_friction) - used for specifying the kinetic friction of the object. This can have a value between `0` and `1`. A value of `0` means that the object doesn’t produce any friction when it slides through another object which has also a friction of `0`. This means that when a force is applied to it, it will simply slide indefinitely until such a time that another force stops it. `1` is the maximum amount of friction. And any value between it and `0` is used to control the amount of friction it produces as it slides to through or collides with another object. For the ball, we’re specifying a friction of `0` so it can move indefinitely. \n- [frictionStatic](http://brm.io/matter-js/docs/classes/Body.html#property_frictionStatic) - aside from `inertia`, this is another property you can use to specify how much harder it will be to move a static object. So a higher value will require a greater amount of force to move the object. \n- [frictionAir](http://brm.io/matter-js/docs/classes/Body.html#property_frictionAir) - used for specifying the air resistance of an object. We’re specifying a value of `0` so the ball can move indefinitely through space even if it doesn’t collide to anything.\n- [restitution](http://brm.io/matter-js/docs/classes/Body.html#property_restitution) - used for specifying the bounce of the ball when it collides with walls and planks. It can have a value between `0` and `1`. `0` means it won’t bounce at all when it collides with another object. So `1` produces the maximum amount of bounce.\n\nNext, create the actual objects using the settings from earlier. In MatterJS, we can create objects using the `Matter.Bodies` module. We can create different shapes using the methods in this module. But for the purpose of this tutorial, we only need to create a circle (ball) and a rectangle (planks and walls). The `circle` and `rectangle` methods both require the initial `x` and `y` position of the object as their first and second arguments. As for the third one, the `circle` method requires the radius of the circle. While the `rectangle` method requires the width and the height. The last argument is the object’s properties we declared earlier. In addition, we’re also specifying a `label` to make it easy to determine the object we’re working with. The `isSensor` is set to `true` for the left and right walls so they will only act as a sensor for collisions instead of affecting the object which collides to it. This means that the ball will simply pass through those walls:\n\n``` javascript\n    const ball = Matter.Bodies.circle(\n      BALL_START_POINT_X,\n      BALL_START_POINT_Y,\n      BALL_SIZE,\n      {\n        ...ballSettings,\n        label: \"ball\"\n      }\n    );\n    \n    const plankOne = Matter.Bodies.rectangle(\n      BORDER,\n      95,\n      PLANK_WIDTH,\n      PLANK_HEIGHT,\n      {\n        ...plankSettings,\n        label: \"plankOne\"\n      }\n    );\n    const plankTwo = Matter.Bodies.rectangle(\n      GAME_WIDTH - 50,\n      95,\n      PLANK_WIDTH,\n      PLANK_HEIGHT,\n      { ...plankSettings, label: \"plankTwo\" }\n    );\n    \n    const topWall = Matter.Bodies.rectangle(\n      GAME_HEIGHT - 20,\n      -30,\n      GAME_WIDTH,\n      BORDER,\n      { ...wallSettings, label: \"topWall\" }\n    );\n    const bottomWall = Matter.Bodies.rectangle(\n      GAME_HEIGHT - 20,\n      GAME_HEIGHT + 33,\n      GAME_WIDTH,\n      BORDER,\n      { ...wallSettings, label: \"bottomWall\" }\n    );\n    const leftWall = Matter.Bodies.rectangle(-50, 160, 10, GAME_HEIGHT, {\n      ...wallSettings,\n      isSensor: true,\n      label: \"leftWall\"\n    });\n    const rightWall = Matter.Bodies.rectangle(\n      GAME_WIDTH + 50,\n      160,\n      10,\n      GAME_HEIGHT,\n      { ...wallSettings, isSensor: true, label: \"rightWall\" }\n    );\n    \n    const planks = {\n      plankOne: plankOne,\n      plankTwo: plankTwo\n    };\n```\n\nNext, we add all the objects to the “world”. In MatterJS, all objects that you need to interact with one another need to be added to the world. This allows them to be simulated by the “engine”. The engine is used for updating the simulation of the world:\n\n``` javascript\n    const engine = Matter.Engine.create({ enableSleeping: false });\n    const world = engine.world;\n    \n    Matter.World.add(world, [\n      ball,\n      plankOne,\n      plankTwo,\n      topWall,\n      bottomWall,\n      leftWall,\n      rightWall\n    ]);\n```\n\nIn the above code, `enableSleeping` is set to `false` to prevent the objects from sleeping. This is a state similar to adding the `isStatic` property to the object, the only difference is that objects that are asleep can be woken up and continue their motion. As you’ll see later on, we’re actually going to make the ball sleep manually as a technique for keeping the UI synced.\n\nNext, create the component and initialize the state. Note that we’re using a `PureComponent` instead of the usual `Component`. This is because the game screen needs to be pretty performant. `PureComponent` automatically handles the `shouldComponentUpdate` method for you. When props or state changes, `PureComponent` will do a shallow comparison on both props and state. And the component won’t actually re-render if nothing has changed:\n\n``` javascript\n    export default class Game extends PureComponent {\n      static navigationOptions = {\n        header: null // we don't need a header\n      };\n    \n      state = {\n        myScore: 0,\n        opponentScore: 0\n      };\n      \n      // next: add constructor\n    \n    }\n```\n\nThe constructor is where we specify the systems to be used by the React Native Game Engine and subscribe the user to their opponent’s channel. Start by getting all the navigation params that we passed from the login screen earlier:\n\n``` javascript\n    constructor(props) {\n      super(props);\n    \n      const { navigation } = this.props;\n      this.movePlankInterval = null;\n      \n      this.pusher = navigation.getParam(\"pusher\");\n      this.username = navigation.getParam(\"username\");\n      \n      this.myChannel = navigation.getParam(\"myChannel\");\n      this.opponentChannel = navigation.getParam(\"opponentChannel\");\n      \n      this.isPlayerOne = navigation.getParam(\"isPlayerOne\");\n      \n      const myPlankName = navigation.getParam(\"myPlank\");\n      const opponentPlankName = navigation.getParam(\"opponentPlank\");\n      \n      this.myPlank = planks[myPlankName];\n      this.opponentPlank = planks[opponentPlankName];\n      \n      this.myPlankColor = navigation.getParam(\"myPlankColor\");\n      this.opponentPlankColor = navigation.getParam(\"opponentPlankColor\");\n      \n      this.opponentWall = navigation.getParam(\"opponentWall\");\n      this.myWall = navigation.getParam(\"myWall\");\n      \n      const opponent = navigation.getParam(\"opponent\");\n    \n      // next: add code for adding systems\n    }\n```\n\nNext, add the systems for the physics engine and moving the plank. The React Native Game Engine doesn’t come with a physics engine out of the box. Thus, we use MatterJS to handle the physics of the game. Later on, in the component’s `render` method, we will pass `physics` and `movePlank` as systems:\n\n``` javascript\n    this.physics = (entities, { time }) =\u003e {\n      let engine = entities[\"physics\"].engine;\n      engine.world.gravity.y = 0; // no downward pull\n      Matter.Engine.update(engine, time.delta); // move the simulation forward\n      return entities;\n    };\n    \n    this.movePlank = (entities, { touches }) =\u003e {\n      let move = touches.find(x =\u003e x.type === \"move\");\n      if (move) {\n        const newPosition = {\n          x: this.myPlank.position.x, // x is constant\n          y: this.myPlank.position.y + move.delta.pageY // add the movement distance to the current Y position\n        };      \n        Matter.Body.setPosition(this.myPlank, newPosition);\n      }\n      return entities;\n    };\n    \n    // next: add code for binding to events for syncing the UI\n```\n\nAll the `entities` (the objects we added earlier) that are added to the world are passed to each of the systems. Each entity has properties like `time` and `touches` which you can manipulate. In the case of the physics engine, the engine is considered as an entity. In the code below, we’re manipulating the world’s Y gravity (downward pull) to be equal to zero. This means that the objects won’t be pulled downwards as the simulation goes on. \n\nThe `movePlank` system is used for moving the plank. So we extract the `touches` from the entities. `touches` contains an array of all the touches the user performed. Each item in the array contains all sorts of data about the touch, but we’re only concerned with the `type`. The `type` can be `touch`, `press`, or in this case, `move`. `move` is when the user moves their finger/s across the screen. Since we only need to listen for this one event, we don’t actually need to target the plank precisely. Which means that the user doesn’t have to place their index finger on their assigned plank in order to move it. They simply have to move their finger across the screen, and the distance from that movement will automatically be added to the current Y position of their plank. Of course, this considers the direction of the movement as well. So if the direction is upwards, then the value of `move.delta.pageY` will be negative.\n\nNext, we bind to the events that will be triggered by the opponent. These will keep the UI of the two players synced. First is the event for syncing the planks. This updates the UI to show the current position of the opponent’s plank:\n\n``` javascript\n    this.myChannel.bind(\"client-opponent-moved\", opponentData =\u003e {\n      Matter.Body.setPosition(this.opponentPlank, {\n        x: this.opponentPlank.position.x,\n        y: opponentData.opponentPlankPositionY\n      });\n    });\n    \n    // next: listen to the event for moving the ball\n```\n\nNext, add the event which updates the balls current position and velocity. The way this works is that the two players will continuously pass the ball’s current position and velocity to one another. Between each pass, we add a 200-millisecond delay so that the ball actually moves between each pass. Making the ball sleep between each pass is important because the ball will look like it’s going back and forth a few millimeters while it’s reaching its destination:\n\n``` javascript\n    this.myChannel.bind(\"client-moved-ball\", ({ position, velocity }) =\u003e {\n      Matter.Sleeping.set(ball, false); // awaken the ball so it can move\n      Matter.Body.setPosition(ball, position);\n      Matter.Body.setVelocity(ball, velocity);\n    \n      setTimeout(() =\u003e {\n        if (position.x != ball.position.x || position.y != ball.position.y) {\n          this.opponentChannel.trigger(\"client-moved-ball\", {\n            position: ball.position,\n            velocity: ball.velocity\n          });\n    \n          Matter.Sleeping.set(ball, true); // make the ball sleep while waiting for the event to be triggered by the opponent\n        }\n      }, 200);\n    });\n    \n    // next: add code for sending plank updates to the opponent\n```\n\nNext, trigger the event for updating the opponent’s screen of the current position of the user’s plank. This is executed every 300 milliseconds so we’re still within the 10 messages per second limit per client:\n\n``` javascript\n    setInterval(() =\u003e {\n      this.opponentChannel.trigger(\"client-opponent-moved\", {\n        opponentPlankPositionY: this.myPlank.position.y\n      });\n    }, 300);\n    \n    // next: add code for updating player two's score\n```\n\nNext, we bind to the event for updating the scores on player two’s side. Player one (the first user who logs in) is responsible for triggering this event:\n\n``` javascript\n    if (!this.isPlayerOne) {\n      this.myChannel.bind(\n        \"client-update-score\",\n        ({ playerOneScore, playerTwoScore }) =\u003e {\n          this.setState({\n            myScore: playerTwoScore,\n            opponentScore: playerOneScore\n          });\n        }\n      );\n    }\n    \n    // next: add componentDidMount\n```\n\nOnce the component is mounted, we wait for the `start-game` event to be triggered by the server before accelerating the ball. Once the ball is accelerated, we initiate the back and forth passing of the ball’s position and velocity. This is the reason why only player one runs this code:\n\n``` javascript\n    componentDidMount() {\n      \n      if (this.isPlayerOne) {\n        this.myChannel.bind(\"start-game\", () =\u003e {\n          Matter.Body.setVelocity(ball, { x: 3, y: 0 }); // throw the ball straight to the right\n    \n          this.opponentChannel.trigger(\"client-moved-ball\", {\n            position: ball.position,\n            velocity: ball.velocity\n          });\n    \n          Matter.Sleeping.set(ball, true); // make the ball sleep and wait for the same event to be triggered on this side\n        });\n    \n         // next: add scoring code\n      }\n    }\n```\n\nNext, we need to handle collisions. We already know that the ball can collide with any of the objects we added into the world. But if it hits either the left wall or right wall, the player who hit it will score a point. And since this block of code is still within the `this.isPlayerOne` condition, we also need to trigger an event for informing player two of the score change:\n\n``` javascript\n    Matter.Events.on(engine, \"collisionStart\", event =\u003e {\n      var pairs = event.pairs;\n    \n      var objA = pairs[0].bodyA.label;\n      var objB = pairs[0].bodyB.label;\n    \n      if (objA == \"ball\" \u0026\u0026 objB == this.opponentWall) {\n        this.setState(\n          {\n            myScore: +this.state.myScore + 1\n          },\n          () =\u003e {\n            // bring back the ball to its initial position\n            Matter.Body.setPosition(ball, {\n              x: BALL_START_POINT_X,\n              y: BALL_START_POINT_Y\n            });\n    \n            Matter.Body.setVelocity(ball, { x: -3, y: 0 });\n            \n            // inform player two of the change in scores\n            this.opponentChannel.trigger(\"client-update-score\", {\n              playerOneScore: this.state.myScore,\n              playerTwoScore: this.state.opponentScore\n            });\n          }\n        );\n      } else if (objA == \"ball\" \u0026\u0026 objB == this.myWall) {\n        this.setState(\n          {\n            opponentScore: +this.state.opponentScore + 1\n          },\n          () =\u003e {\n            Matter.Body.setPosition(ball, {\n              x: BALL_START_POINT_X,\n              y: BALL_START_POINT_Y\n            });\n            Matter.Body.setVelocity(ball, { x: 3, y: 0 });\n            \n            this.opponentChannel.trigger(\"client-update-score\", {\n              playerOneScore: this.state.myScore,\n              playerTwoScore: this.state.opponentScore\n            });\n          }\n        );\n      }\n    });\n```\n\nNext, add the `render` function. The majority of the rendering is taken care of by the React Native Game Engine. To render the objects, we pass them as the value for the `entities` prop. This accepts an object containing all the objects that we want to render. The only required property for an object is the `body` and the `renderer`, the rest are props to be passed to the renderer itself. Note that you also need to pass the `engine` and the `world` as entities: \n\n``` javascript\n    render() {\n      return (\n        \u003cGameEngine\n          style={styles.container}\n          systems={[this.physics, this.movePlank]}\n          entities={{\n            physics: {\n              engine: engine,\n              world: world\n            },\n            pongBall: {\n              body: ball,\n              size: [BALL_SIZE, BALL_SIZE],\n              renderer: Circle\n            },\n            playerOnePlank: {\n              body: plankOne,\n              size: [PLANK_WIDTH, PLANK_HEIGHT],\n              color: \"#a6e22c\",\n              renderer: Box,\n              xAdjustment: 30\n            },\n            playerTwoPlank: {\n              body: plankTwo,\n              size: [PLANK_WIDTH, PLANK_HEIGHT],\n              color: \"#7198e6\",\n              renderer: Box,\n              type: \"rightPlank\",\n              xAdjustment: -33\n            },\n    \n            theCeiling: {\n              body: topWall,\n              size: [GAME_WIDTH, 10],\n              color: \"#f9941d\",\n              renderer: Box,\n              yAdjustment: -30\n            },\n            theFloor: {\n              body: bottomWall,\n              size: [GAME_WIDTH, 10],\n              color: \"#f9941d\",\n              renderer: Box,\n              yAdjustment: 58\n            },\n            theLeftWall: {\n              body: leftWall,\n              size: [5, GAME_HEIGHT],\n              color: \"#333\",\n              renderer: Box,\n              xAdjustment: 0\n            },\n            theRightWall: {\n              body: rightWall,\n              size: [5, GAME_HEIGHT],\n              color: \"#333\",\n              renderer: Box,\n              xAdjustment: 0\n            }\n          }}\n        \u003e\n          \u003cView style={styles.scoresContainer}\u003e\n            \u003cView style={styles.score}\u003e\n              \u003cText style={styles.scoreLabel}\u003e{this.myPlankColor}\u003c/Text\u003e\n              \u003cText style={styles.scoreValue}\u003e {this.state.myScore}\u003c/Text\u003e\n            \u003c/View\u003e\n            \u003cView style={styles.score}\u003e\n              \u003cText style={styles.scoreLabel}\u003e{this.opponentPlankColor}\u003c/Text\u003e\n              \u003cText style={styles.scoreValue}\u003e {this.state.opponentScore}\u003c/Text\u003e\n            \u003c/View\u003e\n          \u003c/View\u003e\n        \u003c/GameEngine\u003e\n      );\n    }\n```\n\nNote that the `xAdjustment` and `yAdjustment` are mainly used for adjusting the `x` and `y` positions of the objects. This is because the formula (see `src/components/Box.js`) that we’re using to calculate the `x` and `y` positions of the object doesn’t accurately adjust it to where it needs to be. This results in the ball seemingly bumping into an invisible wall before it actually hits the plank. This is because of the difference between the actual position of the object in the world (as far as MatterJS is concerned) and where it’s being rendered on the screen.\n\nYou can view the styles for the Game screen [here](https://github.com/anchetaWern/RNPong/blob/master/src/screens/Game.js#L349-L371).\n\nHere’s the code for the Circle and Box components:\n\n``` javascript\n    // src/components/Circle.js\n    import React, { Component } from \"react\";\n    import { View } from \"react-native\";\n    \n    const Box = ({ body, size, xAdjustment, yAdjustment, color }) =\u003e {\n      const width = size[0];\n      const height = size[1];\n      const xAdjust = xAdjustment ? xAdjustment : 0;\n      const yAdjust = yAdjustment ? yAdjustment : 0;\n    \n      const x = body.position.x - width / 2 + xAdjust;\n      const y = body.position.y - height / 2 - yAdjust;\n    \n      return (\n        \u003cView\n          style={{\n            position: \"absolute\",\n            left: x,\n            top: y,\n            width: width,\n            height: height,\n            backgroundColor: color\n          }}\n        /\u003e\n      );\n    };\n    \n    export default Box;\n```\n\n``` javascript\n    // src/components/Box.js\n    import React, { Component } from \"react\";\n    import { View } from \"react-native\";\n    \n    const Box = ({ body, size, xAdjustment, yAdjustment, color }) =\u003e {\n      const width = size[0];\n      const height = size[1];\n      const xAdjust = xAdjustment ? xAdjustment : 0;\n      const yAdjust = yAdjustment ? yAdjustment : 0;\n    \n      const x = body.position.x - width / 2 + xAdjust;\n      const y = body.position.y - height / 2 - yAdjust;\n    \n      return (\n        \u003cView\n          style={{\n            position: \"absolute\",\n            left: x,\n            top: y,\n            width: width,\n            height: height,\n            backgroundColor: color\n          }}\n        /\u003e\n      );\n    };\n    \n    export default Box;\n```\n\nAt this point you can now run the app:\n\n```\n    cd server\n    node server.js\n    ./ngrok http 5000\n    cd ..\n    react-native run-android\n```\n\nHere are the steps that I used for testing the app:\n\n\n1. Login user “One” on Android device #1.\n2. Login user “Two” on Android device #2.\n3. Access the `/opponent-found` route from the browser. This should show an alert on both devices that an opponent was found.\n4. Access the `/start-game` route from the browser. This should start moving the ball.\n\nAt this point, the two players can now start moving their planks and play the game.\n\n\n## Conclusion\n\nIn this tutorial, you learned how to create a realtime game with React Native and Pusher Channels. Along the way, you also learned how to use the React Native Game Engine and MatterJS. \n\nThere’s a hard limit of 10 messages per second, which stopped us from really going all out with syncing the UI. But the game we created is actually acceptable in terms of performance. \n\nYou can find the code on this [GitHub repo](https://github.com/anchetaWern/RNPong).","metaTitle":"Create a two-player Pong game with React Native","metaDescription":"This in-depth tutorial will show you how to create a complete two-player mobile Pong game using React Native. You will use Node for the backend and MatterJS as the physics engine."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5tG74hhJvigGccusoAU4iK","type":"Entry","createdAt":"2019-02-11T23:17:22.717Z","updatedAt":"2019-02-11T23:17:22.717Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live map application with React","url":"live-map-react","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2qeLNtkOw0ImAS2QcUcKcG","type":"Entry","createdAt":"2018-06-15T10:54:43.491Z","updatedAt":"2019-05-17T10:50:18.109Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Oreoluwa Ogundipe","url":"oreoluwa-ogundipe","email":"oreogundipe@gmail.com","twitter":"https://twitter.com/ogundipeore","github":"https://github.com/orehga","guestWriter":true}}],"projectRepo":"https://github.com/oreHGA/pusher-react-location","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2019-02-11","description":"In this tutorial, you will build a web application using React, Node.js and Google Maps. Users will be able to see their friends' locations updating in realtime.","prerequisite":"You will need Node 6+ and npx installed on your machine.","content":"Today, almost all of us rely on map applications for directions, distances and local information.. Now, we even have the ability to share our live location with friends, but imagine a scenario where a group of three friends are trying to meet at a particular location, each one of the friends needs to send a link to the others for them to know where they are. \n\nIn this article, we are going to use [Pusher Channels](https://pusher.com/channels) to create a React application that allows you to see the location of your friends in realtime when they are online on the app. By the end of this article, you should have an application that looks like this: \n\n![react-map-online-presence-1](//images.ctfassets.net/1es3ne0caaid/55tpnAYkmkKsqIyuQIE2OM/b76ac13e57c1c7705e49b53ce7846831/react-map-online-presence-1.gif)\n\n## Prerequisites\n\nTo follow through this tutorial, you’ll need the following:\n\n- Node \u003e= 6 installed on your machine\n- npm \u003e= 5.2 installed on your machine\n- npx installed on your machine\n\n\n## Getting started\n\nTo get started, create a new React application by running this command:\n\n```\n    npx create-react-app pusher-react-location\n```\n\nThis creates a starter React project in a folder titled `pusher-react-location`. To see the demo application at work, go to your terminal and run the command:\n\n```\n    cd pusher-react-location\n    npm start\n```\n\nThis serves the React application. Navigate your browser to `http://locahost:3000` and you should get a view that looks like this:\n\n![react-map-online-presence-2](//images.ctfassets.net/1es3ne0caaid/DAmOpFQ1J6OIEIIwkm8yy/01bab1b5fffeeae571915891c6d8a6ba/react-map-online-presence-2.png)\n\n## Building the backend server\n\nThe backend server of our application will have the following functionality:\n\n- Sharing users’ locations\n- Authenticating new users on the presence channel\n\nCreate a `/server` folder in your project:\n\n```\n    mkdir server\n    cd server\n```\n\nInstall the Node modules that we will need to power the backend server:\n\n```\n    npm init -y\n    npm install express body-parser pusher\n```\n\n- `express` will power the web server\n- `body-parser` to handle incoming requests\n- `pusher` to add realtime functionality and online presence\n\nAfterwards, create a `server.js` file in the `server/` directory:\n\n```\n    touch server.js\n```\n\nEdit the `server.js` file to look as follows:\n\n``` javascript\n    // server/server.js\n    \n    const express = require('express')\n    const bodyParser = require('body-parser')\n    const Pusher = require('pusher');\n    \n    // create a express application\n    const app = express();\n    \n    // initialize pusher\n    let pusher = new Pusher({\n        appId: 'PUSHER_APP_ID',\n        key: 'PUSHER_APP_KEY',\n        secret: 'PUSHER_APP_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n        encrypted: true\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    // to Allow CORS\n    app.use((req, res, next) =\u003e {\n        res.header('Access-Control-Allow-Origin', '*');\n        res.header(\n            'Access-Control-Allow-Headers',\n            'Origin, X-Requested-With, Content-Type, Accept'\n        );\n        next();\n    });\n    \n    [...]\n```\n\nWe include the necessary JavaScript libraries and then create a new Pusher object using your \nPusher application credentials.\n\n\u003e To obtain your Pusher credentials, create a new account [here](https://dashboard.pusher.com/accounts/sign_up). Afterwards, you’ll be redirected to your [Pusher dashboard](https://dashboard.pusher.com/). Go ahead and create a new project, obtain your `PUSHER_APP_ID`, `PUSHER_APP_KEY`, `PUSHER_APP_SECRET`, `PUSHER_APP_CLUSTER` and add them to your `server.js` file.\n\nAfterwards, we specify some application middleware to handle incoming requests. The backend server will have two routes:\n\n- `/pusher/auth` - handles requests to authenticate users joining the presence channel\n- `/update-location` - handles requests to trigger an event when a user updates their location.\n\nWith Pusher, when a new client tries to join a presence channel, a `POST` request is first made to authenticate the new client. In this case, we create a random string to identify the client and this makes up the `presenceData`object. The `presenceData` , `channel` and `socketId` are then passed to Pusher to authenticate the client.\n\nThe `/update-location` route accepts the incoming data and then triggers a `location-update` event to the `presence-channel`.\n\n\u003e In later parts of the article, we will see how the channel is created in our React application\n\nAdd the code below to your `server/server.js` file:\n\n``` javascript\n    // server/server.js\n    [...]\n    \n    app.post('/pusher/auth', (req, res) =\u003e {\n        let socketId = req.body.socket_id;\n        let channel = req.body.channel_name;\n        random_string = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);\n        let presenceData = {\n            user_id: random_string,\n            user_info: {\n                username: '@' + random_string,\n            }\n        };\n        let auth = pusher.authenticate(socketId, channel, presenceData);\n        res.send(auth);\n    });\n    \n    app.post('/update-location', (req, res) =\u003e {\n        // trigger a new post event via pusher\n        pusher.trigger('presence-channel', 'location-update', {\n            'username': req.body.username,\n            'location': req.body.location\n        })\n        res.json({ 'status': 200 });\n    });\n    \n    let port = 3128;\n    app.listen(port);\n    console.log('listening');\n```\n\nNow that the backend server is created, you can run it by entering the command:\n\n```\n    node server.js\n```\n\nNow, let’s look at how to build the rest of the application.\n\n\n## Creating the interface\n\n![react-map-online-presence-3](//images.ctfassets.net/1es3ne0caaid/1WKJXXB9pOkMqe6u6mGQAw/4728cc1883d44043a60cd84ff142ce22/react-map-online-presence-3.png)\n\nFirst of all,  we need to get a simple map interface for the application and to do this, let’s use [Google Maps JavaScript API](https://developers.google.com/maps/documentation/javascript/tutorial). Follow this [guide](https://developers.google.com/maps/documentation/javascript/get-api-key) to obtain your Google Maps API key which we will use later in this application.\n\n### Installing necessary packages\n\nTo add all functionality to our application, we’ll need to install the following packages:\n\n- google-map-react - to use the Google Maps JavaScript API with react\n- pusher-js - to enable realtime functionality with Pusher\n- axios - to make POST requests to our backend server\n- react-toastify - to notify users when new users are online or go offline\n\n To install, go to the root folder of your react application and run the following in your terminal:\n\n```\n    npm install google-map-react pusher-js axios react-toastify\n```\n\n### Displaying the map\n\nTo see it at work in your application, edit your `src/App.js` file to look like this:\n\n``` javascript\n    // src/App.js\n    import React, { Component } from 'react';\n    import GoogleMap from 'google-map-react';\n    \n    const mapStyles = {\n      width: '100%',\n      height: '100%'\n    }\n    \n    const markerStyle = {\n      height: '50px',\n      width: '50px',\n      marginTop: '-50px'\n    }\n    \n    const imgStyle = {\n      height: '100%'\n    }\n    \n    \n    const Marker = ({ title }) =\u003e (\n      \u003cdiv style={markerStyle}\u003e\n        \u003cimg style={imgStyle} src=\"https://res.cloudinary.com/og-tech/image/upload/s--OpSJXuvZ--/v1545236805/map-marker_hfipes.png\" alt={title} /\u003e\n        \u003ch3\u003e{title}\u003c/h3\u003e\n      \u003c/div\u003e\n    );\n    \n    class App extends Component {\n      render() {\n        return (\n          \u003cdiv \u003e\n            \u003cGoogleMap\n              style={mapStyles}\n              bootstrapURLKeys={{ key: 'GOOGLE_MAPS_API_KEY' }}\n              center={{ lat: 5.6219868, lng: -0.1733074 }}\n              zoom={14}\n            \u003e\n              \u003cMarker\n              title={'Current Location'}\n              lat={5.6219868}\n              lng={-0.1733074}\n            \u003e\n              \u003c/Marker\u003e\n            \u003c/GoogleMap\u003e\n          \u003c/div\u003e\n        )\n      }\n    }\n    \n    export default App;\n```\n\nIn the `App.js` file, we defined the `center` of the map and a single marker which will represent the location of the user when they open the application.\n\n\n\u003e **Note**: Remember to add your `GOOGLE_MAPS_API_KEY` which you can obtain [here](https://developers.google.com/maps/documentation/javascript/get-api-key).\n\nNow, when you run the application and navigate to `localhost:3000` in your browser you get the view below:\n\n![react-map-online-presence-4](//images.ctfassets.net/1es3ne0caaid/2n87URwYfGkcIOGOmau0iu/04d5ffd56771d249dc333bca2752da86/react-map-online-presence-4.png)\n\nCurrently, the center of the map and the user’s pin are hard-coded into the application. Let’s look at how to make these dynamic and display the user’s location and the location of other users signed in to the application.\n\n\n## Displaying online friends locations in realtime with Pusher\n\nNow let’s update the `App.js` to include the functionality. First, we need to add states to our component that will track:\n\n- The map center\n- Users online\n- Username of the current user\n- Location for other online users\n\nUpdate the `App.js` file so that your constructor will look like this:\n\n``` javascript\n    // src/App.js\n    [...]\n    import axios from 'axios';\n    import Pusher from 'pusher-js';\n    import { ToastContainer, toast } from 'react-toastify';\n    import 'react-toastify/dist/ReactToastify.css';\n    \n    class App extends Component {\n    \n      constructor(props) {\n        super(props)\n        this.state = {\n          center: { lat: 5.6219868, lng: -0.23223 },\n          locations: {},\n          users_online: [],\n          current_user: ''\n        }\n      }\n    \n      [...]  \n    }\n```\n\nWe then create a new Pusher object in the `componentDidMount()` lifecycle method by specifying the `PUSHER_APP_KEY`, `PUSHER_APP_CLUSTER` and the `authEndpoint` created on our backend server earlier in the article. Afterwards, we subscribe to the `presence-channel` and then bind the channel to listen for four events:\n\n\n-  `pusher:subscription_succeeded` event that is triggered from the backend server when a user successfully subscribes to a presence channel .\n- `location-update` event which is triggered when another user’s location is updated.\n- `pusher:member_removed` event that is triggered when another user goes offline.\n- `pusher:member_added` event that is triggered when a new user comes online.\n\n\n``` javascript\n    // src/App.js\n    [...]\n    \n    class App extends Component {\n      [...]\n      \n      componentDidMount() {\n          let pusher = new Pusher('PUSHER_APP_KEY', {\n            authEndpoint: \"http://localhost:3128/pusher/auth\",\n            cluster: \"mt1\"\n          })\n          this.presenceChannel = pusher.subscribe('presence-channel');\n          \n          this.presenceChannel.bind('pusher:subscription_succeeded', members =\u003e {\n            this.setState({\n              users_online: members.members,\n              current_user: members.myID\n            });\n            this.getLocation();\n            this.notify();\n          })\n          \n          this.presenceChannel.bind('location-update', body =\u003e {\n            this.setState((prevState, props) =\u003e {\n              const newState = { ...prevState }\n              newState.locations[`${body.username}`] = body.location;\n              return newState;\n            });\n          });\n          \n          this.presenceChannel.bind('pusher:member_removed', member =\u003e {\n            this.setState((prevState, props) =\u003e {\n              const newState = { ...prevState };\n              // remove member location once they go offline\n              delete newState.locations[`${member.id}`];\n              // delete member from the list of online users\n              delete newState.users_online[`${member.id}`];\n              return newState;\n            })\n            this.notify()\n          })\n          \n          this.presenceChannel.bind('pusher:member_added', member =\u003e {\n            this.notify();\n          })\n        }\n        \n        [...]\n    }\n```\n\nNotice that we called a `notify()` method on our Pusher events. Add the function to your `App.js` file like below:\n\n``` javascript\n    // src/App.js\n    \n    class App extends Component {\n      [...]\n      \n      \n      notify = () =\u003e toast(`Users online : ${Object.keys(this.state.users_online).length}`, {\n        position: \"top-right\",\n        autoClose: 3000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        type: 'info'\n      });\n      \n      [...]\n    \n    }\n```\n\nWe also called a `getLocation()` method in the `componentDidMount()`. This function is responsible for fetching the location of the user from the browser. Let’s take a look at how this works. Add the `getLocation()` function to your `App.js` file:\n\n``` javascript\n    // src/App.js\n    \n    class App extends Component {\n      \n      [...]\n      \n      getLocation = () =\u003e {\n        if (\"geolocation\" in navigator) {\n          navigator.geolocation.watchPosition(position =\u003e {\n            let location = { lat: position.coords.latitude, lng: position.coords.longitude };\n            this.setState((prevState, props) =\u003e {\n              let newState = { ...prevState };\n              newState.center = location;\n              newState.locations[`${prevState.current_user}`] = location;\n              return newState;\n            });\n            axios.post(\"http://localhost:3128/update-location\", {\n              username: this.state.current_user,\n              location: location\n            }).then(res =\u003e {\n              if (res.status === 200) {\n                console.log(\"new location updated successfully\");\n              }\n            });\n          })\n       } else {\n          alert(\"Sorry, geolocation is not available on your device. You need that to use this app\");\n        }\n      }\n      \n      [...]\n    \n    }\n```\n\nThe `getLocation()` method first checks if the application can access the geolocation property of the browser and alerts the user if it can’t. The `navigator.geolocation.watchPosition()` method gets the users’ location as the user moves and then updates the component states with the most up to date location of the user. Afterwards, a request is made to the backend server to trigger a `location-update` event so that other signed in users can be notified with the latest location.\n\nFinally, to show all locations of online users, let’s update the `render()` function of the component to look like this:\n\n``` javascript\n    // src/App.js\n    [...]\n    \n    class App extends Component {\n      [...]\n      \n      render() {\n        let locationMarkers = Object.keys(this.state.locations).map((username, id) =\u003e {\n          return (\n            \u003cMarker\n              key={id}\n              title={`${username === this.state.current_user ? 'My location' : username + \"'s location\"}`}\n              lat={this.state.locations[`${username}`].lat}\n              lng={this.state.locations[`${username}`].lng}\n            \u003e\n            \u003c/Marker\u003e\n          );\n        });\n    \n        return (\n          \u003cdiv \u003e\n            \u003cGoogleMap\n              style={mapStyles}\n              bootstrapURLKeys={{ key: 'GOOGLE_MAPS_API_KEY' }}\n              center={this.state.center}\n              zoom={14}\n            \u003e\n              {locationMarkers}\n            \u003c/GoogleMap\u003e\n          \u003c/div\u003e\n        )\n      }\n      \n      [...]\n      \n    }\n```\n\n`locationMarkers` creates a list of `Marker`'s for each of the online users. This will give the user a perspective of where his other online friends are.\n\nNow, reload the application and navigate to `localhost:3000` . Your application should work like this when multiple users are online:\n\n![react-map-online-presence-5](//images.ctfassets.net/1es3ne0caaid/eEFWTDl5DM6QmAeygW20I/48dd617efdbec4a14fef7e0dee1e4a5f/react-map-online-presence-5.gif)\n\n## Conclusion\n\nIn this tutorial, we saw how to use Pusher Channels, Google Maps and React to build a live map with online presence that lets you know where your friends online are. This tutorial is one of the many ways you can use Pusher Channels in the product you build. Feel free to use the concepts shared here in your own application. Here’s a link to the [GitHub](https://github.com/oreHGA/pusher-react-location) repository.","metaTitle":"Build a live map application with React","metaDescription":"In this tutorial, you will build a web application using React, Node.js and Google Maps. Users will be able to see their friends' locations updating in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3k4CPmwr72Uw8mQAKEm08g","type":"Entry","createdAt":"2019-02-04T17:09:44.804Z","updatedAt":"2019-02-04T17:09:44.804Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Pusher Channels as an alternative messaging queue","url":"messaging-queue-node-go","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Khmrnzj5moO4S6WOYOGAo","type":"Entry","createdAt":"2018-11-14T14:35:55.702Z","updatedAt":"2019-03-03T15:15:59.601Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lanre Adelowo","url":"lanre-adelowo","email":"adelowomailbox@gmail.com","twitter":"https://twitter.com/alanreadelowo","github":"https://github.com/adelowo","guestWriter":true}}],"projectRepo":"https://github.com/adelowo/pusher-channels-queue","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2019-02-04","description":"Use Node.js, Golang and Pusher Channels to create a message queue backend. The demo application features a login service that sends an email upon successful authentication. You will use Golang for the login component and Node.js for the email service.","prerequisite":"You will need Go 1.9+ and Node 7+ installed on your machine.","content":"## Introduction\n\nIn this tutorial, we will be building a message queue backed up by [Pusher Channels](https://pusher.com/channels). The application we will build will be a typical login service which upon a successful authentication, an email is sent to the authenticated user informing him of the authentication process and where it originated from. This is quite common with web applications - Twitter, GitHub and Slack do this all the time. We will build the login service in Golang while the email service will be written in NodeJS. The Golang application will publish the data to Pusher channels while the Node.js service will be subscribe to the particular channel and send the email to the user.\n\nMessaging queues are an interesting technique used to improve scalability and a bit of abstraction between the producer and the receiver/consumer as they don’t have to be connected in whatever form. A message queue is nothing much more than a list of messages being sent between two or more applications. A message is basically data produced by an application usually called the producer. That data is then sent into the queue to be picked up by another totally different application - known as the consumer.\n\n## Prerequisites\n\n- Golang ( `\u003e= 1.9`)\n- Node.js ( `\u003e= 7` )\n- A Pusher Channels application. [Create one here.](https://pusher.com/channels)\n\n\n## Building the login service\n\nLet’s set up a simple login Golang service. Due to simplicity reasons  this application will only handle authentication and will use a memory-mapped list of users.\n\nTo get started, we will need to set up our project root directory. We need to create the directory `pusher-channels-queue` somewhere in `$GOPATH`. Ideally, this should resolve to `$GOPATH/src/github.com/pusher-tutorials/pusher-channels-queue`. \n\nAfter doing the above, we will need to create a `go` directory since that is where our Golang application will live. \n\n```\n    $ mkdir go\n``` \n\nThe only external library we will need here are the Channel’s Golang SDK and a library to help us load our Pusher Channels keys. You can fetch that by running the command below:\n\n```\n    $ go get github.com/pusher/pusher-http-go\n    $ go get github.com/joho/godotenv\n```\n\nTo get started, you will need to create an `.env` file with the following contents:\n\n```\n    // github.com/pusher-tutorials/pusher-channels-queue/go/.env\n    \n    PUSHER_APP_ID=\"YOUR_APP_ID\"\n    PUSHER_APP_KEY=\"YOUR_APP_KEY\"\n    PUSHER_APP_SECRET=\"YOUR_APP_SECRET\"\n    PUSHER_APP_CLUSTER=\"YOUR_APP_CLUSTER\"\n    PUSHER_APP_SECURE=\"1\"\n```    \n\nOnce this has been done, we will need to create a `main.go` file.\n\n\n``` go\n    // github.com/pusher-tutorials/pusher-channels-queue/go/main.go\n    package main\n    \n    func main() {\n    \n            port := flag.Int(\"http.port\", 1400, \"Port to run HTTP service on\")\n    \n            flag.Parse()\n            \n            err := godotenv.Load()\n            if err != nil {\n                    log.Fatal(\"Error loading .env file\")\n            }\n    \n            appID := os.Getenv(\"PUSHER_APP_ID\")\n            appKey := os.Getenv(\"PUSHER_APP_KEY\")\n            appSecret := os.Getenv(\"PUSHER_APP_SECRET\")\n            appCluster := os.Getenv(\"PUSHER_APP_CLUSTER\")\n            appIsSecure := os.Getenv(\"PUSHER_APP_SECURE\")\n    \n            var isSecure bool\n            if appIsSecure == \"1\" {\n                    isSecure = true\n            }\n    \n            client := \u0026pusher.Client{\n                    AppId:   appID,\n                    Key:     appKey,\n                    Secret:  appSecret,\n                    Cluster: appCluster,\n                    Secure:  isSecure,\n            }\n            \n            mux := http.NewServeMux()\n            \n            mux.Handle(\"/login\", http.HandlerFunc(login(client)))\n            \n            log.Fatal(http.ListenAndServe(fmt.Sprintf(\":%d\", *port), mux))\n    }\n```\n\nIn the above, we created an `HTTP` server that responds to the `login` route. We will go on to implement the `login` function subsequently.\n\nSince we will be using a memory mapped list of users to prevent complications that might drive us away from the main focus of the tutorial. We will need to go ahead to create those. Paste the following code in the `main.go` file. \n\n``` go\n    // github.com/pusher-tutorials/pusher-channels-queue/go/main.go\n    \n    type User struct {\n            Email    string\n            Password string\n    }\n    \n    var (\n            validUsers = map[string]User{\n                    \"admin\": User{\n                            Email:    \"youremail@gmail.com\",\n                            Password: \"admin\",\n                    },\n                    \"lanre\": User{\n                            Email:    \"youremail@gmail.com\",\n                            Password: \"lanre\",\n                    },\n            }\n    )\n```   \n\n\n\u003e You should replace `youremail@gmail.com` with your real email address so as to get the email when we get to the end of the tutorial.\n\nNow back to the `login` function, you can go ahead to paste the following code in `main.go`\n\n\n``` go\n    // github.com/pusher-tutorials/pusher-channels-queue/go/main.go\n    \n    func encode(w io.Writer, v interface{}) {\n            json.NewEncoder(w).Encode(v)\n    }\n    \n    func login(client *pusher.Client) http.HandlerFunc {\n            return func(w http.ResponseWriter, r *http.Request) {\n                    defer r.Body.Close()\n    \n                    var request struct {\n                            UserName string `json:\"userName\"`\n                            Password string `json:\"password\"`\n                    }\n    \n                    type response struct {\n                            Message string `json:\"message\"`\n                            Success bool   `json:\"success\"`\n                    }\n                    \n                    // Make sure to only respond to the \"/login\" route\n                    // due to limitations in the standard HTTP router\n                    if r.URL.Path != \"/login\" {\n                            w.WriteHeader(http.StatusNotFound)\n                            return\n                    }\n    \n                    // Only HTTP posts are accepted\n                    if r.Method != http.MethodPost {\n                            w.WriteHeader(http.StatusMethodNotAllowed)\n                            return\n                    }\n    \n                    if err := json.NewDecoder(r.Body).Decode(\u0026request); err != nil {\n                            w.WriteHeader(http.StatusBadRequest)\n                            encode(w, response{\"Invalid request body\", false})\n                            return\n                    }\n                    \n                    // Check if the user exists in our memory mapped list.\n                    user, ok := validUsers[request.UserName]\n                    if !ok {\n                            w.WriteHeader(http.StatusBadRequest)\n                            encode(w, response{\"User not found\", false})\n                            return\n                    }\n                    \n                    \n                    // Do the passwords match ?\n                    if user.Password != request.Password {\n                            w.WriteHeader(http.StatusBadRequest)\n                            encode(w, response{\"Password does not match\", false})\n                            return\n                    }\n    \n                    w.WriteHeader(http.StatusOK)\n                    encode(w, response{\"Login successful\", true})\n    \n                    host, _, err := net.SplitHostPort(r.RemoteAddr)\n                    if err != nil {\n                            fmt.Fprintf(w, \"userip: %q is not IP:port\", r.RemoteAddr)\n                            return\n                    }\n    \n                    var ip = host\n                    \n                    if host == \"::1\" {\n                            ip = \"127.0.0.1\"\n                    }\n                    \n                    client.Trigger(\"auth\", \"login\", \u0026struct {\n                            IP    string `json:\"ip\"`\n                            User  string `json:\"user\"`\n                            Email string `json:\"email\"`\n                    }{\n                            User:  request.UserName,\n                            IP:    ip,\n                            Email: user.Email,\n                    })\n            }\n    }\n```   \n\nWhile it is pretty easy to grok through the code above due to the inline comments, I will still like to go through the last few lines. Especially from Line 59.\n\n\n- We get the IP of the user from `r.RemoteAddr`. \n\u003e Please note that if you end up running something that does this kind of IP fetching in production, this might not be the right approach if your Go application is behind a proxy.\n\n\n- We also check to make sure we have a valid IP address by making use of the `net.SplitHostPort` utility function.\n- Then we finally publish the data to the `auth` channel.\n\nAt this point, the entire `main.go` should look like the following: \n\n``` go\n    // github.com/pusher-tutorials/pusher-channels-queue/go/main.go\n    \n    package main\n    \n    import (\n            \"encoding/json\"\n            \"flag\"\n            \"fmt\"\n            \"io\"\n            \"log\"\n            \"net\"\n            \"net/http\"\n            \"os\"\n    \n            \"github.com/joho/godotenv\"\n            pusher \"github.com/pusher/pusher-http-go\"\n    )\n    \n    type User struct {\n            Email    string\n            Password string\n    }\n    \n    var (\n            validUsers = map[string]User{\n                    \"admin\": User{\n                            Email:    \"youremail@gmail.com\",\n                            Password: \"admin\",\n                    },\n                    \"lanre\": User{\n    \n                            Email:    \"youremail@gmail.com\",\n                            Password: \"lanre\",\n                    },\n            }\n    )\n    \n    func main() {\n    \n            port := flag.Int(\"http.port\", 1400, \"Port to run HTTP service on\")\n    \n            flag.Parse()\n            \n            err := godotenv.Load()\n            if err != nil {\n                    log.Fatal(\"Error loading .env file\")\n            }\n    \n            appID := os.Getenv(\"PUSHER_APP_ID\")\n            appKey := os.Getenv(\"PUSHER_APP_KEY\")\n            appSecret := os.Getenv(\"PUSHER_APP_SECRET\")\n            appCluster := os.Getenv(\"PUSHER_APP_CLUSTER\")\n            appIsSecure := os.Getenv(\"PUSHER_APP_SECURE\")\n    \n            var isSecure bool\n            if appIsSecure == \"1\" {\n                    isSecure = true\n            }\n    \n            client := \u0026pusher.Client{\n                    AppId:   appID,\n                    Key:     appKey,\n                    Secret:  appSecret,\n                    Cluster: appCluster,\n                    Secure:  isSecure,\n            }\n    \n            mux := http.NewServeMux()\n    \n            mux.Handle(\"/login\", http.HandlerFunc(login(client)))\n    \n            log.Fatal(http.ListenAndServe(fmt.Sprintf(\":%d\", *port), mux))\n    }\n    \n    func encode(w io.Writer, v interface{}) {\n            json.NewEncoder(w).Encode(v)\n    }\n    \n    func login(client *pusher.Client) http.HandlerFunc {\n            return func(w http.ResponseWriter, r *http.Request) {\n                    defer r.Body.Close()\n    \n                    var request struct {\n                            UserName string `json:\"userName\"`\n                            Password string `json:\"password\"`\n                    }\n    \n                    type response struct {\n                            Message string `json:\"message\"`\n                            Success bool   `json:\"success\"`\n                    }\n    \n                    if r.URL.Path != \"/login\" {\n                            w.WriteHeader(http.StatusNotFound)\n                            return\n                    }\n    \n                    if r.Method != http.MethodPost {\n                            w.WriteHeader(http.StatusMethodNotAllowed)\n                            return\n                    }\n    \n                    if err := json.NewDecoder(r.Body).Decode(\u0026request); err != nil {\n                            w.WriteHeader(http.StatusBadRequest)\n                            encode(w, response{\"Invalid request body\", false})\n                            return\n                    }\n    \n                    user, ok := validUsers[request.UserName]\n                    if !ok {\n                            w.WriteHeader(http.StatusBadRequest)\n                            encode(w, response{\"User not found\", false})\n                            return\n                    }\n    \n                    if user.Password != request.Password {\n                            w.WriteHeader(http.StatusBadRequest)\n                            encode(w, response{\"Password does not match\", false})\n                            return\n                    }\n    \n                    w.WriteHeader(http.StatusOK)\n                    encode(w, response{\"Login successful\", true})\n    \n                    host, _, err := net.SplitHostPort(r.RemoteAddr)\n                    if err != nil {\n                            fmt.Fprintf(w, \"userip: %q is not IP:port\", r.RemoteAddr)\n                            return\n                    }\n    \n                    var ip = host\n    \n                    if host == \"::1\" {\n                            ip = \"127.0.0.1\"\n                    }\n    \n                    client.Trigger(\"auth\", \"login\", \u0026struct {\n                            IP    string `json:\"ip\"`\n                            User  string `json:\"user\"`\n                            Email string `json:\"email\"`\n                    }{\n                            User:  request.UserName,\n                            IP:    ip,\n                            Email: user.Email,\n                    })\n            }\n    }\n```    \n\nRun the Go program:\n\n```\n    $ cd $GOPATH/src/github.com/pusher-tutorials/pusher-channels-queue/go\n    $ go run main.go\n```   \n\nYou can try to send requests to the service with `cURL` by:\n\n\n```  \n    $ curl  -X POST localhost:1400/login -d '{\"username\" : \"admin\", \"password\"  :\"admin\"}'\n```    \n\nThis will produce a response such as:\n\n```   \n    {\"message\":\"Login successful\",\"success\":true}\n    \n```\n\n## Building the Node.js email service\n\nWe have made progress by publishing the events to Pusher Channels. You can verify that the events are published by looking at the Debug Console of the dashboard.\n\n![channels-message-queue-pusher-dashboard](//images.ctfassets.net/1es3ne0caaid/4zMf4266icqKWSaqeOWEU/6d0c818ffca2e928ae156d90b01fc055/channels-message-queue-pusher-dashboard.png)\n\nTo build our Node.js email service, we will need to go back to the root directory, `pusher-channels-queue`. After which we will create the `node` directory as it will house our Node.js application. \n\n```   \n    $ mkdir node\n```    \n\nWe will need a couple libraries for the application; \n\n- `pusher-js` - the NodeJS SDK for Pusher Channels.\n- `nodemailer` - We need this to send emails.\n- `dotenv` - We need this to load environment variables from a file.\n- `handlebars` - We need to dynamically replace contents of the email before sending it. Things like username and IP address come to mind here.\n- `fs` - We need to be able to read the content of the email template from the filesystem. You can have a look at the [email template here.](https://raw.githubusercontent.com/adelowo/pusher-channels-queue/master/node/index.html)\n\nTo install the above, you will need to create a `package.json` file that contains the following:\n\n``` json\n    // github.com/pusher-tutorials/pusher-channels-queue/node/package.json\n    {\n      \"dependencies\": {\n        \"dotenv\": \"^6.2.0\",\n        \"fs\": \"^0.0.1-security\",\n        \"handlebars\": \"^4.0.12\",\n        \"nodemailer\": \"^4.7.0\",\n        \"pusher-js\": \"^4.3.1\"\n      }\n    }\n```    \n\nYou will need to run `npm install` to get install those dependencies.\n\nSince we need to subscribe to Pusher Channels, we need to first include the required values in `.env`. \n\n```\n    // github.com/pusher-tutorials/pusher-channels-queue/node/.env\n    PUSHER_APP_CLUSTER=\"YOUR_APP_CLUSTER\"\n    PUSHER_APP_SECURE=\"1\"\n    PUSHER_APP_KEY=\"YOUR_APP_KEY\"\n    MAILER_EMAIL=\"you@gmail.com\"\n    MAILER_PASSWORD=\"Password\"\n```\n\nThen create an `index.js` file\n\n``` javascript\n    // github.com/pusher-tutorials/pusher-channels-queue/node/index.js\n    \n    require('dotenv').config();\n    const Pusher = require('pusher-js');\n    const nodemailer = require('nodemailer');\n    const handlebars = require('handlebars');\n    const fs = require('fs');\n    \n    const pusherSocket = new Pusher(process.env.PUSHER_APP_KEY, {\n      forceTLS: process.env.PUSHER_APP_SECURE === '1' ? true : false,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n    });\n    \n    const transporter = nodemailer.createTransport({\n      service: 'gmail',\n      auth: {\n        user: process.env.MAILER_EMAIL,\n        pass: process.env.MAILER_PASSWORD,\n      },\n    });\n    \n    const channel = pusherSocket.subscribe('auth');\n    \n    channel.bind('login', data =\u003e {\n       \n      fs.readFile('./index.html', { encoding: 'utf-8' }, function(err, html) {\n        if (err) {\n          throw err;\n        }\n        \n        const template = handlebars.compile(html);\n        const replacements = {\n          username: data.user,\n          ip: data.ip,\n        };\n    \n        let mailOptions = {\n          from: '\"Pusher Tutorial demo\" \u003cfoo@example.com\u003e',\n          to: data.email,\n          subject: 'New login into Pusher tutorials demo app',\n          html: template(replacements),\n        };\n        \n        transporter.sendMail(mailOptions, function(error, response) {\n          if (error) {\n            console.log(error);\n            callback(error);\n          }\n        });\n      });\n      \n      console.log(data);\n    });\n```    \n\nIn the above code, we read the contents of `index.html` and process it like a handlebars template with `handlebars.compile(html)`. This is because we are dynamically replacing `{{ username }}`  and `{{ ip }}`.\n\nSo far, we have not created the `index.html` . You will need to create the aforementioned file and paste the following contents:\n\n``` html\n    // github.com/pusher-tutorials/pusher-channels-queue/node/index.html\n    \n    \u003c!doctype html\u003e\n    \u003chtml\u003e\n      \u003chead\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width\" /\u003e\n        \u003cmeta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /\u003e\n        \u003ctitle\u003eSimple Transactional Email\u003c/title\u003e\n        \u003cstyle\u003e\n          /* -------------------------------------\n              GLOBAL RESETS\n          ------------------------------------- */\n    \n          /*All the styling goes here*/\n    \n          img {\n            border: none;\n            -ms-interpolation-mode: bicubic;\n            max-width: 100%;\n          }\n    \n          body {\n            background-color: #f6f6f6;\n            font-family: sans-serif;\n            -webkit-font-smoothing: antialiased;\n            font-size: 14px;\n            line-height: 1.4;\n            margin: 0;\n            padding: 0;\n            -ms-text-size-adjust: 100%;\n            -webkit-text-size-adjust: 100%;\n          }\n    \n          table {\n            border-collapse: separate;\n            mso-table-lspace: 0pt;\n            mso-table-rspace: 0pt;\n            width: 100%; }\n            table td {\n              font-family: sans-serif;\n              font-size: 14px;\n              vertical-align: top;\n          }\n    \n          /* -------------------------------------\n              BODY \u0026 CONTAINER\n          ------------------------------------- */\n    \n          .body {\n            background-color: #f6f6f6;\n            width: 100%;\n          }\n    \n          /* Set a max-width, and make it display as block so it will automatically stretch to that width, but will also shrink down on a phone or something */\n          .container {\n            display: block;\n            Margin: 0 auto !important;\n            /* makes it centered */\n            max-width: 580px;\n            padding: 10px;\n            width: 580px;\n          }\n    \n          /* This should also be a block element, so that it will fill 100% of the .container */\n          .content {\n            box-sizing: border-box;\n            display: block;\n            Margin: 0 auto;\n            max-width: 580px;\n            padding: 10px;\n          }\n    \n          /* -------------------------------------\n              HEADER, FOOTER, MAIN\n          ------------------------------------- */\n          .main {\n            background: #ffffff;\n            border-radius: 3px;\n            width: 100%;\n          }\n    \n          .wrapper {\n            box-sizing: border-box;\n            padding: 20px;\n          }\n    \n          .content-block {\n            padding-bottom: 10px;\n            padding-top: 10px;\n          }\n    \n          .footer {\n            clear: both;\n            Margin-top: 10px;\n            text-align: center;\n            width: 100%;\n          }\n            .footer td,\n            .footer p,\n            .footer span,\n            .footer a {\n              color: #999999;\n              font-size: 12px;\n              text-align: center;\n          }\n    \n          /* -------------------------------------\n              TYPOGRAPHY\n          ------------------------------------- */\n          h1,\n          h2,\n          h3,\n          h4 {\n            color: #000000;\n            font-family: sans-serif;\n            font-weight: 400;\n            line-height: 1.4;\n            margin: 0;\n            margin-bottom: 30px;\n          }\n    \n          h1 {\n            font-size: 35px;\n            font-weight: 300;\n            text-align: center;\n            text-transform: capitalize;\n          }\n    \n          p,\n          ul,\n          ol {\n            font-family: sans-serif;\n            font-size: 14px;\n            font-weight: normal;\n            margin: 0;\n            margin-bottom: 15px;\n          }\n            p li,\n            ul li,\n            ol li {\n              list-style-position: inside;\n              margin-left: 5px;\n          }\n    \n          a {\n            color: #3498db;\n            text-decoration: underline;\n          }\n    \n          /* -------------------------------------\n              BUTTONS\n          ------------------------------------- */\n          .btn {\n            box-sizing: border-box;\n            width: 100%; }\n            .btn \u003e tbody \u003e tr \u003e td {\n              padding-bottom: 15px; }\n            .btn table {\n              width: auto;\n          }\n            .btn table td {\n              background-color: #ffffff;\n              border-radius: 5px;\n              text-align: center;\n          }\n            .btn a {\n              background-color: #ffffff;\n              border: solid 1px #3498db;\n              border-radius: 5px;\n              box-sizing: border-box;\n              color: #3498db;\n              cursor: pointer;\n              display: inline-block;\n              font-size: 14px;\n              font-weight: bold;\n              margin: 0;\n              padding: 12px 25px;\n              text-decoration: none;\n              text-transform: capitalize;\n          }\n    \n          .btn-primary table td {\n            background-color: #3498db;\n          }\n    \n          .btn-primary a {\n            background-color: #3498db;\n            border-color: #3498db;\n            color: #ffffff;\n          }\n    \n          /* -------------------------------------\n              OTHER STYLES THAT MIGHT BE USEFUL\n          ------------------------------------- */\n          .last {\n            margin-bottom: 0;\n          }\n    \n          .first {\n            margin-top: 0;\n          }\n    \n          .align-center {\n            text-align: center;\n          }\n    \n          .align-right {\n            text-align: right;\n          }\n    \n          .align-left {\n            text-align: left;\n          }\n    \n          .clear {\n            clear: both;\n          }\n    \n          .mt0 {\n            margin-top: 0;\n          }\n    \n          .mb0 {\n            margin-bottom: 0;\n          }\n    \n          .preheader {\n            color: transparent;\n            display: none;\n            height: 0;\n            max-height: 0;\n            max-width: 0;\n            opacity: 0;\n            overflow: hidden;\n            mso-hide: all;\n            visibility: hidden;\n            width: 0;\n          }\n    \n          .powered-by a {\n            text-decoration: none;\n          }\n    \n          hr {\n            border: 0;\n            border-bottom: 1px solid #f6f6f6;\n            Margin: 20px 0;\n          }\n    \n          /* -------------------------------------\n              RESPONSIVE AND MOBILE FRIENDLY STYLES\n          ------------------------------------- */\n          @media only screen and (max-width: 620px) {\n            table[class=body] h1 {\n              font-size: 28px !important;\n              margin-bottom: 10px !important;\n            }\n            table[class=body] p,\n            table[class=body] ul,\n            table[class=body] ol,\n            table[class=body] td,\n            table[class=body] span,\n            table[class=body] a {\n              font-size: 16px !important;\n            }\n            table[class=body] .wrapper,\n            table[class=body] .article {\n              padding: 10px !important;\n            }\n            table[class=body] .content {\n              padding: 0 !important;\n            }\n            table[class=body] .container {\n              padding: 0 !important;\n              width: 100% !important;\n            }\n            table[class=body] .main {\n              border-left-width: 0 !important;\n              border-radius: 0 !important;\n              border-right-width: 0 !important;\n            }\n            table[class=body] .btn table {\n              width: 100% !important;\n            }\n            table[class=body] .btn a {\n              width: 100% !important;\n            }\n            table[class=body] .img-responsive {\n              height: auto !important;\n              max-width: 100% !important;\n              width: auto !important;\n            }\n          }\n    \n          /* -------------------------------------\n              PRESERVE THESE STYLES IN THE HEAD\n          ------------------------------------- */\n          @media all {\n            .ExternalClass {\n              width: 100%;\n            }\n            .ExternalClass,\n            .ExternalClass p,\n            .ExternalClass span,\n            .ExternalClass font,\n            .ExternalClass td,\n            .ExternalClass div {\n              line-height: 100%;\n            }\n            .apple-link a {\n              color: inherit !important;\n              font-family: inherit !important;\n              font-size: inherit !important;\n              font-weight: inherit !important;\n              line-height: inherit !important;\n              text-decoration: none !important;\n            }\n            .btn-primary table td:hover {\n              background-color: #34495e !important;\n            }\n            .btn-primary a:hover {\n              background-color: #34495e !important;\n              border-color: #34495e !important;\n            }\n          }\n    \n        \u003c/style\u003e\n      \u003c/head\u003e\n      \u003cbody class=\"\"\u003e\n        \u003ctable role=\"presentation\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"body\"\u003e\n          \u003ctr\u003e\n            \u003ctd\u003e\u0026nbsp;\u003c/td\u003e\n            \u003ctd class=\"container\"\u003e\n              \u003cdiv class=\"content\"\u003e\n    \n                \u003c!-- START CENTERED WHITE CONTAINER --\u003e\n                \u003ctable role=\"presentation\" class=\"main\"\u003e\n    \n                  \u003c!-- START MAIN CONTENT AREA --\u003e\n                  \u003ctr\u003e\n                    \u003ctd class=\"wrapper\"\u003e\n                      \u003ctable role=\"presentation\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\"\u003e\n                        \u003ctr\u003e\n                          \u003ctd\u003e\n                            \u003cp\u003eHi {{ username }},\u003c/p\u003e\n                            \u003cp\u003eYou’ve successfully signed into the demo app.\u003c/p\u003e\n                            \u003cp\u003eYou signed in from the IP address, {{ ip }}\u003c/p\u003e\n                            \u003ctable role=\"presentation\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"btn btn-primary\"\u003e\n                              \u003ctbody\u003e\n                                \u003ctr\u003e\n                                  \u003ctd align=\"left\"\u003e\n                                    \u003ctable role=\"presentation\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\"\u003e\n                                      \u003ctbody\u003e\n                                        \u003ctr\u003e\n                                          \u003ctd\u003e \u003ca href=\"https://pusher.com\"\n                                                          target=\"_blank\"\u003eVisit\n                                                          Pusher\u003c/a\u003e \u003c/td\u003e\n                                        \u003c/tr\u003e\n                                      \u003c/tbody\u003e\n                                    \u003c/table\u003e\n                                  \u003c/td\u003e\n                                \u003c/tr\u003e\n                              \u003c/tbody\u003e\n                            \u003c/table\u003e\n                          \u003c/td\u003e\n                        \u003c/tr\u003e\n                      \u003c/table\u003e\n                    \u003c/td\u003e\n                  \u003c/tr\u003e\n    \n                \u003c!-- END MAIN CONTENT AREA --\u003e\n                \u003c/table\u003e\n    \n    \n              \u003c!-- END CENTERED WHITE CONTAINER --\u003e\n              \u003c/div\u003e\n            \u003c/td\u003e\n            \u003ctd\u003e\u0026nbsp;\u003c/td\u003e\n          \u003c/tr\u003e\n        \u003c/table\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nWe listen for the `login` event and pick out the important data from there. In this case, the user’s name and IP address from which they logged in. After which we send the email to the user.\n\nYou will need to start the Node.js service by running `node index.js`. After doing that, you can send login requests to the Golang service again.\n\nYou should check your email:\n\n![channels-message-queue-demo](//images.ctfassets.net/1es3ne0caaid/4LEEEGx2Y8yIUC24Ycg8qc/a98f5dd779dbc815db4e5f3f4753d934/channels-message-queue-demo.png)\n\n\u003e Please note that you might need to allow “Insecure apps”. Please visit https://support.google.com/accounts/answer/6010255?hl=en \n\n\n## Conclusion\n\nIn this tutorial, we have leveraged [Pusher Channels](https://pusher.com/channels) as a messaging queue between two different applications. While we used this to send email notifications, we can use this for much more interesting patterns depending on your application’s needs.\n\nThe entire source code of this tutorial can be found on [GitHub](https://github.com/adelowo/pusher-channels-queue).","metaTitle":"Pusher Channels as an alternative messaging queue","metaDescription":"Use Node.js, Golang and Pusher Channels to create a message queue backend. The demo application features a login service that sends an email upon successful authentication. You will use Golang for the login component and Node.js for the email service."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4s4CNV6nLa8kEgygGos2ga","type":"Entry","createdAt":"2019-01-31T18:12:48.312Z","updatedAt":"2019-01-31T18:12:48.312Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live score feed Chrome extension","url":"score-feed-chrome-extension","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/realtime-nfl-scores","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2019-01-31","description":"This brief tutorial guides you through creating a simple Chrome extension. It hooks into a Node backend to provide a live score feed with browser notifications.","prerequisite":"You will need Node installed on your machine.","content":"## Introduction\n\nIn this tutorial, we will look into how to build a Chrome extensionand also integrate realtime updates using the Pusher Channels API.\n\nSometimes, a traditional website isn’t the optimal channel for conveying realtime updates, because the updated event needs to be utilized instantaneously. The process of loading up a new webpage and waiting for it to update with data can be quite inconvenient to the consumer who doesn’t want to have to leave the current tab to retrieve data.\n\nChrome extensions are basically little websites that add extra functionality to Chrome and can be accessed from all open tabs on the Chrome browser. Under the hood, a Chrome extension is some HTML, CSS, and JavaScript that has access to the JavaScript APIs that Chrome exposes.\n\n## What we will build\n\nWe will build a simple Chrome extension that displays score updates on an NFL game. We will not key into an API but simulate the scores and cause them to progress randomly. For the sake of this tutorial, we will assume that the game being played is [Indianapolis Colts](https://www.colts.com/) vs [Tennessee Titans](https://www.titansonline.com/) and the extension will display updates in realtime once it is started.\n\nBy the end of this article, we will have built this Chrome extension that triggers Chrome notifications whenever there is an update on the game:\n\n![chrome-extension-demo](//images.ctfassets.net/1es3ne0caaid/1lEUGxbbJq6UUg6SgiyiOw/ec9b35c4ba28d754201687bcae81787c/chrome-extension-demo.gif)\n\nThe source code to this tutorial is available [here](https://github.com/neoighodaro/realtime-nfl-scores) on GitHub.\n\n\n## Prerequisites\n\nTo follow along with this tutorial, you will need to have the following:\n\n\n- An IDE of your choice like [Visual Studio Code](https://code.visualstudio.com/)\n- Node.js and NPM installed on your computer. [Installation instructions](https://nodejs.org/en/download/).\n- Basic knowledge of Node.js and vanilla JS.\n  \n\nIf you have all of the above requirements, we can proceed.\n\n\n\u003e Skip the next section if you already signed up with [Pusher](https://pusher.com) and created an application.\n\n\n## Setting up a Pusher account\n\nWe will need Pusher to power the realtime updates on the extension so you need to create an account [here](https://dashboard.pusher.com/accounts/sign_up) if you don’t already have one. After signing up, create a new Pusher channels application.\n\nWhile creating the application, fill in some information about the project. Select **Vanilla JS** for the frontend tech stack and **Node.js** for the backend tech. When the application is created, note the application’s credentials; we will need them to integrate Pusher into the extension.\n\n\n## Setting up the Node.js backend\n\nThe first thing we want to do here is to create a new folder to house the entire project. Create a new directory called `realtime-nfl-scores`.\n\nNext, launch your terminal and `cd` into the directory you just created. In there, create an `index.js` file. This will be the file that will contain the Node.js code.\n\nNext, Let’s initialize the directory for npm:\n\n```\n    $ npm init -y\n```\n\nThe command above will generate a `package.json` file in the root of the project. Next, lets install some dependencies for the application. These dependencies are:\n\n\n- [Express](https://expressjs.com/) - A minimalist web framework for Node.js.\n- [Dotenv](https://medium.com/@thejasonfile/using-dotenv-package-to-create-environment-variables-33da4ac4ea8f) - A package to load environment variables from a `.env` file into [process.env](https://nodejs.org/docs/latest/api/process.html#process_process_env).\n\nTo install them, run the following command in your terminal:\n\n```\n    $ npm install express --save\n    $ npm install dotenv --save\n    $ npm install pusher --save\n```\n\nBecause we have `Dotenv` installed, we can create a `.env` file in the root directory of the project and use the environment variables in our code. We will access the variables using [process.env](https://nodejs.org/docs/latest/api/process.html#process_process_env). Create a `.env` file in the root of the project and paste the following contents into the file:\n\n```\n    // File: ./.env\n    NODE_ENV=development\n    PUSHER_APP_ID=PUSHER_APP_ID\n    PUSHER_KEY=PUSHER_APP_KEY\n    PUSHER_SECRET=PUSHER_APP_SECRET\n    PUSHER_CLUSTER=PUSHER_APP_CLUSTER\n```\n\n\u003e ⚠️ Replace `PUSHER_*` keys with your app credentials.\n\nOpen the `index.js` file and update it with the code below:\n\n``` javascript\n    // File: ./index.js\n    const express = require(\"express\");\n    const app = express();\n    const Pusher = require(\"pusher\");\n    \n    require(\"dotenv\").config();\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: process.env.PUSHER_CLUSTER\n    });\n    \n    const simulate = () =\u003e {\n      let Colts = {\n        name: \"Colts\",\n        score: 0\n      };\n      \n      let Titan = {\n        name: \"Titan\",\n        score: 0\n      };\n      \n      const generateNumber = () =\u003e Math.floor(Math.random() * 2);\n      \n      setInterval(() =\u003e {\n        Colts.score = Colts.score + generateNumber();\n        Titan.score = Titan.score + generateNumber();\n        pusher.trigger(\"realtime-updates\", \"scores\", [Colts, Titan]);\n      }, 3500);\n    }\n    \n    app.get(\"/start\", simulate);\n    \n    app.listen(3000, () =\u003e console.log(\"Listening on port 3000\"));\n```\n\nIn the snippet above, we created a new Express application, configured DotEnv and initialized a new `Pusher` variable. Next, we registered a new instance of the `Pusher` variable using the variables that we previously stored in the `.env` file.\n\nWe defined a `simulate` function to generate a random number between 0 and 1 every 3.5 seconds, then trigger a new `scores` event (sending over the generated data) on the `realtime-updates` channel.\n\nWe defined a single `GET` endpoint called `start` and this is the endpoint that’s responsible for starting the generating of pseudo scores and triggering events. Finally, we specified that the server should listen for requests on port 3000.\n\nThis is all the code we need for the backend, let’s move on to building the frontend.\n\n\n## Building the frontend\n\nIn this section, we are going to start building the Chrome extension. The first thing we want to do is create a separate folder for the extension. Create a new folder called `frontend` and `cd` into it in your terminal.\n\nAll Chrome extensions require a manifest file. The manifest file tells Chrome everything it needs to know about the extension. Create a `manifest.json` file inside the extension project directory and paste the following into it:\n\n``` json\n    // File: ./manifest.json\n    {\n      \"manifest_version\": 2,\n      \"name\": \"Real-time NFL score\",\n      \"version\": \"1.0\",\n      \"description\": \"A simple Chrome extension to simulate the NFL scores in real-time\",\n      \"content_security_policy\": \"script-src 'self' https://js.pusher.com/4.2/pusher.min.js https://stats.pusher.com; object-src 'self'\",\n      \"browser_action\": {\n        \"default_icon\": \"./img/icon.png\",\n        \"default_popup\": \"popup.html\"\n      },\n      \"permissions\": [\"notifications\", \"activeTab\"]\n    }\n```\n\nMost of the keys in this JSON file are self-explanatory, let's go over the ones that are not:\n\n\n- `content_security_policy`: We register two remote origins that we want the extension to execute scripts from. To learn more about `content_security_policy` read [here](https://developer.chrome.com/apps/contentSecurityPolicy).\n- `browser_action`: We specify what the default icon of the extension is (we will create one shortly) and what HTML page should be displayed when the extension is opened.\n- `permissions`: We specify in this section that we need to access the activeTab and Notifications.\n  \n\n### Setting the default icon\n\nYou’ll notice that we specified a path to the default icon in the manifest file but didn’t create the folder or the file yet, so let’s do that now. Create a new folder and call it `img`. In the `img` directory, we will save an image (a png) file as `icon.png`.\n\n\n\u003e You can use any image of your choice! We just want something that looks nice for an extension’s default icon. We have an [icon](https://github.com/neoighodaro/realtime-nfl-scores/blob/master/frontend/img/icon.png) you can use in the repo but it should not be used without permission.\n  \n\n### Setting up the UI\n\nIn the manifest file, we indicated that an HTML file called `popup.html` should be displayed when the extension is opened. So, let’s create the file now in the root of the `frontend` directory and paste the following code into the file:\n\n``` html\n    \u003c!-- File: ./popup.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n      \u003chead\u003e\n        \u003clink\n          rel=\"stylesheet\"\n          href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\"\n        /\u003e\n        \u003cstyle\u003e\n          @import url(\"https://fonts.googleapis.com/css?family=Kosugi+Maru\");\n          body {\n            height: 130px;\n            width: 260px;\n            font-family: \"Kosugi Maru\", sans-serif;\n          }\n        \u003c/style\u003e\n        \u003ctitle\u003eNFL score\u003c/title\u003e\n      \u003c/head\u003e\n      \u003cbody\u003e\n        \u003cnav class=\"navbar navbar-dark bg-dark\"\u003e\n          \u003ca class=\"navbar-brand\" id=\"scores\" href=\"#\"\u003eReal-time NFL scores \u003c/a\u003e\n        \u003c/nav\u003e\n        \u003cdiv class=\"container text-center mt-2\"\u003e\n          \u003cdiv id=\"score_label\"\u003e\u003cp id=\"results\"\u003e----\u003c/p\u003e\u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"popup.js\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThe code above is an HTML description to display a simple Bootstrap layout for the extension. In the bottom of the code, we linked to two scripts:\n\n\n1. `pusher.min.js` - This is the official Pusher JavaScript SDK.\n2. `popup.js` - This is a script we will create shortly to handle the extension’s events.\n\nWe need the `pusher.min.js` script to interact with the Pusher API on the client-side, in other words, bind to events and subscribe to channels.\n\n### Binding to events and triggering notifications\n\nLet’s create the `popup.js` file in the root of the frontend directory and paste the following code into the file:\n\n``` javascript\n    // File: ./popup.js\n    const pusher = new Pusher(\"PUSHER_APP_KEY\", {\n      cluster: \"PUSHER_APP_CLUSTER\",\n      encrypted: true\n    });\n    \n    document.getElementById(\"scores\").addEventListener(\"click\", () =\u003e {\n      fetch(\"http://localhost:3000/start\");\n    });\n    \n    const channel = pusher.subscribe(\"realtime-updates\");\n    \n    channel.bind(\"scores\", data =\u003e {\n      const [teamOne, teamTwo] = data\n      \n      document.getElementById(\"results\").innerHTML = `\n        \u003cspan\u003e${teamOne.name}\u003c/span\u003e - ${teamOne.score}\u003cbr/\u003e\n        \u003cspan\u003e${teamTwo.name}\u003c/span\u003e - ${teamTwo.score}\u003cbr /\u003e\n      `;\n      \n      notify(teamOne, teamTwo);\n    });\n    \n    const notify = (first_team, second_team) =\u003e {\n       \n      if (first_team.score !== 0 \u0026\u0026 second_team.score !== 0) {\n        const notificationId = \"notify\"\n      \n        const options = {\n          type:    'basic',\n          iconUrl: './img/icon.png',\n          title:   `${first_team.name} vs ${second_team.name}`,\n          message: `There's been a score update on the game between ${first_team.name} and ${second_team.name}.`\n        };\n        \n        chrome.notifications.create(notificationId, options);\n        chrome.notifications.clear(notificationId);\n      }\n    };\n```\n\n\u003e Replace the PUSHER_* keys with your credentials from the Pusher dashboard.\n\nIn the snippet above, we created a new instance of the `Pusher` object then we registered a `click` event listener on the link tag that says **Real-time NFL scores**.\n\nThe event listener further makes a request to http://localhost:3000/start on the Node.js backend server using the fetch API. We want this link tag to be the control for the simulation, so that a click on this link when the extension is open will start the simulation.\n\nNext, we subscribed to the `realtime-updates` channel and bound to the `scores` event. In the bind method, we registered a callback that updates the `innerHTML` of the extension with the scores received from Pusher and lastly, we made a call to the notify function.\n\nThe `notify` function receives two objects, the teams currently playing, and uses them in setting the `options` object, then it makes a call to Chrome’s Notification API.\n\n\n## Testing out the application\n\nWe can easily test the extension by opening the Chrome browser and visiting the address: chrome://extensions:\n\n![chrome-extension-browser](//images.ctfassets.net/1es3ne0caaid/3JMYpbKOKIOImIiYyguQeG/1eecbc25fc4900fbc664ec18135ac985/chrome-extension-browser.png)\n\nOnce the page opens, turn on the **Developer mode** option by clicking on the switch by the extreme right of the top of the screen:\n\n![chrome-extension-dev-mode](//images.ctfassets.net/1es3ne0caaid/6DN8bWcq2ckWCuImiaE6OW/1b9868821ec95f1f649d6fa3fc5ee98d/chrome-extension-dev-mode.png)\n\nTurning on the developer mode made three new options to appear at the top of the screen:\n\n1. **Load unpacked**\n2. **Pack extension**\n3. **Update**\n\nIf we click on the **Load unpacked** option, we will be asked to select the folder where the unpacked extension lives. So, select the `frontend` folder. \n\nAfter selecting the folder, we should be able to see our extension (at the extreme right) with its icon on the extensions tab of the browser:\n\n![chrome-extension-icon](//images.ctfassets.net/1es3ne0caaid/1Sw1RnYja4mgY24McaQiMA/68cfa42e2a34d187085751d50da91a3d/chrome-extension-icon.png)\n\nNow we can start the backend server to test the application. `cd` to the `realtime-nfl-scores` project directory and run this command:\n\n```\n    $ node index.js\n```\n\nOnce we have the backend server running, we can load up the extension on the Chrome browser, click on the **Real-time NFL scores** link and watch the realtime updates and notifications flood in:\n\n![chrome-extension-demo](//images.ctfassets.net/1es3ne0caaid/1lEUGxbbJq6UUg6SgiyiOw/ec9b35c4ba28d754201687bcae81787c/chrome-extension-demo.gif)\n\nThat’s all. The extension is up and running and we can now see the simulated updates on the game between [Indianapolis Colts](https://www.colts.com/) vs [Tennessee Titans](https://www.titansonline.com/).\n\n\n## Conclusion\n\nIn this tutorial, we learned how to use Vanilla JavaScript to build a Chrome extension and hit an endpoint on the Node.js web server using the fetch API.\n\nThe source code to the application is available on [GitHub](https://github.com/neoighodaro/realtime-nfl-scores).","metaTitle":"Build a live score feed Chrome extension","metaDescription":"This brief tutorial guides you through creating a simple Chrome extension. It hooks into a Node backend to provide a live score feed with browser notifications."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"45sGlPxgJ2yyIi2oWscsIy","type":"Entry","createdAt":"2019-01-31T18:16:19.106Z","updatedAt":"2019-01-31T18:16:19.106Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a comment voting system with React and Node","url":"comment-voting-react-node","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4Cn04Zjx284MSEoSumwUau","type":"Entry","createdAt":"2018-08-13T17:38:51.972Z","updatedAt":"2018-08-13T17:38:51.972Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ayooluwa Isaiah","url":"ayooluwa-isaiah","email":"ayisaiah@gmail.com","twitter":"https://twitter.com/AyIsaiah","github":"http://github.com/ayoisaiah","guestWriter":true}}],"projectRepo":"https://github.com/ayoisaiah/realtime-comments","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2019-01-31","description":"This tutorial will show you how to create a simple comments ranking system using React and Node. Users will be able to comment on a demo post, and vote on other comments, with higher ranked comments being displayed above lower ranked responses.","prerequisite":"You will need Node 6+ installed on your machine. Basic knowledge of React will be helpful.","content":"In this tutorial, we’ll be integrating Channels’ capabilities into a comment system built with React. If you want to look at the complete code used for this tutorial, you can find it in this [GitHub repository](https://github.com/ayoisaiah/realtime-comments).\n\nTo make the comments section of a website more engaging, and so that readers can find the most useful or interesting comments, many comments software include voting capabilities that allow the best comments rise to the top while the irrelevant ones sink to the bottom.\n\nThe problem with many of them is that they are not updated in realtime. Some even require a page refresh before you can see the latest comments and votes. But with [Pusher Channels](https://pusher.com/docs), we can build a comment system that can be updated in realtime across all connected clients without requiring a refresh.\n\n## Prerequisites\n\nMake sure you have Node.js (version 6 or later) and npm installed on your computer. Otherwise, you can install Node and npm by following the [instructions on this page](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm). You also need to have a basic experience with building React and Node.js applications as I will not be explaining the basics of React and Node in this tutorial.\n\n## Sign up for Pusher Channels\n\nHead over to the Pusher website and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). Select **Channels apps** on the sidebar, and hit **Create Channels app** to create a new app. Once your app is created, navigate to the API Keys tab and take note of your app credentials as we’ll be using them in the next section.\n\n![react-comment-vote-keys](//images.ctfassets.net/1es3ne0caaid/162DRfOkOU64o2k8Y6C2CQ/457ceaa977c85a7d9cac5160c93b70ee/react-comment-vote-keys.png)\n\n## Set up the server\n\nCreate a new project folder in your filesystem. You can call it `realtime-comments` or something like that. Next, launch the terminal on your machine, `cd` into your project folder and run `npm init -y` to initialize the project with a `package.json` file.\n\nNext, run the command below to install all the dependencies we’ll be making use of on the server side:\n\n```\n    npm install express body-parser cors dotenv nedb pusher --save\n```\n\nHere’s what each package does:\n\n- [express](https://expressjs.com): A minimal and flexible Node.js server.\n- [nedb](https://github.com/louischatriot/nedb): In memory database for Node.js.\n- [body-parser](https://github.com/expressjs/body-parser): Express middleware for parsing incoming request bodies.\n- [dotenv](https://www.npmjs.com/package/dotenv): Loads environmental variables from `.env` file into `process.env`.\n- [pusher](https://pusher.com/): Node.js SDK for Pusher Channels.\n- [cors](https://github.com/expressjs/cors): For enabling [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) requests\n\nAfter the installation is complete, create a new `.env` file at the root of your project directory, and structure it as follows:\n\n```\n    // .env\n    \n    PORT=5000\n    PUSHER_APP_ID=\u003cyour app id\u003e\n    PUSHER_APP_KEY=\u003cyour app key\u003e\n    PUSHER_APP_SECRET=\u003cyour app secret\u003e\n    PUSHER_APP_CLUSTER=\u003cyour app cluster\u003e\n```\n\nHardcoding credentials in your code is a bad practice so we’re going to use the  `dotenv` package to load the app’s credentials from the `.env` file and make them available on `process.env`. You should not include this file in your source control system.\n\nGo ahead and create the server entry file `server.js` in the root of your project directory. This file is where we’ll set up our Node server, routing and in-memory database for saving comments and votes. We’ll also trigger Channels events when a new comment or vote is made so that our app frontend can be updated promptly.\n\nOpen up `server.js` in your text editor and paste in the following code:\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config({ path: '.env' });\n    \n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const cors = require('cors');\n    const Pusher = require('pusher');\n    const Datastore = require('nedb');\n    \n    const app = express();\n    \n    const db = new Datastore();\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      useTLS: true,\n    });\n    \n    app.use(cors());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use(bodyParser.json());\n    \n    app.set('port', process.env.PORT || 5000);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running → PORT ${server.address().port}`);\n    });\n```\n\nThe above code creates a simple Node server that runs on port 5000. We’re not doing much yet. We’ll need to create some routes to handle when a new comment is made or when a comment is voted on so that we can trigger events.\n\nLet’s add a route that sends all existing comments to the client on load:\n\n``` javascript\n    // server.js\n    ...\n    \n    app.use(bodyParser.json());\n    \n    app.get('/', (req, res) =\u003e {\n      db.find({}, (err, data) =\u003e {\n        if (err) return res.status(500).send(err);\n    \n        res.json(data);\n      });\n    });\n    \n    ...\n```\n\nNext, add a route that receives a comment from the client, saves it to the in-memory database and triggers a new Channels event.\n\n``` javascript\n    // server.js\n    ...\n    \n    app.get('/', (req, res) =\u003e {\n      db.find({}, (err, data) =\u003e {\n        if (err) return res.status(500).send(err);\n    \n        res.json(data);\n      });\n    });\n    \n    app.post('/comment', (req, res) =\u003e {\n      db.insert(Object.assign({}, req.body), (err, newComment) =\u003e {\n        if (err) {\n          return res.status(500).send(err);\n        }\n    \n        pusher.trigger('comments', 'new-comment', {\n          comment: newComment,\n        });\n    \n        res.status(200).send('OK');\n      });\n    });\n    \n    ...\n```\n\nWith Channels, all we need to do to trigger an update on our app frontend is to use the `trigger` method on the `pusher` instance that we have created. Here, we’re triggering an event named `new-comment` to Channels on a channel called `comments`, and passing the new comment in the event payload.\n\nFor the client to receive an update, it needs to subscribe to the `comments` channel first. I’ll show you how to set this up in the next section.\n\nBefore you continue, install the [nodemon](https://www.npmjs.com/package/nodemon) package globally, so that you don’t have to restart your server manually whenever your code changes:\n\n```\n    npm install -g nodemon\n```\n\nRun the command below to start the server with `nodemon`:\n\n```\n    nodemon server.js\n```\n\n## Set up the application frontend\n\nLet’s use the `create-react-app` package to bootstrap our React application. You can install it on your machine by running `npm install -g create-react-app` in the terminal.\n\nOnce the installation is done, run the command below to setup the React app:\n\n```\n    create-react-app client\n```\n\nNext, `cd` into the newly created `client` directory and install the other dependencies which we’ll be needing for the application frontend:\n\n```\n    npm install pusher-js axios --save\n```\n\n- [pusher-js](https://pusher.com): Client SDK for Pusher.\n- [axios](https://github.com/axios/axios): Promise based HTTP client for the browser and Node.\n\nFinally, start the development server by running `npm start` from within the root of the `client` directory and navigate to http://localhost:3000 in your browser.\n\n## Add the styles for the app\n\nWithin the `client` directory, open up `src/App.css` and change its contents to look like this:\n\n``` css\n    // client/src/App.css\n    \n    .App {\n      width: 100%;\n      max-width: 600px;\n      margin: 0 auto;\n    }\n    \n    .post {\n      text-align: center;\n    }\n    \n    label {\n      display: block;\n      margin-bottom: 10px;\n      font-weight: bold;\n    }\n    \n    input, textarea {\n      width: 100%;\n      margin-bottom: 20px;\n      border: 1px solid #dedede;\n      padding: 10px;\n    }\n    \n    button {\n      display: inline-block;\n      height: 38px;\n      padding: 0 30px;\n      color: white;\n      text-align: center;\n      font-size: 11px;\n      font-weight: 700;\n      line-height: 38px;\n      letter-spacing: .1rem;\n      text-transform: uppercase;\n      text-decoration: none;\n      white-space: nowrap;\n      border-radius: 2px;\n      background-color: #331550;\n      border: 1px solid #331550;\n      cursor: pointer;\n      box-sizing: border-box;\n    }\n    \n    .comment {\n      padding-top: 20px;\n      padding-bottom: 20px;\n      border-bottom: 1px solid #ccc;\n    }\n    \n    .voting {\n      display: flex;\n      justify-content: space-between;\n      align-content: center;\n    }\n    \n    .upvote {\n      background-color: #073525;\n      border: 1px solid #073525;\n      margin-right: 10px;\n    }\n    \n    .downvote {\n      background-color: #FF0026;\n      border: 1px solid #FF0026;\n    }\n```\n\n## Post comments and display them in realtime\n\nOpen up `client/src/App.js` in your text editor and change its contents to look like this:\n\n``` javascript\n    // client/src/App.js\n    \n    import React, { Component } from 'react';\n    import Pusher from 'pusher-js';\n    import axios from 'axios';\n    import './App.css';\n    \n    class App extends Component {\n      state = {\n        username: '',\n        newComment: '',\n        comments: [],\n      };\n    \n      updateInput = event =\u003e {\n        const { name, value } = event.target;\n        this.setState({\n          [name]: value,\n        });\n      };\n    \n      postComment = event =\u003e {\n        event.preventDefault();\n        const { username, newComment } = this.state;\n        if (username.trim() === '' || newComment.trim() === '') return;\n        \n        const data = {\n          name: username,\n          text: newComment,\n          votes: 0,\n        };\n    \n        axios\n          .post('http://localhost:5000/comment', data)\n          .then(() =\u003e {\n            this.setState({\n              username: '',\n              newComment: '',\n            });\n          })\n          .catch(error =\u003e console.log(error));\n      };\n    \n      componentDidMount() {\n        const pusher = new Pusher('\u003cyour app key\u003e', {\n          cluster: '\u003cyour app cluster\u003e',\n          encrypted: true,\n        });\n        \n        axios.get('http://localhost:5000').then(({ data }) =\u003e {\n          this.setState({\n            comments: [...data],\n          });\n        }).catch(error =\u003e console.log(error))\n        \n        const channel = pusher.subscribe('comments');\n        channel.bind('new-comment', data =\u003e {\n          this.setState(prevState =\u003e {\n            const { comments } = prevState;\n            comments.push(data.comment);\n    \n            return {\n              comments,\n            };\n          });\n        });\n      }\n    \n      render() {\n        const { username, newComment, comments } = this.state;\n    \n        const userComments = comments.map(e =\u003e (\n          \u003carticle className=\"comment\" key={e._id}\u003e\n            \u003ch1 className=\"comment-user\"\u003e{e.name}\u003c/h1\u003e\n            \u003cp className=\"comment-text\"\u003e{e.text}\u003c/p\u003e\n            \u003cdiv className=\"voting\"\u003e\n              \u003cdiv className=\"vote-buttons\"\u003e\n                \u003cbutton className=\"upvote\"\u003e\n                  Upvote\n                \u003c/button\u003e\n                \u003cbutton className=\"downvote\"\u003e\n                  Downvote\n                \u003c/button\u003e\n              \u003c/div\u003e\n              \u003cdiv className=\"votes\"\u003eVotes: {e.votes}\u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/article\u003e\n        ));\n    \n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003carticle className=\"post\"\u003e\n              \u003ch1\u003eInteresting Video\u003c/h1\u003e\n              \u003ciframe\n                title=\"video\"\n                width=\"560\"\n                height=\"315\"\n                src=\"https://www.youtube.com/embed/PC60fAKJiek\"\n                frameborder=\"0\"\n                allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n                allowfullscreen\n              /\u003e\n              \u003cp\u003eLeave a comment if you enjoyed the video above\u003c/p\u003e\n            \u003c/article\u003e\n            \u003csection className=\"comments-form\"\u003e\n              \u003cform onSubmit={this.postComment}\u003e\n                \u003clabel htmlFor=\"username\"\u003eName:\u003c/label\u003e\n                \u003cinput\n                  className=\"username\"\n                  name=\"username\"\n                  id=\"username\"\n                  type=\"name\"\n                  value={username}\n                  onChange={this.updateInput}\n                /\u003e\n    \n                \u003clabel htmlFor=\"new-comment\"\u003eComment:\u003c/label\u003e\n                \u003ctextarea\n                  className=\"comment\"\n                  name=\"newComment\"\n                  id=\"new-comment\"\n                  value={newComment}\n                  onChange={this.updateInput}\n                /\u003e\n                \u003cbutton type=\"submit\"\u003eHave your say\u003c/button\u003e\n              \u003c/form\u003e\n            \u003c/section\u003e\n            \u003csection className=\"comments-section\"\u003e{userComments}\u003c/section\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default App;\n```\n\nAs you can see, we have a simple form that takes the name of the user and their comment. Once the form is submitted, we initialize a `votes` property on the comment to keep track of the number of votes and post it to the `/comment` route we created on the server earlier.\n\nIn the `componentDidMount()` lifecycle hook, we’re using the Pusher client library to latch on to events emitted by the server so that we can update the application state and display the latest comments instantly. Here, we’re listening for the `new-comment` event on the `comments` channel. Once the `new-comment` event is triggered, our application is updated with the new comment as shown below:\n\n![react-comment-vote-demo-1](//images.ctfassets.net/1es3ne0caaid/t5nU8FSdMcywGKqeeUyAI/e54eb2292f53bf1eb8ae3fe49356bf68/react-comment-vote-demo-1.gif)\n\nNote that you need to replace with `\u003cyour app key\u003e` and `\u003cyour app cluster\u003e`  with the appropriate values from your app dashboard before running the code.\n\n## Add voting capabilities\n\nEach comment has an **upvote** and **downvote** button, but it doesn’t do anything just yet. Let’s make it so that when the upvote button is clicked, the votes count is increased by one and when the downvotes button is clicked, the votes count is decreased by one.\n\nUpdate `client/src/App.js` to look like this:\n\n``` javascript\n    // client/src/App.js\n    ...\n      vote = (id, num) =\u003e {\n        axios.post('http://localhost:5000/vote', {\n          id,\n          vote: num,\n        });\n      };\n    \n      componentDidMount() {\n        ...\n        const channel = pusher.subscribe('comments');\n        channel.bind('new-comment', data =\u003e {\n          this.setState(prevState =\u003e {\n            const { comments } = prevState;\n            comments.push(data.comment);\n    \n            return {\n              comments,\n            };\n          });\n        });\n    \n        channel.bind('new-vote', data =\u003e {\n          let { comments } = this.state;\n          comments = comments.map(e =\u003e {\n            if (e._id === data.comment._id) {\n              return data.comment;\n            }\n    \n            return e;\n          });\n    \n          this.setState({\n            comments,\n          });\n        });\n      }\n    \n      render() {\n        const { username, newComment, comments } = this.state;\n    \n        const userComments = comments.map(e =\u003e (\n          \u003carticle className=\"comment\" key={e._id}\u003e\n            \u003ch1 className=\"comment-user\"\u003e{e.name}\u003c/h1\u003e\n            \u003cp className=\"comment-text\"\u003e{e.text}\u003c/p\u003e\n            \u003cdiv className=\"voting\"\u003e\n              \u003cdiv className=\"vote-buttons\"\u003e\n                \u003cbutton className=\"upvote\" onClick={() =\u003e this.vote(e._id, 1)}\u003e\n                  Upvote\n                \u003c/button\u003e\n                \u003cbutton className=\"downvote\" onClick={() =\u003e this.vote(e._id, -1)}\u003e\n                  Downvote\n                \u003c/button\u003e\n              \u003c/div\u003e\n              \u003cdiv className=\"votes\"\u003eVotes: {e.votes}\u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/article\u003e\n        ));\n      }\n```\n\nOnce the **upvote** or **downvote** button is clicked, the ID of the comment and is sent to the server along with a number that increments or decrements the votes count. Notice that we’re now listening for the `new-vote` event in `componentDidMount()` so that we can easily update the votes count on the frontend, once this event is triggered on the server.\n\nLet’s go ahead and create the `/vote` route in `server.js` and trigger the `new-vote` event once a new vote is made on a comment. Add the following code to your `server.js` file below the `/comment` route:\n\n``` javascript\n    // server.js\n    \n    ...\n    \n    app.post('/vote', (req, res) =\u003e {\n      const { id, vote } = req.body;\n      db.findOne({ _id: id }, function (err, doc) {\n        if (err) {\n          return res.status(500).send(err);\n        }\n    \n        db.update({ _id: id }, { $set: { votes: doc.votes + vote } }, { returnUpdatedDocs: true }, (err, num, updatedDoc) =\u003e {\n          if (err) return res.status(500).send(err);\n    \n          pusher.trigger('comments', 'new-vote', {\n            comment: updatedDoc,\n          });\n        });\n      });\n    });\n    \n    ...\n```\n\nAs you can see, once a new vote is received, the record is updated in the database and we trigger the `new-vote` event with the updated comment in its payload. This allows us to update the vote count on each comment as soon as they happen.\n\n![react-comment-vote-demo-2](//images.ctfassets.net/1es3ne0caaid/2LcaBtMP040yss2g2uUyMM/0bb9c604e34d1ba4a84b1d9b2495b6ce/react-comment-vote-demo-2.gif)\n\n## Wrap up\n\nIn this tutorial, we learned how easy it is to create a live comments system and update several clients in realtime with Pusher Channels. If you want to learn more about Channels, visit its [documentation](https://pusher.com/docs) page or check out more [tutorials](https://pusher.com/tutorials) on the Pusher blog.\n\nThanks for reading! Remember that you can find the source code of this app in this [GitHub repository](https://github.com/ayoisaiah/realtime-comments).","metaTitle":"Build a comment voting system with React and Node","metaDescription":"This tutorial will show you how to create a simple comments ranking system using React and Node. Users will be able to comment on a demo post, and vote on other comments, with higher ranked comments being displayed above lower ranked responses."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3bqfumgc88gaOCYy2weYSs","type":"Entry","createdAt":"2018-12-12T20:28:47.063Z","updatedAt":"2018-12-12T20:28:47.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"How to stream user tweets with Zapier and React","url":"react-zapier-tweet-stream","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4Cn04Zjx284MSEoSumwUau","type":"Entry","createdAt":"2018-08-13T17:38:51.972Z","updatedAt":"2018-08-13T17:38:51.972Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ayooluwa Isaiah","url":"ayooluwa-isaiah","email":"ayisaiah@gmail.com","twitter":"https://twitter.com/AyIsaiah","github":"http://github.com/ayoisaiah","guestWriter":true}}],"projectRepo":"https://github.com/ayoisaiah/tweet-stream","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-12-12","description":"Learn how to use Zapier, together with Pusher Channels, to create a live tweet stream. You will build a simple web app with Node and React, and use Zapier to connect to a Twitter feed. Pusher will supply the realtime functionality. ","prerequisite":"You will need Node 6+ installed on your machine. Some experience of React will be helpful.","content":"In this tutorial, we’ll explore how Pusher Channels can be used in conjunction with [Zapier](https://zapier.com/) to display updates to a user’s Twitter feed on a webpage. If you want to play around with the code as you read this tutorial, visit this [GitHub repository](https://github.com/ayoisaiah/tweet-stream) which contains the final version of the code for you to check out and run locally.\n\n## Prerequisites\n\nPrior experience with building [React](https://reactjs.org/) and Node.js applications is required to complete this tutorial, but you don’t need to know how to use Pusher Channels. You also need to have Node.js (version 6 and later) as well as npm (version 5 or later) installed on your machine. You can use the commands `node -v` and `npm -v` to see which versions of [Node](https://nodejs.org/en/) and [npm](https://www.npmjs.com/) you have installed.\n\n## Getting started\n\nCreate a new folder for this project in your filesystem. You can call it `tweet-stream` or any other name that you prefer. Open a new terminal window and `cd` into the new directory you just created, then run `npm init -y` to initialize the project with a `package.json` file.\n\nNext, run the following command to install all the dependencies we’ll be needing to build the server component of the application:\n\n```\n    npm install express body-parser cors dotenv pusher -S\n```\n\nOnce the installation completes, create the following files in the root of your project directory: `server.js` and `variables.env`.\n\n## Sign up for Pusher\n\nBefore we can utilize the features of Pusher Channels in our application, we need to [sign up for a free Pusher account](https://dashboard.pusher.com/accounts/sign_up). Once your account is created, select **Channels apps** on the sidebar, and hit **Create Channels app** to create a new app. Retrieve your credentials from the **API Keys** tab, and then add the following to the `variable.env` file you just created.\n\n```\n    // variables.env\n    \n    PORT=5000\n    PUSHER_APP_ID=\u003cyour app id\u003e\n    PUSHER_APP_KEY=\u003cyour app key\u003e\n    PUSHER_APP_SECRET=\u003cyour app secret\u003e\n    PUSHER_APP_CLUSTER=\u003cyour app cluster\u003e\n```\n\n## Set up the server\n\nOpen up `server.js` in your text editor and paste in the following:\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config({ path: 'variables.env' });\n    \n    const express = require('express');\n    const cors = require('cors');\n    const Pusher = require('pusher');\n    const bodyParser = require('body-parser');\n    \n    // Create an express app\n    const app = express();\n    \n    app.use(cors());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use(bodyParser.json());\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true,\n    });\n    \n    app.post('/', (req, res) =\u003e {\n      console.log(req.body);\n    });\n    \n    app.set('port', process.env.PORT || 5000);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running → PORT ${server.address().port}`);\n    });\n```\n\nAs you can see, we’ve set up just the one route where new tweets will be posted to. For now we’re just logging the request body to the console, but we’ll revisit this section in the later parts of the tutorial.\n\nYou can start the server by running `node server.js` in the terminal. It should now be running on port 5000.\n\n## Expose your local server to the world with ngrok\n\nTo make your local server is accessible to the outside world, you can use a service like [ngrok](http://ngrok.com). Visit the ngrok website to find out [how to install and set up ngrok](https://ngrok.com/download) on your computer. Once you have it installed, start an HTTP tunnel on port 5000 by running the following command in a new terminal window:\n\n```\n    ./ngrok http 5000\n```\n\nIf your webhook server is listening on another port, make sure to provide the correct port when starting the HTTP tunnel. You will be given a couple of URLs but you only need the last one which is on the secure (HTTPS) protocol.\n\n![react-zapier-ngrok](//images.ctfassets.net/1es3ne0caaid/49KdyK8n9eO0AcuYMsMaI6/f4ee46edc5788d93aea1cab3d960d15d/react-zapier-ngrok.png)\n\n## Sign up for Zapier\n\nZapier is a service that allows you to integrate between several applications. To use Zapier, you need to [sign up for an account](https://zapier.com/sign-up/). Once your account is created, [go here](https://zapier.com/app/home)  and click the **Make a Zap!** button to create your first Zap.\n\nUnder **Choose a Trigger App,** select Twitter and choose **User Tweet** under **Twitter Trigger.**\n\n![react-zapier-1](//images.ctfassets.net/1es3ne0caaid/1bjW2hrALkWoC0ccY8wgMW/0b724a46b5bcc07ce83059ce0182b85b/react-zapier-1.png)\n\nHit the **Continue** button to move on to the next step. Connect a Twitter account that will be used for this Zap. You can use your existing Twitter account, or create a new one if you prefer. Once you have connected account, select it and hit **Save + Continue**. \n\n![react-zapier-2](//images.ctfassets.net/1es3ne0caaid/2GYUBhSq40UI0aaoUYKAm0/e2291fff2c2d7e5d620dc3772deac81b/react-zapier-2.png)\n\nOn the screen that says **Pick A Sample To Set Up Your Zap**, before you click **Pull in Samples**, make sure there is a recent enough tweet on the account you set up. Otherwise, send a tweet out before clicking the button.\n\n![react-zapier-3](//images.ctfassets.net/1es3ne0caaid/6bbckG38xqW2QsmKC2QW6k/80367b85eb62097dd8b566d85b155a26/react-zapier-3.png)\n\nYou should see the following screen once a sample tweet has been pulled from your Twitter account. Just hit the **Continue** button.\n\n![react-zapier-4](//images.ctfassets.net/1es3ne0caaid/1EwLTc8gIQSAekmGUkqE4G/98c08a0d7260017e2e65d19e1f5b6cf5/react-zapier-4.png)\n\nYou need to setup an action step. Click the link highlighted in the screenshot below to add an action app.\n\n![react-zapier-5](//images.ctfassets.net/1es3ne0caaid/2kmmNZZBy4UmqOe6o4us6W/6c71656cd3afbafb5c5e4be706537f91/react-zapier-5.png)\n\nUnder **Choose an Action app** select **Webhooks by Zapier Action,** then select **POST** under the  **CREATE** heading and click the **Continue** button.\n\n![react-zapier-6](//images.ctfassets.net/1es3ne0caaid/2YiZA7jymAEOKm0Qq08Kqy/861b4d8fd9d70cf9a449f77e678a1635/react-zapier-6.png)\n\nYou will be asked to provided a URL under **Set up Webhooks by Zapier POST**. Copy the URL received from ngrok into the input field. Under **advanced options**, set the **Payload** type to **Json** then hit the **Continue** button.\n\n![react-zapier-7](//images.ctfassets.net/1es3ne0caaid/5Opul6Opnq4iKAqGIyCsUw/fa63abf0b4f8a9260057137ae93ec286/react-zapier-7.png)\n\nOn the next page, hit **Send Test to Webhook by Zapier**. This will send a post request to your local server along with the payload of the sample tweet pulled in earlier in the request body. Check the terminal window where the server is running. You should see some JSON output in the terminal.\n\nFinally, hit **Skip test** on the left hand side and **Finish** on the right. You will be redirected to a page confirming the successful setup of your first Zap.\n\n![react-zapier-8](//images.ctfassets.net/1es3ne0caaid/3d0TWF2YI0EsKawGsASqYW/6d33288333892c5cd535ba887c53cf6b/react-zapier-8.png)\n\nThe 15 minute interval is a limitation of Zapier’s free and entry level plans. With a paid plan, you can take it to as low as 5 minutes.\n\n## Create the application frontend\n\nLet’s work on the app frontend a bit. We need to install the `create-react-app` package globally so that we can use it to bootstrap a new React app. Use the following command below to install `create-react-app`:\n\n```\n    npm install create-react-app -g\n```\n\nNext, `cd` in to your project directory and run `create-react-app client` to create a new React app in a new directory called `client`. Once the installation process completes, `cd` into the newly created `client` directory and run `yarn start` to start the development server. The application will be available for you to view it at http://localhost:3000.\n\nLaunch another terminal window, and `cd` into the `client` directory. Then run the following command to install the other dependencies we’ll be using to build the React app.\n\n```\n    npm install react-timeago pusher-js -S\n```\n\nNext, open up `client/src/App.js` in your favorite text editor and change its contents to look like this:\n\n``` javascript\n    // client/src/App.js\n    \n    import React, { Component } from 'react';\n    import Pusher from 'pusher-js';\n    import TimeAgo from 'react-timeago';\n    import './App.css';\n    \n    class App extends Component {\n      state = {\n        tweets: [],\n      };\n    \n      componentDidMount() {\n        const pusher = new Pusher('\u003cyour app key\u003e', {\n          cluster: '\u003cyour app cluster\u003e',\n          encrypted: true,\n        });\n    \n        const channel = pusher.subscribe('tweets');\n        channel.bind('new-tweet', data =\u003e {\n          const { tweets } = this.state;\n          tweets.push(data.payload);\n    \n          this.setState({\n            tweets,\n          });\n        });\n      }\n    \n      render() {\n        const { tweets: tweetArr } = this.state;\n    \n        const Tweet = (tweet, index) =\u003e (\n          \u003cdiv className=\"tweet\" key={index}\u003e\n            \u003cp className=\"user\"\u003e\n              \u003cspan className=\"screen-name\"\u003e{tweet.user__name}\u003c/span\u003e\n              \u003cspan className=\"username\"\u003e{tweet.user__screen_name}\u003c/span\u003e\n            \u003c/p\u003e\n            \u003cp className=\"tweet-text\"\u003e{tweet.text}\u003c/p\u003e\n            \u003cdiv className=\"meta\"\u003e\n              \u003cdiv\u003e\n                \u003cspan className=\"retweets\"\u003eRetweets: {tweet.retweet_count}\u003c/span\u003e\n                \u003cspan className=\"likes\"\u003eLikes: {tweet.favorite_count}\u003c/span\u003e\n              \u003c/div\u003e\n              \u003ca href={tweet.url}\u003e\n                \u003cTimeAgo date={tweet.created_at} /\u003e\n              \u003c/a\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        );\n    \n        const tweets = tweetArr.map((tweet, index) =\u003e Tweet(tweet, index));\n    \n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003cheader className=\"App-header\"\u003e\n              \u003ch1\u003eTweets\u003c/h1\u003e\n            \u003c/header\u003e\n    \n            \u003cmain className=\"tweets\"\u003e{tweets}\u003c/main\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default App;\n```\n\nThe `componentDidMount()` lifecycle method houses the logic for displaying new tweets on the page. We’re opening a connection to Channels using the `subscribe()` method which allows us to subscribe to a new channel called `tweets`. Then, we listen for the `new-tweet` event on the `tweets` channel using the `bind` method and update the application state once we receive a tweet update.\n\nDon’t forget to retrieve your Channels credentials from the **API Keys** tab in the dashboard, and then replace the `\u003cyour app key\u003e` and `\u003cyour app cluster\u003e` placeholders in `App.js` with the appropriate values.\n\n## Add the styles for the app\n\nLet's add the styles for the app’s frontend. Open up `client/src/App.css` in your editor and replace its contents with the following styles:\n\n``` css\n    // client/src/App.css\n    \n    body {\n      font-family: Helvetica, \"Helvetica Nueue\", sans-serif;\n    }\n    \n    .App {\n      text-align: center;\n    }\n    \n    .tweets {\n      width: 100%;\n      max-width: 700px;\n      margin: 30px auto;\n    }\n    \n    .tweet {\n      margin-bottom: 20px;\n      border: 1px solid #ccc;\n      padding: 15px;\n      text-align: left;\n    }\n    \n    .screen-name {\n      font-weight: bold;\n      display: inline-block;\n      margin-right: 10px;\n    }\n    \n    .username::before {\n      content: '@';\n    }\n    \n    .retweets {\n      display: inline-block;\n      margin-right: 10px;\n    }\n    \n    .meta {\n      display: flex;\n      justify-content: space-between;\n    }\n```\n\n## Trigger updates from the server\n\nInside the `server.js` file, change the root route to look like this:\n\n``` javascript\n    // server.js\n    \n    app.post('/', (req, res) =\u003e {\n      pusher.trigger('tweets', 'new-tweet', {\n        payload: req.body,\n      });\n    });\n```\n\nZapier will hit this route for each new tweet that is posted to the Twitter account you connected, and include the tweet payload in the request body. We can then trigger a new update on the `tweets` channel with the tweet payload included.\n\nKill the server using `Ctrl-C` and run `node server.js` again from the root of your project directory. Then send a few tweets using your Twitter account. After about 15 minutes, you should see the new tweets on the page.\n\n![react-zapier-9](//images.ctfassets.net/1es3ne0caaid/2ZfACamgH662i4q8WMqAay/de17c789a6deda16a20d97795bd0e974/react-zapier-9.png)\n\nYou can also trigger the update manually by going to the [Zapier dashboard](https://zapier.com/app/dashboard), find the Zap you created and hit the **Run** button as shown the screenshot above.\n\n![react-zapier-demo](//images.ctfassets.net/1es3ne0caaid/30BrbmI74QiYyyMyM4cW4y/72f3b87a7047930485bdcd0df07b58b9/react-zapier-demo.gif)\n\n## Wrap up\n\nI have explained how to set up Zapier to get fetch user tweets every 15 minutes and how to display new updates on a webpage with Pusher Channels. If you want to dig into other things you can do with Channels, make sure to check out its [exhaustive documentation](https://pusher.com/docs). To grab the complete code used in this tutorial, please visit this [GitHub repository](https://github.com/ayoisaiah/tweet-stream).","metaTitle":"How to stream user tweets with Zapier and React","metaDescription":"Learn how to use Zapier, together with Pusher Channels, to create a live tweet stream. You will build a simple web app with Node and React, and use Zapier to connect to a Twitter feed. Pusher will supply the realtime functionality. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1ojP4dOvryiCAYqaC0isEq","type":"Entry","createdAt":"2018-12-11T23:26:44.674Z","updatedAt":"2018-12-11T23:26:44.674Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Service discovery in a microservice architecture with Pusher Channels","url":"service-discovery-microservices","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Khmrnzj5moO4S6WOYOGAo","type":"Entry","createdAt":"2018-11-14T14:35:55.702Z","updatedAt":"2019-03-03T15:15:59.601Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lanre Adelowo","url":"lanre-adelowo","email":"adelowomailbox@gmail.com","twitter":"https://twitter.com/alanreadelowo","github":"https://github.com/adelowo","guestWriter":true}}],"projectRepo":"https://github.com/adelowo/pusher-channel-discovery","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-12-11","description":"Learn how to use Pusher Channels to support service discovery when creating a microservices architecture. This tutorial works through a practical example using two Docker services, one using Node and one in Golang. ","prerequisite":"You will need Node, Golang 1.10+ and Docker set up on your machine.","content":"In this tutorial, we will be implementing a service discovery using Pusher Channels. To demonstrate this, we will be building two services - both of them a unique ID generator. They will be implemented in both NodeJS and Golang. This is done so as to depict a real-life microservices scenario where services are built in multiple languages. In our use-case here, the NodeJS application will be version 1 while the second iteration will be in Golang. As said earlier, both of them are unique ID generators and basically all they do is generate a `UUID`. The Node service generates a UUID V5 while the Golang service will generate a UUID v4.\n\nMicroservices are an interesting pattern but they usually present a new class of problems. An interesting problem this pattern presents is communication between the bulk of services that make up the entire mesh. These services are run in multiple replicas - depending on scalability needs - and dynamic environments. Take Kubernetes as an example, deploying a container might run in server A, stopping and running it again might deploy it to server. For both of them, you’d obviously get an IP address but then again, you cannot guarantee it won’t change. At this rate, it is clear maintaining a hardcoded list of all service targets wouldn’t make any sense.\n\nEven if we assume Kubernetes is not used and the application is being deployed pre Docker style - a single host, multiple instances. It is still hard to keep an updated list of all running instances. Just try to think of having to keep track of all ports you have assigned to an instance and the pain of having to update them manually.\n\nTo solve the communication problem within microservices, a pattern called service discovery emerged. With service discovery, each service when started would inform a central registry of its reachable IP address (`8.8.8.8`) and port (`53`). Also whenever it is being shut down, maybe as a result of `CTRL+C`, it deregisters itself from the registry. Popular implementations of service discovery include [Consul](https://consul.io) and [etcd](https://coreos.com/etcd/).\n\nWe will also build another service - the API gateway - which will listen to connections from our unique ID generator services. This API gateway will be the public facing program as it will proxy request to an available instance of services registered with Pusher Channels.\n\n\n## Prerequisites\n- Node\n- Golang `\u003e= 1.10`. \n- Docker. We will be using this to run multiple copies of the services.\n- A Pusher Channels application. [Create one here.](https://pusher.com/channels)\n\n\n## Pusher Channels registry\n\nStandards rule literally everything and we need to define the data structure our registry requires. Below is an example of what needs to be sent to the channel in order to successfully process its inclusion as a service backend.\n\n```\n    {\n      \"prefix\": \"/v1\", // App prefix to use for routing to this service\n      \"port\": 3000, // The port this service is running on\n      \"address\": \"172.17.0.4\", // The IP address where this service is reachable at.\n    }\n```\n\n## Directory structure\n\nHere is the directory structure you will need to create to follow this tutorial:\n\n── `$GOPATH/src/github.com/pusher-tutorial/pusher-channel-discovery`\n  ├── golang\n  ├── nodejs\n  ├── nodejs-api-gateway\n\n\n\n## Building the NodeJS service\n\nThis backend will make use of the Channels server SDK for Node. We will use it to send a `register` event to the central registry, in our case a channel.\n\nTo get started, create a folder called `nodejs`. This should match the directory structure above.  In that project directory, you need to create another file called `package.json`. The `package.json` file should have the following contents:\n\n``` json\n    // pusher-channel-discovery/nodejs/package.json\n    {\n      \"name\": \"nodejs-channel-discovery\",\n      \"version\": \"1.0.0\",\n      \"description\": \"Using pusher channel as a service registry\",\n      \"main\": \"index.js\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.18.3\",\n        \"express\": \"^4.16.4\",\n        \"internal-ip\": \"^3.0.1\",\n        \"pusher\": \"^2.1.3\",\n        \"uuid\": \"^3.3.2\"\n      },\n      \"devDependencies\": {\n        \"nodemon\": \"^1.18.6\"\n      }\n    }\n```\n\nSwitch to your terminal app and navigate to the directory you created above - `cd path/to/nodejs-channel-discovery`. You then need to run the following command to install the dependencies needed to build this service.\n\n```\n    $ npm install\n```\n\nNext, create an `index.js` file in the root of the folder you created earlier and paste the contents below into it.\n\n``` javascript\n    // pusher-channel-discovery/nodejs/index.js\n    \n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const os = require('os');\n    const uuidv5 = require('uuid/v5');\n    const uuidv4 = require('uuid/v4');\n    const Pusher = require('pusher');\n    const internalIp = require('internal-ip');\n    \n    const app = express();\n    const hostName = os.hostname();\n    const port = process.env.PORT || 3000;\n    \n    let pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      encrypted: process.env.PUSHER_APP_SECURE,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n    });\n    \n    let svc = {};\n    \n    internalIp\n      .v4()\n      .then(ip =\u003e {\n        svc = {\n          prefix: '/v1',\n          port: port,\n          address: ip,\n        };\n    \n        console.log('Registering service');\n    \n        pusher.trigger('mapped-discovery', 'register', svc);\n      })\n      .catch(err =\u003e {\n        console.log(err);\n        process.exit();\n      });\n    \n    process.stdin.resume();\n    \n    process.on('SIGINT', () =\u003e {\n    \n      console.log('Deregistering service... ');\n    \n      // Send an exit signal on shutdown\n      pusher.trigger('mapped-discovery', 'exit', svc);\n    \n      // Timeout to make sure the signal sent to\n      // Pusher was successful before shutting down\n      setTimeout(() =\u003e {\n        process.exit();\n      }, 1000);\n    });\n    \n    app.use(bodyParser.json());\n    \n    app.use(function(req, res, next) {\n      // Uniquely identify the server that processed the request\n      res.header('X-Server', hostName);\n      next();\n    });\n    \n    app.get('/', function(req, res) {\n      res.status(200).send({ service: 'ID generator' });  \n    });\n    \n    app.get('/health', function(req, res) {\n      res.status(200).send({ status: 'ok' });\n    });\n    \n    app.post('/generate', function(req, res) {\n    \n      const identifier = req.body.id;\n      if (identifier === undefined) {\n        res.status(400).send({\n          message: 'Please provide an ID to use to generate your UUID V5',\n        });\n        return;\n      }\n    \n      if (identifier.length === 0) {\n        res.status(400).send({\n          message: 'Please provide an ID to use to generate your UUID V5',\n        });\n        return;\n      }\n    \n      res.status(200).send({\n        id: uuidv5(identifier, uuidv5.URL),\n        timestamp: new Date().getTime(),\n        message: 'UUID was successfully generated',\n      });\n    });\n    \n    app.listen(port, function() {\n      console.log(`Service is running at ${port} at ${hostName}`);\n    });\n```\n\nIn the above code, three endpoints were created:\n\n- `/` - This is the root handler of the application. This endpoint returns basic information of the service.\n- `/health` - This endpoint allows the application to notify others about its internal state.\n- `/generate` - This endpoint is meant for the generation of a UUID. It generates a version 5 UUID. This endpoint expects an `ID` from the caller which it then uses to compute the UUID.\n\nSince we will be needing to run multiple copies of this service, let's set it up to run as a container. To do that, we create a `Dockerfile`. Create the file and paste the content below into the file.\n\n```\n    # pusher-channel-discovery/nodejs/Dockerfile\n    FROM node:10\n    COPY . ./\n    RUN npm install\n    CMD [\"node\", \".\"]\n```\n\nYou need to save the file and build the image for this service. To do that, you should run the following command. Please note that this has to be done in the root of the `nodejs` directory.\n\n```\n    $ docker build -t pusher-channel-node .\n```\n\nYou can then run the service. But to do that, you need to use the credentials from the Pusher Channels application you created at the start of the tutorial.\n\n```\n    $ docker run -p 127.0.0.1:3000:3000 -e PUSHER_APP_ID=\"XXXX\" -e PUSHER_APP_KEY=\"XXXXXXX\" -e PUSHER_APP_SECRET=\"XXXXXX\" -e PUSHER_APP_CLUSTER=\"eu\" -e PUSHER_APP_SECURE=\"1\" pusher-channel-node\n```\n\nThe above specifies that we want the service to be available on our machine at localhost:3000. You can test the service works as expected by trying to access `http://localhost:3000/generate` with a POST request that has the following as it's body {\"id\": \"some random string\"}. An example with curl is shown below:\n\n```\n    $ curl -d '{\"id\" : \"3jhbj333\"}' -H \"Content-Type: application/json\" -X POST http://localhost:3000/generate\n```\n\n## Building the Golang service\n\nWe have decided to build another iteration of our Unique ID generator since the first version written in Node used UUID version 5 and we would prefer to use something much more random. UUID 5 is basically a way of hashing some value into 128 bits. So if you try generating multiple UUIDs with the same `id` value in your request, you keep on getting the same UUID. While that behavior is easy to change, let's assume we have tons of users and production code relying on that service already, we don’t want to change behavior but wouldn’t mind doing it right again. Hence the version two rewrite that uses UUID 4, which ensures complete randomness.\n\nTo start with, you need to create a directory that houses this service. You can go ahead to create one called `golang`. This directory needs to be created in a directory in accordance to the structure laid out at the beginning of the article .\n\nYou will also need to run `go mod init` in the newly created directory. This will make the project a [Golang module](https://github.com/golang/go/wiki/Modules#modules).\n\nThe first set of actions we need to perform is connecting to Pusher Channels API, so we need a Go SDK. That can be done by the following command:\n\n```\n    $ go get github.com/pusher/pusher-http-go\n```\n\nWe need to create a file called `registry.go`. Since we also have to properly structure the code into packages, it should be in a directory called `registry`. After which you should paste the following code into the `registry.go` file.\n\n\n``` go\n    // pusher-channel-discovery/golang/registry/registry.go\n    \n    package registry\n    \n    import (\n            \"errors\"\n            \"net\"\n    \n            pusher \"github.com/pusher/pusher-http-go\"\n    )\n    \n    type Event string\n    \n    const (\n            Register Event = \"register\"\n            Exit           = \"exit\"\n    )\n    \n    func (e Event) String() string {\n            switch e {\n            case Register:\n                    return string(Register)\n            case Exit:\n                    return string(Exit)\n            default:\n                    return \"\"\n            }\n    }\n    \n    const (\n            Channel = \"mapped-discovery\"\n    )\n    \n    type Registrar struct {\n            pusher *pusher.Client\n    }\n    \n    type Service struct {\n            // The path that is links to this service\n            Prefix string `json:\"prefix\"`\n    \n            // Public IP of the host running this service\n            Address net.IP `json:\"address\"`\n    \n            Port uint `json:\"port\"`\n    }\n    \n    func (s Service) Validate() error {\n            if s.Address == nil {\n                    return errors.New(\"addr is nil\")\n            }\n    \n            if s.Port \u003c= 0 {\n                    return errors.New(\"invalid HTTP port\")\n            }\n    \n            return nil\n    }\n    \n    func New(client *pusher.Client) *Registrar {\n            return \u0026Registrar{client}\n    }\n    \n    func (r *Registrar) do(svc Service, event Event) error {\n            if err := svc.Validate(); err != nil {\n                    return err\n            }\n    \n            _, err := r.pusher.Trigger(Channel, event.String(), svc)\n            return err\n    \n    }\n    \n    func (r *Registrar) Register(svc Service) error {\n            return r.do(svc, Register)\n    }\n    \n    func (r *Registrar) DeRegister(svc Service) error {\n            return r.do(svc, Exit)\n    }\n    \n    func (r *Registrar) IP() (net.IP, error) {\n            addrs, err := net.InterfaceAddrs()\n            if err != nil {\n                    return nil, err\n            }\n    \n            for _, addr := range addrs {\n                    if ipnet, ok := addr.(*net.IPNet); ok \u0026\u0026 ipnet.IP.IsGlobalUnicast() {\n                            if ipnet.IP.To4() != nil || ipnet.IP.To16() != nil {\n                                    return ipnet.IP, nil\n                            }\n                    }\n            }\n    \n            return nil, nil\n    }\n```\n\nThat seems to be a lot, so here is a breakdown of what we have done above:\n\n- Defined multiple data types to conform to the channel registry structure defined above.\n- Implemented a `Registrar` type that triggers event to a channel. You can find those in the `Register` and `DeRegister` methods.\n\nOur main goal is to generate unique IDs, we need to build an `HTTP` API that will allow for that. \n\nWe would be needing an `HTTP` router to help build our endpoints. For this, we would need a library called `chi`. To install it, run `go get github.com/go-chi/chi`. Since we would also be needing to generate unique IDs, it is safe to also install a UUID library. You will need to run `go get github.com/google/uuid`.\n\nCreate a folder called `transport/web`, and create an `http.go` file inside the newly created folder. Paste the code below in the `http.go` file:\n\n``` go\n    // pusher-channel-discovery/golang/transport/web/http.go\n    package web\n    \n    import (\n            \"encoding/json\"\n            \"fmt\"\n            \"net/http\"\n    \n            \"github.com/go-chi/chi\"\n            \"github.com/google/uuid\"\n    )\n    \n    type Server struct {\n            HostName string\n            Port     uint\n    }\n    \n    func Start(srv *Server) error {\n    \n            mux := chi.NewMux()\n    \n            mux.Use(func(next http.Handler) http.Handler {\n                    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n                            w.Header().Set(\"Content-Type\", \"application/json\")\n                            w.Header().Set(\"X-Server\", srv.HostName)\n    \n                            next.ServeHTTP(w, r)\n                    })\n            })\n    \n            mux.Get(\"/health\", func(w http.ResponseWriter, r *http.Request) {\n                    defer r.Body.Close()\n    \n                    w.WriteHeader(http.StatusOK)\n                    w.Write([]byte(`{ 'status' : 'OK' }`))\n            })\n    \n            mux.Post(\"/generate\", func(w http.ResponseWriter, r *http.Request) {\n    \n                    defer r.Body.Close()\n    \n                    var response struct {\n                            Status int64     `json:\"status\"`\n                            ID     uuid.UUID `json:\"id\"`\n                    }\n    \n                    response.Status = 1\n                    response.ID = uuid.New()\n    \n                    w.WriteHeader(http.StatusOK)\n                    json.NewEncoder(w).Encode(\u0026response)\n            })\n    \n            return http.ListenAndServe(fmt.Sprintf(\":%d\", srv.Port), mux)\n    }\n```\n\nIn the code above, we have created two endpoints:\n\n\n- `/health` - This endpoint allows the application to notify others about its internal state.\n- `/generate` - This endpoint is responsible for creating the UUID. Unlike the first iteration written in NodeJS, it doesn't require any ID of any sort as it generates purely random UUIDs.\n\nTo tie up the registry and the `HTTP` API, we need to make our application able to run as a command line app. To do that, create a file called `main.go` in the `cmd` folder of the root application. You need to paste the following code in the `main.go` file:\n\n``` go\n    // pusher-channel-discovery/golang/cmd/main.go\n    package main\n    \n    import (\n            \"errors\"\n            \"flag\"\n            \"fmt\"\n            \"log\"\n            \"os\"\n            \"os/signal\"\n            \"syscall\"\n    \n            \"github.com/adelowo/pusher-channel-discovery-go/registry\"\n            \"github.com/adelowo/pusher-channel-discovery-go/transport/web\"\n            pusher \"github.com/pusher/pusher-http-go\"\n    )\n    \n    func main() {\n    \n            shutDownChan := make(chan os.Signal)\n            signal.Notify(shutDownChan, syscall.SIGINT, syscall.SIGTERM, syscall.SIGQUIT)\n    \n            port := flag.Uint(\"http.port\", 3000, \"Port to run HTTP server at\")\n    \n            flag.Parse()\n    \n            appID := os.Getenv(\"PUSHER_APP_ID\")\n            appKey := os.Getenv(\"PUSHER_APP_KEY\")\n            appSecret := os.Getenv(\"PUSHER_APP_SECRET\")\n            appCluster := os.Getenv(\"PUSHER_APP_CLUSTER\")\n            appIsSecure := os.Getenv(\"PUSHER_APP_SECURE\")\n    \n            var isSecure bool\n            if appIsSecure == \"1\" {\n                    isSecure = true\n            }\n    \n            client := \u0026pusher.Client{\n                    AppId:   appID,\n                    Key:     appKey,\n                    Secret:  appSecret,\n                    Cluster: appCluster,\n                    Secure:  isSecure,\n            }\n    \n            reg := registry.New(client)\n    \n            ip, err := reg.IP()\n            if err != nil {\n                    log.Fatalf(\"could not fetch public IP address... %v\", err)\n            }\n    \n            hostName, err := os.Hostname()\n            if err != nil {\n                    log.Fatalf(\"could not fetch host name... %v\", err)\n            }\n    \n            svc := registry.Service{\n                    Prefix:  \"/v2\",\n                    Address: ip,\n                    Port:    *port,\n            }\n    \n            if err := reg.Register(svc); err != nil {\n                    log.Fatalf(\"Could not register service... %v\", err)\n            }\n    \n            var errs = make(chan error, 3)\n            \n            go func() {\n                    srv := \u0026web.Server{\n                            HostName: hostName,\n                            Port:     *port,\n                    }\n    \n                    errs \u003c- web.Start(srv)\n            }()\n    \n            go func() {\n                    \u003c-shutDownChan\n                    errs \u003c- errors.New(\"Application is shutting down\")\n            }()\n            \n            fmt.Println(\u003c-errs)\n            reg.DeRegister(svc)\n    }\n```\n\nSince we need to run multiple copies of this service too, it would make total sense to run it in a container. To build a container image for this service, create a `Dockerfile` in the root of the project and paste the following code in it:\n\n```\n    ## pusher-channel-discovery/golang/Dockerfile\n    FROM golang:1.11 as build-env\n    \n    WORKDIR /go/src/github.com/pusher-tutorial/pusher-channel-discovery-go\n    ADD . /go/src/github.com/pusher-tutorial/pusher-channel-discovery-go\n    \n    ENV GO111MODULE=on\n    \n    RUN go mod download\n    RUN go mod verify\n    RUN go install ./cmd\n    \n    ## A better scratch image\n    ## See https://github.com/GoogleContainerTools/distroless\n    FROM gcr.io/distroless/base\n    COPY --from=build-env /go/bin/cmd /\n    CMD [\"/cmd\"]\n```\n\nWe need to build this image, so you need to run the following command in your terminal:\n\n```\n    $ export GO111MODULE=on\n    $ go mod tidy\n    $ docker build -t pusher-channel-go .\n```\n\nThis will build the image and make it available to be run later on when we choose. Let's run it now:\n\n```\n    $ docker run -p 127.0.0.1:2000:3000 -e PUSHER_APP_ID=\"XXXX\" -e PUSHER_APP_KEY=\"XXXXX\" -e PUSHER_APP_SECRET=\"XXXX\" -e PUSHER_APP_CLUSTER=\"eu\" -e PUSHER_APP_SECURE=\"1\" pusher-channel-go\n```\n\nYou can verify the service is up and running by making a `POST` request to `http://localhost:2000/generate`. An example with `curl` is given below:\n\n```\n    $ curl -X POST localhost:2000/generate\n```\n\n## API gateway\n\nAn API gateway is an application that provides a single entry point for a selected group of microservices. This plays hand in hand with service registration as it needs to be able to pull up information about those microservices so as to proxy requests to them. This part is called service discovery. You can read more about this pattern [here](https://microservices.io/patterns/apigateway.html).\n\nWe will implement this in NodeJS as we assume it already existed when we had only the first ID generator service. What we are building here is basically a reverse proxy. We subscribe to events published by the services we have built above and include the service in the routing table. Whenever we receive a request, we interpret the URL to determine what service is being requested. We use the `prefix` property defined above - in Pusher Channels registry - to achieve this.\n\nStill in accordance with the directory structure laid out at the beginning of this tutorial, we need to create a new folder called `nodejs-api-gateway`. Inside that folder, we need a `package.json` file to define our dependencies. The following contents should be pasted inside the `package.json` file:\n\n``` json\n    // pusher-channels-discovery/nodejs-api-gateway/package.json\n    {\n      \"name\": \"pusher-channels-api-gateway\",\n      \"version\": \"1.0.0\",\n      \"description\": \"\",\n      \"main\": \"index.js\",\n      \"dependencies\": {\n        \"pusher-js\": \"^4.3.1\",\n        \"redbird\": \"^0.8.0\"\n      }\n    }\n```\n\nTo install the dependencies declared above, you need to run:\n\n```\n    $ npm install\n```\n\nWe then proceed to implement the proxy. We will use a node package called Redbird which is an awesome reverse proxy. You need to create an `index.js` file and it should have the following code as its contents:\n\n``` javascript\n    // pusher-channels-discovery/nodejs-api-gateway/index.js\n    \n    const port = process.env.PORT || 1500;\n    const domain = process.env.DOMAIN || `localhost:${port}`;\n    \n    const proxy = require('redbird')({ port: port });\n    const Pusher = require('pusher-js');\n    \n    const pusherSocket = new Pusher(process.env.PUSHER_APP_KEY, {\n      forceTLS: process.env.PUSHER_APP_SECURE === '1' ? true : false,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n    });\n    \n    const channel = pusherSocket.subscribe('mapped-discovery');\n    \n    channel.bind('register', data =\u003e {\n      proxy.register(\n        `${domain}${data.prefix}`,\n        `http://${data.address}:${data.port}`\n      );\n    });\n    \n    channel.bind('exit', data =\u003e {\n      proxy.unregister(\n        `${domain}${data.prefix}`,\n        `http://${data.address}:${data.port}`\n      );\n    });\n```\n\nHere is a breakdown of what we have implemented above:\n\n\n- We define a domain constant. This defaults to `localhost: PORT` if the `DOMAIN` environmental value is not available.\n- We create a connection to Pusher channels and subscribe to the `mapped-discovery` channel.\n- We then bind a callback the `register` event. The callback picks out some critical data from the data it has received and uses that to update its routing table.\n- We also do the above for the `exit` channel. But in the instance, we remove the service from the routing table.\n\n\n\u003e The reverse proxy supports load-balancing to multiple instances of our services as we will see shortly\n\nAs with other services we have built, this will also have Docker support. Create a `Dockerfile` and paste the following contents inside it:\n\n```\n    // pusher-channels-discovery/nodejs-api-gateway/Dockerfile\n    FROM node:10\n    COPY . ./\n    RUN npm install\n    CMD [\"node\", \".\"]\n```\n\nYou also need to build the container image by running the following command in a terminal:\n\n```\n    $ docker build -t pusher-channel-api-gateway .\n```\n\n## Putting it all together\n\nYou need to run the API gateway first before starting up every other service. State is not persisted and it will only listen to connections from microservices that are started after its last run.  To start the API gateway container, run:\n\n```\n    $ docker run -p 127.0.0.1:1500:1500 -e PUSHER_APP_KEY=\"XXXXX\" -e PUSHER_APP_SECURE=\"1\" -e PUSHER_APP_CLUSTER=\"eu\" pusher-channel-api-gateway\n```\n\nYou then need to run the container for the service written in NodeJS by running the following command in your terminal:\n\n```\n    $ docker run -e PUSHER_APP_ID=\"XXXX\" -e PUSHER_APP_KEY=\"XXXXXXX\" -e PUSHER_APP_SECRET=\"XXXXXX\" -e PUSHER_APP_CLUSTER=\"eu\" -e PUSHER_APP_SECURE=\"1\" pusher-channel-node\n```\n\nKeep an eye on the terminal window where you are running the API gateway, once the NodeJS service comes up, there should be information in the terminal. It should be in the following form:\n\n```\n    {\"name\":\"redbird\",\"hostname\":\"88c1cea2c10c\",\"pid\":1,\"level\":30,\"from\":{\"protocol\":\"http:\",\"slashes\":true,\"auth\":null,\"host\":\"localhost:1500\",\"port\":\"1500\",\"hostname\":\"localhost\",\"hash\":null,\"search\":null,\"query\":null,\"pathname\":\"/v1\",\"path\":\"/v1\",\"href\":\"http://localhost:1500/v1\"},\"to\":{\"protocol\":\"http:\",\"slashes\":true,\"auth\":null,\"host\":\"172.17.0.3:3000\",\"port\":\"3000\",\"hostname\":\"172.17.0.3\",\"hash\":null,\"search\":null,\"query\":null,\"pathname\":\"/\",\"path\":\"/\",\"href\":\"http://172.17.0.3:3000/\",\"useTargetHostHeader\":false},\"msg\":\"Registered a new route\",\"time\":\"2018-11-11T20:08:02.632Z\",\"v\":0}\n```\n\n\u003e Shutting down the NodeJS service should produce something similar but with an **Unregistered a route** message.\n\nYou can access the Node service by sending a request to the API gateway, `http://localhost:1500/v1/generate` as previously shown. Why the `v1`? If you look at the part of the code that sends information to Pusher Channels, you will notice it has `/v1` in its prefix property. If you take a look at the Golang implementation, you will find its prefix property with `/v2`, not `/v1`. What this means is all requests sent to the API gateway that starts from `v1` would be proxied to the NodeJS service while those with `v2` would be proxied to the Golang service.\nTo run the Golang service, we need to run the following command:\n\n```\n    $ docker run -p 2000:3000 -e PUSHER_APP_ID=\"XXXX\" -e PUSHER_APP_KEY=\"XXXXX\" -e PUSHER_APP_SECRET=\"XXXX\" -e PUSHER_APP_CLUSTER=\"eu\" -e PUSHER_APP_SECURE=\"1\" pusher-channel-go\n```\n\nAll that is left for us to do now is to test that our requests are being proxied to the right services. I will be showing examples with `curl`.\n\n```\n    $ # for v1 \n    $ curl -i -d '{\"id\" : \"3jhbj333\"}' -H \"Content-Type: application/json\" -X POST http://localhost:1500/v1/generate\n    $ # for v2\n    $ curl -i -X POST localhost:1500/v2/generate\n```\n\nI have included the `-i` option as it will be useful for us to inspect the `X-Server` headers to also validate the request is being served by the right service. It will also be useful when we need to validate that requests are being proxied among multiple instances of a service. You need to run multiple instances of the NodeJS service, just open two or three terminal windows where you run the above docker command in each of them.\n\nOnce done, you should make requests to the API gateway and watch the value of `X-Server` change as requests are proxied in a round robin manner to all available instances.\n\n```\n    $ curl -i -d '{\"id\" : \"3jhbj333\"}' -H \"Content-Type: application/json\" -X POST http://localhost:1500/v1/generate\n```\n\nYou can also try shutting down one or more instances of the available services and see what happens. Spoiler, requests are no longer proxied to them.\n\n\n## Conclusion\n\nIn this tutorial, we have leveraged Pusher Channels to implement service discovery and registration when dealing with microservices.\n\nYou can find the source code to this tutorial on [GitHub](https://github.com/adelowo/pusher-channel-discovery).","metaTitle":"Service discovery in a microservice architecture","metaDescription":"Learn how to use Pusher Channels to support service discovery when creating a microservices architecture. This tutorial works through a practical example using two Docker services, one using Node and one in Golang. "}}],"defaultValue":"Channels \u0026 Node.js","queryType":"tag","pages":15,"route":"/tutorials","query":{"product":"Channels","tag":"Node.js","page":"3"}}},"page":"/tutorials","query":{"product":"Channels","tag":"Node.js","page":"3"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=Node.js&page=3 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:30:48 GMT -->
</html>