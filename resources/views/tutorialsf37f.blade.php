<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=Beams&page=1 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:43:49 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">22</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels &amp; Beams</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorials4646.html?tag=Beams" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsf471.html?product=Beams&amp;tag=Beams" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Channels &amp; Beams"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/food-ordering-app-react-native-part-2.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a food ordering app in React Native - Part 2: Adding the driver app and chat functionality</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Food ordering apps such as Uber Eats and FoodPanda are a popular way to order from your favorite local restaurant. In th...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/food-ordering-app-react-native-part-3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a food ordering app in React Native - Part 3: Adding push notifications</h3><p class="css-k12xad e5jrto45">Food ordering apps such as Uber Eats and FoodPanda are a popular way to order from your favorite local restaurant. In th...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/food-ordering-app-react-native-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a food ordering app in React Native - Part 1: Making an order</h3><p class="css-k12xad e5jrto45">Food ordering apps such as UberEats and FoodPanda are a popular way to order from your favorite local restaurant. In thi...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/login-approval-laravel-ios-part-3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a login approval system - Part 3: Building the approval app</h3><p class="css-k12xad e5jrto45">This three part series will walk you through building a simple login approval system. Create a dashboard behind a login ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/login-approval-laravel-ios-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a login approval system - Part 2: Building the backend</h3><p class="css-k12xad e5jrto45">This three part series will walk you through building a simple login approval system. Create a dashboard behind a login ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/login-approval-laravel-ios-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a login approval system with Laravel and iOS - Part 1: Building the base application</h3><p class="css-k12xad e5jrto45">This three part series will walk you through building a simple login approval system. Create a dashboard behind a login ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/laravel-logger-part-6.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Creating a Laravel Logger - Part 6: Creating our web application</h3><p class="css-k12xad e5jrto45">In this six-part series, build a Laravel error logging service. You will create a custom Laravel package to include in L...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/laravel-logger-part-5.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Creating a Laravel Logger - Part 5: Creating our iOS application</h3><p class="css-k12xad e5jrto45">In this six-part series, build a Laravel error logging service. You will create a custom Laravel package to include in L...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/laravel-logger-part-4.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Creating a Laravel Logger - Part 4: Creating our Android application</h3><p class="css-k12xad e5jrto45">In this six-part series, build a Laravel error logging service. You will create a custom Laravel package to include in L...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="69ho49">.css-69ho49{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#eeeeff;color:#8f87e6;cursor:not-allowed;}.css-69ho49:hover{background:#5c29db;color:white;}.css-69ho49:active{background:#5c29db;}@media all and (min-width:760px){.css-69ho49{font-size:1rem;}}.css-69ho49:hover,.css-69ho49:active{cursor:not-allowed;background:#ebeaef;color:#fffc;}</style><a href="#" disabled="" class="css-69ho49 edg0byb1">Prev</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsf37f.html?product=Channels&amp;tag=Beams&amp;page=1" class="css-2wakph edg0byb1">1</a><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialscd46.html?product=Channels&amp;tag=Beams&amp;page=2" class="css-5s6711 edg0byb1">2</a><a href="tutorials9619.html?product=Channels&amp;tag=Beams&amp;page=3" class="css-5s6711 edg0byb1">3</a><a href="tutorialscd46.html?product=Channels&amp;tag=Beams&amp;page=2" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":22,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"23VeJDgcKuDMVJ4XmZDBxx","type":"Entry","createdAt":"2019-12-10T14:18:07.649Z","updatedAt":"2020-07-24T15:31:04.644Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a food ordering app in React Native - Part 2: Adding the driver app and chat functionality","url":"food-ordering-app-react-native-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/React-Native-Food-Delivery","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"18J5ku8AMG7DNqxzvTy4tW","type":"Entry","createdAt":"2019-06-04T15:37:38.967Z","updatedAt":"2019-06-04T15:37:38.967Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Webhooks","url":"webhooks","type":"use case","featured":false}}],"reviewDate":"2019-10-23","description":"Food ordering apps such as Uber Eats and FoodPanda are a popular way to order from your favorite local restaurant. In this tutorial series, create both the food ordering app and the driving app using React Native. In part 2, create the driver app and implement a chat functionality between the customer and the driver.","prerequisite":"You will need Node 11.10+, Yarn 1.17+, React Native CLI 2+ and React Native 0.61+ installed on your machine.","content":"This is part two of a three-part series on creating a food delivery app with React Native.\n\nIn this part, we’ll be going through the code for the driver app. After that, we’ll be adding the chat functionality so that the customer and the driver can contact each other.\n\n\n## Prerequisites\n\nThis part has the same prerequisites as the [first part](http://pusher.com/tutorials/food-ordering-app-react-native-part-1).\n\nYou’ll need a [Chatkit account](https://pusher.com/chatkit) for implementing the chat functionality.\n\n\n## Feature overview\n\nWe will be creating the driver app in this part of the series. Here’s what the driver will see by default when they open the app. Basically, it’s just showing a map of where the driver currently is. In the header, there’s a button that the driver can click to update the status of the order. By default, there will be no button in there. But once the driver has accepted an order, it will say **PICKED ORDER**. The driver can click on this button to send an update to the customer that they have picked their order from the restaurant. It will then turn to **DELIVERED ORDER** and the driver can click on it once they have delivered the order to the customer:\n\n\n![food-ordering-app-react-native-driver-img1](//images.ctfassets.net/1es3ne0caaid/5mEMuRafvYYoXdn7FMTTWG/33896533b56aa0d777d0da3609731c8e/food-ordering-app-react-native-driver-img1.png)\n\nWhen a driver receives an order, a modal which displays the pick up (restaurant’s location) and drop off (customer’s location) will show up. From here, the driver can either accept or decline:\n\n![food-ordering-app-react-native-driver-img2](//images.ctfassets.net/1es3ne0caaid/683L44idNiZNcQZdhmYye4/7655110f507fce853db7eb29f6b52ffe/food-ordering-app-react-native-driver-img2.png)\n\nOnce the driver agrees, the restaurant’s and customer’s location is plotted on the map along with the route between the two. The map is updated in realtime as the driver drives to their destination:\n\n![food-ordering-app-react-native-driver-img3](//images.ctfassets.net/1es3ne0caaid/j0AZcb6jB3kAnajEtdjgE/642645eb246a44b8f3285656bcb677fa/food-ordering-app-react-native-driver-img3.png)\n\nOnce the driver has picked the order, a new button will be overlayed on top of the map. This will allow the driver to contact the customer. This will be useful in cases wherein the address is in a subdivision or a building:\n\n\n![food-ordering-app-react-native-driver-img4](//images.ctfassets.net/1es3ne0caaid/30Y7fZ2oVgdKzTYctrNs5s/ed9a3f324854c320b41b2e64b9bf003e/food-ordering-app-react-native-driver-img4.png)\n\nHere’s what the chat interface looks like:\n\n\n![food-ordering-app-react-native-driver-img5](//images.ctfassets.net/1es3ne0caaid/3hfMZMl1gMYGsG8nfvVVAz/3de9a1d645ae1e38ca33e585c699c07e/food-ordering-app-react-native-driver-img5.png)\n\nYou can find the code on this [GitHub repo](https://github.com/anchetaWern/React-Native-Food-Delivery). The completed code for this part of the series is on the `driver-app` branch.\n\n\n## Setting up Chatkit\n\nOn your Chatkit dashboard, click on the + **CREATE** button to create a new Chatkit app instance:\n\n\n![food-ordering-app-react-native-driver-img6](//images.ctfassets.net/1es3ne0caaid/3Uk7DzUbh3hDnoZ1YYz6an/a211020ebd1518c7648336abc41c06df/food-ordering-app-react-native-driver-img6.png)\n\nUnder the **Credentials** tab, enable the test token provider. This allows us to use Pusher’s servers for authenticating users of our app. Note that this is only for testing purposes. If you’re going to use this for production, be sure to check out the [Authentication docs](https://pusher.com/docs/chatkit/authentication) so you can create your own authentication server.\n\n\n## Bootstrapping the driver app\n\nIf you’ve followed [part one](http://pusher.com/tutorials/food-ordering-app-react-native-part-1) of this series, there’s really no starter code for the driver app so you’ll have to create everything from scratch. Start by generating a new React Native project:\n\n```\n    react-native init RNFoodDeliveryDriver\n```\n\nOnce that’s done, open the `package.json` file and replace the `dependencies` with the following:\n\n```json\n    \"dependencies\": {\n      \"@pusher/chatkit-client\": \"^1.13.1\",\n      \"@react-native-community/netinfo\": \"^4.4.0\",\n      \"axios\": \"^0.19.0\",\n      \"pusher-js\": \"^5.0.2\",\n      \"react\": \"16.9.0\",\n      \"react-native\": \"0.61.2\",\n      \"react-native-config\": \"^0.11.7\",\n      \"react-native-geocoding\": \"^0.4.0\",\n      \"react-native-geolocation-service\": \"^3.1.0\",\n      \"react-native-gesture-handler\": \"^1.4.1\",\n      \"react-native-gifted-chat\": \"^0.11.0\",\n      \"react-native-maps\": \"0.25.0\",\n      \"react-native-maps-directions\": \"^1.7.3\",\n      \"react-native-modal\": \"^11.4.0\",\n      \"react-native-permissions\": \"^2.0.2\",\n      \"react-native-reanimated\": \"^1.3.0\",\n      \"react-native-screens\": \"^1.0.0-alpha.23\",\n      \"react-navigation\": \"^4.0.10\",\n      \"react-navigation-stack\": \"^1.9.4\"\n    },\n```\n\nInstall the dependencies:\n\n```\n    yarn install\n```\n\nThe driver app depends on the same packages as the ordering app so you can go ahead and re-visit the **Bootstrapping the app** section of part one for the instructions on how to configure the packages.\n\nNext, copy over the `src/helpers/location.js` file [from the ordering app](https://github.com/anchetaWern/React-Native-Food-Delivery/tree/food-ordering/src/helpers) to the root directory of the driver app as we’re going to use the same helper function.\n\nLastly, create a `.env` file at the root of the project directory and add your Channels, Chatkit, and Google API credentials. We’ll add the ngrok URL later:\n\n```\n    CHANNELS_APP_KEY=\"YOUR CHANNELS APP KEY\"\n    CHANNELS_APP_CLUSTER=\"YOUR CHANNELS APP CLUSTER\"\n    \n    CHATKIT_INSTANCE_LOCATOR_ID=\"YOUR CHATKIT INSTANCE LOCATOR ID\"\n    CHATKIT_SECRET_KEY=\"YOUR CHATKIT SECRET KEY\"\n    CHATKIT_TOKEN_PROVIDER_ENDPOINT=\"YOUR CHATKIT TOKEN PROVIDER ENDPOINT\"\n    \n    GOOGLE_API_KEY=\"YOUR GOOGLE API KEY\"\n    \n    NGROK_HTTPS_URL=\"YOUR NGROK HTTPS URL\"\n```\n\n## Setting up the ordering app\n\nIf you’ve followed part one of this series, the only thing you need to do is include the additional packages that we need:\n\n```javascript\n    \"dependencies\": {\n      // ...\n      \"@pusher/chatkit-client\": \"^1.13.1\",\n      \"react-native-gifted-chat\": \"^0.11.0\",\n      \"string-random\": \"^0.1.3\"\n    }\n```\n\nHere’s a brief overview of each:\n\n- **@pusher/chatkit-client** - the client-side library of Chatkit. We use this for easily implementing chat functionality.\n- **react-native-gifted-chat** - used for easily building chat UI.\n- **string-random** - used for generating random room IDs for chat rooms.\n\nInstall them once added:\n\n```\n    yarn install\n```\n\n## Setting up the server\n\nTo set up the server, all you need is install the Chatkit server SDK for Node.js:\n\n```\n    yarn add @pusher/chatkit-server\n```\n\n## Creating the driver app\n\nNow we’re ready to build the driver app. Start by updating the `App.js` file with the following:\n\n```javascript\n    import React, {Fragment} from 'react';\n    import {SafeAreaView, StatusBar, View, StyleSheet} from 'react-native';\n    \n    import Root from './Root';\n    \n    const App = () =\u003e {\n      return (\n        \u003cFragment\u003e\n          \u003cStatusBar barStyle=\"light-content\" /\u003e\n          \u003cSafeAreaView style={styles.container}\u003e\n            \u003cRoot /\u003e\n          \u003c/SafeAreaView\u003e\n        \u003c/Fragment\u003e\n      );\n    };\n    \n    const styles = StyleSheet.create({\n      container: {\n        flex: 1,\n      },\n    });\n    \n    export default App;\n```\n\nThen create a `Root.js` file at the root of the project directory. This is where we use React Navigation to build a stack navigator (navigates by pushing and popping screens from a stack):\n\n```javascript\n    import React, {Component} from 'react';\n    import {YellowBox} from 'react-native';\n    \n    import {createAppContainer} from 'react-navigation';\n    import {createStackNavigator} from 'react-navigation-stack';\n    \n    import OrderMap from './src/screens/OrderMap';\n    \n    YellowBox.ignoreWarnings(['Setting a timer']);\n    \n    const RootStack = createStackNavigator(\n      {\n        OrderMap,\n      },\n      {\n        initialRouteName: 'OrderMap',\n      },\n    );\n    \n    const AppContainer = createAppContainer(RootStack);\n    \n    class Router extends Component {\n      render() {\n        return \u003cAppContainer /\u003e;\n      }\n    }\n    \n    export default Router;\n```\n\nNext, create the `src/screens/OrderMap.js` file. This will serve as the main screen for the driver. As you’ve seen in the feature overview earlier, this is where the driver can wait for orders and either accept or decline them. Start by importing the packages we need:\n\n```javascript\n    import React, {Component} from 'react';\n    import {\n      View,\n      Text,\n      Button,\n      TouchableOpacity,\n      Alert,\n      StyleSheet,\n    } from 'react-native';\n    \n    import MapView from 'react-native-maps';\n    import Pusher from 'pusher-js/react-native';\n    \n    import {check, request, PERMISSIONS, RESULTS} from 'react-native-permissions';\n    \n    import Geolocation from 'react-native-geolocation-service';\n    import Modal from 'react-native-modal';\n    import Config from 'react-native-config';\n    \n    import MapViewDirections from 'react-native-maps-directions';\n    import axios from 'axios';\n    \n    import {regionFrom} from '../helpers/location';\n    \n    const CHANNELS_APP_KEY = Config.CHANNELS_APP_KEY;\n    const CHANNELS_APP_CLUSTER = Config.CHANNELS_APP_CLUSTER;\n    const BASE_URL = Config.NGROK_HTTPS_URL; \n    \n    const GOOGLE_API_KEY = Config.GOOGLE_API_KEY;\n```\n\nNext, add the navigation header. This is where we optionally render the main action button for the driver. The action it performs depends on which step of the order process they currently are. So we use a navigation param to store the `title` and the `onPress` action: \n\n```javascript\n    class OrderMap extends Component {\n      static navigationOptions = ({navigation}) =\u003e {\n        const showHeaderButton = navigation.getParam('showHeaderButton');\n        return {\n          title: 'Order Map',\n          headerRight: showHeaderButton ? (\n            \u003cView style={styles.navHeaderRight}\u003e\n              \u003cButton\n                onPress={navigation.getParam('headerButtonAction')}\n                title={navigation.getParam('headerButtonLabel')}\n                color=\"#e19400\"\n              /\u003e\n            \u003c/View\u003e\n          ) : null,\n        };\n      };\n    \n      // next: initialize state\n    }\n```\n\nNext, initialize the state:\n\n```javascript\n    state = {\n      locationPermission: 'undetermined',\n      isOrderDetailsModalVisible: false,\n      customer: null, // customer info\n      currentLocation: null, // driver's current location\n      hasOrder: false, // whether the driver is currently handling an order or not\n      restaurantAddress: '',\n      customerAddress: '',\n    };\n    // next: add constructor()\n```\n\nInside the constructor, initialize the communication channels. This uses pretty much the same channels as the ordering app so I’ll no longer elaborate on it:\n\n```javascript\n    constructor(props) {\n      super(props);\n      this.available_drivers_channel = null; // this is where customer will send a request to any available driver\n    \n      this.ride_channel = null; // the channel used for communicating the current location\n      // for a specific order. Channel name is the customer's username\n    \n      this.pusher = null; // the pusher client\n    }\n```\n\nInside `componentDidMount()`, we set the default navigation params for the main action button. By default, the action is to set the order as “picked”. Note that the button wouldn’t be visible until the driver accepts an order:\n\n```javascript\n    async componentDidMount() {\n      this.props.navigation.setParams({\n        headerButtonLabel: 'Picked Order',\n        headerButtonAction: this._pickedOrder,\n      });\n    \n      // next: subscribe to channels\n    }\n```\n\nNext, subscribe to the same channel as the one we subscribed to earlier in part one with the ordering app. This time, we’re implementing the receiving end of the order request. When the driver receives an order request, we update the state with the order details and show the order details modal:\n\n```javascript\n    this.pusher = new Pusher(CHANNELS_APP_KEY, {\n      authEndpoint: `${BASE_URL}/pusher/auth`,\n      cluster: CHANNELS_APP_CLUSTER,\n      encrypted: true,\n    });\n    \n    this.available_drivers_channel = this.pusher.subscribe(\n      'private-available-drivers',\n    ); // subscribe to \"available-drivers\" channel\n    \n    this.available_drivers_channel.bind('pusher:subscription_succeeded', () =\u003e {\n      this.available_drivers_channel.bind(\n        'client-driver-request',\n        order_data =\u003e {\n          if (!this.state.hasOrder) {\n            // if the driver has currently no order\n            this.setState({\n              isOrderDetailsModalVisible: true,\n              customer: order_data.customer,\n              restaurantLocation: {\n                latitude: order_data.restaurant_location[0],\n                longitude: order_data.restaurant_location[1],\n              },\n              customerLocation: order_data.customer_location,\n    \n              restaurantAddress: order_data.restaurant_address,\n              customerAddress: order_data.customer_address,\n            });\n          }\n        },\n      );\n    });\n    \n    // next: add code for getting driver's current location\n```\n\nNext, we request for the location permission and get the current location. We use it for setting the initial location to be displayed on the map. After that, we start watching for location changes and trigger the event for updating the location on the customer’s side when an order is already accepted by the driver:\n\n```javascript\n    let location_permission = await check(\n      PERMISSIONS.ANDROID.ACCESS_FINE_LOCATION,\n    );\n    \n    if (location_permission === 'denied') {\n      location_permission = await request(\n        PERMISSIONS.ANDROID.ACCESS_FINE_LOCATION,\n      );\n    }\n    \n    if (location_permission === 'granted') {\n      Geolocation.getCurrentPosition(\n        position =\u003e {\n          const {latitude, longitude, accuracy} = position.coords;\n          const initialRegion = regionFrom(latitude, longitude, accuracy);\n    \n          this.setState({\n            initialRegion,\n          });\n        },\n        error =\u003e {\n          console.log(error.code, error.message);\n        },\n        {enableHighAccuracy: true, timeout: 15000, maximumAge: 10000},\n      );\n    \n      this.watch_location_id = Geolocation.watchPosition(\n        position =\u003e {\n          this.setState({\n            currentLocation: position.coords,\n          });\n    \n          if (this.state.hasOrder) {\n            this.ride_channel.trigger('client-driver-location', {\n              latitude: position.coords.latitude,\n              longitude: position.coords.longitude,\n              accuracy: position.coords.accuracy,\n            });\n          }\n        },\n        error =\u003e {\n          console.log(error.code, error.message);\n        },\n        {enableHighAccuracy: true},\n      );\n    }\n```\n\nHere’s the `render()` method. This has pretty much the same code as the TrackOrder screen screen in the ordering app. The only difference is the order details modal. We also have the button for contacting the customer which is overlayed on top of the map:\n\n```javascript\n    render() {\n      const {\n        isOrderDetailsModalVisible,\n        restaurantAddress,\n        customerAddress,\n    \n        currentLocation, // driver's current location\n        restaurantLocation,\n        customerLocation,\n        initialRegion,\n      } = this.state;\n    \n      return (\n        \u003cView style={styles.wrapper}\u003e\n          \u003cMapView initialRegion={initialRegion} style={styles.map}\u003e\n            {currentLocation \u0026\u0026 (\n              \u003cMapView.Marker\n                coordinate={{\n                  latitude: currentLocation.latitude,\n                  longitude: currentLocation.longitude,\n                }}\n                title={\"You're here\"}\n              /\u003e\n            )}\n    \n            {currentLocation \u0026\u0026 restaurantLocation \u0026\u0026 (\n              \u003cMapViewDirections\n                origin={currentLocation}\n                destination={restaurantLocation}\n                apikey={GOOGLE_API_KEY}\n                strokeWidth={3}\n                strokeColor=\"hotpink\"\n              /\u003e\n            )}\n    \n            {restaurantLocation \u0026\u0026 customerLocation \u0026\u0026 (\n              \u003cMapViewDirections\n                origin={restaurantLocation}\n                destination={customerLocation}\n                apikey={GOOGLE_API_KEY}\n                strokeWidth={3}\n                strokeColor=\"#1b77fb\"\n              /\u003e\n            )}\n    \n            {restaurantLocation \u0026\u0026 (\n              \u003cMapView.Marker\n                coordinate={{\n                  latitude: restaurantLocation.latitude,\n                  longitude: restaurantLocation.longitude,\n                }}\n                title={'Restaurant is here'}\n                pinColor={'#4CDB00'}\n              /\u003e\n            )}\n    \n            {customerLocation \u0026\u0026 (\n              \u003cMapView.Marker\n                coordinate={{\n                  latitude: customerLocation.latitude,\n                  longitude: customerLocation.longitude,\n                }}\n                title={'Your customer is here'}\n                pinColor={'#6f42c1'}\n              /\u003e\n            )}\n          \u003c/MapView\u003e\n    \n          \u003cView style={styles.floatingButtonContainer}\u003e\n            \u003cButton\n              onPress={this._contactCustomer}\n              title={'Contact customer'}\n              color=\"#c53c3c\"\n            /\u003e\n          \u003c/View\u003e\n    \n          \u003cModal isVisible={isOrderDetailsModalVisible}\u003e\n            {restaurantAddress \u0026\u0026 (\n              \u003cView style={styles.modal}\u003e\n                \u003cTouchableOpacity onPress={this._hideOrderDetailsModal}\u003e\n                  \u003cText style={styles.close}\u003eClose\u003c/Text\u003e\n                \u003c/TouchableOpacity\u003e\n                \u003cView style={styles.modalBody}\u003e\n                  \u003cView style={styles.addressContainer}\u003e\n                    \u003cText style={styles.labelText}\u003ePick up\u003c/Text\u003e\n                    \u003cText style={styles.valueText}\u003e\n                      {restaurantAddress.replace(',', '\\n')}\n                    \u003c/Text\u003e\n                  \u003c/View\u003e\n    \n                  \u003cView style={styles.addressContainer}\u003e\n                    \u003cText style={styles.labelText}\u003eDrop off\u003c/Text\u003e\n                    \u003cText style={styles.valueText}\u003e\n                      {customerAddress.replace(',', '\\n')}\n                    \u003c/Text\u003e\n                  \u003c/View\u003e\n    \n                  \u003cView style={styles.buttonContainer}\u003e\n                    \u003cButton\n                      onPress={this._acceptOrder}\n                      title={'Accept order'}\n                      color=\"#28a745\"\n                    /\u003e\n                  \u003c/View\u003e\n    \n                  \u003cView style={styles.buttonContainer}\u003e\n                    \u003cButton\n                      onPress={this._declineOrder}\n                      title={'Decline order'}\n                      color=\"#c53c3c\"\n                    /\u003e\n                  \u003c/View\u003e\n                \u003c/View\u003e\n              \u003c/View\u003e\n            )}\n          \u003c/Modal\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nNext, add the code for accepting an order. When this happens, we subscribe to the customer’s channel then trigger an event that tells them they’re available. This is the part where the customer then triggers the `client-driver-response` on their side to confirm that they still haven’t found another driver. When this happens, the driver triggers the `client-found-driver` event to the customer to inform them that they accepted their request. We also trigger a `client-order-update` event to update the order status:\n\n```javascript\n    _acceptOrder = () =\u003e {\n      const {customer, currentLocation} = this.state;\n    \n      this.setState({\n        isOrderDetailsModalVisible: false,\n      });\n    \n      this.ride_channel = this.pusher.subscribe(\n        'private-ride-' + customer.username,\n      );\n    \n      this.ride_channel.bind('pusher:subscription_succeeded', () =\u003e {\n        this.ride_channel.trigger('client-driver-response', {\n          response: 'yes', // yes, I'm available\n        });\n    \n        // listen for the acknowledgement from the customer\n        this.ride_channel.bind('client-driver-response', customer_response =\u003e {\n          \n          if (customer_response.response == 'yes') {\n            this.setState({\n              hasOrder: true,\n            });\n    \n            this.props.navigation.setParams({\n              showHeaderButton: true, // show the main action button\n            });\n    \n            this.ride_channel.trigger('client-found-driver', {\n              driver: {\n                name: this.user_name,\n              },\n              location: {\n                latitude: currentLocation.latitude,\n                longitude: currentLocation.longitude,\n                accuracy: currentLocation.accuracy,\n              },\n            });\n    \n            setTimeout(() =\u003e {\n              // update order status\n              this.ride_channel.trigger('client-order-update', {\n                step: 1,\n              });\n            }, 2000);\n          } else {\n            Alert.alert(\n              'Order no longer available',\n              'Someone else already took the order. Or the customer cancelled.',\n              [\n                {\n                  text: 'Ok',\n                },\n              ],\n              {cancelable: false},\n            );\n          }\n        });\n      });\n    };\n```\n\nHere’s the method for handling the `onPress` event on the close button of the order details modal. This is equivalent to declining the order, but I’ll leave that to you to implement. It will have the same code as the `_declineOrder()` method:\n\n```javascript\n    _hideOrderDetailsModal = () =\u003e {\n      this.setState({\n        isOrderDetailsModalVisible: false,\n      });\n      // homework: add code for declining order\n    };\n    \n    _declineOrder = () =\u003e {\n      // homework: add code for declining order\n    };\n```\n\nHere’s the first action for the main action button. This will update the customer that the driver has picked their order from the restaurant. This will also change the action of the main action button to that of setting the order as delivered:\n\n```javascript\n    _pickedOrder = async () =\u003e {\n      this.props.navigation.setParams({\n        headerButtonLabel: 'Delivered Order',\n        headerButtonAction: this._deliveredOrder,\n      });\n    \n      this.ride_channel.trigger('client-order-update', {\n        step: 2,\n      });\n    };\n```\n\nHere’s the `_deliveredOrder()` method. This updates the customer that their order has been delivered at their doorstep. Having completed the delivery means that the order has been completely processed so we reset the UI as well:\n\n```javascript\n    _deliveredOrder = () =\u003e {\n      this.ride_channel.unbind('client-driver-response'); // unbind from passenger event\n      this.pusher.unsubscribe('private-ride-' + this.state.customer.username); // unsubscribe from passenger channel\n    \n      this.setState({\n        hasOrder: false,\n        customer: null,\n        restaurantLocation: null,\n        customerLocation: null,\n        restaurantAddress: null,\n        customerAddress: null,\n      });\n    \n      this.props.navigation.setParams({\n        headerButtonLabel: 'Picked Order',\n        headerButtonAction: this._pickedOrder,\n      });\n    \n      this.ride_channel.trigger('client-order-update', {\n        step: 3,\n      });\n    };\n```\n\nBefore the component is unmounted, we clean up after ourselves by stopping the app from watching the driver’s location:\n\n```javascript\n    componentWillUnmount() {\n      Geolocation.clearWatch(this.watch_location_id);\n    }\n```\n\nLastly, add the styles and export the component:\n\n```javascript\n    class OrderMap extends Component {\n      // ..\n    }\n    \n    const styles = StyleSheet.create({\n      navHeaderRight: {\n        marginRight: 10,\n      },\n      wrapper: {\n        flex: 1,\n      },\n      map: {\n        ...StyleSheet.absoluteFillObject,\n      },\n      floatingButtonContainer: {\n        position: 'absolute',\n        bottom: '2%',\n        left: '2%',\n        alignSelf: 'flex-end',\n      },\n      modal: {\n        flex: 1,\n        backgroundColor: '#FFF',\n        padding: 20,\n      },\n      close: {\n        alignSelf: 'flex-end',\n        marginBottom: 10,\n        color: '#0366d6',\n      },\n      modalBody: {\n        marginTop: 20,\n      },\n      addressContainer: {\n        marginBottom: 20,\n      },\n      labelText: {\n        fontSize: 18,\n        fontWeight: 'bold',\n      },\n      valueText: {\n        fontSize: 16,\n        color: '#333',\n      },\n      buttonContainer: {\n        marginBottom: 10,\n      },\n    });\n    \n    export default OrderMap;\n```\n\n## Adding the chat functionality\n\nNow that we’ve created the driver app, it’s time to implement the chat functionality on both apps. We’ll first implement the chat for the driver app.\n\n### Driver app: OrderMap screen\nFirst, open the `src/screens/OrderMap.js` file and import `axios`:\n\n```javascript\n    import MapViewDirections from 'react-native-maps-directions';\n    import axios from 'axios'; // add this\n```\n\nThen in the constructor, add the `user_id`. This will serve as the unique ID for the user in Chatkit:\n\n```javascript\n    constructor(props) {\n      // ..\n      this.pusher = null; \n      \n      // add these:\n      this.user_name = 'John Doe';\n      this.user_id = 'johndoe'; // add this\n    }\n```\n\nNext, update `componentDidMount()` to make a request to the server to log in the user in Chatkit. Note that this doesn’t actually log in the user. It’s purpose is to create a corresponding Chatkit user for the driver if it doesn’t already exists. You’ll see this in the server code later on:\n\n```javascript\n    async componentDidMount() {\n      // ...\n      if (location_permission === 'granted') {\n        // ...\n      }\n      \n      // add these\n      try {\n        await axios.post(`${BASE_URL}/login`, {\n          user_id: this.user_id,\n          user_name: this.user_name,\n        });\n      } catch (err) {\n        console.log('error creating user: ', err);\n      }\n    }\n```\n\nNext, update the code for accepting orders so that it extracts the `room_id` and `room_name` for the chat room. We will add this on the code for the ordering app later on:\n\n```javascript\n    _acceptOrder = () =\u003e {\n      // ...\n      this.props.navigation.setParams({\n        showHeaderButton: true,\n      });\n      \n      this.ride_channel.bind('pusher:subscription_succeeded', () =\u003e {\n        // ..\n    \n        this.ride_channel.bind('client-driver-response', customer_response =\u003e {\n          if (customer_response.response == 'yes') {\n            // ..\n            \n            // add these:\n            const {room_id, room_name} = customer_response;\n            \n            this.room_id = room_id; \n            this.room_name = room_name;\n            // end add\n    \n            this.ride_channel.trigger('client-found-driver', { \n              // ...\n            });\n            \n            // ...\n          } else {\n            // ...\n          }\n        }\n      }\n      \n      // ..\n    \n    }\n```\n\nNext update the code for setting the order as “picked” so that it makes a request to let the driver join the chat room. We’ll add the code for this later on once we get to the server part:\n\n```javascript\n    _pickedOrder = () =\u003e {\n      // ...\n    \n      this.ride_channel.trigger('client-order-update', {\n        step: 2,\n      });\n      \n      // add these:\n      try {\n        await axios.post(`${BASE_URL}/room`, {\n          room_id: this.room_id,\n          room_name: this.room_name,\n          user_id: this.user_id,\n        });\n      } catch (room_err) {\n        console.log('room error: ', room_err);\n      }\n    }\n```\n\nWhen the contact customer button is clicked, we navigate to the `ContactCustomer` screen. We pass along the `user_id` and `room_id` as navigation params because we’ll need it to subscribe to the chat room:\n\n```javascript\n    _contactCustomer = () =\u003e {\n      this.props.navigation.navigate('ContactCustomer', {\n        user_id: this.user_id,\n        room_id: this.room_id,\n      });\n    };\n```\n\n### Driver app: ContactCustomer screen\nNow we proceed to implementing the actual chat functionality. Create a `src/screens/ContactCustomer.js` file and add the following. We’re using Chatkit and Gifted Chat to easily implement the chat functionality:\n\n```javascript\n    import React, {Component} from 'react';\n    import {View, StyleSheet} from 'react-native';\n    \n    import {GiftedChat} from 'react-native-gifted-chat';\n    import {ChatManager, TokenProvider} from '@pusher/chatkit-client';\n    \n    import Config from 'react-native-config';\n    \n    const CHATKIT_INSTANCE_LOCATOR_ID = Config.CHATKIT_INSTANCE_LOCATOR_ID;\n    const CHATKIT_SECRET_KEY = Config.CHATKIT_SECRET_KEY;\n    const CHATKIT_TOKEN_PROVIDER_ENDPOINT = Config.CHATKIT_TOKEN_PROVIDER_ENDPOINT;\n```\n\nNext, create the component class. Initialize the `messages` state and extract the navigation params that were passed from the `OrderMap` screen earlier:\n\n```javascript\n    class ContactCustomer extends Component {\n      static navigationOptions = ({navigation}) =\u003e {\n        return {\n          title: 'Contact Customer',\n        };\n      };\n    \n      state = {\n        messages: [], // array of messages that are sent in the room\n      };\n    \n      constructor(props) {\n        super(props);\n        this.user_id = this.props.navigation.getParam('user_id');\n        this.room_id = this.props.navigation.getParam('room_id');\n      }\n    \n      // next: add componentDidMount()\n    }\n```\n\nNext, connect to Chatkit and subscribe to the room that was specifically created for this order. This allows us to attach to the `onMessage` [hook](https://pusher.com/docs/chatkit/reference/javascript#subscriptions) which gets called everytime a new message is sent in the room (including the one’s sent by the current user):\n\n```javascript\n    async componentDidMount() {\n      try {\n        const chatManager = new ChatManager({\n          instanceLocator: CHATKIT_INSTANCE_LOCATOR_ID,\n          userId: this.user_id,\n          tokenProvider: new TokenProvider({\n            url: CHATKIT_TOKEN_PROVIDER_ENDPOINT,\n          }),\n        });\n    \n        let currentUser = await chatManager.connect();\n        this.currentUser = currentUser;\n    \n        await this.currentUser.subscribeToRoomMultipart({\n          roomId: this.room_id,\n          hooks: {\n            onMessage: this._onMessage,\n          },\n          messageLimit: 30,\n        });\n      } catch (err) {\n        console.log('chatkit error: ', err);\n      }\n    }\n```\n\nHere’s the `render()` method. This uses Gifted Chat to render a chat UI. All it requires us to supply is the array of `messages`, the function to execute when a message is sent, and the user ID of the current user. This is what Gifted Chat uses to determine which side of the chat UI a specific message will be rendered. If the message contains the same user ID specified here, then it will be rendered on the right side to indicate that it’s the current user:\n\n```javascript\n    render() {\n      const {messages} = this.state;\n      return (\n        \u003cView style={styles.wrapper}\u003e\n          \u003cGiftedChat\n            messages={messages}\n            onSend={messages =\u003e this._onSend(messages)}\n            showUserAvatar={true}\n            user={{\n              _id: this.user_id,\n            }}\n          /\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nHere’s the `onSend()` method. This gets executed when the user clicks on the **send** button in the chat UI. This uses Chatkit’s `sendSimpleMessage()` [method](https://pusher.com/docs/chatkit/quick_start/javascript#send-your-own-message) to send a simple text message. You can also send multipart messages if you want to attach photos or other media to the message:\n\n```javascript\n    _onSend = async ([message]) =\u003e {\n      try {\n        await this.currentUser.sendSimpleMessage({\n          roomId: this.room_id,\n          text: message.text,\n        });\n      } catch (send_msg_err) {\n        console.log('error sending message: ', send_msg_err);\n      }\n    };\n```\n\nHere’s the function that gets executed whenever a new message is received. This will create a new array consisting of the current messages with the new message appended at the end:\n\n```javascript\n    _onMessage = data =\u003e {\n      const {message} = this._getMessage(data);\n      this.setState(previousState =\u003e ({\n        messages: GiftedChat.append(previousState.messages, message),\n      }));\n    };\n```\n\nHere’s the `_getMessage()` function. This creates a new object consisting only of the data required by Gifted Chat in order to render a message. Note that even though we’re only sending simple text messages, we still have to extract the `inline` part to get the actual text as messages still follow the same multi-part structure regardless of whether they’re sent as a simple message or multi-part:\n\n```javascript\n    _getMessage = ({id, sender, parts, createdAt}) =\u003e {\n      const text = parts.find(part =\u003e part.partType === 'inline').payload.content;\n    \n      const msg_data = {\n        _id: id,\n        text: text,\n        createdAt: new Date(createdAt),\n        user: {\n          _id: sender.id.toString(),\n          name: sender.name,\n          avatar: `https://na.ui-avatars.com/api/?name=${sender.name}`,\n        },\n      };\n    \n      return {\n        message: msg_data,\n      };\n    };\n```\n\nLastly, in your `Root.js` file, add the `ContactCustomer` screen:\n\n```javascript\n    import OrderMap from './src/screens/OrderMap';\n    import ContactCustomer from './src/screens/ContactCustomer';\n    \n    const RootStack = createStackNavigator(\n      {\n        OrderMap,\n        ContactCustomer,\n      },\n      {\n        initialRouteName: 'OrderMap',\n      },\n    );\n```\n\n### Ordering app: OrderSummary screen\nNext, we now proceed to the ordering app. Open the `src/screens/OrderSummary.js` file and import the two additional packages that we need:\n\n```javascript\n    Geocoder.init(GOOGLE_API_KEY);\n    \n    // add these\n    const random = require('string-random'); \n    import axios from 'axios'; \n```\n\nNext, update the `placeOrder()` method so it generates a random room ID for the chat room. We’ll be needing this along with the room name later so we store it in the global app state. We’ll update the `GlobalContext.js` file later to add this method. After that, make a request to log in the user and create the chat room:\n\n```javascript\n    placeOrder = async () =\u003e {\n      const {customer_location, customer_address} = this.state;\n      \n      // add these\n      const room_id = random();\n      const room_name = `Order ${room_id}`;\n      this.context.setRoom(room_id, room_name);\n      // end  \n    \n      const {\n        address: restaurant_address,\n        location: restaurant_location,\n      } = this.context.cart_items[0].restaurant;\n      \n      // add these\n      try {\n        // creates the Chatkit user if it doesn't already exists\n        await axios.post(`${BASE_URL}/login`, {\n          user_id: this.context.user_id,\n          user_name: this.context.user_name,\n        });\n        \n        // create the Chatkit room\n        await axios.post(`${BASE_URL}/room`, {\n          room_id,\n          room_name: room_name,\n          user_id: this.context.user_id,\n        });\n      } catch (err) {\n        console.log('login err: ', err);\n      }\n    }\n```\n\n### Ordering app: TrackOrder screen\nOpen the `src/screens/TrackOrder.js` file and update the `client-driver-response` event to include the `room_id` and `room_name`. Since we saved it in the global app state earlier, we can now access it via `this.context`:\n\n```javascript\n    componentDidMount() {\n      // ...\n      this.user_ride_channel = this.pusher.subscribe(\n        'private-ride-' + this.context.user_id,\n      );\n      \n      // update this:\n      this.user_ride_channel.bind('client-driver-response', data =\u003e {\n        const {hasDriver} = this.state;\n        this.user_ride_channel.trigger('client-driver-response', {\n          response: hasDriver ? 'no' : 'yes',\n          \n          // add these\n          room_id: hasDriver ? '0' : this.context.room_id,\n          room_name: hasDriver ? '' : this.context.room_name,\n        });\n      });\n    }\n```\n\nAfter that, add the code for navigating to the `ContactDriver` screen:\n\n```javascript\n    contactDriver = () =\u003e {\n      this.props.navigation.navigate('ContactDriver');\n    };\n```\n\n### Ordering app: GlobalContext\nOpen the `GlobalContext.js` file and add the initial value for the `room_id` and `room_name`:\n\n```javascript\n    export class AppContextProvider extends React.Component {\n      state = {\n        cart_items: [],\n        user_id: 'wernancheta',\n        user_name: 'Wern Ancheta',\n    \n        // add these:\n        room_id: '',\n        room_name: '',\n      };\n    }\n```\n\nThen add the method for updating them:\n\n```javascript\n    setRoom = (id, name) =\u003e {\n      this.setState({\n        room_id: id,\n        room_name: name,\n      });\n    };\n```\n\nDon’t forget to add `setRoom()` method as a value:\n\n```javascript\n    render() {\n      return (\n        \u003cAppContext.Provider\n          value={{\n            ...this.state,\n            addToCart: this.addToCart,\n            setRoom: this.setRoom,\n          }}\u003e\n          {this.props.children}\n        \u003c/AppContext.Provider\u003e\n      );\n    }\n```\n\n### Ordering app: ContactDriver screen\nCreate a `src/screens/ContactDriver.js` file and add the following. This has pretty much the same code as the `src/screens/ContactCustomer.js` file from the driver app earlier. The only difference is that we’re using the `user_id` and `room_id` from the context and not from the navigation params:\n\n```javascript\n    import React, {Component} from 'react';\n    import {View, StyleSheet} from 'react-native';\n    \n    import {GiftedChat} from 'react-native-gifted-chat';\n    import {ChatManager, TokenProvider} from '@pusher/chatkit-client';\n    \n    import Config from 'react-native-config';\n    \n    const CHATKIT_INSTANCE_LOCATOR_ID = Config.CHATKIT_INSTANCE_LOCATOR_ID;\n    const CHATKIT_SECRET_KEY = Config.CHATKIT_SECRET_KEY;\n    const CHATKIT_TOKEN_PROVIDER_ENDPOINT = Config.CHATKIT_TOKEN_PROVIDER_ENDPOINT;\n    \n    import {AppContext} from '../../GlobalContext';\n    \n    class ContactDriver extends Component {\n      static navigationOptions = ({navigation}) =\u003e {\n        return {\n          title: 'Contact Driver'\n        };\n      };\n    \n      static contextType = AppContext;\n    \n      state = {\n        messages: [],\n      };\n    \n      async componentDidMount() {\n        try {\n          const chatManager = new ChatManager({\n            instanceLocator: CHATKIT_INSTANCE_LOCATOR_ID,\n            userId: this.context.user_id, \n            tokenProvider: new TokenProvider({\n              url: CHATKIT_TOKEN_PROVIDER_ENDPOINT,\n            }),\n          });\n    \n          let currentUser = await chatManager.connect();\n          this.currentUser = currentUser;\n    \n          await this.currentUser.subscribeToRoomMultipart({\n            roomId: this.context.room_id,\n            hooks: {\n              onMessage: this._onMessage,\n            },\n            messageLimit: 30,\n          });\n        } catch (err) {\n          console.log('chatkit error: ', err);\n        }\n      }\n    \n      _onMessage = data =\u003e {\n        const {message} = this._getMessage(data);\n    \n        this.setState(previousState =\u003e ({\n          messages: GiftedChat.append(previousState.messages, message),\n        }));\n      };\n    \n      _getMessage = ({id, sender, parts, createdAt}) =\u003e {\n        const text = parts.find(part =\u003e part.partType === 'inline').payload.content;\n    \n        const msg_data = {\n          _id: id,\n          text: text,\n          createdAt: new Date(createdAt),\n          user: {\n            _id: sender.id.toString(),\n            name: sender.name,\n            avatar: `https://na.ui-avatars.com/api/?name=${sender.name}`,\n          },\n        };\n    \n        return {\n          message: msg_data,\n        };\n      };\n    \n      render() {\n        const {messages} = this.state;\n        return (\n          \u003cView style={styles.wrapper}\u003e\n            \u003cGiftedChat\n              messages={messages}\n              onSend={messages =\u003e this._onSend(messages)}\n              showUserAvatar={true}\n              user={{\n                _id: this.context.user_id,\n              }}\n            /\u003e\n          \u003c/View\u003e\n        );\n      }\n    \n      _onSend = async ([message]) =\u003e {\n        try {\n          await this.currentUser.sendSimpleMessage({\n            roomId: this.context.room_id,\n            text: message.text,\n          });\n        } catch (send_msg_err) {\n          console.log('error sending message: ', send_msg_err);\n        }\n      };\n    }\n    \n    const styles = StyleSheet.create({\n      wrapper: {\n        flex: 1,\n      },\n    });\n    \n    export default ContactDriver;\n```\n\nLastly, in your `Root.js` file, add the `ContactDriver` screen:\n\n```javascript\n    import TrackOrder from './src/screens/TrackOrder';\n    import ContactDriver from './src/screens/ContactDriver';\n    \n    const RootStack = createStackNavigator(\n      {\n        FoodList,\n        FoodDetails,\n        OrderSummary,\n        TrackOrder,\n        ContactDriver,\n      },\n      {\n        initialRouteName: 'FoodList',\n      },\n    );\n```\n\n## Chatkit server\n\nNow we proceed with the server code. Start by importing the Chatkit server SDK:\n\n```javascript\n    const cors = require('cors');\n    const Chatkit = require('@pusher/chatkit-server'); // add this\n```\n\nInitialize Chatkit:\n\n```javascript\n    const app = express();\n    \n    // add these:\n    const CHATKIT_INSTANCE_LOCATOR_ID = process.env.CHATKIT_INSTANCE_LOCATOR_ID;\n    const CHATKIT_SECRET_KEY = process.env.CHATKIT_SECRET_KEY;\n    \n    const chatkit = new Chatkit.default({\n      instanceLocator: CHATKIT_INSTANCE_LOCATOR_ID,\n      key: CHATKIT_SECRET_KEY,\n    });\n```\n\nAdd the `/login` route. As mentioned earlier, all this does is create a corresponding Chatkit user for the `user_id` and `user_name` provided if it doesn’t already exists:\n\n```javascript\n    app.post('/login', async (req, res) =\u003e {\n      const {user_id, user_name} = req.body;\n      try {\n        const user = await chatkit.getUser({\n          id: user_id,\n        });\n      } catch (err) {\n        if (err.error == 'services/chatkit/not_found/user_not_found') {\n          await chatkit.createUser({\n            id: user_id,\n            name: user_name,\n          });\n        }\n      }\n    \n      return res.send('ok');\n    });\n```\n\nThe `/room` route works the same way. It will create a Chatkit room if it doesn’t already exists. But if it already does then it will add the user to the room. As you’ve seen earlier, the first time this gets called is when the customer places their order so the room is created at that point. The second time is when the driver marks the order as “picked”. At that point, the driver is added to the room:\n\n```javascript\n    app.post('/room', async (req, res) =\u003e {\n      const {room_id, room_name, user_id} = req.body;\n      \n      try {\n        const room = await chatkit.getRoom({\n          roomId: room_id,\n          includePrivate: true,\n        });\n    \n        if (room) {\n          const user_rooms = await chatkit.getUserRooms({\n            userId: user_id,\n          });\n    \n          const room_index = user_rooms.findIndex(item =\u003e item.id == room_id);\n          if (room_index == -1) {\n            await chatkit.addUsersToRoom({\n              roomId: room_id,\n              userIds: [user_id],\n            });\n          }\n        }\n      } catch (err) {\n        if (err.error == 'services/chatkit/not_found/room_not_found') {\n          const created_room = await chatkit.createRoom({\n            id: room_id,\n            creatorId: user_id,\n            name: room_name,\n            isPrivate: true,\n          });\n        }\n      }\n    \n      return res.send('ok');\n    });\n```\n\n## Running the app\n\nAt this point, you can now run the app. Start by running the server and exposing it via ngrok:\n\n```\n    cd RNFoodDelivery\n    node server/index.js\n    ~/Downloads/ngrok http 5000\n```\n\nReplace the `NGROK_HTTPS_URL` on the `.env` file then run the app. If you want to test on the same machine, you need to start the metro bundler first on a different port (default is port 8081):\n\n```\n    react-native start --port=8080\n```\n\nThen run the ordering app:\n\n```\n    react-native run-android\n```\n\nAfter that, update the server host and port under the debug server host \u0026 port settings (you can access the settings by shaking the device):\n\n![food-ordering-app-react-native-driver-img7](//images.ctfassets.net/1es3ne0caaid/5j04egpbIHEFXJypADl9Tg/e58d0371e45db0d3b0a94336538cfcca/food-ordering-app-react-native-driver-img7.png)\n\nOnce that’s done, disconnect the first device and connect the second device (or launch the emulator) then run the driver app. This will now run using the default port so there’s no need to separately run the metro bundler. Don’t forget to update the `.env` file with the ngrok HTTPS URL before doing so:\n\n```\n    react-native run-android\n```\n\nIf you want to easily test the changing of locations, you can run the driver app using the [Genymotion emulator](https://www.genymotion.com/fun-zone/). It has a feature for changing the location via a Mapbox UI:\n\n![food-ordering-app-react-native-driver-img8](//images.ctfassets.net/1es3ne0caaid/4jBUxfS4XHF8jxQIzuZnVi/74de44bcba1bd60c4e876fdb2bc7f836/food-ordering-app-react-native-driver-img8.png)\n\n## Conclusion\n\nThat’s it! In this part of the series, you learned how to create the driver side of the app. You also learned how to implement chat functionality using Chatkit.\n\nStay tuned for the final part wherein we will implement Push Notifications using Pusher Beams.\n\nYou can find the app’s code on this [GitHub repo](https://github.com/anchetaWern/React-Native-Food-Delivery).","metaTitle":"Create a food ordering app in React Native - Part 2","metaDescription":"Food ordering apps such as Uber Eats and FoodPanda are a popular way to order from your favorite local restaurant. In this tutorial series, create the food ordering and driving apps in React Native. In part 2, create the driver app and implement a chat functionality."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2HS3BwSUHK0s0eHLxRZjDa","type":"Entry","createdAt":"2019-12-10T14:18:07.594Z","updatedAt":"2020-07-24T15:26:49.380Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a food ordering app in React Native - Part 3: Adding push notifications","url":"food-ordering-app-react-native-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/React-Native-Food-Delivery","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"18J5ku8AMG7DNqxzvTy4tW","type":"Entry","createdAt":"2019-06-04T15:37:38.967Z","updatedAt":"2019-06-04T15:37:38.967Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Webhooks","url":"webhooks","type":"use case","featured":false}}],"reviewDate":"2019-10-23","description":"Food ordering apps such as Uber Eats and FoodPanda are a popular way to order from your favorite local restaurant. In this tutorial series, create both the food ordering app and the driving app using React Native. In the third and final part, add push notifications to inform both the customer and the driver of various events throughout the ordering process.","prerequisite":"You will need Node 11.10+, Yarn 1.17+, React Native CLI 2+ and React Native 0.61+ installed on your machine.","content":"This is the final part of a three-part series on creating a food ordering app in React Native. In the [first part](http://pusher.com/tutorials/food-ordering-app-react-native-part-1) we created a very simple food ordering app, and in the [second part](http://pusher.com/tutorials/food-ordering-app-react-native-part-2) we created a driver app with chat functionality. In this part, we’re going to add push notifications to inform both the customer and the driver of various events throughout the ordering process.\n\n\n## Prerequisites\n\nThis part has the same prerequisites as the [first](http://pusher.com/tutorials/food-ordering-app-react-native-part-1) and [second](http://pusher.com/tutorials/food-ordering-app-react-native-part-2) part.\n\nYou’ll need a [Firebase account](https://firebase.google.com/) and a [Beams account](https://pusher.com/beams) for implementing push notifications.\n\n\n## Feature overview\n\nWe will be adding push notifications for the following events:\n\n- Driver accepted the order.\n- Driver picked the order from the restaurant.\n- Driver delivered the order to the customer.\n- Driver sent a message to the customer.\n- Customer confirmed to let the driver handle the order.\n- Customer sent a message to the driver.\n\nHere are a couple of screenshots. The first one is when the driver has accepted an order, and the second one is when the customer confirmed:\n\n![food-ordering-app-react-native-push-img1](//images.ctfassets.net/1es3ne0caaid/7BkJf3rfl5cwRpkQmMz516/8ba9b90133d9876c68abdf8e34e397a0/food-ordering-app-react-native-push-img1.png)\n\n![food-ordering-app-react-native-push-img2](//images.ctfassets.net/1es3ne0caaid/1TnmFc0nTGZHzyovByTDja/6b6e204ef3298967abde4371b16b29b6/food-ordering-app-react-native-push-img2.png)\n\nYou can find the code on this [GitHub repo](https://github.com/anchetaWern/React-Native-Food-Delivery). The completed code for this part is on the `push-notifications` branch.\n\n\n## Setting up a Firebase project\n\nBeams depends on [Firebase Cloud Messaging](https://firebase.google.com/docs/cloud-messaging) (FCM) to send push notifications in Android so we need to set up a Firebase project. \n\nThe official documentation on how to create a Firebase project is available [here](https://firebase.google.com/docs/android/setup#create-firebase-project). You can also follow the [visual walkthrough](https://pusher.com/docs/beams/getting-started/android/configure-fcm#visual-walkthrough) in the Beams documentation site. \n\nCreate a separate Firebase project for each of the apps that we created because each one uses a different package name.\n\nOnce the project is created, click on the **Cloud Messaging** menu on the sidebar and you’ll see this screen. Click on the Android icon to view the form wizard for setting up Firebase on an Android app:\n\n\n![food-ordering-app-react-native-push-img3](//images.ctfassets.net/1es3ne0caaid/3dWzXotEy5P6smSC6nUuaJ/845d29b58c051bc92db073ca1a733c26/food-ordering-app-react-native-push-img3.png)\n\nOn the screen that follows, enter the package name. Note that you have to do this twice (one for each Firebase project). The first one is the driver app (`com.rnfooddeliverydriver`), and the second one is for the ordering app (`com.rnfooddelivery`):\n\n\n![food-ordering-app-react-native-push-img5](//images.ctfassets.net/1es3ne0caaid/4TdX8nrE8cAVcbuCYZniGd/6cb4086a3d44aefae2717f9a10e0f3cf/food-ordering-app-react-native-push-img5.png)\n\nOnce you clicked on the **Register app**, it will ask you to download the config file. Download it and copy it over to the `android/app` directory for the corresponding app.\n\nRemember to repeat the same process for the ordering app.\n\n\n## Setting up Beams\n\nOn your Beams account, you also need to create two app instances. Each corresponds to the Firebase projects you just created.\n\nOn your Beams dashboard, click on the **+ CREATE** button and enter the name of the app:\n\n\n![food-ordering-app-react-native-push-img5](//images.ctfassets.net/1es3ne0caaid/1yaV7KSQQ8iElwJZ13AU3i/b23056c3de02d355aa2bcc843181d20f/food-ordering-app-react-native-push-img5.png)\n\nOnce the instance created, it walks you through the quickstart. Select **ANDROID**:\n\n\n![food-ordering-app-react-native-push-img6](//images.ctfassets.net/1es3ne0caaid/4GqMxv9OMtIdNl2N6cGoJA/92e4d072bf84ab0f96d32847190d728b/food-ordering-app-react-native-push-img6.png)\n\nNext, it will ask you to enter the FCM server key. Documentation on how to get it is available [here](https://pusher.com/docs/beams/getting-started/android/configure-fcm#get-your-fcm-server-key):\n\n\n![food-ordering-app-react-native-push-img7](//images.ctfassets.net/1es3ne0caaid/aCzjrSv3la1LJrqHErudw/998af5b6454b5aec8263577150355368/food-ordering-app-react-native-push-img7.png)\n\nOnce that’s done, it will give you instructions on how to add Beams on your app. Some of these apply to React Native, but I’ll just walk you through how to set it up in the **Setting up the ordering and driver app** section so just skip this one:\n\n\n![food-ordering-app-react-native-push-img8](//images.ctfassets.net/1es3ne0caaid/3DTgcJtCQ9rMCEU1As32u9/07ec26b408ea3830d6628ec65c8165b5/food-ordering-app-react-native-push-img8.png)\n\nRemember to repeat the same process for the ordering app and add the FCM server key from the corresponding Firebase project.\n\n\n## Setting up Chatkit webhooks\n\nNext, we configure Chatkit webhooks. This allows us to get notified when new messages are sent by any of the users of the app. That’s where we’ll add push notification code to notify the receiving user that somebody has sent them a message. This is especially useful in cases where the receiver is not yet in the chat screen when the message is sent.\n\nYou can choose to do this now or later when you run the app. Just know that you can actually execute ngrok at this point and add the target URL using this format: `https://YOUR_NGROK_URL/notify`. Add a webhook secret as well. Just take note of it because we’re going to add it to the `server/.env` file:\n\n\n![food-ordering-app-react-native-push-img9](//images.ctfassets.net/1es3ne0caaid/1P8utSg5bPL8RQ1P4fWeK8/c913e674404b66435b23a5262a735156/food-ordering-app-react-native-push-img9.png)\n\n\n## Setting up the ordering and driver app\n\nThe next step is to install and configure the React Native package for implementing push notifications. There’s no official React Native package for Beams yet so we’re using the [React Native Push Notifications](https://github.com/b8ne/react-native-pusher-push-notifications) package. But because this package is already outdated, we’re using a [fork](https://github.com/ZeptInc/react-native-pusher-push-notifications) instead.\n\nThe following instructions should be applied to both the ordering and driver app.\n\nUpdate your `package.json` file to add the push notifications package:\n\n```json\n    \"dependencies\": {\n      // ...\n      \"react-native-pusher-push-notifications\": \"git+http://git@github.com/ZeptInc/react-native-pusher-push-notifications#v.2.4.0-zept-master\",\n    }\n```\n\nAfter that, install the package:\n\n```\n    yarn install\n```\n\nNext, update the `android/settings.gradle` file, `android/build.gradle`, and `android/app/build.gradle` files to include the necessary configuration:\n\n```javascript\n    // android/settings.gradle\n    rootProject.name = 'RNFoodDelivery'\n    \n    include ':app'\n    \n    // add these:\n    include ':react-native-pusher-push-notifications'\n    project(':react-native-pusher-push-notifications').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-pusher-push-notifications/android')\n\n\n    // android/build.gradle\n    buildscript {\n      ext {\n        // ...\n      }\n      repositories {\n        // ...\n      }\n      dependencies {\n        classpath(\"com.android.tools.build:gradle:3.4.2\")\n        classpath 'com.google.gms:google-services:4.2.0' // add this\n      }\n    }\n    \n    allprojects {\n      repositories {\n        mavenLocal()\n        maven {\n          // ..\n        }\n        maven {\n          // ..\n        }\n    \n        google()\n        jcenter()\n      }\n    }\n\n\n    // android/app/build.gradle\n    dependencies {\n      implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\n      implementation \"com.facebook.react:react-native:+\"  \n      \n      // add these:\n      compile project(':react-native-pusher-push-notifications')\n      implementation 'com.github.ZeptInc:push-notifications-android:1.5.0-alpha'\n    }\n    \n    // ...\n    \n    apply from: file(\"../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle\"); applyNativeModulesAppBuildGradle(project)\n    \n    apply plugin: 'com.google.gms.google-services' // add this\n```\n\nLastly, update your `.env` file for the ordering app to include the Beams instance ID for the ordering app:\n\n```\n    BEAMS_INSTANCE_ID=\"YOUR BEAMS INSTANCE ID FOR THE ORDERING APP\"\n```\n\nDo the same for the driver app:\n\n```\n    BEAMS_INSTANCE_ID=\"YOUR BEAMS INSTANCE ID FOR THE DRIVER APP\"\n```\n\n## Setting up the server\n\nSince the push notifications will be triggered from the server, we need to install the [Beams Server SDK for Node.js](https://github.com/pusher/push-notifications-node). Add the following to your server’s `package.json` file:\n\n```json\n    \"dependencies\": {\n      // ...\n      \"@pusher/push-notifications-server\": \"^1.2.0\",\n    }\n```\n\nAfter that, execute the following:\n\n```\n    yarn install\n```\n\nLastly, update your `server/.env` file with your Chatkit webhook secret and the instance and secret key for both Beams app instances:\n\n```\n    CHATKIT_WEBHOOK_SECRET=\"YOUR CHATKIT WEBHOOK SECRET\"\n    \n    BEAMS_INSTANCE_ID_DRIVER=\"YOUR BEAMS INSTANCE ID FOR THE DRIVER APP\"\n    BEAMS_SECRET_KEY_DRIVER=\"YOUR BEAMS SECRET KEY FOR THE DRIVER APP\"\n    \n    BEAMS_INSTANCE_ID_CUSTOMER=\"YOUR BEAMS INSTANCE ID FOR THE ORDERING APP\"\n    BEAMS_SECRET_KEY_CUSTOMER=\"YOUR BEAMS SECRET KEY FOR THE ORDERING APP\"\n```\n\n## Updating the ordering app\n\nAt this point, we’re now ready to start updating the apps. First we’ll start with the ordering app.\n\n### GlobalContext\nOpen the `GlobalContext.js` file and add a `user_type`. This allows us to specify which type of user triggered the push notification. Which in turn allows us to determine which Beams app instance to use for sending the push notification. If it’s the customer who triggered it then it means the receiver is the driver so we use the Beams app instance for the driver app. Otherwise, we use the Beams app instance for the ordering app. You’ll see this in action in the server code later on: \n\n```javascript\n    export class AppContextProvider extends React.Component {\n      state = {\n        cart_items: [],\n        user_id: 'wernancheta',\n        user_name: 'Wern Ancheta',\n        user_type: 'customer', // add this\n        room_id: '',\n        room_name: '',\n      };\n      // ...\n    }\n```\n\n### OrderSummary\nNext we update the Chatkit login code so it uses the `user_type` that we just added:\n\n```javascript\n    // src/screens/OrderSummary.js\n    placeOrder = async () =\u003e {\n      // ...\n    \n      const {\n        address: restaurant_address,\n        location: restaurant_location,\n      } = this.context.cart_items[0].restaurant;\n    \n      try {\n        await axios.post(`${BASE_URL}/login`, {\n          user_id: this.context.user_id,\n          user_name: this.context.user_name,\n          user_type: this.context.user_type, // add this\n        });\n      } catch (err) {\n        // ...\n      }\n    \n      // ...\n    }\n```\n\n### TrackOrder screen\nThe TrackOrder screen is where we put the code for implementing push notifications. Start by importing the `react-native-pusher-push-notifications` package:\n\n```javascript\n    // src/screens/TrackOrder.js\n    import RNPusherPushNotifications from 'react-native-pusher-push-notifications';\n```\n\nNext, set the Beams app instance and create the function for subscribing to a specific device interest. In this case, we’re using the name `subscribeToRoom()` because we’re using the room ID as the device interest name:\n\n```javascript\n    RNPusherPushNotifications.setInstanceId(Config.BEAMS_INSTANCE_ID);\n    \n    const subscribeToRoom = room_id =\u003e {\n      RNPusherPushNotifications.subscribe(\n        room_id,\n        (statusCode, response) =\u003e {\n          console.error(statusCode, response);\n        },\n        () =\u003e {\n          console.log('Success');\n        },\n      );\n    };\n```\n\nWe’re using the concept of [device interests](https://pusher.com/docs/beams/concepts/device-interests) in order to subscribe users to a specific push notification channel. Later on in the server, we publish to the same device interest so that the devices which are subscribed to it can receive the notification.\n\nNext, in your `componentDidMount()`, add the code for triggering a push notification to be sent to the driver. This is sent when the customer confirms that the driver can proceed with processing the order after the driver has accepted their request. The way this works is that we add a specific route to the server later on to handle the triggering of push notifications. All we have to do from the frontend is supply the `room_id`, `push_type`, and `data` and it will deliver the push notification to the recipient:\n\n```javascript\n    componentDidMount() {\n      // ...\n      this.user_ride_channel.bind('client-driver-response', data =\u003e {\n        const {hasDriver} = this.state;\n        this.user_ride_channel.trigger('client-driver-response', {\n          response: hasDriver ? 'no' : 'yes',\n          room_id: hasDriver ? '0' : this.context.room_id,\n          room_name: hasDriver ? '' : this.context.room_name,\n        });\n        \n        // add this\n        if (!hasDriver) {\n          setTimeout(async () =\u003e {\n            const res = await axios.post(\n              `${BASE_URL}/push/${this.context.room_id}`,\n              {\n                push_type: 'customer_confirmed',\n                data: this.context.user_name,\n              },\n            );\n          }, 5000);\n        }\n    \n      });\n    }\n```\n\nStill inside `componentDidMount()`, right before the function’s closing curly brace, add the code to subscribe to the room and listen for notifications. In this case, we simply alert the user. This is only triggered when the app is in the foreground. If the app is in the background then the default behavior is to add a new item in the notification panel: \n\n```javascript\n    this.user_ride_channel.bind('client-order-update', data =\u003e {\n      this.setState({\n        orderStatusText: orderSteps[data.step],\n      });\n    });\n    \n    // add these:\n    subscribeToRoom(this.context.room_id); // subscribe to device interest\n    \n    RNPusherPushNotifications.on('notification', noty =\u003e { // listen for notifications\n      Alert.alert(noty.title, noty.body);\n    });\n```\n\n## Updating the driver app\n\nWe now proceed to the driver app. What we need to do is pretty much the same thing we did in the ordering app. Only this time, we’re triggering a lot more notifications.\n\n### OrderMap screen\nFirst, update the OrderMap screen:\n\n```javascript\n    // src/screens/OrderMap.js\n    import axios from 'axios';\n    import RNPusherPushNotifications from 'react-native-pusher-push-notifications'; // add this\n    \n    // ..\n    const GOOGLE_API_KEY = Config.GOOGLE_API_KEY;\n    \n    // add these\n    RNPusherPushNotifications.setInstanceId(Config.BEAMS_INSTANCE_ID);\n    \n    const subscribeToRoom = room_id =\u003e {\n      RNPusherPushNotifications.subscribe(\n        room_id,\n        (statusCode, response) =\u003e {\n          console.error(statusCode, response);\n        },\n        () =\u003e {\n          console.log('Success');\n        },\n      );\n    };\n    // next: add triggerNotification()\n```\n\nBecause we now have to trigger multiple notifications, we also need to add a function to encapsulate the functionality so we don’t repeat ourselves. You’ll see how the arguments we’re passing here will be utilized in the server later on. For now, know that the `push_type` is the key that decides which user type the notification will be sent to as well as the title and body of the notification:\n\n```javascript\n    triggerNotification = async (room_id, push_type, data) =\u003e {\n      try {\n        await axios.post(`${BASE_URL}/push/${room_id}`, {\n          push_type,\n          data,\n        });\n      } catch (err) {\n        console.log('error triggering notification: ', err);\n      }\n    }\n```\n\nNext, in the `constructor()`, add the `user_type`:\n\n```javascript\n    constructor(props) {\n      super(props);\n    \n      this.user_id = 'johndoe';\n      this.user_name = 'John Doe';\n      this.user_type = 'driver'; // add this\n    \n      // ...\n    }\n```\n\nUpdate `componentDidMount()` to add the code for listening to notifications. Also, update the Chatkit login code to include the `user_type`:\n\n```javascript\n    componentDidMount() {\n      \n      // ...\n      this.setState({\n        locationPermission: location_permission,\n      });\n      \n      RNPusherPushNotifications.on('notification', noty =\u003e {\n        Alert.alert(noty.title, noty.body);\n      });\n    \n      try {\n        await axios.post(`${BASE_URL}/login`, {\n          user_id: this.user_id,\n          user_name: this.user_name,\n          user_type: this.user_type, // add this\n        });\n      } catch (err) {\n        console.log('error creating user: ', err);\n      }\n    }\n```\n\nWhen the driver accepts an order, we want to notify the customer that somebody has accepted their order. Before triggering the notification though, we subscribe to the room first so that the driver will also receive notifications that are triggered by the customer:\n\n```javascript\n    _acceptOrder = () =\u003e {\n      // ...\n      this.ride_channel.bind('pusher:subscription_succeeded', () =\u003e {\n        // ..\n    \n        this.ride_channel.bind(\n          'client-driver-response',\n          async customer_response =\u003e {\n            if (customer_response.response == 'yes') {\n              // ..\n    \n              this.room_id = room_id; \n              this.room_name = room_name;\n    \n              // add these\n              subscribeToRoom(room_id);\n              await triggerNotification(\n                room_id,\n                'driver_accepted_order',\n                this.username,\n              );\n              \n              // ..\n            }\n          }\n        );\n    \n      });\n    }\n```\n\nWhen an order is picked, trigger a notification:\n\n```javascript\n    _pickedOrder = async () =\u003e {\n      // ...\n      await triggerNotification(\n        this.room_id,\n        'driver_picked_order',\n        this.username,\n      );\n    }\n```\n\nAnd lastly, when an order is delivered:\n\n```javascript\n    _deliveredOrder = async () =\u003e {\n      // ...\n    \n      await triggerNotification(\n        this.room_id,\n        'driver_delivered_order',\n        this.user_name,\n      );\n    }\n```\n\n## Updating the server\n\nThe final step is to update the server code to send out those push notifications. \n\nFirst, include the additional packages that we need:\n\n```javascript\n    // server/index.js\n    const PushNotifications = require('@pusher/push-notifications-server');\n    const crypto = require('crypto');\n```\n\n\u003e `crypto` is a built-in module in Node.js so all we have to do is import it. We’re using it to calculate the signature to verify if the requests are indeed coming from Chatkit’s servers.\n\nNext, add the Chatkit webhook secret and initialize the Beams client for each app:\n\n```javascript\n    const CHATKIT_WEBHOOK_SECRET = process.env.CHATKIT_WEBHOOK_SECRET;\n    \n    // for sending notifications for the driver app\n    const beamsClientDriver = new PushNotifications({\n      instanceId: process.env.BEAMS_INSTANCE_ID_DRIVER,\n      secretKey: process.env.BEAMS_SECRET_KEY_DRIVER,\n    });\n    \n    // for sending notifications for the ordering app\n    const beamsClientCustomer = new PushNotifications({\n      instanceId: process.env.BEAMS_INSTANCE_ID_CUSTOMER,\n      secretKey: process.env.BEAMS_SECRET_KEY_CUSTOMER,\n    });\n```\n\nAfter that, add the `push_types`. These are the notification types that the server will handle. As you can see, it’s just a map of the `title` and `body` to be used for each notification type. The `[data]` is replaced with the `data` supplied for each notification request:\n\n```javascript\n    const push_types = {\n      driver_accepted_order: {\n        title: 'Order accepted',\n        body: '[data] has accepted your order',\n      },\n      driver_picked_order: {\n        title: 'Picked up order',\n        body: '[data] has picked up your order from the restaurant',\n      },\n      driver_delivered_order: {\n        title: 'Order delivered',\n        body: '[data] has delivered your order',\n      },\n      driver_sent_message: {\n        title: 'New message',\n        body: '[data]',\n      },\n    \n      customer_confirmed: {\n        title: 'Customer confirmed',\n        body: '[data] has confirmed',\n      },\n      customer_sent_message: {\n        title: 'New message',\n        body: '[data]',\n      },\n    };\n```\n\nNext, determine which body parser to use depending on the content type. Chatkit webhooks needs to be processed as plain text so we use `bodyParser.text()` if the `content-type` is `application/json`. This is the content type used by Chatkit’s servers. For the rest of the requests, we’re not really specifying the content type so it’s basically `application/text`. In those cases, we use the `bodyParser.json()`:\n\n```javascript\n    // app.use(bodyParser.json()); // remove\n    app.use(\n      bodyParser.text({\n        type: req =\u003e {\n          const contype = req.headers['content-type'];\n          if (contype === 'application/json') {\n            return true;\n          }\n          return false;\n        },\n      }),\n    );\n    \n    app.use(\n      bodyParser.json({\n        type: req =\u003e {\n          const contype = req.headers['content-type'];\n          if (contype !== 'application/json') {\n            return true;\n          }\n          return false;\n        },\n      }),\n    );\n```\n\nNext, add the function for verifying if the requests came from Chatkit:\n\n```javascript\n    const verifyRequest = req =\u003e {\n      const signature = crypto\n        .createHmac('sha1', CHATKIT_WEBHOOK_SECRET)\n        .update(req.body)\n        .digest('hex');\n    \n      return signature === req.get('webhook-signature');\n    };\n```\n\n\u003e If you want to learn more about implementing Chatkit webhooks in a React Native app, check out this tutorial: [Integrate Chatkit Webhooks in a React Native Chat App](https://pusher.com/tutorials/webhooks-react-native-chat).\n\nNext, add a function for getting a Chatkit user. We’re already using the same functionality in the `/login` route. But since we’re also going to need it to get the data of the user who sent a message, we’re adding it as well so we can use it for both instances:\n\n```javascript\n    const getUser = async user_id =\u003e {\n      try {\n        const user = await chatkit.getUser({\n          id: user_id,\n        });\n        return user;\n      } catch (err) {\n        console.log('error getting user: ', err);\n        return false;\n      }\n    };\n```\n\nNext, add the function for sending push notifications. This determines which Beams app instance to use depending on the `user_type`. If the driver is the one who sent it then the recipient is the customer, thus we use the `beamsClientCustomer`. Otherwise, we use the `beamsClientDriver`:\n\n```javascript\n    const publishNotification = async (user_type, order_id, title, body) =\u003e {\n      const beamsClient =\n        user_type == 'driver' ? beamsClientCustomer : beamsClientDriver;\n    \n      try {\n        await beamsClient.publishToInterests([order_id], {\n          fcm: {\n            notification: {\n              title,\n              body,\n            },\n          },\n        });\n      } catch (err) {\n        console.log('error publishing push notification: ', err);\n      }\n    };\n```\n\nNext, add the function for handling Chatkit webhooks. This handles the “message created” [event](https://pusher.com/docs/chatkit/webhooks#messages-created). This is where we use the custom user data `user_type` to determine which push notification to send. The `room_id` is the same as the device interest so we can simply use it as the value for the `order_id` required by the `publishNotification()` function:\n\n```javascript\n    const notifyUser = async ({payload}) =\u003e {\n      try {\n        const msg = payload.messages[0];\n        const sender_id = msg.user_id;\n        const sender = await getUser(sender_id);\n    \n        const message = msg.parts[0].content.substr(0, 37) + '...';\n        const order_id = msg.room_id;\n    \n        const user_type = sender.custom_data.user_type;\n    \n        const push_data = push_types[`${user_type}_sent_message`];\n        const title = push_data.title;\n        const body = push_data.body.replace('[data]', message);\n    \n        await publishNotification(user_type, order_id, title, body);\n      } catch (err) {\n        console.log('notify user err: ', err);\n      }\n    };\n```\n\nBefore we proceed to the routes which triggers the notifications, let’s first update the `/login` route to include the `user_type`:\n\n```javascript\n    app.post('/login', async (req, res) =\u003e {\n      const {user_id, user_name, user_type} = req.body; // add user_type\n      const user = await getUser(user_id);\n    \n      if (!user) {\n        await chatkit.createUser({\n          id: user_id,\n          name: user_name,\n          // add this\n          customData: {\n            user_type,\n          },\n        });\n      }\n    \n      return res.send('ok');\n    });\n```\n\nNext, add the route that allows us to trigger push notifications from the app:\n\n```javascript\n    app.post('/room', async (req, res) =\u003e {\n      // ...\n    });\n    \n    app.post('/push/:order_id', async (req, res) =\u003e {\n      const {data, push_type} = req.body;\n      const {order_id} = req.params;\n    \n      const user_type = push_type.split('_')[0];\n    \n      const push_data = push_types[push_type];\n      const title = push_data.title;\n      const body = push_data.body.replace('[data]', data);\n    \n      await publishNotification(user_type, order_id, title, body);\n    \n      return res.send('ok);\n    });\n```\n\nLastly, add the route which handles the Chatkit webhook for new messages:\n\n```javascript\n    app.post('/notify', (req, res) =\u003e {\n      if (verifyRequest(req)) {\n        const data = JSON.parse(req.body);\n        const type = data.metadata.event_type;\n        if (type == 'v1.messages_created') {\n          notifyUser(data);\n        }\n        return res.sendStatus(200);\n      } else {\n        console.log('Unverified request');\n        return res.sendStatus(401); // unauthorized\n      }\n    });\n```\n\n## Running the app\n\nAt this point, you’re now ready to run the app.\n\nReplace the `NGROK_HTTPS_URL` on the `.env` file on both apps then run the app. You can use the same technique we used on part two to run two apps from the same machine.\n\nDon’t forget to update your Chatkit webhook with the ngrok HTTPS URL and the same webhook secret that you added on your `server/.env` file. Also, clear out all existing Chatkit users because they don’t have the `user_type` custom data yet.\n\n\n## Conclusion and next steps\n\nThat’s it! In this series, we created a food ordering app with React Native, Channels, Chatkit, and Beams. Along the way, you learned how to use various React Native packages for implementing maps, realtime location tracking, chat, and push notifications.\n\nAs for the next steps, here are a few ideas for improving the app further:\n\n- **Add authentication** - currently, the usernames are just hard coded. It would be good to have an authentication in place. You can check out this tutorial as a guide: [Using Auth0 for authenticating users in a React Native chat app](https://pusher.com/tutorials/auth0-react-native-chat).\n- **Add a restaurant app** - you might have noticed that there’s really no way for the restaurant to know that someone has ordered a meal from them. You can either create a separate React Native app or simply create a web interface which gets notified everytime an order is received from the app.\n- **Hande order declines** - we’ve only handled the “happy path” in this tutorial. It would be good to handle instances wherein the driver declines an order.\n- **Notify only nearby drivers** - it would be good for the drivers to have a location database which constantly gets updated so that when an order is made, the app will query from this database only the drivers within a certain radius from the customer.\n- **Improve security** - currently, anyone can just have access to the Channels and push notifications route. It would be good to put those behind an authentication.\n\nYou can find the full source code on this [GitHub repo](https://github.com/anchetaWern/React-Native-Food-Delivery).","metaTitle":"Create a food ordering app in React Native - Part 3","metaDescription":"Food ordering apps such as Uber Eats and FoodPanda are a popular way to order from your favorite local restaurant. In this tutorial series, create both the food ordering app and the driving app in React Native. In the third and final part, add push notifications for both the customer and the driver."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1JovnLCE68G2ahOvlpH1bc","type":"Entry","createdAt":"2019-12-10T14:18:07.635Z","updatedAt":"2020-07-24T15:15:06.888Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a food ordering app in React Native - Part 1: Making an order","url":"food-ordering-app-react-native-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/React-Native-Food-Delivery","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"18J5ku8AMG7DNqxzvTy4tW","type":"Entry","createdAt":"2019-06-04T15:37:38.967Z","updatedAt":"2019-06-04T15:37:38.967Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Webhooks","url":"webhooks","type":"use case","featured":false}}],"reviewDate":"2019-10-23","description":"Food ordering apps such as UberEats and FoodPanda are a popular way to order from your favorite local restaurant. In this tutorial series, create both the food ordering app and the driving app. In part 1, create a simplified food ordering app using React Native.","prerequisite":"You will need Node 11.10+, Yarn 1.17+, React Native CLI 2+ and React Native 0.61+ installed on your machine.","content":"Food ordering apps such as Uber Eats and FoodPanda are popular these days as they allow you to conveniently order foods from your favorite local restaurant right from your phone.\n\nIn this tutorial, we’ll take a look at how to create a food ordering app in React Native. We will create the ordering app as well as the driver app.\n\nHere’s a breakdown of what we will be discussing throughout the series:\n\n- Part 1: Making an order\n- Part 2: Adding the driver app and chat functionality\n- Part 3: Adding push notifications\n\n\n## Prerequisites\n\nBasic knowledge of React Native and Node.js is required to follow this tutorial. \n\nWe will use the following package versions:\n\n- Node 11.10.1\n- Yarn 1.17.3\n- React Native CLI 2.0.1\n- React Native 0.61.1\n\nBe sure to use the versions indicated above if you encounter any issues getting the app to run.\n\nYou also need a [Pusher Channels account](https://pusher.com/channels) and an [ngrok account](https://ngrok.com/). We will use Channels to establish a connection between the customer and the driver, while ngrok is for exposing the server to the internet.\n\n\n## App overview\n\nWe will create a simplified version of a food ordering app. First, the user will be greeted with a food list. From here, they can click on any of the items to view the details:\n\n![food-ordering-app-react-native-order-img1](//images.ctfassets.net/1es3ne0caaid/4H5CxcxFowVTYhS7hgnB4d/35534e0b988c0161ab3cf6f7af45e018/food-ordering-app-react-native-order-img1.jpeg)\n\nHere’s what the details screen looks like. This is where they can select the quantity and add the item to the cart. Adding an existing item to the cart will result in incrementing the quantity of the item that’s already in the cart. Note that users can only order from one restaurant at a time:\n\n\n![food-ordering-app-react-native-order-img2](//images.ctfassets.net/1es3ne0caaid/7wdt8dCWjVldYMoJyvChf3/57a05c7b38aa2d174b5c4bbd6c534e39/food-ordering-app-react-native-order-img2.jpeg)\n\nOnce the user is done adding items to their cart, they can click on the **View Basket** button in the header. This will navigate them to the order summary screen. This screen is where all the items they added to their cart is listed along with the amount they need to pay. This is also where they can change their delivery location:\n\n![food-ordering-app-react-native-order-img3](//images.ctfassets.net/1es3ne0caaid/6Wb63IBDpYLsRZhPMNzLyJ/8d464fb1055ff9e55ac253caac122b8b/food-ordering-app-react-native-order-img3.jpeg)\n\nThough Geolocation is used by default to determine the user’s location, if it isn’t accurate then the user can also pick their location:\n\n\n![food-ordering-app-react-native-order-img4](//images.ctfassets.net/1es3ne0caaid/4OuT5La4ISB80WURWJTZ0i/21cb18c2a6b9f574b9012647b1826e00/food-ordering-app-react-native-order-img4.jpeg)\n\nOnce the user is ready, they can click on the **Place Order** button to trigger the app to send a request to a driver. \n\nOnce a driver has accepted their request, the driver’s location is displayed in realtime on the map. The path from the driver to the restaurant and from the restaurant to the user is also indicated on the map:\n\n![food-ordering-app-react-native-order-img5](//images.ctfassets.net/1es3ne0caaid/4IgPgD1jTUf2ShL3q8zaRo/3cdf9e3c0ed501a673d1ecdc837a2c0d/food-ordering-app-react-native-order-img5.jpeg)\n\nYou can find the app’s code on this [GitHub repo](https://github.com/anchetaWern/React-Native-Food-Delivery). The completed code for this part of the series is on the `food-ordering` branch.\n\n\n## Setting up Channels\n\nCreate a new Channels app instance if you haven’t already. Then under the **App Settings** tab, enable client events. This allows us to trigger events right from the app itself:\n\n\n![food-ordering-app-react-native-order-img6](//images.ctfassets.net/1es3ne0caaid/17LEaUfPJtGFb81Tn2FQXe/f24f282a0425361be103b821b0921e21/food-ordering-app-react-native-order-img6.png)\n\n\n## Setting up Google Maps\n\nIn order to use React Native Maps, you first need to set up the Google Maps Platform. Thankfully, this has been covered extensively in the official docs: [Get Started with Google Maps Platform](https://developers.google.com/maps/gmp-get-started).\n\nIf you’re new to it, a highly recommend following the [Quickstart](https://developers.google.com/maps/gmp-get-started#quickstart). This is the fastest way to get up and running because it will automatically configure everything for you. All you need to do is pick the specific Google Maps products that you’re going to need. In this case, we’ll only need Maps and Maps Places. Selecting these will automatically enable the Android, iOS, and Web API of Google Maps and Places for you:\n\n\n![food-ordering-app-react-native-order-img7](//images.ctfassets.net/1es3ne0caaid/2yrT5o9FbomK8xcorNTKTA/1e860c40dad49950b7cd48831614e9ed/food-ordering-app-react-native-order-img7.png)\n\nAfter that, you need to select a project. If you’re new to using any of the Google APIs, you will most likely have a project pre-created already. Just select that project or [follow the instructions on how to create a new one](https://developers.google.com/maps/gmp-get-started#create-project):\n\n\n![food-ordering-app-react-native-order-img8](//images.ctfassets.net/1es3ne0caaid/ZXQWKE4j4iLOJ5U0eL9r6/ababd9a735a7967262ee063d0bc38a96/food-ordering-app-react-native-order-img8.png)\n\nAfter that, the final step is for you to [setup billing](https://developers.google.com/maps/gmp-get-started#create-billing-account).\n\nOnce that’s done, you should be able to view your API keys from the Google Cloud Platform console by clicking on the hamburger icon at the top left of the screen. Then select **APIs \u0026 Services \u003e Credentials**. This will list out all the API keys that you can use for connecting to the Google Maps and Google Maps Places API. Here’s how it looks like:\n\n![food-ordering-app-react-native-order-img9](//images.ctfassets.net/1es3ne0caaid/6eoJQEZ2yiiPHOX3aHMRLk/0b7c78339c45debb08be582a7bba2ea0/food-ordering-app-react-native-order-img9.png)\n\n\n## Bootstrapping the app\n\nThe next step is for us to bootstrap the app. I’ve already prepared a `starter` branch to make it easy for us to proceed with the important parts of the app. This branch contains the code for setting up the navigation as well as the code for the components and styles. \n\nClone the repo and switch to the `starter` branch:\n\n```\n    git clone https://github.com/anchetaWern/React-Native-Food-Delivery.git RNFoodDelivery\n    cd RNFoodDelivery\n    git checkout starter\n```\n\nAfter that, install all the dependencies. Note that this will only install the dependencies for this part of the series. We’ll install the dependencies for each part as we go:\n\n```\n    yarn install\n```\n\nHere’s a what each of the packages are used for:\n\n\n- [**axios**](https://github.com/axios/axios) - for making requests for the list of foods to the server.\n- [**pusher-js**](https://github.com/pusher/pusher-js) - the JavaScript client library for Pusher. We use it as a realtime communication channel between the customer and the driver. This depends on `@react-native-community/netinfo` to determine the network status.\n- [**react-native-config**](https://github.com/luggit/react-native-config) - for reading config in the `.env` files.\n- [**react-navigation**](https://reactnavigation.org/) - for implementing navigation in the app. This depends on `react-navigation-stack`, `react-native-gesture-handler`,  `react-native-reanimated`, and `react-native-gesture-handler`.\n- [**react-native-simple-stepper**](https://github.com/testshallpass/react-native-simple-stepper) - used for rendering a stepper component for selecting the quantity for a specific order item.\n- [**react-native-permissions**](https://github.com/react-native-community/react-native-permissions) - for requesting for permission to access geolocation data.\n- [**react-native-geocoding**](https://github.com/marlove/react-native-geocoding) - for converting coordinates to an actual place name.\n- [**react-native-google-places**](https://github.com/tolu360/react-native-google-places) - for rendering a place picker modal powered by Google Maps Places. \n- [**react-native-geolocation-service**](https://github.com/Agontuk/react-native-geolocation-service) - for getting the geolocation data.\n- [**react-native-maps**](https://github.com/react-native-community/react-native-maps) - for rendering maps and markers.\n- [**react-native-maps-directions**](https://github.com/bramus/react-native-maps-directions) - for drawing a path between two coordinates.\n\nNext, update the `.env` file at the roof of the project directory with your Channels and Google Maps API credentials:\n\n```\n    CHANNELS_APP_KEY=\"YOUR CHANNELS APP KEY\"\n    CHANNELS_APP_CLUSTER=\"YOUR CHANNELS APP CLUSTER\"\n    \n    GOOGLE_API_KEY=\"YOUR GOOGLE API KEY\"\n    \n    NGROK_HTTPS_URL=\"YOUR NGROK HTTPS URL\"\n```\n\nNext, update the  `android/settings.gradle` file to include the native files for the packages that we’re using. We’re not including all of them because most of the packages that we’re using doesn’t have native code and a few others already supports [Autolinking](https://github.com/react-native-community/cli/blob/master/docs/autolinking.md):\n\n```javascript\n    rootProject.name = 'RNFoodDelivery'\n    \n    // add these:\n    include ':react-native-permissions'\n    project(':react-native-permissions').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-permissions/android')\n    \n    include ':react-native-config'\n    project(':react-native-config').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-config/android')\n    include ':react-native-google-places'\n    project(':react-native-google-places').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-google-places/android')\n```\n\nNext, update the `android/app/build.gradle` file:\n\n```javascript\n    apply plugin: \"com.android.application\"\n    \n    apply from: project(':react-native-config').projectDir.getPath() + \"/dotenv.gradle\" // add this\n```\n\nStill on the same file, look for the `dependencies` and add the following:\n\n```javascript\n    dependencies {\n      implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\n      implementation \"com.facebook.react:react-native:+\"  // From node_modules\n      \n      // add these (for various dependencies)\n      implementation project(':react-native-config')\n      implementation project(':react-native-google-places')\n      implementation project(':react-native-permissions')\n    \n      // add these (for react-navigation):\n      implementation 'androidx.appcompat:appcompat:1.1.0-rc01'\n      implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0-alpha02'\n      \n    }\n```\n\nNext, update the `android/app/src/main/AndroidManifest.xml` file and include the permissions that we need. `ACCESS_NETWORK_STATE` is used by Channels to determine if the user is currently connected to the internet. While `ACCESS_FINE_LOCATION` is used for getting the user’s current location:\n\n```xml\n    \u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      package=\"com.rnfooddelivery\"\u003e\n      \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n    \n      \u003c!-- add these --\u003e\n      \u003cuses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/\u003e\n      \u003cuses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" /\u003e\n      ...\n    \u003c/manifest\u003e\n```\n\nStill on the same file, under `\u003capplication\u003e`, add your Google API key config. This is required by React Native Maps in order to use Google Maps:\n\n```xml\n    \u003capplication\u003e\n      \u003cmeta-data\n        android:name=\"com.google.android.geo.API_KEY\"\n        android:value=\"YOUR GOOGLE API KEY\" /\u003e\n    \u003c/application\u003e\n```\n\n## Coding the ordering app\n\nAt this point, we’re now ready to start coding the app. As mentioned earlier, the navigation and styles have already been pre-coded. All we have to do now is add the code for the individual screens.\n\n### FoodList screen\nFirst, we’ll go through the code for the FoodList screen. This screen displays the list of foods that are available for order from each of the restaurants that uses the app. Nothing too complex here. All we do is request the data from the server. As you’ll see later, the list of foods is also hard-coded.\n\nOpen the `src/screens/FoodList.js` file and add the following. If you’ve used React Native for a while, you should feel right at home. Basically, we’re just creating a list using the `FlatList` component and then filtering it by whatever the user has entered in the `TextInput`. The `navigationOptions` allows us to specify the settings for the navigation header for the current page. In this case, we include the `title` and a `Button` in the header for navigating to the **OrderSummary** screen. The React Navigation library takes care of these for us:\n\n```javascript\n    // src/screens/FoodList.js\n    import React, {Component} from 'react';\n    import {View, Text, Button, TextInput, FlatList, StyleSheet} from 'react-native';\n    import axios from 'axios';\n    import Config from 'react-native-config';\n    \n    import NavHeaderRight from '../components/NavHeaderRight';\n    import ListCard from '../components/ListCard';\n    \n    const BASE_URL = Config.NGROK_HTTPS_URL;\n    \n    class FoodList extends Component {\n      static navigationOptions = ({navigation}) =\u003e {\n        return {\n          title: 'Hungry?',\n          headerRight: \u003cNavHeaderRight /\u003e,\n        };\n      };\n    \n      state = {\n        foods: [], // list of foods to be rendered on the screen\n        query: '',\n      };\n    \n      async componentDidMount() {\n        // fetch the array of foods from the server\n        const foods_response = await axios.get('${BASE_URL}/foods');\n        this.setState({\n          foods: foods_response.data.foods,\n        });\n      }\n    \n      render() {\n        const {foods, query} = this.state;\n        return (\n          \u003cView style={styles.wrapper}\u003e\n            \u003cView style={styles.topWrapper}\u003e\n              \u003cView style={styles.textInputWrapper}\u003e\n                \u003cTextInput\n                  style={styles.textInput}\n                  onChangeText={this.onChangeQuery}\n                  value={query}\n                  placeholder={'What are you craving for?'}\n                /\u003e\n              \u003c/View\u003e\n    \n              \u003cView style={styles.buttonWrapper}\u003e\n                \u003cButton\n                  onPress={() =\u003e this.filterList()}\n                  title=\"Go\"\n                  color=\"#c53c3c\"\n                /\u003e\n              \u003c/View\u003e\n            \u003c/View\u003e\n    \n            \u003cFlatList\n              data={foods}\n              renderItem={this.renderFood}\n              contentContainerStyle={styles.list}\n              keyExtractor={item =\u003e item.id.toString()}\n            /\u003e\n          \u003c/View\u003e\n        );\n      }\n    \n      onChangeQuery = text =\u003e {\n        this.setState({\n          query: text,\n        });\n      };\n    \n      filterList = async () =\u003e {\n        // filter the list of foods by supplying a query\n        const {query} = this.state;\n        const foods_response = await axios.get(`${BASE_URL}/foods?query=${query}`);\n    \n        this.setState({\n          foods: foods_response.data.foods,\n          query: '',\n        });\n      };\n    \n      viewItem = item =\u003e {\n        // navigate to the FoodDetails screen\n        this.props.navigation.navigate('FoodDetails', {\n          item,\n        });\n      };\n    \n      renderFood = ({item}) =\u003e {\n        return \u003cListCard item={item} viewItem={this.viewItem} /\u003e;\n      };\n    }\n    \n    // \u003cpre-coded styles here..\u003e\n    \n    export default FoodList;\n```\n\n### FoodDetails screen\nNext, let’s go through the code for the FoodDetails screen. This screen shows all the details for a specific food. It also allows the user to select the quantity to be ordered and add them to the cart. The `PageCard` component is used for rendering the entirety of the screen. All we do is supply it with the necessary props. The most relevant function here is the function for adding the item to the cart. This implements the rule that the user can only order foods from a single restaurant for each order. But the `addToCart()` method from `this.context` is the one that actually adds it to the cart. We’ll walk through what this context is shortly. For now, know that this uses [React’s Context API](https://reactjs.org/docs/context.html) to create a global app context for storing data and function that we need throughout the app:\n\n```javascript\n    // src/screens/FoodDetails.js\n    import React, {Component} from 'react';\n    import {View, Button, Alert} from 'react-native';\n    \n    import NavHeaderRight from '../components/NavHeaderRight';\n    import PageCard from '../components/PageCard';\n    \n    import {AppContext} from '../../GlobalContext';\n    \n    class FoodDetails extends Component {\n      static navigationOptions = ({navigation}) =\u003e {\n        return {\n          title: navigation.getParam('item').name.substr(0, 12) + '...',\n          headerRight: \u003cNavHeaderRight /\u003e,\n        };\n      };\n    \n      static contextType = AppContext; // set this.context to the global app context\n    \n      state = {\n        qty: 1,\n      };\n    \n      constructor(props) {\n        super(props);\n        const {navigation} = this.props;\n        this.item = navigation.getParam('item'); // get the item passed from the FoodList screen\n      }\n    \n      qtyChanged = value =\u003e {\n        const nextValue = Number(value);\n        this.setState({qty: nextValue});\n      };\n    \n      addToCart = (item, qty) =\u003e {\n        // prevent the user from adding items with different restaurant ids\n        const item_id = this.context.cart_items.findIndex(\n          el =\u003e el.restaurant.id !== item.restaurant.id,\n        );\n        if (item_id === -1) {\n          Alert.alert(\n            'Added to basket',\n            `${qty} ${item.name} was added to the basket.`,\n          );\n          this.context.addToCart(item, qty); // call addToCart method from global app context\n        } else {\n          Alert.alert(\n            'Cannot add to basket',\n            'You can only order from one restaurant for each order.',\n          );\n        }\n      };\n    \n      render() {\n        const {qty} = this.state;\n        return (\n          \u003cPageCard\n            item={this.item}\n            qty={qty}\n            qtyChanged={this.qtyChanged}\n            addToCart={this.addToCart}\n          /\u003e\n        );\n      }\n    }\n    \n    export default FoodDetails;\n```\n\n### GlobalContext\nAs mentioned earlier, we’re using the React Context API to create a global context in which we store data and function that we need throughout the app. This allows us to avoid common problems when working with state such as [prop drilling](https://kentcdodds.com/blog/prop-drilling/). All without having to use full-on state management libraries like Redux or MobX. \n\nIn this case, we need to make the cart items as well as the function for adding items available in the global app context. To do that, we create a context and export it. Then we create an `AppContextProvider` component. This will serve as a wrapper for the higher-order component that we’re going to create shortly. Thus, it is where we initialize the global state and include the function for adding items to the cart. The `addToCart()` method contains the logic that checks whether an item has already been added to the cart. If it is, then it will simply add the supplied quantity to the existing item:\n\n```javascript\n    // GlobalContext.js\n    import React from 'react';\n    import {withNavigation} from 'react-navigation';\n    export const AppContext = React.createContext({}); // create a context\n    \n    export class AppContextProvider extends React.Component {\n      state = {\n        cart_items: [],\n    \n        user_id: 'wernancheta',\n        user_name: 'Wern Ancheta',\n      };\n    \n      constructor(props) {\n        super(props);\n      }\n    \n      addToCart = (item, qty) =\u003e {\n        let found = this.state.cart_items.filter(el =\u003e el.id === item.id);\n        if (found.length == 0) {\n          this.setState(prevState =\u003e {\n            return {cart_items: prevState.cart_items.concat({...item, qty})};\n          });\n        } else {\n          this.setState(prevState =\u003e {\n            const other_items = prevState.cart_items.filter(\n              el =\u003e el.id !== item.id,\n            );\n            return {\n              cart_items: [...other_items, {...found[0], qty: found[0].qty + qty}],\n            };\n          });\n        }\n      };\n    \n      // next: add render()\n    }\n    \n    // last: export components\n```\n\nHere’s the `render()` method. This is where we use the [Context Provider](https://reactjs.org/docs/context.html#contextprovider) component to allow consuming components to subscribe to context value changes. The value is specified via the `value` prop. Using the Context Provider allows us to automatically re-render the consuming components everytime the value changes. In this case, we’re destructuring whatever is in the state and add the `addToCart()` method:\n\n```javascript\n    render() {\n      return (\n        \u003cAppContext.Provider\n          value={{\n            ...this.state,\n            addToCart: this.addToCart,\n          }}\u003e\n          {this.props.children}\n        \u003c/AppContext.Provider\u003e\n      );\n    }\n```\n\nOnce that’s done, we can now create the actual [higher-order component](https://reactjs.org/docs/higher-order-components.html) and use the `AppContextProvider` to wrap whatever component will be passed to it:\n\n```javascript\n    export const withAppContextProvider = ChildComponent =\u003e props =\u003e (\n      \u003cAppContextProvider\u003e\n        \u003cChildComponent {...props} /\u003e\n      \u003c/AppContextProvider\u003e\n    );\n```\n\n\u003e If you’re having difficulty wrapping your head around higher-order components in React. Be sure to check out this article: [How to develop your React superpowers with the HOC Pattern](https://www.freecodecamp.org/news/how-to-develop-your-react-superpowers-with-the-hoc-pattern-61293651d59/).\n\n### index.js\nTo use the higher-order component that we just created, open the `index.js` file at the root of the project directory then wrap the main `App` component with the `withAppContextProvider`:\n\n```javascript\n    // index.js\n    import {AppRegistry} from 'react-native';\n    import App from './App';\n    import {name as appName} from './app.json';\n    import {withAppContextProvider} from './GlobalContext'; // add this\n    \n    AppRegistry.registerComponent(appName, () =\u003e withAppContextProvider(App)); // wrap App withAppContextProvider\n```\n\nNote that this doesn’t automatically provide us with whatever state is in the `AppContextProvider` component. As you’ve seen in the `src/screens/FoodDetails.js` file earlier, we had to include the `AppContext`:\n\n```javascript\n    import {AppContext} from '../../GlobalContext';\n```\n\nThen inside the component class, we had to set the `contextType` to the `AppContext`:\n\n```javascript\n    class FoodDetails extends Component {\n      static contextType = AppContext; \n      // ...\n    }\n```\n\nThis allowed us to access any of the values that were passed in the Context Provider component via `this.context`:\n\n```javascript\n    this.context.cart_items;\n    this.context.addToCart(item, qty);\n```\n\n### OrderSummary screen\nNext, let’s proceed with the OrderSummary screen. This screen displays the items added to the cart and the payment breakdown. It also allows the user to change their delivery location. \n\nStart by importing and initializing the packages we need:\n\n```javascript\n    // src/screens/OrderSummary.js\n    import React, {Component} from 'react';\n    import {\n      View,\n      Text,\n      Button,\n      TouchableOpacity,\n      FlatList,\n      StyleSheet,\n    } from 'react-native';\n    import MapView from 'react-native-maps';\n    import RNGooglePlaces from 'react-native-google-places';\n    import {check, request, PERMISSIONS, RESULTS} from 'react-native-permissions';\n    \n    import Geolocation from 'react-native-geolocation-service';\n    import Geocoder from 'react-native-geocoding';\n    import Config from 'react-native-config';\n    \n    import {AppContext} from '../../GlobalContext';\n    \n    import getSubTotal from '../helpers/getSubTotal';\n    \n    import {regionFrom} from '../helpers/location';\n    \n    const GOOGLE_API_KEY = Config.GOOGLE_API_KEY;\n    \n    Geocoder.init(GOOGLE_API_KEY);\n```\n\nNext, create the component class and initialize the state:\n\n```javascript\n    class OrderSummary extends Component {\n      static navigationOptions = {\n        title: 'Order Summary',\n      };\n    \n      static contextType = AppContext;\n    \n      state = {\n        customer_address: '',\n        customer_location: null,\n        restaurant_address: '',\n        restaurant_location: null,\n      };\n    \n      // next: add componentDidMount\n    }\n```\n\nOnce the component is mounted, we check for the location permissions using the \n[React Native Permissions library](https://github.com/react-native-community/react-native-permissions). If the permission is `denied`, it means that it has not been requested (or is denied but still requestable) so we request for it from the user. If the user agrees, the permission becomes `granted`. From there, we get the user’s current location using the [React Native Geolocation Services library](https://github.com/Agontuk/react-native-geolocation-service). To get the name of the place, we use the [React Native Geocoding library](https://github.com/marlove/react-native-geocoding) to transform the coordinates that we got back. The `regionFrom()` function gives us an object which we can supply to React Native Maps to render the location in the map. This function is included in the `starter` branch:\n\n```javascript\n    let location_permission = await check(\n      PERMISSIONS.ANDROID.ACCESS_FINE_LOCATION,\n    );\n    \n    if (location_permission === 'denied') {\n      location_permission = await request(\n        PERMISSIONS.ANDROID.ACCESS_FINE_LOCATION,\n      );\n    }\n    \n    if (location_permission == 'granted') {\n      Geolocation.getCurrentPosition(\n        async position =\u003e {\n          const geocoded_location = await Geocoder.from(\n            position.coords.latitude,\n            position.coords.longitude,\n          );\n    \n          let customer_location = regionFrom(\n            position.coords.latitude,\n            position.coords.longitude,\n            position.coords.accuracy,\n          );\n    \n          this.setState({\n            customer_address: geocoded_location.results[0].formatted_address,\n            customer_location,\n          });\n        },\n        error =\u003e {\n          console.log(error.code, error.message);\n        },\n        {\n          enableHighAccuracy: true,\n          timeout: 15000,\n          maximumAge: 10000,\n        },\n      );\n    }\n    \n    // next: add render()\n```\n\nHere’s the `render()` method:\n\n```javascript\n    render() {\n      const subtotal = getSubTotal(this.context.cart_items);\n      const {customer_address, customer_location} = this.state;\n    \n      return (\n        \u003cView style={styles.wrapper}\u003e\n          \u003cView style={styles.addressSummaryContainer}\u003e\n            {customer_location \u0026\u0026 (\n              \u003cView style={styles.mapContainer}\u003e\n                \u003cMapView style={styles.map} initialRegion={customer_location} /\u003e\n              \u003c/View\u003e\n            )}\n    \n            \u003cView style={styles.addressContainer}\u003e\n              {customer_address != '' \u0026\u0026\n                this.renderAddressParts(customer_address)}\n    \n              \u003cTouchableOpacity\n                onPress={() =\u003e {\n                  this.openPlacesSearchModal();\n                }}\u003e\n                \u003cView style={styles.linkButtonContainer}\u003e\n                  \u003cText style={styles.linkButton}\u003eChange location\u003c/Text\u003e\n                \u003c/View\u003e\n              \u003c/TouchableOpacity\u003e\n            \u003c/View\u003e\n          \u003c/View\u003e\n          \u003cView style={styles.cartItemsContainer}\u003e\n            \u003cFlatList\n              data={this.context.cart_items}\n              renderItem={this.renderCartItem}\n              keyExtractor={item =\u003e item.id.toString()}\n            /\u003e\n          \u003c/View\u003e\n    \n          \u003cView style={styles.lowerContainer}\u003e\n            \u003cView style={styles.spacerBox} /\u003e\n    \n            {subtotal \u003e 0 \u0026\u0026 (\n              \u003cView style={styles.paymentSummaryContainer}\u003e\n                \u003cView style={styles.endLabelContainer}\u003e\n                  \u003cText style={styles.priceLabel}\u003eSubtotal\u003c/Text\u003e\n                  \u003cText style={styles.priceLabel}\u003eBooking fee\u003c/Text\u003e\n                  \u003cText style={styles.priceLabel}\u003eTotal\u003c/Text\u003e\n                \u003c/View\u003e\n    \n                \u003cView\u003e\n                  \u003cText style={styles.price}\u003e${subtotal}\u003c/Text\u003e\n                  \u003cText style={styles.price}\u003e$5\u003c/Text\u003e\n                  \u003cText style={styles.price}\u003e${subtotal + 5}\u003c/Text\u003e\n                \u003c/View\u003e\n              \u003c/View\u003e\n            )}\n          \u003c/View\u003e\n    \n          {subtotal == 0 \u0026\u0026 (\n            \u003cView style={styles.messageBox}\u003e\n              \u003cText style={styles.messageBoxText}\u003eYour cart is empty\u003c/Text\u003e\n            \u003c/View\u003e\n          )}\n    \n          {subtotal \u003e 0 \u0026\u0026 (\n            \u003cView style={styles.buttonContainer}\u003e\n              \u003cButton\n                onPress={() =\u003e this.placeOrder()}\n                title=\"Place Order\"\n                color=\"#c53c3c\"\n              /\u003e\n            \u003c/View\u003e\n          )}\n        \u003c/View\u003e\n      );\n    }\n```\n\nHere’s the `renderAddressParts()` method. All it does is render the individual parts of the address (street address, town name, etc.):\n\n```javascript\n    renderAddressParts = customer_address =\u003e {\n      return customer_address.split(',').map((addr_part, index) =\u003e {\n        return (\n          \u003cText key={index} style={styles.addressText}\u003e\n            {addr_part}\n          \u003c/Text\u003e\n        );\n      });\n    };\n```\n\nWhen the user clicks on the **Change location** button link, we use the [React Native Google Places library](https://github.com/tolu360/react-native-google-places) to open a model which allows the user to pick a place. Note that this already gives us the actual name of the place so we don’t need to use the Geocoding library again:\n\n```javascript\n    openPlacesSearchModal = async () =\u003e {\n      try {\n        const place = await RNGooglePlaces.openAutocompleteModal(); // open modal for picking a place\n    \n        const customer_location = regionFrom(\n          place.location.latitude,\n          place.location.longitude,\n          16, // accuracy\n        );\n    \n        this.setState({\n          customer_address: place.address,\n          customer_location,\n        });\n      } catch (err) {\n        console.log('err: ', err);\n      }\n    };\n```\n\nHere’s the `renderCartItem()` method:\n\n```javascript\n    renderCartItem = ({item}) =\u003e {\n      return (\n        \u003cView style={styles.cartItemContainer}\u003e\n          \u003cView\u003e\n            \u003cText style={styles.priceLabel}\u003e\n              {item.qty}x {item.name}\n            \u003c/Text\u003e\n          \u003c/View\u003e\n          \u003cView\u003e\n            \u003cText style={styles.price}\u003e${item.price}\u003c/Text\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    };\n```\n\nHere’s the `placeOrder()` method. This extracts the customer location (coordinates) and address from the state, as well as the restaurant location and address from the context. We know that the user can only order from one restaurant, so we can simply get the first item and be assured that it’s the same for all the other items in the cart. Once we have all the required data, we simply pass it as a navigation param to the TrackOrder screen:\n\n```javascript\n    placeOrder = () =\u003e {\n      const {customer_location, customer_address} = this.state;\n    \n      const {\n        address: restaurant_address,\n        location: restaurant_location,\n      } = this.context.cart_items[0].restaurant; // get the address and location of the restaurant\n    \n      this.props.navigation.navigate('TrackOrder', {\n        customer_location,\n        restaurant_location,\n        customer_address,\n        restaurant_address,\n      });\n    };\n```\n\n### TrackOrder screen\nNext, we now proceed to the TrackOrder screen. This is where the user can keep track of the progress of their order via a map interface. The map displays markers for their location, the restaurant’s location, and the driver’s location. It also displays the path between those locations.\n\nStart by importing the packages we need:\n\n```javascript\n    // src/screens/TrackOrder.js\n    import React, {Component} from 'react';\n    import {View, Text, Button, Alert, StyleSheet} from 'react-native';\n    \n    import MapView from 'react-native-maps';\n    import Geolocation from 'react-native-geolocation-service';\n    import MapViewDirections from 'react-native-maps-directions';\n    import Pusher from 'pusher-js/react-native';\n    \n    import Config from 'react-native-config';\n    \n    const CHANNELS_APP_KEY = Config.CHANNELS_APP_KEY;\n    const CHANNELS_APP_CLUSTER = Config.CHANNELS_APP_CLUSTER;\n    const CHANNELS_AUTH_SERVER = 'YOUR NGROK HTTPS URL/pusher/auth';\n    \n    const GOOGLE_API_KEY = Config.GOOGLE_API_KEY;\n    \n    import {regionFrom} from '../helpers/location';\n    import {AppContext} from '../../GlobalContext';\n```\n\nNext, add the array which contains the status messages for the order. Each of these items will be displayed as the driver updates the order status on their side:\n\n```javascript\n    const orderSteps = [\n      'Finding a driver',\n      'Driver is on the way to pick up your order',\n      'Driver has picked up your order and is on the way to deliver it',\n      'Driver has delivered your order',\n    ];\n```\n\nNext, create the component class and initialize the state:\n\n```javascript\n    class TrackOrder extends Component {\n      static navigationOptions = ({navigation}) =\u003e {\n        return {\n          title: 'Track Order',\n        };\n      };\n    \n      static contextType = AppContext;\n    \n      state = {\n        isSearching: true, // whether the app is still searching for a driver\n        hasDriver: false, // whether there's already a driver assigned to the order\n        driverLocation: null, // the coordinates of the driver's location\n        orderStatusText: orderSteps[0], // display the first message by default\n      };\n    \n      // next: add the constructor()\n    }\n```\n\nIn the constructor, get the navigation params that we passed earlier from the OrderSummary screen. After that, initialize the instance variables that we will be using:\n\n```javascript\n    constructor(props) {\n      super(props);\n    \n      this.customer_location = this.props.navigation.getParam(\n        'customer_location',\n      ); // customer's location\n      this.restaurant_location = this.props.navigation.getParam(\n        'restaurant_location',\n      );\n    \n      this.customer_address = this.props.navigation.getParam('customer_address');\n      this.restaurant_address = this.props.navigation.getParam(\n        'restaurant_address',\n      );\n    \n      this.available_drivers_channel = null; // the pusher channel where all drivers and customers are subscribed to\n      this.user_ride_channel = null; // the pusher channel exclusive to the customer and driver in a given order\n      this.pusher = null; // pusher client\n    }\n    \n    // next: add componentDidMount()\n```\n\nOn `componentDidMount()` is where we initialize the Pusher client and subscribe to the channel where we can look for available drivers. Once subscribed, we trigger an event to request for a driver. We’re putting it inside `setTimeout()` to ensure that the connection has really been initialized properly. The event contains all the relevant information that we got from the previous screen:\n\n```javascript\n    componentDidMount() {\n      this.setState({\n        isSearching: true, \n      });\n    \n      this.pusher = new Pusher(CHANNELS_APP_KEY, {\n        authEndpoint: CHANNELS_AUTH_SERVER,\n        cluster: CHANNELS_APP_CLUSTER,\n        encrypted: true,\n      });\n    \n      this.available_drivers_channel = this.pusher.subscribe(\n        'private-available-drivers',\n      );\n    \n      this.available_drivers_channel.bind('pusher:subscription_succeeded', () =\u003e {\n        // make a request to all drivers\n        setTimeout(() =\u003e {\n          this.available_drivers_channel.trigger('client-driver-request', {\n            customer: {username: this.context.user_id},\n            restaurant_location: this.restaurant_location,\n            customer_location: this.customer_location,\n            restaurant_address: this.restaurant_address,\n            customer_address: this.customer_address,\n          });\n        }, 2000);\n      });\n    \n      // next: subscribe to user-ride channel\n    }\n```\n\n\u003e **Note**: This is an overly simplified driver request logic. In a production app, you will need to filter the drivers so that the only one’s who receives the request are the one’s that are nearby the restaurant and the customer. The code above basically sends a request to all of the drivers.\n\nNext, we subscribe to the current user’s own channel. This will be the means of communication between the driver (the one who responded to their request) and the customer. We listen for the `client-driver-response` event to be triggered from the driver’s side. When this happens, we send back a `yes` or `no` response. If the customer hasn’t found a driver yet, then we send a `yes`, otherwise `no`. Once the driver receives a `yes` response, they trigger the `client-found-driver` event on their side. This is then received by the customer and uses it to update the state with the driver’s location:\n\n```javascript\n    this.user_ride_channel = this.pusher.subscribe(\n      'private-ride-' + this.context.user_id,\n    );\n    \n    this.user_ride_channel.bind('client-driver-response', data =\u003e {\n      // customer responds to driver's response\n      this.user_ride_channel.trigger('client-driver-response', {\n        response: this.state.hasDriver ? 'no' : 'yes',\n      });\n    });\n    \n    this.user_ride_channel.bind('client-found-driver', data =\u003e {\n      // found driver, the customer has no say about this.\n      const driverLocation = regionFrom(\n        data.location.latitude,\n        data.location.longitude,\n        data.location.accuracy,\n      );\n    \n      this.setState({\n        hasDriver: true,\n        isSearching: false,\n        driverLocation,\n      });\n    \n      Alert.alert(\n        'Driver found',\n        \"We found you a driver. They're on their way to pick up your order.\",\n      );\n    });\n    \n    // next: subscribe to driver location change\n```\n\nAs the driver goes to process the order, their location is constantly watched and sent to the customer via the `client-driver-location` event. We use this to update the marker on the map which represents the driver’s location:\n\n```javascript\n    this.user_ride_channel.bind('client-driver-location', data =\u003e {\n      // driver location received\n      let driverLocation = regionFrom(\n        data.latitude,\n        data.longitude,\n        data.accuracy,\n      );\n      \n      // update the marker representing the driver's current location\n      this.setState({\n        driverLocation,\n      });\n    });\n```\n\nNext, listen for the `client-order-update` event. This uses the `step` value to update the order status. When the driver accepts an order, step `1` is sent. When the driver receives the order from the restaurant, they need to click a button to trigger step `2` to be sent, and so on:\n\n```javascript\n    this.user_ride_channel.bind('client-order-update', data =\u003e {\n      this.setState({\n        orderStatusText: orderSteps[data.step],\n      });\n    });\n```\n\nHere’s the `render()` method:\n\n```javascript\n    render() {\n      const {driverLocation, orderStatusText} = this.state;\n    \n      return (\n        \u003cView style={styles.wrapper}\u003e\n          \u003cView style={styles.infoContainer}\u003e\n            \u003cText style={styles.infoText}\u003e{orderStatusText}\u003c/Text\u003e\n    \n            \u003cButton\n              onPress={() =\u003e this.contactDriver()}\n              title=\"Contact driver\"\n              color=\"#c53c3c\"\n            /\u003e\n          \u003c/View\u003e\n    \n          \u003cView style={styles.mapContainer}\u003e\n            \u003cMapView\n              style={styles.map}\n              zoomControlEnabled={true}\n              initialRegion={this.customer_location}\u003e\n              \u003cMapView.Marker\n                coordinate={{\n                  latitude: this.customer_location.latitude,\n                  longitude: this.customer_location.longitude,\n                }}\n                title={'Your location'}\n              /\u003e\n    \n              {driverLocation \u0026\u0026 (\n                \u003cMapView.Marker\n                  coordinate={driverLocation}\n                  title={'Driver location'}\n                  pinColor={'#6f42c1'}\n                /\u003e\n              )}\n    \n              \u003cMapView.Marker\n                coordinate={{\n                  latitude: this.restaurant_location[0],\n                  longitude: this.restaurant_location[1],\n                }}\n                title={'Restaurant location'}\n                pinColor={'#4CDB00'}\n              /\u003e\n    \n              {driverLocation \u0026\u0026 (\n                \u003cMapViewDirections\n                  origin={driverLocation}\n                  destination={{\n                    latitude: this.restaurant_location[0],\n                    longitude: this.restaurant_location[1],\n                  }}\n                  apikey={GOOGLE_API_KEY}\n                  strokeWidth={3}\n                  strokeColor=\"hotpink\"\n                /\u003e\n              )}\n    \n              \u003cMapViewDirections\n                origin={{\n                  latitude: this.restaurant_location[0],\n                  longitude: this.restaurant_location[1],\n                }}\n                destination={{\n                  latitude: this.customer_location.latitude,\n                  longitude: this.customer_location.longitude,\n                }}\n                apikey={GOOGLE_API_KEY}\n                strokeWidth={3}\n                strokeColor=\"#1b77fb\"\n              /\u003e\n            \u003c/MapView\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\n### Channels authentication server\nNow let’s proceed with the authentication server.  Start by updating the `server/.env` file with your Channels app instance credentials:\n\n```\n    PUSHER_APP_ID=\"YOUR PUSHER APP ID\"\n    PUSHER_APP_KEY=\"YOUR PUSHER APP KEY\"\n    PUSHER_APP_SECRET=\"YOUR PUSHER APP SECRET\"\n    PUSHER_APP_CLUSTER=\"YOUR PUSHER APP CLUSTER\"\n```\n\nNext, import the packages we need:\n\n```javascript\n    // server/index.js\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const cors = require('cors');\n    \n    const Pusher = require('pusher');\n```\n\nInitialize the Node.js client for Channels:\n\n```javascript\n    var pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n    });\n```\n\nImport the [foods data](https://github.com/anchetaWern/React-Native-Food-Delivery/blob/master/server/data/foods.js). This contains all of the data about a specific food that we’re going to need:\n\n```javascript\n    const {foods} = require('./data/foods.js');\n```\n\nNext, initialize the Express server with the request body parsers and CORS plugin. Also, set the static files location to the `images` folder. This allows us to serve the images from the `/images` path:\n\n```javascript\n    const app = express();\n    app.use(bodyParser.urlencoded({extended: false}));\n    app.use(bodyParser.json());\n    app.use(cors());\n    app.use('/images', express.static('images'));\n```\n\nNext, add the route for authenticating the users. The Channels client on the app makes a request to this route when it initializes the connection. This allows the user to trigger events directly from the client side. Note that this will authenticate the users immediately. This is only to simplify things. On a production app, you have to include your authentication code to check if the user who made the request is really a user of your app:\n\n```javascript\n    app.post('/pusher/auth', function(req, res) {\n      var socketId = req.body.socket_id;\n      var channel = req.body.channel_name;\n      var auth = pusher.authenticate(socketId, channel); // authenticate the request\n      res.send(auth);\n    });\n```\n\nLastly, expose the server:\n\n```javascript\n    const PORT = 5000;\n    app.listen(PORT, err =\u003e {\n      if (err) {\n        console.error(err);\n      } else {\n        console.log(`Running on ports ${PORT}`);\n      }\n    });\n```\n\n## Running the app\n\nAt this point we’re now ready to run the app. Start by running the server and exposing it via ngrok:\n\n```\n    node server/index.js\n    ~/Downloads/ngrok http 5000\n```\n\nThen update the `.env` file with your HTTPS URL.\n\nFinally, run the app:\n\n```\n    react-native run-android\n```\n\nAs we haven’t created the driver app yet, you’ll only be able to test out the first three screens. The TrackOrder screen can only be tested once we create the driver app on the second part of this series.\n\n\n## Conclusion\n\nThat’s it for the first part of this series. In this part, you learned how to create a very simple food ordering app using React Native. Specifically, you learned how to use various packages for easily implementing such app. We used React Native Maps to indicate the user’s, restaurant’s, and driver’s location on the map. Then we used React Native Maps Directions to indicate the path between those points.\n\nStay tuned for part two where we will add the code for the driver app and feature for contacting the driver.\n\nYou can find the app’s code on this [GitHub repo](https://github.com/anchetaWern/React-Native-Food-Delivery).","metaTitle":"Create a food ordering app in React Native - Part 1","metaDescription":"Food ordering apps such as Uber Eats and FoodPanda are a popular way to order from your favorite local restaurant. In this tutorial series, create both the food ordering app and the driving app. In part 1, create a simplified food ordering app using React Native."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4tnVobCeeIMgETJigNn4jp","type":"Entry","createdAt":"2019-05-21T09:35:06.054Z","updatedAt":"2019-05-21T15:25:57.413Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a login approval system - Part 3: Building the approval app","url":"login-approval-laravel-ios-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/realtime-login-approval-system","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}}],"reviewDate":"2019-05-21","description":"This three part series will walk you through building a simple login approval system. Create a dashboard behind a login with Laravel, and an iOS app. When a user tries to log in to the web dashboard, they receive an iOS notification to approve or deny the login. In part three, build the iOS app.","prerequisite":"You will need Xcode 10.x+ and Laravel 5.x+ installed on your machine.","content":"In the [previous part](https://pusher.com/tutorials/login-approval-laravel-ios-part-2), we implemented the login logic and triggered events to the Pusher Channels and Pusher Beams API when login was completed and authorized. We will, however, need a client to consume the events. This is where the iOS application comes in.\n\nIn this final part, we will be creating an iOS application that will we will use to approve login requests to our dashboard.\n\nHere’s a screen recording to show how it will work:\n\n![laravel-ios-login-3-1](//images.ctfassets.net/1es3ne0caaid/3BSAU6psozwu7Lddvq6rPW/3650839328b882dde22641b2d657a49b/laravel-ios-login-3-1.gif)\n\n\n## Requirements\n\nTo build this system, we need the following requirements:\n\n- [Xcode](https://developer.apple.com/xcode) 10.x installed on your local machine.\n- Knowledge of the Xcode IDE.\n- [Laravel](https://laravel.com/docs/5.8/installation#installation) v5.x installed on your local machine.\n- Knowledge of the [Laravel](https://laravel.com) PHP framework.\n- Knowledge of the [Swift](https://developer.apple.com/swift) programming language.\n- A Pusher Beams application. Create one [here](https://pusher.com/beams).\n- A Pusher Channels application. Create one [here](https://pusher.com/channels).\n- CocoaPods [installed](https://guides.cocoapods.org/using/getting-started.html) on your local machine.\n\nIf you have these requirements, let’s get started.\n\n\n## Creating the iOS application\n\nCreate a new single project in Xcode and name it whatever you wish, for example, dashboard. Open the terminal and `cd` to the location of your iOS project and then run the following command:\n\n```\n    $ pod init\n```\n\nOpen the created `Podfile` and add a new pod to the list of pods:\n\n```\n    pod 'PushNotifications', '~\u003e 1.2.0'\n    pod 'PusherSwift', '~\u003e 6.1'\n    pod 'Alamofire', '~\u003e 4.8.2'\n```\n\nNext, in the terminal, run the following command to install the dependencies we just added to the `Podfile`:\n\n```\n    $ pod install --repo-update\n```\n\nWhen the installation is complete, close Xcode and open the newly generated `.xcworkspace` file in the project root. This will relaunch Xcode.\n\n\n## Designing the application\n\nThe application will be a simple one with two scenes. The first scene will be the default state when there are no approvals pending and the second state will be the approval pending state.\n\nThis is what the scenes will look like:\n\n![laravel-ios-login-3-2](//images.ctfassets.net/1es3ne0caaid/6Qx1ZTikudNLGtyPPeHXat/9236e1be716ffe5e1b52d9eca78a5345/laravel-ios-login-3-2.png)\n\nThe scenes are designed with images from [undraw.co](https://undraw.co). Few things to note about the storyboard are:\n\n- There is a manual segue with identifier `approval_window` that is presented modally.\n- The first scene is connected to a `ViewController` class.\n- The second scene is connected to a `ApproveViewController` class. You will need to create one.\n- The **APPROVE** and **DENY** buttons have an `@IBAction` each for touch inside events.\n\nWhen you are done designing the storyboard, we can move into the logic of the code.\n\n\n\u003e If you want to copy the exact design of this storyboard, you can copy the XML source for the storyboard from [the GitHub repository](https://github.com/neoighodaro/realtime-login-approval-system/blob/master/iosapp/dashboard/Base.lproj/Main.storyboard) and paste it in your own file.\n\n\n## Adding a realtime approval request\n\nThe first thing we want to add to the application is a realtime request while the application is open. This will mean that while the application is open, when an approval request comes in, the approval window will pop up and the user can then click on the approve button.\n\nOpen the `ViewController` class and replace the contents of the file with the following code:\n\n```swift\n    // File: ./dashboard/ViewController.swift\n    import UIKit\n    import Alamofire\n    import PusherSwift\n    \n    class ViewController: UIViewController {\n        \n        var pusher: Pusher!\n        \n        var payload: [String: String] = [:]\n    \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            \n            pusher = Pusher(\n                key: AppConstants.PUSHER_KEY,\n                options: PusherClientOptions(host: .cluster(AppConstants.PUSHER_CLUSTER))\n            )\n            pusher.connect()\n            \n            let channel = pusher.subscribe(\"auth-request\")\n    \n            let _ = channel.bind(eventName: \"key-dispatched\", callback: { [unowned self] (data: Any?) -\u003e Void in\n                guard let payload = data as? [String: String] else { return } \n                guard payload[\"hash\"] != nil, payload[\"email\"] != nil else { return }\n                \n                self.showApprovalWindow(with: payload)\n            })\n        }\n        \n        private func showApprovalWindow(with payload: [String: String]) {\n            self.payload = payload\n      \n            performSegue(withIdentifier: \"approval_window\", sender: self)\n        }\n         \n        override func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n            if let vc = segue.destination as? ApprovalViewController {\n                vc.payload = self.payload\n            }\n        }\n    }\n```\n\nIn the `viewDidLoad` method, we register the Pusher Channels instance and subscribe to the `auth-request` channel. In this channel, we listen for the `key-dispatched` event. Once this event is triggered, we then call the `showApprovalWindow(with:)` method.\n\nIn the `showApprovalWindow` method, we set the `payload` property and then perform the `approval_window` segue we registered in the storyboard earlier. This will display that scene. However, before that scene is shown, the `prepare` method will be triggered automatically.\n\nIn the `prepare` method we pass on the payload to the `ApprovalViewController`. The `payload` contains the hash of the login. This hash needs to be sent back to the server so it can be validated and authorized.\n\nNext, open the `ApprovalViewController` you created and replace the code with the following code:\n\n```swift\n    // File: ./dashboard/ApprovalViewController.swift\n    import UIKit\n    import PusherSwift\n    import Alamofire\n    \n    class ApprovalViewController: UIViewController {\n        \n        var payload: [String: String]?\n        \n        private var channel: PusherChannel!\n    \n        override func viewDidAppear(_ animated: Bool) {\n            super.viewDidAppear(animated)\n            \n            if payload?[\"hash\"] == nil || payload?[\"email\"] == nil {\n                return denyButtonWasPressed(nil)\n            }\n    \n            // push notification\n            NotificationCenter.default.addObserver(\n                self,\n                selector: #selector(changeStatusFromPushNotification),\n                name: Notification.Name(\"status\"),\n                object: nil\n            )\n        }\n    \n        @objc private func changeStatusFromPushNotification(notification: Notification) {\n            guard let data = notification.userInfo as? [String: Any] else { return }\n            guard let status = data[\"status\"] as? String else { return }\n            guard let payload = data[\"payload\"] as? [String: String] else { return }\n            \n            if status == \"approved\" {\n                self.payload = payload\n                self.approveButtonWasPressed(nil)\n            } else {\n                self.denyButtonWasPressed(self)\n            }\n        }\n        \n        @IBAction func approveButtonWasPressed(_ sender: Any?) {\n            let url = AppConstants.API_URL + \"/login/client-authorized\"\n    \n            Alamofire.request(url, method: .post, parameters: payload)\n                .validate()\n                .responseJSON { response in\n                    self.dismiss(animated: true)\n                }\n        }\n        \n        @IBAction func denyButtonWasPressed(_ sender: Any?) {\n            dismiss(animated: true)\n        }\n    }\n```\n\nIn the controller above, we have just a few methods. In the `viewDidAppear` method, we check that there is a hash in the payload. If there is no hash, then we will just dismiss the modal.\n\nThe `approveButtonWasPressed` method is an `@IBAction` that is fired when the **APPROVE** button is pressed on the app. This method will fire an HTTP POST request with the hash to the `/login/client-authorized` endpoint on our backend server. \n\nThe `denyButtonWasPressed` method is connected to the **DENY** button on the app. When this button is pressed, the approval window is closed and thus that approval session will be forgotten and will eventually expire.\n\nIn both classes above, we tried to access properties of a nonexistent `AppConstant` class. Create a new Swift file named `AppConstant` and replace the contents with the following:\n\n```swift\n    // File: ./dashboard/AppConstants.swift\n    import Foundation\n    \n    class AppConstants {\n        static let API_URL            = \"http://127.0.0.1:8000\"\n        static let PUSHER_CLUSTER     = \"PUSHER_CLUSTER\"\n        static let PUSHER_KEY         = \"PUSHER_KEY\"\n        static let PUSHER_BEAMS_INSTANCE_ID = \"PUSHER_BEAMS_INSTANCE_ID\"\n    }\n```\n\n\u003e Replace the `PUSHER_*` placeholders with values from your Pusher dashboard.\n\nIf you notice, the `API_URL` points to a localhost address. In iOS this is not allowed by default. To bypass this (and it is strongly recommended not to bypass this on production), update your `info.plist` file as seen below:\n\n![laravel-ios-login-3-3](//images.ctfassets.net/1es3ne0caaid/9lqRdFBhsBYQH2hAxCdFv/b5820764705ca1d6153eb4cddeae99b6/laravel-ios-login-3-3.png)\n\n\n## Adding push notifications support\n\nThe next thing to do is add push notifications support. When a new login approval request comes in and the application is in the background, we will get a push notification with notification actions to **Approve** or **Deny** the request straight from the notification.\n\nTo get started, you need to provision your application for push notifications. You can do this by turning it on in the **Capabilities** tab of your projects settings.\n\n![laravel-ios-login-3-4](//images.ctfassets.net/1es3ne0caaid/1WgkwWflXDi49SwjCvIXwP/0d2c565fd4e36963daf379a80144b2fe/laravel-ios-login-3-4.png)\n\nFirst, turn on the **Remote notifications** option in the **Background Modes** section as seen above. Then, turn on the **Push Notifications** toggle as seen below.\n\n![laravel-ios-login-3-5](//images.ctfassets.net/1es3ne0caaid/3y1d77FilBEX1PhZUP9AlT/8502000a47fa029751500f09ddb02e50/laravel-ios-login-3-5.png)\n\nNext, open your `AppDelegate` file and replace the contents with the following:\n\n```swift\n    // File: ./dashboard/AppDelegate.swift\n    import UIKit\n    import PushNotifications\n    import UserNotifications\n    \n    @UIApplicationMain\n    class AppDelegate: UIResponder, UIApplicationDelegate, UNUserNotificationCenterDelegate {\n        var window: UIWindow?\n        let pushNotifications = PushNotifications.shared\n    \n        func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -\u003e Bool {        \n            pushNotifications.start(instanceId: AppConstants.PUSHER_BEAMS_INSTANCE_ID)\n            pushNotifications.registerForRemoteNotifications()\n            \n            let center = UNUserNotificationCenter.current()\n            center.delegate = self\n    \n            let deny = UNNotificationAction(identifier: \"deny\", title: \"Deny\", options: [.destructive])\n            let approve = UNNotificationAction(identifier: \"approve\", title: \"Approve\", options: [.foreground, .authenticationRequired])\n            \n            center.setNotificationCategories([\n                UNNotificationCategory(identifier: \"LoginActions\", actions: [approve, deny], intentIdentifiers: [])\n            ])\n            \n            return true\n        }\n        \n        func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n            pushNotifications.registerDeviceToken(deviceToken) {\n                let interest = \"auth-janedoe-at-pushercom\"\n                try? self.pushNotifications.addDeviceInterest(interest: interest)\n            }\n        }\n        \n        func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable: Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -\u003e Void) {\n            pushNotifications.handleNotification(userInfo: userInfo)\n            completionHandler(.newData)\n        }\n        \n        func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -\u003e Void) {\n            let name = Notification.Name(\"status\")\n            let status = (response.actionIdentifier == \"approve\") ? \"approved\" : \"denied\"\n            let userInfo = response.notification.request.content.userInfo\n            \n            if let aps = userInfo[\"aps\"] as? [String: AnyObject], let payload = aps[\"payload\"] as? [String: String] {\n                if status == \"approved\" {\n                    NotificationCenter.default.post(\n                      name: name, \n                      object: nil, \n                      userInfo: [\"status\": status, \"payload\": payload]\n                    )\n                }\n            }\n            \n            completionHandler()\n        }\n    }\n```\n\nAbove, we first added the `UNUserNotificationCenterDelegate` to the class. This is so we can benefit from the `UserNotifications` framework. Next we register the device for push notifications using the Pusher Beams Swift library. We register the deny and approve `UNNotificationAction`s and then register them both as notification categories.\n\nWe also register the interest for the device. When sending push notifications, interests are used to signify if the device should receive a notification or not. \n\nIn the last method, we try to parse the notification and then when we have parsed the remote push notification, we trigger a `NotificationCenter` message app wide. We can then use this notification inside our view controller to approve the request. Let’s do that.\n\nOpen the `ViewController` class and in the `viewDidLoad` method, add the following code:\n\n```swift\n    NotificationCenter.default.addObserver(\n        self,\n        selector: #selector(changeStatusFromPushNotification),\n        name: Notification.Name(\"status\"),\n        object: nil\n    )\n```\n\nAlso in the same file, add the following method to the class:\n\n```swift\n    @objc private func changeStatusFromPushNotification(notification: Notification) {\n        guard let data = notification.userInfo as? [String: Any] else { return }\n        guard let status = data[\"status\"] as? String else { return }\n        guard let payload = data[\"payload\"] as? [String: String] else { return }\n        \n        if status == \"approved\" {\n            let url = AppConstants.API_URL + \"/login/client-authorized\"\n            \n            Alamofire.request(url, method: .post, parameters: payload)\n                .validate()\n                .responseJSON { response in self.dismiss(animated: true) }\n        }\n    }\n```\n\nIn this method, we check the notification we triggered from the `AppDelegate` and we extract the hash. If the status is approved, then we send an HTTP POST request similar to the one in the `ApprovalViewController` thus approving the login.\n\n\n## Sending and accepting requests from the app\n\nLaravel by default requires a CSRF token for web requests. Disable this by opening the `VerifyCsrfMiddleware` class in the `app/Http/Middleware` directory. In this class, add the following to the `except` array:\n\n```php\n    protected $except = [\n        '/login/authorized',\n        '/login/client-authorized'\n    ];\n```\n\nNow, Laravel will allow requests without tokens to this route.\n\n### Tunnelling your Laravel application\n\nBefore building the iOS application, we need to update the `AppConstant.API_URL`. This is because we need to use a real server and not localhost if we want push notifications to work. \n\nTo do this, you need to [download ngrok](https://ngrok.com/download). This will be used to tunnel your localhost to a functioning and publicly accessible web address. \n\nFirst, `cd` to the root of your Laravel application and run the following command:\n\n```\n    $ php artisan serve\n```\n\nNext, while keeping that terminal window active, open another terminal window and run the command below:\n\n```\n    $ ./ngrok http 8000\n```\n\n\u003e If your ngrok file is in a different path, you need to specify the path to it. For example: `/path/to/ngrok http 8000`\n\n\n![laravel-ios-login-3-6](//images.ctfassets.net/1es3ne0caaid/45waBcXvZvjC5oWT1CC9pW/9b968707a679ce09cb6aeec240e9e731/laravel-ios-login-3-6.png)\n\nThe tunnel will give you a web accessible URL. Assign the URL to the `AppConstants.API_URL` property.\n\nNow you can build the application. Make sure the PHP server and ngrok are still running and then log in using the credentials mentioned earlier in the series.\n\n\n## Conclusion\n\nIn this series we have seen how one can use the power of Pusher to create amazing features. Realtime technology can be used for so much more.\n\nThe source code to the application is available on [GitHub](https://github.com/neoighodaro/realtime-login-approval-system).","metaTitle":"Build a login approval system with Laravel and iOS - Part 3","metaDescription":"This three part series will walk you through building a simple login approval system. Create a dashboard behind a login with Laravel, and an iOS app. When a user tries to log in to the web dashboard, they receive an iOS notification to approve or deny the login. In part three, build the iOS app."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"nDnlJvELbhedcNmcg3KvX","type":"Entry","createdAt":"2019-05-13T15:50:03.529Z","updatedAt":"2019-05-13T15:50:03.529Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a login approval system - Part 2: Building the backend","url":"login-approval-laravel-ios-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/realtime-login-approval-system","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}}],"reviewDate":"2019-05-13","description":"This three part series will walk you through building a simple login approval system. Create a dashboard behind a login with Laravel, and an iOS app. When a user tries to log in to the web dashboard, they receive an iOS notification to approve or deny the login. In part two, build the backend.","prerequisite":"You will need Xcode 10.x+ and Laravel 5.x+ installed on your machine.","content":"In the [previous part](https://pusher.com/tutorials/login-approval-laravel-ios-part-1) of this series, we set up the Laravel application and in the application, we added a login page of the application so we would be able to log in to the app. However, we did not implement any functionality. \n\n![laravel-ios-login-2-1](//images.ctfassets.net/1es3ne0caaid/1qStj4FLtu4l02WHKZ3hDg/e181dc4735e8aa76d9661a5f6d677e10/laravel-ios-login-2-1.png)\n\nIn this part, we will be adding the logic to make logging in work. We will also be completing the dashboard using the same template we downloaded in the first part.\n\n\n## Requirements\n\nTo build this system, we need the following requirements:\n\n- [Xcode](https://developer.apple.com/xcode) 10.x installed on your local machine.\n- Knowledge of the Xcode IDE.\n- [Laravel](https://laravel.com/docs/5.8/installation#installation) v5.x installed on your local machine.\n- Knowledge of the [Laravel](https://laravel.com) PHP framework.\n- Knowledge of the [Swift](https://developer.apple.com/swift) programming language.\n- A Pusher Beams application. Create one [here](https://pusher.com/beams).\n- A Pusher Channels application. Create one [here](https://pusher.com/channels).\n\nIf you have these requirements, let’s get started.\n\n\n## Making login work\n\nThe first thing we want to do is make the login work. From the first part, we attached a script that used Axios to send the login request to a different endpoint `/login/confirm`. Let us implement the logic for this route.\n\nOpen the `LoginController` in the `app/Http/Controllers/Auth` directory. Update the class as seen below:\n\n```php\n    \u003c?php\n    // File: ./app/Http/Controllers/Auth/LoginController.php\n    // [...]\n    \n    use Illuminate\\Support\\Str;\n    use Illuminate\\Http\\Request;\n    use Illuminate\\Support\\Facades\\Hash;\n    use App\\Events\\LoginAuthorizationRequested;\n    \n    // [...]\n    \n    class LoginController extends Controller\n    {\n        // [...]\n    \n        public function confirmLogin(Request $request)\n        {\n            $this-\u003evalidateLogin($request);\n    \n            if ($this-\u003ehasTooManyLoginAttempts($request)) {\n                $this-\u003efireLockoutEvent($request);\n                return $this-\u003esendLockoutResponse($request);\n            }\n    \n            if ($this-\u003eguard()-\u003evalidate($this-\u003ecredentials($request))) {\n                $username = $request-\u003eget($this-\u003eusername());\n                $hashKey = sha1($username . '_' . Str::random(32));\n                $unhashedLoginHash = $hashKey . '.' . Str::random(32);\n    \n                // Store the hash for 5 minutes...\n                $mins = now()-\u003eaddMinutes(5);\n                $key = \"{$hashKey}_login_hash\";\n                cache()-\u003eput($key, Hash::make($unhashedLoginHash), $mins);\n    \n                event(new LoginAuthorizationRequested($unhashedLoginHash, $username));\n    \n                return ['status' =\u003e true];\n            }\n    \n            $this-\u003eincrementLoginAttempts($request);\n    \n            return $this-\u003esendFailedLoginResponse($request);\n        }\n    }\n```\n\nIn the above, we are adding the `confirmLogin` method that we specified in the routes file. In this method we are doing the following:\n\n- Validating the request\n- Checking for excessive login attempts\n- Validating the login credentials without logging in\n- Creating and storing a hash for five minutes\n- Triggering an event to broadcast that the login needs authorization\n- Returning a true status so the client knows a request for authorization has been issued\n\n### Creating login events and listeners\n\nWe do not currently have this event we triggered so let’s create it. In your terminal, run the following command:\n\n```\n    $ php artisan make:event LoginAuthorizationRequested\n```\n\nNext, open this `app/Events/LoginAuthorizationRequested.php` file and replace the contents with the following:\n\n```php\n    \u003c?php\n    // File: ./app/Events/LoginAuthorizationRequested.php\n    \n    namespace App\\Events;\n    \n    use Illuminate\\Broadcasting\\Channel;\n    use Illuminate\\Queue\\SerializesModels;\n    use Illuminate\\Foundation\\Events\\Dispatchable;\n    use Illuminate\\Broadcasting\\InteractsWithSockets;\n    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n    \n    class LoginAuthorizationRequested implements ShouldBroadcast\n    {\n        use Dispatchable, InteractsWithSockets, SerializesModels;\n    \n        public $hash;\n        public $email;\n    \n        public function __construct(string $hash, string $email)\n        {\n            $this-\u003ehash = $hash;\n            $this-\u003eemail = $email;\n        }\n    \n        public function broadcastOn()\n        {\n            return new Channel('auth-request');\n        }\n    \n        public function broadcastAs()\n        {\n            return 'key-dispatched';\n        }\n    }\n```\n\n\u003e You can learn more about [Laravel’s event system](https://laravel.com/docs/5.8/events).\n\nVery important to note above, we are implementing the `ShouldBroadcast` interface which will instruct the event to be broadcasted using the driver set in the `.env` file. Open the `.env` file and set the `BROADCAST_DRIVER` to `pusher`. \n\n```\n    # File: ./.env\n    \n    # [...]\n    \n    BROADCAST_DRIVER=pusher\n    \n    # [...]\n```\n\nAlso in this `.env` file, update the `PUSHER_*` keys to match the values you have in your Pusher dashboard. Below the `PUSHER_*` keys, add and update the following keys:\n\n```\n    PUSHER_BEAMS_SECRET_KEY=\n    PUSHER_BEAMS_INSTANCE_ID=\n```\n\nNext, let’s register the event we just created and attach a listener to it. The listener will automatically be fired when the event is triggered. We will use this listener to send push notifications through Pusher Beams to the user’s device as well.\n\nIn your terminal, run the following command:\n\n```\n    $ php artisan make:listener SendLoginAuthorization\n```\n\nNow open this file `app/Listeners/SendLoginAuthorization.php` and replace the contents with the following:\n\n```php\n    \u003c?php\n    // File: ./app/Listeners/SendLoginAuthorization.php\n    \n    namespace App\\Listeners;\n    \n    use Illuminate\\Queue\\InteractsWithQueue;\n    use Illuminate\\Contracts\\Queue\\ShouldQueue;\n    use App\\Events\\LoginAuthorizationRequested;\n    use Pusher\\PushNotifications\\PushNotifications;\n    \n    class SendLoginAuthorization implements ShouldQueue\n    {\n        use InteractsWithQueue;\n    \n        protected $beams;\n    \n        public function __construct(PushNotifications $pushNotifications)\n        {\n            $this-\u003ebeams = $pushNotifications;\n        }\n    \n        public function handle(LoginAuthorizationRequested $event)\n        {\n            $payload = [\n                'title' =\u003e 'Dashboard',\n                'body' =\u003e 'Dashboard just sent a new approval request',\n            ];\n    \n            // Interest: auth-janedoe-at-pushercom\n            $interests = ['auth-' . str_slug($event-\u003eemail)];\n    \n            $this-\u003ebeams-\u003epublishToInterests($interests, [\n                'apns' =\u003e [\n                    'aps' =\u003e [\n                        'alert' =\u003e $payload,\n                        'category' =\u003e 'LoginActions',\n                        'payload' =\u003e ['hash' =\u003e $event-\u003ehash, 'email' =\u003e $event-\u003eemail],\n                    ],\n                ],\n            ]);\n        }\n    }\n```\n\nIn this listener, we are basically triggering a push notification using the Pusher Beams SDK for PHP. In this notification, we pass the `hash` so the client can use that when authorizing the login.\n\nTo register the listener, open the `app/Providers/EventServiceProvider.php` and add the following array to the `listeners` property:\n\n```php\n    \\App\\Events\\LoginAuthorizationRequested::class =\u003e [\n       \\App\\Listeners\\SendLoginAuthorization::class,\n    ],\n```\n\nFinally, go to your `config/app.php` file and uncomment the `BroadcastServiceProvider` from the list of providers.\n\n### Installing the Pusher PHP SDKs\n\nRight now we have not installed any of the Pusher PHP SDKs. In your terminal, run the following code to install them:\n\n```\n    $ composer require pusher/pusher-php-server pusher/pusher-push-notifications\n```\n\n### Configuring the Pusher push notifications SDK for Laravel\n\nNow that we have the packages installed, let’s add a class to the Laravel service container so that when we pass the `PushNotifications` class, it will go through the service container. Open the `app/Providers/AppServiceProvider.php` and in the `register` add the following:\n\n```php\n    \u003c?php\n    // File: ./app/Providers/AppServiceProvider.php\n    \n    // [...]\n    \n    class AppServiceProvider extends ServiceProvider {\n    \n      // [...]\n    \n      public function register() {\n        // [...]\n    \n        $this-\u003eapp-\u003ebind(PushNotifications::class, function () {\n            $config = config('broadcasting.connections.pusher.beams');\n        \n            return new PushNotifications([\n                'secretKey' =\u003e $config['secret_key'] ?? '',\n                'instanceId' =\u003e $config['instance_id'] ?? '',\n            ]);\n        });\n    \n        // [...]\n      }\n    \n      // [...]\n    }\n```\n\nYou need to also import the push notifications class at the top of the file:\n\n```php\n    use Pusher\\PushNotifications\\PushNotifications;\n```\n\nNext, let’s create the configuration items that we referenced in the code above. Open the `config/broadcasting.php` file and update as seen below:\n\n```php\n    \u003c?php\n    // File: ./config/broadcasting.php\n    \n    return [\n    \n        // [...]\n    \n        'connections' =\u003e [\n            'pusher' =\u003e [\n                // [...]\n    \n                'beams' =\u003e [\n                    'secret_key' =\u003e env('PUSHER_BEAMS_SECRET_KEY'),\n                    'instance_id' =\u003e env('PUSHER_BEAMS_INSTANCE_ID'),\n                ]\n            ],\n        ],\n    \n        // [...]\n    ];\n```\n\nNow, let’s run the application to see if we get the right results. In your terminal, run the following command to start the PHP server:\n\n```\n    $ php artisan serve\n```\n\nNow when you go to http://127.0.0.1:8000 you should see the login page as before. However, if you try to log in using the credentials below:\n\n- Username: janedoe@pusher.com\n- Password: secret\n\nYou should see the new screen that shows you that approval has been requested. Also if you check your Pusher Beams \u0026 Channels debug console, you should see the events and notification has been triggered.\n\n![laravel-ios-login-2-2](//images.ctfassets.net/1es3ne0caaid/rrx2mNM5c64LjLjwQXGWU/b90833689d29e57463cd6165d74dbd01/laravel-ios-login-2-2.gif)\n\n![laravel-ios-login-2-3](//images.ctfassets.net/1es3ne0caaid/2A5shF1Q9GUPzejx3IgGfX/49cc0c82ef5267e9915362ae2eb48cd9/laravel-ios-login-2-3.png)\n\n![laravel-ios-login-2-4](//images.ctfassets.net/1es3ne0caaid/2QHB1J9t3A9AYf1zJk8TPb/e2b78a011dc1fd8b67d21e49bcb42325/laravel-ios-login-2-4.png)\n\n\n## Adding other login endpoints\n\nNow that we have the login working, let us add some additional endpoints as defined in the routes file. Open the `app/Http/Controllers/LoginController.php` file and add the following methods:\n\n```php\n    \u003c?php\n    // File: ./app/Http/Controllers/LoginController.php\n    // [...]\n    \n    use App\\Events\\LoginAuthorized;\n    \n    // [...]\n    \n    class LoginController extends Controller\n    {\n        // [...]\n    \n        public function clientAuthorized(Request $request)\n        {\n            $request-\u003evalidate(['hash' =\u003e 'required|string']);\n    \n            $sentHash = $request-\u003eget('hash');\n            [$hashKey] = explode('.', $sentHash);\n            $storedHash = cache()-\u003eget($hashKey . '_login_hash');\n    \n            if (!Hash::check($sentHash, $storedHash)) {\n                abort(422);\n            }\n    \n            event(new LoginAuthorized($sentHash));\n    \n            return ['status' =\u003e true];\n        }\n    \n        public function authorizeLogin(Request $request)\n        {\n            $request-\u003evalidate([\n                'hash' =\u003e 'required|string',\n                'password' =\u003e 'required|string',\n                $this-\u003eusername() =\u003e 'required|string',\n            ]);\n    \n            $sentHash = $request-\u003eget('hash');\n            [$hashKey] = explode('.', $sentHash);\n            $storedHash = cache()-\u003eget($hashKey . '_login_hash');\n    \n            if (!Hash::check($sentHash, $storedHash) || !$this-\u003eattemptLogin($request)) {\n                abort(422);\n            }\n    \n            return ['status' =\u003e true];\n        }\n    }\n```\n\nThe first method will be the logic fired when the client has authorized the login. The second one will be called by the login script in the `login.blade.php`. \n\nIn these two methods, we validate the hash sent and make sure it matches the one stored in the cache. If for any reason the user does not validate in five minutes, the cache will expire and they would have to start the process again.\n\nIn the first method, we see that there is another event `LoginAuthorized` fired when the client authorizes the login. In this event, we will trigger an event that will be received on the web login page. When the web login receives this event, it will send a request to the `authorizeLogin` method above and the process will be complete. Let’s create this event.\n\nIn your terminal, run the following command:\n\n```\n    $ php artisan make:event LoginAuthorized\n```\n\nIn the event file generated, replace the content with the following:\n\n```php\n    \u003c?php\n    // File: ./app/Events/LoginAuthorized.php\n    \n    namespace App\\Events;\n    \n    use Illuminate\\Broadcasting\\Channel;\n    use Illuminate\\Queue\\SerializesModels;\n    use Illuminate\\Foundation\\Events\\Dispatchable;\n    use Illuminate\\Broadcasting\\InteractsWithSockets;\n    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n    \n    class LoginAuthorized implements ShouldBroadcast\n    {\n        use Dispatchable, InteractsWithSockets, SerializesModels;\n    \n        public $hash;\n    \n        public function __construct($hash)\n        {\n            $this-\u003ehash = $hash;\n        }\n    \n        public function broadcastOn()\n        {\n            return new Channel('auth-request');\n        }\n    \n        public function broadcastAs()\n        {\n            return 'approval-granted';\n        }\n    }\n```\n\nThat’s all. We have a working login system that sends push notifications and Channel events to the Pusher API. Now we just need an iOS client that will receive these events and make it possible for the user to authorize logins.\n\n\n## Adding a sample dashboard for logged in users\n\nOne last thing we want to add is the dashboard that will show when a user is logged in. This dashboard will not be functional though, just a sample. Open the `home.blade.php`  file inside the `resources/views` directory and replace the contents with the following code:\n\n```php\n    {{-- File: ./resources/views/home.blade.php --}}\n    @extends('layouts.app')\n    \n    @section('content')\n    \u003cdiv class=\"container-fluid\"\u003e\n        \u003cdiv class=\"d-sm-flex align-items-center justify-content-between mb-4\"\u003e\n            \u003ch1 class=\"h3 mb-0 text-gray-800\"\u003eDashboard\u003c/h1\u003e\n            \u003ca href=\"#\" class=\"d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm\"\u003e\u003ci class=\"fas fa-download fa-sm text-white-50\"\u003e\u003c/i\u003e Generate Report\u003c/a\u003e\n        \u003c/div\u003e\n    \n        \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-xl-3 col-md-6 mb-4\"\u003e\n                \u003cdiv class=\"card border-left-primary shadow h-100 py-2\"\u003e\n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003cdiv class=\"row no-gutters align-items-center\"\u003e\n                            \u003cdiv class=\"col mr-2\"\u003e\n                                \u003cdiv class=\"text-xs font-weight-bold text-primary text-uppercase mb-1\"\u003eEarnings (Monthly)\u003c/div\u003e\n                                \u003cdiv class=\"h5 mb-0 font-weight-bold text-gray-800\"\u003e$40,000\u003c/div\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"col-auto\"\u003e\n                                \u003ci class=\"fas fa-calendar fa-2x text-gray-300\"\u003e\u003c/i\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n    \n            \u003cdiv class=\"col-xl-3 col-md-6 mb-4\"\u003e\n                \u003cdiv class=\"card border-left-success shadow h-100 py-2\"\u003e\n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003cdiv class=\"row no-gutters align-items-center\"\u003e\n                            \u003cdiv class=\"col mr-2\"\u003e\n                                \u003cdiv class=\"text-xs font-weight-bold text-success text-uppercase mb-1\"\u003eEarnings (Annual)\u003c/div\u003e\n                                \u003cdiv class=\"h5 mb-0 font-weight-bold text-gray-800\"\u003e$215,000\u003c/div\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"col-auto\"\u003e\n                                \u003ci class=\"fas fa-dollar-sign fa-2x text-gray-300\"\u003e\u003c/i\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-xl-3 col-md-6 mb-4\"\u003e\n                \u003cdiv class=\"card border-left-info shadow h-100 py-2\"\u003e\n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003cdiv class=\"row no-gutters align-items-center\"\u003e\n                            \u003cdiv class=\"col mr-2\"\u003e\n                                \u003cdiv class=\"text-xs font-weight-bold text-info text-uppercase mb-1\"\u003eTasks\u003c/div\u003e\n                                \u003cdiv class=\"row no-gutters align-items-center\"\u003e\n                                    \u003cdiv class=\"col-auto\"\u003e\n                                        \u003cdiv class=\"h5 mb-0 mr-3 font-weight-bold text-gray-800\"\u003e50%\u003c/div\u003e\n                                    \u003c/div\u003e\n                                    \u003cdiv class=\"col\"\u003e\n                                        \u003cdiv class=\"progress progress-sm mr-2\"\u003e\n                                            \u003cdiv class=\"progress-bar bg-info\" role=\"progressbar\" style=\"width: 50%\" aria-valuenow=\"50\" aria-valuemin=\"0\" aria-valuemax=\"100\"\u003e\u003c/div\u003e\n                                        \u003c/div\u003e\n                                    \u003c/div\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"col-auto\"\u003e\n                                \u003ci class=\"fas fa-clipboard-list fa-2x text-gray-300\"\u003e\u003c/i\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-xl-3 col-md-6 mb-4\"\u003e\n                \u003cdiv class=\"card border-left-warning shadow h-100 py-2\"\u003e\n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003cdiv class=\"row no-gutters align-items-center\"\u003e\n                            \u003cdiv class=\"col mr-2\"\u003e\n                                \u003cdiv class=\"text-xs font-weight-bold text-warning text-uppercase mb-1\"\u003ePending Requests\u003c/div\u003e\n                                \u003cdiv class=\"h5 mb-0 font-weight-bold text-gray-800\"\u003e18\u003c/div\u003e\n                            \u003c/div\u003e\n                            \u003cdiv class=\"col-auto\"\u003e\n                                \u003ci class=\"fas fa-comments fa-2x text-gray-300\"\u003e\u003c/i\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-xl-8 col-lg-7\"\u003e\n                \u003cdiv class=\"card shadow mb-4\"\u003e\n                    \u003cdiv class=\"card-header py-3 d-flex flex-row align-items-center justify-content-between\"\u003e\n                        \u003ch6 class=\"m-0 font-weight-bold text-primary\"\u003eEarnings Overview\u003c/h6\u003e\n                        \u003cdiv class=\"dropdown no-arrow\"\u003e\n                            \u003ca class=\"dropdown-toggle\" href=\"#\" role=\"button\" id=\"dropdownMenuLink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"\u003e\n                                \u003ci class=\"fas fa-ellipsis-v fa-sm fa-fw text-gray-400\"\u003e\u003c/i\u003e\n                            \u003c/a\u003e\n                            \u003cdiv class=\"dropdown-menu dropdown-menu-right shadow animated--fade-in\" aria-labelledby=\"dropdownMenuLink\"\u003e\n                                \u003cdiv class=\"dropdown-header\"\u003eDropdown Header:\u003c/div\u003e\n                                \u003ca class=\"dropdown-item\" href=\"#\"\u003eAction\u003c/a\u003e\n                                \u003ca class=\"dropdown-item\" href=\"#\"\u003eAnother action\u003c/a\u003e\n                                \u003cdiv class=\"dropdown-divider\"\u003e\u003c/div\u003e\n                                \u003ca class=\"dropdown-item\" href=\"#\"\u003eSomething else here\u003c/a\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003c!-- Card Body --\u003e\n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003cdiv class=\"chart-area\"\u003e\n                            \u003ccanvas id=\"myAreaChart\"\u003e\u003c/canvas\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-xl-4 col-lg-5\"\u003e\n                \u003cdiv class=\"card shadow mb-4\"\u003e\n                    \u003cdiv class=\"card-header py-3 d-flex flex-row align-items-center justify-content-between\"\u003e\n                        \u003ch6 class=\"m-0 font-weight-bold text-primary\"\u003eRevenue Sources\u003c/h6\u003e\n                        \u003cdiv class=\"dropdown no-arrow\"\u003e\n                            \u003ca class=\"dropdown-toggle\" href=\"#\" role=\"button\" id=\"dropdownMenuLink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"\u003e\n                                \u003ci class=\"fas fa-ellipsis-v fa-sm fa-fw text-gray-400\"\u003e\u003c/i\u003e\n                            \u003c/a\u003e\n                            \u003cdiv class=\"dropdown-menu dropdown-menu-right shadow animated--fade-in\" aria-labelledby=\"dropdownMenuLink\"\u003e\n                                \u003cdiv class=\"dropdown-header\"\u003eDropdown Header:\u003c/div\u003e\n                                \u003ca class=\"dropdown-item\" href=\"#\"\u003eAction\u003c/a\u003e\n                                \u003ca class=\"dropdown-item\" href=\"#\"\u003eAnother action\u003c/a\u003e\n                                \u003cdiv class=\"dropdown-divider\"\u003e\u003c/div\u003e\n                                \u003ca class=\"dropdown-item\" href=\"#\"\u003eSomething else here\u003c/a\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003cdiv class=\"chart-pie pt-4 pb-2\"\u003e\n                            \u003ccanvas id=\"myPieChart\"\u003e\u003c/canvas\u003e\n                        \u003c/div\u003e\n                        \u003cdiv class=\"mt-4 text-center small\"\u003e\n                            \u003cspan class=\"mr-2\"\u003e\n                            \u003ci class=\"fas fa-circle text-primary\"\u003e\u003c/i\u003e Direct\n                        \u003c/span\u003e\n                            \u003cspan class=\"mr-2\"\u003e\n                            \u003ci class=\"fas fa-circle text-success\"\u003e\u003c/i\u003e Social\n                        \u003c/span\u003e\n                            \u003cspan class=\"mr-2\"\u003e\n                            \u003ci class=\"fas fa-circle text-info\"\u003e\u003c/i\u003e Referral\n                        \u003c/span\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \n        \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-lg-6 mb-4\"\u003e\n                \u003cdiv class=\"card shadow mb-4\"\u003e\n                    \u003cdiv class=\"card-header py-3\"\u003e\n                        \u003ch6 class=\"m-0 font-weight-bold text-primary\"\u003eProjects\u003c/h6\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003ch4 class=\"small font-weight-bold\"\u003eServer Migration \u003cspan class=\"float-right\"\u003e20%\u003c/span\u003e\u003c/h4\u003e\n                        \u003cdiv class=\"progress mb-4\"\u003e\n                            \u003cdiv class=\"progress-bar bg-danger\" role=\"progressbar\" style=\"width: 20%\" aria-valuenow=\"20\" aria-valuemin=\"0\" aria-valuemax=\"100\"\u003e\u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003ch4 class=\"small font-weight-bold\"\u003eSales Tracking \u003cspan class=\"float-right\"\u003e40%\u003c/span\u003e\u003c/h4\u003e\n                        \u003cdiv class=\"progress mb-4\"\u003e\n                            \u003cdiv class=\"progress-bar bg-warning\" role=\"progressbar\" style=\"width: 40%\" aria-valuenow=\"40\" aria-valuemin=\"0\" aria-valuemax=\"100\"\u003e\u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003ch4 class=\"small font-weight-bold\"\u003eCustomer Database \u003cspan class=\"float-right\"\u003e60%\u003c/span\u003e\u003c/h4\u003e\n                        \u003cdiv class=\"progress mb-4\"\u003e\n                            \u003cdiv class=\"progress-bar\" role=\"progressbar\" style=\"width: 60%\" aria-valuenow=\"60\" aria-valuemin=\"0\" aria-valuemax=\"100\"\u003e\u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003ch4 class=\"small font-weight-bold\"\u003ePayout Details \u003cspan class=\"float-right\"\u003e80%\u003c/span\u003e\u003c/h4\u003e\n                        \u003cdiv class=\"progress mb-4\"\u003e\n                            \u003cdiv class=\"progress-bar bg-info\" role=\"progressbar\" style=\"width: 80%\" aria-valuenow=\"80\" aria-valuemin=\"0\" aria-valuemax=\"100\"\u003e\u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003ch4 class=\"small font-weight-bold\"\u003eAccount Setup \u003cspan class=\"float-right\"\u003eComplete!\u003c/span\u003e\u003c/h4\u003e\n                        \u003cdiv class=\"progress\"\u003e\n                            \u003cdiv class=\"progress-bar bg-success\" role=\"progressbar\" style=\"width: 100%\" aria-valuenow=\"100\" aria-valuemin=\"0\" aria-valuemax=\"100\"\u003e\u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n    \n                \u003cdiv class=\"row\"\u003e\n                    \u003cdiv class=\"col-lg-6 mb-4\"\u003e\n                        \u003cdiv class=\"card bg-primary text-white shadow\"\u003e\n                            \u003cdiv class=\"card-body\"\u003e\n                                Primary\n                                \u003cdiv class=\"text-white-50 small\"\u003e#4e73df\u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"col-lg-6 mb-4\"\u003e\n                        \u003cdiv class=\"card bg-success text-white shadow\"\u003e\n                            \u003cdiv class=\"card-body\"\u003e\n                                Success\n                                \u003cdiv class=\"text-white-50 small\"\u003e#1cc88a\u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"col-lg-6 mb-4\"\u003e\n                        \u003cdiv class=\"card bg-info text-white shadow\"\u003e\n                            \u003cdiv class=\"card-body\"\u003e\n                                Info\n                                \u003cdiv class=\"text-white-50 small\"\u003e#36b9cc\u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"col-lg-6 mb-4\"\u003e\n                        \u003cdiv class=\"card bg-warning text-white shadow\"\u003e\n                            \u003cdiv class=\"card-body\"\u003e\n                                Warning\n                                \u003cdiv class=\"text-white-50 small\"\u003e#f6c23e\u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"col-lg-6 mb-4\"\u003e\n                        \u003cdiv class=\"card bg-danger text-white shadow\"\u003e\n                            \u003cdiv class=\"card-body\"\u003e\n                                Danger\n                                \u003cdiv class=\"text-white-50 small\"\u003e#e74a3b\u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"col-lg-6 mb-4\"\u003e\n                        \u003cdiv class=\"card bg-secondary text-white shadow\"\u003e\n                            \u003cdiv class=\"card-body\"\u003e\n                                Secondary\n                                \u003cdiv class=\"text-white-50 small\"\u003e#858796\u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n    \n            \u003c/div\u003e\n    \n            \u003cdiv class=\"col-lg-6 mb-4\"\u003e\n                \u003cdiv class=\"card shadow mb-4\"\u003e\n                    \u003cdiv class=\"card-header py-3\"\u003e\n                        \u003ch6 class=\"m-0 font-weight-bold text-primary\"\u003eIllustrations\u003c/h6\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003cdiv class=\"text-center\"\u003e\n                            \u003cimg class=\"img-fluid px-3 px-sm-4 mt-3 mb-4\" style=\"width: 25rem;\" src=\"img/undraw_posting_photo.svg\" alt=\"\"\u003e\n                        \u003c/div\u003e\n                        \u003cp\u003eAdd some quality, svg illustrations to your project courtesy of \u003ca target=\"_blank\" rel=\"nofollow\" href=\"https://undraw.co/\"\u003eunDraw\u003c/a\u003e, a constantly updated collection of beautiful svg images that you can use completely free and without attribution!\u003c/p\u003e\n                        \u003ca target=\"_blank\" rel=\"nofollow\" href=\"https://undraw.co/\"\u003eBrowse Illustrations on unDraw \u0026rarr;\u003c/a\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"card shadow mb-4\"\u003e\n                    \u003cdiv class=\"card-header py-3\"\u003e\n                        \u003ch6 class=\"m-0 font-weight-bold text-primary\"\u003eDevelopment Approach\u003c/h6\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003cp\u003eSB Admin 2 makes extensive use of Bootstrap 4 utility classes in order to reduce CSS bloat and poor page performance. Custom CSS classes are used to create custom components and custom utility classes.\u003c/p\u003e\n                        \u003cp class=\"mb-0\"\u003eBefore working with this theme, you should become familiar with the Bootstrap framework, especially the utility classes.\u003c/p\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n    \n            \u003c/div\u003e\n        \u003c/div\u003e\n    \n    \u003c/div\u003e\n    @endsection\n```\n\n## Conclusion\n\nIn this part, we have been able to make the login system work and also push different events to the Pusher API for consumption. In the next part, we will create the iOS application and consume the events that are sent.\n\nThe source code to the application is available on [GitHub](https://github.com/neoighodaro/realtime-login-approval-system).","metaTitle":"Build a login approval system with Laravel and iOS - Part 2","metaDescription":"This three part series will walk you through building a simple login approval system. Create a dashboard behind a login with Laravel, and an iOS app. When a user tries to log in to the web dashboard, they receive an iOS notification to approve or deny the login. In part two, build the backend."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4IvY0ikw9QdhyYsACe3C8","type":"Entry","createdAt":"2019-05-02T17:23:36.608Z","updatedAt":"2019-05-02T17:23:36.608Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a login approval system with Laravel and iOS - Part 1: Building the base application","url":"login-approval-laravel-ios-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/realtime-login-approval-system","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}}],"reviewDate":"2019-05-02","description":"This three part series will walk you through building a simple login approval system. Create a dashboard behind a login with Laravel, and an iOS app. When a user tries to log in to the web dashboard, they receive an iOS notification to approve or deny the login. In part one, set up the dashboard.","prerequisite":"You will need Xcode 10.x+ and Laravel 5.x+ installed on your machine.","content":"When building applications that require authentication, it is not uncommon to see applications add 2FA (Two-factor authentication) to make things secure. With 2FA, when you log in in one device, you need to enter a code that would be sent to another trusted device via SMS or a code generator. Another form of 2FA is simply approving the login from another device.\n\nIn this article, we are going to consider how to build a simple login approval system that mimics this behavior using Laravel, Swift, and Pusher technologies. \n\n\n## How will it work?\n\nWe will build a sample dashboard with actual login but fake data. We will also build an accompanying mobile application that will serve as the authorized device where all the login approvals can be made.\n\nWhen an administrator attempts to log in to the web dashboard, a push notification will be sent to the iOS application prompting the user to approve the login. The user can then approve or deny the login using the **Approve** or **Deny** option on the push notification, or clicking on **Approve** if the application is already opened.\n\n![laravel-ios-login-1-1](//images.ctfassets.net/1es3ne0caaid/1wUJmRFPnhdjwOHgPCbWOg/acdf8e8b1626fe40e47393b52dbc4bec/laravel-ios-login-1-1.gif)\n\n## Requirements\n\nTo build this system, we need the following requirements:\n\n\n- [Xcode](https://developer.apple.com/xcode) 10.x installed on your local machine.\n- Knowledge of the Xcode IDE.\n- [Laravel](https://laravel.com/docs/5.8/installation#installation) v5.x installed on your local machine.\n- Knowledge of the [Laravel](https://laravel.com) PHP framework.\n- Knowledge of the [Swift](https://developer.apple.com/swift) programming language.\n- A Pusher Beams application. Create one [here](https://pusher.com/beams).\n- A Pusher Channels application. Create one [here](https://pusher.com/channels).\n\nIf you have these requirements, let’s get started.\n\n\n## Setting up the web dashboard\n\nTo get started, we will be creating a web dashboard. Launch your terminal application and `cd` to the directory you want to install your web project to and run the following commands:\n\n```\n    $ laravel new dashboard\n    $ cd dashboard\n```\n\nThis will create a new Laravel project called `dashboard`. When the application is created, open the project in your preferred text editor.\n\nNext, in your terminal, run the following command in the root of your application directory:\n\n```\n    $ php artisan make:auth\n```\n\nThis command will generate an authentication scaffold. This means we will automatically have access to all of Laravel’s authentication system including the login and logout parts that we need.\n\nNext, let’s connect the application to a database. You can use MySQL or any other supported database you want, but for simplicity, we will be using an SQLite database. Create a new `database.sqlite` file in the `databases` directory and leave it empty. \n\nNext, for SQLite, open the `.env` file and remove all the `DB_*` keys except `DB_CONNECTION` and `DB_DATABASE`. You can set the values as seen below:\n\n```\n    DB_CONNECTION=sqlite\n    DB_DATABASE=/path/to/database/database.sqlite\n```\n\nSince Laravel comes with a default database migration for the `users` table, we do not need to worry about that. However, let’s create a seeder to add sample data to the database and make it easy to set up a user without registering manually.\n\nIn your terminal, run the following command:\n\n```\n    $ php artisan make:seed UsersTableSeeder\n```\n\nIn the generated seed class, replace the contents with the following:\n\n```php\n    \u003c?php\n    // File: ./database/seeds/UsersTableSeeder.php\n    \n    use App\\User;\n    use Illuminate\\Database\\Seeder;\n    use Illuminate\\Support\\Facades\\Hash;\n    \n    class UsersTableSeeder extends Seeder\n    {\n        /**\n         * Run the database seeds.\n         *\n         * @return void\n         */\n        public function run()\n        {\n            User::create([\n                'name' =\u003e 'Jane Doe',\n                'email' =\u003e 'janedoe@pusher.com',\n                'password' =\u003e Hash::make('secret'),\n            ]);\n        }\n    }\n```\n\nNext, open the `database/seeds/DatabaseSeeder.php` file and uncomment the call to the `UsersTableSeeder` in that file. Next, let’s migrate and seed our database. Run the following command to do so:\n\n```\n    $ php artisan migrate --seed\n```\n\nThis command will run the migrations in the `database/migrations` directory and also seed the `UsersTableSeeder`. To verify that the user was indeed created, run the following command:\n\n```\n    $ php artisan tinker\n```\n\nThis will launch a [REPL](https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop) session where we can run everything available in the Laravel application directly. In this REPL session, run the following:\n\n```\n    \u003e\u003e\u003e App\\User::all()\n```\n\nThis should print a list of all the available users and your seeded user should be on this list.\n\n![laravel-ios-login-1-2](//images.ctfassets.net/1es3ne0caaid/4PcDko3BBE82NypLMEvP4h/447173655b341d44ba88f323eb5de951/laravel-ios-login-1-2.png)\n\nNow that we have some data, we are done with the initial set up. Let’s move on to adding a good design and also making the login actually function as intended.\n\n\n## Creating the layout and routes\n\nBefore we start creating the frontend, we need to make sure the application’s routes are set up correctly. Open the `routes/web.php` file and replace the entire contents with the following:\n\n```php\n    \u003c?php\n    \n    Route::redirect('/', '/home');\n    \n    Auth::routes();\n    \n    Route::get('/home',                     'HomeController@index')-\u003ename('home');\n    Route::post('/login/confirm',           'Auth\\LoginController@confirmLogin');\n    Route::post('/login/authorize',         'Auth\\LoginController@authorizeLogin');\n    Route::post('/login/client-authorized', 'Auth\\LoginController@clientAuthorized');\n```\n\nAbove we have defined routes to our application and we will need to start creating some of the methods these routes point to. For now, let’s focus on the ones that have to do with seeing our login screen.\n\nWe will be using the [SB Admin 2](https://startbootstrap.com/themes/sb-admin-2/) free template for the frontend of the dashboard. Before we start building, download the template from the link above as we will need some asset files from the template.\n\n### Adding the HTML template to the application\n\nIf you have downloaded the template we can move on to the next step. Open the `app.blade.php` file in the `resources/views/layouts` directory and replace the contents of the file with the following code:\n\n```php\n    \u003c!-- File: ./resources/views/layouts/app.blade.php --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"{{ str_replace('_', '-', app()-\u003egetLocale()) }}\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003cmeta name=\"csrf-token\" content=\"{{ csrf_token() }}\"\u003e\n        \u003ctitle\u003eDashboard | {{ config('app.name') }}\u003c/title\u003e\n        \u003clink href=\"{{ asset('vendor/fontawesome-free/css/all.min.css') }}\" rel=\"stylesheet\"\u003e\n        \u003clink rel=\"dns-prefetch\" href=\"//fonts.gstatic.com\"\u003e\n        \u003clink href=\"https://fonts.googleapis.com/css?family=Nunito:200,200i,300,300i,400,400i,600,600i,700,700i,800,800i,900,900i\" rel=\"stylesheet\"\u003e\n        \u003clink href=\"{{ asset('css/sb-admin-2.min.css') }}\" rel=\"stylesheet\"\u003e\n    \u003c/head\u003e\n    \u003cbody id=\"page-top\"\u003e\n        \u003cdiv id=\"wrapper\"\u003e\n            @include('partials.sidebar')\n            \u003cdiv id=\"content\"\u003e\n                @include('partials.topbar')\n                @yield('content')\n                \u003cfooter class=\"sticky-footer bg-white\"\u003e\n                    \u003cdiv class=\"container my-auto\"\u003e\n                        \u003cdiv class=\"copyright text-center my-auto\"\u003e\n                            \u003cspan\u003eCopyright \u0026copy; {{ config('app.name') }} {{ date('Y') }}\u003c/span\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/footer\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003ca class=\"scroll-to-top rounded\" href=\"#page-top\"\u003e\n            \u003ci class=\"fas fa-angle-up\"\u003e\u003c/i\u003e\n        \u003c/a\u003e\n        @include('modals.logout')\n        \u003cscript src=\"{{ asset('vendor/jquery/jquery.min.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ asset('vendor/bootstrap/js/bootstrap.bundle.min.') }}js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ asset('vendor/jquery-easing/jquery.easing.min.') }}js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ asset('js/sb-admin-2.min.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ asset('vendor/chart.js/Chart.min.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ asset('js/demo/chart-area-demo.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ asset('js/demo/chart-pie-demo.js') }}\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThis will be the layout of the entire dashboard. In case you noticed, we included some nonexistent files in the blade template above so let’s create them.\n\nCreate a new directory in `resources/views` called `partials` and inside this new directory create some new files as seen below.\n\nThe first file will be the `sidebar.blade.php`:\n\n```php\n    \u003c!-- File: ./resources/views/sidebar.blade.php --\u003e\n    \u003cul class=\"navbar-nav bg-gradient-primary sidebar sidebar-dark accordion\" id=\"accordionSidebar\"\u003e\n        \u003ca class=\"sidebar-brand d-flex align-items-center justify-content-center\" href=\"index.html\"\u003e\n            \u003cdiv class=\"sidebar-brand-icon rotate-n-15\"\u003e\n                \u003ci class=\"fas fa-laugh-wink\"\u003e\u003c/i\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"sidebar-brand-text mx-3\"\u003eSB Admin \u003csup\u003e2\u003c/sup\u003e\u003c/div\u003e\n        \u003c/a\u003e\n        \u003chr class=\"sidebar-divider my-0\"\u003e\n        \u003cli class=\"nav-item active\"\u003e\n            \u003ca class=\"nav-link\" href=\"index.html\"\u003e\n                \u003ci class=\"fas fa-fw fa-tachometer-alt\"\u003e\u003c/i\u003e\n                \u003cspan\u003eDashboard\u003c/span\u003e\n            \u003c/a\u003e\n        \u003c/li\u003e\n        \u003chr class=\"sidebar-divider\"\u003e\n        \u003cdiv class=\"sidebar-heading\"\u003e\n            Interface\n        \u003c/div\u003e\n        \u003cli class=\"nav-item\"\u003e\n            \u003ca class=\"nav-link collapsed\" href=\"#\" data-toggle=\"collapse\" data-target=\"#collapseTwo\" aria-expanded=\"true\" aria-controls=\"collapseTwo\"\u003e\n                \u003ci class=\"fas fa-fw fa-cog\"\u003e\u003c/i\u003e\n                \u003cspan\u003eComponents\u003c/span\u003e\n            \u003c/a\u003e\n            \u003cdiv id=\"collapseTwo\" class=\"collapse\" aria-labelledby=\"headingTwo\" data-parent=\"#accordionSidebar\"\u003e\n                \u003cdiv class=\"bg-white py-2 collapse-inner rounded\"\u003e\n                    \u003ch6 class=\"collapse-header\"\u003eCustom Components:\u003c/h6\u003e\n                    \u003ca class=\"collapse-item\" href=\"buttons.html\"\u003eButtons\u003c/a\u003e\n                    \u003ca class=\"collapse-item\" href=\"cards.html\"\u003eCards\u003c/a\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/li\u003e\n        \u003cli class=\"nav-item\"\u003e\n            \u003ca class=\"nav-link collapsed\" href=\"#\" data-toggle=\"collapse\" data-target=\"#collapseUtilities\" aria-expanded=\"true\" aria-controls=\"collapseUtilities\"\u003e\n                \u003ci class=\"fas fa-fw fa-wrench\"\u003e\u003c/i\u003e\n                \u003cspan\u003eUtilities\u003c/span\u003e\n            \u003c/a\u003e\n            \u003cdiv id=\"collapseUtilities\" class=\"collapse\" aria-labelledby=\"headingUtilities\" data-parent=\"#accordionSidebar\"\u003e\n                \u003cdiv class=\"bg-white py-2 collapse-inner rounded\"\u003e\n                    \u003ch6 class=\"collapse-header\"\u003eCustom Utilities:\u003c/h6\u003e\n                    \u003ca class=\"collapse-item\" href=\"utilities-color.html\"\u003eColors\u003c/a\u003e\n                    \u003ca class=\"collapse-item\" href=\"utilities-border.html\"\u003eBorders\u003c/a\u003e\n                    \u003ca class=\"collapse-item\" href=\"utilities-animation.html\"\u003eAnimations\u003c/a\u003e\n                    \u003ca class=\"collapse-item\" href=\"utilities-other.html\"\u003eOther\u003c/a\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/li\u003e\n        \u003chr class=\"sidebar-divider\"\u003e\n        \u003cdiv class=\"sidebar-heading\"\u003e\n            Addons\n        \u003c/div\u003e\n        \u003cli class=\"nav-item\"\u003e\n            \u003ca class=\"nav-link collapsed\" href=\"#\" data-toggle=\"collapse\" data-target=\"#collapsePages\" aria-expanded=\"true\" aria-controls=\"collapsePages\"\u003e\n                \u003ci class=\"fas fa-fw fa-folder\"\u003e\u003c/i\u003e\n                \u003cspan\u003ePages\u003c/span\u003e\n            \u003c/a\u003e\n            \u003cdiv id=\"collapsePages\" class=\"collapse\" aria-labelledby=\"headingPages\" data-parent=\"#accordionSidebar\"\u003e\n                \u003cdiv class=\"bg-white py-2 collapse-inner rounded\"\u003e\n                    \u003ch6 class=\"collapse-header\"\u003eLogin Screens:\u003c/h6\u003e\n                    \u003ca class=\"collapse-item\" href=\"login.html\"\u003eLogin\u003c/a\u003e\n                    \u003ca class=\"collapse-item\" href=\"register.html\"\u003eRegister\u003c/a\u003e\n                    \u003ca class=\"collapse-item\" href=\"forgot-password.html\"\u003eForgot Password\u003c/a\u003e\n                    \u003cdiv class=\"collapse-divider\"\u003e\u003c/div\u003e\n                    \u003ch6 class=\"collapse-header\"\u003eOther Pages:\u003c/h6\u003e\n                    \u003ca class=\"collapse-item\" href=\"404.html\"\u003e404 Page\u003c/a\u003e\n                    \u003ca class=\"collapse-item\" href=\"blank.html\"\u003eBlank Page\u003c/a\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/li\u003e\n        \u003cli class=\"nav-item\"\u003e\n            \u003ca class=\"nav-link\" href=\"charts.html\"\u003e\n                \u003ci class=\"fas fa-fw fa-chart-area\"\u003e\u003c/i\u003e\n                \u003cspan\u003eCharts\u003c/span\u003e\u003c/a\u003e\n        \u003c/li\u003e\n        \u003cli class=\"nav-item\"\u003e\n            \u003ca class=\"nav-link\" href=\"tables.html\"\u003e\n                \u003ci class=\"fas fa-fw fa-table\"\u003e\u003c/i\u003e\n                \u003cspan\u003eTables\u003c/span\u003e\u003c/a\u003e\n        \u003c/li\u003e\n        \u003chr class=\"sidebar-divider d-none d-md-block\"\u003e\n        \u003cdiv class=\"text-center d-none d-md-inline\"\u003e\n            \u003cbutton class=\"rounded-circle border-0\" id=\"sidebarToggle\"\u003e\u003c/button\u003e\n        \u003c/div\u003e\n    \u003c/ul\u003e\n```\n\nThe above is just the extracted sidebar from the theme we downloaded earlier. Next create the second file `topbar.blade.php` inside the same `partials` directory:\n\n```php\n    \u003c!-- File: ./resources/views/topbar.blade.php --\u003e\n    \u003cnav class=\"navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow\"\u003e\n        \u003cbutton id=\"sidebarToggleTop\" class=\"btn btn-link d-md-none rounded-circle mr-3\"\u003e\n            \u003ci class=\"fa fa-bars\"\u003e\u003c/i\u003e\n        \u003c/button\u003e\n        \u003cform class=\"d-none d-sm-inline-block form-inline mr-auto ml-md-3 my-2 my-md-0 mw-100 navbar-search\"\u003e\n            \u003cdiv class=\"input-group\"\u003e\n                \u003cinput type=\"text\" class=\"form-control bg-light border-0 small\" placeholder=\"Search for...\" aria-label=\"Search\" aria-describedby=\"basic-addon2\"\u003e\n                \u003cdiv class=\"input-group-append\"\u003e\n                    \u003cbutton class=\"btn btn-primary\" type=\"button\"\u003e\n                        \u003ci class=\"fas fa-search fa-sm\"\u003e\u003c/i\u003e\n                    \u003c/button\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/form\u003e\n        \u003cul class=\"navbar-nav ml-auto\"\u003e\n            \u003cli class=\"nav-item dropdown no-arrow d-sm-none\"\u003e\n                \u003ca class=\"nav-link dropdown-toggle\" href=\"#\" id=\"searchDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"\u003e\n                    \u003ci class=\"fas fa-search fa-fw\"\u003e\u003c/i\u003e\n                \u003c/a\u003e\n                \u003cdiv class=\"dropdown-menu dropdown-menu-right p-3 shadow animated--grow-in\" aria-labelledby=\"searchDropdown\"\u003e\n                    \u003cform class=\"form-inline mr-auto w-100 navbar-search\"\u003e\n                        \u003cdiv class=\"input-group\"\u003e\n                            \u003cinput type=\"text\" class=\"form-control bg-light border-0 small\" placeholder=\"Search for...\" aria-label=\"Search\" aria-describedby=\"basic-addon2\"\u003e\n                            \u003cdiv class=\"input-group-append\"\u003e\n                                \u003cbutton class=\"btn btn-primary\" type=\"button\"\u003e\n                                    \u003ci class=\"fas fa-search fa-sm\"\u003e\u003c/i\u003e\n                                \u003c/button\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/form\u003e\n                \u003c/div\u003e\n            \u003c/li\u003e\n            \u003cdiv class=\"topbar-divider d-none d-sm-block\"\u003e\u003c/div\u003e\n            \u003cli class=\"nav-item dropdown no-arrow\"\u003e\n                \u003ca class=\"nav-link dropdown-toggle\" href=\"#\" id=\"userDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"\u003e\n                    \u003cspan class=\"mr-2 d-none d-lg-inline text-gray-600 small\"\u003e{{ auth()-\u003euser()-\u003ename }}\u003c/span\u003e\n                    \u003cimg class=\"img-profile rounded-circle\" src=\"https://source.unsplash.com/QAB-WJcbgJk/60x60\"\u003e\n                \u003c/a\u003e\n                \u003cdiv class=\"dropdown-menu dropdown-menu-right shadow animated--grow-in\" aria-labelledby=\"userDropdown\"\u003e\n                    \u003ca class=\"dropdown-item\" href=\"#\"\u003e\n                        \u003ci class=\"fas fa-user fa-sm fa-fw mr-2 text-gray-400\"\u003e\u003c/i\u003e Profile\n                    \u003c/a\u003e\n                    \u003ca class=\"dropdown-item\" href=\"#\"\u003e\n                        \u003ci class=\"fas fa-cogs fa-sm fa-fw mr-2 text-gray-400\"\u003e\u003c/i\u003e Settings\n                    \u003c/a\u003e\n                    \u003ca class=\"dropdown-item\" href=\"#\"\u003e\n                        \u003ci class=\"fas fa-list fa-sm fa-fw mr-2 text-gray-400\"\u003e\u003c/i\u003e Activity Log\n                    \u003c/a\u003e\n                    \u003cdiv class=\"dropdown-divider\"\u003e\u003c/div\u003e\n                    \u003ca class=\"dropdown-item\" href=\"#\" data-toggle=\"modal\" data-target=\"#logoutModal\"\u003e\n                        \u003ci class=\"fas fa-sign-out-alt fa-sm fa-fw mr-2 text-gray-400\"\u003e\u003c/i\u003e Logout\n                    \u003c/a\u003e\n                \u003c/div\u003e\n            \u003c/li\u003e\n        \u003c/ul\u003e\n    \u003c/nav\u003e\n```\n\nNow that we have both files, create a new directory `modals` inside the `resources/views` directory and inside this directory add this new file `logout.blade.php`:\n\n```php\n    \u003c!-- File: ./resources/views/modals/logout.blade.php --\u003e\n    \u003cdiv class=\"modal fade\" id=\"logoutModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\"\u003e\n        \u003cdiv class=\"modal-dialog\" role=\"document\"\u003e\n            \u003cdiv class=\"modal-content\"\u003e\n                \u003cdiv class=\"modal-header\"\u003e\n                    \u003ch5 class=\"modal-title\" id=\"exampleModalLabel\"\u003eReady to Leave?\u003c/h5\u003e\n                   \u003cbutton class=\"close\" type=\"button\" data-dismiss=\"modal\" aria-label=\"Close\"\u003e\n                        \u003cspan aria-hidden=\"true\"\u003e×\u003c/span\u003e\n                    \u003c/button\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"modal-body\"\u003eSelect \"Logout\" below if you are ready to end your current session.\u003c/div\u003e\n                \u003cdiv class=\"modal-footer\"\u003e\n                    \u003cbutton class=\"btn btn-secondary\" type=\"button\" data-dismiss=\"modal\"\u003eCancel\u003c/button\u003e\n                    \u003ca class=\"btn btn-primary\" href=\"{{ route('logout') }}\"\n                        onclick=\"event.preventDefault();\n                                        document.getElementById('logout-form').submit();\"\u003e\n                        {{ __('Logout') }}\n                    \u003c/a\u003e\n                    \u003cform id=\"logout-form\" action=\"{{ route('logout') }}\" method=\"POST\" style=\"display: none;\"\u003e\n                        @csrf\n                    \u003c/form\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nNext, open the `resources/views/auth/login.blade.php` file and replace the file with the following:\n\n```php\n    \u003c!-- File: ./resources/views/auth/login.blade.php --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"{{ str_replace('_', '-', app()-\u003egetLocale()) }}\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003cmeta name=\"csrf-token\" content=\"{{ csrf_token() }}\"\u003e\n        \u003ctitle\u003eDashboard Login | {{ config('app.name') }}\u003c/title\u003e\n        \u003cscript src=\"{{ asset('js/app.js') }}\" defer\u003e\u003c/script\u003e\n        \u003clink rel=\"dns-prefetch\" href=\"//fonts.gstatic.com\"\u003e\n        \u003clink href=\"{{ asset('vendor/fontawesome-free/css/all.min.css') }}\" rel=\"stylesheet\"\u003e\n        \u003clink href=\"https://fonts.googleapis.com/css?family=Nunito:200,200i,300,300i,400,400i,600,600i,700,700i,800,800i,900,900i\" rel=\"stylesheet\"\u003e\n        \u003clink href=\"{{ asset('css/sb-admin-2.min.css') }}\" rel=\"stylesheet\"\u003e\n    \u003c/head\u003e\n    \u003cbody class=\"bg-gradient-primary\"\u003e\n        \u003cdiv class=\"container\"\u003e\n            \u003cdiv class=\"row justify-content-center\"\u003e\n                \u003cdiv class=\"col-xl-10 col-lg-12 col-md-9\"\u003e\n                    \u003cdiv class=\"card o-hidden border-0 shadow-lg my-5\"\u003e\n                        \u003cdiv class=\"card-body p-0\"\u003e\n                            \u003cdiv class=\"row\"\u003e\n                                \u003cdiv class=\"col-lg-6 d-none d-lg-block\"\u003e\n                                    \u003cimg src=\"https://source.unsplash.com/K4mSJ7kc0As/464x577\"\u003e\n                                \u003c/div\u003e\n                                \u003cdiv class=\"col-lg-6\"\u003e\n                                    \u003cdiv class=\"p-5 d-none\" id=\"loginApprovalQueue\"\u003e\n                                        \u003cdiv class=\"w-50 my-5 mx-auto mobilePhone\"\u003e\n                                            \u003cimg src=\"{{ asset('img/approval-mobile.svg') }}\" class=\"w-100\"\u003e\n                                        \u003c/div\u003e\n                                        \u003ch5 class=\"text-center text-primary\"\u003eWe sent an approval request to your registered devices\u003c/h5\u003e\n                                        \u003csmall class=\"d-block text-secondary text-center\"\u003e\n                                            To log in, open the dashboard app on one of your registered devices and approve the login request.\n                                        \u003c/small\u003e\n                                        \u003cdiv class=\"text-center mt-3\"\u003e\n                                            \u003cimg src=\"{{ asset('/img/spinner.svg') }}\" alt=\"\"\u003e\n                                        \u003c/div\u003e\n                                    \u003c/div\u003e\n                                    \u003cdiv class=\"p-5\" id=\"loginFormWrapper\"\u003e\n                                        \u003cdiv class=\"text-center\"\u003e\n                                            \u003ch1 class=\"h4 text-gray-900 mb-4\"\u003eLog in\u003c/h1\u003e\n                                        \u003c/div\u003e\n                                        \u003cform method=\"POST\" action=\"{{ route('login') }}\" class=\"user\" id=\"authenticationForm\"\u003e\n                                            @csrf\n                                            \u003cdiv class=\"form-group\"\u003e\n                                                \u003cinput type=\"email\" class=\"form-control form-control-user\" id=\"email\" aria-describedby=\"emailHelp\" placeholder=\"Email Address\" name=\"email\" value=\"{{ old('email') }}\" required autofocus\u003e\n                                            \u003c/div\u003e\n                                            \u003cdiv class=\"form-group\"\u003e\n                                                \u003cinput type=\"password\" class=\"form-control form-control-user\" id=\"password\" placeholder=\"Password\" name=\"password\" required\u003e\n                                            \u003c/div\u003e\n                                            \u003cdiv class=\"form-group\"\u003e\n                                                \u003cdiv class=\"custom-control custom-checkbox small\"\u003e\n                                                    \u003cinput type=\"checkbox\" class=\"custom-control-input\" id=\"remember\" name=\"remember\" {{ old('remember') ? 'checked' : '' }}\u003e\n                                                    \u003clabel class=\"custom-control-label\" for=\"remember\"\u003eRemember Me\u003c/label\u003e\n                                                \u003c/div\u003e\n                                            \u003c/div\u003e\n                                            \u003cbutton type=\"submit\" class=\"btn btn-primary btn-user btn-block\"\u003e\n                                                Login\n                                            \u003c/button\u003e\n                                            \u003chr\u003e\n                                            \u003ca href=\"index.html\" class=\"btn btn-google btn-user btn-block\"\u003e\n                                                \u003ci class=\"fab fa-google fa-fw\"\u003e\u003c/i\u003e Login with Google\n                                            \u003c/a\u003e\n                                            \u003ca href=\"index.html\" class=\"btn btn-facebook btn-user btn-block\"\u003e\n                                                \u003ci class=\"fab fa-facebook-f fa-fw\"\u003e\u003c/i\u003e Login with Facebook\n                                            \u003c/a\u003e\n                                        \u003c/form\u003e\n                                        \u003chr\u003e\n                                        @if (Route::has('password.request'))\n                                        \u003cdiv class=\"text-center\"\u003e\n                                            \u003ca class=\"small\" href=\"{{ route('password.request') }}\"\u003eForgot Password?\u003c/a\u003e\n                                        \u003c/div\u003e\n                                        @endif\n                                        \u003cdiv class=\"text-center\"\u003e\n                                            \u003ca class=\"small\" href=\"{{ route('register') }}\"\u003eCreate an Account!\u003c/a\u003e\n                                        \u003c/div\u003e\n                                    \u003c/div\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"{{ asset('vendor/jquery/jquery.min.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ asset('vendor/bootstrap/js/bootstrap.bundle.min.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ asset('vendor/jquery-easing/jquery.easing.min.js') }}\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ asset('js/sb-admin-2.min.js') }}\"\u003e\u003c/script\u003e\n    \n        \u003cscript type=\"text/javascript\"\u003e\n        const showApprovalAndListenForApproval = callback =\u003e {\n            $('#loginFormWrapper').addClass('d-none');\n            $('#loginApprovalQueue').removeClass('d-none');\n    \n            Echo.channel('auth-request')\n                .listen('.approval-granted', e =\u003e callback(e.hash));\n        };\n    \n        const getLoginCredentials = () =\u003e {\n            return {\n                email: $('#email').val(),\n                password: $('#password').val(),\n                remember: $('#remember').val()\n            }\n        };\n    \n        $(document).ready(() =\u003e {\n            $('#authenticationForm').on('submit', e =\u003e {\n                e.preventDefault();\n    \n                const { email, password, remember } = getLoginCredentials();\n    \n                axios.post('/login/confirm', {email, password, remember })\n                    .then(() =\u003e {\n                        showApprovalAndListenForApproval(hash =\u003e {\n                            axios.post('/login/authorize', { email, password, remember, hash })\n                                .then(() =\u003e (window.location = '/home'))\n                                .catch(() =\u003e alert('Invalid authorization. Please try again.'));\n                        });\n                    })\n                    .catch(() =\u003e alert('Invalid login credentials!'));\n            })\n        })\n        \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nAbove we have defined the login page, based on the template we downloaded earlier. We have also added Laravel specific login logic to the code. More importantly, note that we have some custom JavaScript at the bottom of the page.\n\nIn this script, we capture the login event and then use [Axios](https://github.com/axios/axios) to send the login request to the backend. When we receive a valid response, we display the login confirmation page so the user knows they have to approve the login from their device.\n\nAlso above, we use Laravel Echo to start listening for realtime messages from the Pusher API, we will get to this later. For us to have Echo, we need to install it and build the JavaScript file.\n\n### Adding assets and building our JavaScript file\n\nFirst, open the `app.js` file in the `resources/js` directory and replace the contents with the following:\n\n```js\n    // File: ./resources/js/app.js\n    window.axios = require('axios');\n    window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n    \n    let token = document.head.querySelector('meta[name=\"csrf-token\"]');\n    \n    if (token) {\n        window.axios.defaults.headers.common['X-CSRF-TOKEN'] = token.content;\n    } else {\n        console.error('CSRF token not found: https://laravel.com/docs/csrf#csrf-x-csrf-token');\n    }\n    \n    import Echo from 'laravel-echo';\n    \n    window.Pusher = require('pusher-js');\n    window.Echo = new Echo({\n        broadcaster: 'pusher',\n        key: process.env.MIX_PUSHER_APP_KEY,\n        cluster: process.env.MIX_PUSHER_APP_CLUSTER,\n        encrypted: true\n    });\n```\n\nNext, in your terminal run the following commands to install dependencies and build our JS file.\n\n```\n    $ npm install laravel-echo pusher-js\n    $ npm install\n    $ npm run dev\n```\n\nNext, unzip the downloaded template. Copy the following directories as seen below into the `public` directory:\n\n\n- Copy the `.css` files from `css` to the `public/css` directory\n- Copy the `.js` files (including the `demo` directory) from `js` to the `public/js` directory\n- Copy the `.svg` file in `img` to the `public/img` directory\n- Copy the `vendor` directory to the `public` directory.\n- Copy the `approval-mobile.svg` and `spinner.svg` from [here](https://github.com/neoighodaro/realtime-login-approval-system/tree/master/dashboard/public/img).\n\nThat is all the assets we will be needing from the theme.\n\n\n## Running our application\n\nWhen the build is complete, we can now run our application. In your terminal, run the following command to start a new PHP server for our application:\n\n```\n    $ php artisan serve\n```\n\nNow when you visit http://127.0.0.1:8000 you should see the login page for the application. It won’t work yet. We will make it work in the next part of the article.\n\n![laravel-ios-login-1-3](//images.ctfassets.net/1es3ne0caaid/73IIx5otBJoOQlLeK5yyb3/11c8b2afeb16e4cc9aa0619f449efd08/laravel-ios-login-1-3.png)\n\n## Conclusion\n\nIn this part of the tutorial, we set up the application and added the login page. \n\nIn the [next part](https://pusher.com/tutorials/login-approval-laravel-ios-part-2), we will be making the login functionality work and also adding a dashboard page.\n\nThe source code to the application is available on [GitHub](https://github.com/neoighodaro/realtime-login-approval-system).","metaTitle":"Build a login approval system with Laravel and iOS - Part 1","metaDescription":"This three-part series will walk you through building a simple login approval system. Create a dashboard behind a login with Laravel and an iOS app. When a user tries to log in to the web dashboard, they receive an iOS notification to approve or deny the login. In part one, set up the dashboard."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"7pcDRufncqf98wB51cNZq5","type":"Entry","createdAt":"2019-03-29T16:59:31.886Z","updatedAt":"2019-03-29T16:59:31.886Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Creating a Laravel Logger - Part 6: Creating our web application","url":"laravel-logger-part-6","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/logger","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}}],"reviewDate":"2019-03-29","description":"In this six-part series, build a Laravel error logging service. You will create a custom Laravel package to include in Laravel apps, along with web, Android and iOS frontends. Alerts will publish in realtime, featuring push notifications to mobile. In part six, build the web frontend.","prerequisite":"For this part of the series, you will need PHP 7.13+, Laravel 5.7+ and Composer installed on your machine.","content":"In this sixth and final part of our the series, we will build a simple web application to receive realtime updates when logs are pushed from the main Laravel app created in the first part. \n\nIn the [previous part](https://pusher.com/tutorials/laravel-logger-part-5) of this series, we created the iOS application that would be responsible for log monitoring on Apple devices. It also had the ability to receive push notifications from the application when the log level was an error.\n\nWe will build a web application using Vue.js and Laravel. Here is a demo of what you will build:\n\n![laravel-log-6-1](//images.ctfassets.net/1es3ne0caaid/1f2Cl5MKf8LYTTqAFX2dMH/c0492667ec8bd41fcbb4f7f0feb1032b/laravel-log-6-1.gif)\n\n\n## Requirements\n\nTo follow along with this series you need the following things:\n\n- Completed previous parts of the series.\n- Laravel installed on your local machine. [Installation guide](https://laravel.com/docs/5.7/installation).\n- Knowledge of PHP and the Laravel framework.\n- Composer installed on your local machine. [Installation guide](https://getcomposer.org/doc/00-intro.md#installation-linux-unix-macos).\n- [The latest version of Android Studio](https://developer.android.com/studio/install) installed on your machine (If you are building for Android).\n- Knowledge of Kotlin and the Android Studio IDE.\n- [The latest version of Xcode](https://developer.apple.com/xcode/) installed on your machine (If you are building for iOS).\n- Knowledge of the Swift programming language and the Xcode IDE.\n- A Pusher application. [Create one here](https://pusher.com).\n- A Pusher Beams application. [Create one here](https://dash.pusher.com).\n\n\n## Creating the project\n\nWe will start by creating a new Laravel app. Run this command in any directory of your choice:\n\n```\n    $ laravel new web_logging_client\n```\n\nThe command above will create a new Laravel project.\n\n\n## Building our user interface\n\nAfter creating and installing our Laravel application and its required dependencies, open the `resources/views` and replace the codes in the `welcome.blade.php` file with this:\n\n```php\n    \u003c!-- File: ./resources/views/index.blade.php --\u003e\n    \u003c!doctype html\u003e\n    \u003chtml\u003e\n        \u003chead\u003e\n            \u003cmeta charset=\"utf-8\"\u003e\n            \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n            \u003ctitle\u003ePush Logger\u003c/title\u003e\n            \u003c!-- Fonts --\u003e\n            \u003clink href=\"https://fonts.googleapis.com/css?family=Nunito:200,600\" rel=\"style         sheet\" type=\"text/css\"\u003e\n            \u003c!-- Styles --\u003e\n            \u003clink rel=\"stylesheet\" href=\"{{ asset('css/app.css')}}\"\u003e\n            \u003cstyle\u003e\n                html,\n                body {\n                    overflow-x: hidden; /* Prevent scroll on narrow devices */\n                }\n                .position-ref {\n                    position: relative;\n                }\n                .top-right {\n                    position: absolute;\n                    right: 10px;\n                    top: 18px;\n                }\n                .content {\n                    text-align: center;\n                }\n                .title {\n                    font-size: 84px;\n                }\n                .m-b-md {\n                    margin-bottom: 30px;\n                }\n            \u003c/style\u003e\n        \u003c/head\u003e\n        \u003cbody\u003e\n            \u003cdiv class=\"content\"\u003e\n                \u003cdiv class=\"title m-b-md\"\u003e\n                    Push Logger\n                \u003c/div\u003e\n                \u003cdiv id=\"logs\" class=\"row justify-content-md-center\"\u003e\n                    \u003cdiv class=\"col-lg-8\"\u003e\n                        \u003cdiv class=\"alert alert-success\" role=\"alert\"\u003e\n                        This is a primary alert—check it out!\n                        \u003c/div\u003e\n                        \u003cdiv class=\"alert alert-warning\" role=\"alert\"\u003e\n                        This is a secondary alert—check it out!\n                        \u003c/div\u003e\n                        \u003cdiv class=\"alert alert-info\" role=\"alert\"\u003e\n                        This is a success alert—check it out!\n                        \u003c/div\u003e   \n                    \u003c/div\u003e       \n                \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cscript src=\"js/app.js\"\u003e\u003c/script\u003e\n        \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIf you run your app using:\n\n```\n    $ php artisan serve\n```\n\nYou should see something like this:\n\n![laravel-log-6-2](//images.ctfassets.net/1es3ne0caaid/6JHxHTZP5uNqs1wVGTs7ZZ/705692b1ebdcf71622f375b22ef040d7/laravel-log-6-2.png)\n\nThis shows logs with dummy data inserted already. This gives us an idea of what our app will look like when logs are displayed on the page.\n\nWe will now use to add Vue.Js to the project. To do that, we need to create a Vue component. Add this script just before the closing `body` tag in the `welcome.blade.php` file:\n\n```javascript\n    \u003cscript\u003e\n        var logs = [];\n    \n        Vue.component('pusher-logger', {\n            data() {\n                return { logs }\n            },\n            methods: {\n                // Methods go here\n            }, \n            template: ``\n        });\n    \n        new Vue({\n          el: \"#logs\"\n        })\n    \u003c/script\u003e\n```\n\nWe put the script tags at the end of the body so that they are executed in order after the DOM is loaded. In this snippet, we have the `logs` array declared to hold our log messages. \n\nNow, we have a `pusher-logger` Vue component created. This component can be used as an HTML tag like so:\n\n```html\n    \u003cpusher-logger\u003e \u003c/pusher-logger\u003e\n```\n\nThe `pusher-logger` component has the `data` attribute that hosts the data we want Vue to render. In our own case, we return just the logs.\n\nThe `methods` object is another attribute of the Vue component. We use it to define the behaviors of a component. The `template` property holds the HTML markup for our component, we will update this part soon enough.\n\nFinally, we initialized a Vue root component on `#logs`. Notice that in the `welcome.blade.php` file, you will notice that there is a `div` with a class name - `logs`. This is the part that will show our logs to the user.\n\nNext, update the `template` object of the Vue component like so:\n\n```html\n    template: `\n      \u003cdiv class=\"col-lg-8\"\u003e\n        \u003cdiv v-for=\"log in logs\" class=\"alert\" v-bind:class= \"checkLevel(log.loglevel)\"\n         role=\"alert\"\u003e\n            @{{ log.message }}\n        \u003c/div\u003e  \n        \u003cdiv v-show=\"logs.length == 0\"\u003e\n            No Logs Dispatched\n        \u003c/div\u003e                              \n      \u003c/div\u003e\n    `\n```\n\nThe template property now returns a rendered list of the logs and if the logs array is empty at `logs.length == 0` we show **No Logs Dispatched**.\n\nThe `{{ }}` braces are used both by Vue and Laravel Blade to render data. So whenever using Vue inside a blade file append an @ character to braces `{{ }}`.\n\nNext, add this method to the `methods` object of the Vue component :\n\n```javascript\n    // [...]\n    \n    methods: {\n      checkLevel(loglevel) {\n        switch(loglevel) {\n            case 'info':\n                return 'alert-info'\n            case 'warning':\n                return 'alert-warning'\n            case 'error':\n                return 'alert-danger'\n            default:\n                return 'alert-default'\n        }\n      }\n    }\n    \n    // [...]\n```\n\nIn this function, we check the log level to return different alert types. This will change the behavior of the component based on the log level.\n\nNow, still inside the `welcome.blade.php` view file, update the `div` section with the ID `logs` with this snippet below:\n\n```html\n    \u003cdiv id=\"logs\" class=\"row justify-content-md-center\"\u003e      \n      \u003cpusher-logger\u003e \u003c/pusher-logger\u003e\n    \u003c/div\u003e \n```\n\nHere, we replaced the former logs snippet with the `pusher-logger` `HTML` tag which is a representation of the `pusher-logger` Vue component we created earlier.\n\n\n## Adding realtime functionality\n\nNow let’s enable realtime log updates using Pusher Channels. Before the closing `body` tag, just after the inclusion of the `app.js` script, add this script:\n\n```javascript\n    \u003cscript src=\"https://js.pusher.com/4.3/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n      let pusher = new Pusher('PUSHER_APP_KEY', {\n        cluster: 'PUSHER_APP_CLUSTER',\n        forceTLS: true\n      });\n    \n      // subscribe to the channel the log is broadcasted on\n      let channel = pusher.subscribe('log-channel');\n    \n      // Subscribe to pushlogger event \n      channel.bind('log-event', function (log) {\n        logs.push(log);\n      });\n    \u003c/script\u003e\n```\n\n\u003e Replace `PUSHER_APP_KEY` and `PUSHER_APP_CLUSTER` with their actual values.\n\nIn the code above, we are using the Pusher’s library to listen for log updates on the log-channel pusher channel and the `log-event` event. Whenever any of the events are triggered, we get an update of the log message and level in realtime.\n\nYou can run your app by running this command:\n\n```\n    $ php artisan serve \n```\n\nWe also need to start a development server on the previous application so we can dispatch logs. Be sure to run it on another port:\n\n```\n    $ php artisan serve --port=9000\n```\n\nHere is how our app should look like:\n\n![laravel-log-6-1](//images.ctfassets.net/1es3ne0caaid/1f2Cl5MKf8LYTTqAFX2dMH/c0492667ec8bd41fcbb4f7f0feb1032b/laravel-log-6-1.gif)\n\n## Conclusion\n\nWe have successfully built our final client app and come to the end of our six-part tutorial series. We have explored various technologies such as Laravel, Vue.js, Swift and Kotlin while using them to showcase Pusher’s realtime functions.\n\nThe source code to the code is available on [GitHub](https://github.com/neoighodaro/logger).","metaTitle":"Creating a Laravel Logger - Part 6","metaDescription":"In this six-part series, build a Laravel error logging service. You will create a custom Laravel package to include in Laravel apps, along with web, Android and iOS frontends. Alerts will publish in realtime, featuring push notifications to mobile."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"h79tj0xHwzei8P5ACqzuJ","type":"Entry","createdAt":"2019-03-28T18:44:34.246Z","updatedAt":"2019-03-28T18:44:34.246Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Creating a Laravel Logger - Part 5: Creating our iOS application","url":"laravel-logger-part-5","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/logger","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2019-03-28","description":"In this six-part series, build a Laravel error logging service. You will create a custom Laravel package to include in Laravel apps, along with web, Android and iOS frontends. Alerts will publish in realtime, featuring push notifications to mobile. In part five, build the iOS app.","prerequisite":"For this part of the series you will need the latest version of Xcode installed on your machine.","content":"In this tutorial of the series, we will build an iOS app for our logger system. Just like the Android app, it will display logs in a list and receive notifications, particularly for error logs. \n\nHere is the demo of what we will build:\n\n![laravel-log-5-1](//images.ctfassets.net/1es3ne0caaid/2kSyAkfXSWxIX0T0pj6ZO9/7433255101b5c652c731311246c0d79d/laravel-log-5-1.gif)\n\nLet’s get started.\n\n\u003e In the [previous part](https://pusher.com/tutorials/laravel-logger-part-4) of the series, we created the Android client for our log monitor. It helps us visualize logs and also displays push notifications for error messages.\n\n\n## Requirements\n\nTo follow along with this series you need the following things:\n\n- Completed previous parts of the series.\n- Laravel installed on your local machine. [Installation guide](https://laravel.com/docs/5.7/installation).\n- Knowledge of PHP and the Laravel framework.\n- Composer installed on your local machine. [Installation guide](https://getcomposer.org/doc/00-intro.md#installation-linux-unix-macos).\n- [The latest version of Android Studio](https://developer.android.com/studio/install) installed on your machine (If you are building for Android).\n- Knowledge of Kotlin and the Android Studio IDE.\n- [The latest version of Xcode](https://developer.apple.com/xcode/) installed on your machine (If you are building for iOS).\n- Knowledge of the Swift programming language and the Xcode IDE.\n- A Pusher application. [Create one here](https://pusher.com).\n- A Pusher Beams application. [Create one here](https://dash.pusher.com).\n\n\n## Creating the project\n\nOpen Xcode and create a new iOS project. Choose the **Single View App** template like this:\n\n![laravel-log-5-2](//images.ctfassets.net/1es3ne0caaid/2OmIDkIopoYaTJzv23NMoC/4bdff3d8b08e5ec2923e8cdc863497ff/laravel-log-5-2.png)\n\nAfter this, you then enter a product name - for example, `LoggerClient`, team name, and organization details. Choose Swift as the default language and select **Next**. Select the directory you want your app to be stored and wait for the project to complete its initial build.\n\nOnce the project is ready, close Xcode, and create a `Podfile` in the root directory of your app. To do this, run the following command in the root directory of your application:\n\n```\n    $ pod init\n```\n\nWe will insert the dependencies we will use in this project into this file. The Podfile should look like this:\n\n```\n    # File: ./Podfile\n    target 'LoggerClient' do\n      use_frameworks!\n    \n      pod 'PusherSwift'\n      pod 'PushNotifications'\n    end\n```\n\nHere, we added dependencies for Pusher Channels and Pusher Beams. Next, run this command still in the main app directory:\n\n```\n    $ pod install\n```\n\nThis will install the dependencies in your app. Once the installation is complete, open the `.xcworkspace` file located in the folder of your project in Xcode. This was generated after you installed the Podfile. \n\nNow, we are ready to start building.\n\n## Implementing push notifications\n\nTo enable notifications on our app, we need to set up a few things. Login to your [Apple Developer Account](https://developer.apple.com/) and create an APNs (Apple Push Notification service) key in the keys section. After creating the key, download it.\n\nNext, open the Pusher Beams instance created earlier in the series and select the iOS quick guide. Configure it with your key and Team ID from your developer account.\n\nFirst, we need to add the capability to our application. As seen below, you need to turn on the **Push Notifications** capability in the **Capabilities** tab of your target.\n\n![laravel-log-5-3](//images.ctfassets.net/1es3ne0caaid/1pVddPLjp9NZ9mT08hK2D9/8de9b9e2988473d8618bf2e25f115785/laravel-log-5-3.png)\n\nThis will create a `*.entitlements` file in your workspace. Next, open the `AppDelegate` file and replace the contents with the contents below:\n\n```swift\n    import UIKit\n    import PushNotifications\n    \n    @UIApplicationMain\n    class AppDelegate: UIResponder, UIApplicationDelegate {\n        var window: UIWindow?\n        let pushNotifications = PushNotifications.shared\n    \n        func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -\u003e Bool {\n            pushNotifications.start(instanceId: PUSHER_BEAMS_INSTACE_ID)\n            pushNotifications.registerForRemoteNotifications()\n            try? self.pushNotifications.subscribe(interest: \"log-interest\")\n            return true\n        }\n    \n        func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n            pushNotifications.registerDeviceToken(deviceToken)\n        }\n    }\n```\n\nAbove, we use the `PushNotifications` package to register the device to receive push notifications. This will trigger a one-time-only prompt for permission to allow your application to send push notifications. If the user grants this permission, your application will be able to send push notifications.\n\n\n\u003e Replace the placeholder above with the credentials on your Pusher Beams dashboard.\n\n\n## Implementing realtime logs\n\nThe next thing we will do is implement realtime logs in the app. Open the `Main.storyboard` file and delete the default `ViewController` scene. Drag a `TableViewController` element and drop on the empty light grey area. You should now have a bare `TableViewController` like this:\n\n![laravel-log-5-4](//images.ctfassets.net/1es3ne0caaid/3qvEecfosOiFW5e3M7iz5K/908cca9a9e09fc18fcdd3fc9d2ffb5df/laravel-log-5-4.png)\n\nSet the new controller as the initial controller in the attributes inspector.\n\n![laravel-log-5-5](//images.ctfassets.net/1es3ne0caaid/Bt3mIEfoZOSd1DJwdtRcg/724c31cc737db29bc77b5757dbd552b1/laravel-log-5-5.png)\n\nGo to your `ViewController` class and replace the `UIViewController` class with `UITableViewController` like this:\n\n```swift\n    class ViewController: UITableViewController {\n```\n\nGo back to your `Main.storyboard` file and choose a custom class for the view controller in the identity inspector. Select the just updated `ViewController` class.\n\nNow, we will design how each row on the table view will look like. Drag an `ImageView` and a label to the table view like this:\n\n![laravel-log-5-6](//images.ctfassets.net/1es3ne0caaid/6vDt5EyQuCltOYfdtGzzNO/7487d36d5f7aabdc23d3ef70961ba06f/laravel-log-5-6.png)\n\nNow, we will add constraints to them. Select the imageview and add the following constraints:\n\n![laravel-log-5-7](//images.ctfassets.net/1es3ne0caaid/7JSppqUn50jJAHMySt5brk/973ea2f1ae052f9f1eaa10f063011fb9/laravel-log-5-7.png)\n\nFrom the image, we added a left margin of 20, and the image is constrained to the label with a spacing of 10. We also gave the image a fixed width and height of 20. We also made sure the image is centered vertically\n\n![laravel-log-5-8](//images.ctfassets.net/1es3ne0caaid/33oOkj3q2FxY4GxeLQD6bs/b0bf7c6b4c872bfd79310da06dc845c5/laravel-log-5-8.png)\n\nNext, let us add constraints for the label. Just like you did for the imageview in the above image, add a vertical alignment to the label. Next, we add a constraint to the right of the parent view and a spacing of 10.\n\n![laravel-log-5-9](//images.ctfassets.net/1es3ne0caaid/47d4CbqGmytAe7JA3OdzkE/ec9c30b1fca5b4e73b8e7dc0fb569511/laravel-log-5-9.png)\n\nStill for the label, set the **Line Break** to word wrap and **Lines** to 0 in the attributes inspector like this:\n\n![laravel-log-5-10](//images.ctfassets.net/1es3ne0caaid/5h9gamM26igy1aslEqI3Uw/d8d94374341533e617b55cbb9a1070c5/laravel-log-5-10.png)\n\nThis is to enable our text to wrap properly in case there are excesses. Now, let us create some other helping files for our `TableView`. The first will be a model class named `LogModel`. Create a new class with the name and paste this:\n\n```swift\n    // File: ./LogModel.swift\n    import Foundation\n    import UIKit\n    \n    class LogModel {\n    \n        var logMessage: String?\n        var logLevel: String?\n    \n    }\n```\n\nThis class represents the data each row will hold which is the log message and the log level. Next, we will create a class for the table cell. Create a class called `TableCell` and paste this:\n\n```swift\n    // File: ./TableCell.swift\n    import Foundation\n    import UIKit\n    \n    class TableCell: UITableViewCell {\n    \n        @IBOutlet weak var labelLogMessage: UILabel!\n    \n        @IBOutlet weak var imageLogLevel: UIImageView!\n    \n        func setValues(item:LogModel) {\n    \n            labelLogMessage.text = item.logMessage\n            imageLogLevel.image = UIImage(named:\"LogLevel\")!.withRenderingMode(.alwaysTemplate)\n    \n            if (item.logLevel == \"warning\") {\n                imageLogLevel.tintColor = UIColor.yellow\n            } else if (item.logLevel == \"info\") {\n                imageLogLevel?.tintColor = UIColor.blue\n            } else if (item.logLevel == \"error\") {\n                imageLogLevel.tintColor = UIColor.red\n            }\n        }\n    }\n```\n\n\u003e You should link the `@IBOutlet` properties to the elements on the layout.\n\nIn this class, we created a `setValues` method that assigns the values from our model to the UI elements. We used an image asset (a rectangular object) called `LogLevel`. Depending on the log level, we change the color of the image. You can get the image from the GitHub repo for this article.\n\nNow, go to the table view in the `Main.storyboard` file and select the just created `TableCell` as its class.\n\n![laravel-log-5-11](//images.ctfassets.net/1es3ne0caaid/583XMqMe2o8B9e94TLA6CU/93416c5c6e351d768cbbc65a238dd85b/laravel-log-5-11.png)\n\nNow, open your `ViewController` class and replace this:\n\n```swift\n    // File: ./ViewController.swift\n    import UIKit\n    import PusherSwift\n    \n    class ViewController: UITableViewController {\n    \n        var logMessageList = [LogModel]() {\n            didSet {\n                self.tableView.reloadData()\n            }\n        }\n    \n        var pusher:Pusher!\n    \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return logMessageList.count\n        }\n    \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            let currentItem = logMessageList[indexPath.row]\n            let logCell = tableView.dequeueReusableCell(withIdentifier: \"logCell\") as! TableCell\n    \n            logCell.setValues(item: currentItem)\n    \n            return logCell\n        }\n    \n        override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -\u003e CGFloat {\n            return 50\n        }\n    \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            setupPusher()\n        }\n    }\n```\n\nIn the snippet above, we first declared a list named `logMessageList` for items in the table view. Whenever this list is modified, we reload the table view. Next, we declared a pusher variable which we will use shortly.\n\nWe have three methods here that affect the table view, the first one is to tell the size of the table view - here, we returned the size of the `logMessageList`. The next method maps data from the list to each cell and the last method sets the height size for each cell.\n\nNext, in our `viewDidLoad` method, we called a method `setupPusher`. Create the method inside the class like so:\n\n```swift\n    func setupPusher(){\n        let options = PusherClientOptions(\n            host: .cluster(\"PUSHER_APP_CLUSTER\")\n        )\n    \n        pusher = Pusher(\n            key: \"PUSHER_APP_KEY\",\n            options: options\n        )\n    \n        let channel = pusher.subscribe(\"log-channel\")\n    \n        let _ = channel.bind(eventName: \"log-event\", callback: { (data: Any?) -\u003e Void in\n            if let data = data as? [String : AnyObject] {\n                let logModel = LogModel()\n                logModel.logLevel = data[\"loglevel\"] as? String\n                logModel.logMessage = data[\"message\"] as? String\n                self.logMessageList.append(logModel)\n            }\n        })\n        pusher.connect()\n    }\n```\n\nThis snippet initializes Pusher and listens to the relevant channel for updates. When we get a new object, we map it to our `LogModel` class and add it to the `logMessageList`.\n\n\u003e Replace the placeholders with the credentials from your dashboard.\n\nWhen you run your app, you should see something like this:\n\n![laravel-log-5-1](//images.ctfassets.net/1es3ne0caaid/2kSyAkfXSWxIX0T0pj6ZO9/7433255101b5c652c731311246c0d79d/laravel-log-5-1.gif)\n\n## Conclusion\n\nIn this part, we have created the iOS client for our logging monitoring. In the app, we display all logs being sent through the channels and the error logs are also sent as push notifications. In the [last part](https://pusher.com/tutorials/laravel-logger-part-6) of the series, we will create the web application for the log monitor.\n\nThe source code is available on [GitHub](https://github.com/neoighodaro/logger). ","metaTitle":"Creating a Laravel Logger - Part 5","metaDescription":"In this six-part series, build a Laravel error logging service. You will create a custom Laravel package to include in Laravel apps, along with web, Android and iOS frontends. Alerts will publish in realtime, featuring push notifications to mobile. In part five, build the iOS app."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"jEaXuLdzKPH7ykXqvJCUL","type":"Entry","createdAt":"2019-03-27T17:58:43.605Z","updatedAt":"2019-03-27T17:58:43.605Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Creating a Laravel Logger - Part 4: Creating our Android application","url":"laravel-logger-part-4","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/logger","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2019-03-27","description":"In this six-part series, build a Laravel error logging service. You will create a custom Laravel package to include in Laravel apps, along with web, Android and iOS frontends. Alerts will publish in realtime, featuring push notifications to mobile. In part four, build the Android app.","prerequisite":"For this part of the series, you will need Android Studio 3+ installed on your machine.","content":"In this part, we will build an Android application for our logger. The Android app will display logs in a list and receive notifications for errors. We will combine the functionalities of Pusher Channels and Pusher Beams to achieve this. \n\nIn the previous parts of this series, we have been able to create the Laravel application that will push all the logs to Pusher. We also added the option to push the logs to Beams which will be triggered only when the log level is critical (error).\n\nHere is how your app will look:\n\n![laravel-log-4-1](//images.ctfassets.net/1es3ne0caaid/5ZZnWcYsOTtZWCfawLixjd/ca5a2a461d71bc8dd7d09e834bbbe4f3/laravel-log-4-1.gif)\n\nLet’s dig in!\n\n## Requirements\n\nTo follow along with this series you need the following things:\n\n- Completed previous parts of the series. [Part 1](https://pusher.com/tutorials/laravel-logger-part-1), [Part 2](https://pusher.com/tutorials/laravel-logger-part-2), [Part 3](https://pusher.com/tutorials/laravel-logger-part-3)\n- Laravel installed on your local machine. [Installation guide](https://laravel.com/docs/5.7/installation).\n- Knowledge of PHP and the Laravel framework.\n- Composer installed on your local machine. [Installation guide](https://getcomposer.org/doc/00-intro.md#installation-linux-unix-macos).\n- [Android Studio](https://developer.android.com/studio/install) \u003e= 3.x installed on your machine (If you are building for Android).\n- Knowledge of Kotlin and the Android Studio IDE.\n- [Xcode](https://developer.apple.com/xcode/) \u003e= 10.x installed on your machine (If you are building for iOS).\n- Knowledge of the Swift programming language and the Xcode IDE.\n- A Pusher application. [Create one here](https://pusher.com).\n- A Pusher Beams application. [Create one here](https://dash.pusher.com).\n\n\n## Creating the project\n\nOpen Android Studio and create a new application. Enter the name of your application, for example, `AndroidLoggerClient` and enter a corresponding package name. You can use `com.example.androidloggerclient` for your package name.\n\nMake sure the **Enable Kotlin Support** check box is selected as this article is written in Kotlin. Next, select a suitable minimum SDK for your app, API 19 should be fine. Next, choose the **Empty Activity** template provided, stick with the `MainActivity` naming and click **Finish**. You may have to wait a while Gradle will prepare your project.\n\n\n## Completing Pusher Beams setup\n\nSince Pusher Beams for Android relies on Firebase, we need an FCM key and a `google-services.json` file for our project. Go to your [Firebase console](https://console.firebase.google.com/u/0/) and click the **Add project** card to initialize the app creation wizard.\n\nAdd the name of the project, read and accept the terms and conditions. After this, you will be directed to the project overview screen. Choose the **Add Firebase to your Android app** option. Enter the app’s package name - `com.example.androidloggerclient` (in our case), thereafter you download the `google-services.json` file. After downloading the file, skip the rest of the quick-start guide.\n\nAdd the downloaded file to the app folder of your project - `AndroidLoggerClient/app/`.\nTo get the FCM key, go to your project settings on Firebase, under the **Cloud Messaging** tab, copy out the server key.\n\n![laravel-log-4-2](//images.ctfassets.net/1es3ne0caaid/19SyFpyzO449HwZAhH2kbI/cbb5ea698d33754a2905ba46adf0525c/laravel-log-4-2.png)\n\nOpen the Pusher Beams instance created earlier in the series, start the Android quick start and enter your FCM key. After adding it, select **Continue** and exit the guide.\n\n\n## Adding app dependencies\n\nHere, we will add dependencies to be used for the application. First, open your project `build.gradle` file and add the google services classpath like so:\n\n```\n    // File: ./build.gradle\n    // [...]\n    \n    dependencies {\n      // other claspaths\n      classpath 'com.google.gms:google-services:4.2.0'  \n    }\n    \n    // [...]\n```\n\nNext, you open the main app `build.gradle` file and add the following:\n\n```\n    // File: ./app/build.gradle\n    // [...]\n    \n    dependencies {\n        // other dependencies\n        implementation 'com.pusher:pusher-java-client:1.8.0'\n        implementation 'com.android.support:recyclerview-v7:28.0.0'\n        implementation 'com.android.support:cardview-v7:28.0.0'\n        implementation 'com.google.firebase:firebase-messaging:17.3.4'\n        implementation 'com.pusher:push-notifications-android:0.10.0'\n    \n    }\n    apply plugin: 'com.google.gms.google-services'\n    \n    // [...]\n```\n\nThis snippet adds Pusher’s dependencies for the app. We equally have some dependencies from the Android support library to help us in building our UIs. Next, sync your Gradle files.\n\n\n## Implementing realtime logs\n\nWe will now implement realtime logs for the app. These logs will be displayed on a list, so let’s start by setting up our list. Open the `activity_main.xml` file and replace it with this:\n\n```xml\n    \u003c!-- File: ./app/src/main/res/layout/activity_main.xml --\u003e\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout \n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\"com.example.androidloggerclient.MainActivity\"\u003e\n    \n        \u003candroid.support.v7.widget.RecyclerView\n            android:id=\"@+id/recyclerView\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"match_parent\"\n            android:layout_marginTop=\"10dp\"\n            android:layout_marginLeft=\"10dp\"\n            android:layout_marginRight=\"10dp\"\n            app:layout_constraintLeft_toLeftOf=\"parent\"\n            app:layout_constraintRight_toRightOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\" /\u003e\n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nThis file represents the main screen of the app. Here we added a `recyclerview`, which represents the UI element for lists. We will configure it as we proceed. The next thing we will do is design how each item will look like. Create a new layout file `log_list_row.xml` and paste this:\n\n```xml\n    \u003c!-- File: ./app/src/main/res/layout/log_list_row.xml --\u003e\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.v7.widget.CardView \n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:layout_width=\"match_parent\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        app:cardCornerRadius=\"5dp\"\n        android:layout_margin=\"10dp\"\n        android:layout_height=\"wrap_content\"\u003e\n    \n        \u003candroid.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n            android:layout_width=\"match_parent\"\n            android:layout_margin=\"10dp\"\n            android:layout_height=\"match_parent\"\u003e\n    \n            \u003cTextView\n                android:id=\"@+id/logMessage\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                tools:text=\"Hello Logger!\"\n                /\u003e\n    \n            \u003cTextView\n                android:id=\"@+id/logLevel\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                app:layout_constraintTop_toBottomOf=\"@id/logMessage\"\n                tools:text=\"Warning\"\n                android:textSize=\"12sp\"\n                /\u003e\n    \n        \u003c/android.support.constraint.ConstraintLayout\u003e\n    \n    \u003c/android.support.v7.widget.CardView\u003e\n```\n\nThis layout contains a `cardview` that wraps two texts. One text is for the log message and the other for the log level. We will now create a corresponding data model class which will hold two strings. \n\nCreate a new class named `LogModel` and paste this:\n\n```kotlin\n    // File: ./app/src/main/java/com/example/androidloggerclient/LogModel.kt\n    data class LogModel(val logMessage:String , val logLevel:String)\n```\n\nNext, we need a class to manage items in the list, also called an adapter. Create a new class named `LoggerAdapter` and paste this:\n\n```kotlin\n    // File: ./app/src/main/java/com/example/androidloggerclient/LoggerAdapter.kt\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.TextView\n    \n    class LoggerAdapter : RecyclerView.Adapter\u003cLoggerAdapter.ViewHolder\u003e() {\n    \n        private var logList  = ArrayList\u003cLogModel\u003e()\n    \n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n            return ViewHolder(LayoutInflater.from(parent.context)\n                    .inflate(R.layout.log_list_row, parent, false))\n        }\n    \n        override fun onBindViewHolder(holder: ViewHolder, position: Int) =\n                holder.bind(logList[position])\n    \n        override fun getItemCount(): Int = logList.size\n    \n        fun addItem(model: LogModel) {\n            this.logList.add(model)\n            notifyDataSetChanged()\n        }\n    \n        inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n    \n            private val logMessage = itemView.findViewById\u003cTextView\u003e(R.id.logMessage)!!\n            private val logLevel = itemView.findViewById\u003cTextView\u003e(R.id.logLevel)!!\n    \n            fun bind(item: LogModel) = with(itemView) {\n    \n                logMessage.text = item.logMessage\n                logLevel.text = item.logLevel\n    \n                when {\n                    item.logLevel.toLowerCase() == \"warning\" -\u003e {\n                        logLevel.setTextColor(ContextCompat.getColor(context, R.color.yellow))\n                    }\n                    item.logLevel.toLowerCase() == \"error\" -\u003e {\n                        logLevel.setTextColor(ContextCompat.getColor(context, android.R.color.holo_red_dark))\n                    }\n                    item.logLevel.toLowerCase() == \"info\" -\u003e {\n                        logLevel.setTextColor(ContextCompat.getColor(context, android.R.color.holo_blue_light))\n    \n                    }\n    }\n    \n            }\n    \n        }\n    \n    }\n```\n\nThe adapter manages the list through its implemented methods marked with `override` . The `onCreateViewHolder` method uses our `log_list_row` layout to inflate each row of the list using a custom `ViewHolder` class created at the bottom of the snippet. The `onBindViewHolder` binds data to each item on the list, the `getItemCount` method returns the size of the list. The `addItem` method adds data to the list and refreshes it.\n\nAlso, in the above snippet, we add color to log level text based on the type of log. We imported the yellow into our `colors.xml` file, so add the color in your `colors.xml` file like so:\n\n```xml\n    \u003c!-- File: ./app/src/main/res/values/colors.xml --\u003e\n    \u003ccolor name=\"yellow\"\u003e#FFFF00\u003c/color\u003e\n```\n\nTo finish the first part of our implementation, open your `MainActivity.Kt` file and do the following:\n\nAdd the following imports:\n\n```kotlin\n    // File: ./app/src/main/java/com/example/androidloggerclient/MainActivity.kt\n    import android.support.v7.app.AppCompatActivity\n    import android.os.Bundle\n    import android.support.v7.widget.LinearLayoutManager\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import kotlinx.android.synthetic.main.activity_main.*\n    import org.json.JSONObject\n```\n\nThis imports external classes we will make use of. Then you initialize the adapter in the class like so:\n\n```kotlin\n    // File: ./app/src/main/java/com/example/androidloggerclient/MainActivity.kt\n    // [...]\n    \n    class MainActivity : AppCompatActivity() {\n    \n      private val mAdapter = LoggerAdapter()\n    \n      // [...]\n    \n    }\n```\n\nNext, you replace the `onCreate` method with this:\n\n```kotlin\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        setupRecyclerView()\n        setupPusher()\n    }\n```\n\nThis method is one of the lifecycle methods in Android. Here, we called two other methods to help set up the `recyclerview` and Pusher. Add the methods like so:\n\n```kotlin\n    private fun setupRecyclerView() {\n        with(recyclerView){\n            layoutManager = LinearLayoutManager(this@MainActivity)\n            adapter = mAdapter\n        }\n    }\n```\n\nThis assigns a layout manager and our initialized adapter instance to the `recyclerview`.\n\n```kotlin\n    private fun setupPusher() {\n        val options = PusherOptions()\n        options.setCluster(\"PUSHER_CLUSTER\")\n        val pusher = Pusher(\"PUSHER_API_KEY\", options)\n    \n        val channel = pusher.subscribe(\"log-channel\")\n    \n        channel.bind(\"log-event\") { channelName, eventName, data -\u003e\n            println(data)\n            val jsonObject = JSONObject(data)\n            val model = LogModel(jsonObject.getString(\"message\"), jsonObject.getString(\"loglevel\"))\n            runOnUiThread {\n                mAdapter.addItem(model)\n            }\n        }\n    \n        pusher.connect()\n    }\n```\n\nThis sets up Pusher to receive logs from a Pusher channel.\n\n\n\u003e Replace the Pusher placeholders with your own keys from your dashboard.\n\nFinally, add the internet permission to the `AndroidManifest.xml` file like so:\n\n```xml\n    \u003c!-- File: ./app/src/main/AndroidManifest.xml --\u003e\n    \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n```\n\nWith this, whenever we receive a log, it is added to the list through the adapter. With this, the app can display logs as soon as events come in. Now let us go a step further to show notifications when the log is an error log.\n\n## Implementing realtime notifications\n\nFirst, we will create an Android service to listen if we receive any notification and display it accordingly. \n\nCreate a new file named `NotificationsMessagingService` and paste this:\n\n```kotlin\n    // File: ./app/src/main/java/com/example/androidloggerclient/NotificationsMessagingService.kt\n    import android.app.NotificationChannel\n    import android.app.NotificationManager\n    import android.app.PendingIntent\n    import android.content.Intent\n    import android.os.Build\n    import android.support.v4.app.NotificationCompat\n    import android.support.v4.app.NotificationManagerCompat\n    import com.google.firebase.messaging.RemoteMessage\n    import com.pusher.pushnotifications.fcm.MessagingService\n    \n    class NotificationsMessagingService : MessagingService() {\n    \n        override fun onMessageReceived(remoteMessage: RemoteMessage) {\n            val notificationId = 10\n            val channelId  = \"logs\"\n            lateinit var channel:NotificationChannel\n            val intent = Intent(this, MainActivity::class.java)\n            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK\n            val pendingIntent = PendingIntent.getActivity(this, 0, intent, 0)\n            val mBuilder = NotificationCompat.Builder(this, channelId)\n                    .setSmallIcon(R.mipmap.ic_launcher)\n                    .setContentTitle(remoteMessage.notification!!.title!!)\n                    .setContentText(remoteMessage.notification!!.body!!)\n                    .setContentIntent(pendingIntent)\n                    .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n                    .setAutoCancel(true)\n    \n            if (Build.VERSION.SDK_INT \u003e= Build.VERSION_CODES.O) {\n                val notificationManager = applicationContext.getSystemService(NotificationManager::class.java)\n                val name = getString(R.string.channel_name)\n                val description = getString(R.string.channel_description)\n                val importance = NotificationManager.IMPORTANCE_DEFAULT\n                channel = NotificationChannel(\"log-channel\", name, importance)\n                channel.description = description\n                notificationManager!!.createNotificationChannel(channel)\n                notificationManager.notify(notificationId, mBuilder.build())\n    \n            } else {\n                val notificationManager =  NotificationManagerCompat.from(this)\n                notificationManager.notify(notificationId, mBuilder.build())\n            }\n    \n        }\n    \n    }\n```\n\nThe `onMessageReceived` method in this service is alerted when a notification comes in. When the notification comes in, we display it to the user. Next, we need to register the notification service in the `AndroidManifest.xml` file. You can do it by adding this to your file:\n\n```xml\n    \u003c!-- File: ./app/src/main/AndroidManifest.xml --\u003e\n    \u003capplication\n        \u003e\n        \u003c!-- [...] --\u003e    \n        \u003cservice android:name=\".NotificationsMessagingService\"\u003e\n            \u003cintent-filter android:priority=\"1\"\u003e\n                \u003caction android:name=\"com.google.firebase.MESSAGING_EVENT\" /\u003e\n            \u003c/intent-filter\u003e\n        \u003c/service\u003e\n    \n    \u003c/application\u003e\n```\n\nNext, let us setup Pusher beams in the `MainActivity` file. Create a method like so:\n\n```kotlin\n    private fun setupPusherBeams(){\n        PushNotifications.start(applicationContext, \"PUSHER_BEAMS_INSTANCE_ID\")\n        PushNotifications.subscribe(\"log-intrest\")\n    }\n```\n\n\u003e Replace the placeholder above with the actual credentials from your dashboard.\n\nThis initializes Pusher beams and subscribes to the `error-logs` interest. Next, add the method call to your `onCreate` method in the `MainActivity` class:\n\n```kotlin\n    override fun onCreate(savedInstanceState: Bundle?) {\n        // [...]\n    \n        setupPusherBeams()\n    }\n```\n\nIf you now run your app, you should have something like this:\n\n![laravel-log-4-1](//images.ctfassets.net/1es3ne0caaid/5ZZnWcYsOTtZWCfawLixjd/ca5a2a461d71bc8dd7d09e834bbbe4f3/laravel-log-4-1.gif)\n\n## Conclusion\n\nIn this part, we have created the Android client for our logging monitoring. In the app, we display all logs being sent through the channels and the error logs are also sent as push notifications. In the [next part](https://pusher.com/tutorials/laravel-logger-part-5) of the series, we will create the iOS application for the log monitor.\n\nThe source code is available on [GitHub](https://github.com/neoighodaro/logger).","metaTitle":"Creating a Laravel Logger - Part 4","metaDescription":"In this six-part series, build a Laravel error logging service. You will create a custom Laravel package to include in Laravel apps, along with web, Android and iOS frontends. Alerts will publish in realtime, featuring push notifications to mobile. In part four, build the Android app."}}],"defaultValue":"Channels \u0026 Beams","queryType":"tag","pages":3,"route":"/tutorials","query":{"product":"Channels","tag":"Beams","page":"1"}}},"page":"/tutorials","query":{"product":"Channels","tag":"Beams","page":"1"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=Beams&page=1 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:43:49 GMT -->
</html>