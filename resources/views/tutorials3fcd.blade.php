<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=JavaScript&page=11 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:46 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">290</span> tutorials for “<span class="css-npldjc ehwuahf2">JavaScript</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials512c.html?product=Beams&amp;tag=JavaScript" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials.html" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#C223CE" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#C223CE"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="JavaScript"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/html5-notification-api.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">HTML<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li></ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Use the HTML5 Notification API to provide realtime alerts</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This brief tutorial will show you how to create a web application that sends a browser alert every time a GitHub repo re...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/spotify-history-react-node.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Table</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">View your live Spotify history with React and Node</h3><p class="css-k12xad e5jrto45">Build a web app using Node and React to view your Spotify history. The app allows users to link up to their Spotify acco...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/photo-sharing-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Creating a photo sharing app with React Native</h3><p class="css-k12xad e5jrto45">Use React Native, Node.js and Imgur to create a photo sharing app. Users will be able to follow their friends and share ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-game-express.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live game updates site with Express</h3><p class="css-k12xad e5jrto45">Build a live blogging platform using Express and Vue, designed to post live updates of sports games. It features an admi...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-game-laravel.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live game updates site with Laravel</h3><p class="css-k12xad e5jrto45">Build a live blogging platform using Laravel and Vue, designed to post live updates of sports games. It features an admi...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/authorization-graphql.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">GraphQL</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Handling authorization in GraphQL</h3><p class="css-k12xad e5jrto45">This tutorial shows how to use GraphQL to manage authorization and user roles. You will build on a previous app to creat...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/memory-game-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a two-player memory game with React Native</h3><p class="css-k12xad e5jrto45">This tutorial will show you how to build a two-player memory game using React Native. Players sign in and are randomly a...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/microservice-problems-channels.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Solving microservice problems using Channels</h3><p class="css-k12xad e5jrto45">This article examines some common problems with microservice architecture, and evaluates several solutions, before looki...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chrome-extension-cryptocurrency-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a Chrome extension to track cryptocurrency prices - Part 2: Allowing user interaction</h3><p class="css-k12xad e5jrto45">This two part series will guide you through building, deploying and extending a Chrome extension. The extension displays...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialse640.html?tag=JavaScript&amp;page=10" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials700d.html?tag=JavaScript&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorials2429.html?tag=JavaScript&amp;page=9" class="css-za1ua3 edg0byb1">9</a><a href="tutorialse640.html?tag=JavaScript&amp;page=10" class="css-za1ua3 edg0byb1">10</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials3fcd.html?tag=JavaScript&amp;page=11" class="css-2wakph edg0byb1">11</a><a href="tutorials2ff0.html?tag=JavaScript&amp;page=12" class="css-za1ua3 edg0byb1">12</a><a href="tutorials846a.html?tag=JavaScript&amp;page=13" class="css-za1ua3 edg0byb1">13</a><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials3c54.html?tag=JavaScript&amp;page=33" class="css-5s6711 edg0byb1">33</a><a href="tutorials2ff0.html?tag=JavaScript&amp;page=12" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":290,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3A1qNBZ83Y2UYeMaaaiUim","type":"Entry","createdAt":"2018-11-16T00:37:19.036Z","updatedAt":"2018-11-16T00:37:19.036Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Use the HTML5 Notification API to provide realtime alerts","url":"html5-notification-api","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4Cn04Zjx284MSEoSumwUau","type":"Entry","createdAt":"2018-08-13T17:38:51.972Z","updatedAt":"2018-08-13T17:38:51.972Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ayooluwa Isaiah","url":"ayooluwa-isaiah","email":"ayisaiah@gmail.com","twitter":"https://twitter.com/AyIsaiah","github":"http://github.com/ayoisaiah","guestWriter":true}}],"projectRepo":"https://github.com/ayoisaiah/web-notifications-demo/","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-11-15","description":"This brief tutorial will show you how to create a web application that sends a browser alert every time a GitHub repo receives a push. You will use Node to create a simple server, ngrok to allow you to test locally, and GitHub webhooks to transmit the push event.","prerequisite":"You will need Node 6+ installed on your machine.","content":"This tutorial will describe how you can add realtime notifications to your own web app using [Pusher Channels](https://pusher.com/channels). I’ll demo this concept by building a small app that sends a notification whenever someone pushes code to a GitHub repository.\n\nRealtime notifications are a feature of many modern web applications. When utilized properly, they can be a great way to inform users about new activity in your web app so that they don’t miss it.\n\n## Prerequisites\n\nBefore you continue on with this tutorial, make sure you have [Node.js](https://docs.npmjs.com/getting-started/installing-node) (v6 or later), and npm installed on your machine. You also need to sign up for a [GitHub account](https://gtihub.com/new) and a [Pusher account](https://dashboard.pusher.com/accounts/sign_up) if you don’t have one already. Prior experience with the command line and with building Node.js applications is also required.\n\n## Set up the server\n\nLet’s start by setting up the server for the application. Before we start writing any code, create a new folder for this project in your filesystem and `cd` into it in your terminal application.\n\nRun the following command in your project directory to set up a new Node project:\n\n```\n    npm init -y\n```\n\nThis creates a `package.json` file in the current directory while skipping the questionnaire that would normally follow if you run the command without the `-y` flag.\n\nWe’ll be using Express to spin up a Node server along with a few other packages. Let’s install them all in one step:\n\n```\n    npm install express body-parser dotenv cors pusher --save\n```\n\nOnce the installation is complete, create a new `server.js` file at the root of your project directory and paste in the following code:\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config({ path: 'variables.env' });\n    \n    const express = require('express');\n    const bodyParser = require('body-parser');\n    \n    const app = express();\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: true }));\n    \n    app.set('port', process.env.PORT || 5000);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running → PORT ${server.address().port}`);\n    });\n```\n\nNext, create a `variables.env` file at the root of your project directory and add in the following:\n\n```\n    // variables.env\n    \n    PORT=5000\n```\n\nThe [dotenv](https://www.npmjs.com/package/dotenv) package loads environmental variables from this file into `process.env` so that they can easily be accessed in our code.\n\n\n## Set up Pusher Channels\n\nWe’ve already installed the Node SDK for Pusher Channels along with the other server dependencies, but we need to grab our application keys and use them in our code before anything can work.\n\nVisit the [Pusher account dashboard](https://dashboard.pusher.com/), select **Channels apps** on the sidebar and hit **Create Channels app** to create a new app. Then retrieve your credentials from the **API Keys** tab and add them to `variables.env` like this:\n\n```\n    // variables.env\n    \n    PORT=5000\n    PUSHER_APP_ID=\u003cyour app id\u003e\n    PUSHER_APP_KEY=\u003cyour app key\u003e\n    PUSHER_APP_SECRET=\u003cyour app secret\u003e\n    PUSHER_APP_CLUSTER=\u003cyour app cluster\u003e\n```\n\nNext, import the `pusher` package in `server.js` like this:\n\n``` javascript\n    // server.js\n    \n    ...\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true,\n    });\n    \n    const app = express();\n    ...\n```\n\nFinally, let’s set up a new route that’ll receive webhook events from GitHub, then we’ll trigger an event with Pusher so that our app frontend can send a new notification each time a new push event is triggered.\n\nAdd the following route in `server.js`:\n\n``` javascript\n    // server.js\n    \n    app.post('/events', (req, res) =\u003e {\n      pusher.trigger('github', 'push', {\n        payload: req.body,\n      });\n    \n      res.status(200).end();\n    });\n```\n\nWhen a `POST` request is received on the `/event` route, a new `push` event is triggered on the `github` channel and the data from GitHub is included in the event payload.\n\nSave the code in `server.js` and run `node server.js` in your terminal to start the server.\n\n## Expose your local server to the world with ngrok\n\nYour server is currently running locally which means that it’s only accessible on your machine. However, GitHub needs a publicly available URL otherwise it is unable to send webhook events.\n\nWe can use ngrok to expose a local server to the world, which means anyone will be able to access it even though its running locally on your machine.\n\nVisit the ngrok website to find out [how to install and set up ngrok](https://ngrok.com/download) on your computer. Once you have it installed, start an HTTP tunnel on port 5000 by running the following command in a new terminal window:\n\n```\n    ./ngrok http 5000\n```\n\nIf your webhook server is listening on another port, make sure to provide the correct port when starting the HTTP tunnel. You will be given a couple of URLs but you only need the last one which is on the secure (HTTPS) protocol.\n\n![html5-notification-ngrok](//images.ctfassets.net/1es3ne0caaid/5fA3FFdtZmMIGgqaGcykKE/4c37c47e165a4d1d66f0d0e80efd7a55/html5-notification-ngrok.png)\n\n## Set up a webhook on a GitHub repo\n\nCreate a new GitHub repository. Give it a name and click the green **Create repository** button at the bottom. I called mine `web-notifications-demo`.\n\n![html5-notification-github-1](//images.ctfassets.net/1es3ne0caaid/47GTehMyUMIEEyqsOSm8cW/b2cae0a3936006e1b62bf3d6a75f5c39/html5-notification-github-1.png)\n\nOnce the repository has been created, head to the **Settings** tab and click the **Webhooks** link on the left. Then click the **Add webhook** button on the far right.\n\n![html5-notification-github-2](//images.ctfassets.net/1es3ne0caaid/25GNTGYsJCU2EeqS4M6wGy/701288fa54ce1f02da1915a15b72d84f/html5-notification-github-2.png)\n\nUnder the **Payload URL** field, tack `/events` to the URL you received from Ngrok and change the value of the **Content type** field to **application/json**. You can leave the rest of the form as is and click the green **Add webhook** button at the bottom.\n\n![html5-notification-github-3](//images.ctfassets.net/1es3ne0caaid/kOmhZNOY2O8cA0eE2w6qA/9960aa6cf94eacc0416771314d389e96/html5-notification-github-3.png)\n\n## Set up application frontend\n\nWithin your project directory, create the following files by running the command below:\n\n```\n    touch index.html style.css main.js\n```\n\nOpen up `index.html` in your text editor and paste in the following code:\n\n``` html\n    // index.html\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"UTF-8\"\u003e\n      \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n      \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n      \u003ctitle\u003eRealtime Github Notifications\u003c/title\u003e\n      \u003clink rel=\"stylesheet\" href=\"style.css\" type=\"text/css\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003cmain class=\"app\"\u003e\n        \u003cheader class=\"header\"\u003e\n          \u003ch1\u003eRealtime Github Notifications\u003c/h1\u003e\n        \u003c/header\u003e\n        \u003cdiv class=\"container\"\u003e\n          \u003cbutton class=\"subscribe\" id=\"subscribe\"\u003eEnable notifications\u003c/button\u003e\n        \u003c/div\u003e\n      \u003c/main\u003e\n    \n      \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"main.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nNext, add the styles for the application by change the contents of `style.css` to look like this:\n\n``` css\n    // style.css\n    \n    html {\n      box-sizing: border-box;\n    }\n    \n    *, *::before, *::after {\n      box-sizing: inherit;\n      margin: 0;\n      padding: 0;\n    }\n    \n    body {\n      font-family: -apple-system, BlinkMacSystemFont, 'San Francisco', 'Helvetica Neue', Helvetica, Ubuntu, Roboto, Noto, 'Segoe UI', Arial, sans-serif;\n    }\n    \n    .header {\n      width: 100%;\n      height: 200px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      background-color: #4051B4;\n      padding: 50px;\n    }\n    \n    h1 {\n      color: #fbf7f1;\n      font-size: 50px;\n    }\n    \n    .container {\n      width: 100%;\n      max-width: 700px;\n      margin: 30px auto;\n      text-align: center;\n    }\n    \n    button {\n      padding: 15px;\n      border: 1px solid #a00f3f;\n      color: #fbf7f1;\n      background-color: #a00f3f;\n      box-shadow: rgba(13, 13, 13, 0.14) 0px 2px 2px 0px, rgba(13, 13, 13, 0.2) 0px 3px 1px -2px, rgba(13, 13, 13, 0.12) 0px 1px 5px 0px;\n      text-transform: uppercase;\n      font-weight: 700;\n      font-size: 20px;\n    }\n```\n\nFinally, add the following code to `main.js`:\n\n``` javascript\n    // main.js\n    \n    const grantPermission = () =\u003e {\n      if (!('Notification' in window)) {\n        alert('This browser does not support system notifications');\n        return;\n      }\n    \n      if (Notification.permission === 'granted') {\n        new Notification('You are already subscribed to web notifications');\n        return;\n      }\n    \n      if (\n        Notification.permission !== 'denied' ||\n        Notification.permission === 'default'\n      ) {\n        Notification.requestPermission().then(result =\u003e {\n          if (result === 'granted') {\n            const notification = new Notification(\n              'Awesome! You will start receiving notifications shortly'\n            );\n          }\n        });\n      }\n    };\n    \n    const showNotification = data =\u003e {\n      const title = `${data.pusher.name} pushed to the ${\n        data.repository.name\n      } repo`;\n    \n      new Notification(title);\n    };\n    \n    const pusher = new Pusher('\u003cyour app key\u003e', {\n      cluster: '\u003cyour app cluster\u003e',\n      encrypted: true,\n    });\n    \n    const channel = pusher.subscribe('github');\n    channel.bind('push', data =\u003e {\n      showNotification(data.payload);\n    });\n    \n    const subscribe = document.getElementById('subscribe');\n    subscribe.addEventListener('click', event =\u003e {\n      grantPermission();\n      subscribe.parentNode.removeChild(subscribe);\n    });\n```\n\nDon’t forget to replace the `\u003cyour app key\u003e` and `\u003cyour app cluster\u003e` placeholders with the appropriate values from your Pusher account dashboard.\n\nTo serve the app, install [http-server](https://www.npmjs.com/package/http-server) globally on your machine (`npm install -g http-server`) then run the command below from the root of your project directory to server the app on port 5001. Once done, open up http://localhost:5001 in your browser to view the application.\n\n```\n    http-server -p 5001\n```\n\nOnce the **ENABLE NOTIFICATIONS** button is clicked, you’ll get a prompt asking you to grant permission to show notifications. Make sure to grant that permission, otherwise you won’t get any notifications.\n\nIf you look at the code in `main.js` you will see that we are subscribed to the `github` channel so we will receive any `push` events once they are triggered. In the callback function, `showNotification()` is invoked which displays a realtime notification to the user whenever someone pushes code to the GitHub repo.\n\nFinally, make some changes to the GitHub repository you created earlier, commit the changes and push to GitHub. You should get a notification informing you of the new push activity.\n\n![html5-notification-demo](//images.ctfassets.net/1es3ne0caaid/6oxEp972QE8ico8IgUsoeG/a3d1ea90b236c6178232f7bae30191de/html5-notification-demo.png)\n\n## Conclusion\n\nWe’ve demonstrated how Pusher makes sending realtime web notifications much easier and how you can get started with it. All the code written in this tutorial is available [on GitHub](https://github.com/ayoisaiah/web-notifications-demo/) for you to check out and run locally.","metaTitle":"Use the HTML5 Notification API to provide realtime alerts","metaDescription":"This brief tutorial will show you how to create a web application that sends a browser alert every time a GitHub repo receives a push. You will use Node to create a simple server, ngrok to allow you to test locally, and GitHub webhooks to transmit the push event."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3m0gfzuNEsui62aYUI8QgI","type":"Entry","createdAt":"2018-11-14T19:23:28.246Z","updatedAt":"2018-11-14T19:23:28.246Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"View your live Spotify history with React and Node","url":"spotify-history-react-node","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4Cn04Zjx284MSEoSumwUau","type":"Entry","createdAt":"2018-08-13T17:38:51.972Z","updatedAt":"2018-08-13T17:38:51.972Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ayooluwa Isaiah","url":"ayooluwa-isaiah","email":"ayisaiah@gmail.com","twitter":"https://twitter.com/AyIsaiah","github":"http://github.com/ayoisaiah","guestWriter":true}}],"projectRepo":"https://github.com/ayoisaiah/music-history","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2018-11-14","description":"Build a web app using Node and React to view your Spotify history. The app allows users to link up to their Spotify account and view a list of tracks played, with new tracks being added as they play.","prerequisite":"You will need Node 6+ installed on your machine. Some knowledge of Node and React will be helpful.","content":"In this tutorial, we’ll be creating an application that displays your Spotify music history in realtime. Once you connect a Spotify account, it’ll display a list of your 10 most recently played tracks. Then it’ll keep updating that list as you play more songs. The final result will look like this:\n\n![spotify-history-demo](//images.ctfassets.net/1es3ne0caaid/37NQjj1rGw0kysyWwqqGk4/c787a45b5fa976e4a273824ff79502d1/spotify-history-demo.gif)\n\n## Prerequisites\n\nExperience with building Node.js and React applications is required to grasp the concepts explored in this tutorial. You also need Node.js (v6 and later) along with npm on your machine to run the commands and code included in this article. You can find installation instructions [here](https://www.npmjs.com/get-npm).\n\n## Getting started\n\nCreate a new folder for this project in your filesystem. You can call it `spotify-history` or just `spotify`. Open up your terminal and `cd` into the newly created directory. Next, run the command below to initialize a new Node.js project:\n\n```\n    npm init -y\n```\n\nThe above command creates a new `package.json` file in the current directory. Now let’s install the dependencies we’ll be needing to build the server component of our application.\n\nRun the following command in the terminal to install the required packages. I’ll explain what each one does as we progress through the tutorial.\n\n```\n    npm install express cors nedb dotenv node-cron node-fetch pusher --save\n```\n\nOnce the server dependencies have been installed, run the command below to install [create-react-app](https://github.com/facebook/create-react-app) globally on your machine. This tool helps us bootstrap React apps quickly with no build configuration.\n\n```\n    npm install -g create-react-app\n```\n\nOnce the installation completes, you'll have access to the `create-react-app` command that will be used to set up the React project. Next, run the following command from within the root of your project directory to create the frontend component of the app.\n\n```\n    create-react-app client\n```\n\nThis command creates a new `client` directory and installs all the packages that are needed to build and run a React application within it.\n\nNext, change into the newly created `client` directory and run the command below install some additional dependencies that we’ll be needing in our application frontend:\n\n```\n    npm install pusher-js date-fns --save\n```\n\nFinally, run `npm start` within the `client` directory to start the development server. It should be available at http://localhost:3000 or some other port if 3000 is not available on your machine.\n\n\n## Create the application frontend\n\nLet’s begin by changing up the code in  `client/src/App.js` to look like this:\n\n``` javascript\n    // client/src/App.js\n    \n    import React, { Component } from 'react';\n    import Pusher from 'pusher-js';\n    import format from 'date-fns/format';\n    import './App.css';\n    \n    class App extends Component {\n      constructor() {\n        super();\n        const urlParams = new URLSearchParams(window.location.search);\n        const isUserAuthorized = urlParams.has('authorized') ? true : false;\n    \n        this.state = {\n          isUserAuthorized,\n          musicHistory: [],\n        };\n      }\n      \n      render() {\n        const { isUserAuthorized, musicHistory } = this.state;\n        const connectSpotify = isUserAuthorized ? (\n          ''\n        ) : (\n          \u003ca href=\"http://localhost:5000/login\"\u003eConnect your Spotify account\u003c/a\u003e\n        );\n    \n        const TableItem = (item, index) =\u003e (\n          \u003ctr key={item.played_at}\u003e\n            \u003ctd\u003e{index + 1}\u003c/td\u003e\n            \u003ctd\u003e{item.track_name}\u003c/td\u003e\n            \u003ctd\u003e{format(item.played_at, 'D MMM YYYY, hh:mma')}\u003c/td\u003e\n          \u003c/tr\u003e\n        );\n    \n        const RecentlyPlayed = () =\u003e (\n          \u003cdiv className=\"recently-played\"\u003e\n            \u003ch2\u003eRecent Tracks\u003c/h2\u003e\n            \u003ctable className=\"table\"\u003e\n              \u003cthead\u003e\n                \u003ctr\u003e\n                  \u003cth\u003e#\u003c/th\u003e\n                  \u003cth\u003eSong title\u003c/th\u003e\n                  \u003cth\u003eTime\u003c/th\u003e\n                \u003c/tr\u003e\n              \u003c/thead\u003e\n              \u003ctbody\u003e{musicHistory.map((e, index) =\u003e TableItem(e, index))}\u003c/tbody\u003e\n            \u003c/table\u003e\n          \u003c/div\u003e\n        );\n    \n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003cheader className=\"header\"\u003e\n              \u003ch1\u003eSpotify Listening History\u003c/h1\u003e\n              \u003cp\u003eView your music history in realtime with Spotify and Pusher\u003c/p\u003e\n    \n              {connectSpotify}\n              {musicHistory.length !== 0 ? \u003cRecentlyPlayed /\u003e : null}\n            \u003c/header\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default App;\n```\n\nWe’ve initialized the state of the application with two values: `isUserAuthorized` which keeps track of whether the user has authenticated with Spotify or not via a URL parameter, and `musicHistory` which is where all the recently played tracks will be stored. If `isUserAuthorized` is set to false (which it is by default), a link that prompts the user to connect a Spotify account to the app will be displayed on the screen.\n\nLet’s change up the styles for the app in `client/src/App.css`:\n\n``` css\n    // client/src/App.css\n    \n    .App {\n      width: 100%;\n      max-width: 750px;\n      margin: 0 auto;\n      padding: 30px;\n      text-align: center;\n    }\n    \n    table {\n      width: 100%;\n      text-align: center;\n    }\n    \n    th,\n    td {\n      padding: 12px 15px;\n      border-bottom: 1px solid #E1E1E1; }\n    th:first-child,\n    td:first-child {\n      padding-left: 0; }\n    th:last-child,\n    td:last-child {\n    padding-right: 0; }\n```\n\n## Set up the server\n\nIn the root of your project directory, create a new `server.js` file and change its contents to look like this:\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config({ path: 'variables.env' });\n    \n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const cors = require('cors');\n    const Datastore = require('nedb');\n    const cron = require('node-cron');\n    const Pusher = require('pusher');\n    \n    const clientUrl = process.env.CLIENT_URL;\n    \n    const app = express();\n    \n    const db = new Datastore();\n    \n    app.use(cors());\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: true }));\n    \n    app.set('port', process.env.PORT || 5000);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running → PORT ${server.address().port}`);\n    });\n```\n\nNext, create a file called `variables.env` also in the root of your project folder. This is where all the environmental variables will be stored so that they can be made available on `process.env`. The `dotenv` package is what allows us to achieve this.\n\n```\n    // variables.env\n    \n    PORT=5000\n    CLIENT_URL=https://localhost:3000\n```\n\nThe `CLIENT_URL` variable is the URL where the React development server is available on. You can change the value if your app is running on another port.\n\n## Sign up for Spotify\n\nBefore you can access and use Spotify’s API, you need to [create a free account](https://www.spotify.com/signup/). You don’t need to be on the premium plan to follow through with this tutorial. Once you have done so, go to the [developer dashboard](https://developer.spotify.com/dashboard/) and log in to with your Spotify account. Accept the terms of service and create your first app by selecting any one of the three options presented.\n\n![spotify-history-signup](//images.ctfassets.net/1es3ne0caaid/3hE8aVYYzuK4MmOSYEAke2/4eafa968232a3138d01a4c6576e9f095/spotify-history-signup.png)\n\nFill the popup form as shown above and hit **Next** to move along. Hit **No** on the **Are you developing a commercial integration?** screen and tick all the checkboxes on the final screen before hitting the green **SUBMIT** button to create the app.\n\n![spotify-history-keys](//images.ctfassets.net/1es3ne0caaid/2IUr6YjSGcGGuSoA6EWUWw/ee5f5cc81c7f2800533cfa125dadb534/spotify-history-keys.png)\n\nOnce your app has been created, you will be redirected to the app page where you can access your Client ID and Client Secret tokens. You will find this at the top left of your screen. Also hit the **EDIT SETTINGS** button at the top right and add the redirect URI (http://localhost:5000/callback) in the popup form that appears, then hit the **ADD** button. Finally hit **SAVE** at the bottom of the form to save your settings.\n\n![spotify-history-settings](//images.ctfassets.net/1es3ne0caaid/7ykPNnlWrmukW4sO4KIQkC/f5c8528fdb9feb0c77d81f97269aa5ca/spotify-history-settings.png)\n\nAdd the following variables to your `variable.env` file:\n\n```\n    // variables.env\n    \n    SPOTIFY_CLIENT_ID=\u003cyour spotify client id\u003e\n    SPOTIFY_CLIENT_SECRET=\u003cyour spotify client secret\u003e\n    SPOTIFY_REDIRECT_URI=http://localhost:5000/callback\n```\n\nNext, create new `credentials.js` file in your project directory and change its contents to look like this:\n\n``` javascript\n    // credentials.js\n    \n    const spotify = {\n      client_id: process.env.SPOTIFY_CLIENT_ID,\n      client_secret: process.env.SPOTIFY_CLIENT_SECRET,\n      redirect_uri: process.env.SPOTIFY_REDIRECT_URI,\n    };\n    \n    module.exports = spotify;\n```\n\n## Create the authentication flow\n\nWe need to create a flow for authorizing users’ Spotify accounts to work with our app. We can do this by creating the login route in the server, which is where the user hits the **Connect your Spotify account** link is clicked on the app frontend.\n\nCreate a new file called `authorizeSpotify.js` and paste in the following code within it:\n\n``` javascript\n    // authorizeSpotify.js\n    \n    const spotify = require('./credentials');\n    \n    const authorizeSpotify = (req, res) =\u003e {\n      const scopes = 'user-read-recently-played';\n    \n      const url = `https://accounts.spotify.com/authorize?\u0026client_id=${\n        spotify.client_id\n      }\u0026redirect_uri=${encodeURI(\n        spotify.redirect_uri\n      )}\u0026response_type=code\u0026scope=${scopes}`;\n    \n      res.redirect(url);\n    };\n    \n    module.exports = authorizeSpotify;\n```\n\nNext  import this module into `server.js` and use it in the a new `/login` route as shown below:\n\n``` javascript\n    // server.js\n    \n    ...\n    const Pusher = require('pusher');\n    const authorizeSpotify = require('./authorizeSpotify');\n    \n    ...\n    app.use(bodyParser.urlencoded({ extended: true }));\n    app.get('/login', authorizeSpotify);\n    ...\n```\n\nWhenever, the user hits the `/login` route (by trying to connect a Spotify account), the app generates a request where the user is prompted to grant the  `user-read-recently-played` permission.\n\nWhen the user grants the permission, it will redirect back to the redirect URL you specified while creating the app (http://localhost:5000/callback). We need to grab the code that is included in the URL parameters and exchange it for an access token which will be used when interacting with the Spotify API. Let’s write the code that’ll do just that in the next step.\n\nCreate a new file called `getAccessToken.js` and paste the following code inside it:\n\n``` javascript\n    // getAccessToken.js\n    \n    const fetch = require('node-fetch');\n    const spotify = require('./credentials');\n    \n    const getAccessToken = (req, res, next) =\u003e {\n      const { code } = req.query;\n    \n      if (code) {\n        const url = 'https://accounts.spotify.com/api/token';\n    \n        const data = {\n          grant_type: 'authorization_code',\n          code,\n          redirect_uri: spotify.redirect_uri,\n          client_id: spotify.client_id,\n          client_secret: spotify.client_secret,\n        };\n    \n        const headers = {\n          'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n        };\n    \n        const searchParams = new URLSearchParams();\n    \n        Object.keys(data).forEach(prop =\u003e {\n          searchParams.set(prop, data[prop]);\n        });\n    \n        fetch(url, {\n          method: 'POST',\n          headers,\n          body: searchParams,\n        })\n          .then(res =\u003e res.json())\n          .then(credentials =\u003e {\n            req.credentials = credentials;\n            next();\n          })\n          .catch(next);\n      }\n    };\n    \n    module.exports = getAccessToken;\n```\n\nNext, require `getAccessToken` in `server.js` and use it in the `/callback` route as shown below:\n\n``` javascript\n    // server.js\n    \n    ...\n    const authorizeSpotify = require('./authorizeSpotify');\n    const getAccessToken = require('./getAccessToken');\n    \n    ...\n    app.get('/login', authorizeSpotify);\n    app.get('/callback', getAccessToken);\n    ...\n```\n\nIn  `getAccessToken`, we grab the code off the URL parameters and exchange it for an access token by making a POST request to the Spotify Accounts service. When the requested credentials are received, they’re saved on the `req` object and  `next()` is invoked which executes the next middleware.\n\nLet’s go ahead and create the succeeding middleware in the next step. This middleware is tasked with saving the credentials received from Spotify to a temporary database. Here’s the code that helps us achieve that:\n\n``` javascript\n    // server.js\n    ...\n    app.get('/login', authorizeSpotify);\n    app.get('/callback', getAccessToken, (req, res, next) =\u003e {\n      db.insert(req.credentials, err =\u003e {\n        if (err) {\n          next(err);\n        } else {\n          res.redirect(`${clientUrl}/?authorized=true`);\n        }\n      });\n    });\n```\n\nThis code allows us to redirect the user back to the app frontend once the credentials have been saved to the database. Notice the `?authorized=true` parameter? That presence of that in the URL lets us detect that authorization was successful and `isUserAuthorized` will now be set to `true` in the app frontend.\n\n## Fetch the user’s recently played tracks\n\nNow that we know that authorization with the Spotify API was successful, we need to fetch the 10 most recently played tracks of the user and display it on the page. At this point, you should start listening to some music on Spotify if your account is new so that some songs will show up when this request is performed.\n\nUnder the `constructor()` function, add the `componentDidMount()` lifecycle hook to your React app and paste the following code within it:\n\n``` javascript\n    // client/src/App.js\n    \n    componentDidMount() {\n      const { isUserAuthorized } = this.state;\n    \n      if (isUserAuthorized) {\n        fetch('http://localhost:5000/history')\n          .then(res =\u003e res.json())\n          .then(data =\u003e {\n            this.setState({\n              musicHistory: data,\n            });\n          })\n          .catch(error =\u003e console.log(error));\n      }\n    }\n```\n\nWe’re making a request to the `/history` route and we expect the 10 most recently played songs on the users’ account to be sent back. Let’s create this route on the server in the next step.\n\nCreate a file called `getRecentlyPlayed` and paste the code below within it. This is where the actual request to Spotify is performed.\n\n``` javascript\n    // getRecentlyPlayed.js\n    \n    const fetch = require('node-fetch');\n    \n    const getRecentlyPlayed = accessToken =\u003e {\n      const url = 'https://api.spotify.com/v1/me/player/recently-played?limit=10';\n    \n      return fetch(url, {\n        method: 'GET',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${accessToken}`,\n        },\n      })\n        .then(res =\u003e res.json())\n        .then(data =\u003e data.items)\n        .catch(error =\u003e console.log(error));\n    };\n    \n    module.exports = getRecentlyPlayed;\n```\n\nNext, import it in `server.js` and add the `/history` route below the other two:\n\n``` javascript\n    // server.js\n    \n    ...\n    const getAccessToken = require('./getAccessToken');\n    const getRecentlyPlayed = require('./getRecentlyPlayed');\n    \n    ...\n    app.get('/history', (req, res) =\u003e {\n      db.find({}, (err, docs) =\u003e {\n        if (err) {\n          throw Error('Failed to retrieve documents');\n        }\n    \n        const accessToken = docs[0].access_token;\n        getRecentlyPlayed(accessToken)\n          .then(data =\u003e {\n            const arr = data.map(e =\u003e ({\n              played_at: e.played_at,\n              track_name: e.track.name,\n            }));\n    \n            res.json(arr);\n          })\n          .catch(err =\u003e console.log(err));\n      });\n    });\n```\n\nAt this point, if the user is authenticated and this route is hit, the most recently played songs will be sent to the frontend and displayed on the page.\n\n![spotify-history-partial](//images.ctfassets.net/1es3ne0caaid/1qqnFvWVQgku0iKmEaW4O4/a2d0141ad82128558ce664c7b8be3b87/spotify-history-partial.png)\n\n## Set up realtime updates with Pusher\n\nThe next task is to make the list of songs update on the page as you continue to listen. Head over to the Pusher website and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). Select **Channels apps** on the sidebar, and hit **Create Channels app** to create a new app. Once your app is created, retrieve your credentials from the **API Keys** tab, then add the following to your `variables.env` file.\n\n```\n    // variables.env\n    \n    PUSHER_APP_ID=\u003cyour app id\u003e\n    PUSHER_APP_KEY=\u003cyour app key\u003e\n    PUSHER_APP_SECRET=\u003cyour app secret\u003e\n    PUSHER_APP_CLUSTER=\u003cyour app cluster\u003e\n```\n\nWe’re going to set up a cron job to run every five minutes, retrieve the most recently played songs and merge it with the existing list of recent tracks so that new songs are displayed on top. Change up `server.js` to look like this:\n\n``` javascript\n    // server.js\n    \n    ....\n    const db = new Datastore();\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true,\n    });\n    \n    ...\n    app.get('/history', (req, res) =\u003e {\n      db.find({}, (err, docs) =\u003e {\n        if (err) {\n          throw Error('Failed to retrieve documents');\n        }\n    \n        const accessToken = docs[0].access_token;\n        getRecentlyPlayed(accessToken)\n          .then(data =\u003e {\n            const arr = data.map(e =\u003e ({\n              played_at: e.played_at,\n              track_name: e.track.name,\n            }));\n    \n            res.json(arr);\n          })\n          .then(() =\u003e {\n            cron.schedule('*/5 * * * *', () =\u003e {\n              getRecentlyPlayed(accessToken).then(data =\u003e {\n                const arr = data.map(e =\u003e ({\n                  played_at: e.played_at,\n                  track_name: e.track.name,\n                }));\n    \n                pusher.trigger('spotify', 'update-history', {\n                  musicHistory: arr,\n                });\n              });\n            });\n          })\n          .catch(err =\u003e console.log(err));\n      });\n    });\n```\n\nOnce the initial listing is made, a cron job is triggered that runs every five minutes. That’s what the `*/5 * * * *` string signifies. The user’s most recently played tracks are fetched and pushed to the `spotify` channel via the `update-history` event. Any client that is subscribed to this channel can receive the latest data and update the list of tracks on the page.\n\nLet’s go ahead and do just that in the frontend of our app. Update the `componentDidMount()` lifecycle hook in `client/src/App.js` to look like this:\n\n``` javascript\n    // client/src/App.js\n    \n    componentDidMount() {\n      const { isUserAuthorized } = this.state;\n    \n      if (isUserAuthorized) {\n        fetch('http://localhost:5000/history')\n          .then(res =\u003e res.json())\n          .then(data =\u003e {\n            this.setState({\n              musicHistory: data,\n            });\n          })\n          .catch(error =\u003e console.log(error));\n    \n        const pusher = new Pusher('\u003cyour app key\u003e', {\n          cluster: '\u003cyour app cluster\u003e',\n          encrypted: true,\n        });\n    \n        const channel = pusher.subscribe('spotify');\n        channel.bind('update-history', data =\u003e {\n          this.setState(prevState =\u003e {\n            const arr = data.musicHistory\n              .map(item =\u003e {\n                const isPresent = prevState.musicHistory.find(\n                  e =\u003e e.played_at === item.played_at\n                );\n                if (isPresent === undefined) {\n                  return item;\n                } else {\n                  return null;\n                }\n              })\n              .filter(Boolean);\n            return {\n              musicHistory: arr.concat(prevState.musicHistory),\n            };\n          });\n        });\n      }\n    }\n```\n\nHere, we opened a connection to Channels and used the `subscribe()` method  to subscribe to the `spotify` channel. Updates to the user’s music history are listened for via the `bind` method. Once an update is received, the data is merged with the existing one so that the list is updated with the latest tracks.\n\nDon’t forget to replace the `\u003cyour app key\u003e` and `\u003cyour app cluster\u003e` placeholders with the appropriate details from your Pusher account dashboard.\n\nStart your server by running `node server.js` and link your Spotify account on the frontend. As long as you continue to play music, you should see the page update with your most recent tracks updates.\n\n## Conclusion\n\nThat’s it! In this tutorial, you learned how to view your Spotify music history in realtime with React and Pusher. Along the way, you learned how to use Spotify’s API, and Pusher Channels to send and receive data in realtime.\n\nYou can find the app’s source code in this [GitHub repo](https://github.com/ayoisaiah/music-history).","metaTitle":"View your live Spotify history with React and Node","metaDescription":"Build a web app using Node and React to view your Spotify history. The app allows users to link up to their Spotify account and view a list of tracks played, with new tracks being added as they play."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"xmvFyFo8GyCU6acuyo2My","type":"Entry","createdAt":"2018-10-15T18:24:47.488Z","updatedAt":"2018-11-12T17:12:56.801Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Creating a photo sharing app with React Native","url":"photo-sharing-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNPhotoShare","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-11-12","description":"Use React Native, Node.js and Imgur to create a photo sharing app. Users will be able to follow their friends and share their own photos with their followers. New photos will be published and shared in realtime.","prerequisite":"You will need Node 8+ and the Expo CLI and SDK installed on your machine. Some knowledge of React Native development will be helpful.","content":"In this tutorial, we’ll be creating a realtime photo-sharing app with React Native and Pusher Channels. \n\n## Prerequisites\n\nBasic knowledge of React Native is required is in order to follow along. We’ll also be using [Redux](https://redux.js.org/) in some parts of the app so basic knowledge of it will be helpful as well.\n\nWe’ll be using [Expo](https://expo.io/) in order to easily test the app on multiple devices. Download the Expo client app for your [iOS](https://itunes.apple.com/us/app/expo-client/id982107779?mt=8) or [Android](https://play.google.com/store/apps/details?id=host.exp.exponent\u0026hl=en) device.\n\nThese are the package versions used in creating the app:\n\n\n- Node 8.3.0\n- Yarn 1.7.0\n- Expo CLI 2.0.0\n- Expo SDK 30.0.0\n- Pusher 4.3.1\n- React Navigation 2.14.0\n\nYou don’t necessarily have to use the versions above, but if you encounter problems when using other versions, I recommend you to use the ones above instead. For other packages used in the app, be sure to check out the `package.json` file found in the [GitHub repo](https://github.com/anchetaWern/RNPhotoShare).\n\nWe’ll be using Pusher and Imgur in this tutorial so you need to have an account on both of those services:\n\n\n- [Pusher](http://pusher.com/)\n- [Imgur](https://imgur.com/register)\n\n\n## App overview\n\nWhen the user first opens the app, they’ll be greeted by the following screen. From here, they can either choose to share photos or view them by subscribing to another user who chose to share their photo:\n\n![react-native-photo-share-homepage](//images.ctfassets.net/1es3ne0caaid/3HcHtirrO0uwwgwa8gAQQw/8403a2f60c25d96dd5a27a52ce808cd1/react-native-photo-share-homepage.png)\n\nWhen a user chooses **Share**, they’ll be assigned a unique username, which they can share with anyone. This sharing mechanism will be entirely outside the app, so it can be anything (For example, email or SMS):\n\n![react-native-photo-share-share-screen](//images.ctfassets.net/1es3ne0caaid/5djOaJHu7SEmUEeEYqyKQK/5606ea888ba1d2c57977f323024421c4/react-native-photo-share-share-screen.png)\n\nHere’s what it looks like when someone chooses **View**. On this screen, they have to enter the username assigned to the user they want to follow:\n\n![react-native-photo-share-follow](//images.ctfassets.net/1es3ne0caaid/36VjMRTrAQyCkmWSumYYk8/86034cb4c4f690912d53e6d00f32422b/react-native-photo-share-follow.png)\n\nGoing back to the user who selected **Share**, here’s what their screen will look like when they click on the camera icon from earlier. This will allow the user to take a photo, flip the camera, or close it:\n\n![react-native-photo-share-camera](//images.ctfassets.net/1es3ne0caaid/7GUgMyZVKMCAs0m4m4uACc/4bb3ae4b6ef1b91385dc067196f3f73c/react-native-photo-share-camera.png)\n\nOnce they take a snap, the camera UI will close and the photo will be previewed. At this point, the photo should have already started uploading in the background using the Imgur API:\n\n![react-native-photo-share-preview](//images.ctfassets.net/1es3ne0caaid/67D4M5ttYcKsyo0wuIgwq0/86a3b74cf8aba2e8a895ad2418849f20/react-native-photo-share-preview.png)\n\nSwitching back to the follower (the user who clicked on **View**), once the upload is finished, the Imgur API should return the image URL and its unique ID. Those data are then sent to the Pusher channel which the follower has subscribed to. This allows them to also see the shared photo:\n\n![react-native-photo-share-photo-received](//images.ctfassets.net/1es3ne0caaid/3QWCIyl3w4kuUIysMgoymA/7db155610e74f1d47095cb3f3c7e594e/react-native-photo-share-photo-received.png)\n\nIt’s not shown in the screenshot above, but everytime a new photo is received, it will automatically be appended to the top of the list.\n\nYou can find the app’s source code in this [GitHub repo](https://github.com/anchetaWern/RNPhotoShare).\n\n\n## Create Pusher and Imgur apps\n\nOn your [Pusher dashboard](https://dashboard.pusher.com/), create a new app and name it **RNPhotoShare**. Once it’s created, go to app settings and enable client events. This will allow us to directly trigger events from the app:\n\n![react-native-photo-share-enable-client-events](//images.ctfassets.net/1es3ne0caaid/1PhoIFNEOQKA0AoaKqqoMW/856f0fe856a794e95700342da0fa917b/react-native-photo-share-enable-client-events.png)\n\nNext, after logging in to your Imgur account, go to [this page](https://api.imgur.com/oauth2/addclient) and register an app. The most important setting here is the **Authorization type**. Select **Anonymous usage without user authorization** as we will only be uploading images anonymously. **Authorization callback URL** can be any value because we won’t really be using it. Other than that, you can enter any value for the other fields:\n\n![react-native-photo-share-imgur-app](//images.ctfassets.net/1es3ne0caaid/74FnQEJcdyAqaWgq8qugiK/59e01a1269e38c32cf9494ad3e62ecd3/react-native-photo-share-imgur-app.png)\n\nClick **Submit** to create the app. This will show you the app ID and app secret. We’re only going to need the app ID so take note of that. In case you lose the app ID, you can view all the Imgur apps you created [here](https://imgur.com/account/settings/apps).\n\n\n## Building the app\n\nStart by cloning the project repo and switch to the `starter` branch:\n\n```\n    git clone https://github.com/anchetaWern/RNPhotoShare.git\n    cd RNPhotoShare\n    git checkout starter\n```\n\nThe `starter` branch contains the bare-bones app template, navigation, components, and all of the relevant styles which we will be using later on. Having all of those in the starter allows us to focus on the main meat of the app.\n\nInstall the packages using [Yarn](https://yarnpkg.com/):\n\n```\n    yarn install\n```\n\nHere’s a quick overview of what each package does:\n\n\n- `expo` - the Expo SDK. This includes the Camera API and the icons that we will be using in the app.\n- `random-animal-name-generator` - for generating the unique usernames for users who want to share photos.\n- `pusher-js` - the JavaScript library for working with Pusher.\n- `react-navigation` - for implementing navigation within the app.\n- `prop-types` - for validating the props added to components on runtime.\n- `whatwg-fetch` - there’s a [recent issue](https://forums.expo.io/t/cant-find-variable-self/13547) with the latest version of the `whatwg-fetch` package that Expo uses, so we need to install a lower version through the main project in order to fix the issue.\n- `redux` - for adding and managing global app state.\n- `react-redux` - for working with Redux within the React environment.\n\n### Home screen\n\nLet’s first start with the Home screen by importing all the necessary packages:\n\n``` javascript\n    // src/screens/HomeScreen.js\n    import React, { Component } from \"react\";\n    import { View, Text, Button } from \"react-native\";\n    \n    import Pusher from \"pusher-js/react-native\";\n```\n\nBy default, React Navigation will display a header on every page, we don’t want that in this page so we disable it. In the constructor, we initialize the value of the Pusher client. We will be using this to connect to Pusher and trigger and subscribe to events:\n\n``` javascript\n    export default class HomeScreen extends Component {\n      static navigationOptions = {\n        header: null // don't display header\n      };\n    \n      constructor(props) {\n        super(props);\n        this.pusher = null;\n      }\n      \n      // next: add componentDidMount\n    }\n```\n\nOnce the component is mounted, we initialize the Pusher client using the app key and app cluster from your app settings. As for the `authEndpoint`, retain the value below for now, we will be updating it later before we run the app:\n\n``` javascript\n    componentDidMount() {\n      this.pusher = new Pusher(\"YOUR PUSHER APP KEY\", {\n        authEndpoint: \"YOUR_NGROK_URL/pusher/auth\",\n        cluster: \"YOUR PUSHER APP CLUSTER\",\n        encrypted: true // false doesn't work, you need to always use https for the authEndpoint\n      });\n    }\n    \n    // next: add render method\n```\n\nNext, we render the UI for the Home screen. This contains two buttons that allow the user to navigate to either the Share screen or the View screen. In both cases, we pass in the reference to the Pusher client as a navigation param. This allows us to use Pusher on both pages:\n\n``` javascript\n    render() {\n      return (\n        \u003cView style={styles.container}\u003e\n          \u003cText style={styles.mainText}\u003eWhat to do?\u003c/Text\u003e\n    \n          \u003cView style={styles.buttonContainer}\u003e\n            \u003cButton\n              title=\"Share\"\n              color=\"#1083bb\"\n              onPress={() =\u003e {\n                this.props.navigation.navigate(\"Share\", {\n                  pusher: this.pusher\n                });\n              }}\n            /\u003e\n          \u003c/View\u003e\n    \n          \u003cView style={styles.buttonContainer}\u003e\n            \u003cButton\n              title=\"View\"\n              color=\"#2f9c0a\"\n              onPress={() =\u003e {\n                this.props.navigation.navigate(\"View\", {\n                  pusher: this.pusher\n                });\n              }}\n            /\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\n### Share screen\n\nNext is the Share screen. This is where the user can take pictures with the in-app camera and share it on realtime to people who have followed their username. \n\nStart by importing all the packages we’ll need. Most of these should look familiar, except for `Clipboard`. We’ll be using it to copy the user’s username to the clipboard so they can easily share it on another app:\n\n``` javascript\n    // src/screens/ShareScreen.js\n    import React, { Component } from \"react\";\n    import {\n      View,\n      Text,\n      TouchableOpacity,\n      Clipboard,\n      Alert,\n      Image,\n      Dimensions,\n      Button,\n      ScrollView\n    } from \"react-native\";\n```\n\nNext are the Expo packages and the random animal name generator. For Expo, we need the `Camera` for rendering a bare-bones camera UI and the `Permissions` to ask the user to access the camera:\n\n``` javascript\n    import { MaterialIcons } from \"@expo/vector-icons\";\n    import { Camera, Permissions } from \"expo\";\n    import generateRandomAnimalName from \"random-animal-name-generator\"; // for generating unique usernames\n```\n\nNext, add a button in the header. This will allow the user to stop sharing their photos. When this button is clicked, all users who are currently subscribed to this user will stop receiving updates:\n\n``` javascript\n    export default class ShareScreen extends Component {\n      static navigationOptions = ({ navigation }) =\u003e {\n        const { params } = navigation.state;\n        return {\n          title: \"Share Photos\",\n          headerTransparent: true,\n          headerRight: (\n            \u003cButton\n              title=\"Finish\"\n              color=\"#333\"\n              onPress={() =\u003e params.finishSharing()}\n            /\u003e\n          ),\n          headerTintColor: \"#333\"\n        };\n      };\n      \n      // next: initialize state\n    }\n```\n\nNext, initialize the state:\n\n``` javascript\n    state = {\n      hasCameraPermission: null, // whether the user has allowed the app to access the device's camera\n      cameraType: Camera.Constants.Type.front, // which camera to use? front or back?\n      isCameraVisible: false, // whether the camera UI is currently visible or not\n      latestImage: null // the last photo taken by the user\n    };\n    \n    // next: add constructor\n```\n\nIn the constructor, we generate a unique username for the user. This is composed of the funny animal name from the `random-animal-name-generator` library and a random number. Here, we also initialize the value for the Pusher client (we’ll get it from the navigation params shortly) and the `user_channel` where we will emit the event for sharing photos. Since this screen is where the Camera UI will be rendered, we also want the user to be able to change the screen orientation. That way, they can capture both portrait and landscape photos:\n\n``` javascript\n    constructor(props) {\n      super(props);\n      // generate unique username\n      const animalName = generateRandomAnimalName()\n        .replace(\" \", \"_\")\n        .toLowerCase();\n      const min = 10;\n      const max = 99;\n      const number = Math.floor(Math.random() * (max - min + 1)) + min;\n      const username = animalName + number;\n      this.username = username;\n      \n      // initialize pusher\n      this.pusher = null;\n      this.user_channel = null;\n      \n      // allow changing of screen orientation\n      Expo.ScreenOrientation.allow(\n        Expo.ScreenOrientation.Orientation.ALL_BUT_UPSIDE_DOWN // enable all screen orientations except upside-down/reverse portrait\n      );\n    }\n    \n    // next: add componentDidMount\n```\n\nOnce the component is mounted, we set the `finishSharing` method as a navigation param. We’ll define this method later, but for now, know that this is used for unsubscribing the user from their own channel. We’re subscribing to that channel right below that code. This allows us to listen to or trigger messages from this channel. Lastly, we ask for permission from the user to access the camera:\n\n``` javascript\n    async componentDidMount() {\n      const { navigation } = this.props;\n    \n      navigation.setParams({\n        finishSharing: this.finishSharing\n      });\n    \n      // subscribe to channel\n      this.pusher = navigation.getParam(\"pusher\");\n      this.user_channel = this.pusher.subscribe(`private-user-${this.username}`);\n    \n      // ask user to access device camera\n      const { status } = await Permissions.askAsync(Permissions.CAMERA);\n      this.setState({ hasCameraPermission: status === \"granted\" });\n    }\n    // next: add render method\n```\n\nFor those who are working with Pusher for the first time, the way it works is that you first have to subscribe the users to a channel. Anyone who is subscribed to this channel will be able to trigger and listen for messages sent through that channel by means of “events”. Not all users who are subscribed to the channel need to know all about the events being sent through that channel, that’s why users can selectively bind to specific events only.\n\nNext, we render the contents of the Share screen. In this case, there are only two possible contents: one where only the camera UI is visible, and the other where only the box containing the username and a button (for opening the camera) is visible:\n\n``` javascript\n    render() {\n      return (\n        \u003cView style={styles.container}\u003e\n          {!this.state.isCameraVisible \u0026\u0026 (\n            \u003cScrollView contentContainerStyle={styles.scroll}\u003e\n              \u003cView style={styles.mainContent}\u003e\n                \u003cTouchableOpacity onPress={this.copyUsernameToClipboard}\u003e\n                  \u003cView style={styles.textBox}\u003e\n                    \u003cText style={styles.textBoxText}\u003e{this.username}\u003c/Text\u003e\n                  \u003c/View\u003e\n                \u003c/TouchableOpacity\u003e\n                \u003cView style={styles.buttonContainer}\u003e\n                  \u003cTouchableOpacity onPress={this.openCamera}\u003e\n                    \u003cMaterialIcons name=\"camera-alt\" size={40} color=\"#1083bb\" /\u003e\n                  \u003c/TouchableOpacity\u003e\n                \u003c/View\u003e\n    \n                {this.state.latestImage \u0026\u0026 (\n                  \u003cImage\n                    style={styles.latestImage}\n                    resizeMode={\"cover\"}\n                    source={{ uri: this.state.latestImage }}\n                  /\u003e\n                )}\n              \u003c/View\u003e\n            \u003c/ScrollView\u003e\n          )}\n    \n          {this.state.isCameraVisible \u0026\u0026 (\n            \u003cCamera\n              style={styles.camera}\n              type={this.state.cameraType}\n              ref={ref =\u003e {\n                this.camera = ref;\n              }}\n            \u003e\n              \u003cView style={styles.cameraFiller} /\u003e\n              \u003cView style={styles.cameraContent}\u003e\n                \u003cTouchableOpacity\n                  style={styles.buttonFlipCamera}\n                  onPress={this.flipCamera}\n                \u003e\n                  \u003cMaterialIcons name=\"flip\" size={25} color=\"#e8e827\" /\u003e\n                \u003c/TouchableOpacity\u003e\n    \n                \u003cTouchableOpacity\n                  style={styles.buttonCamera}\n                  onPress={this.takePicture}\n                \u003e\n                  \u003cMaterialIcons name=\"camera\" size={50} color=\"#e8e827\" /\u003e\n                \u003c/TouchableOpacity\u003e\n    \n                \u003cTouchableOpacity\n                  style={styles.buttonCloseCamera}\n                  onPress={this.closeCamera}\n                \u003e\n                  \u003cMaterialIcons name=\"close\" size={25} color=\"#e8e827\" /\u003e\n                \u003c/TouchableOpacity\u003e\n              \u003c/View\u003e\n            \u003c/Camera\u003e\n          )}\n        \u003c/View\u003e\n      );\n    }\n    \n    // next: add copyUsernameToClipboard\n```\n\nIf you’ve read the app overview earlier, you should already have a general idea on what’s going on in the code above so I’ll no longer elaborate. Take note of the `ref` prop we’ve passed to the `Camera` component though. This allows us to get a reference to that instance of the `Camera` component and assign it to a local variable called `this.camera`. We will be using it later to take a picture using that camera instance.\n\nWhen the user clicks on the box containing the user’s username, this method is called and it sets the username to the clipboard:\n\n``` javascript\n    copyUsernameToClipboard = () =\u003e {\n      Clipboard.setString(this.username);\n      Alert.alert(\"Copied!\", \"Username was copied clipboard\");\n    };\n    \n    // next: add openCamera\n```\n\nNext, are the methods for opening the camera UI, flipping it (use either back or front camera), and closing it:\n\n``` javascript\n    openCamera = () =\u003e {\n      const { hasCameraPermission } = this.state;\n      if (!hasCameraPermission) {\n        Alert.alert(\"Error\", \"No access to camera\");\n      } else {\n        this.setState({ isCameraVisible: true });\n      }\n    };\n    \n    flipCamera = () =\u003e {\n      this.setState({\n        cameraType:\n          this.state.cameraType === Camera.Constants.Type.back\n            ? Camera.Constants.Type.front\n            : Camera.Constants.Type.back\n      });\n    };\n    \n    closeCamera = () =\u003e {\n      this.setState({\n        isCameraVisible: false\n      });\n    };\n    \n    // next: add takePicture\n```\n\nNext is the method for taking pictures. This is where we use the camera reference from earlier (`this.camera`) to call the `takePictureAsync` method from the Camera API. By default, the `takePictureAsync` method only returns an object containing the `width`, `height` and `uri` of the photo that was taken. That’s why we’re passing in an object containing the options we want to use. In this case, `base64` allows us to return the base64 representation of the image. This is what we set in the request body of the request we send to the Imgur API. Once we receive a response from the Imgur API, we extract the data that we need from the response body and trigger the `client-posted-photo` event so any subscriber who is currently listening to that event will receive the image data:\n\n``` javascript\n    takePicture = async () =\u003e {\n      if (this.camera) {\n        let photo = await this.camera.takePictureAsync({ base64: true }); // take a snap, and return base64 representation\n        \n        // construct\n        let formData = new FormData();\n        formData.append(\"image\", photo.base64); \n        formData.append(\"type\", \"base64\");\n    \n        this.setState({\n          latestImage: photo.uri, // preview the photo that was taken\n          isCameraVisible: false // close the camera UI after taking the photo\n        });\n    \n        const response = await fetch(\"https://api.imgur.com/3/image\", {\n          method: \"POST\",\n          headers: {\n            Authorization: \"Client-ID YOUR_IMGUR_APP_ID\" // add your Imgur App ID here\n          },\n          body: formData\n        });\n    \n        let response_body = await response.json(); // get the response body\n        \n        // send data to all subscribers who are listening to the client-posted-photo event\n        this.user_channel.trigger(\"client-posted-photo\", {\n          id: response_body.data.id, // unique ID assigned to the image\n          url: response_body.data.link // Imgur link pointing to the actual image\n        });\n      }\n    };\n    \n    // next: add finishSharing\n```\n\nNote that the name of the event has to have `client-` as its prefix, just like what we did above. This is because we’re triggering this event from the client side. It’s a naming convention used by Pusher so your event won’t work if you don’t follow it. Check out the [docs](https://pusher.com/docs/client_api_guide/client_events#trigger-events) for more information about this.\n\nOnce the user clicks on the **Finish** button, we unsubscribe them from their own channel. This effectively cuts off all communication between this user and all their followers:\n\n``` javascript\n    finishSharing = () =\u003e {\n      this.pusher.unsubscribe(`private-user-${this.username}`);\n      this.props.navigation.goBack(); // go back to home screen\n    };\n```\n\nFor production apps, it’s a good practice to first trigger an “ending” event right before the main user (the one who mainly triggers events) unsubscribes from their own channel. This way, all the other users will get notified and they’ll be able to clean up their connection before their source gets completely shut off.\n\n\n### View screen\n\nThe View screen is where users who want to follow another user go. Again, start by importing all the packages we need:\n\n``` javascript\n    // src/screens/ViewScreen.js\n    import React, { Component } from \"react\";\n    import {\n      View,\n      Text,\n      TextInput,\n      ScrollView,\n      Dimensions,\n      Button,\n      Alert\n    } from \"react-native\";\n    \n    import CardList from \"../components/CardList\";\n```\n\nNothing really new in the code above, except for the `CardList` component. This component is already included in the starter project so we don’t have to create it separately. What it does is render all the images that were sent by the user followed by the current user.\n\nNext, import all the Redux-related packages:\n\n``` javascript\n    // src/screens/ViewScreen.js\n    import { Provider } from \"react-redux\";\n    import { createStore } from \"redux\";\n    import reducers from \"../reducers\";\n    \n    import { addedCard } from \"../actions\";\n    \n    const store = createStore(reducers);\n```\n\nNext, we also add a button in the header. This time, to unfollow the user. We’re also passing in the function used here (`params.unfollow`) as a navigation param later inside the `componentDidMount` method:\n\n``` javascript\n    export default class ViewScreen extends Component {\n    \n      static navigationOptions = ({ navigation }) =\u003e {\n        const { params } = navigation.state;\n        return {\n          title: \"View Photos\",\n          headerTransparent: true,\n          headerTintColor: \"#333\",\n          headerRight: (\n            \u003cButton\n              title=\"Unfollow\"\n              color=\"#333\"\n              onPress={() =\u003e params.unFollow()}\n            /\u003e\n          )\n        };\n      };\n      \n      // next: initialize state\n    }\n```\n\nNext, initialize the state:\n\n``` javascript\n    state = {\n      subscribedToUsername: \"\", // the username of the user the current user is subscribed to\n      isSubscribed: false // is the user currently subscribed to another user?\n    };\n```\n\nIn the constructor, we also set the default value for the Pusher client and the user channel. In this case, the user channel will be whoever the current user is subscribed to. The current user doesn’t really need to trigger any events in the user channel, so we don’t have to generate a unique username and subscribe them to their own channel as we did in the Share screen earlier:\n\n``` javascript\n    constructor(props) {\n      super(props);\n      this.pusher = null;\n      this.user_channel = null;\n    }\n    // next: add componentDidMount\n```\n\nOnce the component is mounted, we set the `unFollow` function as a navigation param and initialize the Pusher client:\n\n``` javascript\n    componentDidMount() {\n      const { navigation } = this.props;\n      navigation.setParams({ unFollow: this.unFollow }); // set the unFollow function as a navigation param\n    \n      this.pusher = navigation.getParam(\"pusher\");\n    }\n    \n    // next: add render\n```\n\nNext, we render the UI of the of the View screen. Here, we wrap everything in the `Provider` component provided by `react-redux`. This allows us to pass down the `store` so we could use it inside the `followUser` to dispatch the action for adding a new Card to the CardList:\n\n``` javascript\n    render() {\n      return (\n        \u003cProvider store={store}\u003e\n          \u003cView style={styles.container}\u003e\n            {!this.state.isSubscribed \u0026\u0026 (\n              \u003cView style={styles.initialContent}\u003e\n                \u003cText style={styles.mainText}\u003eUser to follow\u003c/Text\u003e\n                \u003cTextInput\n                  style={styles.textInput}\n                  onChangeText={subscribedToUsername =\u003e\n                    this.setState({ subscribedToUsername })\n                  }\n                \u003e\n                  \u003cText style={styles.textInputText}\u003e\n                    {this.state.subscribedToUsername}\n                  \u003c/Text\u003e\n                \u003c/TextInput\u003e\n    \n                \u003cView style={styles.buttonContainer}\u003e\n                  \u003cButton\n                    title=\"Follow\"\n                    color=\"#1083bb\"\n                    onPress={this.followUser}\n                  /\u003e\n                \u003c/View\u003e\n              \u003c/View\u003e\n            )}\n    \n            {this.state.isSubscribed \u0026\u0026 (\n              \u003cScrollView\u003e\n                \u003cView style={styles.mainContent}\u003e\n                  \u003cCardList /\u003e\n                \u003c/View\u003e\n              \u003c/ScrollView\u003e\n            )}\n          \u003c/View\u003e\n        \u003c/Provider\u003e\n      );\n    }\n    // next: add followUser\n```\n\nThe `followUser` method is where we add the code for subscribing to the username entered by the user in the text field. Once the subscription succeeds, only then can we listen for the `client-posted-photo` event. When we receive this event, we expect the `id` and `url` of the image to be present. We then use those to dispatch the action for adding a new Card on top of the CardList:\n\n``` javascript\n    followUser = () =\u003e {\n      this.setState({\n        isSubscribed: true\n      });\n      \n      // subscribe to the username entered in the text field\n      this.user_channel = this.pusher.subscribe(\n        `private-user-${this.state.subscribedToUsername}`\n      );\n      \n      // alert the user if there's an error in subscribing\n      this.user_channel.bind(\"pusher:subscription_error\", status =\u003e {\n        Alert.alert(\n          \"Error occured\",\n          \"Cannot connect to Pusher. Please restart the app.\"\n        );\n      });\n    \n      this.user_channel.bind(\"pusher:subscription_succeeded\", () =\u003e { // subscription successful\n        this.user_channel.bind(\"client-posted-photo\", data =\u003e { // listen for the client-posted-photo event to be triggered from the channel\n          store.dispatch(addedCard(data.id, data.url)); // dispatch the action for adding a new card to the list\n        });\n      });\n    };\n    \n    // next: add unFollow\n```\n\nLastly, add the `unFollow` method. This gets called when the user clicks on the **Unfollow** button in the header. This allows us to unsubscribe from the user we subscribed to earlier inside the `followUser` method:\n\n``` javascript\n    unFollow = () =\u003e {\n      this.pusher.unsubscribe(`private-user-${this.state.subscribedToUsername}`);\n      this.props.navigation.goBack(); // go back to the home page\n    };\n```\n\nUnsubscribing from a channel automatically unbinds the user from all the events they’ve previously bound to. This means they’ll no longer receive any new photos.\n\n### Adding the action and reducer\n\nEarlier in the `followUser` method of the `src/screens/ViewScreen.js` file, we dispatched the `addedCard` action. We haven’t really defined it yet so let’s go ahead and do so. Create an `actions` and `reducers` folder inside the `src` directory to house the files we’re going to create.\n\nTo have a single place where we define all the action types in this app, create a `src/actions/types.js` file and add the following:\n\n``` javascript\n    export const ADDED_CARD = \"added_card\";\n```\n\nIn the code above, all we do is export a constant which describes the action type. Nothing really mind-blowing, but this allows us to import and use this constant every time we need to use this specific action. This prevents us from making any typo when using this action.\n\nNext, create a `src/actions/index.js` file, this is where we define and export the action. We pass in the `ADDED_CARD` constant as a type along with the `id` and `url`. These are the unique ID and URL of the image which is received by the reducer everytime this action is dispatched:\n\n``` javascript\n    // src/actions/index.js\n    import { ADDED_CARD } from \"./types\";\n    \n    export const addedCard = (id, url) =\u003e {\n      return {\n        type: ADDED_CARD,\n        id: id,\n        url: url\n      };\n    };\n```\n\nNext, create a `src/``reducers/CardsReducer.js` file, this is where we add the reducer responsible for modifying the value of the `cards` array in the state. This gets executed every time we dispatch the `addedCard` action. When that happens, we simply return a new array containing the existing card objects and the new card object:\n\n``` javascript\n    // src/reducers/CardsReducer.js\n    import { ADDED_CARD } from \"../actions/types\";\n    \n    const INITIAL_STATE = {\n      cards: []\n    };\n    \n    export default (state = INITIAL_STATE, action) =\u003e {\n      switch (action.type) {\n        case ADDED_CARD:\n          const cards = [...state.cards, { id: action.id, url: action.url }]; // return a new array containing the existing card objects and the new card object\n          return { ...state, cards };\n    \n        default:\n          return state;\n      }\n    };\n```\n\nNote that we’re adding it to the end of the new array instead of in the beginning. This is because the `FlatList` component which is responsible for rendering this data is `inverted`. This means that the items are rendered from bottom to top.\n\nLastly, combine all the reducers in a single file:\n\n``` javascript\n    // src/reducers/index.js\n    import { combineReducers } from \"redux\";\n    import CardsReducer from \"./CardsReducer\";\n    \n    export default combineReducers({\n      cards: CardsReducer\n    });\n```\n\nThe code above enabled us to import only a single file to include the reducers and use it for creating the store. Don't add this, as it was already added earlier:\n\n``` javascript\n    // src/screens/ViewScreen.js (don't add as it was already added earlier)\n    import reducers from \"../reducers\"; \n    const store = createStore(reducers);\n```\n\n### Update the CardList component\n\nIf you saw the `CardList` component from the codes of the View screen earlier, you might have noticed that we haven’t really passed any props to it. So how will it have any data to render?\n\n``` javascript\n    // src/screens/ViewScreen.js\n    {this.state.isSubscribed \u0026\u0026 (\n      \u003cScrollView\u003e\n        \u003cView style={styles.mainContent}\u003e\n          \u003cCardList /\u003e\n        \u003c/View\u003e\n      \u003c/ScrollView\u003e\n    )}\n```\n\nThe answer is it doesn’t. Currently, the `CardList` component doesn’t really have the ability to render cards, so we have to update it. Start by importing the `connect` method from the `react-redux` library. This will allow us to create a “connected” component:\n\n``` javascript\n    // src/components/CardList.js\n    import { connect } from \"react-redux\";\n```\n\nAfter the `CardList` prop types, add a `mapStateToProps` method. This allows us to map out any value in the store as a prop for this component. In this case, we only want the `cards` array:\n\n``` javascript\n    CardList.propTypes = {\n      // previous CardList propTypes code here...\n    };\n    \n    // add this:\n    const mapStateToProps = ({ cards }) =\u003e { // extract the cards array from the store\n      return cards; // make it available as props\n    };\n    \n    // replace export default CardList with this:\n    export default connect(mapStateToProps)(CardList);\n```\n\nNow, every time the `addedCard` action is dispatch, the value of `this.props.cards` inside this component will always be in sync with the value of the `cards` array in the store.\n\n\n## Creating the server\n\nThe server is mainly used for authenticating a user who tries to connect to Pusher. If you open the file for the Home screen, we’ve added this code earlier:\n\n``` javascript\n    // src/screens/HomeScreen.js\n    componentDidMount() {\n      this.pusher = new Pusher(\"YOUR PUSHER APP KEY\", {\n        authEndpoint: \"YOUR_NGROK_URL/pusher/auth\",\n        cluster: \"YOUR PUSHER APP CLUSTER\",\n        encrypted: true\n      });\n    }\n```\n\nThis is where we establish the connection to Pusher’s servers. The `authEndpoint` is responsible for authenticating the user to verify that they’re really a user of your app. So the app hits the server every time the code above is executed.\n\nNow that you know what the server is used for, we’re ready to add its code. Start by navigating inside the `server` directory and install all the packages:\n\n```\n    cd server\n    npm install\n```\n\nImport all the libraries we need and intialize them. This includes Express and a couple of middlewares (JSON and URL encoded body parser), and `dotenv` which allows us to load values from the `.env` file:\n\n``` javascript\n    var express = require(\"express\");\n    var bodyParser = require(\"body-parser\");\n    var Pusher = require(\"pusher\");\n    \n    var app = express(); // Express server\n    app.use(bodyParser.json()); // for parsing the request body into JSON object\n    app.use(bodyParser.urlencoded({ extended: false })); // for parsing URL encoded request body\n    \n    require(\"dotenv\").config(); // initialize dotenv\n```\n\nNext, initialize the Pusher server component using the values from the `.env` file inside your `server` directory:\n\n``` javascript\n    var pusher = new Pusher({\n      // connect to pusher\n      appId: process.env.APP_ID,\n      key: process.env.APP_KEY,\n      secret: process.env.APP_SECRET,\n      cluster: process.env.APP_CLUSTER\n    });\n```\n\nNext, add the route for testing if the server is working correctly:\n\n``` javascript\n    app.get(\"/\", function(req, res) {\n      res.send(\"all green...\");\n    });\n```\n\nNext, add the route for authenticating user requests:\n\n``` javascript\n    app.post(\"/pusher/auth\", function(req, res) {\n      var socketId = req.body.socket_id;\n      var channel = req.body.channel_name;\n      var auth = pusher.authenticate(socketId, channel);\n      res.send(auth);\n    });\n```\n\nNote that in the code above, we haven’t really added any form of authentication. All we’re really doing is authenticating the user as they hit this route. This is not what you want to do for production apps. For production apps, you will most likely have some sort of user authentication before a user can use your app. That’s what you need to integrate into this code so you can ensure that the users who are making requests to your Pusher app are real users of your app.\n\nNext, make the server listen to the port indicated in the `.env` file:\n\n``` javascript\n    var port = process.env.PORT || 5000;\n    app.listen(port);\n```\n\nLastly, update the `.env` file and update it with your Pusher app details:\n\n``` javascript\n    APP_ID=YOUR_PUSHER_APP_ID\n    APP_KEY=YOUR_PUSHER_APP_KEY\n    APP_SECRET=YOUR_PUSHER_APP_SECRET\n    APP_CLUSTER=YOUR_PUSHER_APP_CLUSTER\n    PORT=3000\n```\n\n## Running the app\n\nTo run the app, you need to create an account on [ngrok.com](https://ngrok.com/). Once you have an account, go to your [account dashboard](https://dashboard.ngrok.com/get-started) and download the ngrok binary for your operating system. Extract the zip file and you’ll see an `ngrok` file. Execute that file from the terminal (Note: you’ll probably need to add [execution permissions](https://askubuntu.com/questions/484718/how-to-make-a-file-executable) to it if you’re on Linux) to add your auth token:\n\n```\n    ./ngrok authToken YOUR_NGROK_AUTH_TOKEN\n```\n\nOnce that’s done, run the server and expose port 3000 using ngrok:\n\n```\n    node server.js\n    ./ngrok http 3000\n```\n\nNgrok will provide you with an https URL. Use that as the value for the `authEndpoint` in the `src/screens/HomeScreen.js` file:\n\n``` javascript\n    componentDidMount() {\n      this.pusher = new Pusher(\"YOUR PUSHER APP KEY\", {\n        authEndpoint: \"YOUR_NGROK_HTTPS_URL/pusher/auth\",\n      });\n    }\n```\n\nLastly, navigate inside the root directory of the app and start it:\n\n```\n    expo start\n```\n\nYou can test the app on your machine using the emulator if you have a powerful machine. Personally, I tested it on my iOS and Android device so you might have better luck when running it on your device also.\n\n\n## Conclusion\n\nThat’s it! In this tutorial, you learned how to create a realtime photo-sharing app with React Native and Pusher. Along the way, you learned how to use Expo’s Camera API, Imgur API to anonymously upload images, and Pusher to send and receive data in realtime.\n\nYou can find the app’s source code in this [GitHub repo](https://github.com/anchetaWern/RNPhotoShare).","metaTitle":"Creating a photo sharing app with React Native","metaDescription":"Create a live photo sharing app using Node.js, React Native and Imgur. Users will be able to follow their friends and broadcast their own photos to their followers."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"73VrXqFuVyU4csCk26Skom","type":"Entry","createdAt":"2018-11-09T12:53:15.720Z","updatedAt":"2018-11-09T12:53:15.720Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live game updates site with Express","url":"live-game-express","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3j821hA7aMgOiUEaO4Q8y6","type":"Entry","createdAt":"2018-02-26T19:00:03.819Z","updatedAt":"2018-03-20T12:22:11.602Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Shalvah Adebayo","url":"shalvah-adebayo","email":"shalvah.adebayo@gmail.com","twitter":"https://twitter.com/theshalvah","github":"https://shalvah.me/","guestWriter":true}}],"projectRepo":"https://github.com/shalvah/live-game-updates-express","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-11-09","description":"Build a live blogging platform using Express and Vue, designed to post live updates of sports games. It features an admin panel behind authentication and a guest view where site visitors can watch for updates. As an admin posts a new score or match event, both displays update in realtime.","prerequisite":"You will need Node 8.10+ and MongoDB 3.4+ installed on your machine.","content":"# How to build a live game updates site with Express and Pusher Channels\nSports are fun social activities, but unfortunately, we aren’t always to participate or watch the actual action. In such cases, it’s useful to have a means of following the action as it happens. In today’s tutorial, we’ll be building a web app using Node.js (Express) that allows anyone to follow the progress of a game in realtime. \n\nOur app will provide an interface that allows an admin to post updates on an ongoing game, which users will see in realtime. Here’s a preview of our app in action:\n\n\n![](https://d2mxuefqeaa7sj.cloudfront.net/s_3CFE051B9DA5A2A8496A9ACE3E89DDD14DE00C23FB83FAA6CBC1ECA9EF69A3DC_1538595219690_building-realtime-football-game-updates-site-with-express.gif)\n\n## Prerequisites\n\n1. [Node.js](http://nodejs.org) 8.10.0 or higher\n2. [MongoDB](https://docs.mongodb.com/manual/installation/) 3.4 or higher.\n3. A [Pusher account](http://pusher.com/signup).\n\n## Setting up\n\nWe’ll create a new app using the [Express application generator](https://expressjs.com/en/starter/generator.html):\n\n```\n    npx express-generator --view=hbs live-game-updates-express\n    cd live-game-updates-express\n    npm install\n```\n\n\u003e Note: if the line with `npx` throws an error about the `npx` command not being recognized, you can install npx by running:\n\n```\n    npm install -g npx\n```\n\nLet’s add our dependencies:\n\n```\n    npm install dotenv express-session mongoose passport passport-local pusher\n```\n\nWe’ll use **dotenv** to load our Pusher app credentials from a `.env` file, **mongoose** to manage our models via MongoDB documents, **passport** (together with **passport-local** and **express-session**) for authentication, and **Pusher** for the realtime APIs.\n\n## Configuring the application\n\nWe’re going to make some changes to our `app.js`. First, we’ll implement a very simple authentication system that checks for a username of ‘admin’ and a password of ‘secret’. We’ll also initialize our MongoDB connection. Modify your `app.js` so it looks like this: \n\n``` javascript\n    // app.js\n    require('dotenv').config();\n    \n    const express = require('express');\n    const path = require('path');\n    const logger = require('morgan');\n    const session = require('express-session');\n    const passport = require('passport');\n    const LocalStrategy = require('passport-local').Strategy;\n    \n    passport.use(new LocalStrategy((username, password, done) =\u003e {\n            if (username === 'admin' \u0026\u0026 password === 'secret') {\n                return done(null, {username});\n            }\n            return done(null, null)\n        })\n    );\n    passport.serializeUser((user, cb) =\u003e cb(null, user.username));\n    passport.deserializeUser((username, cb) =\u003e cb(null, { username }));\n    \n    const app = express();\n    require('mongoose').connect('mongodb://localhost/live-game-updates-express');\n    \n    // view engine setup\n    app.set('views', path.join(__dirname, 'views'));\n    app.set('view engine', 'hbs');\n    \n    app.use(logger('dev'));\n    app.use(express.json());\n    app.use(express.urlencoded({extended: false}));\n    app.use(express.static(path.join(__dirname, 'public')));\n    app.use(session({ secret: 'anything' }));\n    app.use(passport.initialize());\n    app.use(passport.session());\n    app.use((req, res, next) =\u003e {\n        res.locals.user = req.user;\n        next();\n    });\n    app.use('/', require('./routes/index'));\n    \n    module.exports = app;\n```\n\nThat’s all we need to do. Now let’s go ahead and create our app’s views.\n\n\n## Building the views\n\nFirst, we’ll create the home page. It shows a list of ongoing games. If the user is logged in as the admin, it will show a form to start recording a new game. \n\nBefore we do that, though, let’s modify our base layout which is used across views. Replace the contents of `views/layout.hbs` with the following:\n\n``` html\n    \u003c!-- views/layout.hbs --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003eLive Game Updates\u003c/title\u003e\u003c!-- Latest compiled and minified CSS --\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\n              integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \u003cmain class=\"py-4\"\u003e\n        {{{body}}}\n    \u003c/main\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nNow, replace the contents of `index.hbs` file with the following:\n\n``` html\n    \u003c!-- views/home.hbs --\u003e\n    \n    \u003cdiv class=\"container\"\u003e\n        \u003ch2\u003eOngoing games\u003c/h2\u003e\n        {{#if user }}\n            \u003cform method=\"post\" action=\"/games\" class=\"form-inline\"\u003e\n                \u003cinput class=\"form-control\" name=\"first_team\" placeholder=\"First team\" required\u003e\n                \u003cinput class=\"form-control\" name=\"second_team\" placeholder=\"Second team\" required\u003e\n                \u003cinput type=\"hidden\" name=\"first_team_score\" value=\"0\"\u003e\n                \u003cinput type=\"hidden\" name=\"second_team_score\" value=\"0\"\u003e\n                \u003cbutton type=\"submit\" class=\"btn btn-primary\"\u003eStart new game\u003c/button\u003e\n            \u003c/form\u003e\n        {{/if}}\n        \u003cbr\u003e\n        {{#each games }}\n            \u003ca class=\"card bg-dark\" href=\"/games/{{ this.id }}\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003cdiv class=\"card-title\"\u003e\n                        \u003ch4\u003e{{ this.first_team }} {{ this.first_team_score }} - {{ this.second_team_score }} {{ this.second_team }}\u003c/h4\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/a\u003e\n        {{/each}}\n    \u003c/div\u003e\n```\n\nThe next view is that of a single game. Put the following code in the file `views/game.hbs`:\n\n``` html\n    \u003c!-- views/game.hbs --\u003e\n    \n    \u003cdiv id=\"main\" class=\"container\" xmlns:v-on=\"http://www.w3.org/1999/xhtml\"\u003e\n        \u003ch2\u003e\\{{ game.first_team }}\n            \u003cspan {{#if user}} contenteditable {{/if}} v-on:blur=\"updateFirstTeamScore\"\u003e\\{{ game.first_team_score }}\u003c/span\u003e\n            -\n            \u003cspan {{#if user}} contenteditable {{/if}} v-on:blur=\"updateSecondTeamScore\"\u003e\\{{ game.second_team_score }}\u003c/span\u003e\n            \\{{ game.second_team }}\u003c/h2\u003e\n        {{#if user }}\n        \u003cdiv class=\"card\"\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cform v-on:submit=\"updateGame\"\u003e\n                    \u003ch6\u003ePost a new game update\u003c/h6\u003e\n                    \u003cinput class=\"form-control\" type=\"number\" v-model=\"pendingUpdate.minute\"\n                           placeholder=\"In what minute did this happen?\"\u003e\n    \n                    \u003cinput class=\"form-control\" placeholder=\"Event type (goal, foul, injury, booking...)\"\n                           v-model=\"pendingUpdate.event_type\"\u003e\n    \n                    \u003cinput class=\"form-control\" placeholder=\"Add a description or comment...\"\n                           v-model=\"pendingUpdate.description\"\u003e\n    \n                    \u003cbutton type=\"submit\" class=\"btn btn-primary\"\u003ePost update\u003c/button\u003e\n                \u003c/form\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        {{/if}}\n        \u003cbr\u003e\n        \u003ch4\u003eGame updates\u003c/h4\u003e\n        \u003cdiv class=\"card-body\" v-for=\"update in game.updates\"\u003e\n            \u003cdiv class=\"card-title\"\u003e\n                \u003ch5\u003e\\{{ update.event_type }} (\\{{ update.minute }}')\u003c/h5\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-text\"\u003e\n                \\{{ update.description }}\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nYou’ll notice we’re using a few Vue.js tags here (`v-on`, `v-for`). We’ll be rendering this page using Vue.js. We’ll come back to that later.\n\nLastly, we’ll add the view for the admin to log in, `views/login.hbs`:\n\n``` html\n    \u003c!-- views/login.hbs --\u003e\n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row justify-content-center\"\u003e\n            \u003cdiv class=\"col-md-8\"\u003e\n                \u003cdiv class=\"card\"\u003e\n                    \u003cdiv class=\"card-header\"\u003eLogin\u003c/div\u003e\n    \n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003cform method=\"POST\" action=\"/login\"\u003e\n                            \u003cdiv class=\"form-group row\"\u003e\n                                \u003clabel for=\"username\" class=\"col-sm-4 col-form-label text-md-right\"\u003eUsername\u003c/label\u003e\n                                \u003cdiv class=\"col-md-6\"\u003e\n                                    \u003cinput id=\"username\" class=\"form-control\" name=\"username\" required autofocus\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n    \n                            \u003cdiv class=\"form-group row\"\u003e\n                                \u003clabel for=\"password\" class=\"col-md-4 col-form-label text-md-right\"\u003ePassword\u003c/label\u003e\n                                \u003cdiv class=\"col-md-6\"\u003e\n                                    \u003cinput id=\"password\" type=\"password\" class=\"form-control\" name=\"password\" required\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n    \n                            \u003cdiv class=\"form-group row mb-0\"\u003e\n                                \u003cdiv class=\"col-md-8 offset-md-4\"\u003e\n                                    \u003cbutton type=\"submit\" class=\"btn btn-primary\"\u003e\n                                        Login\n                                    \u003c/button\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/form\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nLet’s create the routes. Replace the contents of your `routes/index.js` with the following:\n\n``` javascript\n    // routes/index.js\n    \n    const express = require('express');\n    const router = express.Router();\n    const passport = require('passport');\n    \n    // see the login form\n    router.get('/login', (req, res, next) =\u003e {\n        res.render('login');\n    });\n    \n    // log in\n    router.post('/login',\n        passport.authenticate('local', {failureRedirect: '/login'}),\n        (req, res, next) =\u003e {\n            res.redirect('/');\n        });\n    \n    // view all games\n    router.get('/',\n        (req, res, next) =\u003e {\n            res.render('index', {games: {}});\n        });\n    \n    // view a game\n    router.get('/games/:id',\n        (req, res, next) =\u003e {\n            res.render('index', {game: {}});\n        });\n    \n    // start a game\n    router.post('/games',\n        (req, res, next) =\u003e {\n            res.redirect(`/games/${game.id}`);\n        });\n    \n    // post an update for a game\n    router.post('/games/:id',\n        (req, res, next) =\u003e {\n            res.json();\n        });\n    \n    // update a game's score\n    router.post('/games/:id/score',\n        (req, res, next) =\u003e {\n            res.json();\n        });\n    \n    module.exports = router;\n```\n\nWe’re defining seven routes here:\n\n- The routes to view the login form and to log in\n- The routes to view all ongoing games and a single game\n- The routes to create a game, add an update for a game, or update the game’s score\n\nFor now, we’ve only implemented the logic for the first set of routes (login). We’ll come back to the others in a bit.\n\n\n## Implementing the logic\n\nLet’s create the model to map to our database. We have a single model, the Game model:\n\n``` javascript\n    // game.js\n    let mongoose = require('mongoose');\n    \n    let Game = mongoose.model('Game', {\n        first_team: String,\n        second_team: String,\n        first_team_score: Number,\n        second_team_score: Number,\n        updates: [{\n            minute: Number,\n            event_type: String,\n            description: String,\n        }],\n    });\n    \n    module.exports = Game;\n```\n\nThe `updates` field of a game will be an array containing each new update posted for the game in reverse chronological order (newest to oldest).\n\nNow, back to our router. We’ll use the Game model to interact with the database as needed. Replace the code in your `routes/index.js` with the following:\n\n``` javascript\n    // routes/index.js\n    \n    const express = require('express');\n    const router = express.Router();\n    const passport = require('passport');\n    const Game = require('./../game');\n    \n    // see the login form\n    router.get('/login', (req, res, next) =\u003e {\n        res.render('login');\n    });\n    \n    // log in\n    router.post('/login',\n        passport.authenticate('local', {failureRedirect: '/login'}),\n        (req, res, next) =\u003e {\n            res.redirect('/');\n        });\n    \n    // view all games\n    router.get('/',\n        (req, res, next) =\u003e {\n            return Game.find({})\n                .then((games) =\u003e {\n                    return res.render('index', {games});\n                });\n        });\n    \n    // view a game\n    router.get('/games/:id',\n        (req, res, next) =\u003e {\n            return Game.findOne({_id: req.params.id})\n                .then((game) =\u003e {\n                    return res.render('game', { game: encodeURI(JSON.stringify(game)) });\n                });\n        });\n    \n    // start a game\n    router.post('/games',\n        (req, res, next) =\u003e {\n            return Game.create(req.body)\n                .then((game) =\u003e {\n                    return res.redirect(`/games/${game.id}`);\n                });\n        });\n    \n    // post an update for a game\n    router.post('/games/:id',\n        (req, res, next) =\u003e {\n            const data = req.body;\n            // This adds the new update to start of the `updates` array\n            // so they are sorted newest-to-oldest\n            const updateQuery = { $push: { updates: { $each: [ data ], $position: 0 } } };\n            return Game.findOneAndUpdate({_id: req.params.id}, updateQuery)\n                .then((game) =\u003e {\n                    return res.json(game);\n                });\n        });\n    \n    // update a game's score\n    router.post('/games/:id/score',\n        (req, res, next) =\u003e {\n            return Game.findOneAndUpdate({_id: req.params.id}, req.body)\n                .then((game) =\u003e {\n                    return res.json(game);\n                });\n        });\n    \n    module.exports = router;\n```\n\nHere’s what is going on:\n\n- In the home page route, we query the database for a list of all games and send to the view.\n- In the single game route, we retrieve the game’s details and render them.\n- In the start game route, we create a new game and redirect to its page.\n- In the last two routes, we update the game’s details and return the updated values. We use MongoDB’s `[$push operator](https://docs.mongodb.com/manual/reference/operator/update/push/)` to add the new update on top of older ones.\n\n\n## Completing the frontend app\n\nNow we head back to our frontend. We’re going to pull in Vue and use it to manage the single game view. Add the following code at the end of the single game view (`views/game.hbs`):\n\n``` javascript \n    \u003c!-- views/game.hbs --\u003e\n    \n    \n    \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n        const game = JSON.parse(decodeURI(\"{{ game }}\"));\n        var app = new Vue({\n            el: '#main',\n    \n            data: {\n                game,\n                pendingUpdate: {\n                    minute: '',\n                    event_type: '',\n                    description: ''\n                }\n            },\n    \n            methods: {\n                updateGame(event) {\n                    event.preventDefault();\n                    fetch(`/games/${this.game._id}`, {\n                        body: JSON.stringify(this.pendingUpdate),\n                        credentials: 'same-origin',\n                        headers: {\n                            'content-type': 'application/json',\n                            'x-socket-id': window.socketId\n                        },\n                        method: 'POST',\n                    }).then(response =\u003e {\n                        console.log(response);\n                        if (response.ok) {\n                            if (!this.game.updates) this.game.updates = [];\n                            this.game.updates.unshift(this.pendingUpdate);\n                            this.pendingUpdate = {};\n                        }\n                    });\n                },\n    \n                updateScore() {\n                    const data = {\n                        first_team_score: this.game.first_team_score,\n                        second_team_score: this.game.second_team_score,\n                    };\n                    fetch(`/games/${this.game._id}/score`, {\n                        body: JSON.stringify(data),\n                        credentials: 'same-origin',\n                        headers: {\n                            'content-type': 'application/json',\n                        },\n                        method: 'POST',\n                    }).then(response =\u003e {\n                        console.log(response);\n                    });\n                },\n    \n                updateFirstTeamScore(event) {\n                    this.game.first_team_score = event.target.innerText;\n                    this.updateScore();\n                },\n    \n                updateSecondTeamScore(event) {\n                    this.game.second_team_score = event.target.innerText;\n                    this.updateScore();\n                }\n            }\n        });\n    \u003c/script\u003e\n```\n\n## Updating the game details in realtime\n\nSign in to [your Pusher dashboard](http://app.pusher.com) and create a new app. Create a file in the root of your project called `.env`. Copy your app credentials from the **App Keys** section and add them to this file:\n\n```\n    # .env\n    PUSHER_APP_ID=your-app-id\n    PUSHER_APP_KEY=your-app-key\n    PUSHER_APP_SECRET=your-app-secret\n    PUSHER_APP_CLUSTER=your-app-cluster\n```\n\nNow we’ll trigger a new Pusher event on the backend when a game’s details change. Modify the code in your `routes/index.js` so it looks like this:\n\n``` javascript\n    // routes/index.js\n    \n    const express = require('express');\n    const router = express.Router();\n    const passport = require('passport');\n    const Game = require('./../models/game');\n    const Pusher = require('pusher');\n    const pusher = new Pusher({\n        appId: process.env.PUSHER_APP_ID,\n        key: process.env.PUSHER_APP_KEY,\n        secret: process.env.PUSHER_APP_SECRET,\n        cluster: process.env.PUSHER_APP_CLUSTER\n    });\n    \n    // see the login form\n    router.get('/login', (req, res, next) =\u003e {\n        res.render('login');\n    });\n    \n    // log in\n    router.post('/login',\n        passport.authenticate('local', {failureRedirect: '/login'}),\n        (req, res, next) =\u003e {\n            res.redirect('/');\n        });\n    \n    // view all games\n    router.get('/',\n        (req, res, next) =\u003e {\n            return Game.find({})\n                .then((games) =\u003e {\n                    return res.render('index', { games });\n                });\n        });\n    \n    // view a game\n    router.get('/games/:id',\n        (req, res, next) =\u003e {\n            return Game.findOne({_id: req.params.id})\n                .then((game) =\u003e {\n                    return res.render('game', {\n                        game: encodeURI(JSON.stringify(game)),\n                        key: process.env.PUSHER_APP_KEY,\n                        cluster: process.env.PUSHER_APP_CLUSTER,\n                    });\n                });\n        });\n    \n    // start a game\n    router.post('/games',\n        (req, res, next) =\u003e {\n            return Game.create(req.body)\n                .then((game) =\u003e {\n                    return res.redirect(`/games/${game.id}`);\n                });\n        });\n    \n    // post an update for a game\n    router.post('/games/:id',\n        (req, res, next) =\u003e {\n            const data = req.body;\n            // This adds the new update to start of the `updates` array\n            // so they are sorted newest-to-oldest\n            const updateQuery = { $push: { updates: { $each: [ data ], $position: 0 } } };\n            return Game.findOneAndUpdate({_id: req.params.id}, updateQuery)\n                .then((game) =\u003e {\n                    pusher.trigger(`game-updates-${game._id}`, 'event', data, req.headers['x-socket-id']);\n                    return res.json(data);\n                });\n        });\n    \n    // update a game's score\n    router.post('/games/:id/score',\n        (req, res, next) =\u003e {\n        const data = req.body;\n            return Game.findOneAndUpdate({_id: req.params.id}, data)\n                .then((game) =\u003e {\n                    pusher.trigger(`game-updates-${game._id}`, 'score', data, req.headers['x-socket-id']);\n                    return res.json(data);\n                });\n        });\n    \n    module.exports = router;\n```\n\nThe major changes we’ve made here are:\n\n- When rendering the single game view, we pass on the necessary Pusher credentials (the key and the cluster) so the frontend can connect to Pusher and get updated of changes to the game\n- Whenever there’s an update to a game, we trigger an event on a channel tied to the ID of the game. The event will either be “update” or “score”.\n- We’re also passing in the Pusher socket ID so the event doesn’t get sent to the client it’s coming from (see [here](https://pusher.com/docs/server_api_guide/server_excluding_recipients) to learn more).\n\nNow let’s update our frontend to respond to these changes. Add the following code to the end of the single game view:\n\n``` javascript\n    // views/game.hbs\n    \n    \n    \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n        Pusher.logToConsole = true;\n    \n        const pusher = new Pusher(\"{{ key }}\", {\n            cluster: \"{{ cluster }}\"\n        });\n        pusher.connection.bind('connected', () =\u003e {\n            window.socketId = pusher.connection.socket_id;\n        });\n        pusher.subscribe(`game-updates-${app.game._id}`)\n                .bind('event', (data) =\u003e {\n                    app.game.updates.unshift(data);\n                })\n                .bind('score', (data) =\u003e {\n                    app.game.first_team_score = data.first_team_score;\n                    app.game.second_team_score = data.second_team_score;\n                });\n    \u003c/script\u003e\n```\n\nHere we include the Pusher JavaScript library and listen for the events on the game’s channel, and update the game as needed. Vue will handle re-rendering the page for us.\n\nNow let’s see the app in action. Start your MongoDB server by running `mongod`. Note that on Linux or macOS, you might need to run it as `sudo`.\n\nThen start your app on `http://localhost:3000` by running:\n\n```\n    npm start\n```\n\nVisit `/login`  and log in as `admin` (password: “secret”).\n\nUse the form on the home page to start a new game. You’ll be redirected to that game’s page.  Open that same URL in an incognito window (so you can view it as a logged-out user). \n\nMake changes to the game’s score by clicking on the scores and entering a new value. The score will be updated once you click on something else.\n\nYou can also post updates by using the form on the page. In both cases, you should see the scores and game updates in the incognito window update in realtime.\n\n## Conclusion\n\nIn today’s article, we’ve leveraged Pusher’s API to build a lightweight but fun experience that allows anyone to follow the sports action in realtime. The source code of the completed application is available [on GitHub](https://github.com/shalvah/live-game-updates-express).","metaTitle":"Build a live game updates site with Express","metaDescription":"Build a live blogging platform using Express and Vue, designed to post live updates of sports games. It features an admin panel behind authentication and a guest view where site visitors can watch for updates. As an admin posts a new score or match event, both displays update in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4c8TpB5Ln2M42S422SOggm","type":"Entry","createdAt":"2018-11-08T09:49:14.259Z","updatedAt":"2018-11-08T09:49:14.259Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live game updates site with Laravel","url":"live-game-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3j821hA7aMgOiUEaO4Q8y6","type":"Entry","createdAt":"2018-02-26T19:00:03.819Z","updatedAt":"2018-03-20T12:22:11.602Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Shalvah Adebayo","url":"shalvah-adebayo","email":"shalvah.adebayo@gmail.com","twitter":"https://twitter.com/theshalvah","github":"https://shalvah.me/","guestWriter":true}}],"projectRepo":"https://github.com/shalvah/live-game-updates-laravel","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-11-08","description":"Build a live blogging platform using Laravel and Vue, designed to post live updates of sports games. It features an admin panel behind authentication and a guest view where site visitors can watch for updates. As an admin posts a new score or match event, both displays update in realtime.","prerequisite":"You will need PHP 7/1+ and Composer installed on your machine.","content":"In this tutorial, we’ll build a site that allows users to follow the progress of an ongoing sports match. There’ll be a “back office” where site admins can post details about match events as they happen. These events will be shown in realtime on the frontend. Here’s what the completed app looks like in action:\n\n![laravel-live-blog-demo](//images.ctfassets.net/1es3ne0caaid/2fsx7eYJA4sUIIo8aAmuiu/2b050be96b0c8472e05bb2ab95025c4b/laravel-live-blog-demo.gif)\n\nLet’s go!\n\n## Prerequisites\n1. PHP 7.1.3 or newer\n2. [Composer](http://getcompocer.org).\n3. A Pusher account. Create one [here](https://pusher.com/signup).\n\n\n## Setting up\n\nFirst, create a new Laravel project:\n\n```\n    composer create-project --prefer-dist laravel/laravel live-game-updates\n```\n\nOpen up the generated project folder (`live-game-updates`). Remove all the lines in your `.env` file that start with `DB_` and replace them with:\n\n```\n    DB_CONNECTION=sqlite\n    DB_DATABASE=database/database.sqlite\n```\n\nThen create a file called `database.sqlite` in the `database` folder of your app.\n\n\n## Authentication\n\nOur app will require admin users to be logged in, so let’s set that up. Run the following command to set up Laravel’s included auth system:\n\n```\n    php artisan make:auth\n```\n\nNext, let’s add our admin user. Open up the file `database/migrations/2014_10_12_000000_create_users_table.php`, and modify the `up` method so it looks like this:\n\n``` php\n    // database/migrations/2014_10_12_000000_create_users_table.php\n    \n    public function up()\n    {\n        Schema::create('users', function (Blueprint $table) {\n            $table-\u003eincrements('id');\n            $table-\u003estring('name');\n            $table-\u003estring('email')-\u003eunique();\n            $table-\u003etimestamp('email_verified_at')-\u003enullable();\n            $table-\u003estring('password');\n            $table-\u003erememberToken();\n            $table-\u003etimestamps();\n        });\n        \\App\\User::create([\n            'name' =\u003e \"Admin\",\n            'email' =\u003e \"admin@live-game-updates.com\",\n            'password' =\u003e \\Illuminate\\Support\\Facades\\Hash::make('secret'),\n        ]);\n    }\n```\n\nNow let’s run our migrations, so the database is set up and our admin user created:\n\n```\n    php artisan migrate\n```\n\n## Building the views\n\nFirst, we’ll build the home page. It shows a list of active games. If the user is logged in as the admin, it will also display a form to start recording a new game. Replace the contents of `home.blade.php` in the directory `resources/views` with the following:\n\n``` php\n    \u003c!-- resources/views/home.blade.php --\u003e\n    @extends('layouts.app')\n    \n    @section('content')\n        \u003cdiv class=\"container\"\u003e\n            \u003ch2\u003eOngoing games\u003c/h2\u003e\n            @auth\n                \u003cform method=\"post\" action=\"{{ url('/games') }}\" class=\"form-inline\"\u003e\n                  @csrf\n                  \u003cinput class=\"form-control\" name=\"first_team\" placeholder=\"First team\" required\u003e\n                  \u003cinput class=\"form-control\" name=\"second_team\" placeholder=\"Second team\" required\u003e\n                  \u003cinput type=\"hidden\" name=\"first_team_score\" value=\"0\"\u003e\n                  \u003cinput type=\"hidden\" name=\"second_team_score\" value=\"0\"\u003e\n                  \u003cbutton type=\"submit\" class=\"btn btn-primary\"\u003eStart new game\u003c/button\u003e\n                \u003c/form\u003e\n            @endauth\n            @forelse($games as $game)\n                \u003ca class=\"card bg-dark\" href=\"/games/{{ $game-\u003eid }}\"\u003e\n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003cdiv class=\"card-title\"\u003e\n                            \u003ch4\u003e{{ $game-\u003escore }}\u003c/h4\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/a\u003e\n            @empty\n                No games in progress.\n            @endforelse\n        \u003c/div\u003e\n    @endsection\n```\n\nNext up is the view for a single game. Here we show the game’s score at the top and a list of events in reverse order below it. For the admin user, this view will also have a form where the user can post a report of a game event. The score displayed at the top will also be editable by an admin. Create the file `game.blade.php` in the directory `resources/views` with the following content:\n\n``` php\n    \u003c!-- resources/views/game.blade.php --\u003e\n    \n    @extends('layouts.app')\n    \n    @section('content')\n        \u003cdiv id=\"main\" class=\"container\" xmlns:v-on=\"http://www.w3.org/1999/xhtml\"\u003e\n            \u003ch2\u003e@{{ game.first_team }}\n                \u003cspan @auth contenteditable @endauth v-on:blur=\"updateFirstTeamScore\"\u003e@{{ game.first_team_score }}\u003c/span\u003e\n                -\n                \u003cspan @auth contenteditable @endauth v-on:blur=\"updateSecondTeamScore\"\u003e@{{ game.second_team_score }}\u003c/span\u003e\n                @{{ game.second_team }}\u003c/h2\u003e\n            @auth\n                \u003cdiv class=\"card\"\u003e\n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003cform v-on:submit=\"updateGame\"\u003e\n                            \u003ch6\u003ePost a new game update\u003c/h6\u003e\n                            \u003cinput class=\"form-control\" type=\"number\" id=\"minute\" v-model=\"pendingUpdate.minute\"\n                                   placeholder=\"In what minute did this happen?\"\u003e\n    \n                            \u003cinput class=\"form-control\" id=\"type\" placeholder=\"Event type (goal, foul, injury, booking...)\"\n                                   v-model=\"pendingUpdate.type\"\u003e\n    \n                            \u003cinput class=\"form-control\" id=\"description\" placeholder=\"Add a description or comment...\"\n                                   v-model=\"pendingUpdate.description\"\u003e\n    \n                            \u003cbutton type=\"submit\" class=\"btn btn-primary\"\u003ePost update\u003c/button\u003e\n                        \u003c/form\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            @endauth\n            \u003cbr\u003e\n            \u003ch4\u003eGame updates\u003c/h4\u003e\n            \u003cdiv class=\"card-body\" v-for=\"update in updates\"\u003e\n                \u003cdiv class=\"card-title\"\u003e\n                    \u003ch5\u003e@{{ update.type }} (@{{ update.minute }}')\u003c/h5\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"card-text\"\u003e\n                    @{{ update.description }}\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript\u003e\n            window.updates = @json($updates);\n            window.game = @json($game);\n        \u003c/script\u003e\n    @endsection\n```\n\nWe’re making the score elements editable by admins using the `contenteditable` attribute. This makes it possible for a user to click on the score and enter a new value. Once they click outside, we’ll update the value on the backend.\n\nWe’ll be using Vue to render and manage this view, but let’s come back to that later. For now, we’ll move on to adding the routes. Edit your `routes/web.php` so it looks like this:\n\n``` php\n    // routes/web.php\n    \u003c?php\n    \n    Auth::routes();\n    \n    Route::get('/', 'HomeController@index')-\u003ename('home');\n    Route::get('/games/{id}', 'HomeController@viewGame');\n    Route::post('/games', 'HomeController@startGame')-\u003emiddleware('auth');\n    Route::post('/games/{id}', 'HomeController@updateGame')-\u003emiddleware('auth');\n    Route::post('/games/{id}/score', 'HomeController@updateScore')-\u003emiddleware('auth');\n```\n\nWe have five routes, not counting our authentication routes:\n\n- The home page, which shows a list of games (and allows the admin to start a new game).\n- The single game view, where a viewer can see updates on a particular game, and an admin can post new updates.\n- The route to start a new game.\n- The route to post a game update.\n- The route to update the game’s score.\n\nThe last two are only accessible by admins.\n\n## Implementing the core logic\n\nNow, we’ll implement the logic for recording games. First, we’ll add `Game` and `Update` models. Run the following commands to create the models and their corresponding database migrations:\n\n``` php\n    php artisan make:model -m Game\n    php artisan make:model -m Update\n```\n\nNow let’s edit the generated migration files. Open up the `CreateGamesTable`  migration (you’ll find it in the `database/migrations` folder) and replace its contents with the following:\n\n``` php\n    // database/migrations/201*_**_**_*****_create_games_table\n    \u003c?php\n    \n    use Illuminate\\Support\\Facades\\Schema;\n    use Illuminate\\Database\\Schema\\Blueprint;\n    use Illuminate\\Database\\Migrations\\Migration;\n    \n    class CreateGamesTable extends Migration\n    {\n        public function up()\n        {\n            Schema::create('games', function (Blueprint $table) {\n                $table-\u003eincrements('id');\n                $table-\u003estring('first_team');\n                $table-\u003estring('second_team');\n                $table-\u003estring('first_team_score');\n                $table-\u003estring('second_team_score');\n                $table-\u003etimestamps();\n            });\n        }\n        \n        public function down()\n        {\n            Schema::dropIfExists('games');\n        }\n    }\n```\n\nAlso replace the contents of the `CreateUpdatesTable`  migration with this:\n\n``` php\n    // database/migrations/201*_**_**_******_create_updates_table\n    \u003c?php\n    \n    use Illuminate\\Support\\Facades\\Schema;\n    use Illuminate\\Database\\Schema\\Blueprint;\n    use Illuminate\\Database\\Migrations\\Migration;\n    \n    class CreateUpdatesTable extends Migration\n    {\n        public function up()\n        {\n            Schema::create('updates', function (Blueprint $table) {\n                $table-\u003eincrements('id');\n                $table-\u003eunsignedInteger('game_id');\n                $table-\u003eunsignedInteger('minute');\n                $table-\u003estring('type');\n                $table-\u003estring('description');\n                $table-\u003etimestamps();\n            });\n        }\n    \n        public function down()\n        {\n            Schema::dropIfExists('updates');\n        }\n    }\n```\n\nNow run `php artisan migrate` so our database tables get created.\n\nLet’s update the models. Replace the contents of the `Game` model with the following:\n\n``` php\n    // app/Game.php\n    \u003c?php\n    namespace App;\n    \n    use Illuminate\\Database\\Eloquent\\Model;\n    \n    class Game extends Model\n    {\n        protected $guarded = [];\n        \n        protected $appends = ['updates', 'score'];\n    \n        public function getUpdatesAttribute()\n        {\n            return Update::orderBy('id desc')-\u003ewhere('game_id', '=', $this-\u003eid)-\u003eget();\n        }\n        \n        // return the game score in the format \"TeamA 1 - 0 TeamB\"\n        public function getScoreAttribute()\n        {\n            return \"$this-\u003efirst_team $this-\u003efirst_team_score - $this-\u003esecond_team_score $this-\u003esecond_team\";\n        }    \n    }\n```\n\nHere, we’ve configured the `updates` property of a game to return all updates posted for it in reverse chronological order (most recent first). We’ve also added a `score` attribute that will display the score in a common format.\n\nReplace the contents of the `Update` model with the following:\n\n\n``` php    \n    // app/Update.php\n    \u003c?php\n    namespace App;\n    \n    use Illuminate\\Database\\Eloquent\\Model;\n    \n    class Update extends Model\n    {\n        protected $guarded = [];\n    }\n```\n\nFinally, back to the controller to complete our routing logic. We’ll write methods that handle each of the routes we defined above. Add the following methods in your `HomeController` class:\n\nFirst, the `index` method, which renders the homepage with a list of games:\n\n``` php\n    // app/Http/Controllers/HomeController.php\n    \n        public function index()\n        {\n            $games = \\App\\Game::all();\n            return view('home', ['games' =\u003e $games]);\n        }\n```\n\nThe `viewGame` method shows a single game and its updates:\n\n``` php\n    // app/Http/Controllers/HomeController.php\n    \n    public function viewGame(int $id)\n    {\n        $game = \\App\\Game::find($id);\n        $updates = $game-\u003eupdates;\n        return view('game', ['game' =\u003e $game, 'updates' =\u003e $updates]);\n    }\n```\n\nThe `startGame` method creates a new game with the provided data and redirects to that game’s page:\n\n``` php\n    // app/Http/Controllers/HomeController.php\n    \n    public function startGame()\n    {\n        $game = \\App\\Game::create(request()-\u003eall());\n        return redirect(\"/games/$game-\u003eid\");\n    }\n```\n\nThe `updateGame` method creates a new game update:\n\n``` php\n    // app/Http/Controllers/HomeController.php\n    \n    public function updateGame(int $id)\n    {\n        $data = request()-\u003eall();\n        $data['game_id'] = $id;\n        $update = \\App\\Update::create($data);\n        return response()-\u003ejson($update);\n    }\n```\n\nAnd the `updateScore` method updates the game’s score:\n\n``` php    \n    // app/Http/Controllers/HomeController.php\n    \n    public function updateScore(int $id)\n    {\n        $data = request()-\u003eall();\n        \\App\\Game::where('id', $id)-\u003eupdate($data);\n        return response()-\u003ejson();\n    }\n```\n\nLastly, delete the `__construct` method in the `HomeController` class. Its only function is to attach the `auth` middleware to all the routes, which we don’t want.\n\n## Connecting the frontend to the backend\n\nNow we need to complete the view for the game updates using Vue.js. Open up the file `resources/js/app.js` and replace its contents with the following:\n\n``` javascript\n    // resources/js/app.js\n    \n    require('./bootstrap');\n    \n    window.Vue = require('vue');\n    \n    const app = new Vue({\n        el: '#main',\n    \n        data: {\n                updates,\n                game,\n                pendingUpdate: {\n                    minute: '',\n                    type: '',\n                    description: ''\n                }\n        },\n    \n        methods: {\n            updateGame(event) {\n                event.preventDefault();\n                axios.post(`/games/${this.game.id}`, this.pendingUpdate)\n                    .then(response =\u003e {\n                        console.log(response);\n                        this.updates.unshift(response.data);\n                        this.pendingUpdate = {};\n                    });\n            },\n    \n            updateScore() {\n                const data = {\n                    first_team_score: this.game.first_team_score,\n                    second_team_score: this.game.second_team_score,\n                };\n                axios.post(`/games/${this.game.id}/score`, data)\n                    .then(response =\u003e {\n                        console.log(response)\n                    });\n            },\n    \n            updateFirstTeamScore(event) {\n                this.game.first_team_score = event.target.innerText;\n                this.updateScore();\n            },\n    \n            updateSecondTeamScore(event) {\n                this.game.second_team_score = event.target.innerText;\n                this.updateScore();\n            }\n        }\n    });\n```\n\nFinally, install dependencies:\n\n```\n    npm install\n```\n\nYou can take the app for a test drive right now. Run `npm run dev` to compile the JavaScript, then `php artisan serve` to start the app on http://localhost:8000. To log in, visit `/login`  and log in as `admin@live-game-updates.com` (password: “secret”). You’ll then be able to start recording new games and post updates. \n\n\n## Updating game score and events in realtime\n\nNow, we’ll add the realtime component using Pusher Channels. First, pull in the server and client libraries by running:\n\n```\n    composer require pusher/pusher-http-laravel\n    npm i pusher-js\n```\n\nThen sign in to [your Pusher dashboard](http://app.pusher.com) and create a new app. Copy your app credentials from the **App Keys** section and add them to your `.env` file:\n\n```\n    PUSHER_APP_ID=your-app-id\n    PUSHER_APP_KEY=your-app-key\n    PUSHER_APP_SECRET=your-app-secret\n    PUSHER_APP_CLUSTER=your-app-cluster\n```\n\nNext, we’ll update the controller so the `updateGame` and `updateScore` method publish the updated values via Pusher.\n\n``` php\n    // app/Http/Controllers/HomeController.php\n    \n    public function updateGame(int $id, \\Pusher\\Laravel\\PusherManager $pusher)\n    {\n        $data = request()-\u003eall();\n        $data['game_id'] = $id;\n        $update = \\App\\Update::create($data);\n        $pusher-\u003etrigger(\"game-updates-$id\", 'event', $update, request()-\u003eheader('x-socket-id'));\n        return response()-\u003ejson($update);\n    }\n    \n    public function updateScore(int $id, \\Pusher\\Laravel\\PusherManager $pusher)\n    {\n        $data = request()-\u003eall();\n        $game = \\App\\Game::find($id);\n        $game-\u003eupdate($data);\n        $pusher-\u003etrigger(\"game-updates-$id\", 'score', $game, request()-\u003eheader('x-socket-id'));\n        return response()-\u003ejson();\n    }\n```\n\nWe’re making use of the `X-Socket-Id` header so that Pusher does not rebroadcast the event to the browser window that sent it (see more [here](https://pusher.com/docs/server_api_guide/server_excluding_recipients)).\n\nFinally, we’ll update our Vue app so it updates to match the changes. Add this to the end of your `app.js`:\n\n``` javascript\n    // resources/js/app.js\n    \n    window.Pusher = require('pusher-js');\n    Pusher.logToConsole = true;\n    \n    const pusher = new Pusher(process.env.MIX_PUSHER_APP_KEY, {\n        cluster: process.env.MIX_PUSHER_APP_CLUSTER\n    });\n    \n    pusher.subscribe(`game-updates-${app.game.id}`)\n        .bind('event', (data) =\u003e {\n            app.updates.unshift(data);\n        })\n        .bind('score', (data) =\u003e {\n            app.game.first_team_score = data.first_team_score;\n            app.game.second_team_score = data.second_team_score;\n        });\n```\n\nHere, we set up our Pusher client and listen for the `event` and `score` events on the game updates channel, and update the corresponding values of the Vue app. Vue will automatically update the view with the new values.\n\nAll done! Time to try our app out. Compile the JavaScript by running:\n\n```\n    npm run dev\n```\n\nThen start the app by running:\n\n```\n    php artisan serve\n```\n\nVisit `/login`  and log in as `admin@live-game-updates.com` (password: “secret”).\n\nUse the form on the home page to start a new game. You’ll be redirected to that game’s page.  Open that same URL in an incognito window (so you can view it as a logged-out user). \n\nMake changes to the game’s score by clicking on the scores and entering a new value. The score will be updated once you click on something else.\n\nYou can also post updates by using the form on the page. In both cases, you should see the scores and game updates in the incognito window update in real-time.\n\n\n## Conclusion\n\nWe’ve built a useful and simple project that can be used to provide realtime updates on a local sports league, for instance. This type of tech powers many sites in the real world, and I hope you had fun working with it. The source code of the completed application is available [on GitHub](https://github.com/shalvah/live-game-updates-laravel).","metaTitle":"Build a live game updates site with Laravel","metaDescription":"Build a live blogging platform, designed to post live updates of sports games. It features an admin panel behind authentication and a guest view where site visitors can watch for updates. As an admin posts a new score or match event, both displays update in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2wIuIeFmtigsqWIcKaAgyu","type":"Entry","createdAt":"2018-11-06T11:46:07.300Z","updatedAt":"2018-11-06T11:46:07.300Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Handling authorization in GraphQL","url":"authorization-graphql","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5K3KWA2xvqw4SW2sYI8eCG","type":"Entry","createdAt":"2018-02-12T15:34:14.169Z","updatedAt":"2018-02-14T10:09:19.038Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Chimezie Enyinnaya","url":"chimezie-enyinnaya","email":"meziemichael@gmail.com","twitter":"https://twitter.com/ammezie","github":"https://github.com/ammezie","guestWriter":true}}],"projectRepo":"https://github.com/ammezie/graphql-authorization","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JIfHx7gJySI6CiKyaC4kO","type":"Entry","createdAt":"2018-10-09T17:48:45.939Z","updatedAt":"2019-08-22T11:17:21.577Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"GraphQL","url":"graphql","type":"language","featured":false}}],"reviewDate":"2018-11-06","description":"This tutorial shows how to use GraphQL to manage authorization and user roles. You will build on a previous app to create an admin and a general user, and implement different permissions based on user role.","prerequisite":"You will need Node installed on your machine. Basic knowledge of JavaScript and GraphQL will be helpful.","content":"Authorization occurs after a successful authentication, it checks the access levels or privileges of the user, which will determine what the user can see or do with the application. Some time ago, I did a tutorial series on [handling authentication in GraphQL](https://blog.pusher.com/handling-authentication-in-graphql). So in this tutorial, I will be covering authorization.\n\n## Prerequisites\n\nThis tutorial assumes the following:\n\n- Node.js and NPM installed on your computer\n- Basic knowledge of JavaScript and Node.js\n- Basic knowledge of GraphQL\n- Understanding of handling authentication in GraphQL with JWT. You can check out this [tutorial](https://blog.pusher.com/handling-authentication-in-graphql-jwt/).\n\n## What we'll be building\n\nWe will be building on where we left off from [handling authentication in GraphQL – Part 2: JWT](https://blog.pusher.com/handling-authentication-in-graphql-jwt/). To demonstrate authorization, we will add two new features: fetching a list of all users and allowing users to edit their post. Only an admin user will be able to fetch a list of all users. Also, we will make it so users can only edit their own posts.\n\n## Getting started\n\nTo speed things up, we will start by cloning a boilerplate, which I have created for this tutorial:\n\n```\n    $ git clone --branch starter https://github.com/ammezie/graphql-authorization.git\n```\n\nNext, let’s install the project dependencies: \n\n```\n    $ cd graphql-authorization\n    $ npm install\n```\n\nNext, rename `.env.example` to `.env` then enter your JWT secret:\n\n```\n    // .env\n    \n    JWT_SECRET=somereallylongsecretkey\n```\n\nWe will be using SQLite, so create a new `database.sqlite3`  file in the project’s root directory.\n\n```\n    $ touch database.sqlite3\n```\n\nLastly, run the migration:\n\n```\n    $ node_modules/.bin/sequelize db:migrate\n```\n\nIf you followed from the handling authentication in GraphQL series, you will already be familiar with the project. I made some few changes though. The project has been migrated to [Apollo Server 2](https://www.apollographql.com/docs/apollo-server/v2) and the `User` model now has an `is_admin` column as well as a corresponding `isAdmin` field on the `User` type schema definition. Also, a new `Post` model and `Post` type have been added, as well a query to fetch a single post and mutation for creating a new post.\n\n## Creating dump data\n\nTo test out what we will be building, we need to have some data to play with. So let’s create some. First, let’s start the server:\n\n```\n    $ npm run dev\n```\n\nThe project has nodemon as a dev dependency, which will watch our files for changes and restarts the server. So we will leave this running for the rest of the tutorial.\n\nThe server should be running on http://localhost:4000/api. Apollo Server 2 now comes with Playground. Visiting the URL should load it up as seen in the image below:\n\n![graphql-auth-demo-1](//images.ctfassets.net/1es3ne0caaid/6oETHrz2H6CCksCCkAA8em/62aafd2bf961502e1255d3202c37414f/graphql-auth-demo-1.png)\n\nLet’s create two users and a new post created by one of the users. In Playground enter the mutations below one after the other.\n\n``` json\n    // Create first user\n    mutation {\n      signup (username: \"mezie\", email: \"chimezie@tutstack.io\", password: \"password\")\n    }\n    \n    // Create second user\n    mutation {\n      signup (username: \"johndoe\", email: \"johndoe@example.com\", password: \"password\")\n    }\n```\n\nNext, log in as one of the user:\n\n``` json\n    // Log in as the first user\n    mutation {\n      login (email: \"chimezie@tutstack.io\", password: \"password\")\n    }\n```\n\nThe mutation above will return a JWT, which we will attach as an `Authorization` header in our subsequent requests.\n\nClick on **HTTP HEADERS** at the bottom of Playground, then enter the JWT copied from above:\n\n``` json\n    {\n      \"Authorization\": \"Bearer ENTER JWT HERE\"\n    }\n```\n\n![graphql-auth-http-headers](//images.ctfassets.net/1es3ne0caaid/2Uih36qMXSqYak8eUQeS4w/fe209ce026c520ec4e0e6475a83709eb/graphql-auth-http-headers.png)\n\nNow, we can create a new post as the logged in user:\n\n``` json\n    // Create a new post\n    mutation {\n      createPost (title: \"Intro to GraphQL\", content: \"This is an intro to GraphQL.\"){\n        title\n        content\n      }\n    }\n```\n\nThe rest of this tutorial assumes you have at least two users and a post created by one of the users.\n\n## Using a resolver function\n\nWe will be looking at two different methods with which we can handle authorization in GraphQL. This first method is to add the authorization logic directly inside the resolver function, which is pretty straightforward. We will be using this method to implement editing a post.\n\nFirst, let’s define the mutation for editing a post. Open `schemas/index.js` and add the code below inside the `Mutation` object:\n\n``` javascript\n    // schemas/index.js\n    \n    type Mutation {\n      ...\n      editPost(id: Int!, title: String, content: String): Post\n    }\n```\n\nThis mutation accepts three arguments: the ID of the post, the title of the post and the content of the post. Only the `id` argument is required. \n\nNext, let’s write the resolver function for this mutation. Inside `resolvers/index.js`, add the code below immediately after the `createPost` resolver function in the `Mutation` object:\n\n``` javascript\n    // resolvers/index.js\n    \n    async editPost (root, { id, title, content }, { user }) {\n      if (!user) {\n        throw new Error('You are not authenticated!')\n      }\n      \n      const post = await Post.findById(id)\n        \n      if (!post) {\n        throw new Error('No post found')\n      }\n      \n      if (user.id !== post.user_id) {\n        throw new Error('You can only edit the posts you created!')\n      }\n      \n      await post.update({ title, content })\n      \n      return post\n    }\n```\n\nHere, we first check to make sure the user is authenticated. Then we get the post matching the supplied ID. If no match was found, we throw an appropriate error. Then we check to make sure the authenticated user trying to edit the post is the author of the post by checking the user ID against the `user_id` on the `post` object. If the authenticated user is not the author of the post, we throw an appropriate error. Otherwise, we update the post with the supplied details and return the newly updated post.\n\nLet’s test this out. First, let’s trying editing a post we didn’t create. We should get an error as in the image below:\n\n``` json\n    // Editing a post user didn’t create\n    mutation {\n      editPost (id:1, title: \"GraphQL 101\", content: \"This is an intro to GraphQL.\") {\n        title\n        content\n        author {\n          username\n        }\n      }\n    }\n```\n\nWe should get an error like below:\n\n``` json\n    {\n      ...\n      \"errors\": [\n        {\n          \"message\": \"You can only edit the posts you created!\",\n          ...\n        }\n      ]\n    }\n```\n\nBut if we trying to edit our own post, then we should see the updated post:\n\n``` json\n    {\n      \"data\": {\n        \"editPost\": {\n          \"title\": \"GraphQL 101\",\n          \"content\": \"This is an intro to GraphQL.\",\n          \"author\": {\n            \"username\": \"mezie\"\n          }\n        }\n      }\n    }\n```\n\n## Using custom directives\n\nNow, let’s allow an admin to fetch a list of users that have signed up. For this, we will be using the second method, which is using custom directives. A GraphQL directive starts with the `@` symbol. The core GraphQL specification includes two directives: `@include()` and `@skip()`. Visit the [GraphQL directives](https://graphql.org/learn/queries/#directives) page to learn more about directives.\n\nLet’s create the schema for fetching all users. Add the code below inside `schemas/index.js`:\n\n``` javascript\n    // schemas/index.js\n    \n    const typeDefs = gql`\n      directive @isAdmin on FIELD_DEFINITION\n      \n      ...\n      type Query {\n        allUsers: [User]! @isAdmin\n        ...\n      }\n      ...\n    `\n```\n\nFirst, we define a new directive called `@isAdmin`, which will be added to a field (hence, `FIELD_DEFINITION`). Then we define the query for fetching all users and use the `@isAdmin` directive on it. This means only admin users will be able to perform this query.\n\nNow, let’s create the `@isAdmin` implementation. Create a new `directives` directory in the project’s root. Then inside the `directives` directory, create a new `isAdmin.js` file and paste the code below in it:\n\n``` javascript\n    // directives/isAdmin.js\n    \n    const { SchemaDirectiveVisitor } = require('apollo-server-express')\n    const { defaultFieldResolver } = require('graphql')\n    \n    class IsAdminDirective extends SchemaDirectiveVisitor {\n      visitFieldDefinition (field) {\n        const { resolve = defaultFieldResolver } = field\n        \n        field.resolve = async function (...args) {\n          // extract user from context\n          const { user } = args[2]\n          \n          if (!user) {\n            throw new Error('You are not authenticated!')\n          }\n          \n          if (!user.is_admin) {\n            throw new Error('This is above your pay grade!')\n          }\n          \n          return resolve.apply(this, args)\n        }\n      }\n    }\n    \n    module.exports = IsAdminDirective\n```\n\nApollo Server 2 makes it easy to create custom directives by using `SchemaDirectiveVisitor`. We create a new `IsAdminDirective` class which extends `SchemaDirectiveVisitor`. Since we want the directive to be added to a field, we override the `visitFieldDefinition()`, which accepts the field the directive was added to. Inside the resolve function of the field, we get the authenticated user from the context. Then we perform the authentication and authorization checks and throw any appropriate errors.\n\nNext, let’s write the resolver function for the query. Inside `resolvers/index.js`, add the code below immediately after the `post` resolver function in the `Query` object:\n\n``` javascript\n    // resolvers/index.js\n    \n    async allUsers (root, args, { user }) {\n      return User.all()\n    }\n```\n\nBefore we test this out, let’s make our server be aware of the custom directive. Update `server.js` to reflect the changes below:\n\n``` javascript\n    // server.js\n    \n    ...\n    const IsAdminDirective = require('./directives/isAdmin')\n    ...\n    \n    const server = new ApolloServer({\n      typeDefs,\n      resolvers,\n      schemaDirectives: {\n        isAdmin: IsAdminDirective\n      },\n      context: ({ req }) =\u003e ({\n        user: req.user\n      })\n    })\n    ...\n```\n\nWe import the custom directive, then we add a new `schemaDirectives` object (which contains our custom directive) to the object passed to `ApolloServer`.\n\nTo test this out, let’s set one of the users we created earlier as an admin. To keep things simple, we will do this manually directly in the database. Just change the `is_admin` value of the user from `0` to `1`.\n\nIf we try to perform the fetch all users query as a non-admin user:\n\n``` json\n    // fetching all users as a non-admin user\n    \n    {\n      allUsers {\n        username\n        email\n      }\n    }\n```\n\nWe will get an error as below:\n\n``` json\n    {\n      ...\n      \"errors\": [\n        {\n          \"message\": \"This is above your pay grade!\",\n          ...\n        }\n      ]\n    }\n```\n\nOtherwise, we should get an array of all users:\n\n``` json\n    {\n      \"data\": {\n        \"allUsers\": [\n          {\n            \"username\": \"mezie\",\n            \"email\": \"chimezie@tutstack.io\"\n          },\n          {\n            \"username\": \"johndoe\",\n            \"email\": \"johndoe@example.com\"\n          }\n        ]\n      }\n    }\n```\n\n## Conclusion\n\nIn this tutorial, we saw how to handle authorization in GraphQL. We looked at two different methods of achieving it. Using custom directives has some advantages over using resolver function, which include reducing repetition in your resolver function, which in turn keeps your them lean. Another advantage is that it promotes reusability and it’s easier to maintain.\n\nThe complete code is available on [GitHub](https://github.com/ammezie/graphql-authorization).","metaTitle":"Handling authorization in GraphQL","metaDescription":"This tutorial shows how to use GraphQL to manage authorization and user roles. You will build on a previous app to create an admin and a general user, and implement different permissions based on user role."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5tl7of1DKEgoi2oqIUWScS","type":"Entry","createdAt":"2018-11-06T11:45:11.893Z","updatedAt":"2018-11-06T11:45:11.893Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a two-player memory game with React Native","url":"memory-game-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNMemory","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4IiTE4WzzyQkoeAoaOqgcu","type":"Entry","createdAt":"2018-02-12T15:10:28.101Z","updatedAt":"2018-02-26T12:31:12.455Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Multiplayer Game","url":"multiplayer-game","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2018-11-06","description":"This tutorial will show you how to build a two-player memory game using React Native. Players sign in and are randomly assigned an opponent. The game then involves searching for image pairs. The game board and score update in realtime.","prerequisite":"You will need Node, Yarn, ngrok and Expo installed on your machine. Some knowledge of React Native development is required.","content":"In this tutorial, we’ll build a realtime memory game app with React Native and Pusher Channels. \n\n\n## Prerequisites\n\nBasic knowledge of React Native is required.\n\nTo easily test the app on multiple devices, we’ll be using [Expo](https://expo.io/) to create it. Be sure to install their [Android](https://play.google.com/store/apps/details?id=host.exp.exponent\u0026hl=en) or [iOS](https://itunes.apple.com/us/app/expo-client/id982107779?mt=8) client apps. Log in to your Expo account on both the CLI and client apps. [Create one](https://expo.io/signup) if you don’t have it already.\n\nThese are the package versions used in creating the app:\n\n\n- Node 8.3.0\n- Yarn 1.7.0\n- Expo CLI 2.1.2\n- Expo SDK 30.0.0\n- Pusher 4.3.1\n\nLastly, you also need a [Pusher](https://pusher.com/) and [ngrok](https://ngrok.com/) account. We’ll use it to create a Pusher app instance and expose the local Pusher server to the internet.\n\n\n## App overview\n\nWe’re going to build a two-player memory game app. \n\nWhen they open the app, users will be greeted by a login screen where they have to enter their username:\n\n![rn-memory-demo-1](//images.ctfassets.net/1es3ne0caaid/7C8jOMvjDU4Su66c6qi4M2/cb7b88b8cf276fb80527cb7df91b0013/rn-memory-demo-1.png)\n\nWhen a user logs in, the app’s server component will pick two random users and they’re the ones who will play.\n\nOnce an opponent is found, both users are automatically navigated to the Game screen. By default, there will be a lot of question mark icons, these represent the cards that haven’t been opened yet:\n\n![rn-memory-demo-2](//images.ctfassets.net/1es3ne0caaid/45tgSa5DUA868yMSIsGyA8/4a35bfedcacbdae5e9de64f1e55e0e33/rn-memory-demo-2.png)\n\nTo play the game, users have to click on each one to reveal its content. Users can reveal the content of up to two cards before both of them closes. Once a user has selected a pair, they will stay open for the rest of the game.\n\nHere’s what the screen looks like while the two players are playing the game:\n\n![rn-memory-demo-3](//images.ctfassets.net/1es3ne0caaid/4osnUhZMPKyas6CmUCk4Mu/6e4c9a7c4fc29a95f2dec9eeef225bc6/rn-memory-demo-3.png)\n\nWhen one of the players accumulates the maximum score (in this case it’s 12), both players are notified that one of them already won and the UI is reset:\n\n![rn-memory-demo-4](//images.ctfassets.net/1es3ne0caaid/3UbXAG3a6s06k808Q4yIiM/a65c3ec37bfe970e1b4bbb2b548d5148/rn-memory-demo-4.png)\n\nYou can view the app’s source code in this [GitHub repo](https://github.com/anchetaWern/RNMemory).\n\n\n## Create a Pusher app\n\nYou need to create a Pusher app instance so you can use Pusher’s services.\n\nOn your Pusher account dashboard, create a new Pusher app and check the **Enable client events** in the app settings. This allows us to emit events directly from the app:\n\n![rn-memory-enable-client-events](//images.ctfassets.net/1es3ne0caaid/6pEk3EZMOc2m0aCsKO2yE4/90724fb8ba79aa2ca0e6504a594a27e6/rn-memory-enable-client-events.png)\n\n## Clone the starter project\n\nSo that we can focus on the main parts of the app, clone the app’s GitHub repo and switch to the `starter` branch:\n\n```\n    git clone https://github.com/anchetaWern/RNMemory\n    cd RNMemory\n    git checkout starter\n```\n\nThe `starter` branch contains all the screens of the app (Login and Game screen), helper functions, and the UI components that we will be using. The app screens and the server component are where we will do most of the work.\n\nNext, install all the packages the app and the server depend on:\n\n```\n    yarn install\n    cd server\n    npm install\n```\n\n## Starter project tour\n\nBefore we proceed to actually code the app, let’s first take a quick look at the files and folders that are already available in the starter project:\n\n\n- `app/screens` - this is where the app’s screens are stored. We only have two screens: Login and Game. Only a starter template with minimum output is available in the starter branch.\n- `app/helpers` - this is where the app’s helper functions are stored. In this case, we only have the `shuffleArray.js` file. It’s used to arrange the items in the array in random order. This is very useful for changing the location of the cards that need to be guessed in the screen.\n- `app/data` - this is where hard-coded data is stored. In this case, we only have the `cards.js` file which contains the definition for the unique cards that the app uses. We’re using [Expo’s vector icons](https://expo.github.io/vector-icons/) so the file contains the `name` of the icon, the `src` (for example, FontAwesome), and the `color` we want to apply to it.\n- `app/components` - this is where the UI components of the app are stored. In this case, we only have the `Card.js` which renders the individual cards, and `Score.js` which renders the score and name of the user.\n- `server` - this is where we will add the code for the server component of the app. Currently, it only has the `.env` file which contains the placeholder for Pusher app credentials.\n\n\n## Build the app\n\nWe’re now ready to start building the app. I encourage you to start running the app even if the code is still not complete. This allows you to visualize what the code does as we’re adding it:\n\n```\n    expo start\n```\n\n### Login screen\n\nIn the Login screen, start by importing all the packages we need:\n\n``` javascript\n    // app/screens/Login.js\n    import React, { Component } from \"react\";\n    import {\n      View,\n      Text,\n      TextInput,\n      Button,\n      Alert,\n      ActivityIndicator\n    } from \"react-native\";\n    \n    import Pusher from \"pusher-js/react-native\";\n    \n    // next: initialize state\n```\n\nNext, initialize the state and the user’s channel:\n\n``` javascript\n    state = {\n      username: \"\",\n      is_loading: false\n    };\n    \n    constructor(props) {\n      super(props);\n      this.pusher = null; // variable for storing the Pusher reference\n      this.my_channel = null; // variable for storing the channel assigned to this user\n    }\n    \n    // next: add render function\n```\n\nInside the `render` function, return the UI for the Login screen. In this case, we’re only asking the user’s username. The login button is visible by default, but it gets hidden in place of the activity indicator when the user clicks on it. It stays that way until such time that an opponent is found:\n\n``` javascript\n    render() {\n      return (\n        \u003cView style={styles.container}\u003e\n          \u003cView style={styles.topContent}\u003e\n            \u003cText style={styles.bigText}\u003eRNMemory\u003c/Text\u003e\n          \u003c/View\u003e\n    \n          \u003cView style={styles.mainContent}\u003e\n            \u003cText style={styles.label}\u003eUsername\u003c/Text\u003e\n            \u003cTextInput\n              style={styles.text_field}\n              onChangeText={username =\u003e {\n                this.setState({ username });\n              }}\n              value={this.state.username}\n              placeholder=\"Enter your username\"\n            /\u003e\n    \n            {!this.state.is_loading \u0026\u0026 (\n              \u003cButton onPress={this.login} title=\"Enter\" color=\"#0064e1\" /\u003e\n            )}\n    \n            {this.state.is_loading \u0026\u0026 (\n              \u003cActivityIndicator size=\"large\" color=\"#0000ff\" /\u003e\n            )}\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nWhen the login button is clicked, the `login` function gets executed. This will connect the user to Pusher and subscribe them in their own unique channel. Subscribing the user to their own channel allows us to:\n\n\n- Send data to them once an opponent is found. \n- While the game is ongoing, we use it to receive updates of the opponent’s score.\n- When the current user wins, we use it to send an update to the opponent that they lose.\n\nHere’s the code:\n\n``` javascript\n    login = () =\u003e {\n      let username = this.state.username;\n      \n      if (username) {\n        this.setState({\n          is_loading: true // hide's login button and shows activity indicator\n        });\n        \n        // connect to Pusher:\n        this.pusher = new Pusher(\"YOUR_PUSHER_API_KEY\", {\n          authEndpoint: \"YOUR_NGROK_URL/pusher/auth\",\n          cluster: \"YOUR_PUSHER_APP_CLUSTER\",\n          encrypted: true,\n          auth: {\n            params: { username: username }\n          }\n        });\n      \n        this.my_channel = this.pusher.subscribe(`private-user-${username}`); // subscribe to user's unique channel\n        \n        // subscription error occurred\n        this.my_channel.bind(\"pusher:subscription_error\", status =\u003e {\n          Alert.alert('Error', 'Subscription error occurred. Please restart the app');\n        });\n        \n        // subscription to their own channel succeeded\n        this.my_channel.bind(\"pusher:subscription_succeeded\", data =\u003e {\n          console.log(\"subscription ok: \", data);\n      \n          // next: add code for listening when opponent is found    \n        });\n      }\n    };\n```\n\nDon’t forget to add your Pusher App ID when connecting to Pusher. As for the `authEndpoint`, we’ll add it later once we run ngrok.\n\nNext, add the code for listening for the `opponent-found` event. This event is emitted from the server once two random users are matched. Both players are notified when that happens, and it will automatically navigate the user to Game screen:\n\n``` javascript\n    this.my_channel.bind(\"opponent-found\", data =\u003e {\n      console.log(\"opponent found: \", data);\n      \n      // determine who the opponent is, player one or player two?\n      let opponent =\n        username == data.player_one ? data.player_two : data.player_one;\n    \n      Alert.alert(\"Opponent found!\", `${opponent} will take you on!`);\n    \n      this.setState({\n        is_loading: false,\n        username: \"\"\n      });\n      \n      // navigate to the game screen\n      this.props.navigation.navigate(\"Game\", {\n        pusher: this.pusher, // Pusher connection\n        username: username, // current user's username\n        opponent: opponent, // opponent's username\n        my_channel: this.my_channel // current user's channel\n      });\n    });\n```\n\n### Game screen\n\nWe now move on to the Game screen. Start by importing the packages, helpers, data, and components we need:\n\n``` javascript\n    // app/screens/Game.js\n    import React, { Component } from \"react\";\n    import { View, Text, Button, FlatList, Alert } from \"react-native\";\n    import { FontAwesome, Entypo } from \"@expo/vector-icons\"; // the icon sources that the cards will use\n    \n    import Score from \"../components/Score\";\n    import Card from \"../components/Card\";\n    \n    import shuffleArray from \"../helpers/shuffleArray\"; // function for re-ordering the cards to be guessed\n    \n    import cards_data from \"../data/cards\"; // the unique card config\n    \n    // next: initialize state\n```\n\nNext, initialize the state:\n\n``` javascript\n    state = {\n      current_selection: [], // for storing the currently selected pairs. This always resets back to zero once two are selected \n      selected_pairs: [], // the pairs that had already been opened \n      score: 0, // current user's score\n      opponent_score: 0 // opponent's score\n    };\n    \n    // next: add the constructor\n```\n\nNext, add the `constructor`. This is where we add initial values for the Pusher channels and generate the cards, which will be rendered on the screen:\n\n``` javascript\n    constructor(props) {\n      super(props);\n    \n      this.pusher = null; // Pusher connection\n      this.my_channel = null; // current user's Pusher channel\n      this.opponent_channel = null; // opponent's Pusher channel\n      this.username = null; // current user's username\n      this.opponent = null; // opponent's username\n    \n      let sources = {\n        fontawesome: FontAwesome,\n        entypo: Entypo\n      };\n    \n      let clone = JSON.parse(JSON.stringify(cards_data)); // create a copy of the cards data\n    \n      this.cards = cards_data.concat(clone); // append the copy to its original\n      \n      // add a unique ID to each of the card\n      this.cards.map(obj =\u003e {\n        let id = Math.random()\n          .toString(36)\n          .substring(7);\n        obj.id = id;\n        obj.src = sources[obj.src];\n        obj.is_open = false;\n      });\n    \n      this.cards = shuffleArray(this.cards); // arrange the cards in random order\n    }\n    \n    // next: add componentDidMount\n```\n\nOnce the component is mounted, we pick up the navigation params that were passed from the Login screen earlier. This allows us to listen for events emitted by the opponent, and emit events from our own channel:\n\n``` javascript\n    componentDidMount() {\n      const { navigation } = this.props;\n      \n      // get Pusher connection and user's channel from the navigation param\n      this.pusher = navigation.getParam(\"pusher\");\n      this.my_channel = navigation.getParam(\"my_channel\");\n    \n      this.username = navigation.getParam(\"username\");\n      this.opponent = navigation.getParam(\"opponent\");\n      \n      // update the state with the cards generated inside the constructor earlier\n      this.setState({\n        cards: this.cards\n      });\n    \n      if (this.opponent) {\n        // subscribe to the opponent's channel\n        this.opponent_channel = this.pusher.subscribe(\n          `private-user-${this.opponent}`\n        );\n        this.opponent_channel.bind(\"pusher:subscription_error\", status =\u003e {\n          Alert.alert('Subscription error', 'Please restart the app');\n        });\n    \n        this.opponent_channel.bind(\"pusher:subscription_succeeded\", data =\u003e {\n          console.log(\"opponent subscription ok: \", data);\n          \n          // opponent's score is incremented\n          this.opponent_channel.bind(\"client-opponent-scored\", data =\u003e {\n            this.setState({\n              opponent_score: data.score\n            });\n          });\n          \n          // opponent won the game\n          this.opponent_channel.bind(\"client-opponent-won\", data =\u003e {\n            Alert.alert(\"You lose\", `${data.username} won the game`);\n            this.resetCards(); // close all the cards and reset the score\n          });\n        });\n      }\n    }\n```\n\nIn the code above, we’re listening for the `client-opponent-scored` event and the `client-opponent-won` event. The former allows the user to get updated of their opponent’s score. This is emitted by their opponent every time they open a matching pair.  The latter allows the user to get updated when their opponent wins the game. When this happens, we call the `resetCards` method to reset the UI. This allows both users to restart the game if they want. \n\nNext, we render the Game screen. Here, we use a FlatList to render all the cards. Below it, we use the Score component to render the username and score for both users:\n\n``` javascript\n    render() {\n      let contents = this.state.cards;\n    \n      return (\n        \u003cView style={styles.container}\u003e\n          \u003cView style={styles.body}\u003e\n            \u003cFlatList\n              data={contents}\n              renderItem={this.renderCard}\n              numColumns={4}\n              keyExtractor={item =\u003e item.id}\n              columnWrapperStyle={styles.flatlistRow}\n            /\u003e\n          \u003c/View\u003e\n          \u003cView style={styles.bottomContent}\u003e\n            \u003cScore score={this.state.score} username={this.username} /\u003e\n            \u003cScore score={this.state.opponent_score} username={this.opponent} /\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nThe `renderCard` function renders each individual card. This is where we use the Card component to render each card. We pass in the data which determines how the card will look like as props. The `clickCard` prop is where we pass the function to be executed when the card is clicked:\n\n``` javascript\n    renderCard = ({ item }) =\u003e {\n      return (\n        \u003cCard\n          key={item.id}\n          src={item.src}\n          name={item.name}\n          color={item.color}\n          is_open={item.is_open}\n          clickCard={this.clickCard.bind(this, item.id)}\n        /\u003e\n      );\n    };\n```\n\nHere’s the `clickCard` function. This is where we process the card opened by the user. We only process cards that aren’t already guessed by the user and is not already opened. If both conditions are `true`, we add the card to the array of currently selected cards (`selected_pairs`):\n\n``` javascript\n    clickCard = id =\u003e {\n      let selected_pairs = [...this.state.selected_pairs]; // array containing the card pairs that had already been guessed by the user\n      let current_selection = this.state.current_selection; // array containing the currently selected cards\n      let score = this.state.score; // the user's current score\n      \n      // get the index of the card clicked by the user\n      let index = this.state.cards.findIndex(card =\u003e {\n        return card.id == id;\n      });\n    \n      let cards = [...this.state.cards]; // an array containing the cards rendered on the screen\n      \n      if (\n        cards[index].is_open == false \u0026\u0026\n        selected_pairs.indexOf(cards[index].name) === -1\n      ) { // only process the cards that isn't currently open and is not a part of the one's that have already been guessed by the user\n        cards[index].is_open = true; // open the card\n        \n        // add the card in the current selection\n        current_selection.push({\n          index: index,\n          name: cards[index].name\n        });\n    \n        // next: add code for checking if there are already two cards opened        \n      }\n    };\n    \n    // next: add code for resetting cards\n```\n\nOnce the user has already picked a pair of cards, we check whether their names are the same. If it does, we increment the user’s score by one and notify the opponent by emitting an event in the current user’s channel. This works because we’ve set up the current user to listen for events emitted from their opponent’s channel. So anytime we trigger an event on our own channel, the opponent gets notified. Once the current user accumulates the maximum score, we reset the UI and notify the opponent. On the other hand, if the pair selected by the user isn’t the same, we update the state to close the cards:\n\n``` javascript\n    if (current_selection.length == 2) {\n      if (current_selection[0].name == current_selection[1].name) {\n        score += 1;\n        selected_pairs.push(cards[index].name);\n        \n        // notify the opponent that their opponent have scored\n        this.my_channel.trigger(\"client-opponent-scored\", {\n          username: this.username,\n          score: score\n        });\n        \n        // all pairs have been opened\n        if (score == 12) {\n          // notify the user that they won\n          score = 0;\n          Alert.alert(\"Awesome!\", \"You won the game\");\n          // notify the opponent that they lose\n          this.my_channel.trigger(\"client-opponent-won\", {\n            username: this.username\n          });\n    \n          this.resetCards(); // reset the UI\n        }\n      } else {\n        cards[current_selection[0].index].is_open = false; // close the first card from the selected pair\n        \n        // close the second card from the selected pair after half a second\n        setTimeout(() =\u003e {\n          cards[index].is_open = false;\n          this.setState({\n            cards: cards\n          });\n        }, 500);\n      }\n    \n      current_selection = []; // reset the current selection\n    }\n    \n    // update the state\n    this.setState({\n      score: score,\n      cards: cards,\n      current_selection: current_selection\n    });\n```\n\nLastly, the `resetCards` function is where we reset the UI so the users can resume the game if they want to:\n\n``` javascript\n    resetCards = () =\u003e {\n      // close all cards\n      let cards = this.cards.map(obj =\u003e {\n        obj.is_open = false;\n        return obj;\n      });\n      \n      // re-shuffle the cards\n      cards = shuffleArray(cards);\n    \n      // update the state to reset the UI\n      this.setState({\n        current_selection: [],\n        selected_pairs: [],\n        cards: cards,\n        score: 0,\n        opponent_score: 0\n      });\n    };\n```\n\n## Server component\n\nNow we’re ready to add the server component. This is where we add the code for authenticating users as well as matching them so they can start playing the game.\n\nCreate a `server.js`  file inside the `server` folder and start importing the packages we need and initialize them:\n\n``` javascript\n    var express = require(\"express\");\n    var bodyParser = require(\"body-parser\");\n    var Pusher = require(\"pusher\"); // for authenticating users and emitting events from this server\n    \n    var app = express(); // for setting up the server\n    app.use(bodyParser.json()); // for parsing request body into JSON\n    app.use(bodyParser.urlencoded({ extended: false })); // for parsing URL encoded data in the request body\n    \n    require(\"dotenv\").config(); // for getting the environment variables\n```\n\nNext, initialize the array of users. This is where we will store the usernames of the users who log in to the app:\n\n``` javascript\n    var users = [];\n```\n\nNext, initialize the Pusher connection using the credentials from the `.env` file:\n\n``` javascript\n    var pusher = new Pusher({\n      appId: process.env.APP_ID,\n      key: process.env.APP_KEY,\n      secret: process.env.APP_SECRET,\n      cluster: process.env.APP_CLUSTER\n    });\n```\n\nIf you haven’t done so already, this is a good chance to update the `server/.env` file with your Pusher app instance credentials:\n\n``` javascript\n    APP_ID=YOUR_PUSHER_APP_ID\n    APP_KEY=YOUR_PUSHER_APP_KEY\n    APP_SECRET=YOUR_PUSHER_APP_SECRET\n    APP_CLUSTER=YOUR_PUSHER_APP_CLUSTER\n    PORT=3000\n```\n\nNext, add a route for checking if the server is running. Try to access this later at `http://localhost:3000` on your browser once the server is running:\n\n``` javascript\n    app.get(\"/\", function(req, res) {\n      res.send(\"all green...\");\n    });\n```\n\nNext, add the function for returning a random integer (from zero) that’s not greater than the `max` passed as an argument:\n\n``` javascript\n    function randomArrayIndex(max) {\n      return Math.floor(Math.random() * max);\n    }\n```\n\nNext, add the route which receives the Pusher authentication request. From the login code of the `app/screens/Login.js` file earlier, we added the `username` in `auth.params`. This is what we’re accessing in the request body. A username should be unique so we first check if it already exists before processing the request further. If it doesn’t yet exist, we push it to the `users` array. Once there are at least two users, we pick two random users from there. Those two users will be the ones who will partake in the game. We trigger the `opponent-found` event on each of the user’s channel. The event contains the username of the two users. This allowed us to determine which of the users is the opponent and which is the current user from the `app/screens/Game.js` file earlier. Once that’s done, we authenticate the two users and return the authentication token as the response:\n\n``` javascript\n    app.post(\"/pusher/auth\", function(req, res) {\n      var username = req.body.username; // get the username passed as an additional param\n    \n      if (users.indexOf(username) === -1) {\n        users.push(username);\n    \n        if (users.length \u003e= 2) {\n          var player_one_index = randomArrayIndex(users.length);\n          var player_one = users.splice(player_one_index, 1)[0]; // pick a random user and remove them from the array\n    \n          var player_two_index = randomArrayIndex(users.length);\n          var player_two = users.splice(player_two_index, 1)[0]; // pick a random user and remove them from the array\n    \n          // trigger a message to player one and player two on their own channels\n          pusher.trigger(\n            [\"private-user-\" + player_one, \"private-user-\" + player_two],\n            \"opponent-found\",\n            {\n              player_one: player_one,\n              player_two: player_two\n            }\n          );\n        }\n        \n        // authenticate the user\n        var socketId = req.body.socket_id;\n        var channel = req.body.channel_name;\n        var auth = pusher.authenticate(socketId, channel);\n      \n        res.send(auth); // return the auth token\n      } else {\n        res.status(400);\n      }\n    });\n```\n\nLastly, serve it on the port you’ve specified in your `server/.env` file:\n\n``` javascript\n    var port = process.env.PORT || 5000;\n    app.listen(port);\n```\n\n## Run the app\n\nAt this point, we should be ready to run the server and expose it to the internet. \n\nExecute the following inside the `server` directory to run the server:\n\n```\n    node server.js\n```\n\nNext, navigate to where you downloaded the ngrok executable file and execute the following:\n\n```\n    ./ngrok http 3000\n```\n\nTry if the server is running correctly by accessing the https URL returned by ngrok on your browser. If it says “all green…”, the next step is to add the ngrok URL to your `app/screens/Login.js` file:\n\n``` javascript\n    this.pusher = new Pusher(\"YOUR PUSHER APP ID\", {\n      authEndpoint: \"YOUR_NGROK_URL/pusher/auth\",\n      cluster: \"YOUR PUSHER APP CLUSTER\",\n      encrypted: true,\n      auth: {\n        params: { username: username }\n      }\n    });\n```\n\nOnce that’s done, the app should work fully:\n\n```\n    expo start\n```\n\n## Conclusion\n\nThat’s it! In this tutorial, we created a two-player memory game with React Native and Pusher. Along the way, you learned how to use Pusher in React Native. Specifically, you learned how to emit events from both the server and the client side.\n\nYou can view the app’s source code in this [GitHub repo](https://github.com/anchetaWern/RNMemory).","metaTitle":"Create a two-player memory game with React Native","metaDescription":"This tutorial will show you how to build a two-player memory game using React Native. Players sign in and are randomly assigned an opponent. The game then involves searching for image pairs. The game board and score update in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"Awcv4NDb32uI0syeOSAcS","type":"Entry","createdAt":"2018-11-22T15:39:12.991Z","updatedAt":"2018-11-22T16:08:47.699Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Solving microservice problems using Channels","url":"microservice-problems-channels","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4DQ1Z5QBGoiG2Ko86weiO2","type":"Entry","createdAt":"2018-10-31T14:13:52.636Z","updatedAt":"2018-10-31T14:13:52.636Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Fernando Doglio","url":"fernando-doglio","email":"deleteman@gmail.com","twitter":"https://www.twitter.com/deleteman123","github":"https://github.com/deleteman","guestWriter":true}}],"projectRepo":"https://gist.github.com/deleteman/1d8374579475ee08b0f71cae1ddbaf68","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-10-31","description":"This article examines some common problems with microservice architecture, and evaluates several solutions, before looking in detail at how to improve your architecture using Pusher Channels. ","prerequisite":"Some familiarity with software architecture will be helpful.","content":"Microservices are awesome, I love microservices, so much so I’ve written a [book about them](https://www.apress.com/la/book/9781484237144), they’re great at providing flexibility to an otherwise stiff architecture (one that would have a big part in “2001: A Space Odyssey” if you know what I mean). \n\nThat being said, microservices are also challenging,  they’re challenging at not being magical implementations that simply work out of the box for all situations. They’re challenging at making you think when implementing your own microservices-based architecture to make sure, you have the required support structure for them to do their job as expected. In this article I’m going to share some tips and tricks to help you get there and make the most out of your architecture.\n\n\n## Common problems with microservices\n\nLike with any other architectural pattern, Microservices aren’t the silver bullet to solve all problems. In fact, there are two particular challenges that they can’t solve by themselves (at least not without a massive amount of extra work done by the development team) and they are: \n\n- Handling a variable increase in traffic\n- Being able to communicate downtime to other services (especially relevant when other services depend on them).\n\nLet’s analyze the classical example of a microservices-based architecture:\n\n![microservices-architecture-diagram](//images.ctfassets.net/1es3ne0caaid/2MqWIz4c7e0W48U4gCe2uK/d1a01298e2bfc4a5ca904c59ace2a344/microservices-architecture-diagram.png)\n\nNothing really strange there, just a group of microservices working together to serve the needs of the web-app client application. And at first glance, there is nothing wrong with that design, everything seems to be correctly planned until, of course, your traffic increases, and now suddenly your search service starts receiving 300% more requests than before. You have a couple of options:\n\n\n- You can vertically scale your search service server, increasing its processing power, or its memory, to name a few examples. That’ll probably get you out of the woods for the time being.\n- You can horizontally scale your service. You already have your load balancer in place, so it should be relatively effortless. As long as your API is stateless, you can simply duplicate and evenly distribute the load between all servers. There, problem solved!\n\nYou can like one solution more than the other, but the reality in both cases is that you solved an immediate problem, but potentially caused a bunch of others you didn’t even consider.\nLook at the following image, which represents the aforementioned horizontal scaling solution:\n\n![horizontal-scaling-diagram](//images.ctfassets.net/1es3ne0caaid/1YKPieQRBqauQ44Y8S0wcu/40ea2c580d5087971f2a91afa9ea827f/horizontal-scaling-diagram.png)\n \nHere is the real problem and the reason for this article: you removed your bottleneck but without noticing you overloaded the next stage in the data flow, the authorization service, your database and your Elastic instance are now getting 300% more requests as well, are they ready for that kind of load?\n\nMaybe you even killed the authorization service, due to the increase in traffic, so now everything that depends on it, will also fail, because there is no way to notify them that something is wrong.\n\nAnd for both cases, a possible solution would be to add a buffer-like structure between services, something like that should allow you to:\n\n- Hold  messages between services for a time, for the cases when services go down and there is no one to consume them.\n- Allow the receiving end of messages to consume them as fast as they can, without being overwhelmed. \n- Use this channel as a heart beat channel as well, allowing services to send notifications of activity to other, interested, services.\n\nSo, with that being said, let’s look at how [Channels](https://pusher.com/channels) can help us solve these problems.\n\n## Channels to the rescue\n\nPusher’s Channels is an amazing infrastructure as a service product, which will provide the required pub/sub mechanics we’ll need for our buffer-like structure. The best part of this, is that since it’s a managed service, you don’t need to worry about the intricacies of scaling it when needed, making sure it’s always up and not losing messages, and so on.\n\nFor this particular use case, we will use some of the features of Channels, but just to get an idea of everything you can do with it, here are some of its most impressive capabilities:\n\n\n- **Pub/sub messaging**. It provides a very easy-to-use and flexible event based API to subscribe, send and react to messages received. \n- **Access control / authentication.** You also have access to private channels, which require authentication and authorization to access them. \n- **Live users lists.** Building on top of private channels, you can get the list of subscribed users, simplifying your job when it comes to creating features such as “Who’s online” lists.\n- **Integration.** You can integrate your data flow with external tools such as Slack and Datadog in order to provide metrics or notifications to your developers.\n\nAnother very positive aspect about Pusher’s Channels, is that they provide libraries for several languages such as PHP, Node, Ruby, Java and even  Android and iOS (with Swift and Objective-C)!\nFor our particular examples, as you might've guessed from the title of this article, I’m going to be using Node, but you can extrapolate to whatever language you feel like using from their documentation.\nWe’re going to look at both problems and see a little bit of code showing  a possible implementation of the solutions. Feel free to use the code on your own projects if you think it’ll help!\n\n### Increased traffic\n\nLet’s first take a look at this scenario in order to avoid overloading your own services by simply removing a bottleneck. To simplify the case and make sure it’s clear enough, let’s lower the number of microservices involved to just three, you can see below how the architecture would change from one scenario to the other.\n\n![buffer-microservices-diagram](//images.ctfassets.net/1es3ne0caaid/7DlYJoX3FYSsCIWIqoeYaO/edfe5c60841489952ab9930b3dfcbd3b/buffer-microservices-diagram.png)\n\nThe change is quite straightforward, but the benefits are substantial as already mentioned. The best part? All you need to add to your existing code is the lines required to publish and subscribe to channels, that’s it.\nLet’s take a look at that now:\n\n\n``` javascript    \n    const PusherServer = require('pusher');\n    const PusherClient = require('pusher-js');\n    const express = require('express');\n    const router = express.Router();\n    const config = require(\"config\");\n    \n    const pusherServer = new PusherServer(config.get('pusher.config'));\n    const pusherClient = new PusherClient(config.get('pusher.config.key'), {\n            cluster: config.get('pusher.config.cluster')\n    })\n    \n    /* POST main api for a processing job. */\n    router.post('/', function(req, res, next) {\n    \n      //code require to receive the message, parse it \n      //and maybe validate the data?\n      //then communicate with the processing service through Channels               \n       pusherServer.trigger('main-channel', 'message', {\n         \"message\": //... information for other services\n       });\n    \n        res.send(/* the response */);\n    });\n    \n    function messageHandler(data) {\n            ///your logic to handle new messsages\n    }\n    \n    module.exports = function  () {\n            const channel = pusherClient.subscribe('main-channel')        \n            channel.bind('message', messageHandler)\n            return router;\n    }\n```\n\nThe above code is not functional, basically because you need to fill in the part for your own microservice, but thinking about the example we’re trying to provide, here is the gist of it:\n\n\n- As you’ve probably figured out by reading it, it’s an example of an endpoint in an Express-based application.\n- Endpoints in this example add a few extra lines to post messages into  the “main-channel”. This is meant to communicate whatever information is required to other services. Keeping up with the diagram from above, it would be a message to the processing service. This is done using the server library (installed with  `npm install pusher`)\n- Any received message will be handled by the `messageHandler` function, which should have some sort of logic to make sure only the relevant messages are processed and the rest are ignored. In order to listen for new messages, you’ll need Pusher’s client library, which you can install with  `npm install pusher-js`. \n\nThis code sets up a very simple, yet powerful, message-based communication between services, essentially overwriting whatever REST interface you could’ve configure with Express. In essence, your service would end up having two interfaces, REST for client applications and Channels-based for other, internal microservices.\n\nAs an added note, the config object passed to the `Pusher` constructor can contain the following items (among others, you should check the [docs](https://pusher.com/docs/client_api_guide/client_connect) for more details):\n\n- **appId:**  the ID of the application you’ve created in Pusher’s website. In order to use their API, you’ll have to create a new app. This will grant you access to stats for your application, amongst other great things.\n- **key:** key provided to you once you’ve signed up on Pusher’s site.\n- **secret:** just like with the key, this secret code is provided to you once you’ve signed up.\n- **cluster:** the identifier of the cluster your application was create on, by default it’ll be “mt1”.\n\nAs you can see, the API is very straightforward and easy to use. There is more to it, of course, and you can read all about it on the official documentation, but the above example should be more than enough to get you started in the right direction.\n\n### Uptime notifications\n\nThe logic for solving this problem with Channels would be something similar to the previous one in the sense that we’ll make use of the pub/sub mechanics to broadcast specific messages. These messages, known as heart beats will be published periodically into a specific channel. \n\nWe’ll have one “heart beats” channel for each service. This should provide a clean way of linking services with each other. Basically if you subscribe a service to a heart beats channel, you’re linking that service to the one publishing into that channel.\n\nWe will, however, have to handle the reaction to the lack of heart beats locally though, since that behavior will depend on each service’s internal logic.\n\n``` javascript\n    const PusherServer = require('pusher')\n    const PusherClient = require(\"pusher-js\")\n    const config = require(\"config\")\n    \n    \n    const pusherServer = new PusherServer(config.get('pusher.config'));\n    const pusherClient = new PusherClient(config.get('pusher.config.key'), {\n            cluster: config.get('pusher.config.cluster')\n    })\n    \n    const HB_TIMEOUT = 10100;\n    let TIMEOUTS = {}\n    \n    // your routes definition goes here...\n    \n    function sendHeartBeat(modId) {\n            console.log(\"Sending hearbeat: \", Date.now())\n            pusherServer.trigger(modId + '-hb', 'heartbeat', {\n                    \"message\": {\n                            \"timestamp\": Date.now(),\n                            \"payload\": \"\"///other data goes here\n                    }\n            }, null, (err, req, resp) =\u003e {\n                    if(err) console.log(\"Error:: \", err)\n            })\n    }\n    \n    function handleHearbeat(serviceName) {\n    \n            return function () {\n                    ///your logic to handle hearbeats\n    \n                    clearTimeout(TIMEOUTS[serviceName]) //reset the timeout in case we actually get a hearbeat before it's up\n                    console.log(\"Hearbeat received from Module '\" + serviceName + \"' at: \", Date.now())\n                    TIMEOUTS[serviceName] = setTimeout(heartBeatNotReceived, HB_TIMEOUT, serviceName)\n            }\n    \n    }\n    \n    function heartBeatNotReceived(serviceName) {\n            console.log(\"WARNING: Module ='\" + serviceName + \"'= has not sent a heartbeat recently...\")\n    }\n    \n    \n    module.exports = function(modId, linkedServices) {\n    \n    \n            linkedServices.forEach((serviceName) =\u003e {\n                    let channel = pusherClient.subscribe(serviceName + '-hb')\n                    channel.bind('heartbeat', handleHearbeat(serviceName))\n            })\n            \n            setInterval(sendHeartBeat, 10000, modId); //send one every 10 seconds\n    \n    }\n```\n\nThis is a very simple example of how you can leverage Pusher’s Channels to extend your own modules or microservices and have them talk to each other. \nYou can simply require this file (provided you have the required modules listed at the beginning) and do something like:\n\n``` javascript\n    const serviceLinker = require(\"/path/to/file.js\")\n    \n    serviceLinker('myServiceName', [/* list of services this one depends on...*/])\n```\n\nAnd that’s it, now your service will start sending heartbeats automatically and will also be able to react to heartbeats sent by others (and the lack of them as well).\n\nIf you’re feeling a little crazy, you could even extend this concept, and use the same channel but different event types to distribute other type of application-relevant information amongst services, such as metrics, like number of requests per second, or free memory and disk space.\n\n\n## Conclusion\n\nHopefully by this point, I’ve been able to convince you that having a buffer-like structure as part of your microservices-based architecture can be beneficial in several ways. And the best part, is that adding it into an existing setup is not that complicated!\n\nThat’s it! Thanks for reading, remember you can read the code from this article[here](https://gist.github.com/deleteman/1d8374579475ee08b0f71cae1ddbaf68). See you on the next one!","metaTitle":"Solving microservice problems using Channels","metaDescription":"This article examines some common problems with microservice architecture, and evaluates several solutions, before looking in detail at how to improve your architecture using Pusher Channels. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mPaFoiQpHMCA8a4ymMwKY","type":"Entry","createdAt":"2018-10-29T05:31:39.265Z","updatedAt":"2018-10-29T05:31:39.265Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a Chrome extension to track cryptocurrency prices - Part 2: Allowing user interaction","url":"chrome-extension-cryptocurrency-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1N3HBqLEugWyeKsWEW0iYg","type":"Entry","createdAt":"2018-08-06T18:12:32.345Z","updatedAt":"2018-08-06T18:12:32.345Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Fisayo Afolayan","url":"fisayo-afolayan","email":"afolayanfisayo@gmail.com","twitter":"https://twitter.com/fisayoafolayan","github":"https://github.com/fisayoafolayan","guestWriter":true}}],"projectRepo":"https://github.com/fisayoafolayan/google-chrome-plugin-crypto","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4kOTcNAC12gwWEyE6MimMY","type":"Entry","createdAt":"2018-02-12T15:08:28.581Z","updatedAt":"2018-02-26T12:31:12.766Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Trading","url":"trading","type":"use case"}}],"reviewDate":"2018-10-27","description":"This two part series will guide you through building, deploying and extending a Chrome extension. The extension displays cryptocurrency prices in realtime. In part two, allow users to interact with the extension and save their preferences.","prerequisite":"You will need Node 4+ and the Heroku CLI installed on your machine. Knowledge of JavaScript will be helpful.","content":"If you made it to this part of the guide, then by the end of this guide, you will realize building Chrome extensions is like building a website. Emphasis on **“Like”** 😃 .\n\nIn the [last part of the tutorial](https://pusher.com/tutorials/chrome-extension-cryptocurrency-part-1), we got into Chrome extensions and built our first extension. We connected it to our server using Pusher to get updates in realtime.\n\nFor this tutorial, we will allow users to customize their experience a little. \n\n## Prerequisites\n1. You have read the [first part](https://pusher.com/tutorials/chrome-extension-cryptocurrency-part-1) of this guide\n\n## New tools we will add\n- [Sqlite](https://www.sqlite.org/)\n- [Bcrypt](https://www.npmjs.com/package/bcrypt)\n- [Express](https://expressjs.com/)\n- [Body-parser](https://www.npmjs.com/package/body-parser)\n- [Jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken)\n\n## Creating our server with Express instead of HTTPS\n\nAh… yes. This is an important update to explain so you do not get confused. If you are familiar with Node.js, you would realize this is a no-brainer. If we were to use HTTPS to create our server, we would have to designed middlewares (maybe?) to check for the following:\n\n\n- Type of request we are receiving [GET, POST, PUT …]\n- The URI of the request\n- The body of the request\n- Create self-signed SSL certs for the HTTPS server to work\n- A few more other things we might not know off the top of our head until we proceed to use it\n\nWith Express and body-parser you will be handling requests like “Please, can I get a real challenge?” 💪. We still use HTTPS to make the request to CryptoCompare’s API because as of this writing, they do not support requests over HTTP.\n\nEnough talking, open your `index.js` file. To reduce confusions, we will assume that this file is empty. So feel free to wipe everything in it and start afresh.\n\n### Importing all we will need\n\n``` javascript\n    // index.js\n    \n    \"use strict\";\n    const cryptos   = require('./cryptos.json')\n    const jwt       = require('jsonwebtoken')\n    const bodyParser= require('body-parser')\n    const helpers   = require('./helpers')\n    const config    = require('./config')\n    const express   = require('express')\n    const bcrypt    = require('bcrypt')\n    const DB        = require('./db')\n```\n\nWe have a few additions here that we need to install and define. Let us start with what we need to install. Run the following command on your console\n\n```\n    $ npm install --save express body-parser jsonwebtoken sqlite3 bcrypt\n```\n\nNow, create the following files:\n\n```\n    $ touch helpers.js\n    $ touch db.js\n```\n\nWe shall define their contents soon.\n\n### Initial definitions of what we will need\n\nBack to `index.js` file, add the following definitions:\n\n``` javascript\n    //index.js\n    [...]\n    const db     = new DB(\"sqlitedb\")\n    const app    = express()\n    const router = express.Router()\n    \n    router.use(bodyParser.urlencoded({ extended: false }));\n    router.use(bodyParser.json());\n```\n\nAt this stage, we have imported our database manager and passed the name we want it to create the database with. Then we created an instance of `express` and `express.Router()` to allow us to create a server and define routes respectively.\n\nWe also informed our  `express.Router()` handler to use `body-parser` definitions, this will help us to  read data sent from the client either as `json` or regular form submission.\n\n### More initial definitions\n\n``` javascript\n    // index.js\n    \n    [...]\n    const {allowCrossDomain,fetchCoins,handleResponse,handleFavoriteResponse,generateUrl} = helpers\n    app.use(allowCrossDomain)\n    \n    const defaultUrl= generateUrl(cryptos.coins,cryptos.currencies)\n    fetchCoins(defaultUrl,handleResponse)\n    \n    // We will define our routes here\n    \n    app.use(router)\n    app.listen(process.env.PORT || 4003)\n```\n\nWe imported helper functions to help us process our requests and responses to users. We will create them shortly. The `allowCrossDomain` middleware will allow our Express application receive a request from a domain other than itself. For instance, if we run our app on `localhost:4000`, we can not make a call to it from `localhost:4001` without a pre-flight issue (CORS).\n\nThe `fetchCoins()` method fetches the coins and sends them to Pusher which will broadcast to all our users who are listening on that channel.\n\nFinally, we set our application to listen on either a dynamically assigned port or 4003. We are set to go at this point.\n\n## Setting up our authentication routes\n\nStill in the `index.js` file, let us start with the route to handle authentication:\n\n``` javascript\n    //index.js\n    \n    [...]\n    // We will define our routes here\n    \n    router.post('/auth', function(req, res) {\n      db.selectByEmail(req.body.email, (err,user) =\u003e {\n        if (err) return res.status(500).send(JSON.stringify({message : \"There was a problem getting user\"}))\n        if(user) {\n            if(!bcrypt.compareSync(req.body.password, user.user_pass)) {\n                return res.status(400).send(JSON.stringify({message : \"The email or password incorrect\"}))\n            }\n            let token = jwt.sign({ id: user.id }, config.secret, {\n                expiresIn: 86400 // expires in 24 hours\n            })\n            res.status(200).send(JSON.stringify({token: token, user_id:user.id}))\n        } else {\n            db.insertUser([req.body.email,bcrypt.hashSync(req.body.password, 8)],\n            function (err, id) {\n                if (err) return res.status(500).send(JSON.stringify({message : \"There was a problem getting user\"}))\n                else {\n                    let token = jwt.sign({ id: id }, config.secret, {\n                        expiresIn: 86400 // expires in 24 hours\n                    });\n                    res.status(200).send(JSON.stringify({token: token, user_id:id}))\n                }\n            }); \n        }\n      }) \n    })\n    \n    [...]\n```\n\nIn our `/auth` route, we are checking if the user exists. If the email and password matches what we stored, we log the user in and send them a token. If the email exists but the password does not match, we have to handle that as well.\n\n\n\u003e `jwt` creates a hashed token using the user’s ID and the secret we defined in our config.js file. It sets the token to expire in 24 hours but you can make this longer or shorter\n\nWhat we are sending back to the user is their token and ID to help them make requests in the future.\n\nWhen we cannot find the email address of a user in our database, we assume we have a new user and register them directly. We also generated a token and returned it to the user.\n\n\n\u003e **WARNING**❗\n\u003e For any reason whatsoever, do not implement your authentication in a production application like this. While it provides convenience for you, it is very bad for user experience. We did it for the sake of this guide to get quickly to the most important thing — the Chrome extension.\n\n\n## Setting up routes to fetch coins\n\n``` javascript\n    //index.js\n    \n    [...]\n    router.get('/coins', function(req, res) {\n      let token = req.headers['x-access-token'];\n      if (!token) return res.status(401).send(JSON.stringify({message: 'Unauthorized request!' }))\n      jwt.verify(token, config.secret, function(err, decoded) {\n        if (err) return res.status(500).send(JSON.stringify({message: 'Failed to authenticate token.' }))\n        res.status(200).send(JSON.stringify({coins : cryptos.coins}))\n      });\n    })\n    [...]\n```\n\nThe coins route is protected by the access token. This means only authenticated users can fetch the coins we track their prices.\n\n\n## Setting up routes to add our favorite coins\n\n``` javascript\n    //index.js\n    [...]\n    router.post('/favorite/add', function(req, res) {\n        let token = req.headers['x-access-token'];\n        jwt.verify(token, config.secret, function(err, decoded) {\n            if (err) return res.status(401).send(JSON.stringify({message: 'Unauthorized request' }))\n            db.insertFavorite([req.body.coin, decoded.id], (err,favs) =\u003e {\n            if (err) return res.status(500).send(JSON.stringify({message : \"There was a problem adding your favs\"}))\n            res.status(200).send(JSON.stringify({message: \"Coin added to your favorites\"}))\n            }); \n        });\n    })\n    [...]\n```\n\nThe good thing about our token is that we encoded it with the user’s ID. This means, once the user presents a valid token, we can find out who the user is from the token. Awesome right? \n\nOnce we find who the user is, we add the coin they chose to their favorites. Whenever they click on the link to see their favorites, we return it to them and track price changes in realtime.\n\n\n## Setting up routes to fetch our favorite coins\n\n``` javascript\n    //index.js\n    \n    [...]\n    router.get('/favorite', function(req, res) {\n      let token = req.headers['x-access-token'];\n      jwt.verify(token, config.secret, function(err, decoded) {\n        if (err) return res.status(401).send(JSON.stringify({message: 'Unauthorized request' }))\n         db.selectFavorite(decoded.id, (err,favs) =\u003e {\n            // We use the favs returned by the db manager\n               if (err) return res.status(500).send(JSON.stringify({message : \"There was a problem getting your favs\"}))\n                  let coins = []\n                  if (favs \u0026\u0026 favs.length \u003e 0) {\n                    favs.forEach( fav =\u003e coins.push(fav.coin))\n                    const url = generateUrl(coins,cryptos.currencies)\n                    const event = `user${decoded.id}` \n                    fetchCoins(url, handleFavoriteResponse, event)\n                    res.status(200).send(JSON.stringify({event : event}))\n                  } else {\n                    res.status(200).send(JSON.stringify({message : \"You do not have favs\"}))\n                  }\n                }); \n      });\n    })\n    [...]\n```\n\nThis is straightforward. If the token is invalid, we return `401: Unauthorised` to the user and that settles it. If the token is valid, then we decode it and retrieve the user’s favorite coins.\n\n\n\u003e `Sqlite3` returns an array of objects for us, so we take all the coins and push them into an array — coins. We use the coins array to construct the URL we will use to make requests. Then we generate an event for the user based on their `id`. This makes it possible for us to send a message that only the user will receive.\n\n\nOur route definitions are complete now. Let us define our helper functions.\n\n## Defining the helpers\n\nThe helpers are set of functions we stored in `helpers.js` file. Open the file and add the following\n\n``` javascript\n    const Pusher  = require('pusher')\n    const config  = require('./config')\n    const https   = require('https')\n    const pusher  = new Pusher(config)\n    \n    // The functions\n    \n    const allowCrossDomain = (req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header('Access-Control-Allow-Methods', '*');\n      res.header('Access-Control-Allow-Headers', '*');\n      next();\n    }\n    \n    \n    let fetchCoins = (url, handler, event = false) =\u003e {\n      setInterval(() =\u003e {\n        https.get(url, response =\u003e {\n          response.setEncoding('utf8')\n          .on('data', data =\u003e event? handler(data,event) : handler(data))\n          .on('error', e =\u003e console.error(e.message))\n        })\n      }, 10000)\n    }\n    \n    \n    let handleResponse = (data) =\u003e {\n      pusher.trigger('cryptowatch', 'prices', {\n        \"update\": data\n      });\n    }\n    \n    let handleFavoriteResponse = (data,event) =\u003e {\n      pusher.trigger('cryptowatch', event, {\n        \"update\": data\n      });\n    }\n    \n    \n    let generateUrl = (coins,currencies) =\u003e {\n      return `https://min-api.cryptocompare.com/data/pricemulti?fsyms=${coins.join()}\u0026tsyms=${currencies.join()}`\n    }\n    \n    module.exports = {\n      allowCrossDomain : allowCrossDomain,\n      fetchCoins : fetchCoins,\n      handleResponse : handleResponse,\n      handleFavoriteResponse : handleFavoriteResponse,\n      generateUrl : generateUrl\n    }\n```\n\nWe are using Pusher in one of the functions here, so it only makes sense we define it. We exported all the functions with their name so it is easy for us to import them where we need it. We created `allowCrossDomain` function to help us handle CORS. We also moved our `fetchCoins` method from part one into our helper file, this way the method is reusable especially when it comes to creating dynamic events on Pusher channel.\n\nFinally, we defined our `generateURL` method, which we will call to fetch our defined currencies or a user’s favorite.\n\n\n## The database manager\n\nThe database manager manages the database. We will define the queries to create the database, select from the database and insert into it. Because this is not part of our focus, I will gloss over the long code pasted below and explain things that may vary if you are familiar with MySQL.\n\nInsert the following content into our `db.js` file:\n\n``` javascript\n    //db.js\n    \"use strict\";\n    const sqlite3 = require('sqlite3').verbose();\n    \n    class Db {\n      constructor(file) {\n        this.db = new sqlite3.Database(file);\n        this.createTables()\n      }\n    \n      createTables() {\n        let sql = `\n          CREATE TABLE IF NOT EXISTS user (\n          id integer PRIMARY KEY, \n          email text NOT NULL UNIQUE, \n          user_pass text NOT NULL)`\n        this.db.run(sql);\n    \n        sql = `\n          CREATE TABLE IF NOT EXISTS favorite (\n          id integer PRIMARY KEY, \n          coin text NOT NULL, \n          user_id integer NOT NULL)`\n        this.db.run(sql);\n        return true\n      }\n    \n      selectByEmail(email, callback) {\n        return this.db.get(\n          `SELECT * FROM user WHERE email = ?`,\n          [email], (err,row) =\u003e {\n              callback(err,row)\n          }\n        )\n      }\n    \n      selectFavorite(user_id, callback) {\n        return this.db.all(\n          `SELECT * FROM favorite WHERE user_id = ?`,\n          [user_id], (err,row) =\u003e {\n              callback(err,row)\n          }\n        )\n      }\n    \n      insertUser(user, callback) {\n        return this.db.run(\n          'INSERT INTO user (email,user_pass) VALUES (?,?)',\n          user, function(err) {\n              callback(err,this.lastID)\n          }\n        )\n      }\n    \n      insertFavorite(favs, callback) {\n        return this.db.run(\n          'INSERT INTO favorite (coin,user_id) VALUES (?,?)',\n          favs, err =\u003e {\n              callback(err)\n          }\n        )\n      }\n    }\n    \n    module.exports = Db\n```\n\nA few things to know:\n\n\n1. We will execute `sqlite3` queries that will not return a row or rows with `.run()` method.\n2. When we want to fetch a single row, we will execute the query with a `.get()` method.\n3. When we want to fetch multiple rows, we will execute the query with a `.all()` method.\n4. To get the `id` of the last inserted item, we run `this.lastID` inside the callback function we passed to `.run()` method.\n5. All `sqlite3` methods are asynchronous, hence the callback functions we pass to each one.\n\nNow, let us modify our Chrome extension.\n\n## Updating our Chrome extension\n\nWe have explained Chrome extensions in details in the last post. This means we will get right to our customization.\n\nThe first thing we want to do is get permission for our extension to use Chrome storage. So, modify the `permissions` array in the `extension/manifest.json` file and add the following:\n\n```\n    [...]\n      \"permissions\": [\n       \"activeTab\",\n       \"storage\"\n      ]\n    [...]\n```\n\nLet us update our `extension/index.html` file\n\n``` html\n    //extension/index.html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003ctitle\u003eCrypto Watcher\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"./css/style.css\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003ch1\u003eWelcome to Crytowatcher\u003c/h1\u003e\n      \u003cdiv class=\"box hide\"\u003e\n        \u003ca href=\"/coins.html\" class=\"link\"\u003e1. All Coins\u003c/a\u003e\n        \u003ca href=\"/favorite.html\" class=\"link\"\u003e2. My Favorites\u003c/a\u003e\n        \u003ca href=\"/add-favorite.html\" class=\"link\"\u003e3. Add Favorites\u003c/a\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"login hide\"\u003e\n        \u003cform id=\"form\"\u003e\n          \u003cinput class=\"form-elements\" type=\"email\" name=\"email\" value=\"\" placeholder=\"email\" required\u003e\n          \u003cinput class=\"form-elements\" type=\"password\" name=\"password\" value=\"\" placeholder=\"password\" required\u003e\n          \u003cbutton class=\"form-elements btn\"\u003eSubmit\u003c/button\u003e\n        \u003c/form\u003e\n      \u003c/div\u003e\n      \u003cscript src=\"./js/index.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nWe removed the style we included in the page and then proceed to add it to an external stylesheet. We will create the external stylesheet later. \n\nThings to note:\n\n- The first thing you will notice is that we removed the Pusher scripts we had on this page before. We moved it to where we will need it shortly.\n- Next, we added links to other pages. We will create the pages very soon.\n- Then we have a form which will handle login.\n- It seems we are hiding both the link and the form. So what shows up?\n- We have removed the `script.js` file and created `index.js` in the `/js` directory.\n\nBefore we proceed, open you terminal to create the following folder and files.\n\n``` \n    $ mkdir extension/js\n    $ touch extension/js/index.js\n    $ touch extension/js/favorite.js\n    $ touch extension/js/auth.js\n    $ touch extension/js/add-favorite.js\n    $ mkdir extension/css\n    $ touch extension/css/base.css\n    $ touch extension/css/style.css\n    $ touch extension/favorite.html\n    $ touch extension/add-favorite.html\n    $ touch extension/coins.html\n```\n\nFinally, we want to move `pusher.min.js` and `scripts.js`file into our `js` folder. Run this command to move the file:\n\n```\n    mv extension/pusher.min.js extension/js\n    mv extension/scripts.js extension/js\n```\n\nNow, open the `extension/js/index.js` script and insert the following:\n\n``` javascript\n    //extension/js/index.js\n    window.addEventListener('load', function(evt) {\n      const form = document.getElementById('form')\n      document.getElementById('form').addEventListener('submit', function(e) {\n        e.preventDefault()\n    \n        let options = {\n          method : \"POST\",\n          body : JSON.stringify({\n            'email' : this.elements.email.value,\n            'password' : this.elements.password.value\n          }),\n          headers : new Headers({'content-type': 'application/json'})\n        }\n    \n        fetch(\"http://localhost:4003/auth\",options)\n        .then(res =\u003e {\n          if(res.ok) return res.json()\n          else throw new Error(res.status)\n        })\n        .then(data =\u003e {\n            storeToken(data, () =\u003e {\n              document.querySelector('.box').classList.remove('hide')\n              document.querySelector('.login').classList.add('hide')\n            })\n        })\n        .catch(error =\u003e {\n          console.log(error)\n        })\n      })\n      getToken(result =\u003e {\n        if(!result) {\n          document.querySelector('.login').classList.remove('hide')\n        }\n        else {\n          document.querySelector('.box').classList.remove('hide')\n        }\n      })\n    })\n    \n    function storeToken(data, callback){\n      let dt = new Date()\n      chrome.storage.local.set(\n        { \"access-token\": \n          {\n            'token' : data.token,\n            'user_id' : data.user_id,\n            'expires' : dt.setDate(dt.getDate()+1)\n          }\n        }, \n        () =\u003e callback()\n      );\n    }\n    \n    function getToken(callback){\n      chrome.storage.local.get(\"access-token\", result =\u003e {\n        let data = false\n        if (result['access-token']) {\n          let expires = new Date(result['access-token']['expires'])\n          let now = new Date()\n          if (expires \u003e now) {\n            data = true\n          }\n          else {\n            chrome.storage.local.remove(\"access-token\", () =\u003e {})\n          }\n        }\n        callback(data)\n      });\n    }\n```\n\nThese two methods handle our authorization token. One stores it in Chrome storage and the second retrieves it. Chrome storage works like local storage but it is asynchronous, hence the callback functions we defined.\n\nWhen we store tokens, we store a time they are to expire as well. This allows us to remove the token if it has expired without having to make a request to the server. Since we know the tokens typically last a day, we set the expiration time here on the frontend.\n\nWhen we retrieve a token, we check if it has expired or not. If it has expired, we remove it completely and so the user will not try to use it to make a request.\n\n\n## Defining our stylesheet for our index page\n\n``` css\n    /* extension/css/style.css*/\n    body {\n      min-width: 200px;\n      height: 300px;\n      padding: 10px;\n    }\n    h1 {\n      text-align: center;\n      margin-bottom: 2rem;\n    }\n    .box {\n      display: block;\n    }\n    .box .link {\n      transition: 0.2s all;\n      font-size: 16px;\n      font-weight: 900;\n      padding: 5px;\n      text-decoration: none;\n      color: #3A4A33;\n      display: block;\n    }\n    .box .link:hover {\n      transition: 0.1s linear;\n      opacity: 0.8;\n      font-weight: 300;\n      text-decoration: underline;\n    }\n    .hide {\n      display: none\n    }\n    .form-elements {\n      display: block;\n      height: 20px;\n      border-radius: 2px;\n      margin: 0 auto;\n      margin-bottom: 10px;\n      border: #eee 0.5px solid;\n      max-width: 100%;\n      padding: 5px;\n    }\n    .select-elements {\n      display: block;\n      height: 30px;\n      margin-bottom: 10px;\n      border: #eee 0.5px solid;\n      width: 100%;\n      padding: 5px;\n    }\n    select:required:invalid {\n      color :#AAAAAA;\n    }\n    option[value=''][disabled] {\n      display: none;\n    }\n    .btn {\n      height: auto;\n      transition: 0.5s all;\n      background: #4AA71B;;\n      color: #FFFFFF;\n      margin-top: 1rem;\n      padding: 0.5rem 2rem;\n      border-radius: 4px;\n    }\n    .btn:hover {\n      transition: 0.5s all;\n      background: #4A872B;\n      cursor: pointer;\n    }\n```\n\nNext, insert the following content into `base.css` file\n\n``` css\n    /* extension/css/base.css */\n    body {\n      min-width: 200px;\n      height: 300px;\n    }\n    .back-btn {\n      height: 1.2rem;\n      color: #FFFFFF;\n      font-size: 14px;\n      font-weight: 900em;\n      cursor: pointer;\n      border-radius: 4px;\n      background: #3A3A3B;\n      text-decoration: none;\n      padding: 0.2rem 1rem;\n      margin-top: 0.5rem;\n    }\n    nav {\n      display: grid;\n      grid-template-columns: auto auto; \n      grid-template-rows: auto; \n      justify-content: space-between;    \n      align-content: space-between;    \n    }\n```\n\n## Create a page to list all coins\n\nThe first page we want to make is the page to display all coins. \n\nOpen the file `extension/coins.html` and add the following content:\n\n``` html\n    // extension/coins.html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"UTF-8\"\u003e\n      \u003ctitle\u003eCrypto Watcher\u003c/title\u003e\n      \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"./css/base.css\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003cnav\u003e\n        \u003ch1\u003eCoin Prices\u003c/h1\u003e\n        \u003ca href=\"/index.html\" class=\"back-btn\"\u003e\u0026#8592;\u003c/a\u003e\n      \u003c/nav\u003e\n      \u003cmain\u003e\n        \u003col id=\"crypto-prices\"\u003eFetching coins...\u003c/ol\u003e\n      \u003c/main\u003e\n      \u003cscript src=\"./js/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"./js/auth.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"./js/scripts.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nWe changed a few little things:\n\n1. We added an `auth.js` script, which ensures only an authenticated user views this page.\n2. We moved the `scripts.js` file from in `/js` directory and changed nothing in it.\n3. We added a link to take us back to home page.\n4. We now have a `nav` and `main` section on our page.\n\n\n\n## Create a page to view all user defined favorite coins\n\nOpen the `extension/favorite.html` file and insert the following content\n\n``` html\n    // extension/favorite.html\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"UTF-8\"\u003e\n      \u003ctitle\u003eCrypto Watcher\u003c/title\u003e\n      \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"./css/base.css\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003cnav\u003e\n        \u003ch1\u003eMy Favorites\u003c/h1\u003e\n        \u003ca href=\"/index.html\" class=\"back-btn\"\u003e\u0026#8592;\u003c/a\u003e\n      \u003c/nav\u003e\n      \u003cmain\u003e\n        \u003col id=\"crypto-prices\"\u003eFetching coins...\u003c/ol\u003e\n      \u003c/main\u003e\n      \u003cscript src=\"./js/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"./js/auth.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"./js/favorite.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nNow, let us create the content of our  `extension/js/favorite.js` file:\n\n``` javascript\n    //extension/js/favorite.js\n    \n    const pusher = new Pusher('Your-App-Key', {\n      cluster: 'Your-cluster-key',\n      encrypted: true\n    })\n    \n    function handleBinding(event){\n      let channel = pusher.subscribe('cryptowatch');\n      channel.bind(event, (data) =\u003e {\n        let priceLists = \"\"\n        let obj = JSON.parse(data.update)\n        Object.keys(obj).forEach( (key, index) =\u003e {\n           priceLists += `\u003cli\u003e${key}: \u003c/br\u003e`\n           let currencies = obj[key]\n           let currencyLists = \"\u003cul\u003e\"\n           Object.keys(currencies).forEach( (currency, index) =\u003e {\n             currencyLists += `\u003cli\u003e${currency} : ${currencies[currency]}\u003c/li\u003e`\n           });\n           currencyLists += \"\u003c/ul\u003e\"\n           priceLists += `${currencyLists}\u003c/li\u003e`\n         });\n         document.getElementById('crypto-prices').innerHTML = priceLists\n      });\n    }\n```\n\n\u003e Remember to replace ‘Your-App-Key’ and ‘Your-cluster-key’ with the values you generated from Pusher’s dashboard\n\nWe have a similar script running here to what we had in part one that fetches and updates realtime data. The only difference is that we took the channel subscription part and put it in a function. You will see why below:\n\n``` javascript\n    // favorite.js\n    [...]\n    window.addEventListener('load', function(evt) {\n      let xhr = new XMLHttpRequest();\n      getToken(function(result) {\n        xhr.open(\"GET\", 'http://localhost:4003/favorite', true);\n        xhr.setRequestHeader('x-access-token',result.token)\n        xhr.send();\n      })\n      xhr.onreadystatechange = function() {\n        if (xhr.readyState == 4) {\n          let res = JSON.parse(xhr.responseText)\n          if(res.event) handleBinding(res.event)\n          else document.getElementById('crypto-prices').innerHTML = res.message\n        }\n      }\n    })\n```\n\nAs you can see here, we make a request to our API to get the user’s favorites. Upon getting the result, we call the function where we defined the channel binding and pass the user’s unique event. This is how they will get custom coin price updates. Cool right? 😎\n\n\n## Create a page for users to add favorite coins\n\nOpen the `extension/add-favorite.html` file and insert the following content\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"UTF-8\"\u003e\n      \u003ctitle\u003eCrypto Watcher\u003c/title\u003e\n      \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"./css/base.css\"\u003e\n      \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"./css/style.css\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003cnav\u003e\n        \u003ch1\u003eAdd Favorite\u003c/h1\u003e\n        \u003ca href=\"/index.html\" class=\"back-btn\"\u003e\u0026#8592;\u003c/a\u003e\n      \u003c/nav\u003e\n      \u003cmain\u003e\n        \u003cform id=\"form\"\u003e\n          \u003cselect id=\"coin\" class=\"select-elements\" type=\"text\" name=\"coin\" required\u003e\n            \u003coption disabled\u003e-- Select Coin --\u003c/option\u003e\n          \u003c/select\u003e\n          \u003cbutton class=\"form-elements btn\"\u003eSubmit\u003c/button\u003e\n        \u003c/form\u003e\n      \u003c/main\u003e\n      \u003cscript src=\"./js/auth.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"./js/add-favorite.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nLet us create the content for out `add-favorite.js` file. It has two main parts. Open the file and edit as follows:\n\nThe first part fetches the coins\n\n``` javascript\n    //extension/js/add-favorite.js\n    window.addEventListener('load', function(evt) {\n      let xhr = new XMLHttpRequest();\n      let coinOptions = document.getElementById('coin')\n      getToken(result =\u003e {\n        xhr.open(\"GET\", \"http://localhost:4003/coins\", true)\n        xhr.setRequestHeader('x-access-token',result.token)\n        xhr.send()\n      })\n      xhr.onreadystatechange = function() {\n        if (xhr.readyState == 4) {\n          let result = JSON.parse(xhr.responseText)\n          result.coins.forEach(coin =\u003e {\n            let el = document.createElement('option')\n            el.value = coin\n            coinOptions.appendChild(el)\n            el.innerText = coin\n          })\n        }\n      }\n      // Form submission\n    })\n```\n\nAnd the second submits the form:\n\n``` javascript\n    //extension/js/add-favorite.js\n    [...]\n      document.getElementById('form').addEventListener('submit', function(e) {\n        e.preventDefault()\n        getToken(result =\u003e {\n          let options = {\n            method : \"POST\",\n            body : JSON.stringify({coin : this.elements.coin.value}),\n            headers : new Headers({\n              'content-type': 'application/json',\n              'x-access-token' : result.token\n            })\n          }\n          fetch('http://localhost:4003/favorite/add',options)\n          .then(res =\u003e {\n            if(res.ok) return res.json()\n            else throw new Error(res.status)\n          })\n          .then(data =\u003e {\n            window.location = \"/favorite.html\"\n          })\n          .catch(error =\u003e console.log(error))\n        })\n      })\n    [...]\n```\nFinally, we need to create our `auth.js` file\n\nOpen the `extension/js/auth.js` file and add the following content\n\n``` javascript\n    getToken(function(result) {\n      if(!result) {\n        window.location = \"/index.html\"\n      }\n    })\n    \n    function getToken(callback){\n      chrome.storage.local.get(\"access-token\", (result) =\u003e {\n        let data = false\n        if (result['access-token']) {\n          let expires = new Date(result['access-token']['expires'])\n          let now = new Date()\n          if (expires \u003e now) {\n            data = { \n                    'token' : result['access-token']['token'],\n                    'user_id' : result['access-token']['user_id']\n            }\n          }\n          else {\n            chrome.storage.local.remove(\"access-token\", () =\u003e {})\n          }\n        }\n        callback(data)\n      })\n    }\n```\n\nWe called the `getToken` function and check if we have a valid token. If we don’t, we redirect the user to the `index.html` file where they can log in.\n\n\n## Testing the extension\n\nIf you got to this point, then I am happy to tell you that we are done coding. Time to mount the extension and give it a trial. From your browser, open `chrome://extensions/` and click `Load Unpacked`. Then select your extension’s directory.\n\nIf you did not deploy your application to Heroku like we did in part one, you can run it locally to give it a trial. However, if you deployed to Heroku, please go through the code and replace `http://localhost:4003` with your Heroku app URL.\n\nTo run it locally:\n\n```\n    $ npm start\n```\n\nYour extension should look like this:\n\n![chrome-crypto-extension-demo-3](//images.ctfassets.net/1es3ne0caaid/3MqcfZZHocoGcC4qqK8uqw/edc882ec45634e6916ab939f9385cace/chrome-crypto-extension-demo-3.png)\n\n![chrome-crypto-extension-demo-4](//images.ctfassets.net/1es3ne0caaid/1GZYy2bAXiCmQYiquEsyu6/fa33a5e20bce1751fc1ec274b5f1974b/chrome-crypto-extension-demo-4.png)\n\n![chrome-crypto-extension-demo-5](//images.ctfassets.net/1es3ne0caaid/2UTAm9VwPY6m4MI20OSoAo/e32ec2cce86fa59ece84a2a20b9e6479/chrome-crypto-extension-demo-5.png)\n\n![chrome-crypto-extension-demo-6](//images.ctfassets.net/1es3ne0caaid/3f662xQg7uW2oa6UK4Musq/80d1abd8b4cad0780bd3f1b5090ece12/chrome-crypto-extension-demo-6.png)\n\n![chrome-crypto-extension-demo-7](//images.ctfassets.net/1es3ne0caaid/6v5qCXyePeSAUAOua4o4gW/549e59a8d04e696cc97c9e4dbf4f72f0/chrome-crypto-extension-demo-7.png)\n\n![chrome-crypto-extension-demo-8](//images.ctfassets.net/1es3ne0caaid/32EIfAZCEEe4COoAcAmaqc/51d45960739acb8a77eba5b447a9bf07/chrome-crypto-extension-demo-8.png)\n\n\n\u003e **NOTE:** On My Favorites page, there will be an initial delay of about ten seconds when trying to fetch the coin for the first time\n\n## Conclusion\n\nIn the last part, we said we would extend the extension to make it easy for a user to specify the tokens they want to track. Well, we have delivered that.\n\nAt the start of this tutorial, I mentioned that when you are done with it, you would realise building a Chrome extension is like making a webpage. There are a few things that change when you are building an extension.\n\nBefore you say “Wow! So this is all there is to Chrome extension”, let me pause you for a moment. A Chrome extension can interact with the webpage where it is loaded. It can also do so much more than what we have seen so far.\n\nThe source code to the application in this article is available on [GitHub](https://github.com/fisayoafolayan/google-chrome-plugin-crypto/tree/customization).","metaTitle":"Build a Chrome extension to track cryptocurrency - Part 2","metaDescription":"Use Node and Heroku to build and deploy a basic Chrome extension, designed to display cryptocurrency prices in realtime. In part two, allow users to interact with the extension, and save their preferences."}}],"defaultValue":"JavaScript","queryType":"tag","pages":33,"route":"/tutorials","query":{"tag":"JavaScript","page":"11"}}},"page":"/tutorials","query":{"tag":"JavaScript","page":"11"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=JavaScript&page=11 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:47 GMT -->
</html>