<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?page=24 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:47:53 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1">Learn &amp; Discover Pusher</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="1v9vy9q">.css-1v9vy9q{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;text-align:center;}@media all and (min-width:400px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1v9vy9q{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1v9vy9q a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1v9vy9q a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:400px){.css-1v9vy9q{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1v9vy9q{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1v9vy9q{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1v9vy9q{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}</style><p scale="h5" class="css-1v9vy9q e5jrto45"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">447</span> tutorials to help you build great apps</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials0e67.html?product=Channels" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials1bbb.html?product=Beams" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value=""/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:none;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/constraintlayout-kotlin-part-1.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin</li></ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Getting started with ConstraintLayout in Kotlin - Part 1: introduction to ConstraintLayout</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This five-part series takes a detailed look at the ConstraintLayout feature in Android. You will learn about its key fea...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-flask-vue-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Flask<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Python</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app in Flask and Vue with sentiment analysis - Part 1: Setting up the project</h3><p class="css-k12xad e5jrto45">This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each othe...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-flask-vue-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Flask<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Python</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app in Flask and Vue with sentiment analysis - Part 2: Building the chat interface</h3><p class="css-k12xad e5jrto45">This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each othe...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/stocks-push-notifications-ios.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a live stocks application with push notifications for iOS</h3><p class="css-k12xad e5jrto45">This tutorial will show you how to build an iOS app that tracks stock prices. It features realtime updates and push noti...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-flask-vue-part-3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Flask<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Python</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app in Flask and Vue with sentiment analysis  - Part 3: Live chat with sentiment analysis</h3><p class="css-k12xad e5jrto45">This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each othe...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-feed-react-cloudinary.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live UX<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live photo feed using React and Cloudinary</h3><p class="css-k12xad e5jrto45">In this short tutorial, create a live photo feed using Node, React and Cloudinary. Upload and publish photos in realtime...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-flask-vue-part-4.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Flask<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Python</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app in Flask and Vue with sentiment analysis  - Part 4: Adding an online presence feature</h3><p class="css-k12xad e5jrto45">This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each othe...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-graphql-subscriptions.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">GraphQL</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Building live chat app with GraphQL subscriptions</h3><p class="css-k12xad e5jrto45">This brief tutorial takes you through building a simple chat app using GraphQL and Vue.js. Users will be able to talk on...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-comments-automod-laravel.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Comments<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live commenting system with auto moderation using Laravel</h3><p class="css-k12xad e5jrto45">Use Laravel to build a live comments feature with built-in auto moderation. Users can comment on a sample post. Their co...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials89ae.html?page=23" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials2679.html?page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorials3c09.html?page=22" class="css-za1ua3 edg0byb1">22</a><a href="tutorials89ae.html?page=23" class="css-za1ua3 edg0byb1">23</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials1d82.html?page=24" class="css-2wakph edg0byb1">24</a><a href="tutorials8c06.html?page=25" class="css-za1ua3 edg0byb1">25</a><a href="tutorials19d2.html?page=26" class="css-za1ua3 edg0byb1">26</a><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials02d1.html?page=50" class="css-5s6711 edg0byb1">50</a><a href="tutorials8c06.html?page=25" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":447,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"BVsQmMvAuyuSUKYWs0M4G","type":"Entry","createdAt":"2018-09-11T18:34:16.014Z","updatedAt":"2018-09-11T18:34:41.125Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Getting started with ConstraintLayout in Kotlin - Part 1: introduction to ConstraintLayout","url":"constraintlayout-kotlin-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/constraint-layout-demo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}}],"reviewDate":"2018-09-10","description":"This five-part series takes a detailed look at the ConstraintLayout feature in Android. You will learn about its key features, and build two sample apps in Kotlin. In part one, learn why ConstraintLayout was created and look at some of the problems it solves.","prerequisite":"You will need Android Studio 3+ installed on your machine. Familiarity with Android development will be helpful.","content":"## Introduction\n\nThis is the first part of a five-part series. In this series, we will be looking at one of the recently released layouts in Android - the `ConstraintLayout`. We will cover various building blocks of the layout, how they work collectively, and we will round off the series by creating a complex layout in the final part. \n\nFor this first part, however, we will look at the features and the problems the layout attempts to solve. Plus we will set up an Android project, which we will be playing around with through the series.\n\n\n## Prerequisites\n\nFor you to follow along in the entire series, you need to have the following requirements:\n\n\n- Android Studio (v3.0 or higher) installed on your machine. [Download here](https://developer.android.com/studio/).\n- Ability to navigate the Android Studio IDE.\n- A basic understanding of Android development, especially layouts.\n\nIf you have these prerequisites, let’s start.\n\n\n## The advent of the ConstraintLayout\n\nThe `ConstraintLayout` is a new layout available in the Android Support repository for building flexible and efficient layouts. Unlike preceding layouts, it is not bundled into the support library dependency. This is to enable frequent releases to be shipped easily and so the Android framework releases do not affect them directly. \n\nThis layout was introduced in May 2016 during the [Google I/O event](https://www.youtube.com/watch?v=sO9aX87hq9c). The layout comes with higher advantages, better performance, and more flexibility as compared to other layouts. This layout is backward compatible with API 9 (Android 2.3).\n\nThe `ConstraintLayout` system has three parts: constraints, equations, and solver. Constraints are relationships between your views and are determined when you set up your UI. Once you create these relationships, the system will translate them into a linear system of equations. In subsequent parts of this series, we will take a deeper look at constraints. \n\nBased on the constraints you’ve set, the unknowns as to where the views are supposed to be, are resolved. It uses the popular [cassowary](https://en.wikipedia.org/wiki/Cassowary_(software)) algorithm to know how to solve the equations (position its constraints). This algorithm is used in other popular platforms too like the AutoLayout in iOS development. The equations go in the solver and it returns the positions, and view sizes to be used in the layout.\n\nThe `ConstraintLayout` becomes very necessary most especially when building complex layouts. Android actually has other layouts, which have their own unique features. Some of which could be used to build complex layouts also. However, they have their own bottlenecks, hence the need to introduce a new layout. \n\nThese older layouts have rules that tend to be too rigid. As a result of this, the tendency to nest layouts become higher. For instance, the `LinearLayout` only permits placing views linearly, either horizontally or vertically. The `FrameLayout` places views in a stacked manner, the topmost view hides the rest. The `RelativeLayout` places views relative to each other. \n\nThe release of a much more diverse and flexible layout was long overdue.\n\n\n## Bottlenecks of other layouts\n\nOne of the major bottlenecks endured in using previous layouts is having a deep view hierarchy. A deep view hierarchy arises when your layout is deeply nested. Deeply nested in the sense that layouts are embedded in other layouts. \n\nA deeply nested layout looks like this:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout\u003e\n       \u003cLinearLayout\u003e\n           \u003cLinearLayout\u003e\n             \u003cTextView\u003e\u003c/TextView\u003e       \n           \u003c/LinearLayout\u003e\n           \u003cImageView\u003e\u003c/ImageView\u003e\n       \u003c/LinearLayout\u003e\n       \u003cTextView\u003e\u003c/TextView\u003e\n       \u003cLinearLayout\u003e\n           \u003cButton\u003e\u003c/Button\u003e\n       \u003c/LinearLayout\u003e\n    \u003c/LinearLayout\u003e\n```\n\nIn the above sample, we have a parent linear layout that contains a `LinearLayout`, a `TextView`, and another `LinearLayout`. \n\nThe first linear layout furthermore contains another `LinearLayout`, which houses a `TextView`, and an `ImageView`. Drawing this layout to the screen by the Android system is actually expensive and bad for performance.\n\n`ConstraintLayout` comes with a better approach. It actually offers a flatter view hierarchy than the snippet we have above. \n\nIf the above layout is converted to a `ConstraintLayout`, we can have something similar to this:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cConstraintLayout\u003e\n       \u003cTextView\u003e\u003c/TextView\u003e\n       \u003cImageView\u003e\u003c/ImageView\u003e\n       \u003cTextView\u003e\u003c/TextView\u003e\n       \u003cButton\u003e\u003c/Button\u003e\n    \u003c/ConstraintLayout\u003e\n```\n\nBecause the view hierarchy here is flat, it means it will take a shorter time to draw the layout, hence, an improved performance over the former. This is one of the major reasons for the advent of `ConstraintLayout`s. \n\nLayouts are key to the overall user experience of an application and so its performance should be optimized. One layout that looks similar to the `ConstraintLayout` is the `RelativeLayout`, which you may have used at some point. They are both powerful layout systems but the `ConstraintLayout` is a lot more powerful.\n\nIt is also worthy to note that they are both smart responsive layouts that scale to most device screens.\n\n\n## Some more interesting features of ConstraintLayout\n\nApart from the `ConstraintLayout` giving us a better performance and giving us scalable layouts that fit into multiple screens, there are other interesting features embedded in the layout:\n\n\n- Ability to handle `GONE` views well. `GONE` views are views that have their visibility set to gone, that is, they are as good as not being part of the layout. Ordinarily, on a `RelativeLayout` or any other layout, this can distort your design especially when views are relative to each other. \n\n\n  The `ConstraintLayout`, however, handles this scenario by adding a dimension of zero to these kinds of views, meaning their constraints are respected and the layout will eventually not be distorted.\n  \n- The `ConstraintLayout` introduces a new attribute called bias. A bias is a ratio of how the view is placed between its constraints on an axis. This is similar to the `weight` attribute provided by the `LinearLayout`. We will look deeper into bias in the next part of the series. By default, the bias is set to 0.5 and it is used for centered constrained elements.\n  \n- The layout also has another feature called chains, which is quite similar to bias. With this, the `ConstraintLayout` looks to have the dual power of the `LinearLayout` and `RelativeLayout`.\n  \n- The `ConstraintLayout` also offers the ability to perform animations. Recently, a sub-layout under the `ConstraintLayout` called `MotionLayout` was released. This is specifically for animations. We will take a look at it in part four of the series.\n\n\n## Setting up our Android project\n\nGoing forward, we will be demonstrating how to use `ConstraintLayout` in our project. For this, we will need to set up a dummy Android project. Launch Android Studio IDE and create a new Android project. \n\nWhen you open your IDE, you should see something like this:\n\n![constraintLayout-1-android-new-project](//images.ctfassets.net/1es3ne0caaid/18wO0RFvNqSimk4G6IU4O6/2fca522f276c42d6523d69096f1a3d23/constraintLayout-1-android-new-project.png)\n\nSelect the **Start a new Android Studio project** option and follow the wizard to setup your project. As usual, your app’s name and package name will be required, along with a minimum SDK of 19. Select an **Empty Activity** template and wait for Android Studio to build your project.\n\nSince Android Studio 3.0, the `ConstraintLayout` dependency comes by default when you create a new project. However, if you do not see it, you can add it following the instructions below.\n\nEnsure you have the `maven.google.com` repository declared in your project-level `build.gradle` file like this:\n\n``` gradle\n    buildscript {\n        repositories {\n            google()\n        }\n        [...]\n    }\n```\n\nThen add the dependency it in the app module `build.gradle` file like this:\n\n``` gradle\n    dependencies {\n        [...]\n        implementation 'com.android.support.constraint:constraint-layout:1.1.2'\n    }\n```\n\n\u003e If you are already following Android’s new naming conventions as announced [here](https://developer.android.com/topic/libraries/support-library/androidx-overview), you should add this instead:\n\n``` gradle\n    implementation 'androidx.constraintlayout:constraintlayout:1.1.2'\n```\n\nBe sure to sync your gradle files after adding it to make the library available for use. You are now ready to explore `ConstraintLayout`s! \n\nYou can add `ConstraintLayout`s to your `XML` file like this:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout \n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\u003e\n    \n      \u003c!-- Other views go here --!\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\n# Conclusion\n\nIn this first part of this series, we have learned that the `ConstraintLayout` comes in as a better and more efficient layout than other ones. We have also learned how to include it in our app. In subsequent parts, we will delve into deeper `ConstraintLayout`s. \n\nYou can find the repository for this project [here](https://github.com/neoighodaro/constraint-layout-demo).","metaTitle":"Getting started with ConstraintLayout in Kotlin - Part 1","metaDescription":"This five part series takes a detailed look at the ConstraintLayout feature in Android. You will learn about its key features, and build two sample apps in Kotlin. In part one, learn why ConstraintLayout was created and look at some of the problems it solves."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"7Fx73ZBiIEaEi0qImoMiS","type":"Entry","createdAt":"2018-11-09T12:54:30.074Z","updatedAt":"2019-01-02T15:41:08.578Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app in Flask and Vue with sentiment analysis - Part 1: Setting up the project","url":"chat-flask-vue-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"38Gip5IBCgiiy4AYeeyyqG","type":"Entry","createdAt":"2018-03-04T19:48:48.360Z","updatedAt":"2018-03-04T19:48:48.360Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Gideon Onwuka","url":"gideon-onwuka","email":"dongidomed@gmail.com","twitter":"https://twitter.com/gideon_onwuka","github":"https://github.com/dongido001","guestWriter":true}}],"projectRepo":"https://github.com/dongido001/pusher-chat-sentiment-analysis/tree/part-1","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-09-09","description":"This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each other in realtime, see when other users are online, and be notified of new messages. In part one, install dependencies and set up the project.","prerequisite":"You will need Node 8.9+ and Python 3.6+ installed on your machine.","content":"In this tutorial, I will walk you through building a one-to-one private chat with sentiment analysis using Pusher Channels, Vue.js and Flask. You can get the code for the complete app on [GitHub](https://github.com/dongido001/pusher-chat-sentiment-analysis/tree/part-1).\n\nMachine learning is still the rave at the moment with more and more companies using it to solve complex problems in the communication, entertainment, health sectors and so on, proving that it has come to stay. Let’s see how we can use it to analyze text and determine the mood of an individual from their chat message.\n\nVue.js is a frontend framework for building user interfaces. It handles DOM manipulations seamlessly. We’ll use it to build the app user interface while Flask handles the server side implementation.\n\nHere is a preview of the final app will be build:\n\n![flask-vue-sentiment-demo-1](//images.ctfassets.net/1es3ne0caaid/wf0SPv7ftAg4EgwESSIC8/6ab11f74eba32f9e9edc93373a68f12e/flask-vue-sentiment-demo-1.gif)\n\nThis tutorial is a four-part series:\n\n- Part one: Setting up the project\n- Part two: Create the chat interface, database design, login and registration endpoints\n- Part three: Realtime chat with sentiment analysis\n- Part four: Adding a “who’s online” feature\n\n## Prerequisites\n\nThis tutorial uses the following:\n\n- [JavaScript](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics)\n- [Vue.js](https://vuejs.org/)\n- [Python 3.6+](https://www.python.org/)\n- [Node.js](https://nodejs.org/) (version 8.9 or above)\n\nYou should have some familiarity with Python development to follow along with this tutorial. If you are not familiar with Vue but still want to follow along,  you can go through the basics of Vue in the [documentation](https://vuejs.org/v2/guide/) to get you up to speed in a couple of minutes.\n\nBefore we start, let’s get your environment ready. Check that you have the appropriate installation and setup on your machine.\n\nOpen up a terminal on your machine and execute the below code:\n\n```\n    $ python --version\n```\n\nIf you have a Python 3.6+ installed on your machine, you will have a similar text printed out as  `python 3.6.0`. If you got an output similar to “Command not found”, you need to install Python on your machine. Head over to [Python’s](https://www.python.org/downloads/) official website to download and get it installed.\n\n[Vue CLI](https://cli.vuejs.org/guide/installation.html) requires a [Node.js](https://nodejs.org/) version of 8.9 or above. To check that you have Node installed, enter the following command:\n\n```\n    $ node --version\n```\n\nIf you have Node.js installed on your machine, you will get an output showing the version of Node.js you have installed otherwise an output similar to “Command not found” will be displayed on your terminal. If the latter is the case, you need to install Node.js. Head over to [Node.js](https://nodejs.org/) and install the latest version.  \n\nIf you have gotten all that installed, let's proceed.\n\nOur Vue app will communicate to our backend via an API call which we are going to build using [Flask](http://flask.pocoo.org/).\n\n## Creating a Pusher account\n\nWe'll use Pusher Channels to handle all realtime functionalities. Before we can start using Pusher Channels, we need to get our API key. We need an account to be able to get the API key.\n\nHead over to Pusher and [log in](https://dashboard.pusher.com/accounts/sign_in) to your account or create a [new account](https://dashboard.pusher.com/accounts/sign_up) if you don’t have one already. Once you are logged in, create a new app and then copy the app API keys.\n\n## Setting up the frontend app\n\nVue provides a [CLI](https://cli.vuejs.org/guide/creating-a-project.html#installation) for scaffolding a new Vue project. First, you'll need to install the Vue CLI globally on your system (if you don't have it installed already). After that, we’ll create a new Vue project with the CLI commands.\n\nCreate a new Vue project by running the following commands in any convenient location on your system:\n\n```\n    # Install Vue CLI globally on your system\n    $ npm install -g @vue/cli\n    \n    # Create a new Vue project (In the prompt that appears, press enter to select the default preset.)\n    $ vue create pusher-chat-sentiment-analysis\n    \n    # Change your directory to the project directory\n    $ cd pusher-chat-sentiment-analysis\n    \n    # Run the app!\n    $ npm run serve\n```\n\nIf the commands were successful, you will get an output similar below:\n\n![flask-vue-sentiment-setup-commands](//images.ctfassets.net/1es3ne0caaid/572kv6davSKwusMCguqqA4/221cab40da58191cc10a8ea702d081a9/flask-vue-sentiment-setup-commands.png)\n\nAccessing the [URL](http://localhost:8080) displayed on your terminal will take you to a Vue default page.\n\n\n## Setting up the backend app\n\nNext, let’s create our back-end app that will be responsible for handling all communication to Pusher Channels and the Database operations.\n\nCreate the following files and folder in `pusher-chat-sentiment-analysis`:\n\n```\n    pusher-chat-sentiment-analysis\n      ├── api\n        ├── .env\n        ├── .flaskenv\n        ├── app.py\n        ├── database.py\n        ├── models.py\n        ├── requirements.txt\n```\n\nIf you prefer the command line, you can use the below command on Mac or Linux to create the files:\n\n```\n    # Create folders and files\n    $ mkdir api \u0026\u0026 cd api \u0026\u0026 touch .env .flaskenv app.py database.py models.py requirements.txt\n```\n\n### Creating a virtual environment\n\nIt’s a good idea to have an isolated environment when working with Python. [virtualenv](https://virtualenv.pypa.io/) is a tool to create an isolated Python environment. It creates a folder which contains all the necessary executables to use the packages that a Python project would need.\n\nFrom your command line, change your directory to the Flask project root folder - `api` - then execute the below command:\n\n```\n    $ python3 -m venv env\n```\n\nOr:\n\n```\n    $ python -m venv env\n```\n\nThe command to use depends on which associates with your Python 3 installation.\n\nThen, activate the virtual environment:\n\n```\n    $ source env/bin/activate\n```\n\nIf you are using Windows, activate the virtualenv with the below command:\n\n```\n    \u003e \\path\\to\\env\\Scripts\\activate\n```\n\nThis is meant to be a full path to the activate script. Replace `\\path\\to` with your correct path name.\n\nNext, add the Flask configuration setting to the `api/.flaskenv` file:\n\n```\n    FLASK_APP=app.py\n    FLASK_ENV=development\n```\n\nThis will instruct Flask to use `app.py` as the main entry file and start up the project in development mode.\n\nNow, add your Pusher API keys to the `.env` file:\n\n```\n    PUSHER_APP_ID=app_id\n    PUSHER_KEY=key\n    PUSHER_SECRET=secret\n    PUSHER_CLUSTER=cluster\n```\n\nMake sure to replace `app_id`, `key`, `secret` and `cluster` with your own Pusher keys which you have noted down earlier.\n\nNext, create a Flask instance by adding the below code to `api/app.py`:\n\n``` python\n    # app.py\n    \n    from flask import Flask, request, jsonify, render_template, redirect\n    import os\n    import pusher\n    \n    app = Flask(__name__)\n    \n    @app.route('/')\n    def index():\n        return jsonify(\"Pong!\")\n    \n    # run Flask app\n    if __name__ == \"__main__\":\n        app.run()\n```\n\nNow, add the following python packages to the `api/requirements.txt` file:\n\n```\n    Flask==1.0.2\n    python-dotenv==0.8.2\n    pusher==2.0.1\n    SQLAlchemy==1.2.0\n    Flask-SQLAlchemy==2.1\n    Flask-JWT-Extended==3.13.0\n```\n\nThe packages we added:\n\n- [python-dotenv](https://github.com/theskumar/python-dotenv): this library will be used by Flask to load environment configurations files\n- [pusher](https://github.com/pusher/pusher-http-python): this is the Pusher Python library that makes it easy to interact with its API\n- [Flask](http://flask.pocoo.org/): the Python framework we are using to build the app\n- [SQLALchemy](https://www.sqlalchemy.org/): a Python SQL toolkit and Object Relational Mapper that gives application developers the full power and flexibility of SQL\n- [Flask-JWT-Extended](https://flask-jwt-extended.readthedocs.io/en/latest/basic_usage.html): package for adding [JWT](https://jwt.io/) authentication\n\nNow install the library by executing the below command:\n\n```\n    $ pip install -r requirements.txt\n```\n\nOnce the packages are done installing, start-up Flask:\n\n```\n    $ flask run\n```\n\nIf there is no error, our Flask app will now be available on port 5000. If you visit http://localhost:5000, you will get a text: “Pong!”\n\n## Setting up a proxy\n\nSince we are going to run the Vue and Flask app side by side, we will set up a proxy to enable us access Flask endpoints on the Vue app as if they live in the Vue app. This way we don’t have to include the full URL of our Flask app nor the port. All we’ll do is use the endpoint for example `/api/users` without having to add full app URL as http://localhost:5050/api/users. This is done by [proxying](https://vuejs-templates.github.io/webpack/proxy.html). \n\nWe’ll set this up using the Vue config file. Create the config file in the root directory of the `pusher-chat-sentiment-analysis` root folder:\n\n```\n    $ touch vue.config.js\n```\n\nThen add the below config to the file:\n\n``` javascript\n    // vue.config.js\n    \n    module.exports = {\n      devServer: {\n        proxy: {\n          \"/api\": {\n            target: \"http://localhost:5000\",\n            ws: false,\n            changeOrigin: true\n          }\n        }\n      }\n    };\n```\n\nNow any URL we call on the Vue app that has a prefix of “/api” will be proxied for us to our Flask app which is running on http://localhost:5000.\n\n## Install the Pusher JavaScript library and axios\n\nWe’ll use the [axios](https://github.com/axios/axios) library for making HTTP requests. Add the axios library by executing the below command in the `pusher-chat-sentiment-analysis` root folder:\n\n```\n    $ vue add axios\n```\n\nAdd the [Pusher JavaScript](https://github.com/pusher/pusher-js) library:\n\n```\n    $ npm install pusher-js\n```\n\nOur project is all set up now. The Vue app lives in the `pusher-chat-sentiment-analysis` root folder while the Flask app lives in the `api` subfolder.\n\n## Set up the Vue environment config\n\nLet’s keep things in order so that we don’t have to add our Pusher key to our code directly. With Vue [environment](https://cli.vuejs.org/guide/mode-and-env.html) setup, we can set our Pusher key and easily access it. \n\nCreate a `.env` file in the root folder of the project:\n\n```\n    $ touch .env\n```\n\nThen add your Pusher key:\n\n```\n    VUE_APP_PUSHER_KEY=\u003cPUSHER_APP_KEY\u003e\n    VUE_APP_PUSHER_CLUSTER=\u003cPUSHER_APP_CLUSTER\u003e\n```\n\nMake sure to replace `\u003cPUSHER_APP_KEY\u003e` and `\u003cPUSHER_APP_CLUSTER\u003e` with your actual Pusher App credentials.\n\n## Conclusion\n\nIn this tutorial, we have been able to set up our Vue app to communicate with our Flask application. We also installed the Python and JavaScript libraries that we’ll be using in the app. \n\nIn the next part of this tutorial series, we will design the database for the chat app, build the chat interface and also implement login and registration endpoint.","metaTitle":"Build a chat app in Flask and Vue - Part 1","metaDescription":"This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each other in realtime, see when other users are online, and be notified of new messages. In part one, install dependencies and set up the project."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"ego8bPzHfqiAQEQCwEo8S","type":"Entry","createdAt":"2018-11-12T17:11:35.800Z","updatedAt":"2019-01-02T15:41:36.362Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app in Flask and Vue with sentiment analysis - Part 2: Building the chat interface","url":"chat-flask-vue-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"38Gip5IBCgiiy4AYeeyyqG","type":"Entry","createdAt":"2018-03-04T19:48:48.360Z","updatedAt":"2018-03-04T19:48:48.360Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Gideon Onwuka","url":"gideon-onwuka","email":"dongidomed@gmail.com","twitter":"https://twitter.com/gideon_onwuka","github":"https://github.com/dongido001","guestWriter":true}}],"projectRepo":"https://github.com/dongido001/pusher-chat-sentiment-analysis/tree/part-2","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-09-08","description":"This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each other in realtime, see when other users are online, and be notified of new messages. In part two, build the chat interface.","prerequisite":"You will need Node 8.9+ and Python 3.6+ installed on your machine.","content":"In this part, we are going to design/create the database, build the chat interface and also implement the login and registration endpoints. The code is available on [GitHub](https://github.com/dongido001/pusher-chat-sentiment-analysis/tree/part-2).\n\nThis is the second part of this tutorial series. In the [first part](https://pusher.com/tutorials/chat-flask-vue-part-1), we set up our working environment and also created the project. We were able to communicate with Flask from the Vue app. \n\n\n## Creating the chat interface\n\nVue enables us to build reusable components which make up our app user interface. We’ll split the app UI into smaller components so we can build them separately:\n\n![flask-vue-sentiment-ui](//images.ctfassets.net/1es3ne0caaid/1AH5nwgf0sOI86umMgYCcq/e2b418338284ffb0afd357f1f081bfdf/flask-vue-sentiment-ui.png)\n\nIn the image above we have:\n\n\n- The area with the red border is our base component which will house other components. This is the entire app component area that Vue creates by default. The file is located in  `src/App.vue`.\n- [1] - `Users` component. This component will be responsible for listing all our registered users.\n- [2] - `Messages` component. This component renders messages.\n- [3] - `MessageInput` component. This is the input form for sending messages.\n- [4] - `NavBar` component. This is the navigation bar at the top of the app.\n\nIf you go through the Vue app in the project root folder, you will see a couple of files already created.\n\nSince we are building a one-to-one private chat, we need a way to uniquely identify every user of our app. We’ll do so using their username. This means they have to log in to use the app.  Once they are logged in, they’d be able to see the chat interface above. \n\nWe’ll also create a  `Login` component which will build up the login page. \n\nBefore we start building these components, let's add Bootstrap-vue to speed up the design process. Bootstrap-vue project already structures our normal [Bootstrap](https://getbootstrap.com/) into components which will be easy for us. You can read more on the documentation [here](https://bootstrap-vue.js.org/).\n\n### Adding Bootstrap-vue\n\nAdd bootstrap-vue using Vue command from the `one-to-one` root folder:\n\n```\n    $ vue add bootstrap-vue\n```\n\n```\n    📦  Installing vue-cli-plugin-bootstrap-vue...\n    \n    + vue-cli-plugin-bootstrap-vue@0.1.0\n    added 1 package from 1 contributor and audited 13896 packages in 71.714s\n    found 0 vulnerabilities\n    \n    ✔  Successfully installed plugin: vue-cli-plugin-bootstrap-vue\n    \n    ? Use babel/polyfill? No\n    \n    🚀  Invoking generator for vue-cli-plugin-bootstrap-vue...\n    📦  Installing additional dependencies...\n```\n\nVue will handle all the configuration settings for us. If the command ran successfully, you will notice a new folder named plugins in `src` folder. In this folder,  you will also find a file named `bootstrap-vue.js` that imports the Bootstrap files.\n\n### App.vue component\n\nAs mentioned earlier, the `src/App.vue` file is the main entry components housing all other components in the app. This means we’re going to import every other component to this file.\n\nAlso, we are using the [single file component structure](https://vuejs.org/v2/guide/single-file-components.html) approach to create our components, which have three sections:\n\n- `\u003ctemplate\u003e` section. This section holds all markup, basically our HTML markup.\n- `\u003cscript\u003e` section. This is where our JavaScript code resides.\n- `\u003cstyle\u003e` section. For adding styles such as CSS.\n\nA component file looks like this:\n\n``` html\n    \u003ctemplate\u003e\n      \u003cdiv\u003e\n          Some HTML markup\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n      console.log(\"Some JavaScript code\");\n    \u003c/script\u003e\n    \n    \u003cstyle\u003e\n     /* Styles */\n    .style {\n      color: lime;\n    }\n    \u003c/style\u003e\n```\n\nNow, replace the content in the `\u003ctemplate\u003e` section of the `src/App.vue` file with the below markup:\n\n``` html\n    \u003ctemplate\u003e\n      \u003cdiv id=\"app\"\u003e\n        \u003cLogin /\u003e\n        \u003cb-container\u003e\n          \u003cNavBar :logged_user=\"logged_user_username\" /\u003e\n          \u003cb-row class=\"main-area\"\u003e\n            \u003cb-col cols=\"4\" class=\"users\"\u003e\n              \u003cUsers /\u003e\n            \u003c/b-col\u003e\n            \u003cb-col cols=\"8\" class=\"messages-area\"\u003e\n              \u003cdiv class=\"messages-main\"\u003e\n                \u003cdiv \n                  v-if=\"!current_chat_channel\" \n                  class=\"select-chat text-center\"\n                \u003e\n                  Select a user to start chatting... \n                \u003c/div\u003e\n                \u003cMessages \n                  v-else \n                  :active_chat=\"active_chat_id\" \n                  :messages=\"messages[current_chat_channel]\"\n                /\u003e \n              \u003c/div\u003e\n              \u003cMessageInput /\u003e\n            \u003c/b-col\u003e\n          \u003c/b-row\u003e\n        \u003c/b-container\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nThis is our whole chat interface we have defined with some HTML, the bootstrap-vue components and our app components, which we have broken down in the image above earlier. \n\nWe’re yet to create the files for our components, let’s do so now. Create the below files in the `src/components/` folder:\n\n- Login.vue\n- NavBar.vue\n- Users.vue\n- MessageInput.vue\n- Messages.vue\n\nNext, import and register the components. Replace the content in the `\u003cscript\u003e` section in `src/App.vue` file with the below code:\n\n``` javascript\n    \u003cscript\u003e\n    import MessageInput from \"./components/MessageInput.vue\";\n    import Messages from \"./components/Messages.vue\";\n    import NavBar from \"./components/NavBar.vue\";\n    import Login from \"./components/Login.vue\";\n    import Users from \"./components/Users.vue\";\n    import Pusher from \"pusher-js\";\n    \n    // Declare pusher variable so it's global to this file.\n    let pusher;\n    \n    export default {\n      name: \"app\",\n      components: {\n        MessageInput,\n        NavBar,\n        Messages,\n        Users,\n        Login\n      },\n      data: function() {},\n      methods: {},\n    };\n    \u003c/script\u003e\n```\n\nWhen you import a component, you need to let Vue know of the component, which is what we did in the `components: {` block. We also imported the Pusher JavaScript library, which we are going to use to communicate with Pusher from our client. \n\nNext, add some styling. Update the styles in the `\u003cstyle\u003e` section with the below code in `src/App.vue`:\n\n``` css\n    \u003cstyle\u003e\n    .messages-main {\n      overflow-y: scroll;\n      height: 90%;\n    }\n    .users {\n      padding: 0px !important;\n      border: 1px solid gray;\n    }\n    .no-margin {\n      margin: 0px;\n    }\n    .messages-area {\n      border: 1px solid gray;\n      padding: 0px !important;\n      max-height: calc(100vh - 4em) !important;\n    }\n    .input-message {\n      height: 40px;\n    }\n    .active {\n      background: #17a2b8 !important;\n      border: #17a2b8 !important;\n    }\n    .select-chat {\n      margin-top: 35vh;\n      padding: 8px;\n    }\n    .main-area {\n      margin: 0px;\n      min-height: calc(100vh - 5em) !important;\n    }\n    .logged_user {\n      color: white;\n    }\n    \u003c/style\u003e\n```\n\nNow load up the Vue app in your [browser](http://localhost:8080) again to see what we have. You should notice the page is almost empty but without any error:\n\n![flask-vue-sentiment-demo-2](//images.ctfassets.net/1es3ne0caaid/1BRximPRuMwKO6WYcs8cAe/e9f1801e42a794d440943263b73679f8/flask-vue-sentiment-demo-2.png)\n\nThat's a good sign 🙂.\n\nThe components we have created are all empty. The next thing we will do is to build up the components and then observe the chat interface come to life as we build along.\n\nYou can leave the page open on your browser and observe the changes to the page when we update the component files.\n\n### Login.vue\n\nAdd the below code to `src/components/Login.vue`:\n\n``` html\n    \u003ctemplate\u003e\n        \u003cdiv class=\"login\"\u003e\n          \u003cdiv v-if=\"proccessing\" class=\"text-center\"\u003e Please wait... \u003c/div\u003e\n          \u003cdiv v-if=\"message\" class=\"text-center\"\u003e {{message}} \u003c/div\u003e\n          \n          \u003cb-form-input\n            v-model=\"username\"\n            type=\"text\"\n            class=\"input-form\"\n            placeholder=\"Username\"\u003e\n          \u003c/b-form-input\u003e\n          \n          \u003cb-form-input\n            v-model=\"password\"\n            class=\"input-form\"\n            type=\"password\"\n            placeholder=\"Password\"\u003e\n          \u003c/b-form-input\u003e\n          \n          \u003cb-button \n            v-on:click=\"login\" \n            variant=\"primary\" \n            class=\"btn-block\"\n          \u003e\n          Log me in\n         \u003c/b-button\u003e\n         \n        \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    export default {\n      name: \"Login\",\n      data() {\n        return {\n          username: \"\",\n          password: \"\",\n          proccessing: false,\n          message: \"\"\n        };\n      },\n    };\n    \u003c/script\u003e\n    \n    \u003cstyle scoped\u003e\n    .login {\n      width: 500px;\n      border: 1px solid #cccccc;\n      background-color: #ffffff;\n      margin: auto;\n      margin-top: 200px;\n      padding: 20px;\n    }\n    .input-form {\n      margin-bottom: 9px;\n    }\n    \u003c/style\u003e\n```\n\nHere we added two input fields: **username** and **password** and a button to submit the form. Then we [bind](https://vuejs.org/v2/guide/forms.html) the input fields to our data. In the `\u003cscript\u003e` section, we exported an object defining data for the component.\n\n### NavBar.vue\n\nNext, add the content for the NavBar component to `src/components/NavBar.vue`:\n\n``` html\n    \u003ctemplate\u003e\n        \u003cb-navbar toggleable=\"md\" type=\"dark\" variant=\"info\" class=\"nav-bar\"\u003e\n            \u003cb-navbar-toggle target=\"nav_collapse\"\u003e\u003c/b-navbar-toggle\u003e\n            \u003cb-navbar-brand href=\"#\"\u003eChitChat\u003c/b-navbar-brand\u003e\n            \u003cb-collapse is-nav id=\"nav_collapse\"\u003e\n                \u003cb-navbar-nav class=\"ml-auto logged_user\" \u003e\n                    Welcome back {{logged_user}}\n                \u003c/b-navbar-nav\u003e\n            \u003c/b-collapse\u003e\n        \u003c/b-navbar\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    export default {\n      name: \"NavBar\",\n      props: {\n        logged_user: String\n      }\n    };\n    \u003c/script\u003e\n    \n    \u003cstyle scoped\u003e\n    .nav-bar {\n      border-bottom: 1px solid #17a2b8;\n    }\n    \u003c/style\u003e\n```\n\n### Users.vue\n\nAdd the below code to `src/components/Users.vue` for the Users component:\n\n``` html\n    \u003ctemplate\u003e\n      \u003cdiv style=\"margin-top: 0px;\"\u003e\n        \u003cdiv v-for=\"(user, id) in users\" v-bind:key=\"id\"\u003e\n          \u003cdiv\n            v-bind:class=\"[activeUser == user.id ? 'user active' : 'user']\"\n            v-on:click=\"chat(user.id)\"\n          \u003e\n            {{user.userName}}\n            \u003cspan v-if=\"user.has_new_message\" class=\"has_new_message\"\u003eNew message\u003c/span\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \u003cscript\u003e\n    export default {\n      name: \"Users\",\n      props: {\n        users: Array\n      },\n      data() {\n        return {\n          activeUser: null\n        };\n      },\n      methods: {\n        chat: function(id) {\n          this.activeUser = id;\n          this.$emit(\"chat\", id);\n        }\n      }\n    };\n    \u003c/script\u003e\n    \u003cstyle scoped\u003e\n    .user {\n      margin: 0px !important;\n      padding: 10px 4px 10px 8px;\n      border-bottom: 1px solid gray;\n    }\n    .active {\n      background: #17a2b8;\n      color: white;\n    }\n    .has_new_message {\n      background-color: #17a2b8;\n      border-radius: 4px;\n      display: inline-block;\n      color: white;\n      margin-bottom: -4px;\n      font-size: 10px;\n      margin: 4px;\n      padding: 3px;\n      font-weight: bolder;\n    }\n    \u003c/style\u003e\n```\n\nNotice the v-for [directive](https://vuejs.org/v2/guide/list.html) we are using to render our users. The `users` array will be passed from the `src/App.vue` component as [property](https://vuejs.org/v2/guide/components-props.html). \n\nWe are also using the `v-on` (`v-on:click=\"chat(user.id)\"`) [directive](https://vuejs.org/v2/guide/events.html) to listen for click events when a user is clicked. If a user is clicked, we then call the chat function we have defined in the methods property. \n\nAlso, in the chat function, we are [emitting](https://vuejs.org/v2/api/#vm-emit) an event to `src/App.vue` so that the chat for that user can be initialized.\n\nAlso, `\u003cspan v-if=\"user.has_new_message\" class=\"has_new_message\"` will display \nthe text: “New message” on the users tab whenever they get a message from a user they are not currently chatting with.\n\n### Messages.vue\n\nAdd the below code to `src/components/Messages.vue` for the Messages component:\n\n``` html\n    \u003ctemplate\u003e\n       \u003cdiv\u003e\n        \u003cdiv v-for=\"(message, id) in messages\" v-bind:key=\"id\"\u003e \n            \u003cdiv class=\"chat-message col-md-5\" \n              v-bind:class=\"[(message.from_user == active_chat) ? 'to-message' : 'from-message offset-md-7']\"\u003e\n              {{message.message}}\n            \u003c/div\u003e \n        \u003c/div\u003e\n       \u003c/div\u003e\n    \u003c/template\u003e\n    \u003cscript\u003e\n    export default {\n      name: \"Messages\",\n      props: {\n        messages: Array,\n        active_chat: Number\n      }\n    };\n    \u003c/script\u003e\n    \u003cstyle\u003e\n    .from-message {\n      background: #17a2b8;\n      color: white;\n      border-radius: 3px;\n      padding: 8px 2px;\n      margin-bottom: 4px;\n    }\n    .to-message {\n      background: rgb(201, 209, 209);\n      color: rgb(41, 53, 52);\n      border-radius: 3px;\n      padding: 8px 2px;\n      margin-bottom: 4px;\n    }\n    \u003c/style\u003e\n```\n\n### MessageInput.vue\n\nAdd the below code to `src/components/MessageInput.vue` for the MessageInput component:\n\n``` html\n    \u003ctemplate\u003e\n        \u003cdiv class=\"message-input\"\u003e\n            \u003cb-form-input \n              v-model=\"message_input\"\n              type=\"text\"\n              placeholder=\"Enter your message\"\n              v-on:keyup.enter.native=\"send_message\"\n            \u003e\n            \u003c/b-form-input\u003e\n        \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    export default {\n      name: \"MessageInput\",\n      data() {\n        return {\n          message_input: \"\"\n        };\n      },\n      methods: {\n        send_message() {\n          this.$emit(\"send_message\", this.message_input);\n          this.message_input = \"\";\n        }\n      }\n    };\n    \u003c/script\u003e\n    \n    \u003cstyle scoped\u003e\n    .message-input {\n      position: absolute;\n      bottom: 0px;\n      width: 100%;\n    }\n    \u003c/style\u003e\n```\n\nWe now have our chat interface. \n\n![flask-vue-sentiment-demo-3](//images.ctfassets.net/1es3ne0caaid/KOdZR8doGYyk2qcMeQm0/17c720e1fa131c92f1eaba9dc5e03394/flask-vue-sentiment-demo-3.png)\n\nDon’t worry that the login form and the chat area are together, we’ll fix it in the next part.\n\n## The database\n\nWe will use SQLite for the database. \n\nFor our chat app, we’ll create three tables:\n\n\n- **users** — This will hold all the users in the application.\n- **channels** — Once two users start a conversation, we will create a new channel for them and store the channel name to the database. So that for subsequent conversation, we don’t need to create a new channel for them.\n- **messages** — We’ll store every conversation to this table. We don’t want a situation where a user logs out and logs in again to find out their previous messages are missing.\n\n![flask-vue-sentiment-demo-4](//images.ctfassets.net/1es3ne0caaid/3lRIvf4P96C262ck2WgIIs/cf0d453aa2b479f47cb4de55d1de04af/flask-vue-sentiment-demo-4.png)\n\nAdd the below code to `api/database.py` to prepare the database connection:\n\n``` python\n    from sqlalchemy import create_engine\n    from sqlalchemy.orm import scoped_session, sessionmaker\n    from sqlalchemy.ext.declarative import declarative_base\n    engine = create_engine('sqlite:///database.db', convert_unicode=True)\n    db_session = scoped_session(sessionmaker(autocommit=False,\n                                                autoflush=False,\n                                                bind=engine))\n    Base = declarative_base()\n    Base.query = db_session.query_property()\n    def init_db():\n        import models\n        Base.metadata.create_all(bind=engine)\n```\n\nWe are using SQLAlchemy to initialize our database connection. \n\nIn the `init_db()` function, we imported our models and finally call `Base.metadata.create_all` to create all the tables specified in the model’s file.\n\n## Create the models\n\nLet’s create a model for easy CRUD operations.\n\nAdd the model definition to `api/models.py`:\n\n``` python\n    from sqlalchemy import Column, Integer, String, Text, ForeignKey\n    from database import Base\n    \n    class User(Base):\n        __tablename__ = 'users'\n        id = Column(Integer, primary_key=True)\n        username = Column(String(50), unique=True)\n        password = Column(String(128))\n        def __init__(self, username=None, password=None):\n            self.username = username\n            self.password = password\n            \n        def __repr__(self):\n            return '\u003cUser %r\u003e' % (self.username)\n            \n    class Channel(Base):\n        __tablename__ = 'channels'\n        id = Column(Integer, primary_key=True)\n        name = Column(String(60))\n        from_user = Column(Integer, ForeignKey('users.id'))\n        to_user = Column(Integer, ForeignKey('users.id'))\n    \n    class Message(Base):\n        __tablename__ = 'messages'\n        id = Column(Integer, primary_key=True)\n        message = Column(Text)\n        from_user = Column(Integer, ForeignKey('users.id'))\n        to_user = Column(Integer, ForeignKey('users.id'))\n        channel_id = Column(Integer, ForeignKey('channels.id'))\n```\n\nIn this file, we create three classes which define the structure of the tables our app will be using.\n\nNow import the files to `api/app.py`:\n\n``` python\n    # ./api/app.py\n    \n    # [...]\n    from database import db_session\n    from models import User, Channel, Message\n    # [...] \n```\n\nNext, let’s close the connection to the database once an operation is complete.  Add the following code to `api/app.py`  after `app = Flask(__name__)` line:\n\n``` python\n    @app.teardown_appcontext\n    def shutdown_session(exception=None):\n        db_session.remove()\n```\n\n### Create the database and tables\n\nNow, let’s create the database and tables. Open up a new command window and change your directory to the project’s root folder, activate your virtualenv and then run the below commands:\n\n``` \n    # Go to the Flask app\n    $ cd api\n    \n    # Activate your virtualenv\n    \n    # Enter python interactive shell\n    $ python\n    \u003e\u003e\u003e from database import init_db\n    \u003e\u003e\u003e init_db()\n```\n\nIf there is no error, a new file named `database.db` will be created in the `api` folder. \n\n\n\u003e ⚠️ You might get an error if your virtualenv is not activated. You need to activate your virtualenv before running the above command.\n\n## Authentication Route\n\nWe are almost done. We need some endpoints for adding and authenticating our users.\n\nThe [Werkzeug](http://werkzeug.pocoo.org/) is a Python utility library which Flask depends on. Since we have installed Flask, we’ll also have access to the library.\n\nImport the function for generating and checking password hash from the Werkzeug library to `api/app.py` file:\n\n``` python\n    #app.py\n    \n    #[...]\n    from werkzeug.security import generate_password_hash, check_password_hash\n    #[...]\n```\n\n### Register\n\nNext, add the route for adding new users to `api/app.py`: \n\n``` python\n    @app.route('/api/register', methods=[\"POST\"])\n    def register():\n        data = request.get_json()\n        username = data.get(\"username\")\n        password = generate_password_hash(data.get(\"password\"))\n        \n        try:\n            new_user = User(username=username, password=password)\n            db_session.add(new_user)\n            db_session.commit()\n        except:\n            return jsonify({\n                \"status\": \"error\",\n                \"message\": \"Could not add user\"\n            })\n            \n        return jsonify({\n            \"status\": \"success\",\n            \"message\": \"User added successfully\"\n        }), 201\n```\n\nHere we created a new route named `/api/register` which is only available via a POST request. It will accept JSON object containing the new user details - username and password.\n\nFinally, we added the user to the database. If an error occurred while adding, we inform the user with a JSON response:\n\n``` python\n            return jsonify({\n                \"status\": \"error\",\n                \"message\": \"Could not add user\"\n            })\n```\n\nElse we respond with a success message:\n\n``` python\n        return jsonify({\n            \"status\": \"success\",\n            \"message\": \"User added successfully\"\n        }), 201\n```\n\nUsing a REST client like [Postman](https://www.getpostman.com/), you can now register a new user:\n\n![flask-vue-sentiment-postman-1](//images.ctfassets.net/1es3ne0caaid/1mWJ749YecOeE4WWOO0Sck/e5558ad47c4f0aa72dd8b99fb084db00/flask-vue-sentiment-postman-1.png)\n\n To register users using Postman, open up the Postman app then,\n\n- Close the first pop up that appears.\n- Select **POST** as the request method.\n- Add http://localhost:5000/api/register to the request URL field.\n- Click on the **Body** tab right below the URL field.\n- Then choose **raw** in the options that appear after the **Body** tab you just selected.\n- In the same line with the **raw** option, select **JSON (application/json)** in the drop down.\n- Now, add the user’s information you want to register to the text field that appears after the option you just selected:\n\n```\n    {\n       \"username\": \"\u003cusername\u003e\",\n       \"password\": \"\u003cpassword\u003e\"\n    }\n```\n \n Make sure to replace `\u003cusername\u003e` and `\u003cpassword\u003e` placeholders with the information of the user you want to register.\n\n- Finally, click on the **Send** button to send the request to the server. \n\n \nRegister a couple of users and note down their credentials. We’ll use it to test the app later.\n \n### Login\n\nOne way of securing APIs and single page applications is by using [JWT](https://jwt.io/introduction/). It’s an encrypted token generated to securely transfer information between services. To implement JWT for our app, we will use the [Flask-JWT-extended](https://flask-jwt-extended.readthedocs.io) package. We have already installed the package so we’ll go ahead and use it.\n\nImport the package and configure it to use Flask app in `api/app.py`:\n\n``` python\n    from flask_jwt_extended import (\n        JWTManager, jwt_required, create_access_token,\n        get_jwt_identity\n    )\n```\n\nFrom the package, we imported the following functions:\n\n\n- **JWTManager** —  The Python class for configuring the package to use Flask app config.\n- **jwt_required** — A decorator for authenticating our routes.\n- **created_access_token** — A function for generating a token.\n- **get_jwt_identity** — A function for getting the identity (in our case the username) from a token.\n\nNext, let’s configure the package to use Flask app config. Add the below code to `api/app.py` immediately after `app = Flask(__name__)` line:\n\n``` python\n    app.config['JWT_SECRET_KEY'] = 'something-super-secret'  # Change this!\n    jwt = JWTManager(app)\n```\n\nNext, add the login route to `api/app.py`:\n\n``` python\n    @app.route('/api/login', methods=[\"POST\"])\n    def login():\n        data = request.get_json()\n        username = data.get(\"username\")\n        password = data.get(\"password\")\n        user = User.query.filter_by(username=username).first()\n        \n        if not user or not check_password_hash(user.password, password):\n            return jsonify({\n                \"status\": \"failed\",\n                \"message\": \"Failed getting user\"\n            }), 401\n            \n        # Generate a token\n        access_token = create_access_token(identity=username)\n        \n        return jsonify({\n            \"status\": \"success\",\n            \"message\": \"login successful\",\n            \"data\": {\n                \"id\": user.id,\n                \"token\": access_token,\n                \"username\": user.username\n            }\n        }), 200\n```\n\nWith this, we now have our login route - `/api/login` which is available via a POST requests. The route expects a expects a JSON object to be passed along that contains the details of the user.\n\n![flask-vue-sentiment-postman-2](//images.ctfassets.net/1es3ne0caaid/4uSxjMG1PO2WWoY2A8gS2q/0c82011179fc74de9f6476b863488cd8/flask-vue-sentiment-postman-2.png)\n\nTo test the login route, use the details of the user you just registered.\n\n## Conclusion\n\nIn this tutorial, we created our chat interface that was composed of Vue components. We also created the database for the chat application using SQLAlchemy.  \n\nFinally, we created a login and registration endpoint and also setup JWT for authenticating users and protecting our routes.","metaTitle":"Build a chat app in Flask and Vue - Part 2","metaDescription":"This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each other in realtime, see when other users are online, and be notified of new messages. In part two, build the chat interface."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6I6zL6laFOeMuuWyQAGWqo","type":"Entry","createdAt":"2018-09-07T15:16:38.025Z","updatedAt":"2018-09-07T15:16:38.025Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a live stocks application with push notifications for iOS","url":"stocks-push-notifications-ios","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro-articles/stocks-app-ios","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4kOTcNAC12gwWEyE6MimMY","type":"Entry","createdAt":"2018-02-12T15:08:28.581Z","updatedAt":"2018-02-26T12:31:12.766Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Trading","url":"trading","type":"use case"}}],"reviewDate":"2018-09-05","description":"This tutorial will show you how to build an iOS app that tracks stock prices. It features realtime updates and push notifications. You will build the frontend app in Swift, and the backend in Node.js.","prerequisite":"You will need Xcode, Cocoapods and Node.js installed on your machine. Some knowledge of iOS development will be helpful.","content":"In this article, we will see how you can build a stock market application using iOS and Swift. The prices will update in realtime as the changes to the prices occur. More importantly, though, you will be able to activate push notifications on certain stocks so you get notified when the prices of the stock changes.\n\nWhen we are done, we will have an application that functions like this:\n\n![ios-stocks-demo](//images.ctfassets.net/1es3ne0caaid/4oR4dRIkTCEMEK2iOMcoMQ/c7f74457e5e4529929a84f960ef0faaf/ios-stocks-demo.gif)\n\n## Prerequisites\n\nTo follow along in this tutorial you need the following things:\n\n- Xcode installed on your machine. Download [here](https://developer.apple.com/xcode).\n- Know your way around the Xcode IDE.\n- Basic knowledge of the Swift programming language.\n- Basic knowledge of JavaScript.\n- Node.js installed on your machine. Download [here](https://nodejs.org/en/download/).\n- Cocoapods installed on your machine. Install [here](https://guides.cocoapods.org/using/getting-started.html).\n- A Pusher account. Create one [here](https://pusher.com).\n\nLet’s get started.\n\n\n## Creating your iOS project\n\nThe first thing we need to do is create the project in Xcode. Launch Xcode and click **Create a new Xcode project**.\n\n![ios-stocks-welcome-xcode](//images.ctfassets.net/1es3ne0caaid/U17iFrhgC4GKEKaUqAI0i/158f59671b9340e854de759f1a1b495a/ios-stocks-welcome-xcode.png)\n\nFrom the next screen, select **Single View App \u003e Next** then give the project a name. Let’s name it something really creative, like **Stocks.**\n\n![ios-stocks-new-app](//images.ctfassets.net/1es3ne0caaid/5CEuleMypUI6MGKK6IeIo6/89863680adb2722700e0687d0cc0fd40/ios-stocks-new-app.png)\n\n### Installing dependencies using Cocoapods\n\nNow that we have our project set up, we need to add some external libraries to the project. These libraries will be used for various functions like push notifications and HTTP requests.\n\nFirst close Xcode. Next, create a new `Podfile` in the root of your project and paste the following code:\n\n```\n    # File: ./Podfile\n    platform :ios, '11.0'\n    \n    target 'Stocks' do\n      use_frameworks!\n      pod 'Alamofire', '~\u003e 4.7.3'\n      pod 'PusherSwift', '~\u003e 6.1.0'\n      pod 'PushNotifications', '~\u003e 1.0.1'\n      pod 'NotificationBannerSwift', '~\u003e 1.6.3'\n    end\n```\n\nAbove, we are using the `Podfile` to define the libraries our project will be depending on to work. Here are the libraries we have:\n\n\n- [Alamofire](https://github.com/Alamofire/Alamofire) - an HTTP networking library written in Swift.\n- [PusherSwift](https://github.com/pusher/pusher-websocket-swift) - the iOS library for Pusher.\n- [PushNotifications](https://github.com/pusher/push-notifications-swift) - Swift SDK for Pusher Beams.\n- [NotificationBannerSwift](https://github.com/Daltron/NotificationBanner) - easy way to display app notification banners in iOS apps.\n\nNow that we have defined the dependencies, let’s install them. Open your terminal and `cd` to the project root and run this command:\n\n```\n    $ pod update\n```\n\nThis will install all the dependencies listed in the `Podfile`. We are using the `update` command because we want the latest versions of the libraries, which may have changed since writing this article.\n\nWhen the installation is complete, we will have a new `Stocks.xcworkspace` file in the root of the project. Going forward, we will have to open our iOS project using this Xcode workspace file.\n\n\n## Building the iOS application\n\nThe first thing we want to do is consider how the entire service will work. We will build two applications. One will be the iOS application and the other will be a backend, which will be built with JavaScript (Node.js). \n\nIn this section, we will start with the iOS application. Open the `Stocks.xcworkspace` file in Xcode and let’s start building the iOS app.\n\n### Creating the settings class\n\nThe first thing we are going to do is create a notification settings class. This will be responsible for storing the notification settings for a device. When you subscribe for push notifications on a certain stock, we will store the setting using this class so that the application is aware of the stocks you turned on notifications for.\n\nCreate a new Swift class named `STNotificationSettings` and paste the following code:\n\n``` swift\n    // File: ./Stocks/STNotificationSettings.swift\n    import Foundation\n    \n    class STNotificationSettings: NSObject {\n        static let KEY = \"ST_NOTIFICATIONS\"\n        static let shared = STNotificationSettings()\n        \n        private override init() {}\n        \n        private var settings: [String: Bool] {\n            get {\n                let key = STNotificationSettings.KEY\n                \n                if let settings = UserDefaults.standard.object(forKey: key) as? [String: Bool] {\n                    return settings\n                }\n                \n                return [:]\n            }\n            set(newValue) {\n                var settings: [String: Bool] = [:]\n                \n                for (k, v) in newValue {\n                    settings[k.uppercased()] = v\n                }\n                \n                UserDefaults.standard.set(settings, forKey: STNotificationSettings.KEY)\n            }\n        }\n        \n        func enabled(for stock: String) -\u003e Bool {\n            if let stock = settings.first(where: { $0.key == stock.uppercased() }) {\n                return stock.value\n            }\n            \n            return false\n        }\n        \n        func save(stock: String, enabled: Bool) {\n            settings[stock.uppercased()] = enabled\n        }\n    }\n```\n\nIn the class above, we have a static property, `key`, that is just used as the key for the preference that will hold all our settings. This key will be used for lookup and storage of the settings in the iOS file system. \n\nWe also have a `shared` static property, which holds an instance of the class. We want this class to be instantiated once. This is also why we have made our `init` method private. \n\nNext, we have the `settings` property. This is a [computed property](https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID259) that provides a getter and a setter to retrieve and set other properties and values indirectly. The getter just retrieves the settings data from the filesystem, while the setter saves the settings to the filesystem.\n\nWe have two methods in the class, `enabled(for:)` and `save(stock:enabled:)`. The first one checks if push notifications are enabled for a stock, while the second saves the setting for a stock.\n\nThat’s all for the settings class.\n\n### Creating our view controller\n\nThe next thing we want to do is create the view controller. We will start by creating a view controller class, then we will create a view controller in the storyboard. We will then connect the class to the storyboard.\n\nCreate a new table view controller named `StocksTableViewController` and replace the contents with this:\n\n``` swift\n    // File: ./Stocks/StocksTableViewController.swift\n    import UIKit\n    import Alamofire\n    import PusherSwift\n    import PushNotifications\n    import NotificationBannerSwift\n    \n    class StocksTableViewController: UITableViewController {\n    }\n```\n\nWe will get back to this class, but for now, leave it and open the `Main.storyboard` file. In the storyboard, drag a new table view controller to the canvas. Next, drag the arrow from the old view controller that was in the storyboard to the new table view controller and then delete the old view controller.\n\n![ios-stocks-tableview](//images.ctfassets.net/1es3ne0caaid/1osRvlJkvaackYIc82seis/6b7fd1aca66a446c06137d1003d54574/ios-stocks-tableview.png)\n\nNext, open the **Identity Inspector** and set the custom class for the table view controller to `StocksTableViewController`. This will connect the class we created earlier to this table view controller we have on the storyboard.\n\n![ios-stocks-identity-inspector](//images.ctfassets.net/1es3ne0caaid/1DSUBk4DZamggSwwSIKI20/c2453f16afbd30b9c8a11568e019709e/ios-stocks-identity-inspector.png)\n\nFinally, set the reuse **Identifier** on the cell to ‘default’. We will not be using the cells that come with this table view controller, but we still need to set the identifier so Swift does not whine about it.\n\n![ios-stocks-identifier-default](//images.ctfassets.net/1es3ne0caaid/6G5pxC76us4IWKugGOKUUc/aa262d59135adedd281a2931dd8df26f/ios-stocks-identifier-default.png)\n\nNext, open the `StocksTableViewController` class and let's start adding logic to it. Update the class as seen below:\n\n``` swift\n    // [...]\n    \n    class StocksTableViewController: UITableViewController {\n        var stocks: [Stock] = []\n        \n        var pusher: Pusher!\n        let pushNotifications = PushNotifications.shared\n        let notificationSettings = STNotificationSettings.shared\n        \n        override func viewDidLoad() {\n            super.viewDidLoad()\n        }\n        \n        override func numberOfSections(in tableView: UITableView) -\u003e Int {\n            return 1\n        }\n    \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return stocks.count\n        }\n        \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            let cell = tableView.dequeueReusableCell(withIdentifier: \"stock\", for: indexPath) as! StockCell\n            cell.stock = stocks[indexPath.row]\n            return cell\n        }\n    }\n```\n\nAbove we have a few properties we have defined:\n\n- `stocks` - this holds an array of `Stock` items. This is the data that will be displayed on each table cell. The `Stock` is a model we have not created but will later on.\n- `pusher` - this holds the `PusherSwift` library instance. We will use it to connect to Pusher and update the cells in realtime.\n- `pushNotifications` - this holds a singleton of the `PushNotifications` library. We will use this to subscribe and unsubscribe from [interests](https://docs.pusher.com/beams/concepts/interests).\n- `notificationSettings` - this holds a singleton of the `STNotificationSettings` class. We will use this to get the setting for each stock when necessary.\n\nThe methods we have defined above are standard with iOS development and should not need explanation. \n\nHowever, in the `tableView(_:cellForRowAt:)` method, we do something a little different. We get an instance of `StockCell`, which we have not created, and then assign a `Stock` item to the cell. Later on, we will see how we can use the `didSet` [property observer](https://medium.com/the-andela-way/property-observers-didset-and-willset-in-swift-4-c3730f26b1e9) to neatly populate the cell.\n\nIn the same class, add the following methods:\n\n``` swift\n    // [...]\n    \n    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n        let cell = tableView.cellForRow(at: indexPath) as! StockCell\n        if let stock = cell.stock {\n            showNotificationSettingAlert(for: stock)\n        }\n    }\n    \n    private func showNotificationSettingAlert(for stock: Stock) {\n        let enabled = notificationSettings.enabled(for: stock.name)\n        let title = \"Notification settings\"\n        let message = \"Change the notification settings for this stock. What would you like to do?\"\n        \n        let alert = UIAlertController(title: title, message: message, preferredStyle: .actionSheet)\n        \n        let onTitle = enabled ? \"Keep on\" : \"Turn on notifications\"\n        alert.addAction(UIAlertAction(title: onTitle, style: .default) { [unowned self] action in\n            guard enabled == false else { return }\n            self.notificationSettings.save(stock: stock.name, enabled: true)\n            \n            let feedback = \"Notfications turned on for \\(stock.name)\"\n            StatusBarNotificationBanner(title: feedback, style: .success).show()\n    \n            try? self.pushNotifications.subscribe(interest: stock.name.uppercased())\n        })\n        \n        let offTitle = enabled ? \"Turn off notifications\" : \"Leave off\"\n        let offStyle: UIAlertActionStyle = enabled ? .destructive : .cancel\n        alert.addAction(UIAlertAction(title: offTitle, style: offStyle) { [unowned self] action in\n            guard enabled else { return }\n            self.notificationSettings.save(stock: stock.name, enabled: false)\n            \n            let feedback = \"Notfications turned off for \\(stock.name)\"\n            StatusBarNotificationBanner(title: feedback, style: .success).show()\n            \n            try? self.pushNotifications.unsubscribe(interest: stock.name.uppercased())\n        })\n        \n        present(alert, animated: true, completion: nil)\n    }\n    \n    // [...]\n```\n\nAbove, we added two new methods:\n\n\n- `tableView(_:didSelectRowAt:)` - this is a default table view controller method that is fired when a row is selected in the table. In this method, we get the row that was tapped, and then show an alert that we can use to configure the push notification setting for that stock.\n- `showNotificationSettingAlert` - this is invoked from the method above. It contains all the actual logic required to display the notification settings alert. The alert will look like this when the application is ready:\n\n![ios-stocks-alert-demo](//images.ctfassets.net/1es3ne0caaid/27JECNw00wuUqMo6m4eKiE/529b48f741ee6992a4db70f5f45a04b4/ios-stocks-alert-demo.gif)\n\nNext, let’s update the `viewDidLoad()` method. Replace the `viewDidLoad()` method with the following code:\n\n``` swift\n    // [...]\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        fetchStockPrices()\n        \n        tableView.separatorInset.left = 0\n        tableView.backgroundColor = UIColor.black\n        \n        let customCell = UINib(nibName: \"StockCell\", bundle: nil)\n        tableView.register(customCell, forCellReuseIdentifier: \"stock\")\n        \n        pusher = Pusher(\n            key: AppConstants.PUSHER_APP_KEY,\n            options: PusherClientOptions(host: .cluster(AppConstants.PUSHER_APP_CLUSTER))\n        )\n        \n        let channel = pusher.subscribe(\"stocks\")\n        let _ = channel.bind(eventName: \"update\") { [unowned self] data in\n            if let data = data as? [[String: AnyObject]] {\n                if let encoded = try? JSONSerialization.data(withJSONObject: data, options: .prettyPrinted) {\n                    if let stocks = try? JSONDecoder().decode([Stock].self, from: encoded) {\n                        self.stocks = stocks\n                        self.tableView.reloadData()\n                    }\n                }\n            }\n        }\n        \n        pusher.connect()\n    }\n    \n    // [...]\n```\n\nAbove, we do a couple of things. First, we call the `fetchStockPrices()` method, which we will define later, to fetch all the stock prices from a backend API. Then we changed the background color of the table view to black. \n\nWe registered the non-existent custom cell, `StockCell`, which we referenced earlier in the article. We finally used the `pusher` instance to connect to a Pusher channel, `stock`, and also bind to the `update`  event on that channel. When the event is fired, we decode the data into the `stocks` property using Codable and reload the table to show the new changes.\n\n**Related:** [**Swift 4 decoding JSON using Codable**](https://blog.pusher.com/swift-4-decoding-json-codable/)\n\nBelow the `showNotificationSettingAlert(for:)` method in the same class, add the following method:\n\n``` swift\n    // [...]\n    \n    private func fetchStockPrices() {\n        Alamofire.request(AppConstants.ENDPOINT + \"/stocks\")\n            .validate()\n            .responseJSON { [unowned self] resp in\n                guard let data = resp.data, resp.result.isSuccess else {\n                    let msg = \"Error fetching prices\"\n                    return StatusBarNotificationBanner(title: msg, style: .danger).show()\n                }\n                \n                if let stocks = try? JSONDecoder().decode([Stock].self, from: data) {\n                    self.stocks = stocks\n                    self.tableView.reloadData()\n                }\n            }\n    }\n    \n    // [...]\n```\n\nThe method above was invoked in the `viewDidLoad()` method above. It fetches all the stocks from the API using the Alamofire library and then decodes the response to the `stocks` property using Codable. After this, the table view is reloaded to show the updated stocks data.\n\nThat’s all for this class. \n\nWe referenced a few non-existent classes in the `StocksTableViewController` though, let’s create them.\n\n### Creating supporting classes\n\nCreate a new `AppConstants` Swift file and paste the following code:\n\n``` swift\n    import Foundation\n    \n    struct AppConstants {\n        static let ENDPOINT = \"http://127.0.0.1:5000\" // Or use your ngrok HTTPS URL\n        static let PUSHER_APP_KEY = \"PASTE_PUSHER_APP_KEY_HERE\"\n        static let PUSHER_APP_CLUSTER = \"PASTE_PUSHER_APP_CLUSTER_HERE\"\n        static let BEAMS_INSTANCE_ID = \"PASTE_PUSHER_BEAMS_INSTANCE_ID_HERE\"\n    }\n```\n\nThe struct above serves as our configuration file. It allows us to define one true source of configuration values that we need for the application. At this point, you should create your [Pusher Channels](https://dashboard.pusher.com) and [Pusher Beams](https://dash.pusher.com) application if you haven’t already and paste the credentials above.\n\nNext, let’s define the `Stock` model. Create a new `Stock` Swift file and paste the following code:\n\n``` swift\n    import Foundation\n    \n    struct Stock: Codable {\n        let name: String\n        let price: Float\n        let percentage: String\n    }\n```\n\nAbove we have our `Stock` model which extends the Codable protocol. You can read more about it Codable [here](https://blog.pusher.com/swift-4-decoding-json-codable/).\n\n### Creating our custom cell\n\nWe referenced the `StockCell` several times above, so let’s create our custom cell now. We are creating this separately so it is easy to manage and everything is modular.\n\nFirst, create a new **Empty** view in Xcode as seen below:\n\n![ios-stocks-empty-view](//images.ctfassets.net/1es3ne0caaid/6DGSWQS7vi888q8sSGkww2/c49f48159ec3a4321def1d9e5e98bc9c/ios-stocks-empty-view.png)\n\nNext, drag a new table view cell into the empty canvas. We will be using this as our custom cell. Next, create a new Swift file named `StockCell` and paste the following code into it:\n\n``` swift\n    import UIKit\n    \n    class StockCell: UITableViewCell {\n    \n        var stock: Stock? {\n            didSet {\n                if let stock = stock {\n                    stockName.text = stock.name\n                    stockPrice.text = \"\\(stock.price)\"\n                    stockPercentageChange.text = \"\\(stock.percentage)\"\n                    percentageWrapper.backgroundColor = stock.percentage.first == \"+\"\n                        ? UIColor.green.withAlphaComponent(0.7)\n                        : UIColor.red\n                }\n            }\n        }\n        \n        @IBOutlet private weak var stockName: UILabel!\n        @IBOutlet private weak var stockPrice: UILabel!\n        @IBOutlet private weak var percentageWrapper: UIView!\n        @IBOutlet private weak var stockPercentageChange: UILabel!\n        \n        override func awakeFromNib() {\n            super.awakeFromNib()\n            percentageWrapper.layer.cornerRadius = 5\n        }\n    }\n```\n\nIn the cell class above, we have the `stock` property which holds a `Stock` model. The property has the `didSet` [property observer](https://medium.com/the-andela-way/property-observers-didset-and-willset-in-swift-4-c3730f26b1e9). So anytime the `stock` property is set, the code in the observer is run. In the observer, we set the private `@IBOutlet` properties. \n\nThis makes our code neat and organized because the `StockTableViewController` does not have to care about how the `stock` is handled, it just sets the `Stock` model to the `StockCell` and the cell handles the rest.\n\nWe have an `awakeFromNib()` method which is called when the cell is created. We use this to set a corner radius to the view holding the percentage change text.\n\nNext, open the `StockCell.xib` view, and set the **custom class** of the view to `StockCell`. Then design the cell as seen below:\n\n![ios-stocks-stockcell](//images.ctfassets.net/1es3ne0caaid/5gWw79b0HuYWem0GsoEMWG/3b1f763d173196e8349652a3d56c3f5e/ios-stocks-stockcell.png)\n\nWe have used constraints to make sure each item stays in place. You can decide to do the same if you wish.\n\nWhen you are done designing, connect the labels and views to your `StockCell` class using the **Assistant Editor**. This will establish the link between the items in the view and the `StockCell`'s `@IBOutlet`s.\n\n![ios-stocks-link-stockcell](//images.ctfassets.net/1es3ne0caaid/3uiTevTlcQa64A6sWKQug8/042265249736981fb7cb8cf7bf121012/ios-stocks-link-stockcell.png)\n\n\n### Updating the AppDelegate and turning on push notifications\n\nOpen the `AppDelegate` file and replace the contents with the following:\n\n``` swift\n    import UIKit\n    import PushNotifications\n    \n    @UIApplicationMain\n    class AppDelegate: UIResponder, UIApplicationDelegate {\n        var window: UIWindow?\n        let pushNotifications = PushNotifications.shared\n    \n        func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -\u003e Bool {\n            pushNotifications.start(instanceId: AppConstants.BEAMS_INSTANCE_ID)\n            pushNotifications.registerForRemoteNotifications()\n            return true\n        }\n        \n        func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n            pushNotifications.registerDeviceToken(deviceToken)\n        }\n    }\n```\n\nIn the `application(_:didFinishLaunchingWithOptions:)` method, we start the `PushNotifications` library and then we register the device for remote notifications. In the `application(_:didRegisterForRemoteNotificationsWithDeviceToken:)` method, we register the device token with Pusher Beams.\n\nNext, turn on the **Push Notification** capability for our application as seen below:\n\n![ios-stocks-enable-push-notifications](//images.ctfassets.net/1es3ne0caaid/9MNOUcCNWw8mMmCwAwyeA/b030fbae83c929289c2de367b754a07b/ios-stocks-enable-push-notifications.png)\n\nThis will add a `Stocks.entitlement` file in your project root.\n\nOne last thing we need to do before we are done with the iOS application is allowing the application load data from arbitrary URLs. By default, iOS does not allow this, and it should not. However, since we are going to be testing locally, we need this turned on temporarily. Open the `info.plist` file and update it as seen below:\n\n![ios-stocks-enable-app-transport](//images.ctfassets.net/1es3ne0caaid/61AnDSwfleaswuGGcGCuEI/1d19d8a391787c846841c2815b2ae656/ios-stocks-enable-app-transport.png)\n\nNow, our app is ready, but we still need to create the backend in order for it to work. Let’s do just that.\n\n\n## Building the backend API\n\nOur API will be built using Node.js. The backend will be responsible for providing the available stocks and also sending push notifications when there are changes. It will also push changes to Pusher Channels when there are changes in the stock price. We will be simulating the stock prices for instant results, but you can choose to use a live API.\n\nCreate a new directory for your backend application. Inside this project directory, create a new `package.json` file and paste the following code:\n\n``` json\n    {\n      \"name\": \"webapi\",\n      \"version\": \"1.0.0\",\n      \"main\": \"index.js\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.18.3\",\n        \"express\": \"^4.16.3\",\n        \"pusher\": \"^2.1.3\",\n        \"@pusher/push-notifications-server\": \"1.0.0\"\n      }\n    }\n```\n\nNext, open a terminal window, `cd` to the application directory and run the command below:\n\n```\n    $ npm install\n```\n\nThis will install the dependencies in the `package.json` file. Next, create a new `config.js` file, and paste the following code:\n\n``` javascript\n    module.exports = {\n      appId: 'PASTE_PUSHER_CHANNELS_APPID',\n      key: 'PASTE_PUSHER_CHANNELS_KEY',\n      secret: 'PASTE_PUSHER_CHANNELS_SECRET',\n      cluster: 'PASTE_PUSHER_CHANNELS_CLUSTER',\n      secretKey: 'PASTE_PUSHER_BEAMS_SECRET',\n      instanceId: 'PASTE_PUSHER_BEAMS_INSTANCEID'\n    };\n```\n\nAbove, we have the configuration values for our Pusher instances. Replace the placeholders above with the keys from your Pusher dashboard.\n\nFinally, create a new file, `index.js` and paste the following code:\n\n``` javascript\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const path = require('path');\n    const Pusher = require('pusher');\n    const PushNotifications = require('@pusher/push-notifications-server');\n    \n    const app = express();\n    const pusher = new Pusher(require('./config.js'));\n    const pushNotifications = new PushNotifications(require('./config.js'));\n    \n    function generateRandomFloat(min, max) {\n      return parseFloat((Math.random() * (max - min) + min).toFixed(2));\n    }\n    \n    function getPercentageString(percentage) {\n      let operator = percentage \u003c 0 ? '' : '+';\n      return `${operator}${percentage}%`;\n    }\n    \n    function loadStockDataFor(stock) {\n      return {\n        name: stock,\n        price: generateRandomFloat(0, 1000),\n        percentage: getPercentageString(generateRandomFloat(-10, 10))\n      };\n    }\n    \n    app.get('/stocks', (req, res) =\u003e {\n      let stocks = [\n        loadStockDataFor('AAPL'),\n        loadStockDataFor('GOOG'),\n        loadStockDataFor('AMZN'),\n        loadStockDataFor('MSFT'),\n        loadStockDataFor('NFLX'),\n        loadStockDataFor('TSLA')\n      ];\n      \n      stocks.forEach(stock =\u003e {\n        let name = stock.name;\n        let percentage = stock.percentage.substr(1);\n        let verb = stock.percentage.charAt(0) === '+' ? 'up' : 'down';\n    \n        pushNotifications.publish([stock.name], {\n          apns: {\n            aps: {\n              alert: {\n                title: `Stock price change: \"${name}\"`,\n                body: `The stock price of \"${name}\" has gone ${verb} by ${percentage}.`\n              }\n            }\n          }\n        });\n      });\n      \n      pusher.trigger('stocks', 'update', stocks);\n    \n      res.json(stocks);\n    });\n    \n    app.listen(5000, () =\u003e console.log('Server is running'));\n```\n\nAbove, we have a simple Express application. We have three helper functions:\n\n\n- `generateRandomFloat` - generates a random float between two numbers.\n- `getPercentageString` - uses a passed number to generate a string that will be shown on the table cell, for example, +8.0%. \n- `loadStockDataFor` - loads random stock data for a stock passed to it.\n\nAfter the helpers, we have the `/stocks` route. In here we generate a list of stocks, and for each stock, we send a push notification about the change in price. The stocks name serves as the interest for each stock. This means that subscribing to the AAPL interest, for instance, will subscribe to receiving push notifications for the AAPL stock.\n\nNext, we trigger an event, `update`, on the `stocks` channel, so all other devices can pick up the recent changes. Lastly, we return the generated list of stocks and we add the code that starts the server on port 5000.\n\nTo get the server started, run the following command on your terminal:\n\n```\n    $ node index\n```\n\n![ios-stocks-node](//images.ctfassets.net/1es3ne0caaid/775RfIfVHqoMg88wgKYcqG/0a0871547d6c395efa9950916d08d22f/ios-stocks-node.png)\n\n## Testing the application\n\nNow that we have built the backend and started the Node.js server, you can now run the iOS application. Your stocks will be displayed on the screen. However, if you want to test push notifications, you will need a real iOS device, and you will need to follow the following instructions.\n\nFirst, you will need to install [ngrok](https://ngrok.com/). This tool is used to expose local running web servers to the internet. Follow [the instructions](https://ngrok.com/download) on their website to download and install ngrok.\n\nOnce you have it installed, run the following command in another terminal window:\n\n```\n    $ ngrok http 8000\n```\n\n![ios-stocks-ngrok](//images.ctfassets.net/1es3ne0caaid/5bh8fTsXxuOQgyIgkCUsm0/87caf9152990a1c6cbc56288122fb6f5/ios-stocks-ngrok.png)\n\n\u003e Make sure your Node.js server is still running before executing the command above.\n\nNow we have a **Forwarding** URL we can use in our application. Copy the HTTPS forwarding URL and replace the `ENDPOINT` value in `AppConstants.swift` with the URL.\n\nNow, run the application on your device. Once it has loaded, tap on a stock and turn on notification for that stock then minimize the application and visit http://localhost:5000/stocks on your web browser. This will simulate a change in the stock prices and you should get a push notification for the stock you subscribed to.\n\n![ios-stocks-demo](//images.ctfassets.net/1es3ne0caaid/4oR4dRIkTCEMEK2iOMcoMQ/c7f74457e5e4529929a84f960ef0faaf/ios-stocks-demo.gif)\n\n\n## Conclusion\n\nIn this article, we have been able to create a stocks application with push notification using Pusher Channels and Pusher Beams.\n\nThe source code to the entire application is available on [GitHub](https://github.com/neoighodaro-articles/stocks-app-ios). ","metaTitle":"Create a stocks application with push notifications for iOS","metaDescription":"Use Swift and Node.js to build a realtime stock price tracker. The app features live updates and push notifications."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6uyY1kfn9KQuqMOUwsyk2E","type":"Entry","createdAt":"2018-11-13T19:52:40.868Z","updatedAt":"2019-01-02T15:42:09.890Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app in Flask and Vue with sentiment analysis  - Part 3: Live chat with sentiment analysis","url":"chat-flask-vue-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"38Gip5IBCgiiy4AYeeyyqG","type":"Entry","createdAt":"2018-03-04T19:48:48.360Z","updatedAt":"2018-03-04T19:48:48.360Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Gideon Onwuka","url":"gideon-onwuka","email":"dongidomed@gmail.com","twitter":"https://twitter.com/gideon_onwuka","github":"https://github.com/dongido001","guestWriter":true}}],"projectRepo":"https://github.com/dongido001/pusher-chat-sentiment-analysis/tree/part-3","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-09-05","description":"This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each other in realtime, see when other users are online, and be notified of new messages. In part three, implement live chat and sentiment analysis.","prerequisite":"You will need Node 8.9+ and Python 3.6+ installed on your machine.","content":"In this third tutorial, we will be implementing live chat and sentiment analysis.\n\nIf you haven’t followed the previous parts, you can catch it up here:\n\n- [Part one - Setting up the project](https://pusher.com/tutorials/chat-flask-vue-part-1)\n- [Part two - Create the chat interface, database design, login and registration endpoint](https://pusher.com/tutorials/chat-flask-vue-part-2)\n\n## Chatting over channels\n\n[Pusher Channels](https://pusher.com/channels) provides us with realtime functionalities. It has a publish/subscribe model where communication happens across channels. There are different types of channel, which we can subscribe to - [public channel](https://pusher.com/docs/client_api_guide/client_public_channels), [private channel,](https://pusher.com/docs/client_api_guide/client_private_channels) [presence channel](https://pusher.com/docs/client_api_guide/client_presence_channels) and the [encrypted channel](https://pusher.com/docs/client_api_guide/client_encrypted_channels).  \n\nFor our app, we will make use of the private channel since the chat messages need to be only accessible by the two users involved. This way we can authenticate a channels’ subscription to make sure users subscribing to it are actually authorized to do so. When naming your private channel, it needs to have a prefix of “private-”.\n\n### The flow\n\nOnce a user logs in, we'll redirect the user to the chat page. Then we subscribe this user to a private channel - `private-notification-\u003cthe_user_id\u003e`, where \u003cthe_user_id\u003e is the actual ID of the logged in user. This channel will be used to send notifications to the user. So that means every logged in user will have a private notification channel where we can notify them anytime we want to.  \n\nAfter subscribing to the notifications channel (“private-notification-\u003cthe_user_id\u003e”), we will start to listen for an event we will name `new_chat`. We'll trigger this event once a user clicks on another user they want to chat with. Also, we'll send along data that looks like below when triggering this event:\n\n```\n    {\n      from_user, // ID of the user initiating the chat\n      to_user, // ID of the other user\n      from_user_notification_channel,// notificaction channel for the user intiating the chat\n      to_user_notification_channel, // notificaction channel of the other user\n      channel_name, // The channel name where both can chat\n    }\n```\n\nIn the data above, we have:\n\n\n- `from_user` — The user that triggered the event (the user starting the conversation).\n- `to_user` — The other user.\n- `from_user_notification_channel` — Notification channel for the user initiating the chat (for example private-notification-1).\n- `to_user_notification_channel` — Notification channel for the other user (for example private-notification-2).\n- `channel_name` — The channel where both can exchange messages.\n\nThe notification channels for users is unique since we are making use of their IDs. \n\nHow do we generate the `channel_name`?\n\nWe need a way to generate a channel name for the two users since they need to be on the same channel to chat. Also, the name should not be re-used by other users. To do this we’ll use a simple convention to name the channel - \"private-chat_\u003cfrom_user\u003e_\u003cto_user\u003e\" (for example \"private-chat_1_2\"). Once we get the channel we’ll store it in the channels table. So subsequently, before we generate a new channel name, we’ll query the database to check if there is an already generated channel for the users and use that instead.\n\nAfter getting the channel_name, we’ll notify the other user (`to_user_notification_channel`) by triggering the `new_chat` event.\n\nOnce a user receives the `new_chat` event, we’ll subscribe that user to the channel name we got from the event and then start to listen for another event we’ll name `new_message` on the channel we just subscribed to. The `new_message` event will be triggered when a user types and submits a message.\n\nThis way, we’ll be able to subscribe users to channels dynamically so they can receive messages from any number of users at a time. Let’s go ahead and write the code.\n\n## Coding the Server\n\nFirst, initialize Pusher’s Python library by adding the following code to the `api/app.py` file right after the `app = Flask(__name__)` line of code:\n\n``` python\n    # api/app.py\n    \n    # [...]\n    \n    pusher = pusher.Pusher(\n        app_id=os.getenv('PUSHER_APP_ID'),\n        key=os.getenv('PUSHER_KEY'),\n        secret=os.getenv('PUSHER_SECRET'),\n        cluster=os.getenv('PUSHER_CLUSTER'),\n        ssl=True)\n    \n    # [...]\n```\n\nWe already have our login and register endpoint ready from part two. We still need to create several endpoints:\n\n\n- `/api/request_chat` we will use this endpoint to generate a channel name where both users can communicate. \n- `/api/pusher/auth` the endpoint for authenticating Pusher Channels subscription\n- `/api/send_message` the endpoint to send message across users.\n- `/api/users` endpoint for getting all users from the database.\n- `/api/get_message/\u003cchannel_id\u003e` we’ll use this endpoint to get all messages in a particular channel.\n\n### Request chat\n\nWe’ll make a request to the `/api/request_chat` endpoint to generate a channel name when users want to chat.\n\nRecall, every user on our chat will have their private channel. To keep things simple, we used \"private-notification_user_\u003cuser_id\u003e\" to name the channel. Where \u003cuser_id\u003e is the ID of that user in the users table. This way every users will have a unique channel name we can use to notify them.\n\nWhen users want to chat, they need to be on the same channel. We need a way to generate a unique channel name for both of them to use. This endpoint will generate such channel as \"private-chat_\u003cfrom_user\u003e_\u003cto_user\u003e\", where from_user is the user ID of the user initiating the chat and to_user is the user ID of the other user. Once we generate the channel name, we will store it to our channels table. Now if the two users want to chat again, we don't need to generate a channel name again, we'll fetch the first generated channel name we stored in the database. \n\nAfter the first user generates the channel name, we’ll notify the other users on their private channel, sending them the channel name so they can subscribe to it. \n\nAdd the below code to `api/app.py` to create the endpoint:\n\n``` python\n    # api/app.py\n    [...]\n    @app.route('/api/request_chat', methods=[\"POST\"])\n    @jwt_required\n    def request_chat():\n        request_data = request.get_json()\n        from_user = request_data.get('from_user', '')\n        to_user = request_data.get('to_user', '')\n        to_user_channel = \"private-notification_user_%s\" %(to_user)\n        from_user_channel = \"private-notification_user_%s\" %(from_user)\n        \n        # check if there is a channel that already exists between this two user\n        channel = Channel.query.filter( Channel.from_user.in_([from_user, to_user]) ) \\\n                               .filter( Channel.to_user.in_([from_user, to_user]) ) \\\n                               .first()\n        if not channel:\n            # Generate a channel...\n            chat_channel = \"private-chat_%s_%s\" %(from_user, to_user)\n            \n            new_channel = Channel()\n            new_channel.from_user = from_user\n            new_channel.to_user = to_user\n            new_channel.name = chat_channel\n            db_session.add(new_channel)\n            db_session.commit()\n        else:\n            # Use the channel name stored on the database\n            chat_channel = channel.name\n               \n        data = {\n            \"from_user\": from_user,\n            \"to_user\": to_user,\n            \"from_user_notification_channel\": from_user_channel,\n            \"to_user_notification_channel\": to_user_channel,\n            \"channel_name\": chat_channel,\n        }\n        \n        # Trigger an event to the other user\n        pusher.trigger(to_user_channel, 'new_chat', data)\n        \n        return jsonify(data)\n    [...]\n```\n\nIn the preceding code:\n\n- First of all, we created a route named `/api/request_chat` where users can get a channel name where they can chat.\n- We also protected the route to check for JWT token using `@jwt_required`.\n- Next, we get the ID of the user initiating the chat and the ID of the other participating user.\n- Next, we check if there is already a chat channel created for the two users in the database. If the channel name already exists, we return the channel else we generate a new channel for the users then save it to the database.\n- Then using `pusher.trigger()`, we trigger an event named `new_chat` to the other user’s private channel.\n- Finally, we return a JSON object containing the details of the channel name created.\n\n### Authenticate Channel subscriptions\n\nSince we are using a private channel, we need to authenticate every user subscribing to the channel. We’ll make a request to the `/api/pusher/auth` endpoint to authenticate channels.\n\nAdd the below code to create the endpoint to authenticate channels in `api/app.py`.\n\n``` python\n    # api/app.py\n    [...]\n    @app.route(\"/api/pusher/auth\", methods=['POST'])\n    @jwt_required\n    def pusher_authentication():\n        channel_name = request.form.get('channel_name')\n        socket_id = request.form.get('socket_id')\n    \n        auth = pusher.authenticate(\n            channel=channel_name,\n            socket_id=socket_id\n        )\n        \n        return jsonify(auth)\n    [...]\n```\n\nPusher will make a request to this endpoint to authenticate channels, passing along the channel name and socket_id of the logged in user. Then, we call `pusher.authenticate()` to authenticate the channel.\n\n### Sending messages\n\nWhen a user sends a message, we’ll save the message to the database and notify the other user. We’ll make a request to the `/api/send_message` endpoint for sending messages.\n\nAdd the following code to `api/app.py`.\n\n``` python\n    # api/app.py\n    [...]\n    @app.route(\"/api/send_message\", methods=[\"POST\"])\n    @jwt_required\n    def send_message():\n        request_data = request.get_json()\n        from_user = request_data.get('from_user', '')\n        to_user = request_data.get('to_user', '')\n        message = request_data.get('message', '')\n        channel = request_data.get('channel')\n        \n        new_message = Message(message=message, channel_id=channel)\n        new_message.from_user = from_user\n        new_message.to_user = to_user\n        db_session.add(new_message)\n        db_session.commit()\n        \n        message = {\n            \"from_user\": from_user,\n            \"to_user\": to_user,\n            \"message\": message,\n            \"channel\": channel\n        }\n        \n        # Trigger an event to the other user\n        pusher.trigger(channel, 'new_message', message)\n        \n        return jsonify(message)\n    [...]\n```\n\n- We created a POST request route which expects some data to be sent along:\n  - `from_user` - The user sending the message.\n  - `to_user` - The other user on the chat receiving the message.\n  - `message` - The chat message.\n  - `channel` - The channel name where both of the users are subscribed to.\n- Next, we save the data to the database using the Message() class. \n- Then finally, we trigger an event named `new_message` to the channel name that will be sent from the request data and then return the information as JSON.\n\n### Get all users\n\nWe’ll make a request to the `/api/users` endpoint to get all users. Add the below code to `api/app.py`:\n\n``` python\n    # api/app.py\n    [...]\n    @app.route('/api/users')\n    @jwt_required\n    def users():\n        users = User.query.all()\n        return jsonify(\n            [{\"id\": user.id, \"userName\": user.username} for user in users]\n        ), 200\n    [...]\n```\n\n### Get messages from a channel\n\nWe’ll make a request to the `/api/get_message/\u003cchannel_id\u003e` endpoint to get all messages sent in a channel. Add the below code to `api/app.py`:\n\n``` python\n    # api/app.py\n    [...]\n    @app.route('/api/get_message/\u003cchannel_id\u003e')\n    @jwt_required\n    def user_messages(channel_id):\n        messages = Message.query.filter( Message.channel_id == channel_id ).all()\n    \n        return jsonify([\n            {\n                \"id\": message.id,\n                \"message\": message.message, \n                \"to_user\": message.to_user,\n                \"channel_id\": message.channel_id,  \n                \"from_user\": message.from_user, \n            } \n            for message in messages\n        ])\n    [...]\n```\n\n## Coding the Client\n\n### Authenticate users\n\nOn our current view, we have the login form and the chat interface visible at the same time. Let’s make the login form only visible when the user is not logged in.\n\nTo fix it, add a [condition](https://it.vuejs.org/v2/guide/conditional.html) to check if the user is authenticated in `src/App.vue`:\n\n``` html\n    // ./src/App.vue\n    \n    [...]\n    \u003cLogin v-if=\"!authenticated\" v-on:authenticated=\"setAuthenticated\" /\u003e\n    \u003cb-container v-else\u003e\n    [...]\n```\n\nWe are using a `v-if` directive to check if `authenticated` is false so we can render the login component only. Since `authenticated` is not defined yet, it will resolve to undefined which is false, which is ok for now. \n\nLoad up the app on your browser to confirm that only the login form is visible.\n\nNext, update the `src/components/Login.vue` component with the below code to log users in:\n\n``` javascript\n    // ./src/components/Login.vue\n    \n    [...]\n    \u003cscript\u003e\n    export default {\n      name: \"Login\",\n      data() {\n        return {\n          username: \"\",\n          password: \"\",\n          proccessing: false,\n          message: \"\"\n        };\n      },\n      methods: {\n        login: function() {\n          this.loading = true;\n          this.axios\n            .post(\"/api/login\", {\n              username: this.username,\n              password: this.password\n            })\n            .then(response =\u003e {\n              if (response.data.status == \"success\") {\n                this.proccessing = false;\n                this.$emit(\"authenticated\", true, response.data.data);\n              } else {\n                this.message = \"Login Faild, try again\";\n              }\n            })\n            .catch(error =\u003e {\n              this.message = \"Login Faild, try again\";\n              this.proccessing = false;\n            });\n        }\n      }\n    };\n    \u003c/script\u003e\n    [...]\n```\n\nIn the preceding code:\n\n- We are making a POST request to `/api/login` to authenticate our users.\n- If the login was successful, we’ll emit an event named `authenticated` so we can act on it in the `src/App.vue` file. We also passed some data in the event:\n  - true - to indicate the login was successful\n  - response.data.data - contains details of the logged in user\n  \n\nNext, add some [state](https://vuejs.org/v2/guide/state-management.html) of the `src/App.vue` file in the `\u003cscript\u003e` section:\n\n``` javascript\n    // ./src/App.vue\n    \n    [...] \n      data: function() {\n        return {\n          messages: {},\n          users: [],\n          active_chat_id: null,\n          active_chat_index: null,\n          logged_user_id: null,\n          logged_user_username: null,\n          current_chat_channel: null,\n          authenticated: false\n        };\n      },\n    [...]\n```\n\nSo that the entire `\u003cscript\u003e` section looks like below:\n\n``` javascript\n    // ./App.vue\n    \n    import MessageInput from \"./components/MessageInput.vue\";\n    import Messages from \"./components/Messages.vue\";\n    import NavBar from \"./components/NavBar.vue\";\n    import Login from \"./components/Login.vue\";\n    import Users from \"./components/Users.vue\";\n    import Pusher from \"pusher-js\";\n    \n    let pusher;\n    \n    export default {\n      name: \"app\",\n      components: {\n        MessageInput,\n        NavBar,\n        Messages,\n        Users,\n        Login\n      },\n      data: function() {\n        return {\n          authenticated: false,\n          messages: {},\n          users: [],\n          active_chat_id: null,\n          active_chat_index: null,\n          logged_user_id: null,\n          logged_user_username: null,\n          current_chat_channel: null\n        };\n      },\n      methods: {},\n    };\n```\n\nWe defined some default states of data which we will use. For example, we’ll use the `authenticated: false` state to check if a user is authenticated or not.\n\nRecall that in the Login component, we emitted an event when a user logs in successfully. Now we need to listen to that event on the `src/App.vue` component so as to update the users states.\n\nAdd a function to set authenticated users information to `src/App.vue` in the methods block:\n\n``` javascript\n    // ./src/App.vue\n    \n    [...]\n      data: function() {\n        return {\n          authenticated: false,\n          messages: {},\n          users: [],\n          active_chat_id: null,\n          active_chat_index: null,\n          logged_user_id: null,\n          logged_user_username: null,\n          current_chat_channel: null\n        };\n      },\n      methods: {\n        async setAuthenticated(login_status, user_data) {\n          \n          // Update the states\n          this.logged_user_id = user_data.id;\n          this.logged_user_username = user_data.username;\n          this.authenticated = login_status;\n          this.token = user_data.token;\n          \n          // Initialize Pusher JavaScript library\n          pusher = new Pusher(process.env.VUE_APP_PUSHER_KEY, {\n              cluster: process.env.VUE_APP_PUSHER_CLUSTER,\n              authEndpoint: \"/api/pusher/auth\",\n              auth: {\n                headers: {\n                  Authorization: \"Bearer \" + this.token\n                }\n              }\n          });\n          \n          // Get all the users from the server\n          const users = await this.axios.get(\"/api/users\", {\n            headers: { Authorization: \"Bearer \" + this.token }\n          });\n          \n          // Get all users excluding the current logged user\n          this.users = users.data.filter(\n            user =\u003e user.userName != user_data.username\n          );\n    \n        },\n      },\n    };\n    [...]\n```\n\nIn the code above:\n\n- We created a new function named `setAuthenticated` which accepts the information we passed along when emitting the `authenticated` event in the Login.vue file.\n- After updating the component state with the logged in user information, we made a request to `/api/users` to get all registered users.\n- Then we initialize Pusher JavaScript library \n- Finally, we remove the current log users from the users list we got and then update the users state.\n\nFinally, pass down the users we fetched to the `Users.vue` component. Update the Users component in `src/App.vue`:\n\n``` html\n    // ./src/App.vue\n    [...]\n    \u003cUsers :users=\"users\" v-on:chat=\"chat\" /\u003e\n    [...]\n```\n\nHere we passed the users list down to the `Users.vue` component so we can render them. Also, using the v-on directive we listen for an event `chat` which will be triggered from `Users.vue` whenever a user is clicked to start up a chat. \n\n### Subscribe the user to a channel\n\nAdd the below code to the `setAuthenticated` function in `src/App.vue` to subscribe the user to a channel when they are logged in:\n\n``` javascript\n    // ./src/App.vue\n    \n    [...]\n      methods: {\n        async setAuthenticated(login_status, user_data) {\n          [...]\n          var notifications = pusher.subscribe(\n            `private-notification_user_${this.logged_user_id}`\n          );\n          \n          notifications.bind(\"new_chat\", data =\u003e {\n            const isSubscribed = pusher.channel(data.channel_name);\n            if (!isSubscribed) {\n              const one_on_one_chat = pusher.subscribe(data.channel_name);\n              \n              this.$set(this.messages, data.channel_name, []);\n              \n              one_on_one_chat.bind(\"new_message\", data =\u003e {\n                // Check if the current chat channel is where the message is coming from\n                if (\n                  data.channel !== this.current_chat_channel \u0026\u0026\n                  data.from_user !== this.logged_user_id\n                ) {\n                  // Get the index of the user that sent the message\n                  const index = this.users.findIndex(\n                    user =\u003e user.id == data.from_user\n                  );\n                  // Set the has_new_message status of the user to true\n                  this.$set(this.users, index, {\n                    ...this.users[index],\n                    has_new_message: true\n                  });\n                }\n                  \n                this.messages[data.channel].push({\n                  message: data.message,\n                  from_user: data.from_user,\n                  to_user: data.to_user,\n                  channel: data.channel\n                });\n              });\n            }\n          });\n          \n        },\n      },\n    };\n    [...]\n```\n\n- First, we subscribe the user to their private channel using `var notifications = pusher.subscribe(…` once they log in.\n- Next, we bind that channel to an event we named `new_chat` so we can get a notification when a user is requesting for a new chat.\n- Then if there is any new chat request, we’ll subscribe that user to the channel sent along and also bind that channel to a new event named `new_message`.\n- Finally, if there is a message coming to the event - `new_message`, we append the message to the “messages” property in the data component. Also, if the user is not currently chatting on the channel where they received the message, we’ll notify them of the message.\n\n### Get all messages in a channel\n\nAdd a function to fetch all messages in a chat channel to `src/App.vue` in the methods block:\n\n``` javascript\n    // ./src/App.vue\n    [...]\n        getMessage: function(channel_name) {\n          this.axios\n            .get(`/api/get_message/${channel_name}`, {\n              headers: { Authorization: \"Bearer \" + this.token }\n            })\n            .then(response =\u003e {\n              this.$set(this.messages, channel_name, response.data);\n            });\n        },\n    [...]\n```\n\n### The chat function\n\nWe'll call the function when a user clicks on another user they want to chat with to prepare the chat channel.\n\nAdd the below code to the methods block of `src/App.vue`\n\n``` javascript\n    // ./src/App.vue\n    \n    [...]\n        chat: function(id) {\n          this.active_chat_id = id;\n          \n          // Get index of the current chatting user...\n          this.active_chat_index = this.users.findIndex(\n            user =\u003e user.id == this.active_chat_id\n          );\n          \n          // Set the has_new_message status of the user to true\n          this.$set(this.users, this.active_chat_index, {\n            ...this.users[this.active_chat_index],\n            has_new_message: false\n          });\n          \n          this.axios\n            .post(\n              \"/api/request_chat\",\n              {\n                from_user: this.logged_user_id,\n                to_user: this.active_chat_id\n              },\n              { headers: { Authorization: \"Bearer \" + this.token } }\n            )\n            .then(response =\u003e {\n              this.users[this.active_chat_index][\"channel_name\"] =\n                response.data.channel_name;\n                \n              this.current_chat_channel = response.data.channel_name;\n              \n              // Get messages on this channel\n              this.getMessage(response.data.channel_name);\n              \n              var isSubscribed = pusher.channel(response.data.channel_name);\n              \n              if (!isSubscribed) {\n                var channel = pusher.subscribe(response.data.channel_name);\n                \n                this.$set(this.messages, response.data.channel_name, []);\n                \n                channel.bind(\"new_message\", data =\u003e {\n                 //Check if the current chat channel is where the message is comming from\n                  if (\n                    data.channel !== this.current_chat_channel \u0026\u0026\n                    data.from_user !== this.logged_user_id\n                  ) {\n                    // Set the has_new_message status of the user to true\n                    this.$set(this.users, this.active_chat_index, {\n                      ...this.users[this.active_chat_index],\n                      has_new_message: true\n                    });\n                  }\n                  \n                  this.messages[response.data.channel_name].push({\n                    message: data.message,\n                    from_user: data.from_user,\n                    to_user: data.to_user,\n                    channel: data.channel\n                  });\n                });\n              }\n            })\n            .catch(function(error) {\n              console.log(error);\n            });\n        },\n    [...]\n```\n\n- We make a request to `/api/request_chat` to get the channel name for the chat session.\n- Next, we update the state of the `current_chat_channel` with the channel returned using:\n    `this.current_chat_channel = response.data.channel_name;`\n- Then we subscribe the user to the channel name returned and then bind the channel to an event we named `new_message`. Once we receive a new message, we add the message to the messages state.\n- Also, in the bound `new_message` event, we check if the message received is between the current chat channel, else we display an alert notifying the user that they have a new message from another user.\n\nWe are already passing the messages to the `Messages.vue` component so any new message will be rendered on the page dynamically. Take a look at the Messages component in `src/App.vue`:\n\n``` html\n    \u003cMessages \n      v-else \n      :active_chat=\"active_chat_id\" \n      :messages=\"messages[current_chat_channel]\"\n    /\u003e\n```\n\n## Sending messages\n\nNow add the function for sending messages to `src/App.vue`:\n\n``` javascript\n    // ./src/App.vue\n    [...]\n        send_message: function(message) {\n          this.axios.post(\n            \"/api/send_message\",\n            {\n              from_user: this.logged_user_id,\n              to_user: this.active_chat_id,\n              message: message,\n              channel: this.current_chat_channel\n            },\n            { headers: { Authorization: \"Bearer \" + this.token } }\n          );\n        },\n    [...]\n```\n\nWe’ll call this function whenever a user submits a message. \n\nTake a look at the `MessageInput.vue` component which is the component for sending messages. You will notice that after the user submits a message, we trigger an event named `send_message` passing along the message text.\n\nNow we will listen to the event and send the message to the server once we get the event. Update the `MessageInput` component in the `\u003ctemplate\u003e` section of `src/App.vue`:\n\n``` html\n    [...]\n    \u003cMessageInput v-on:send_message=\"send_message\" /\u003e\n    [...]\n```\n\nHere, we listen for the event using the `v-on` directive and then call the function we just added (send_message) once we get the event. \n\nTest out the chat by opening the app in two different tabs on your browser.\n\n## Get sentiments from messages\n\nTo get the sentiment from messages, we’ll use the [TextBlob](https://textblob.readthedocs.io/en/dev/) Python library which provides a simple API for common natural language processing (NLP).\n\n### Install TextBlob\n\nFrom your terminal, make sure you are in the `api` folder. Also, make sure your virtualenv is activated. Then execute the below function.\n\n```\n    # Install the library\n    $ pip install -U textblob\n    \n    # Download NLTK corpora\n    $ python -m textblob.download_corpora lite\n```\n\nThis will install TextBlob and download the necessary NLTK [corpora](https://textblob.readthedocs.io/en/dev/install.html) (trained models).\n\nImport TextBlob to `api/app.py`:\n\n``` python\n    from textblob import TextBlob\n```\n\nAdd a function to get the sentiment of a message to `api/app.py`\n\n``` python\n    # ./api/app.py\n    \n    def getSentiment(message):\n            text = TextBlob(message)\n            return {'polarity' : text.polarity }\n```\n\nThe sentiment property returns a tuple of the form (polarity, subjectivity) where polarity ranges from -1.0 to 1.0 and subjectivity ranges from 0.0 to 1.0. We will only use the polarity property.\n\nNext, include the sentiment on the return statement in the `user_messages` function in `api/app.py`:\n\n``` python\n    [...]\n        return jsonify([\n            {\n                \"id\": message.id,\n                \"message\": message.message,\n                \"to_user\": message.to_user,\n                \"channel_id\": message.channel_id,\n                \"from_user\": message.from_user,\n                \"sentiment\": getSentiment(message.message)\n            }\n            for message in messages\n        ])\n    [...]\n```\n\nAnd also update the data we trigger to Pusher in the `send_message` function in `api/app.py`:\n\n``` python\n    [...]\n        message = {\n            \"from_user\": from_user,\n            \"to_user\": to_user,\n            \"message\": message,\n            \"channel\": channel,\n            \"sentiment\": getSentiment(message)\n        }\n    [...]\n```\n\nNow we have the sentiment of text. Let’s display the related emoji beside messages in the view.\n\nNext update the code in `src/components/Messages.vue` to display the emoji sentiment:\n\n``` javascript\n    [...]\n    \u003ctemplate\u003e\n       \u003cdiv\u003e\n        \u003cdiv v-for=\"(message, id) in messages\" v-bind:key=\"id\"\u003e \n            \u003cdiv class=\"chat-message col-md-5\" \n              v-bind:class=\"[(message.from_user == active_chat) ? 'to-message' : 'from-message offset-md-7']\"\u003e\n              {{message.message}}\n              {{ getSentiment(message.sentiment.polarity) }}\n            \u003c/div\u003e \n        \u003c/div\u003e\n       \u003c/div\u003e\n    \u003c/template\u003e\n    \u003cscript\u003e\n    export default {\n      name: \"Messages\",\n      data() {\n        return {\n          happy: String.fromCodePoint(0x1f600),\n          neutral: String.fromCodePoint(0x1f610),\n          sad: String.fromCodePoint(0x1f61f)\n        };\n      },\n      methods: {\n        getSentiment(sentiment) {\n          if (sentiment \u003e 0.5) {\n            return this.happy;\n          } else if (sentiment \u003c 0.0) {\n            return this.sad;\n          } else {\n            return this.neutral;\n          }\n        }\n      },\n      props: {\n        messages: Array,\n        active_chat: Number\n      }\n    };\n    \u003c/script\u003e\n    [...]\n```\n\nHere, we defined the emotions for each sentiment score.\n\nThen finally update the bound event for `new_message` to include the sentiment data. Update  `src/App.vue` as below in the `setAuthenticated` function:\n\n``` javascript\n    [...]\n    channel.bind(\"new_message\", data =\u003e {\n      [...]\n      this.messages[data.channel].push({\n        message: data.message,\n        sentiment: data.sentiment,\n        from_user: data.from_user,\n        to_user: data.to_user,\n        channel: data.channel\n      });\n    });\n    [...]\n```\n\nAnd also on the bound event in `chat` function to include the sentiment data in `src/App.vue` file:\n\n``` javascript\n    [...]\n    one_on_one_chat.bind(\"new_message\", data =\u003e {\n      [...]\n      this.messages[response.data.channel_name].push({\n        message: data.message,\n        sentiment: data.sentiment,\n        from_user: data.from_user,\n        to_user: data.to_user,\n        channel: data.channel\n      });\n    });\n    [...]\n```\n\nAnd that’s it! congrats. If you test the app again, you will see the sentiments of each chat messages.\n\n![flask-vue-sentiment-demo-part-3](//images.ctfassets.net/1es3ne0caaid/3hdpldMAYoUkKWWyM6WE4O/99313fd2fc32234b505db9136b3e60c3/flask-vue-sentiment-demo-part-3.gif)\n\n\u003e **Note**: If you are having issue with displaying the emoji in your browsers, you might want to use the latest version of Chrome or Mozilla to display it.\n\n## Conclusion\n\nIn this tutorial of the series, we have successfully built a one-to-one private chat with sentiment analysis using Pusher Channels to add realtime functionality.\n\nYou can get the complete code on [GitHub](https://github.com/dongido001/pusher-chat-sentiment-analysis/tree/part-3).","metaTitle":"Build a chat app in Flask and Vue - Part 3","metaDescription":"This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each other in realtime, see when other users are online, and be notified of new messages. In part three, implement live chat and sentiment analysis."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"7wyCFxpsoEwUKO8uGqm4IC","type":"Entry","createdAt":"2018-09-05T19:16:08.892Z","updatedAt":"2018-09-05T19:16:08.892Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live photo feed using React and Cloudinary","url":"live-feed-react-cloudinary","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/ayoisaiah/realtime-photo-feed","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Od9rZziIoMG4yaQ4EAeok","type":"Entry","createdAt":"2018-02-13T11:31:10.435Z","updatedAt":"2018-02-26T12:31:10.730Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":16,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live UX","url":"live-ux","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}}],"reviewDate":"2018-09-05","description":"In this short tutorial, create a live photo feed using Node, React and Cloudinary. Upload and publish photos in realtime.","prerequisite":"You will need Node 6+ and npm installed on your machine. A basic knowledge of JavaScript (ES6) and React will be helpful.","content":"In this tutorial, we’ll go through how to build a photo feed with React and Cloudinary, while providing realtime updates to the feed using Pusher Channels. You can find the entire source code of the application in this [GitHub repository](https://github.com/ayoisaiah/realtime-photo-feed).\n\n## Prerequisites\n\nTo follow along, a basic knowledge of JavaScript (ES6) and React is required. You also need to have the following installed on your machine:\n\n- [Node.js](https://nodejs.org/en/) (v6 and above)\n- [npm](https://www.npmjs.com/)\n\n## Set up the server\n\nLet’s set up a simple Node server for the purpose of uploading images to Cloudinary and triggering realtime updates with Pusher.\n\nThe first step is to create a new empty directory and run `npm init -y` from within it. Next, install all the dependencies that we need for this project by running the command below:\n\n```\n    npm install express nedb cors body-parser connect-multiparty pusher cloudinary dotenv\n```\n\nWait for the installation to complete, then create a file named `server.js` in the root of your project directory and populate the file with the following contents:\n\n``` javascript\n    // server.js\n    \n    // import dependencies\n    require('dotenv').config({ path: 'variables.env' });\n    const express = require('express');\n    const multipart = require('connect-multiparty');\n    const bodyParser = require('body-parser');\n    const cloudinary = require('cloudinary');\n    const cors = require('cors');\n    const Datastore = require('nedb');\n    const Pusher = require('pusher');\n    \n    // Create an express app\n    const app = express();\n    // Create a database\n    const db = new Datastore();\n    \n    // Configure middlewares\n    app.use(cors());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use(bodyParser.json());\n    \n    // Setup multiparty\n    const multipartMiddleware = multipart();\n    \n    app.set('port', process.env.PORT || 5000);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running → PORT ${server.address().port}`);\n    });\n```\n\nHere, we’ve imported the dependencies into our entry file. Here’s an explanation of what they all do:\n\n\n- [express](https://expressjs.com): A minimal and flexible Node.js server.\n- [nedb](https://github.com/louischatriot/nedb): In memory database for Node.js.\n- [connect-multiparty](https://github.com/expressjs/connect-multiparty): Express middleware for parsing uploaded files.\n- [body-parser](https://github.com/expressjs/body-parser): Express middleware for parsing incoming request bodies.\n- [dotenv](https://www.npmjs.com/package/dotenv): Loads environmental variables from `.env` file into `process.env`.\n- [pusher](https://pusher.com/): Server SDK for Pusher Channels.\n- [cloudinary](http://cloudinary.com/): Cloudinary server SDK.\n\nCreate a `variables.env` file in the root of your project and add a `PORT` variable therein:\n\n```\n    // variables.env\n    \n    PORT:5000\n```\n\nHard-coding credentials in your code is a bad practice so we’ve set up `dotenv` to load the app’s credentials from `variables.env` and make them available on `process.env`.\n\n\n## Set up Pusher\n\nHead over to the Pusher website and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). Select **Channels apps** on the sidebar, and hit **Create Channels app** to create a new app. Once your app is created, retrieve your credentials from the API Keys tab, then add the following to your `variables.env` file:\n\n```\n    // variables.env\n    \n    PUSHER_APP_ID=\u003cyour app id\u003e\n    PUSHER_APP_KEY=\u003cyour app key\u003e\n    PUSHER_APP_SECRET=\u003cyour app secret\u003e\n    PUSHER_APP_CLUSTER=\u003cyour app cluster\u003e\n```\n\nNext, initialize the Pusher SDK within `server.js`:\n\n``` javascript\n    // server.js\n    ...\n    const db = new Datastore();\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true,\n    });\n    \n    ...\n```\n\n## Set up Cloudinary\n\nVisit the Cloudinary website and [sign up for a free account](https://cloudinary.com/signup). Once your account is confirmed, retrieve your credentials from the dashboard, then add the following to your `variables.env` file:\n\n![react-cloudinary-credentials](//images.ctfassets.net/1es3ne0caaid/1SHB7e0OMQQsyq686Go8Q6/a42812880e0dd610159c324b1fe56f51/react-cloudinary-credentials.png)\n\n```\n    // variables.env\n    \n    CLOUDINARY_CLOUD_NAME=\u003cyour cloud name\u003e\n    CLOUDINARY_API_KEY=\u003cyour api key\u003e\n    CLOUDINARY_API_SECRET=\u003cyour api secret\u003e\n```\n\nNext, initialize the Cloudinary SDK within `server.js` under the `pusher` variable:\n\n``` javascript\n    // server.js\n    \n    cloudinary.config({\n      cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n      api_key: process.env.CLOUDINARY_API_KEY,\n      api_secret: process.env.CLOUDINARY_API_SECRET,\n    });\n```\n\n## Create routes\n\nWe are going to create two routes for our application: the first one will serve all gallery images, while the second one handles the addition of a new image to the database.\n\nHere’s the one that handles sending all images to the client. Add this above the `port` variable:\n\n``` javascript\n    // server.js\n    \n    app.get('/', (req, res) =\u003e {\n      db.find({}, (err, data) =\u003e {\n        if (err) return res.status(500).send(err);\n        res.json(data);\n      });\n    });\n```\n\nWhen this endpoint is hit, a JSON representation of all images that exist in the database will be sent to the client, except if an error is encountered, in which case a 500 server error will be sent instead.\n\nNext, let’s add the route that adds new images sent from the client to the database.\n\n``` javascript\n    // server.js\n    \n    app.post('/upload', multipartMiddleware, (req, res) =\u003e {\n      // Upload image\n      cloudinary.v2.uploader.upload(req.files.image.path, {}, function(\n        error,\n        result\n      ) {\n        if (error) {\n          return res.status(500).send(error);\n        }\n        // Save image to database\n        db.insert(Object.assign({}, result, req.body), (err, newDoc) =\u003e {\n          if (err) {\n            return res.status(500).send(err);\n          }\n          //\n          pusher.trigger('gallery', 'upload', {\n            image: newDoc,\n          });\n          res.status(200).json(newDoc);\n        });\n      });\n    });\n```\n\nHere, the image is uploaded to Cloudinary and, on successful upload, a database entry is created for the image and a new `upload` event is emitted for the `gallery` channel along with the payload of the newly created item.\n\nThe code for the server is now complete. You can start it by running `node server.js` in your terminal.\n\n\n## Set up React app\n\nLet's bootstrap our project using the create-react-app which allows us to quickly get a React application up and running. Open a new terminal window, and run the following command to install `create-react-app` on your machine:\n\n```\n    npm install -g create-react-app\n```\n\nOnce the installation process is done, you can run the command below to setup your react application:\n\n```\n    create-react-app client\n```\n\nThis command will create a new folder called `client` in the root of your project directory, and install all the dependencies needed to build and run the React application.\n\nNext, `cd` into the newly created directory and install the other dependencies which we’ll be needing for our app’s frontend:\n\n```\n    npm install pusher-js axios react-spinkit\n```\n\n- [pusher-js](https://pusher.com): Client SDK for Pusher.\n- [axios](https://github.com/axios/axios): Promise based HTTP client for the browser and Node.\n- [react-spinkit](https://www.npmjs.com/package/react-spinkit): Loading indicator component.\n\nFinally, start the development server by running `yarn start` from within the root of the `client` directory.\n\n## Add the styles for the app\n\nWithin the `client` directory, locate `src/App.css` and change its contents to look like this:\n\n``` css\n    // src/App.css\n    \n    body {\n      font-family: 'Roboto', sans-serif;\n    }\n    \n    .App {\n      margin-top: 40px;\n    }\n    \n    .App-title {\n      text-align: center;\n    }\n    \n    img {\n      max-width: 100%;\n    }\n    \n    form {\n      text-align: center;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      font-size: 18px;\n    }\n    \n    .label {\n      display: block;\n      margin-bottom: 20px;\n      font-size: 20px;\n    }\n    \n    input[type=\"file\"] {\n      margin-bottom: 20px;\n    }\n    \n    button {\n      border: 1px solid #353b6e;\n      border-radius: 4px;\n      color: #f7f7f7;\n      cursor: pointer;\n      font-size: 18px;\n      padding: 10px 20px;\n      background-color: rebeccapurple;\n    }\n    \n    .loading-indicator {\n      display: flex;\n      justify-content: center;\n      margin-top: 30px;\n    }\n    \n    .gallery {\n      display: grid;\n      grid-template-columns: repeat(3, 330px);\n      grid-template-rows: 320px 320px 320px;\n      grid-gap: 20px;\n      width: 100%;\n      max-width: 1000px;\n      margin: 0 auto;\n      padding-top: 40px;\n    }\n    \n    .photo {\n      width: 100%;\n      height: 100%;\n      object-fit: cover;\n      background-color: #d5d5d5;\n      box-shadow: 0 2px 2px 0 rgba(0,0,0,.14),0 3px 1px -2px rgba(0,0,0,.2),0 1px 5px 0 rgba(0,0,0,.12);\n    }\n```\n\n## Application logic\n\nOpen up `src/App.js` and change its contents to look like this:\n\n``` javascript\n    // src/App.js\n    \n    import React, { Component } from 'react';\n    import axios from 'axios';\n    import Pusher from 'pusher-js';\n    import Spinner from 'react-spinkit';\n    import './App.css';\n    \n    class App extends Component {\n      constructor() {\n        super();\n        this.state = {\n          images: [],\n          selectedFile: null,\n          loading: false,\n        };\n      }\n    \n      componentDidMount() {\n        this.setState({\n          loading: true,\n        });\n    \n        axios.get('http://localhost:5000').then(({ data }) =\u003e {\n          this.setState({\n            images: [...data, ...this.state.images],\n            loading: false,\n          });\n        });\n    \n        const pusher = new Pusher('\u003cyour app key\u003e', {\n          cluster: '\u003cyour app cluster\u003e',\n          encrypted: true,\n        });\n    \n        const channel = pusher.subscribe('gallery');\n        channel.bind('upload', data =\u003e {\n          this.setState({\n            images: [data.image, ...this.state.images],\n          });\n        });\n      }\n    \n      fileChangedHandler = event =\u003e {\n        const file = event.target.files[0];\n        this.setState({ selectedFile: file });\n      };\n    \n      uploadImage = event =\u003e {\n        event.preventDefault();\n    \n        if (!this.state.selectedFile) return;\n    \n        this.setState({\n          loading: true,\n        });\n    \n        const formData = new FormData();\n        formData.append(\n          'image',\n          this.state.selectedFile,\n          this.state.selectedFile.name\n        );\n    \n        axios.post('http://localhost:5000/upload', formData).then(({ data }) =\u003e {\n          this.setState({\n            loading: false,\n          });\n        });\n      };\n    \n      render() {\n        const image = (url, index) =\u003e (\n          \u003cimg alt=\"\" className=\"photo\" key={`image-${index} }`} src={url} /\u003e\n        );\n    \n        const images = this.state.images.map((e, i) =\u003e image(e.secure_url, i));\n    \n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003ch1 className=\"App-title\"\u003eLive Photo Feed\u003c/h1\u003e\n    \n            \u003cform method=\"post\" onSubmit={this.uploadImage}\u003e\n              \u003clabel className=\"label\" htmlFor=\"gallery-image\"\u003e\n                Choose an image to upload\n              \u003c/label\u003e\n              \u003cinput\n                type=\"file\"\n                onChange={this.fileChangedHandler}\n                id=\"gallery-image\"\n                accept=\".jpg, .jpeg, .png\"\n              /\u003e\n              \u003cbutton type=\"submit\"\u003eUpload!\u003c/button\u003e\n            \u003c/form\u003e\n    \n            \u003cdiv className=\"loading-indicator\"\u003e\n              {this.state.loading ? \u003cSpinner name=\"spinner\" /\u003e : ''}\n            \u003c/div\u003e\n    \n            \u003cdiv className=\"gallery\"\u003e{images}\u003c/div\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default App;\n```\n\nI know that’s a lot of code to process in one go, so let me break it down a bit.\n\nThe `state` of our application is initialized with three values: `images` is an array that will contain all images in our photo feed, while `selectedFile` represents the currently selected file in the file input. `loading` is a Boolean  property that acts as a flag to indicate whether the loading component, `Spinner`, should be rendered on the page or not.\n\nWhen the user selects a new image, the `fileChangedHandler()` function is invoked, which causes `selectedFile` to point to the selected image. The **Upload** button triggers a form submission, causing `uploadImage()` to run. This function basically sends the image to the server and through an `axios` post request.\n\nIn the `componetDidMount()` lifecycle method, we try  to fetch all the images that exist in the database (if any) so that on page refresh, the feed is populated with existing images.\n\nThe Pusher client library provides a handy  `bind` function that allows us to latch on to events emitted by the server so that we can update the application state. You need to update the `pusher` variable with your app key and cluster before running the code. Here, we’re listening for the `upload` event on the `gallery` channel. Once the `upload` event is triggered, our application is updated with the new image as shown below:\n\n![react-cloudinary-demo](//images.ctfassets.net/1es3ne0caaid/4tWSUnHBt6OI64cOMAQQeC/e3ef4e5b1721a278c65d948956136e7b/react-cloudinary-demo.gif)\n\n## Conclusion\n\nYou have now learned how easy it is to create a live feed and update several clients with incoming updates in realtime with Pusher. \n\nThanks for reading! Remember that you can find the source code of this app in this [GitHub repository.](https://github.com/ayoisaiah/realtime-photo-feed)","metaTitle":"Build a live photo feed using React and Cloudinary","metaDescription":"Use Node, React and Cloudinary to create a live photo feed. Upload and publish photos in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1dAElRmwsyikCgyiGYIWyo","type":"Entry","createdAt":"2018-11-14T19:41:10.290Z","updatedAt":"2019-01-02T15:42:34.989Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app in Flask and Vue with sentiment analysis  - Part 4: Adding an online presence feature","url":"chat-flask-vue-part-4","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"38Gip5IBCgiiy4AYeeyyqG","type":"Entry","createdAt":"2018-03-04T19:48:48.360Z","updatedAt":"2018-03-04T19:48:48.360Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Gideon Onwuka","url":"gideon-onwuka","email":"dongidomed@gmail.com","twitter":"https://twitter.com/gideon_onwuka","github":"https://github.com/dongido001","guestWriter":true}}],"projectRepo":"https://github.com/dongido001/pusher-chat-sentiment-analysis/tree/part-4","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-09-04","description":"This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each other in realtime, see when other users are online, and be notified of new messages. In part four, add an online presence feature.","prerequisite":"You will need Node 8.9+ and Python 3.6+ installed on your machine.","content":"In this part, we’ll see how to add a “who’s online” feature. This feature will make our chat more lively. This way we know if the other participants are online so we know if we’ll be getting a reply soon. The code is available on [GitHub](https://github.com/dongido001/pusher-chat-sentiment-analysis/tree/part-4).\n\nYou can find the previous parts of the series here: \n[Part 1](https://pusher.com/tutorials/chat-flask-vue-part-1) \n[Part 2](https://pusher.com/tutorials/chat-flask-vue-part-2) \n[Part 3](https://pusher.com/tutorials/chat-flask-vue-part-3)\n\nIf you don't have the setup from previous parts, follow the below instructions to get it otherwise skip this.\n\n```\n    # Clone the repo\n    $ git clone https://github.com/dongido001/pusher-chat-sentiment-analysis.git -b part-3\n    \n    # Go to the project root folder\n    $ cd pusher-chat-sentiment-analysis\n    \n    # Install dependencies\n    $ npm install\n```\n\nUpdate the `.env` file in the project’s root folder with your correct Pusher App key:\n\n```\n    VUE_APP_PUSHER_KEY=\u003cPUSHER_APP_KEY\u003e\n    VUE_APP_PUSHER_CLUSTER=\u003cPUSHER_APP_CLUSTER\u003e\n```\n\nThen run the app:\n\n```\n    # Start vue app\n    $ npm run serve\n```\n\nThen from a new terminal execute the following:\n\n```\n    $ cd api\n    $ python -m venv env\n    $ pip install -r requirements.txt\n    $ source env/bin/activate\n```\n\nUpdate the `api/.env`  file with your correct Pusher API key:\n\n```\n    PUSHER_APP_ID=app_id\n    PUSHER_KEY=key\n    PUSHER_SECRET=secret\n    PUSHER_CLUSTER=cluster\n```\n \n```\n    $ flask run\n```\n\nNow you should have both apps running. Both apps should be running on a different port. Note the URL of the Vue.js app in your terminal because this is what you will use to access the chat application.\n\n## Presence channels\n\n[Presence channels](https://pusher.com/docs/client_api_guide/client_presence_channels) are similar to the private chat channel. It exposes an additional feature of an awareness of who is subscribed to a channel. This will enable us to easily implement “who’s online” functionality into our chat app. When naming a presence channel, it needs to have a prefix of “presence-”.\n\nThe flow is much related to the private channel. First, we will subscribe all users logging in to the app to a presence channel we’ll name “presence-chitchat”. Before they are subscribed, Pusher will make a request to our auth endpoint (which we have already) to authenticate the channel. \n\nAn important thing to note is that when setting up the authentication for presence channel, you must add a custom data to the authenticate function. The custom data is the information of the user you want to authenticate. The custom data will be passed back to your client’s app so we can use them.\n\n\n## Authenticating channel\n\nFirst, let’s update the endpoint so that it accommodates authentication for presence channels.\n\nWhen Pusher makes a request to this endpoint to authenticate the channel, it passes along the channel name and the connected user’s socket ID. \n\nRemember that our routes are protected with JWT. We are using the `@jwt_required` decorator to protect the route.  When Channels makes the request to the endpoint, it includes a JWT token in its request header. If the token is not valid, it results to a 403 HTTP error. Also, remember that we set the JWT token to be included in  the request header while we are initializing Pusher JavaScript client.\n\nUpdate the `pusher_authentication` function in `api/app.py` to include custom data:\n\n``` python\n    # ./api/app.py\n    \n    [...]\n    @app.route(\"/api/pusher/auth\", methods=['POST'])\n    @jwt_required\n    def pusher_authentication():\n        channel_name = request.form.get('channel_name')\n        socket_id = request.form.get('socket_id')\n        \n        username = get_jwt_identity()\n        \n        user_data = User.query.filter_by(username=username).first()\n        \n        auth = pusher.authenticate(\n            channel=channel_name,\n            socket_id=socket_id,\n            custom_data={\n                \"user_id\": user_data.id,\n                \"user_info\": {\n                   \"username\": user_data.username\n                }\n            }\n        )\n        \n        return jsonify(auth)\n    [...]\n```\n\nIn the code above,\n\n- We first fetch the channel name and socket ID from the request.\n- Then, we fetch the username from the JWT token.\n- Next, we query the database with the username to get more information about the user.\n- Finally, we call `pusher.authenticate` to authenticate the channel. We also added some custom data to the authenticate function. The `user_id` in the `custom_data` is the ID of the user while the user_info property is for additional information for that user.\n\nNow, with this, we can authenticate both our private and presence channel.\n\n\n\u003e ⚠️ If you don’t include a custom data, the channel won’t be authenticated. This means you won’t be able to subscribe to the channel. The `user_id` in the custom data is also required.\n\n\n## Subscribe the user\n\nNow, let’s subscribe our users to a common channel from the Vue app. We’ll name this channel `presence-chatchit`.\n\nAdd the following code to the `setAuthenticated` method in `src/App.vue`:\n\n``` javascript\n    var presenceChannel = pusher.subscribe(\"presence-chitchat\");\n```\n\nOnce the user logs in,  we’ll subscribe the user to the `presence-chitchat` channel.\n\nNext, update the user `is_online` status to true as they subscribe. Add the below code to the `setAuthenticated` method in `src/App.vue`:\n\n``` javascript\n    [...]\n    presenceChannel.bind(\"pusher:member_added\", data =\u003e {\n      // Get the index of user that just scubscribed\n      const index = this.users.findIndex(user =\u003e user.id == data.id);\n      \n      // Set the is_online status of the user to true\n      this.$set(this.users, index, { ...this.users[index], is_online: true });\n    });\n    [...]\n```\n\nHere,\n\n- We bind the channel to the pre-defined event called `pusher:member_added`. This event is available by default for the presence channels. In the event, we can access the custom data we added while authenticating the channel.\n- `this.users` is a state we used for storing all users available on the app.\n- the `data` is the custom data we passed while authenticating the channel.\n- Then finally, we [set](https://vuejs.org/v2/guide/reactivity.html#Change-Detection-Caveats) the `is_online` status for the user to be true.\n\nNext, update the user `is_online` status to false as they leave the channel. Add the below code to the `setAuthenticated` method in `src/App.vue`:\n\n``` javascript\n    [...]\n    presenceChannel.bind(\"pusher:member_removed\", data =\u003e {\n      // Get the index of user that just subscribed\n      const index = this.users.findIndex(user =\u003e user.id == data.id);\n      \n      // Set the is_online status of the user to false\n      this.$set(this.users, index, {\n        ...this.users[index],\n        is_online: false\n      });\n    });\n    [...]\n```\n\nHere, we bind the channel to the pre-defined event called `pusher:member_removed`. This event is available by default for the presence channels. Then finally, we [set](https://vuejs.org/v2/guide/reactivity.html#Change-Detection-Caveats) the `is_online` status for the user to be false.\n\nNext, get all users already on the channel before the user joined and set their `is_online` status to be true. Add the below code to the `setAuthenticated` method in `src/App.vue`:\n\n``` javascript\n    [...]\n    presenceChannel.bind(\"pusher:subscription_succeeded\", data =\u003e {\n      // Fetch members already on this channel, then set them to be online\n      for (let member_id of Object.keys(data.members)) {\n        const index = this.users.findIndex(user =\u003e user.id == member_id);\n        this.$set(this.users, index, {\n          ...this.users[index],\n          is_online: true\n        });\n      }\n    });\n    [...]\n```\n\nThe `pusher:subscription_succeeded` is triggered as soon as a user subscribes to the channel. As the user subscribes to the channel, it’s possible to have users already subscribed to that channel. \n\nIn the code above, when we get the event, we’ll fetch all the users already subscribed to the channel and then update their is_online property to true.\n\n## Adding an online indicator\n\nWe need an indicator that shows if a user is online or offline. We’ll use a small circle beside a user to show when the user is online, and remove it when the user is offline.\n\nIn the template section of `src/components/Users.vue`, add the below markup:\n\n``` html\n    \u003ctemplate\u003e\n      \u003cdiv style=\"margin-top: 0px;\"\u003e\n        \u003cdiv v-for=\"(user, id) in users\" v-bind:key=\"id\"\u003e\n          \u003cdiv\n            v-bind:class=\"[activeUser == user.id ? 'user active' : 'user']\"\n            @click=\"chat(user.id)\"\n          \u003e\n            {{user.userName}}\n            \u003cspan v-if=\"user.has_new_message\" class=\"has_new_message\"\u003eNew message\u003c/span\u003e\n            \u003cspan v-if=\"user.is_online\" class=\"online\"\u003e\u003c/span\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nHere, we check if the user is online so that we can show the HTML indicator.\n\nNext, add some style for the indicator in the `\u003cstyle\u003e` section of the `src/components/Users.vue` file:\n\n``` css\n    [...]\n    .online {\n      height: 15px;\n      width: 15px;\n      background-color: #17a2b8;\n      border-radius: 50%;\n      display: inline-block;\n      margin-bottom: -4px;\n      border: 1px solid white;\n    }\n    [...]\n```\n\n### Testing the app\n\nCongrats! Now we can see those online and those that are offline. \n\nNow test the app. Open the app in different tabs on your browser then log in. You will get a similar experience as below!\n\n![flask-vue-sentiment-demo-part-4](//images.ctfassets.net/1es3ne0caaid/5iuUiYUuME0qUO6CcWgqWk/f3d0cdf1ff02d41dcf640a06c5c04603/flask-vue-sentiment-demo-part-4.gif)\n\n## Conclusion\n\nIn this tutorial, we explored how to add a “who’s online” feature to chat apps using Channel’s presence channel. \n\nThe source code for the tutorial is available in [GitHub](https://github.com/dongido001/pusher-chat-sentiment-analysis/tree/part-4).","metaTitle":"Build a chat app in Flask and Vue - Part 4","metaDescription":"This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each other in realtime, see when other users are online, and be notified of new messages. In part four, add an online presence feature."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4cFHa1iHtYyG2oUgkS6U4q","type":"Entry","createdAt":"2018-10-30T15:29:10.088Z","updatedAt":"2019-01-02T15:45:26.747Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Building live chat app with GraphQL subscriptions","url":"chat-graphql-subscriptions","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5K3KWA2xvqw4SW2sYI8eCG","type":"Entry","createdAt":"2018-02-12T15:34:14.169Z","updatedAt":"2018-02-14T10:09:19.038Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Chimezie Enyinnaya","url":"chimezie-enyinnaya","email":"meziemichael@gmail.com","twitter":"https://twitter.com/ammezie","github":"https://github.com/ammezie","guestWriter":true}}],"projectRepo":"https://github.com/ammezie/graphql-chat-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JIfHx7gJySI6CiKyaC4kO","type":"Entry","createdAt":"2018-10-09T17:48:45.939Z","updatedAt":"2019-08-22T11:17:21.577Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"GraphQL","url":"graphql","type":"language","featured":false}}],"reviewDate":"2018-09-02","description":"This brief tutorial takes you through building a simple chat app using GraphQL and Vue.js. Users will be able to talk one-to-one in realtime, using GraphQL's subscriptions feature.","prerequisite":"You will need Node and the Vue CLI installed on your machine.","content":"One of the exciting things about GraphQL is the ability to build realtime applications with it, through the use of GraphQL subscriptions. In this tutorial, I’ll be showing you how to build a realtime app with GraphQL subscriptions.\n\n## Prerequisites\n\nThis tutorial assumes the following:\n\n- Node.js and NPM installed on your computer\n- Vue CLI 3 installed on your computer\n- Basic knowledge of GraphQL\n- Basic knowledge of JavaScript and Vue.js\n\n## What we'll be building\n\nWe’ll be building a simple chat app. We’ll start by building the GraphQL server, then we’ll build a Vue.js app that will consume the GraphQL server. To keep this tutorial focused, we won’t be working with a database. Instead, we’ll save the chats in an in-memory array.\n\nBelow is a quick demo of the final app:\n\n![graphql-realtime-chat-demo](//images.ctfassets.net/1es3ne0caaid/2O9KqUyxCwgQO0QOAqy0cM/469d8a6e331f641e0e2f1572ae33c366/graphql-realtime-chat-demo.gif)\n\n## What are GraphQL subscriptions?\n\nBefore we dive into code, let’s take a quick look at what is GraphQL subscriptions. GraphQL subscriptions add realtime functionality to GraphQL. They allow a server to send data to clients when a specific event occurs. Just as queries, subscriptions can also have a set of fields, which will be returned to the client. Unlike queries, subscriptions doesn’t immediately return a response, but instead, a response is returned every time a specific event occurs and the subscribed clients will be notified accordingly.\n\nUsually, subscriptions are implemented with WebSockets. You can check out the [Apollo GraphQL subscriptions docs](https://www.apollographql.com/docs/graphql-subscriptions) to learn more.\n\n## Building the GraphQL server\n\nTo speed the development process of our GraphQL server, we’ll be using [graphql-yoga](https://github.com/prisma/graphql-yoga). Under the hood, graphql-yoga makes use of Express and  Apollo Server. Also, it comes bundled with all the things we’ll be needing in this tutorial, such as [graphql-subscriptions](https://github.com/apollographql/graphql-subscriptions). So let’s get started.\n\nWe’ll start by creating a new project directory, which we’ll call `graphql-chat-app`:\n\n```\n    $ mkdir graphql-chat-app\n```\n\nNext, let’s `cd` into the new project directory and create a `server` directory:\n\n```\n    $ cd graphql-chat-app\n    $ mkdir server\n```\n\nNext, `cd` into `server` and run the command below:\n\n```\n    $ cd server\n    $ npm init -y\n```\n\nNow, let’s install `graphql-yoga`:\n\n```\n    $ npm install graphql-yoga\n```\n\nOnce that’s done installing, we’ll create a `src` directory inside the `server` directory:\n\n```\n    $ mkdir src\n```\n\nThe `src` directory is where our GraphQL server code will reside. So let’s create an `index.js` file inside the `src` directory and paste the code below in it:\n\n``` javascript\n    // server/src/index.js\n    \n    const { GraphQLServer, PubSub } = require('graphql-yoga')\n    const typeDefs = require('./schema')\n    const resolvers = require('./resolver')\n    \n    const pubsub = new PubSub()\n    const server = new GraphQLServer({ typeDefs, resolvers, context: { pubsub } })\n    \n    server.start(() =\u003e console.log('Server is running on localhost:4000'))\n```\n\nHere, we import `GraphQLServer` and `PubSub` (which will be used to publish/subscribe to channels) from `graphql-yoga`. Also, we import our schemas and resolvers (which we’ll create shortly). Then we create an instance of `PubSub`. Using `GraphQLServer`, we create our GraphQL server passing to it the schemas, resolvers and a context. Noticed we pass `pubsub` as a context to our GraphQL server. That way, we’ll be able to access it in our resolvers. Finally, we start the server.\n\n### Defining the schemas\nInside the `src` directory, create a `schema.js` file and paste the code below in it:\n\n``` javascript\n    // server/src/schema.js\n    \n    const typeDefs = `\n      type Chat {\n        id: Int!\n        from: String!\n        message: String!\n      }\n      \n      type Query {\n        chats: [Chat]\n      }\n      \n      type Mutation {\n        sendMessage(from: String!, message: String!): Chat\n      }\n      \n      type Subscription {\n        messageSent: Chat\n      }\n    `\n    module.exports = typeDefs\n```\n\nWe start by defining a simple `Chat` type, which has three fields: the chat ID, the username of the user sending the message and the message itself. Then we define a query to fetch all messages and a mutation for sending a new message, which accepts the username and the message. Lastly, we define a subscription, which we are calling `messageSent` and it will return a message.\n\n### Writing the resolver functions\n\nWith the schemas defined, let’s move on to defining the resolver functions. Inside the `src` directory, create a `resolver.js` file and paste the code below in it:\n\n``` javascript\n    // server/src/resolver.js\n    \n    const chats = []\n    const CHAT_CHANNEL = 'CHAT_CHANNEL'\n    \n    const resolvers = {\n      Query: {\n        chats (root, args, context) {\n          return chats\n        }\n      },\n      \n      Mutation: {\n        sendMessage (root, { from, message }, { pubsub }) {\n          const chat = { id: chats.length + 1, from, message }\n          \n          chats.push(chat)\n          pubsub.publish('CHAT_CHANNEL', { messageSent: chat })\n          \n          return chat\n        }\n      },\n      \n      Subscription: {\n        messageSent: {\n          subscribe: (root, args, { pubsub }) =\u003e {\n            return pubsub.asyncIterator(CHAT_CHANNEL)\n          }\n        }\n      }\n    }\n    \n    module.exports = resolvers\n```\n\nWe create an empty chats array, then we define our channel name, which we call `CHAT_CHANNEL`. Next, we begin writing the resolver functions. First, we define the function to fetch all the messages, which simply returns the chats array. Then we define the `sendMessage` mutation. In the `sendMessage()`, we create a chat object from the supplied arguments and add the new message to the chats array. Next, we make use of the `publish()` from the `pubsub` object, which accepts two arguments: the channel (`CHAT_CHANNEL`) to publish to and an object containing the event (`messageSent`, which must match the name of our subscription) to be fired and the data (in this case the new message) to pass along with it. Finally, we return the new chat.\n\nLastly, we define the subscription resolver function. Inside the `messageSent` object, we define a `subscribe` function, which subscribes to the `CHAT_CHANNEL` channel, listens for when the `messageSent` event is fired and returns the data that was passed along with the event, all using the `asyncIterator()` from the `pubsub` object.\n\nLet’s start the server since we’ll be using it in the subsequent sections:\n\n```\n    $ node src/index.js\n```\n\nThe server should be running at `http://localhost:4000`.\n\n## Building the frontend app\n\nWith the GraphQL server ready, let’s start building the frontend app. Using the Vue CLI, create a new Vue.js app directly inside the project’s root directory:\n\n```\n    $ vue create frontend\n```\n\nAt the prompt, we’ll choose the `default (babel, eslint)` preset. \n\nOnce that’s done, let’s install the necessary dependencies for our app:\n\n```\n    $ cd frontend\n    $ npm install vue-apollo graphql apollo-client apollo-link apollo-link-http apollo-cache-inmemory graphql-tag apollo-link-ws apollo-utilities subscriptions-transport-ws\n```\n\nThat’s a lot of dependencies, so let’s go over each of them:\n\n\n- **vue-apollo:** an Apollo/GraphQL integration for Vue.js.\n- **graphql:** a reference implementation of GraphQL for JavaScript.\n- **apollo-client:** a fully-featured, production-ready caching GraphQL client for every server or UI framework.\n- **apollo-link:** a standard interface for modifying control flow of GraphQL requests and fetching GraphQL results.\n- **apollo-link-http:** used to get GraphQL results over a network using HTTP fetch.\n- **apollo-cache-inmemory:** cache implementation for Apollo Client 2.0.\n- **graphql-tag:** a JavaScript template literal tag that parses GraphQL queries.\n- **apollo-link-ws:** allows sending of GraphQL operations over a WebSocket.\n- **apollo-utilities: u**tilities for working with GraphQL ASTs.\n- **subscriptions-transport-ws:** a WebSocket client + server for GraphQL subscriptions.\n\nNext, let’s set up the Vue Apollo plugin. Open `frontend/src/main.js` and update it as below:\n\n``` javascript\n    // frontend/src/main.js\n    \n    import { InMemoryCache } from 'apollo-cache-inmemory'\n    import { ApolloClient } from 'apollo-client'\n    import { split } from 'apollo-link'\n    import { HttpLink } from 'apollo-link-http'\n    import { WebSocketLink } from 'apollo-link-ws'\n    import { getMainDefinition } from 'apollo-utilities'\n    import Vue from 'vue'\n    import VueApollo from 'vue-apollo'\n    import App from './App.vue'\n    \n    Vue.config.productionTip = false\n    \n    const httpLink = new HttpLink({\n      uri: 'http://localhost:4000'\n    })\n    \n    const wsLink = new WebSocketLink({\n      uri: 'ws://localhost:4000',\n      options: {\n        reconnect: true\n      }\n    })\n    \n    const link = split(\n      ({ query }) =\u003e {\n        const { kind, operation } = getMainDefinition(query)\n        return kind === 'OperationDefinition' \u0026\u0026 operation === 'subscription'\n      },\n      wsLink,\n      httpLink\n    )\n    \n    const apolloClient = new ApolloClient({\n      link,\n      cache: new InMemoryCache(),\n      connectToDevTools: true\n    })\n    \n    const apolloProvider = new VueApollo({\n      defaultClient: apolloClient\n    })\n    \n    Vue.use(VueApollo)\n    \n    new Vue({\n      apolloProvider,\n      render: h =\u003e h(App)\n    }).$mount('#app')\n```\n\nHere, we create new instances of both `httpLink` and `WebSocketLink` with the URLs (`http://localhost:4000` and  `ws://localhost:4000`) of our GraphQL server respectively. Since we can have two different types of operations (query/mutation and subscription), we need to configure Vue Apollo to handle both of them. We can easily do that using the `split()`. Next, we create an Apollo client using the `link` created above and specify we want an in-memory cache. Then we install the Vue Apollo plugin, and we create a new instance of the Vue Apollo plugin using the `apolloClient` created as our default client. Lastly, we make use of the `apolloProvider` object by adding it to our Vue instance.\n\n### Adding Bootstrap\nFor quick prototyping of our app, we’ll be using Bootstrap. So add the line below to the `head` section of `public/index.html`:\n\n``` html\n    // frontend/public/index.html\n    \n    \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\"\u003e\n```\n\nFor the purpose of this tutorial, we’ll be making use of just one component for everything, that is, the `App` component.\n\n### Joining chat\nSince we won’t be covering user authentication in this tutorial, we need a way to get the users in the chat. For that, we’ll ask the user to enter a username before joining the chat. Update `frontend/src/App.vue` as below:\n\n``` html\n    // frontend/src/App.vue\n    \n    \u003ctemplate\u003e\n      \u003cdiv id=\"app\" class=\"container\" style=\"padding-top: 100px\"\u003e\n        \u003cdiv class=\"row justify-content-center\"\u003e\n          \u003cdiv class=\"col-md-8\"\u003e\n            \u003cdiv class=\"card\"\u003e\n              \u003cdiv class=\"card-body\"\u003e\n                \u003cdiv class=\"row\" v-if=\"entered\"\u003e\n                  \u003cdiv class=\"col-md-12\"\u003e\n                    \u003cdiv class=\"card\"\u003e\n                      \u003cdiv class=\"card-header\"\u003eChatbox\u003c/div\u003e\n                      \u003cdiv class=\"card-body\"\u003e\n                        \u003c!-- messages will be here --\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"row\" v-else\u003e\n                  \u003cdiv class=\"col-md-12\"\u003e\n                    \u003cform method=\"post\" @submit.prevent=\"enterChat\"\u003e\n                      \u003cdiv class=\"form-group\"\u003e\n                        \u003cdiv class='input-group'\u003e\n                          \u003cinput\n                            type='text'\n                            class=\"form-control\"\n                            placeholder=\"Enter your username\"\n                            v-model=\"username\"\n                          \u003e\n                          \u003cdiv class='input-group-append'\u003e\n                            \u003cbutton class='btn btn-primary' @click=\"enterChat\"\u003eEnter\u003c/button\u003e\n                          \u003c/div\u003e\n                        \u003c/div\u003e\n                      \u003c/div\u003e\n                    \u003c/form\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    export default {\n      name: 'app',\n      data() {\n        return {\n          username: '',\n          message: '',\n          entered: false,\n        };\n      },\n      methods: {\n        enterChat() {\n          this.entered = !!this.username != '';\n        },\n      },\n    };\n    \u003c/script\u003e\n```\n\nWe display a form for entering a username. Once the form is submitted, we call `enterChat()`, which simply updates the `entered` data depending on whether the user entered a username or not. Notice we have conditional rendering in the `template` section. The chat interface will only be rendered when a user has supplied a username. Otherwise, the join chat form will be rendered.\n\nLet’s start the app to see our progress thus far:\n\n```\n    $ npm run serve\n```\n\nThe app should be running at `http://localhost:8080`.\n\n![graphql-realtime-chat-1](//images.ctfassets.net/1es3ne0caaid/4lE40zOhlC2C4C0kOIaQqE/8ad366fd06fa6ddd437c11e60033e640/graphql-realtime-chat-1.png)\n\n### Displaying all chats\n\nNow, let’s display all messages. First, let’s update the template. Replace the `messages will be here` ****comment with the following:\n\n``` html\n    // frontend/src/App.vue\n    \n    \u003cdl\n      v-for=\"(chat, id) in chats\"\n      :key=\"id\"\n    \u003e\n      \u003cdt\u003e{{ chat.from }}\u003c/dt\u003e\n      \u003cdd\u003e{{ chat.message }}\u003c/dd\u003e\n    \u003c/dl\u003e\n    \n    \u003chr\u003e\n```\n\nHere, we are looping through all the messages (which will be populated from our GraphQL server) and displaying each of them.\n\nNext, add the following to the `script` section:\n\n``` javascript\n    // frontend/src/App.vue\n    \n    import { CHATS_QUERY } from '@/graphql';\n    \n    // add this after data declaration\n    apollo: {\n      chats: {\n        query: CHATS_QUERY,\n      },\n    },\n```\n\nWe add a new `apollo` object, then within the `apollo` object, we define the GraphQL query to fetch all messages. This makes use of the `CHATS_QUERY` query (which we’ll create shortly).\n\nNext, let’s create the `CHATS_QUERY` query. Create a new `graphql.js` file inside `frontend/src` and paste the following content in it:\n\n``` javascript\n    // frontend/src/graphql.js\n    \n    import gql from 'graphql-tag'\n    \n    export const CHATS_QUERY = gql`\n      query ChatsQuery {\n        chats {\n          id\n          from\n          message\n        }\n      }\n    `\n```\n\nFirst, we import `graphql-tag`. Then we define the query for fetching all chats from our GraphQL server.\n\nLet’s test this. Enter a username to join the chat. For now, the chatbox is empty obviously because we haven’t sent any messages yet.\n\n![graphql-realtime-chat-2](//images.ctfassets.net/1es3ne0caaid/6lNyKaRF0QgKIQgs8mgkWM/d7727dbbcb290206473be6a1c7f47bae/graphql-realtime-chat-2.png)\n\n### Send a new message\n\nLet’s start sending messages. Add the code below immediately after the `hr` tag in the template:\n\n``` html\n    // frontend/src/App.vue\n    \n    \u003cinput\n      type='text'\n      class=\"form-control\"\n      placeholder=\"Type your message...\"\n      v-model=\"message\"\n      @keyup.enter=\"sendMessage\"\n    \u003e\n```\n\nWe have an input field for entering a new message, which is bound to the `message` data. The new message will be submitted once we press enter key, which will call a `sendMessage()`.\n\nNext, add the following to the `script` section:\n\n``` javascript\n    // frontend/src/App.vue\n    \n    import { CHATS_QUERY, SEND_MESSAGE_MUTATION } from '@/graphql';\n    \n    // add these inside methods\n    async sendMessage() {\n      const message = this.message;\n      this.message = '';\n      \n      await this.$apollo.mutate({\n        mutation: SEND_MESSAGE_MUTATION,\n        variables: {\n          from: this.username,\n          message,\n        },\n      });\n    },\n```\n\nWe define the `sendMessage()`, which makes use of the `mutate()` available on `this.$apollo` (from the Vue Apollo plugin). We use the `SEND_MESSAGE_MUTATION` mutation (which we’ll create shortly) and pass along the necessary arguments (username and message).\n\nNext, let’s create the `SEND_MESSAGE_MUTATION` mutation. Add the code below inside `frontend/src/graphql.js`:\n\n``` javascript\n    // frontend/src/graphql.js\n    \n    export const SEND_MESSAGE_MUTATION = gql`\n      mutation SendMessageMutation($from: String!, $message: String!) {\n        sendMessage(\n          from: $from,\n          message: $message\n        ) {\n          id\n          from\n          message\n        }\n      }\n    `\n```\n\nNow, if we try sending a message, we and the user we are chatting with won’t see the message until the page is refreshed.\n\n![graphql-realtime-chat-3](//images.ctfassets.net/1es3ne0caaid/2hnlVnUqVmUWUAKeAiqYsq/8423738b062d4f8e453af74caca2bade/graphql-realtime-chat-3.png)\n\n### Displaying new messages in realtime\n\nTo resolve the issue above, we’ll add realtime functionality to our app. Let’s start by defining the subscription. Add the code below inside `frontend/src/graphql.js`:\n\n``` javascript\n    // frontend/src/graphql.js\n    \n    export const MESSAGE_SENT_SUBSCRIPTION = gql`\n      subscription MessageSentSubscription {\n        messageSent {\n          id\n          from\n          message\n        }\n      }\n    `\n```\n\nNext, in the `App` component, we also import the `MESSAGE_SENT_SUBSCRIPTION` subscription we just created.\n\n``` javascript\n    // frontend/src/App.vue\n    \n    import {\n      CHATS_QUERY,\n      SEND_MESSAGE_MUTATION,\n      MESSAGE_SENT_SUBSCRIPTION,\n    } from '@/graphql';\n```\n\nNext, we’ll update the query for fetching all messages as below:\n\n``` javascript\n    // frontend/src/App.vue\n    \n    apollo: {\n      chats: {\n        query: CHATS_QUERY,\n        subscribeToMore: {\n          document: MESSAGE_SENT_SUBSCRIPTION,\n          updateQuery: (previousData, { subscriptionData }) =\u003e {\n            return {\n              chats: [...previousData.chats, subscriptionData.data.messageSent],\n            };\n          },\n        },\n      },\n    },\n```\n\nIn addition to just fetching the messages, we now define a `subscribeToMore` object, which contains our subscription. To update the messages in realtime, we define a `updateQuery`, which accepts the previous chats data and the data that was passed along with the subscription. So all we have to do is merge the new data to the existing one and return them as the updated messages.\n\nNow, if we test it out, we should see our messages in realtime.\n\n![graphql-realtime-chat-demo](//images.ctfassets.net/1es3ne0caaid/2O9KqUyxCwgQO0QOAqy0cM/469d8a6e331f641e0e2f1572ae33c366/graphql-realtime-chat-demo.gif)\n\n## Conclusion\n\nIn this tutorial, we have seen how to build realtime apps with GraphQL subscriptions. We started by first building a GraphQL server, then a Vue.js app that consumes the GraphQL server.\n\nThe complete code for this tutorial is available on [GitHub](https://github.com/ammezie/graphql-chat-app).","metaTitle":"Building live chat app with GraphQL subscriptions","metaDescription":"This brief tutorial takes you through building a simple chat app using GraphQL and Vue.js. Users will be able to talk one-to-one in realtime, using GraphQL's subscriptions feature."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Bwn4NZJ84wW8q0sww6Mew","type":"Entry","createdAt":"2018-09-01T05:31:43.519Z","updatedAt":"2018-09-01T05:31:43.519Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live commenting system with auto moderation using Laravel","url":"live-comments-automod-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3j821hA7aMgOiUEaO4Q8y6","type":"Entry","createdAt":"2018-02-26T19:00:03.819Z","updatedAt":"2018-03-20T12:22:11.602Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Shalvah Adebayo","url":"shalvah-adebayo","email":"shalvah.adebayo@gmail.com","twitter":"https://twitter.com/theshalvah","github":"https://shalvah.me/","guestWriter":true}}],"projectRepo":"https://github.com/shalvah/rcam","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-08-30","description":"Use Laravel to build a live comments feature with built-in auto moderation. Users can comment on a sample post. Their comments are either displayed instantly, or rejected with a message asking them to be nicer.","prerequisite":"You will need PHP 7+ and Composer installed on your machine.","content":"It’s 2018, and a lot of conversations happen over the Internet. It’s easy for people to forget to be nice when they’re sitting behind a screen and typing, as opposed to talking face-to-face. Many site admins employ some form of moderation to keep user behavior, such as comments, in check and ensure people play by the rules.  This moderation could be manual (an admin logs in to review comments before approving) or automatic (an external service analyses comments and approves or rejects based on certain signals), or even a combination of both.\n\nIn this tutorial, we’ll build a blog which allows users to comment on posts. These comments will be sent to an external API for moderation, and comments which pass will be saved and displayed under the post in realtime, using Pusher Channels. Here’s a preview of the app in action:\n\n![laravel-automod-demo](//images.ctfassets.net/1es3ne0caaid/1YLwQjfjJeKs0e2MG6SckA/7f85620ac7c0ca89d9f6977bbfdac6ea/laravel-automod-demo.gif)\n\nYou can find the source code of the complete application [on GitHub.](https://github.com/shalvah/rcam) Let’s go!\n\n## Prerequisites\n\n1. PHP 7.1.3 or newer\n2. [Composer](http://getcompocer.org).\n3. A Pusher account. Create one [here](https://pusher.com/signup).\n\n\n## Setting up\n\nFirst, create a new Laravel project:\n\n```\n    composer create-project --prefer-dist laravel/laravel rcam\n```\n\nOpen up the generated project folder (`rcam`). Set the value of `DB_CONNECTION` in your `.env` file to `sqlite` and remove all other lines that start with `DB_`.\n\n```\n    DB_CONNECTION=sqlite\n```\n\nThen create a file called `database.sqlite` in the `database` folder of your app.\n\nRun the following command to add the `zttp` package. We’ll use it to make an API call to the moderation service:\n\n```\n    composer require kitetail/zttp\n```\n\nNow we’ll set up our `Comment` model and database migration. Run the following command:\n\n```\n    php artisan make:model -m Comment\n```\n\nLook for the comments migration file that was created in your `database/migrations` folder. Modify its contents so it looks like this:\n\n``` php\n    // 2018_xx_xx_xxxxxx_create_comments_table\n    \n    \u003c?php\n    \n    use Illuminate\\Support\\Facades\\Schema;\n    use Illuminate\\Database\\Schema\\Blueprint;\n    use Illuminate\\Database\\Migrations\\Migration;\n    \n    class CreateCommentsTable extends Migration\n    {\n        public function up()\n        {\n            Schema::create('comments', function (Blueprint $table) {\n                $table-\u003eincrements('id');\n                $table-\u003estring('username');\n                $table-\u003estring('text');\n                $table-\u003etimestamps();\n            });\n        }\n    \n        public function down()\n        {\n            Schema::dropIfExists('comments');\n        }\n    }\n```\n\nThen we run migrations:\n\n```\n    php artisan migrate\n```\n\nLet’s add our route and view for the fake post and comments. Replace the contents of your `routes/web.php` with the following:\n\n``` php\n    // routes/web.php\n    \u003c?php\n    \n    Route::get('/', 'HomeController@home');\n```\n\nCreate a file `app/Http/Controllers/HomeController.php` with the following content:\n\n``` php\n    // app/Http/Controllers/HomeController.php\n    \n    \u003c?php\n    \n    namespace App\\Http\\Controllers;\n    \n    use App\\Comment;\n    \n    class HomeController extends Controller\n    {\n        public function home()\n        {\n            // order comments from newest to oldest\n            $comments = Comment::orderBy('id desc')-\u003eget();\n            return view('home', ['comments' =\u003e $comments]);\n        }\n    }\n```    \n\nNow create the file `resources/views/home.blade.php` with the following content:\n\n``` php\n    \u003c!-- resources/views/home.blade.php --\u003e\n    \n    \u003c!doctype html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003cmeta name=\"csrf-token\" content=\"{{ csrf_token() }}\"\u003e\n    \n        \u003ctitle\u003eRcam\u003c/title\u003e\n    \n        \u003c!-- Styles --\u003e\n        \u003cstyle\u003e\n            html, body {\n                background-color: #fff;\n                color: #636b6f;\n                font-family: sans-serif;\n                padding: 20px;\n            }\n    \n            input {\n                border: 2px solid blue;\n                font-size: 16px;\n                padding: 5px;\n            }\n    \n            button {\n                font-size: 16px;\n                padding: 5px;\n            }\n        \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \u003ch2\u003ePost title\u003c/h2\u003e\n    This is a dummy post. There isn't really much to it, but it could be really fun if you're bored. Speaking of bored, did\n    you hear the joke about the blackboard that had...oh, never mind. I'm not allowed to say that. Just drop a comment and\n    be on your merry way. Wait, did I tell you this is a dummy post?\n    \n    \u003cbr\u003e\u003cbr\u003e\n    \u003cdiv\u003e\n        \u003ch3\u003eComments\u003c/h3\u003e\n        \u003cform onsubmit=\"addComment(event);\"\u003e\n            \u003cinput type=\"text\" placeholder=\"Add a comment\" name=\"text\" id=\"text\" required\u003e\n            \u003cinput type=\"text\" placeholder=\"Your name\" name=\"username\" id=\"username\" required\u003e\n            \u003cbutton id=\"addCommentBtn\"\u003eComment\u003c/button\u003e\n        \u003c/form\u003e\n        \u003cdiv class=\"alert\" id=\"alert\" style=\"display: none;\"\u003e\u003c/div\u003e\n        \u003cbr\u003e\n    \n        \u003cdiv id=\"comments\"\u003e\n            @foreach($comments as $comment)\n                \u003cdiv\u003e\n                    \u003csmall\u003e{{ $comment-\u003eusername }}\u003c/small\u003e\n                    \u003cbr\u003e\n                    {{ $comment-\u003etext }}\n                \u003c/div\u003e\n            @endforeach\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\n\n\n## Moderating comments\n\nNow let’s allow users to post comments. In the view we built above, we created a form for submitting comments. The `onsubmit` handler of that form is a function called `addComment`, so let’s implement that. Add this code to your `resources/views/home.blade.php`, just before the closing `\u003c/body\u003e` tag:\n\n``` php\n    \u003c!-- resources/views/home.blade.php --\u003e\n    \n    \u003c!-- Add jQuery --\u003e\n    \u003cscript src=\"https://code.jquery.com/jquery-3.3.1.min.js\"\n            integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\"\n            crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n        function displayComment(data) {\n            let $comment = $('\u003cdiv\u003e').text(data['text']).prepend($('\u003csmall\u003e').html(data['username'] + \"\u003cbr\u003e\"));\n            $('#comments').prepend($comment);\n        }\n            \n        function addComment(event) {\n            function showAlert(message) {\n                let $alert = $('#alert');\n                $alert.text(message).show();\n                setTimeout(() =\u003e $alert.hide(), 4000);\n            }\n    \n            event.preventDefault();\n            $('#addCommentBtn').attr('disabled', 'disabled');\n            let data = {\n                text: $('#text').val(),\n                username: $('#username').val(),\n            };\n            fetch('/comments', {\n                body: JSON.stringify(data),\n                credentials: 'same-origin',\n                headers: {\n                    'content-type': 'application/json',\n                    'x-csrf-token': $('meta[name=\"csrf-token\"]').attr('content'),\n                    'x-socket-id': window.socketId\n                },\n                method: 'POST',\n                mode: 'cors',\n            }).then(response =\u003e {\n                $('#addCommentBtn').removeAttr('disabled');\n                if (response.ok) {\n                    displayComment(data);\n                    showAlert('Comment posted!');\n                } else {\n                    showAlert('Your comment was not approved for posting. Please be nicer :)');\n                }\n            })\n        }\n    \u003c/script\u003e\n```\n\nHere, we’re using [Fetch](https://developer.mozilla.org/en/docs/Web/API/Fetch_API) to post the comment to the backend. If a `200 OK` response is received, we display the comment under the post. If not, that means the comment failed moderation, so we’ll tell the user to rephrase their comment.\n\nYou’ll notice we’re sending a couple of custom headers (`x-csrf-token` and `x-socket-id`). The first header is to satisfy Laravel’s CSRF protection, which ensures someone can’t be tricked into posting a comment to our site from a different site. You can read more about CSRF protection [here](https://laravel.com/docs/5.5/csrf). The second header is our Pusher socket ID, which tells the backend which client sent this request. It prevents the server from sending our own messages back to us. There’s more on that [here](https://pusher.com/docs/server_api_guide/server_excluding_recipients). For now, it’s always going to be `undefined`, but we’ll come back to that later.\n\nNext, add the route for making a comment to the bottom of your `routes/web.php` file:\n\n``` php\n    // routes/web.php\n    \n    Route::post('/comments', 'HomeController@addComment');\n```\n\nNext, we’ll add the method that handles this to our `HomeController`:\n\n``` php\n    // app/Http/Controllers/HomeController.php\n    \n    public function addComment()\n    {\n        $data = request()-\u003epost();\n        Comment::moderate($data['text']);\n        return Comment::create($data);\n    }\n```\n\nNow open up the `app/Comment.php` file and replace its contents with the following:\n\n``` php\n    // app/Comment.php\n    \n    \u003c?php\n    \n    namespace App;\n    \n    use Illuminate\\Database\\Eloquent\\Model;\n    use Zttp\\Zttp;\n    \n    class Comment extends Model\n    {\n        protected $guarded = [];\n    \n        public static function moderate($comment)\n        {\n            $response = Zttp::withoutVerifying()-\u003epost(\"https://commentator.now.sh\", [\n                'comment' =\u003e $comment,\n                'limit' =\u003e -3,\n            ])-\u003ejson();\n            if ($response['commentate']) {\n                abort(400, \"Comment not allowed\");\n            }\n        }\n    }\n```\n\n\nHere we’ve defined a `moderate` method. In it, we send the comment data to a comment moderation service located at https://commentator.now.sh. We’ve also specified a `limit` parameter of -3, which means that we’re willing to accept comments which have a score of -3 (mildly negative), but not any less. The response from the service contains a `commentate` parameter that is true if the comment scored below our limit. In such a case, we return a `400 Bad Request` to the frontend and prevent the comment from being saved.\n\n\n## Displaying new comments in realtime\n\nFirst, we’ll set up Pusher on the backend. Install the Pusher Laravel package and publish the config file by running the following commands:\n\n```\n    composer require pusher/pusher-http-laravel\n    php artisan vendor:publish --provider=\"Pusher\\Laravel\\PusherServiceProvider\"\n```\n\nSign in to [your Pusher dashboard](http://app.pusher.com) and create a new app. Copy your app credentials from the **App Keys** section and add them to your `.env` file:\n\n```\n    PUSHER_APP_ID=your-app-id\n    PUSHER_APP_KEY=your-app-key\n    PUSHER_APP_SECRET=your-app-secret\n    PUSHER_APP_CLUSTER=your-app-cluster\n```\n\n\u003e **Note**: Laravel sometimes caches old configuration, so for the project to see your new configuration values, you might need to run the command `php artisan config:clear`\n\nThen add the following JavaScript to your view, just before the closing `\u003c/body\u003e` tag:\n\n``` php\n    \u003c!-- resources/views/home.blade.php --\u003e\n    \n    \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n        var socket = new Pusher(\"your-app-key\", {\n            cluster: 'your-app-cluster',\n        });\n        // set the socket ID when we connect\n        socket.connection.bind('connected', function() {\n            window.socketId = socket.connection.socket_id;\n        });\n        socket.subscribe('comments')\n            .bind('new-comment',displayComment);\n    \u003c/script\u003e\n```\n\nReplace `your-app-key` and `your-app-cluster` with the respective credentials as gotten from your Pusher app dashboard.\n\nNow, let’s modify our `addComment` method on the backend so it triggers a new Pusher message when a comment is created successfully.\n\n``` php\n    // app/Http/Controllers/HomeController.php\n    \n    \n    public function addComment()\n    {\n        $data = request()-\u003epost();\n        Comment::moderate($data['text']);\n        $comment = Comment::create($data);\n        Pusher::trigger('comments', 'new-comment', $comment, request()-\u003eheader('X-Socket-Id'));\n        return $comment;\n    }\n```\n\nYou’ll need to import the `Pusher` class by adding `use Pusher\\Laravel\\Facades\\Pusher;` at the top of the file.\n\nAnd with that, we’re done. Start up your app by running `php artisan serve`, then visit http://127.0.0.1:8000. Try adding a few nice comments (“This is good”,  “I don’t agree with this” ), and a few comments with some “bad” words (“This article is full of shit”, “Damn, this article sucks”). You should see the comments get moderated and then show up in realtime.\n\n\n## Conclusion\n\nIn this tutorial, we’ve combined Pusher Channels with an external comment moderation service to improve the quality of comments on our blog and the user experience for every reader. This is just one combination of services we can make to improve our user’s experience on our site or app. I hope you’ve enjoyed this! You can check out the source code of the completed application [on GitHub.](https://github.com/shalvah/rcam)","metaTitle":"Build a live comments system with auto moderation in Laravel","metaDescription":"Create a live comments feature with auto moderation built in, using Laravel. Users can comment on a sample post. Their comments are either displayed instantly, or rejected with a message asking them to be nicer."}}],"defaultValue":"","queryType":"","pages":50,"route":"/tutorials","query":{"page":"24"}}},"page":"/tutorials","query":{"page":"24"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?page=24 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:47:54 GMT -->
</html>