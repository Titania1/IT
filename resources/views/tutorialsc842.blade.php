<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=Vue.js&page=2 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:09 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">59</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels &amp; Vue.js</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorials77d6.html?tag=Vue.js" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsa504.html?product=Beams&amp;tag=Vue.js" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Channels &amp; Vue.js"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/build-realtime-search-adonis-js-vue-js-pusher.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Adonis.js</li></ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime search feature with Adonis.js, Vue.js and Pusher</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This tutorial will teach you how to create a realtime search engine using the power of Pusher Channels with Adonis.js an...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-commenting-adonis-vue.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Adonis.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a live commenting system with Adonis.js and Vue.js</h3><p class="css-k12xad e5jrto45">This short tutorial will show you how to create a live commenting system using Adonis.js and Vue.js. Users will be able ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/todo-vue-laravel.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a to-do list app with Vue.js and Laravel</h3><p class="css-k12xad e5jrto45">This brief tutorial shows you how to create a simple to-do list app using Vue and Laravel. The list UI updates in realti...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/flask-vue-comments.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Flask<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live comment feature with sentiment analysis using Flask and Vue</h3><p class="css-k12xad e5jrto45">This tutorial will guide you through building a comments feature for a website, using Flask and Vue.js. New comments wil...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-game-express.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live game updates site with Express</h3><p class="css-k12xad e5jrto45">Build a live blogging platform using Express and Vue, designed to post live updates of sports games. It features an admi...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-game-laravel.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live game updates site with Laravel</h3><p class="css-k12xad e5jrto45">Build a live blogging platform using Laravel and Vue, designed to post live updates of sports games. It features an admi...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/markdown-editor-vue.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Collaboration<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live markdown editor with VueJS</h3><p class="css-k12xad e5jrto45">Build a simple markdown editor using Vue and Node. Users will be able to write in markdown and see their text update in ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/cms-laravel-vue-part-6.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a CMS with Laravel and Vue - Part 6: Adding Realtime Comments</h3><p class="css-k12xad e5jrto45">This six part tutorial series will guide you through building a CMS using Laravel and Vue.js. The final product will inc...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/presence-channels-laravel.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Implement online presence in a Laravel application</h3><p class="css-k12xad e5jrto45">This tutorial shows how to implement online presence and realtime updates in a Laravel application. You will use Laravel...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialse965.html?product=Channels&amp;tag=Vue.js&amp;page=1" class="css-5s6711 edg0byb1">Prev</a><a href="tutorialse965.html?product=Channels&amp;tag=Vue.js&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsc842.html?product=Channels&amp;tag=Vue.js&amp;page=2" class="css-2wakph edg0byb1">2</a><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorialsb43a.html?product=Channels&amp;tag=Vue.js&amp;page=3" class="css-za1ua3 edg0byb1">3</a><a href="tutorials1122.html?product=Channels&amp;tag=Vue.js&amp;page=4" class="css-za1ua3 edg0byb1">4</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials99ad.html?product=Channels&amp;tag=Vue.js&amp;page=7" class="css-5s6711 edg0byb1">7</a><a href="tutorialsb43a.html?product=Channels&amp;tag=Vue.js&amp;page=3" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":59,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3tgBP453TyS8yK2eSoUQmQ","type":"Entry","createdAt":"2018-10-29T23:22:01.251Z","updatedAt":"2020-06-11T13:13:21.743Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime search feature with Adonis.js, Vue.js and Pusher","url":"build-realtime-search-adonis-js-vue-js-pusher","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Ok7hdNlHGsaAME2MCGEeq","type":"Entry","createdAt":"2018-09-17T17:53:10.446Z","updatedAt":"2018-09-17T17:53:10.446Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ethiel Adiassa","url":"ethiel-adiassa","email":"ethiel97@gmail.com","twitter":"https://twitter.com/ethiel97","github":"https://github.com/ethiel97","guestWriter":true}}],"projectRepo":"https://github.com/Ethiel97/realtime_search_adonis_pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2AjUjeRuA4oUAcYYI6ck6i","type":"Entry","createdAt":"2018-09-28T17:24:15.392Z","updatedAt":"2018-09-28T17:24:15.392Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Adonis.js","url":"adonis-js","type":"library","featured":false}}],"reviewDate":"2019-01-29","description":"This tutorial will teach you how to create a realtime search engine using the power of Pusher Channels with Adonis.js and Vue.js","prerequisite":"Knowledge of Javascript\nKnowledge of Node.js and NPM or Yarn\nKnowledge of Vue.js and Vuex","content":"# Build a realtime search feature with Adonis.js, Vue.js and Pusher\n\n\n## Introduction\n\nIn this tutorial, we will build a realtime search feature with Vue.js and Pusher that you can integrate in your app using Adonis.js, as the backend framework. We’ll explore some of Adonis’ cool features and add a realtime taste to our app by using [Pusher](https://pusher.com).\n\n[Adonis](https://adonisjs.com) is an open source MVC Node.js framework inspired by the [Laravel](https://laravel.com) PHP framework, so if you have ever used Laravel you’ll feel at ease with Adonis.js.  Adonis takes features we love working with in Laravel and combines it with the speed and efficiency of the Node ecosystem.\n\n## Prerequisites\n\nIn order to follow this tutorial, knowledge of Javascript and Node.js is required. You should also have the following installed on your machine: \n\n\n- [Node.js](https://nodejs.org)\n- NPM(bundled with Node.js installer) or [Yarn](https://yarnpkg.com/)\n\n\n## Set up the Adonis project\n\nFirst open your terminal and type this command to install Adonis CLI and create a new adonis app:  \n\n```\n    # if you don't have Adonis CLI installed on your machine. \n      npm install -g @adonisjs/cli\n      \n    # Create a new adonis app and move into the app directory\n    $ adonis new adonis-vue-pusher \u0026\u0026 cd adonis-vue-pusher\n```\nNow start the server and test if everything is working fine: \n\n```\n    adonis serve --dev\n    \n    2018-09-23T12:25:30.326Z - info: serving app on http://127.0.0.1:3333\n```   \n\nOpen your browser and make a request to : http://127.0.0.1:3333. You should see the following:\n\n\n![](https://d2mxuefqeaa7sj.cloudfront.net/s_4FBE6D9CA32FEB8DD0F2E1D93D2591A12B3FA0D18BBC59414E12217D0828C150_1537964205960_build-realtime-app-adonis-pusher-first-run.png)\n\n\n  \n\n## Install the Pusher SDK and other dependencies\n\nWe won’t use the Pusher SDK directly but instead use [a Pusher provider for Adonis](https://github.com/Perafan18/adonis-pusher). \nBut we should first install the Pusher SDK by running this command:  \n\n```\n    #if you want to use npm\n    npm install pusher\n    \n    #or if you prefer Yarn\n    yarn add pusher\n```\nNow that the SDK is installed, you can install the Pusher provider for Adonis with this command:\n\n```\n    #if you want to use npm\n    npm install adonis-pusher\n    \n    #or if you prefer Yarn\n    yarn add adonis-pusher\n```\nThis provider helps us easily use the Pusher SDK with the Adonis.js framework.\nYou will need to add the provider to AdonisJS at \n```\n`start/app.js`:\n\n\n    const providers = [\n        ...\n        'adonis-pusher/providers/Pusher'\n    ]\n  ```\n\nLast, let’s install other dependencies that we’ll use to build our app. \nRun this command in your terminal: \n\n```\n    #if you want to use npm\n    npm install vue vuex axios laravel-mix pusher-js lodash mysql cross-env\n    \n    #or if you prefer Yarn\n    yarn add vue vuex axios laravel-mix pusher-js lodash mysql cross-env\n```\nDependencies we will use:\n\n- `vue` and `vuex` to build the frontend of our app,\n- `axios` to make HTTP requests to our API endpoints\n- [laravel-mix](https://github.com/JeffreyWay/laravel-mix) to provide a clean, fluent API for defining basic [webpack](http://github.com/webpack/webpack) build steps \n- `pusher-js` to listen to events emitted from our server\n- `lodash` utility functions to manipulate our data on the frontend\n- `mysql`, Node.js driver for MySQL to set up our database as this app will use MySQL for storage\n- `cross-env` to run scripts that set and use environment variables across platforms\n\n\n\n## Set up our build workflow\n\nWe’ll use laravel-mix to build and compile our application assets in a fluent way. But first we must tell our app to use it for that purpose. Open your `package.json` file and paste the following in the scripts section: \n\n\n```    \n    \"asset-dev\": \"cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\",\n    \"asset-watch\": \"cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --watch --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\",\n    \"asset-watch-poll\": \"npm run watch -- --watch-poll\",\n    \"asset-hot\": \"cross-env NODE_ENV=development node_modules/webpack-dev-server/bin/webpack-dev-server.js --inline --hot --config=node_modules/laravel-mix/setup/webpack.config.js\",\n    \"asset-prod\": \"cross-env NODE_ENV=production node_modules/webpack/bin/webpack.js --no-progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\"\n```    \n\nAfter that create a `webpack.mix.js` file at the root of your project and paste this code:\n\n\n ```   \n    const mix = require('laravel-mix');\n    \n    mix.setPublicPath('public');\n    /*\n     |--------------------------------------------------------------------------\n     | Mix Asset Management\n     |--------------------------------------------------------------------------\n     |\n     | Mix provides a clean, fluent API for defining some Webpack build steps\n     | for your Laravel application. By default, we are compiling the Sass\n     | file for your application, as well as bundling up your JS files.\n     |\n     */\n     \n    mix.js('resources/assets/js/app.js', 'public/js')\n  ```  \n\nThe code above builds, compiles and bundles all our javascript code into a single js file created automatically in `public/js` directory.\n\nNow create this file `assets/js/bootstrap.js` and paste this code inside: \n\n``` \n    window._ = require('lodash');\n    \n    window.axios = require('axios');\n    \n    window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n    window.axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n    window.axios.defaults.headers.common.crossDomain = true;\n    window.axios.defaults.baseURL = '/';\n    \n    let token = document.head.querySelector('meta[name=\"csrf-token\"]');\n    \n    if (token) {\n      window.axios.defaults.headers.common['X-CSRF-TOKEN'] = token.content;\n    } else {\n      console.error('CSRF token not found: https://adonisjs.com/docs/4.1/csrf');\n    }\n    \n    window.Pusher = require('pusher-js');\n```   \n\nYou will notice we require dependencies to build our app. We also globally registered some headers to the axios library in order to handle some security issues and to tackle in a proper way our API endpoints. These headers enable respectively ajax request, define `Content-Type` for our post requests, CORS and register the CSRF token.\n\nNext, create this file:  `assets/js/app.js` and paste the following inside:\n\n\n```\n    require('./bootstrap')\n```\n\nWhen we import our `bootstrap.js` file , laravel-mix will compile our `app.js` file.\nOur app is now ready to use laravel-mix for building and compiling our assets. By running this command:  `npm run asset-dev` you should see a `public/js/app.js` file after the build process. Great!\n\n\n## Set up the database and create the migration\n\nWe’ll use a MySQL database for storage in this tutorial. Open your `.env` file and update the database section with your own identifiers: \n\n```\n    DB_CONNECTION=mysql\n    DB_HOST=127.0.0.1\n    DB_PORT=3306\n    DB_USER=your_database_user\n    DB_PASSWORD=your_dtabase_password\n    DB_DATABASE=your_database_name\n```\nOpen your terminal and run this command to generate our `Product` model as well as its corresponding controller and migration file which will be used to build the schema of our products table: \n\n```\n    adonis make:model Product -mc\n```\nInside your product migration file copy and paste this code:\n\n```\n    //../database/migrations/*_product_schema.js\n    'use strict'\n    \n    const Schema = use('Schema')\n    \n    class ProductSchema extends Schema {\n      up() {\n        this.create('products', (table) =\u003e {\n          table.increments()\n          table.string('name')\n          table.integer('price')\n          table.string('image')\n          table.string('description')\n          table.timestamps()\n        })\n      }\n    \n      down() {\n        this.drop('products')\n      }\n    }\n    \n    module.exports = ProductSchema\n ```   \n\nThis code is pretty similar to what we are accustomed to in Laravel migration. You can see we defined our products table fields as: \n\n- name\n- price\n- image\n- description\n\nThe `increments()` will create an `id` field with `Auto Increment` and set it as `Primary key`. The `timestamps()` will create the `created_at` and `updated_at` fields respectively.\n\nNow if your run this command:  `adonis migration:run` in your terminal it will create a products table in your database. I recommend you to import [this schema](https://drive.google.com/open?id=183qhkcqYxsqWnb2CX2JrZMJUZwbmK7NE) in your database to create and populate your products table with dummy data.\n\n\n## Define routes and create the controller\n\nIn this part we’ll create our routes and define controller functions responsible for handling our HTTP requests.\nWe are going to create 3 basic routes for our application, one for rendering our app view, one for search query and another one for fetching products from our database.\nGo to the `start/routes.js` file and replace the content with:\n\n\n```    \n    'use strict'\n    \n    const Route = use('Route')\n    \n    Route.get('/', 'ProductController.index')\n    \n    Route.group(() =\u003e {\n      Route.get('/products', 'ProductController.get')\n      Route.get('/search', 'ProductController.search')\n    }).prefix('api')\n  ```  \n\nThis block pulls in `Route` service provider.\nRoutes defining in Adonis is similar to the Laravel methodology and you should not have any problems if you have worked with Laravel. We prefixed two of our routes with `api` to help remind us that they are api endpoints.\n\nNext let’s create our controller functions. Open your `ProductController.js`  file and paste the following:\n\n```\n    'use strict'\n    const Event = use('Event')\n    const Product = use('App/Models/Product')\n    \n    class ProductController {\n    \n      async index({view}) {\n        return view.render('search')\n      }\n    \n      async get({response}) {\n        let products = await Product.all()\n        return response.json(products)\n      }\n    \n      async search({params, request, response}) {\n    \n        // console.log(request.input('query'))\n        let query = request.input('query')\n    \n        let products = await Product.query().where('name', 'like', '%' + query + '%')\n          .orWhere('description', 'like', '%' + query + '%').fetch()\n    \n        Event.fire('search::results', products.toJSON())\n    \n        return response.json('ok')\n      }\n    \n    }\n    \n    module.exports = ProductController\n ```   \n\nFirst lines import `Event` service provider and `Product` model\nYou can notice 3 functions in the code above:\n\n- `index` renders the `search.edge` file in the `resources/views` directory (which is where views are stored in Adonis).\n- `get` fetches products from our database and returns them in a JSON format\n- `search` gets the query sent in the request and returns every product whose name or description contains it, and returns `ok` as the response.  We also fire an event named  `search::results` with the query results in a JSON format. We can listen to this event and manipulate the data it carries.\n\n\n\n## Pusher setup\n\nPusher is a hosted cloud service that makes it super-easy to add realtime data and functionality to web and mobile applications. Pusher is an abstracted real-time layer between clients and servers.\nFirst, let's setup Pusher for our application. Head over to [Pusher](https://www.pusher.com) and create an account. You can sign in if you already have a account.\n\nNext, create a new Pusher app instance. This registration provides credentials which can be used to communicate with the created Pusher instance. Copy the App ID, Key, Secret, and Cluster from the App Keys section and put them in the `.env`  file located at you project root:\n\n```\n    //.env\n        PUSHER_APP_KEY=\u003cAPP_KEY\u003e\n        PUSHER_APP_SECRET=\u003cAPP_SECRET\u003e\n        PUSHER_APP_ID=\u003cAPP_ID\u003e\n        PUSHER_APP_CLUSTER=\u003cAPP_CLUSTER\u003e\n```\n\n## Emit event with Pusher channels\n\nCreate a file name `event.js` in the `start` directory . In this file we’ll create an event which will be fired every time we need to send a message via Pusher channels, and in our use case we’ll send the search results via Pusher channels.\n\n```\n    //events.js\n    \n    const Pusher = use('Pusher')\n    const Event = use('Event');\n    const Env = use('Env');\n    \n    // set up Pusher\n    let pusher = new Pusher({\n      appId: Env.get('PUSHER_APP_ID'),\n      key: Env.get('PUSHER_APP_KEY'),\n      secret: Env.get('PUSHER_APP_SECRET'),\n      cluster: Env.get('PUSHER_APP_CLUSTER'),\n      encrypted: false\n    });\n    \n    //listening to events and send data with Pusher channels\n    Event.when('search::results', async (products) =\u003e {\n      pusher.trigger('search-channel', 'results', {\n        products\n      })\n    \n    });\n ```   \n\nWe need to pull in the `Event`, `Pusher` (from adonis-pusher we installed earlier in the tutorial) and `Env` service providers. Next, we create a Pusher instance and configured with the credentials that were received after creating a Pusher account.\n\nNext, we registered a listener for the `search::results`  event, after which we initialize and configure Pusher. This event was registered in the `ProductController.search`  function we created above to handle the search request.\n\nWhen we are done with the pusher configuration, we trigger a `results` event on the `search-channel` with the `trigger` method.\n\n\n\n## Set up Vuex store\n\nWe’ll be using the [Vuex](https://vuex.vuejs.org) library to centralize our data and control the way it is mutated throughout our application. To make things simple, I’ll redirect you to an earlier [tutorial](https://pusher.com/search-laravel-vue) I wrote for how to setup Vuex.\n\n\n## Building Vue components\n\nWe’ll build three Vue components for our app, a `Searchbar` component, a `Product` component and a `Products` component, each of them responsible for a single functionality.\n\nFor the first two components  `Searchbar.vue` and `Product.vue` I’ll also refer you to [my tutorial on Laravel, Vue and Pusher](https://pusher.com/tutorials/search-laravel-vue#building-vue-components) as nothing changes about these components logic. We’ll be using the same code.\n\n**Create the Products.vue component**\nThis component will render products items from database. It’s that simple.\nSo create your  `Products.vue` component and paste this code inside:\n\n```\n  //../resources/js/components/Products.vue\n    \n    \u003ctemplate\u003e\n      \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row\" v-if=\"products.length\u003e 0\" v-for=\"products in groupedProducts\"\u003e\n          \u003cdiv class=\"col-md-3 col-sm-6\" v-for=\"product in products\"\u003e\n            \u003cproduct class=\"animated fadeIn\" :product=\"product\"\u003e\u003c/product\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"col w-100\"\u003e\u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv v-else \u003e\n          \u003cp class=\"text-center\"\u003eNo items\u003c/p\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \n    \u003c!--\u003cscript src=\"\"\u003e\u003c/script\u003e--\u003e\n    \u003cscript\u003e\n      import {mapGetters} from 'vuex'\n      import product from '../components/Product'\n    \n      // const Pusher = require('pusher')\n    \n      export default {\n        name: \"Products\",\n        components: {\n          product\n        },\n        mounted() {\n          this.$store.dispatch('GET_PRODUCTS')\n    \n          let pusher = new Pusher('aac7493e27ef97acdfc6', {\n            cluster: 'eu',\n            encrypted: false\n          });\n    \n          //Subscribe to the channel we specified in our Adonis Application\n          let channel = pusher.subscribe('search-channel')\n    \n          channel.bind('results', (data) =\u003e {\n            this.$store.commit('SET_PRODUCTS', data.products)\n          })\n    \n        },\n        computed: {\n          groupedProducts() {\n            return _.chunk(this.products, 4);\n          },\n          ...mapGetters([\n            'products'\n          ])\n        }\n      }\n    \u003c/script\u003e\n ```\n\nFor a deeper explanation of this component, please refer to this [section of my tutorial](https://pusher.com/tutorials/search-laravel) \nas nothing changes much except we initialize a Pusher instance using the credentials we obtained earlier when we were creating our Pusher app. Next we will subscribe to the `search-channel` and listen to the `results` event in order to commit the `SET_PRODUCTS` mutation with the data pulled in by the event.\n\n\n## Finalize the app\n\nNow, let’s create our `search.edge` file which contains our three Vue.js components. Paste this code inside:\n \n```\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"UTF-8\"/\u003e\n      \u003ctitle\u003eRealtime search with Adonis and Pusher\u003c/title\u003e\n      \u003cmeta name=\"csrf-token\" content=\"{{csrfToken}}\"\u003e\n    \n      \u003cmeta name=\"viewport\"\n            content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\"\u003e\n    \n      \u003clink rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.3.1/css/all.css\"\n            integrity=\"sha384-mzrmE5qonljUremFsqc01SB46JvROS7bZs3IO2EmfFsd15uHvIt+Y8vEf7N7fWAU\" crossorigin=\"anonymous\"\u003e\n    \n      \u003clink href=\"https://fonts.googleapis.com/css?family=Montserrat\" rel=\"stylesheet\"\u003e\n    \n      \u003c!-- Bootstrap core CSS --\u003e\n      \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css\"\n            integrity=\"sha384-9gVQ4dYFwwWSjIDZnLEWnxCjeSWFphJiwGPXr1jddIhOegiu1FwO5qRGvFXOdJZ4\" crossorigin=\"anonymous\"\u003e\n    \n      \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.5.2/animate.min.css\"/\u003e\n      \u003c!--{{ style('style') }}--\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \n    \u003cdiv id=\"app\"\u003e\n    \n      \u003cdiv class=\"container\"\u003e\n        \u003ch5 class=\"text-center\" style=\"margin-top: 32px\"\u003eRealtime search feature with Adonis and Pusher\u003c/h5\u003e\n        \u003cbr\u003e\u003cbr\u003e\n        \u003csearchbar\u003e\u003c/searchbar\u003e\n        \u003cproducts\u003e\u003c/products\u003e\n      \u003c/div\u003e\n    \n    \u003c/div\u003e\n    {{ script('js/app.js') }}\n    \n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nWe are almost done! Now open your terminal and run `npm run asset-dev` to build your app in a proper way. This can take a few seconds. After this step, run `adonis serve` `--``dev` if it wasnt’ done and open your browser to `localhost:3333`  to see if your app is working fine. Try searching for a product name or its description in the search bar, you should get realtime results for your search. You are now a boss 😎.\n\n\n## Conclusion\n\nIn this tutorial we’ve created a realtime search engine using Adonis, Vue.js, and Pusher to provide realtime functionality. Adonis is a great framework as it enhances developer productivity and allows us to quickly build apps. Combined with Pusher channels, you can build really cool realtime apps with Adonis.js. You can find the full source code for this tutorial on [GitHub](https://github.com/Ethiel97/realtime_search_adonis_pusher) here and can think of new ideas to extend the application. It’ll be fun to see what you come up with!\nThe source code for this tutorial is available on [GitHub](https://github.com/Ethiel97/realtime_search_adonis_pusher).\n\n","metaTitle":"Build realtime search with Adonis.js, Vue.js and Pusher","metaDescription":"This tutorial will help you build a realtime product search feature using Pusher Channels, Adonis.js and Vue.js"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"61Q4pQ6EV26yOM4AY000i4","type":"Entry","createdAt":"2018-12-07T22:47:55.142Z","updatedAt":"2018-12-07T22:47:55.142Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a live commenting system with Adonis.js and Vue.js","url":"live-commenting-adonis-vue","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Ok7hdNlHGsaAME2MCGEeq","type":"Entry","createdAt":"2018-09-17T17:53:10.446Z","updatedAt":"2018-09-17T17:53:10.446Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ethiel Adiassa","url":"ethiel-adiassa","email":"ethiel97@gmail.com","twitter":"https://twitter.com/ethiel97","github":"https://github.com/ethiel97","guestWriter":true}}],"projectRepo":"https://github.com/Ethiel97/comments-adonis-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2AjUjeRuA4oUAcYYI6ck6i","type":"Entry","createdAt":"2018-09-28T17:24:15.392Z","updatedAt":"2018-09-28T17:24:15.392Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Adonis.js","url":"adonis-js","type":"library","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-12-07","description":"This short tutorial will show you how to create a live commenting system using Adonis.js and Vue.js. Users will be able to respond to blog posts, with their comments displaying in realtime.","prerequisite":"You will need Node and MySQL set up on your machine.","content":"## Introduction\n\nIn this tutorial, we’ll see how to build a live commenting system using Adonis.js on the backend, Vue.js to dynamise our views and Pusher to add the realtime commenting feature in our app. As users submit comments, they will be added and viewed instantly.\n\nPages that force you to reload them to view new comments can be annoying for users, especially since they don't even know if their even is reply to your comment yet.  This poor user experience can cause users to abandon your site.\n\n## Demo\n\nHere is the final result of our app:\n\n![adonis-vue-commenting-demo-1](//images.ctfassets.net/1es3ne0caaid/5KpsGw6xwWAIOmAOCeYsgs/f52ccacc21092883578bbb356f24772d/adonis-vue-commenting-demo-1.gif)\n\n## Prerequisites\n\nIn order to follow this tutorial, knowledge of Javascript and Node.js is required. You should also have the following installed on your machine: \n\n\n- [Node.js](https://nodejs.org)\n- NPM(bundled with Node.js installer) or [Yarn](https://yarnpkg.com/)\n- MySQL database \n- [Vue.js](https://vuejs.org)\n- [Vuex](https://vuex.vuejs.org)\n\n\n## Set up our Adonis.js project\n\nBefore any step we should install **Adonis.js** on our local machine if this is not done yet. Open your terminal and run this command in order to do so: \n\n```\n    # if you don't have Adonis CLI installed on your machine. \n      npm install -g @adonisjs/cli\n      \n    # Create a new adonis app and move into the app directory\n    $ adonis new adonis-comments-pusher \u0026\u0026 cd adonis-comments-pusher\n```\n\nNow start the server and test if everything is working fine: \n\n```\n    adonis serve --dev\n    \n    2018-09-23T12:25:30.326Z - info: serving app on http://127.0.0.1:3333\n```\n\nIf the steps above were successful, open your browser and make a request to : http://127.0.0.1:3333. \n\nYou should see the following:\n\n![adonis-push-notifications-default](//images.ctfassets.net/1es3ne0caaid/37HYn8vXdmAwKuMYgeYioQ/83699f02e9831c5ead873eacf7f5174a/adonis-push-notifications-default.png)\n\n\n## Set up Pusher and install other dependencies\n\nHead over to [Pusher](https://www.pusher.com) and create an account or sign in if you already have a account.\n\nNext, create a new Pusher app instance. This registration provides credentials which can be used to communicate with the created Pusher instance. Copy the App ID, Key, Secret, and Cluster from the App Keys section and put them in the `.env`  file located at you project root:\n\n```\n    //.env\n        PUSHER_APP_KEY=\u003cAPP_KEY\u003e\n        PUSHER_APP_SECRET=\u003cAPP_SECRET\u003e\n        PUSHER_APP_ID=\u003cAPP_ID\u003e\n        PUSHER_APP_CLUSTER=\u003cAPP_CLUSTER\u003e\n```\n\nWe’ll use these keys further in this tutorial to link Pusher with our Adonis project.\n\nNext, we need to install the Pusher SDK as well as other dependencies we’ll need to build our app.\nWe won’t use the Pusher SDK directly but instead use [a Pusher provider for Adonis](https://github.com/Perafan18/adonis-pusher). This provider enables us to use easily the Pusher SDK with the Adonis.js ecosystem.\nBut we should first install the Pusher SDK by running this command:  \n\n```\n    #if you want to use npm\n    npm install pusher\n    \n    #or if you prefer Yarn\n    yarn add pusher\n```\n\nNow, you can install the Pusher provider for Adonis with this command:\n\n```\n    #if you want to use npm\n    npm install adonis-pusher\n    \n    #or if you prefer Yarn\n    yarn add adonis-pusher\n```\n\nYou will need to add the provider to AdonisJS at `start/app.js`:\n\n``` javascript\n    const providers = [\n        ...\n        'adonis-pusher/providers/Pusher'\n    ]\n```\n\nLast, let’s install other dependencies that we’ll use to build our app. \n\nRun this command in your terminal:\n\n```\n    #if you want to use npm\n    npm install vue vuex axios laravel-mix pusher-js  mysql cross-env\n    \n    #or if you prefer Yarn\n    yarn add vue vuex axios laravel-mix pusher-js mysql cross-env\n```\n\nDependencies we will use:\n\n- `vue` and `vuex` respectively to build the frontend of our app and manage our data store,\n- `axios` to make HTTP requests to our API endpoints\n- [laravel-mix](https://github.com/JeffreyWay/laravel-mix) to provide a clean, fluent API for defining basic [webpack](http://github.com/webpack/webpack) build steps \n- `pusher-js` to listen to events emitted from our server\n- `mysql`, Node.js driver for MySQL to set up our database as this app will use MySQL for storage\n- `cross-env` to run scripts that set and use environment variables across platforms\n\n\n## Set up our build workflow\n\nWe’ll use laravel-mix to build and compile our application assets in a fluent way. But first we must tell our app to use it for that purpose. Open your `package.json` file and paste the following in the scripts section: \n\n\n```\n    \"asset-dev\": \"cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\",\n    \"asset-watch\": \"cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --watch --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\",\n    \"asset-watch-poll\": \"npm run watch -- --watch-poll\",\n    \"asset-hot\": \"cross-env NODE_ENV=development node_modules/webpack-dev-server/bin/webpack-dev-server.js --inline --hot --config=node_modules/laravel-mix/setup/webpack.config.js\",\n    \"asset-prod\": \"cross-env NODE_ENV=production node_modules/webpack/bin/webpack.js --no-progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\"\n```    \n\nAfter that create a `webpack.mix.js` file at the root of your project and paste this code:\n\n\n``` javascript    \n    const mix = require('laravel-mix');\n    \n    mix.setPublicPath('public');\n    /*\n     |--------------------------------------------------------------------------\n     | Mix Asset Management\n     |--------------------------------------------------------------------------\n     |\n     | Mix provides a clean, fluent API for defining some Webpack build steps\n     | for your Laravel application. By default, we are compiling the Sass\n     | file for your application, as well as bundling up your JS files.\n     |\n     */\n     \n    mix.js('resources/assets/js/app.js', 'public/js')\n```    \n\nThe code above builds, compiles and bundles all our javascript code into a single js file created automatically in `public/js` directory.\n\nNow create this file `assets/js/bootstrap.js` and paste this code inside: \n\n\n``` javascript    \n    window._ = require('lodash');\n    \n    window.axios = require('axios');\n    \n    window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n    window.axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n    window.axios.defaults.headers.common.crossDomain = true;\n    window.axios.defaults.baseURL = '/api';\n    \n    let token = document.head.querySelector('meta[name=\"csrf-token\"]');\n    \n    if (token) {\n      window.axios.defaults.headers.common['X-CSRF-TOKEN'] = token.content;\n    } else {\n      console.error('CSRF token not found: https://adonisjs.com/docs/4.1/csrf');\n    }\n    \n    window.Pusher = require('pusher-js');\n```    \n\nYou will notice we require dependencies to build our app. We also globally registered some headers to the axios library in order to handle some security issues and to tackle in a proper way our API endpoints. These headers enable respectively ajax request, define `Content-Type` for our post requests, CORS and register the CSRF token.\n\nNext, create this file:  `assets/js/app.js` and paste the following inside:\n\n\n``` javascript    \n    require('./bootstrap')\n```    \n\nWhen we import our `bootstrap.js` file , laravel-mix will compile our `app.js` file.\n\nOur app is now ready to use laravel-mix for building and compiling our assets. By running this command:  `npm run asset-dev` you should see a `public/js/app.js` file after the build process. Great!\n\n\n## Build our comment model and migration\n\nFirst we need to set up our database, we’ll use a MySQL database for storage in this tutorial. Open your `.env` file and update the database section with your own identifiers: \n\n```\n    DB_CONNECTION=mysql\n    DB_HOST=127.0.0.1\n    DB_PORT=3306\n    DB_USER=your_database_user\n    DB_PASSWORD=your_dtabase_password\n    DB_DATABASE=your_database_name\n```\n\nNext, open your terminal and run the command below to generate our `Comment` model as well as its corresponding controller and migration file which will be used to build the schema for our comments table: \n\n```\n    adonis make:model Comment -mc\n```\n\nInside your product migration file, copy and paste this code:\n\n``` javascript\n    //../database/migrations/*_comment_schema.js\n    'use strict'\n    \n    const Schema = use('Schema')\n    \n    class CommentSchema extends Schema {\n      up() {\n        this.create('comments', (table) =\u003e {\n          table.increments()\n          table.string('content')\n          table.integer('author')\n          table.timestamps()\n        })\n      }\n    \n      down() {\n        this.drop('comments')\n      }\n    }\n    \n    module.exports = CommentSchema\n```    \n\nOur comment schema is pretty straightforward. \nYou can see we defined our comments table fields as: \n\n- content: to hold the comment text\n- author: to contain the author’s name\n\nThe `increments()` will create an `id` field with `Auto Increment` and set it as `Primary key`. The `timestamps()` will create the `created_at` and `updated_at` fields respectively.\n\nNow if your run this command:  `adonis migration:run` in your terminal it will create a comments table in your database.\n\n\n## Define routes and create the controller\n\nIn this part of the tutorial, we’ll create our routes and define controller functions responsible for handling our HTTP requests.\n\nWe’ll create three basic routes for our application, one for rendering our app view, one for fetching comments from the database and the last one for storing comments into the database.\n\nGo to the `start/routes.js` file and replace the content with:\n\n``` javascript\n    const Route = use('Route')\n    \n    Route.get('/', 'CommentController.index')\n    \n    Route.group(() =\u003e {\n      Route.get('/comments', 'CommentController.fetchComments')\n      Route.post('/comments', 'CommentController.store')\n    }).prefix('api')\n```    \n\nThis block pulls in `Route` service provider.\nRoutes defining in Adonis is similar to the Laravel methodology and you should not have any problems if you have worked with Laravel. We prefixed two of our routes with `api` to help remind us that they are api endpoints.\n\nNext let’s create our controller functions. Open your  `CommentController.js`  file and paste the following:\n\n``` javascript\n    'use strict'\n    \n    const Comment = use('App/Models/Comment')\n    const Event = use('Event')\n    \n    class CommentController {\n    \n      async index({view}) {\n        return view.render('comment')\n      }\n    \n      async fetchComments({request, response}) {\n        let comments = await Comment.all()\n        return response.json(comments)\n      }\n    \n      async store({request, response}) {\n        try {\n          let comment = await Comment.create(request.all())\n    \n          Event.fire('new::comment', comment.toJSON())\n          return response.json(\"ok\")\n        } catch (e) {\n          console.log(e)\n        }\n    \n      }\n    \n    }\n    \n    module.exports = CommentController\n```\n\nThe first lines import `Event` service provider and the  `Comment` model.\n\nYou can notice three functions in the code above:\n\n- `index` renders the `comment.edge` file(that we’ll create later in this tutorial) in the `resources/views` directory (which is where views are stored in Adonis).\n- `fetchComments`  fetches comments from our database and returns them in a JSON format\n- `store`  creates a new `Comment` instance with the request queries. We also fire an event named  `new::comment`  with the new instance  in a JSON format. We can listen to this event and manipulate the data it carries.\n\n\n## Emit event with Pusher channels\n\nCreate a filename `event.js` in the `start` directory. In this file we’ll create an event which will be fired every time we need to send a message via Pusher channels, and as it happens a posted comment via Pusher channels.\n\n``` javascript\n    //events.js\n    \n    const Pusher = use('Pusher')\n    const Event = use('Event');\n    const Env = use('Env');\n    \n    // set up Pusher\n    let pusher = new Pusher({\n      appId: Env.get('PUSHER_APP_ID'),\n      key: Env.get('PUSHER_APP_KEY'),\n      secret: Env.get('PUSHER_APP_SECRET'),\n      cluster: Env.get('PUSHER_APP_CLUSTER'),\n      encrypted: false\n    });\n    \n    //fire new event\n    Event.when('new::comment', async (comment) =\u003e {\n      pusher.trigger('comment-channel', 'new-comment', {\n        comment\n      })\n    });\n```\n    \n\nWe need to pull in the `Event`, `Pusher` (using the adonis-pusher package we installed earlier) and `Env` service providers.\n\nNext, we registered a listener for the `new::comment`  event, after which we initialize and configure Pusher. This event was registered in the `CommentController.store`  function we created above to handle comment creation.\n\nWhen we are done with the pusher configuration, we trigger a `new-comment` event on the `comment-channel` with the `trigger` method.\n\n\n\n## Set up Vuex store\n\nWe’ll be using the [Vuex](https://vuex.vuejs.org) library to centralize our data and control the way it is mutated throughout our application.\n\n### Create our state\n\nVuex state is a single object that contains all our application data. So let’s create  `../resources/js/store/state.js`  and paste this code inside:\n\n\n``` javascript    \n    let state = {\n        comments: []\n    }\n    export default  state\n```\n\nThe `comments` key is an array responsible to store our database comments.\n\n### Create our getters\n\nWith help of getters we can compute derived based on our data store state. Create  `../resources/js/store/getters.js`  and paste this code inside\n\n``` javascript\n    let getters = {\n        comments: state =\u003e {\n            return state.comments\n        }\n    }\n    \n    export default getters\n```\n\n### Create our mutations\n\nMutations allow us to perform some changes on our data. Create `../resources/js/store/mutations.js` and paste this piece of code inside:\n\n``` javascript\n    let mutations = {\n      GET_COMMENTS(state, comments) {\n        state.comments = comments\n      },\n      ADD_COMMENT(state, comment) {\n        state.comments = [...state.comments, comment]\n      }\n    }\n    \n    export default mutations\n```\n\nOur `mutations` object has 2 functions:\n\n- `GET_COMMENTS` is responsible for getting our comments data from a database or webserver.\n- `ADD_COMMENT` is responsible for adding a new comment to our comments array using the [ES6 spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax).\n\n\n### Create our actions\n\nVuex actions allow us to perform asynchronous operations over our data. Create the file `../resources/js/store/actions.js`  and  paste the following code:\n\n``` javascript\n    let actions = {\n      ADD_COMMENT({commit}, comment) {\n    \n        return new Promise((resolve, reject) =\u003e {\n          axios.post(`/comments`, comment)\n            .then(response =\u003e {\n              resolve(response)\n            }).catch(err =\u003e {\n            reject(err)\n          })\n        })\n    \n      },\n    \n      GET_COMMENTS({commit}) {\n        axios.get('/comments')\n          .then(res =\u003e {\n            {\n              commit('GET_COMMENTS', res.data)\n            }\n          })\n          .catch(err =\u003e {\n            console.log(err)\n          })\n      }\n    }\n    \n    export default actions\n```\n\nWe have defined two actions and each of them is responsible for a single operation, either comments post or comments fetch. They both perform asynchronous calls to our API routes. \n\n\n- `ADD_COMMENT`  sends a post request to our `/api/comments` with the new comment to create and returns a new promise (later in this tutorial we’ll handle the returned promise). This action is dispatched whenever a user submits a comment.\n\n\n- `GET_COMMENTS` makes a get request to our `api/comments` endpoint to get our database comments and commits the request result with `GET_COMMENTS` mutation.\n\n\n### Set up our store with Vue\n\nCreate the file `../resources/assets/js/store/index.js` and paste this code inside:\n\n\n``` javascript\n    import Vue from 'vue'\n    import Vuex from 'vuex'\n    import actions from './actions'\n    import mutations from './mutations'\n    import getters from './getters'\n    import state from \"./state\";\n    \n    Vue.use(Vuex);\n    \n    export default new Vuex.Store({\n        state,\n        mutations,\n        getters,\n        actions\n    })\n```\n\nNext, we will export our store and add it to the Vue instance. \nAdd this code to your `../resouces/js/app.js`  file.\n\n``` javascript\n    require('./bootstrap')\n    \n    window.Vue = require('vue');\n    \n    import store from './store/index'\n    \n    Vue.component('comment', require('./components/Comment'));\n    Vue.component('comments', require('./components/Comments'))\n    Vue.component('new-comment', require('./components/NewComment'))\n    \n    const app = new Vue({\n      el: '#app',\n      store\n    });\n```\n\nThe code above globally registers three Vue components, `Comment.vue` ,`Comments.vue` and  `NewComment.vue` that we’ll build in the next part of this tutorial.\n\n\n## Building Vue components\n\nWe’ll build three Vue components for our app, the `Comment.vue` component, the  `Comments.vue` and the  `NewComment.vue` component, each of them responsible for a single functionality.\n\n### Create the Comment.vue component\n\nThe  `Comment.vue` component is responsible for encapsulating details about a single comment instance from the database and rendering it in a proper and styled way.\nPaste the following inside your `Comment.vue` component.\n\n``` html\n    //../resources/assets/js/components/Comment.vue\n    \n    \u003ctemplate\u003e\n      \u003cli class=\"comment-wrapper animate slideInLeft \"\u003e\n        \u003cdiv class=\"profile\"\u003e\n          \u003cimg :src=\"avatar\" alt=\"\"\u003e\u003c/div\u003e\n        \u003cdiv class=\"msg has-shadow\"\u003e\n          \u003cdiv class=\"msg-body\"\u003e\u003cp class=\"name\"\u003e{{comment.author}} \u003cspan class=\"date\"\u003e{{posted_at}}\u003c/span\u003e\u003c/p\u003e\n            \u003cp class=\"content\"\u003e{{comment.content}}\u003c/p\u003e\u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/li\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n      export default {\n        name: \"Comment\",\n        props: ['comment'],\n        computed: {\n          posted_at() {\n            return moment(this.comment.created_at).format('MMMM Do YYYY')\n          },\n          avatar() {\n            return `https://api.adorable.io/avatars/48/${this.comment.author}@adorable.io.png`\n          }\n        }\n      }\n    \u003c/script\u003e\n    \n    \u003cstyle lang=\"scss\" scoped\u003e\n      .comment-wrapper {\n        list-style: none;\n        text-align: left;\n        overflow: hidden;\n        margin-bottom: 2em;\n        padding: .4em;\n    \n        .profile {\n          width: 80px;\n          float: left;\n        }\n    \n        .msg-body {\n          padding: .8em;\n          color: #666;\n          line-height: 1.5;\n        }\n    \n        .msg {\n          width: 86%;\n          float: left;\n          background-color: #fff;\n          border-radius: 0 5px 5px 5px;\n          position: relative;\n          \u0026::after {\n            content: \" \";\n            position: absolute;\n            left: -13px;\n            top: 0;\n            border: 14px solid transparent;\n            border-top-color: #fff;\n          }\n        }\n    \n        .date {\n          float: right;\n        }\n        .name {\n          margin: 0;\n          color: #999;\n          font-weight: 700;\n          font-size: .8em;\n        }\n    \n        p:last-child {\n          margin-top: .6em;\n          margin-bottom: 0;\n        }\n    . \n      }\n    \n    \n    \u003c/style\u003e\n```\n\nOur  `Comment.vue` component takes a `comment` property whose details we simply render in the component body.  We also defined two `computed` properties, `posted_at`  to parse the Moment.js library with the `comment` posted date, and `avatar` to generate an avatar for the comment author using [this API](http://avatars.adorable.io).\n\nIn the `style` block we’ve defined some styles to our comment component in order to make things look more beautiful.\n\n### Create the Comments.vue component\n\nThis component will render comment items from the database.\nCreate your  `Comments.vue` component and paste this code inside:\n\n``` html\n    ../resources/assets/js/components/Comments.vue\n    \n    \u003ctemplate\u003e\n      \u003cdiv class=\"container\"\u003e\n        \u003cul class=\"comment-list\"\u003e\n          \u003cComment :key=\"comment.id\" v-for=\"comment in comments\" :comment=\"comment\"\u003e\u003c/Comment\u003e\n        \u003c/ul\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n      import {mapGetters} from 'vuex'\n      import Comment from './Comment'\n    \n      export default {\n        name: \"Comments\",\n        components: {Comment},\n        mounted() {\n          this.$store.dispatch('GET_COMMENTS')\n    \n         //use your own credentials you get from Pusher\n          let pusher = new Pusher(YOUR_PUSHER_APP_ID, {\n            cluster: YOUR_PUSHER_CLUSTER,\n            encrypted: false\n          });\n    \n          //Subscribe to the channel we specified in our Adonis Application\n          let channel = pusher.subscribe('comment-channel')\n    \n          channel.bind('new-comment', (data) =\u003e {\n            this.$store.commit('ADD_COMMENT', data.comment)\n          })\n        },\n        computed: {\n          ...mapGetters([\n            'comments'\n          ])\n        }\n      }\n    \u003c/script\u003e\n    \n    \u003cstyle scoped\u003e\n      .comment-list {\n        padding: 1em 0;\n        margin-bottom: 15px;\n      }\n    \n    \u003c/style\u003e\n```\n\n \nIn the `template` section of this code, we loop through our comments array and render for each loop iteration a `Comment.vue` component imported with the current comment iterated as a property.\n\nIn the  `mounted` hook function we dispatched the  `GET_COMMENTS` action. The action defined above sends a get request to our database to fetch posted comments. Then, we initialized a Pusher instance using the credentials obtained earlier when creating our Pusher app. Next, we subscribed to the `comment-channel` and listened to the `new-comment` event in order to commit the `ADD_COMMENT` mutation with the new comment pulled in by the event.\n\nWe also used the Vuex helper function  `…mapGetters()` to access our comments state as `computed` property. In this component we also defined some styles to beautify our interface in the `style` block.\n\n\n### Create the New-Comment.vue component\n\nOur third component is responsible for displaying a form to our users for comment posting. It should also send a request to our database when a user submits his comment. Let’s create the `New-Comment.vue` component, copy and paste this code inside:\n\n\n``` html    \n    \u003ctemplate\u003e\n      \u003cdiv id=\"commentForm\" class=\"box has-shadow has-background-white\"\u003e\n    \n        \u003cform @keyup.enter=\"postComment\"\u003e\n          \u003cdiv class=\"field has-margin-top\"\u003e\n    \n            \u003cdiv class=\"field has-margin-top\"\u003e\n              \u003clabel class=\"label\"\u003eYour name\u003c/label\u003e\n              \u003cdiv class=\"control\"\u003e\n                \u003cinput type=\"text\" placeholder=\"Your name\" class=\"input is-medium\" v-model=\"comment.author\"\u003e\n              \u003c/div\u003e\n    \n            \u003c/div\u003e\n            \u003cdiv class=\"field has-margin-top\"\u003e\n              \u003clabel class=\"label\"\u003eYour comment\u003c/label\u003e\n              \u003cdiv class=\"control\"\u003e\n                            \u003ctextarea\n                              style=\"height:100px;\"\n                              name=\"comment\"\n                              class=\"input is-medium\" autocomplete=\"true\" v-model=\"comment.content\"\n                              placeholder=\"lorem ipsum\"\u003e\u003c/textarea\u003e\n              \u003c/div\u003e\n    \n            \u003c/div\u003e\n            \u003cdiv class=\"control has-margin-top\"\u003e\n              \u003cbutton style=\"background-color: #47b784\" :class=\"{'is-loading': submit}\"\n                      class=\"button has-shadow is-medium has-text-white\"\n                      :disabled=\"!isValid\"\n                      @click.prevent=\"postComment\"\n                      type=\"submit\"\u003e Submit\n              \u003c/button\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/form\u003e\n        \u003cbr\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n      export default {\n        name: \"NewComment\",\n        data() {\n          return {\n            submit: false,\n            comment: {\n              content: '',\n              author: '',\n            }\n          }\n        },\n        methods: {\n          postComment() {\n            this.submit = true;\n            this.$store.dispatch('ADD_COMMENT', this.comment)\n              .then(response =\u003e {\n                this.submit = false;\n                if (response.data === 'ok')\n                  console.log('success')\n              }).catch(err =\u003e {\n              this.submit = false\n            })\n    \n          },\n        },\n        computed: {\n          isValid() {\n            return this.comment.content !== '' \u0026\u0026 this.comment.author !== ''\n          }\n        }\n      }\n    \u003c/script\u003e\n    \n    \u003cstyle scoped\u003e\n      .has-margin-top {\n        margin-top: 15px;\n      }\n    \n    \u003c/style\u003e\n```\n\nWe bind our `comment` data to our comment content and author name fields using the Vue.js `v-model` directive. We handled the form submission with the `postComment` function inside which we dispatch the `ADD_COMMENT` mutation with the comment data entered by the user. We also defined `isValid`  as a computed property that we use to disable the **submit** button if the two required fields are empty.\n\n\n\n## Finalize the app\n\nNow, let’s create our `comment.edge` file which contains our three Vue.js components. Run this command: `adonis make:view comment`  to create the file. Then paste this code inside: \n\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"UTF-8\"/\u003e\n      \u003ctitle\u003eRealtime search with Adonis and Pusher\u003c/title\u003e\n      \u003cmeta name=\"csrf-token\" content=\"{{csrfToken}}\"\u003e\n    \n      \u003cmeta name=\"viewport\"\n            content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\"\u003e\n    \n      \u003c!-- Bootstrap core CSS --\u003e\n      \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.1/css/bulma.min.css\"/\u003e\n      \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.5.2/animate.min.css\"/\u003e\n    \n      \u003cstyle\u003e\n        html {\n          background: radial-gradient(ellipse at center, #fff 0, #ededfd 100%);\n        }\n    \n        #app {\n          width: 60%;\n          margin: 4rem auto;\n        }\n    \n        .container {\n          margin: 0 auto;\n          position: relative;\n          width: unset;\n        }\n    \n        .question-wrapper {\n          text-align: center;\n        }\n    \n        .has-shadow {\n          box-shadow: 0 4px 8px -2px rgba(0, 0, 0, 0.05) !important;\n        }\n    \n      \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \n    \n    \u003cdiv id=\"app\"\u003e\n    \n      \u003cdiv class=\"container\"\u003e\n    \n        \u003cdiv class=\"question-wrapper\"\u003e\n          \u003cimg width=\"200\" src=\"{{ assetsUrl('images/adonuxt.png') }}\" alt=\"\"\u003e\n          \u003ch5 class=\"is-size-2\" style=\"color: #220052;\"\u003e\n            What do you think about \u003cspan style=\"color: #47b784;\"\u003eAdonuxt\u003c/span\u003e?\u003c/h5\u003e\n          \u003cbr\u003e\n          \u003ca href=\"#commentForm\" class=\"button is-medium has-shadow has-text-white\" style=\"background-color: #47b784\"\u003eComment\u003c/a\u003e\n        \u003c/div\u003e\n    \n        \u003cbr\u003e\u003cbr\u003e\n        \u003ccomments\u003e\u003c/comments\u003e\n        \u003cnew-comment\u003e\u003c/new-comment\u003e\n      \u003c/div\u003e\n    \n    \u003c/div\u003e\n    {{ script('js/app.js') }}\n    \n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nWe are almost done! Now open your terminal and run `npm run asset-dev` to build your app. This can take a few seconds. After this step, run `adonis serve --dev` and open your browser to `localhost:3333`  to see your app working. Try posting a new comment! You should see your comment added in realtime 😎.\n\n![adonis-vue-commenting-demo-1](//images.ctfassets.net/1es3ne0caaid/5KpsGw6xwWAIOmAOCeYsgs/f52ccacc21092883578bbb356f24772d/adonis-vue-commenting-demo-1.gif)\n\n\n## Conclusion\n\nIn this tutorial, we have covered how to create a live commenting system using Adonis.js, Vue.js and Pusher. You can get the full source code [here](https://github.com/Ethiel97/comments-adonis-pusher). ","metaTitle":"Create a live commenting system with Adonis.js and Vue.js","metaDescription":"This short tutorial will show you how to create a live commenting system using Adonis.js and Vue.js. Users will be able to respond to blog posts, with their comments displaying in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"TKcYWbcewS0aiOIQyY0uU","type":"Entry","createdAt":"2018-11-27T21:32:21.715Z","updatedAt":"2018-11-27T21:32:21.715Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a to-do list app with Vue.js and Laravel","url":"todo-vue-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Ok7hdNlHGsaAME2MCGEeq","type":"Entry","createdAt":"2018-09-17T17:53:10.446Z","updatedAt":"2018-09-17T17:53:10.446Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ethiel Adiassa","url":"ethiel-adiassa","email":"ethiel97@gmail.com","twitter":"https://twitter.com/ethiel97","github":"https://github.com/ethiel97","guestWriter":true}}],"projectRepo":"https://github.com/Ethiel97/realtime_todo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-11-27","description":"This brief tutorial shows you how to create a simple to-do list app using Vue and Laravel. The list UI updates in realtime as items are added, completed and removed.","prerequisite":"You will need Laravel 5.7 installed on your machine.","content":"## Introduction\n\nIn this tutorial, we will build a to-do app with Vue.js and Laravel using Pusher to add the realtime functionality. Vue.js is such a great JS framework as it speeds up frontend development and helps achieve more with less code. Laravel on its side is one the most popular and powerful backend frameworks; allied with Vue.js we can build awesome web apps. \nPusher you may know is a collection of hosted APIs to build realtime apps with less code. Now let’s get started!\n\n## Demo\n\nThis is the result of our final working app:\n\n![todo-vue-demo](//images.ctfassets.net/1es3ne0caaid/p2EBbkFfEWqusEuUo02Qk/6f9ee671f0a51c1fce08a9397f9ae88b/todo-vue-demo.gif)\n\n## Prerequisites\n\nIn order to follow this tutorial a basic or good understanding of Vue.js and Laravel is required, as we’ll be using these technologies throughout this tutorial. Also ensure you have npm or Yarn on your machine. \n\nWe’ll be using these tools to build our application:\n\n- [Pusher](https://pusher.com/channels)\n- [Laravel 5.7](https://laravel.com)\n- [Vue.js](https://vuejs.org)\n- [Vuex](https://vuex.vuejs.org)\n- [Laravel CLI](https://laravel.com/docs/5.7/installation) \n\n\n## Pusher setup\n\nHead over to the [Pusher website](https://pusher.com) and sign up for a free account. Select **Create new app** on the sidebar, and hit **Create my app** to create a new app after filling the form.\n\nOnce your app is created, retrieve your credentials from the **API Keys** tab, and make note of them as we’ll use them later in the tutorial.\n\n\n## Initialize the project and install dependencies\n\nTo get started we’ll install a new Laravel application using the Laravel CLI. We’ll run the following command:\n\n```\nlaravel new realtime_todo\n```\n\nOnce the installation is finished run the following command to move to your app directory: \n\n```\ncd realtime_todo\n```\n\nNow we’ll install our node dependencies, first paste this in your `package.json` file: \n\n``` json\n    {\n      \"private\": true,\n      \"scripts\": {\n        \"dev\": \"npm run development\",\n        \"development\": \"cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\",\n        \"watch\": \"npm run development -- --watch\",\n        \"watch-poll\": \"npm run watch -- --watch-poll\",\n        \"hot\": \"cross-env NODE_ENV=development node_modules/webpack-dev-server/bin/webpack-dev-server.js --inline --hot --config=node_modules/laravel-mix/setup/webpack.config.js\",\n        \"prod\": \"npm run production\",\n        \"production\": \"cross-env NODE_ENV=production node_modules/webpack/bin/webpack.js --no-progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\"\n      },\n      \"devDependencies\": {\n        \"axios\": \"^0.18\",\n        \"bootstrap\": \"^4.0.0\",\n        \"cross-env\": \"^5.1\",\n        \"jquery\": \"^3.2\",\n        \"laravel-mix\": \"^2.0\",\n        \"lodash\": \"^4.17.5\",\n        \"popper.js\": \"^1.12\",\n        \"vue\": \"^2.5.7\",\n        \"vuex\": \"^3.0.1\",\n        \"laravel-echo\": \"^1.4.0\",\n        \"pusher-js\": \"^4.2.2\"\n      }\n    }\n```\n\nThen run `npm install` or `yarn` to install the dependencies. It’s up to you.\n\nAfter this step, add the following to your  `.env` file in the root of your project directory. Ensure to replace the placeholders with your keys from Pusher.\n\n``` \n    PUSHER_APP_ID=YOUR_PUSHER_APP_ID\n    PUSHER_APP_KEY=YOUR_PUSHER_APP_KEY\n    PUSHER_APP_SECRET=YOUR_PUSHER_APP_SECRET\n    PUSHER_APP_CLUSTER=YOUR_PUSHER_APP_CLUSTER\n```\n\n\n## Database setup\n\nIn this tutorial, we’ll use SQLite as our database. Create a `database.sqlite` file in the database directory, and amend the .env file like this:\n\n```\n    DB_CONNECTION=sqlite\n    DB_DATABASE=/absolute/path/to/database.sqlite\n```\n\nRefer to this [section on Laravel website](https://laravel.com/docs/5.7/database) for more relevant information.\n\n\n## Building models and seeding our database\n\nNow, let’s build our database structure. We’ll use the Laravel CLI again for that.\nRun this command: \n\n```\nphp artisan make:model Task -mc\n```\n\nThe above command will generate the Task model as well as its migration and its controller `TaskController.php`   for us.\n\nOpen your `Task.php` file and paste this:\n\n``` php\n    //realtime_todo/app/Task.php\n    \n    \u003c?php\n    namespace App;\n    use Illuminate\\Database\\Eloquent\\Model;\n    class Task extends Model\n    {\n        //\n        protected $fillable = ['title','completed'];\n    }\n```\n\n\n\nNext copy and paste this piece of code in your task migration file: \n\n``` php\n    //realtime_todo/database/migrations/*_create_tasks_table.php\n    \n    \u003c?php\n    use Illuminate\\Support\\Facades\\Schema;\n    use Illuminate\\Database\\Schema\\Blueprint;\n    use Illuminate\\Database\\Migrations\\Migration;\n    class CreateTasksTable extends Migration\n    {\n        /**\n        * Run the migrations.\n        *\n        * @return void\n        */\n    \n        public function up() {\n            Schema::create('tasks', function (Blueprint $table) {\n                $table-\u003eincrements('id');\n                $table-\u003estring('title');\n                $table-\u003eboolean('completed')-\u003edefault(false);\n                $table-\u003etimestamps();\n            }\n            );\n        }\n    \n        /**\n        * Reverse the migrations.\n        *\n        * @return void\n        */\n          public function down(){\n            Schema::dropIfExists('tasks');\n        }\n    }\n```\n\n\nThen run `php artisan migrate` to run the migration.\n\n\n## Define routes and create the TaskController\n\nIn this section, we’ll define our app endpoints and define the logic behind our `TaskController.php`\n\nThis is a simple CRUD(create, read, update, delete) over our Task model. So we defined our routes with corresponding functions to handle our browser requests.\nPaste the following into `api.php`:\n\n``` php\n    //realtime_todo/routes/api.php\n    \u003c?php\n    use Illuminate\\Http\\Request;\n    \n    /*\n    --------------------------------------------------------------------------\n    | API Routes\n    |--------------------------------------------------------------------------\n    |\n    | Here is where you can register API routes for your application. These\n    | routes are loaded by the RouteServiceProvider within a group which\n    | is assigned the \"api\" middleware group. Enjoy building your API!\n    |\n    */\n    \n    Route::get('todos','TaskController@fetchAll');\n    Route::post('todos','TaskController@store');\n    Route::delete('todos/{id}','TaskController@delete');\n```\n\nNow let’s define our controller logic. Our controller functions will be responsible for actions to handle when some requests reach our API endpoints.\n\nOpen your `TaskController` file and paste the following code:\n\n``` php\n    //realtime_todo/app/Http/Controllers/TaskController.php\n    \n    \u003c?php\n    \n    namespace App\\Http\\Controllers;\n    use Illuminate\\Http\\Request;\n    use App\\Events\\TaskCreated;\n    use App\\Events\\TaskRemoved;\n    use App\\Task;\n    class TaskController extends Controller\n    {\n        //\n        public function fetchAll(){\n            $tasks = Task::all();\n            //return response()-\u003ejson($tasks);\n            return $tasks;\n        }\n        \n        public function store(Request $request){\n            $task = Task::create($request-\u003eall());\n            broadcast(new TaskCreated($task));\n            return response()-\u003ejson(\"added\");\n        }\n        \n        public function delete($id){\n            $task = Task::find($id);\n            broadcast(new TaskRemoved($task));\n            Task::destroy($id);\n            return response()-\u003ejson(\"deleted\");\n        }\n    }\n```\n\nIn the above code we have three functions `fetchAll`, `store` , and `delete`:\n\n- `fetchAll`:  queries our database to return all our tasks/to-dos\n- `store`: creates a new to-do with request params(title and task status)\n- `delete`: finds a task and deletes from the database.\n\n\n### Emit events\n\nWell you may have noticed these lines: `broadcast(new Taskcreated($task))` and `broadcast(new TaskRemoved($task))` respectively in `store` and `delete` functions. What is their purpose? Through these lines we emit events with a task model instance. \n\nYou can get more relevant information about Laravel broadcasting [here](https://laravel.com/docs/5.7/broadcasting). \nIn the next part of the tutorial, we’ll see how to create these events..\n\n\n\n## Create our events\n\nIn this part we’ll create events we talked about above: `TaskCreated` and `TaskRemoved` events.\n\n### TaskCreated event\n\nOur  `TaskCreated` event will be emitted whenever a new to-do or task is created. Enough talk, let’s focus on the code. Let’s create our `TaskCreated` by running the following command in your terminal: `php artisan make:event TaskCreated`.\n\nNow open your `TaskCreated` file and paste the following:\n\n``` php\n    //realtime_todo/app/Events/TaskCreated.php\n    \u003c?php\n    \n    namespace App\\Events;\n    use Illuminate\\Broadcasting\\Channel;\n    use Illuminate\\Queue\\SerializesModels;\n    use Illuminate\\Broadcasting\\PrivateChannel;\n    use Illuminate\\Broadcasting\\PresenceChannel;\n    use Illuminate\\Foundation\\Events\\Dispatchable;\n    use Illuminate\\Broadcasting\\InteractsWithSockets;\n    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcastNow;\n    \n    \n    class TaskCreated implements ShouldBroadcastNow\n    {\n        use Dispatchable, InteractsWithSockets, SerializesModels;\n    \n        /**\n        * Create a new event instance.\n        *\n        * @param $task\n        * @return void\n        */\n        \n        public $task;\n        public function __construct($task)\n        {\n            //\n            $this-\u003etask = $task;\n        }\n    \n        /**\n        * Get the channels the event should broadcast on.\n        *\n        * @return \\Illuminate\\Broadcasting\\Channel|array\n        */\n        \n        public function broadcastOn()\n        {\n            return new Channel('newTask');\n        }\n        \n        public function broadcastAs(){\n            return 'task-created';\n        }\n        \n    }\n```\n\nOur class constructor initializes a task that is created. We have two additional functions that may seem strange to you:\n\n- `broadcastAs`: customizes the broadcast name because by default Laravel uses the event’s class name.\n- `broadcastOn`: defines the channel `task-created` (which we’ll set up further on the tutorial) on which our event should be broadcast.\n\n### TaskRemoved event\n\nThis event is broadcast when a task is deleted and we want to notify other users of that.\n\nAs you may guess, you can run:  `php artisan make:event TaskRemoved` to create the event. Now head up to your `TaskRemoved` file:\n\n``` php\n    //realtime_todo/app/Events/TaskRemoved.php\n    \n    \u003c?php\n    namespace App\\Events;\n    use Illuminate\\Broadcasting\\Channel;\n    use Illuminate\\Queue\\SerializesModels;\n    use Illuminate\\Broadcasting\\PrivateChannel;\n    use Illuminate\\Broadcasting\\PresenceChannel;\n    use Illuminate\\Foundation\\Events\\Dispatchable;\n    use Illuminate\\Broadcasting\\InteractsWithSockets;\n    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcastNow;\n    class TaskRemoved implements ShouldBroadcastNow\n    {\n        use Dispatchable, InteractsWithSockets, SerializesModels;\n    \n        /**\n        * Create a new event instance.\n        *\n        *  @param $task\n        * @return void\n        *\n        */\n            public $task;\n            public function __construct($task)\n            {\n            //\n            $this-\u003etask = $task;\n        }\n    \n        /**\n        * Get the channels the event should broadcast on.\n        *\n        * @return \\Illuminate\\Broadcasting\\Channel|array\n        */\n        \n        public function broadcastOn()\n        {\n            return new Channel('taskRemoved');\n        }\n        \n        public function broadcastAs(){\n            return 'task-removed';\n        }\n        \n    }\n```\n\nThis class structure is pretty similar to the previous one, so we won't spend further time explaining its functions.\n\n\n\u003e Don’t forget to implement `ShouldBroadcastNow` to enable Pusher broadcasting events as soon as they occur.\n\n### Broadcast configuration\n\nAccording to Laravel documentation about [event broadcasting](https://laravel.com/docs/5.7/broadcasting), before broadcasting any events, you will first need to register the `App\\Providers\\BroadcastServiceProvider`. In fresh Laravel applications, you only need to uncomment this provider in the `providers` array of your `../config/app.php` configuration file. This provider will allow you to register the broadcast authorization routes and callbacks.\n\n\n\u003e You may also set the `encrypted` value to `false` in order to avoid a 500 error while broadcasting events with Pusher.\n\nIf this is done, you have to tell Laravel to use Pusher to broadcast events. Open your `.env` file and ensure you have this line: `BROADCAST_DRIVER=pusher`\n\nAs we are broadcasting our events over [Pusher](https://pusher.com), we should install the Pusher PHP SDK using the Composer package manager:\n\n```\n    composer require pusher/pusher-php-server \"~3.0\"\n```\n\n### Setting up the broadcast channel\n\nLaravel broadcasts events on well defined channels. As said above our events should be broadcast on particular channels. It’s time to set them up. Paste the following code in your `channels.php` file: \n\n\n``` php    \n    //realtime_todo/routes/channels.php\n    \u003c?php\n    \n    /*\n    ------------------------------------------------------------------------\n    | Broadcast Channels\n    |--------------------------------------------------------------------------\n    |\n    | Here you may register all of the event broadcasting channels that your\n    | application supports. The given channel authorization callbacks are\n    | used to check if an authenticated user can listen to the channel.\n    |\n    */\n    Broadcast::channel('newTask', function(){\n        return true;\n    });\n    Broadcast::channel('taskRemoved', function(){\n        return true;\n    });\n```\n    \n\nAs we aren’t using Laravel auth, we return `true` in the function callback so that everybody can use this channel to broadcast events.\n\n### Set up Laravel Echo\n\nWe’ll use [Laravel Echo](https://laravel.com/docs/5.7/broadcasting#installing-laravel-echo) to consume our events on the client-side.\n\nOpen your `resources/js/bootstrap.js`  file and uncomment this section of the code:\n\n``` php\n    import Echo from 'laravel-echo'\n    \n    window.Pusher = require('pusher-js');\n    \n    window.Echo = new Echo({\n        broadcaster: 'pusher',\n        key: process.env.MIX_PUSHER_APP_KEY,\n        cluster: process.env.MIX_PUSHER_APP_CLUSTER,\n        encrypted: false\n    });\n```\n\nWhile uncommenting, you may also set the `encrypted` property to `false` to avoid a 500 error while trying to broadcast events with Pusher channels.\n\nThe above code sets up Laravel Echo with Pusher. This will make our app aware of events broadcast, and Laravel Echo will consume our events \n\nOur app is ready to broadcast and consume events in realtime using Pusher channels. Let’s focus now on the frontend of your app.\n\n\n## Set up Vuex store\n\nWe’ll be using the [Vuex](https://vuex.vuejs.org) library to centralize our data and control the way it is mutated throughout our application.\n\n### Create our state\n\nVuex state is a single object that contains all our application data. So let’s create  `../resources/js/store/state.js`  and paste this code inside:\n\n``` javascript\n    let state = {\n        todos: [],\n        toRemove: null,\n        newTodo: {\n            title: '',\n            completed: false\n        }\n    }\n    export default state\n```\n\nOur state objects holds :\n\n- `todos`: holds our to-dos got from the backend\n- `toRemove`: holds temporarily the to-do we intend to remove \n- `newTodo`: holds details about a new to-do we are about to add \n\n### Create our getters\n\nWith help of getters we can compute derived state based on our data store state. Create  `../resources/js/store/getters.js`  and paste this code inside\n\n``` javascript\n    let getters = {\n        newTodo: state =\u003e {\n            return state.newTodo\n        },\n        todos: state =\u003e {\n            return state.todos\n        },\n        toRemove: state =\u003e {\n            return state.toRemove\n        }\n    }\n    export default getters\n```\n\n### Create our mutations\n\nMutations allow us to perform some changes on our data. Create `../resources/js/store/mutations.js` and paste this piece of code inside:\n\n``` javascript\n    let mutations = {\n        ADD_TODO(state, todo) {\n            state.todos.unshift(todo)\n        },\n        CACHE_REMOVED(state, todo) {\n          state.toRemove = todo;\n        },\n        GET_TODOS(state, todos) {\n            state.todos = todos\n        },\n        DELETE_TODO(state, todo) {\n            state.todos.splice(state.todos.indexOf(todo), 1)\n            state.toRemove = null;\n        }\n    }\n    export default mutations\n```\n\nHere we have three mutations:\n\n- `ADD_TODO`: adds a new to-do to the top our to-dos list\n- `CACHE_REMOVED`: keeps track temporarily of the to-do to remove\n- `GET_TODOS`: sets our to-dos list given some data\n- `DELETE_TODO`: responsible for deleting a to-do from our to-dos list\n\n\n### Create our actions\n\nVuex actions allow us to perform asynchronous operations over our data. Create the file `../resources/js/store/actions.js`  and  paste the following code:\n\n``` javascript\n    let actions = {\n      ADD_TODO({commit}, todo) {\n            axios.post('/api/todos', todo).then(res =\u003e {\n                if (res.data === \"added\")\n                    console.log('ok')\n            }).catch(err =\u003e {\n                console.log(err)\n            })\n        },\n        DELETE_TODO({commit}, todo) {\n            axios.delete(`/api/todos/${todo.id}`)\n                .then(res =\u003e {\n                    if (res.data === 'deleted')\n                        console.log('deleted')\n                }).catch(err =\u003e {\n                    console.log(err)\n                })\n        },\n        GET_TODOS({commit}) {\n            axios.get('/api/todos')\n                .then(res =\u003e {\n                    {  console.log(res.data)\n                        commit('GET_TODOS', res.data)\n                    }\n                }).catch(err =\u003e {\n                    console.log(err)\n                })\n        }\n    }\n    export default actions\n```\n\nWe have defined two actions and each of them responsible of a single operation. They perform asynchronous calls to our API routes. \n\n\n- `ADD_TODO`  makes a POST request to our `api/todos`  endpoint to add a new task.  This action is dispatched whenever the user is submitting a task to add.\n\n\n- `GET_TODOS` sends a GET request to our `api/todos` endpoint to get our database to-dos/tasks and commits the response with `GET_TODOS` mutation.\n\n\n- `DELETE_TODO` performs a DELETE a request to our `api/todos/{id}` endpoint in order to remove a to-do from our to-dos list.\n\n### Set up our store with Vue\n\nCreate the file `../resources/js/store/index.js` and paste this code inside:\n\n``` javascript\n    import Vue from 'vue'\n    import Vuex from 'vuex'\n    import actions from './actions'\n    import mutations from './mutations'\n    import getters from './getters'\n    import state from \"./state\";\n    \n    Vue.use(Vuex);\n    \n    export default new Vuex.Store({\n        state,\n        mutations,\n        getters,\n        actions\n    })\n```\n\nThen, we export our store and add it to the Vue instance. Replace the existing code in your `../resouces/js/app.js`  file with the following:\n\n``` javascript\n    require('./bootstrap');\n    window.Vue = require('vue');\n    \n    Vue.component('todo', require('./components/Todo'))\n    Vue.component('new-todo', require('./components/NewTodo.vue'))\n    Vue.component('todo-list', require('./components/TodoList'))\n    Vue.component('todo-app', require('./components/TodoApp'))\n    import store from '../js/store'\n    \n    const app = new Vue({\n        el: '#app',\n        store\n    });\n```\n\nThe previous code also globally registers four Vue components, `Todo.vue` ,`NewTodo.vue`,`TodoList.vue` and  `TodoApp.vue` that we’ll build in the next part of this tutorial.\n\n\n## Building Vue components\n\nWe’ll build four Vue components for our app as we said above, so let’s do it.\n\n### Create the Todo.vue component\n\nThe  `Todo.vue` component is responsible for encapsulating details about a single Task instance from the database and rendering it in a proper and styled way. Create a `Todo.vue` file in your `../resources/js/components` directory and paste the following inside:\n\n``` javascript\n    //../resources/js/components/Todo.vue\n    \u003ctemplate\u003e\n     \u003cli class=\"todo\" :class=\"{ completed: todo.completed }\"\u003e\n         \u003cdiv class=\"view\"\u003e\n             \u003cinput type=\"checkbox\" v-model=\"todo.completed\" class=\"toggle\"\u003e\n             \u003clabel\u003e{{todo.title}}\u003c/label\u003e\n             \u003cbutton @click=\"removeTodo(todo)\" class=\"destroy\"\u003e\u003c/button\u003e\n         \u003c/div\u003e\n     \u003c/li\u003e\n    \u003c/template\u003e\n    \u003cscript\u003e\n    export default {\n      name: \"Todo\",\n      props: [\"todo\"],\n     \n      methods: {\n        removeTodo(todo) {\n          this.$store.commit(\"CACHE_REMOVED\", todo)\n          this.$store.dispatch(\"DELETE_TODO\", todo);\n        }\n      }\n    };\n    \u003c/script\u003e\n```\n\nOur  `Todo.vue` component takes a `todo` property whose details we render in the component body using the HTML `\u003cli\u003e\u003c/li\u003e` tag. The component has the  `removeTodo` function that takes the to-do we intend to remove as argument, caches it temporarily (via the `CACHE_REMOVED`  mutation) and dispatches the `DELETE_TODO` action to remove it.\n\n### Create the NewTodo.vue component\n\nWe’ll use this component to add a new task to our to-dos list.  This component should be very simple to code. I promise you 😉.  First create the `NewTodo.vue` file inside the same directory as above and paste this inside:\n\n``` javascript\n    //../resources/js/components/NewTodo.vue\n    \u003ctemplate\u003e\n         \u003cinput type=\"text\" v-model=\"newTodo.title\"\n         @keyup.enter=\"addTodo\" autofocus=\"autofocus\"\n          placeholder=\"What are you trying to get done?\" class=\"new-todo\"\u003e\n    \u003c/template\u003e\n    \u003cscript\u003e\n    import { mapGetters } from \"vuex\";\n    export default {\n      name: \"NewTodo\",\n      methods: {\n        addTodo() {\n          this.$store.dispatch(\"ADD_TODO\", this.newTodo);\n        }\n      },\n      computed: {\n        ...mapGetters([\"newTodo\"])\n      }\n    };\n    \u003c/script\u003e\n```\n    \n\nThis component is composed of a simple input field to enter our to-do title. We append a `@keyup.enter` event so we can execute the `addTodo` function whenever the user hits the `Enter` key of his keyboard. Nice play isn’t it 😎 ?! We get the `newTodo` state object from our getters using Vue.js `mapGetters`  helper and bind it to our input. As I said above the `newTodo` object should contain information of a new todo we want to add to our to-dos list.\nThe `addTodo` function dispatches the `ADD_TODO` action having our `newTodo` as a parameter.\n\n\n### Create the TodoList.vue component\n\nThis component will render to-dos items from database. It’s that simple.\nSo create your  `TodoList.vue` component and paste this code inside:\n\n``` javascript\n    //../resources/js/components/TodoList.vue\n    \u003ctemplate\u003e\n       \u003cul class=\"todo-list\"\u003e\n         \u003ctodo v-for=\"todo in todos\" :todo=\"todo\" :key=\"todo.id\" /\u003e\n       \u003c/ul\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    import { mapGetters } from \"vuex\";\n    import todo from \"../components/Todo\";\n    export default {\n      components: {\n        todo\n      },\n      name: \"TodoList\",\n      mounted() {\n        this.$store.dispatch(\"GET_TODOS\");\n      },\n      computed: {\n        ...mapGetters([\"todos\"]),\n      }\n    };\n    \u003c/script\u003e\n```\n\nIn the  `mounted`  *hook*  function  we dispatch the  `GET_TODOS` action to get our to-dos list item, and we use Vuex helper function  `…mapGetters()` to access our todos state. We loop over our to-dos list and render a `todo` component (imported from `Todo.vue` component) which takes the current loop item as a property.\n\n### Create the TodoApp.vue component\n\nIn this component we simply merge the first three components we created and listen to Pusher realtime events. Create your `TodoApp.vue` component and paste the following inside: \n\n``` javascript\n    //../resources/js/components/TodoApp.vue\n    \n     \u003ctemplate\u003e\n         \u003csection class=\"todoapp\"\u003e\n                \u003cheader class=\"header\"\u003e\n                  \u003ch1\u003etodos\u003c/h1\u003e\n                \u003c/header\u003e\n                \u003cnew-todo\u003e\u003c/new-todo\u003e\n                \u003ctodo-list\u003e\u003c/todo-list\u003e\n         \u003c/section\u003e\n     \u003c/template\u003e\n     \u003cscript\u003e\n    import newTodo from \"../components/NewTodo.vue\";\n    import todoList from \"../components/TodoList.vue\";\n    import { mapGetters } from \"vuex\";\n    \n    export default {\n      components: {\n       newTodo,\n       todoList\n      },\n      name: \"TodoApp\",\n      mounted() {\n        window.Echo.channel(\"newTask\").listen(\".task-created\", e =\u003e {\n          this.$store.commit(\"ADD_TODO\", e.task);\n          this.newTodo.title = \"\";\n        });\n        window.Echo.channel(\"taskRemoved\").listen(\".task-removed\", e =\u003e {\n            this.$store.commit(\"DELETE_TODO\", this.toRemove);\n        });\n      },\n      computed: {\n        ...mapGetters([\"newTodo\", \"toRemove\"])\n      }\n    };\n    \u003c/script\u003e\n```\n    \n\nIn the mounted function of our component, we are subscribing to two channels:\n\n- `newTask` channel: we listen the `task-created` event triggered when a new to-do is added to the list. Then we commit the `ADD_TODO` mutation with the task sent carried by the event, in order to add it to our to-dos list. Finally we reset our `newTodo` we import from our Vuex store.\n\n\n- `taskRemoved` channel, this channel enables to listen to the `task-removed` event triggered when a task/to-do is removed from our list. When the event is emit, we assign the task deleted to our `toRemove` object we set up in our Vuex store, and we commit the `DELETE_TODO` mutation to finally remove it from to-dos list.\n\n\n\n## Finalize the app\n\nNow, let’s replace of our  `welcome.blade.php` with the following containing our `TodoApp` component:\n \n``` php\n    //realtime_todo/resources/views/welcome.blade.php\n    \n    \u003c!doctype html\u003e\n    \u003chtml lang=\"{{ str_replace('_', '-', app()-\u003egetLocale()) }}\"\u003e\n        \u003chead\u003e\n            \u003cmeta charset=\"utf-8\"\u003e\n            \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n            \u003cmeta name=\"csrf-token\" content=\"{{ csrf_token() }}\" /\u003e\n            \u003ctitle\u003eRealtime to-do app\u003c/title\u003e\n            \u003c!-- Fonts --\u003e\n            \u003clink href=\"https://fonts.googleapis.com/css?family=Nunito:200,600\" rel=\"stylesheet\" type=\"text/css\"\u003e\n            {{--  Style  --}}\n            \u003clink href=\"{{ mix('css/app.css') }}\" rel=\"stylesheet\" type=\"text/css\"\u003e\n            \u003c!-- Styles --\u003e\n            \u003cstyle\u003e\n                html, body {\n                    background-color: #fff;\n                    color: #636b6f;\n                    font-family: 'Nunito', sans-serif;\n                    font-weight: 200;\n                    height: 100vh;\n                    margin: 0;\n                }\n                .full-height {\n                    height: 100vh;\n                }\n                .flex-center {\n                    align-items: center;\n                    display: flex;\n                    justify-content: center;\n                }\n                .position-ref {\n                    position: relative;\n                }\n                .top-right {\n                    position: absolute;\n                    right: 10px;\n                    top: 18px;\n                }\n                .content {\n                    text-align: center;\n                }\n                .title {\n                    font-size: 84px;\n                }\n                .links \u003e a {\n                    color: #636b6f;\n                    padding: 0 25px;\n                    font-size: 12px;\n                    font-weight: 600;\n                    letter-spacing: .1rem;\n                    text-decoration: none;\n                    text-transform: uppercase;\n                }\n                .m-b-md {\n                    margin-bottom: 30px;\n                }\n            \u003c/style\u003e\n        \u003c/head\u003e\n        \u003cbody\u003e\n              \u003cdiv id=\"app\"\u003e\n                        \u003ctodo-app\u003e\u003c/todo-app\u003e\n              \u003c/div\u003e\n    \n              \u003cscript src=\"{{mix('js/app.js')}}\"\u003e\u003c/script\u003e\n        \u003c/body\u003e\n    \u003c/html\u003e\n```\n    \n\nTo style our app, get this [file](https://github.com/Ethiel97/realtime_todo/blob/master/resources/sass/app.scss) and replace the content inside your `../resources/sass/app.scss` file with it.\n \nNow open your terminal and run `npm run dev` to build your app in a proper way. This can take a few seconds. After this step run `php artisan serve` and  open your browser at `localhost:8000`  to see your app working fine.  You can try to add a new to-do to your list and see things working in realtime if you carefully followed steps above. You are now a boss 😎\n\n![todo-vue-demo](//images.ctfassets.net/1es3ne0caaid/p2EBbkFfEWqusEuUo02Qk/6f9ee671f0a51c1fce08a9397f9ae88b/todo-vue-demo.gif)\n\n\u003e **Note**: If you encounter  a 500 error when trying to add or delete to-dos, it’s sure that you have to disable Pusher encryption as I suggested you. Open these files  `../config/broadcasting.php` and  `../resources/js/bootstrap.js` and make sure you disable Pusher encryption `encrypted: false` in both of them.\n\n## Conclusion\n\nIn this tutorial we’ve created a realtime to-do app using Laravel, Vue.js, and Pusher to provide realtime functionality. You can think up new ideas to extend the application. It’ll be fun to see what you come up with. The source code for this tutorial is available on  [GitHub](https://github.com/Ethiel97/realtime_todo) here.","metaTitle":"Build a to-do list app with Vue.js and Laravel","metaDescription":"This brief tutorial shows you how to create a simple to-do list app using Vue and Laravel. The list UI updates in realtime as items are added, completed and removed."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Eh0neIijuMe6u8WUkigeo","type":"Entry","createdAt":"2018-11-19T21:11:07.272Z","updatedAt":"2020-06-19T11:00:49.074Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live comment feature with sentiment analysis using Flask and Vue","url":"flask-vue-comments","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"38Gip5IBCgiiy4AYeeyyqG","type":"Entry","createdAt":"2018-03-04T19:48:48.360Z","updatedAt":"2018-03-04T19:48:48.360Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Gideon Onwuka","url":"gideon-onwuka","email":"dongidomed@gmail.com","twitter":"https://twitter.com/gideon_onwuka","github":"https://github.com/dongido001","guestWriter":true}}],"products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-11-19","description":"This tutorial will guide you through building a comments feature for a website, using Flask and Vue.js. New comments will appear in realtime, and the application includes sentiment analysis, to measure the opinion of commenters.","prerequisite":"You will need Python 3.6+ and Flask installed on your machine.","content":"In this tutorial, we’ll see how we can get the overall feeling of our users after they might have read our post and added their comments. We’ll build a simple blog where users can comment. Then we process the comment to determine the percentages of people that find the post interesting and those who don't.\n\nAs technologies are advancing, the way we process data is also taking a huge turn around. Taking advantage of natural language processing, we can determine from a group of comments, how our users feel about our blog post.\n\nWe also don’t have to reload a page to see a new comment from a blog post. We can make comments visible in realtime to every user.\n\nWe’ll be using Channels, Vue.js and Flask to build the app.\n\nHere is a preview of what the final app will look like:\n\n![flask-comments-sentiment-demo](//images.ctfassets.net/1es3ne0caaid/5gkbkrLNgIkOsgOGmgwsUM/7b7e547c466433070e56ced75f8ac738/flask-comments-sentiment-demo.gif)\n\n## Prerequisite\n\nThis tutorial uses the following:\n\n- [Vue.js](https://vuejs.org/)\n- [Python 3.6+](https://www.python.org/)\n- [Flask](http://flask.pocoo.org/)\n\nYou should have some familiarity with Python development to follow along with this tutorial. If you are not familiar with Vue but still want to follow along,  you can go through the basics of Vue in the [documentation](https://vuejs.org/v2/guide/) to get you up to speed in a couple of minutes.\n\nBefore we start, let’s get your environment ready. Check that you have the appropriate installation and setup on your machine.\n\nOpen up a terminal on your machine and execute the below code:\n\n```\n    $ python --version\n```\n\nIf you have a Python 3.6+ installed on your machine, you will have a similar text printed out as `python 3.6.0`. If you got an output similar to “Command not found”, you need to install Python on your machine. Head over to Python’s official website to download and get it installed.\n\nIf you have gotten all that installed, let's proceed.\n\n## Creating a Pusher account\n\nWe'll use Pusher Channels to handle all realtime functionalities. Before we can start using Pusher Channels, we need to get our API key. We need an account to be able to get the API key.\n\nHead over to Pusher and [log](https://dashboard.pusher.com/accounts/sign_in) in to your account or create a [new account](https://dashboard.pusher.com/accounts/sign_up) if you don’t have one already. Once you are logged in, create a new app and then copy the app API keys.\n\n## Setting up the backend app\n\nLet’s create our backend app that will be responsible for handling all communication to Pusher Channels and getting the sentiment of a comment.\n\nCreate the following files and folder in a folder named `live-comment-sentiment` in any convenient location on your system:\n\n```\n    live-comment-sentiment\n      ├── .env\n      ├── .flaskenv\n      ├── app.py\n      ├── requirements.txt\n      ├── static\n      │   ├── custom.js\n      │   └── style.css\n      └── templates\n          └── index.html\n          └── base.html\n```\n\n### Creating a virtual environment\n\nIt’s a good idea to have an isolated environment when working with Python. [virtualenv](https://virtualenv.pypa.io/) is a tool to create an isolated Python environment. It creates a folder which contains all the necessary executables to use the packages that a Python project would need.\n\nFrom your command line, change your directory to the Flask project root folder, execute the below command:\n\n```\n    $ python3 -m venv env\n```\n\nOr:\n\n```\n    $ python -m venv env\n```\n\nThe command to use depends on which associates with your Python 3 installation.\n\nThen, activate the virtual environment:\n\n```\n    $ source env/bin/activate\n```\n\nIf you are using Windows, activate the virtualenv with the below command:\n\n```\n    \u003e \\path\\to\\env\\Scripts\\activate\n```\n\nThis is meant to be a full path to the activate script. Replace `\\path\\to` with your correct path name.\n\nNext, add the Flask configuration setting to the `.flaskenv` file:\n\n```\n    FLASK_APP=app.py\n    FLASK_ENV=development\n```\n\nThis will instruct Flask to use `app.py` as the main entry file and start up the project in development mode.\n\nNow, add your Pusher API keys to the `.env` file:\n\n```\n    PUSHER_APP_ID=app_id\n    PUSHER_APP_KEY=key\n    PUSHER_APP_SECRET=secret\n    PUSHER_APP_CLUSTER=cluster\n```\n\nMake sure to replace `app_id`, `key`, `secret` and `cluster` with your own Pusher keys which you have noted down earlier.\n\nNext, create a Flask instance by adding the below code to `app.py`:\n\n``` python\n    # app.py\n    \n    from flask import Flask, jsonify, render_template, request\n    from textblob import TextBlob\n    import pusher\n    import os\n    \n    app = Flask(__name__)\n    \n    @app.route('/')\n    def index():\n        return render_template('index.html')\n    \n    # run Flask app\n    if __name__ == \"__main__\":\n        app.run()\n```\n\nIn the code above, after we instantiate Flask using `app = Flask(__name__)`, we created a new route - `/` which renders an `index.html` file from the templates folder.\n\nNow, add the following python packages to the `requirements.txt` file:\n\n```\n    Flask==1.0.2\n    python-dotenv==0.8.2\n    pusher==2.0.1\n    textblob==0.15.1\n```\n\nThe packages we added:\n\n- [python-dotenv](https://github.com/theskumar/python-dotenv): this library will be used by Flask to load environment configurations files.\n- [pusher](https://github.com/pusher/pusher-http-python): this is the Pusher Python library that makes it easy to interact with its API.\n- [textblob](https://textblob.readthedocs.io/en/dev/): a Python library which provides a simple API for common natural language processing (NLP).\n\nNext, install the library by executing the below command:\n\n```\n    $ pip install -r requirements.txt\n```\n\nOnce the packages are done installing, start up Flask:\n\n```\n    $ flask run\n```\n\nIf there is no error, our Flask app will now be available on port 5000. If you visit http://localhost:5000, you will see a blank page. This is because the `templates/index.html` file is empty, which is ok for now.\n\n### Setting up TextBlob\n\nTo get the sentiment from comments, we’ll use the [TextBlob](https://textblob.readthedocs.io/en/dev/) Python library which provides a simple API for common natural language processing (NLP). We already have the library installed. What we’ll do now is install the necessary data that TextBlob will need.\n\nFrom your terminal, make sure you are in the project root folder. Also, make sure your virtualenv is activated. Then execute the below function.\n\n```\n    # Download NLTK corpora\n    $ python -m textblob.download_corpora lite\n```\n\nThis will download the necessary NLTK [corpora](https://textblob.readthedocs.io/en/dev/install.html) (trained models).\n\n### Initialize the Pusher Python library\n\nInitialize the Pusher Python library by adding the below code to `app.py`  just after the `app = Flask(__name__)` line:\n\n``` python\n    # app.py\n    \n    pusher = pusher.Pusher(\n        app_id=os.getenv('PUSHER_APP_ID'),\n        key=os.getenv('PUSHER_APP_KEY'),\n        secret=os.getenv('PUSHER_APP_SECRET'),\n        cluster=os.getenv('PUSHER_APP_CLUSTER'),\n        ssl=True)\n```\n\nNow we are fully set.\n\n## Setting up the frontend\n\nWe’ll create a simple page for adding comments. Since we won’t be building a full blog website, we won’t be saving the comments to a database.\n\n### Adding the base layout\n\nWe’ll use the template inheritance approach to build our views, which makes it possible to reuse the layouts instead of repeating some markup across pages. \n\nAdd the following markup to the `templates/base.html` file:\n\n``` html\n    \u003c!-- /templates/base.html  --\u003e\n    \n    \u003c!doctype html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n          \u003c!-- Required meta tags --\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003c!-- Bootstrap CSS --\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\"\u003e\n        \u003ctitle\u003eLive comment\u003c/title\u003e\n      \u003c/head\u003e\n      \u003cbody\u003e\n          \u003cdiv class=\"container\" id=\"app\"\u003e\n               {% block content %}  {% endblock %}\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='custom.js')}}\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThis is the base layout for our view. All other views will inherit from the base file.\n\nIn this file, we have added some libraries. This includes: \n\n- [Bootstrap](https://getbootstrap.com/)\n- Pusher JavaScript library\n- Vue.js\n\n### The blog page\n\nThis will serve as the landing page of the application. Add the following to the `templates/index.html` file:\n\n``` html\n    \u003c!-- /templates/index.html  --\u003e\n    \n    \n    {% extends 'base.html' %}\n    \n    {% block content %}\n    \u003cdiv class=\"grid-container\"\u003e\n        \u003cheader class=\"header text-center\"\u003e \n            \u003cimg src=\"https://cdn1.imggmi.com/uploads/2018/10/13/1d5cff977fd6e3aac498e581ef681a1a-full.png\"\u003e\n        \u003c/header\u003e\n        \u003cmain class=\"content\"\u003e         \n           \u003cdiv class=\"content-text\"\u003e\n              Our pioneering and unique technology is based on state-of-the-art \u003cbr/\u003e \n              machine learning and computer vision techniques. Combining deep neural \u003cbr/\u003e\n              networks and spectral graph theory with the computing... \u003cbr/\u003e\n            \u003c/div\u003e\n        \u003c/main\u003e\n        \u003csection class=\"mood\"\u003e\n            \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col text-center\"\u003e \n                    \u003cdiv class=\"mood-percentage\"\u003e[[ happy ]]%\u003c/div\u003e\n                    \u003cdiv\u003eHappy\u003c/div\u003e \n                \u003c/div\u003e\n                \u003cdiv class=\"col text-center\"\u003e\n                    \u003cdiv class=\"mood-percentage\"\u003e[[ neutral ]]%\u003c/div\u003e\n                    \u003cdiv\u003eNeutral\u003c/div\u003e \n                \u003c/div\u003e\n                \u003cdiv class=\"col text-center\"\u003e \n                    \u003cdiv class=\"mood-percentage\"\u003e[[ sad ]]%\u003c/div\u003e\n                    \u003cdiv\u003eSad\u003c/div\u003e \n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/section\u003e\n        \u003csection class=\"comment-section\"\u003e\n            \u003cdiv v-for=\"comment in comments\"\u003e\n               \u003ccomment \n                    :comment=\"comment\"\n                    v-bind:key=\"comment.id\"\n                \u003e\n                \u003c/comment\u003e       \n            \u003c/div\u003e\n        \u003c/section\u003e\n        \u003csection class=\"form-section\"\u003e\n            \u003cform class=\"form\" @submit.prevent=\"addComment\"\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                    \u003cinput\n                        type=\"text\" \n                        class=\"form-control\" \n                        v-model=\"username\"\n                        placeholder=\"Enter username\"\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                    \u003ctextarea \n                      class=\"form-control\" \n                      v-model=\"comment\" \n                      rows=\"3\"\u003e\u003c/textarea\u003e\n                \u003c/div\u003e\n                \u003cbutton type=\"submit\" class=\"btn btn-primary btn-block\"\u003eAdd comment\u003c/button\u003e\n            \u003c/form\u003e\n        \u003c/section\u003e\n    \u003c/div\u003e\n    {% endblock %}\n```\n\nIn the preceding code:\n\n- In the `\u003csection class=\"mood\"\u003e… \u003c/section\u003e`, we added three placeholders - [[ happy ]], [[ neutral ]] and [[ sad ]], which is the percentages of the moods of users who added comments. These placeholders will be replaced by their actual values when Vue takes over the page DOM ([mounted](https://vuejs.org/v2/api/#mounted)). \n\n      \n\n  \u003e Notice we are using `[[  ]]` instead of the normal Vue placeholders - `{{  }}`. This is because we are using [Jinja2](http://jinja.pocoo.org/) template that comes bundled with Flask to render our page. The Jinja2 uses `{{   }}` placeholder to hold variables that will be substituted to their real values and so do Vue by default. So to avoid conflicts, we will change Vue to use `[[  ]]` instead.\n\n\n\n- In the `\u003csection class=\"comment-section\"\u003e` section, we are rendering the comments to the page.\n- Next, is the `\u003csection class=\"form-section\"\u003e… \u003c/section\u003e`, where we added a form for adding new comments. Also in the inputs fields, we declare a [two-way data binding](https://vuejs.org/v2/guide/forms.html) using the v-model directive.\n- In the form section - `\u003cform class=\"form\" @submit.prevent=\"addComment\"\u003e…`, notice that we have the `@submit.prevent` directive. This will prevent the form from submitting normally when the user adds a new comment. Then we call the `addComment` function to add a comment. We don’t have the `addComment` function declared anywhere yet. We’ll do this when we initialize Vue.\n\nNow, add some styles to the page. Add the below styles to the `static/style.css` file:\n\n``` css\n    body {\n        width: 100%;\n        height: 100%;\n    }\n    .grid-container {\n        display: grid;\n        grid-template-rows: 250px auto auto 1fr;\n        grid-template-columns: repeat(3, 1fr);\n        grid-gap: 20px;\n        grid-template-areas:\n            '. header .'\n            'content content content'\n            'mood mood mood'\n            'comment-section comment-section comment-section'\n            'form-section form-section form-section';\n    }\n    .content {\n        grid-area: content;\n    }\n    .comment-section {\n        grid-area: comment-section;\n    }\n    .content-text {\n       font-style: oblique;\n       font-size: 27px;\n    }\n    .mood {\n        grid-area: mood;\n    }\n    .header {\n        grid-area: header;\n    }\n    .form-section {\n        grid-area: form-section;\n    }\n    .comment {\n        border: 1px solid rgb(240, 237, 237);\n        border-radius: 4px;\n        margin: 15px 0px 5px 60px;\n        font-family: monospace;\n    }\n    .comment-text {\n        padding-top: 10px;\n        font-size: 17px;\n    }\n    .form {\n        margin-top: 50px;\n    }\n    .mood-percentage {\n       border: 1px solid gray;\n       min-height: 50px;\n       padding-top: 10px;\n       font-size: 30px;\n       font-weight: bolder;\n    }\n```\n\nNow we have all our user interface ready. If you visit the app URL again, you will see a similar page as below:\n\n![flask-comments-sentiment-interface](//images.ctfassets.net/1es3ne0caaid/5ZAOxZyWmkC440I20kGeic/59156808839dade15400693ffaa7bc8b/flask-comments-sentiment-interface.png)\n\n## Initializing Channels\n\nNow let’s initialize Channels. Since we have added the Pusher JavaScript library already, we’ll go ahead and initialize it.\n\nAdd the below code to the `static/custom.js` file:\n\n``` javascript\n    // Initiatilze Pusher JavaScript library\n    var pusher = new Pusher('\u003cPUSHER-APP-KEY\u003e', {\n        cluster: '\u003cCLUSTER\u003e',\n        forceTLS: true\n    });\n```\n\nReplace `\u003cPUSHER-APP-KEY\u003e` and `\u003cCLUSTER\u003e` with your correct Pusher app details you noted down earlier.\n\n## Creating the comment component\n\nIf you view the `/templates/index.html` file, in the `\u003csection class=\"comment-section\"\u003e` section, you will notice we are calling the `\u003ccomment\u003e` component which we have not created yet. We need to create this component. Also, notice inside the file, we are calling the v-for (`v-for=\"comment in comments\"`) directive to render the comments.\n\nLet’s create the component. Add the below code to `static/custom.js`:\n\n``` javascript\n    Vue.component('comment', {\n        props: ['comment'],\n        template: `\n            \u003cdiv class=\"row comment\"\u003e \n                \u003cdiv class=\"col-md-2\"\u003e\n                    \u003cimg \n                       src=\"https://cdn1.imggmi.com/uploads/2018/10/13/1d5cff977fd6e3aac498e581ef681a1a-full.png\" \n                       class=\"img-responsive\" \n                       width=\"90\" \n                       height=\"90\"\n                    \u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-10 comment-text text-left\" v-html=\"comment.comment\"\u003e             \u003c/div\u003e\n            \u003c/div\u003e\n        `\n    })\n```\n\n## Initialize Vue\n\nNow let’s initialize Vue to take over the DOM manipulation. \n\nAdd the below code to the `static/custom.js` file:\n\n``` javascript\n    var app = new Vue({\n        el: '#app',\n        delimiters: ['[[', ']]'],\n        data: {\n          username: '',\n          comment: '',\n          comments: [],\n          happy: 0,\n          sad: 0,\n          neutral: 0,\n          socket_id: \"\"\n        },\n        methods: {},\n        created () {},\n    })\n```\n\nIn the preceding code: \n\n- We initialize Vue using `var app = new Vue(…` passing to it a key-value object.\n- Next, we tell Vue the part on the page to watch using `el:` `'``#app'`. The `#app` is the ID we have declared in the `/templates/base.html`.\n- Next, using `delimiters: ['[[', ']]'],`, we change the default Vue delimiter from `{{ }}` to `[[ ]]` so that it does not interfere with that of Jinja2.\n- Then we defined some states using `data: {….`.\n- Finally, we have `methods: {},` and `created () {},`. We’ll add all the function we’ll declare inside the  ``methods: {}`` block and then the `created () {}` is for adding code that will execute once Vue instance is [created](https://vuejs.org/v2/guide/instance.html#Instance-Lifecycle-Hooks).\n\nNext, add a function to update the sentiment score. Add the below code to the `methods: {}` block of the `static/custom.js` file:\n\n``` javascript\n            updateSentiments () {\n                // Initialize the mood to 0\n                let [happy, neutral, sad] = [0, 0, 0];\n                \n                // loop through all comments, then get the total of each mood\n                for (comment of this.comments) {\n                   if (comment.sentiment \u003e 0.4) {\n                      happy++;\n                   } else if (comment.sentiment \u003c 0) {\n                      sad++;\n                   } else {\n                       neutral++;\n                   }\n                }\n                \n                const total_comments = this.comments.length;\n                \n                // Get the percentage of each mood\n                this.sad = ((sad/total_comments) * 100).toFixed();\n                this.happy = ((happy/total_comments) * 100).toFixed();\n                this.neutral = ((neutral/total_comments) * 100).toFixed()\n                \n                // Return an object of the mood values\n                return {happy, neutral, sad}\n            },\n```\n\nIn the code above, we created a function that will loop through all the comments to get the number of each mood that appeared. Then we get the percentage of each mood then return their corresponding values.\n\nNext, add a function to add a new comment. Add the below code to the methods: {} block right after the code you added above:\n\n``` javascript\n            addComment () {\n               \n               fetch(\"/add_comment\", {\n                    method: \"post\",\n                    headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        id: this.comments.length,\n                        username: this.username,\n                        comment: this.comment,\n                        socket_id: this.socket_id\n                    })\n                })\n                .then( response =\u003e response.json() )\n                .then( data =\u003e {\n                    // Add the new comment to the comments state data\n                    this.comments.push({\n                        id: data.id,\n                        username: data.username,\n                        comment: data.comment,\n                        sentiment: data.sentiment\n                    })\n                    \n                    // Update the sentiment score\n                    this.updateSentiments();\n                 })\n                 \n               this.username = \"\";\n               this.comment = \"\";\n            },\n```\n\nHere, we created a function that makes a [request](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) to the `/add_comment` route to get the sentiment of a comment. Once we receive a response, we add the comment to the comments state. Then we call `this.updateSentiments()` to update the sentiment percentage. This function will be called each time a user wants to add a new comment.\n\nNext, let’s make comments visible to others in realtime. Add the below code to the `created () {}` block in the static/custom.js:\n\n``` javascript\n            // Set the socket ID\n            pusher.connection.bind('connected', () =\u003e {\n                this.socket_id = pusher.connection.socket_id;\n            });\n            \n            // Subscribe to the live-comments channel\n            var channel = pusher.subscribe('live-comments');\n            \n            // Bind the subscribed channel (live-comments) to the new-comment event\n            channel.bind('new-comment', (data) =\u003e {\n               this.comments.push(data);\n               \n               // Update the sentiment score\n               this.updateSentiments();\n            });\n```\n\n## Get sentiments from comments and make comments realtime\n\nNow, let’s add a function to get the sentiment of a message and then trigger a `new-comment` event whenever a user adds a comment. Add the below code to `app.py`\n\n``` python\n    # ./api/app.py\n    \n    @app.route('/add_comment', methods=[\"POST\"])\n    def add_comment():\n        # Extract the request data\n        request_data = request.get_json()\n        id = request_data.get('id', '')\n        username = request_data.get('username', '')\n        comment = request_data.get('comment', '')\n        socket_id = request_data.get('socket_id', '')\n        \n        # Get the sentiment of a comment\n        text = TextBlob(comment)\n        sentiment =  text.polarity\n        \n        comment_data = {\n            \"id\": id,\n            \"username\": username,\n            \"comment\": comment,\n            \"sentiment\": sentiment,\n        }\n        \n        #  Trigger an event to Pusher\n        pusher.trigger(\n            \"live-comments\", 'new-comment', comment_data, socket_id\n        )\n        \n        return jsonify(comment_data)\n```\n\nThe sentiment property returns a tuple of the form (polarity, subjectivity) where polarity ranges from -1.0 to 1.0 and subjectivity ranges from 0.0 to 1.0. We will only use the polarity property.\n\nIn the `pusher.trigger(…`, method,  we are passing the `socket_id` so that the user triggering the event won't get back the data sent.\n\n## Testing the app\n\nCongrats! Now we have our live comments with sentiments. To test the app, open the app in your browser on two or more different tabs, then add comments and see them appear in realtime on other tabs.\n\nHere is some sample comment you can try out:\n\n\n- The post is terrible! - Sad (Negative)\n- I love the way this is going - Happy (Positive)\n- This is amazingly simple to use. What great fun! - Happy (Positive)\n\nIf you are getting an error or nothing is working. Stop the server (Press CTRL+C) and then restart it (`$ flask run`). \n\n\n## Conclusion\n\nIn this tutorial, we built a live comment with sentiment analysis. We used Vue for DOM manipulation, Flask for the server side and Channels for realtime functionality. We used the [TextBlob](https://textblob.readthedocs.io/en/dev/quickstart.html#sentiment-analysis) python library to detect mood from text.","metaTitle":"Build a live comment feature using Flask and Vue","metaDescription":"This tutorial will guide you through building a comments feature for a website, using Flask and Vue.js. New comments will appear in realtime, and the application includes sentiment analysis, to measure the opinion of commenters."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"73VrXqFuVyU4csCk26Skom","type":"Entry","createdAt":"2018-11-09T12:53:15.720Z","updatedAt":"2018-11-09T12:53:15.720Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live game updates site with Express","url":"live-game-express","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3j821hA7aMgOiUEaO4Q8y6","type":"Entry","createdAt":"2018-02-26T19:00:03.819Z","updatedAt":"2018-03-20T12:22:11.602Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Shalvah Adebayo","url":"shalvah-adebayo","email":"shalvah.adebayo@gmail.com","twitter":"https://twitter.com/theshalvah","github":"https://shalvah.me/","guestWriter":true}}],"projectRepo":"https://github.com/shalvah/live-game-updates-express","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-11-09","description":"Build a live blogging platform using Express and Vue, designed to post live updates of sports games. It features an admin panel behind authentication and a guest view where site visitors can watch for updates. As an admin posts a new score or match event, both displays update in realtime.","prerequisite":"You will need Node 8.10+ and MongoDB 3.4+ installed on your machine.","content":"# How to build a live game updates site with Express and Pusher Channels\nSports are fun social activities, but unfortunately, we aren’t always to participate or watch the actual action. In such cases, it’s useful to have a means of following the action as it happens. In today’s tutorial, we’ll be building a web app using Node.js (Express) that allows anyone to follow the progress of a game in realtime. \n\nOur app will provide an interface that allows an admin to post updates on an ongoing game, which users will see in realtime. Here’s a preview of our app in action:\n\n\n![](https://d2mxuefqeaa7sj.cloudfront.net/s_3CFE051B9DA5A2A8496A9ACE3E89DDD14DE00C23FB83FAA6CBC1ECA9EF69A3DC_1538595219690_building-realtime-football-game-updates-site-with-express.gif)\n\n## Prerequisites\n\n1. [Node.js](http://nodejs.org) 8.10.0 or higher\n2. [MongoDB](https://docs.mongodb.com/manual/installation/) 3.4 or higher.\n3. A [Pusher account](http://pusher.com/signup).\n\n## Setting up\n\nWe’ll create a new app using the [Express application generator](https://expressjs.com/en/starter/generator.html):\n\n```\n    npx express-generator --view=hbs live-game-updates-express\n    cd live-game-updates-express\n    npm install\n```\n\n\u003e Note: if the line with `npx` throws an error about the `npx` command not being recognized, you can install npx by running:\n\n```\n    npm install -g npx\n```\n\nLet’s add our dependencies:\n\n```\n    npm install dotenv express-session mongoose passport passport-local pusher\n```\n\nWe’ll use **dotenv** to load our Pusher app credentials from a `.env` file, **mongoose** to manage our models via MongoDB documents, **passport** (together with **passport-local** and **express-session**) for authentication, and **Pusher** for the realtime APIs.\n\n## Configuring the application\n\nWe’re going to make some changes to our `app.js`. First, we’ll implement a very simple authentication system that checks for a username of ‘admin’ and a password of ‘secret’. We’ll also initialize our MongoDB connection. Modify your `app.js` so it looks like this: \n\n``` javascript\n    // app.js\n    require('dotenv').config();\n    \n    const express = require('express');\n    const path = require('path');\n    const logger = require('morgan');\n    const session = require('express-session');\n    const passport = require('passport');\n    const LocalStrategy = require('passport-local').Strategy;\n    \n    passport.use(new LocalStrategy((username, password, done) =\u003e {\n            if (username === 'admin' \u0026\u0026 password === 'secret') {\n                return done(null, {username});\n            }\n            return done(null, null)\n        })\n    );\n    passport.serializeUser((user, cb) =\u003e cb(null, user.username));\n    passport.deserializeUser((username, cb) =\u003e cb(null, { username }));\n    \n    const app = express();\n    require('mongoose').connect('mongodb://localhost/live-game-updates-express');\n    \n    // view engine setup\n    app.set('views', path.join(__dirname, 'views'));\n    app.set('view engine', 'hbs');\n    \n    app.use(logger('dev'));\n    app.use(express.json());\n    app.use(express.urlencoded({extended: false}));\n    app.use(express.static(path.join(__dirname, 'public')));\n    app.use(session({ secret: 'anything' }));\n    app.use(passport.initialize());\n    app.use(passport.session());\n    app.use((req, res, next) =\u003e {\n        res.locals.user = req.user;\n        next();\n    });\n    app.use('/', require('./routes/index'));\n    \n    module.exports = app;\n```\n\nThat’s all we need to do. Now let’s go ahead and create our app’s views.\n\n\n## Building the views\n\nFirst, we’ll create the home page. It shows a list of ongoing games. If the user is logged in as the admin, it will show a form to start recording a new game. \n\nBefore we do that, though, let’s modify our base layout which is used across views. Replace the contents of `views/layout.hbs` with the following:\n\n``` html\n    \u003c!-- views/layout.hbs --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003eLive Game Updates\u003c/title\u003e\u003c!-- Latest compiled and minified CSS --\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\n              integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \u003cmain class=\"py-4\"\u003e\n        {{{body}}}\n    \u003c/main\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nNow, replace the contents of `index.hbs` file with the following:\n\n``` html\n    \u003c!-- views/home.hbs --\u003e\n    \n    \u003cdiv class=\"container\"\u003e\n        \u003ch2\u003eOngoing games\u003c/h2\u003e\n        {{#if user }}\n            \u003cform method=\"post\" action=\"/games\" class=\"form-inline\"\u003e\n                \u003cinput class=\"form-control\" name=\"first_team\" placeholder=\"First team\" required\u003e\n                \u003cinput class=\"form-control\" name=\"second_team\" placeholder=\"Second team\" required\u003e\n                \u003cinput type=\"hidden\" name=\"first_team_score\" value=\"0\"\u003e\n                \u003cinput type=\"hidden\" name=\"second_team_score\" value=\"0\"\u003e\n                \u003cbutton type=\"submit\" class=\"btn btn-primary\"\u003eStart new game\u003c/button\u003e\n            \u003c/form\u003e\n        {{/if}}\n        \u003cbr\u003e\n        {{#each games }}\n            \u003ca class=\"card bg-dark\" href=\"/games/{{ this.id }}\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003cdiv class=\"card-title\"\u003e\n                        \u003ch4\u003e{{ this.first_team }} {{ this.first_team_score }} - {{ this.second_team_score }} {{ this.second_team }}\u003c/h4\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/a\u003e\n        {{/each}}\n    \u003c/div\u003e\n```\n\nThe next view is that of a single game. Put the following code in the file `views/game.hbs`:\n\n``` html\n    \u003c!-- views/game.hbs --\u003e\n    \n    \u003cdiv id=\"main\" class=\"container\" xmlns:v-on=\"http://www.w3.org/1999/xhtml\"\u003e\n        \u003ch2\u003e\\{{ game.first_team }}\n            \u003cspan {{#if user}} contenteditable {{/if}} v-on:blur=\"updateFirstTeamScore\"\u003e\\{{ game.first_team_score }}\u003c/span\u003e\n            -\n            \u003cspan {{#if user}} contenteditable {{/if}} v-on:blur=\"updateSecondTeamScore\"\u003e\\{{ game.second_team_score }}\u003c/span\u003e\n            \\{{ game.second_team }}\u003c/h2\u003e\n        {{#if user }}\n        \u003cdiv class=\"card\"\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003cform v-on:submit=\"updateGame\"\u003e\n                    \u003ch6\u003ePost a new game update\u003c/h6\u003e\n                    \u003cinput class=\"form-control\" type=\"number\" v-model=\"pendingUpdate.minute\"\n                           placeholder=\"In what minute did this happen?\"\u003e\n    \n                    \u003cinput class=\"form-control\" placeholder=\"Event type (goal, foul, injury, booking...)\"\n                           v-model=\"pendingUpdate.event_type\"\u003e\n    \n                    \u003cinput class=\"form-control\" placeholder=\"Add a description or comment...\"\n                           v-model=\"pendingUpdate.description\"\u003e\n    \n                    \u003cbutton type=\"submit\" class=\"btn btn-primary\"\u003ePost update\u003c/button\u003e\n                \u003c/form\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        {{/if}}\n        \u003cbr\u003e\n        \u003ch4\u003eGame updates\u003c/h4\u003e\n        \u003cdiv class=\"card-body\" v-for=\"update in game.updates\"\u003e\n            \u003cdiv class=\"card-title\"\u003e\n                \u003ch5\u003e\\{{ update.event_type }} (\\{{ update.minute }}')\u003c/h5\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-text\"\u003e\n                \\{{ update.description }}\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nYou’ll notice we’re using a few Vue.js tags here (`v-on`, `v-for`). We’ll be rendering this page using Vue.js. We’ll come back to that later.\n\nLastly, we’ll add the view for the admin to log in, `views/login.hbs`:\n\n``` html\n    \u003c!-- views/login.hbs --\u003e\n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row justify-content-center\"\u003e\n            \u003cdiv class=\"col-md-8\"\u003e\n                \u003cdiv class=\"card\"\u003e\n                    \u003cdiv class=\"card-header\"\u003eLogin\u003c/div\u003e\n    \n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003cform method=\"POST\" action=\"/login\"\u003e\n                            \u003cdiv class=\"form-group row\"\u003e\n                                \u003clabel for=\"username\" class=\"col-sm-4 col-form-label text-md-right\"\u003eUsername\u003c/label\u003e\n                                \u003cdiv class=\"col-md-6\"\u003e\n                                    \u003cinput id=\"username\" class=\"form-control\" name=\"username\" required autofocus\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n    \n                            \u003cdiv class=\"form-group row\"\u003e\n                                \u003clabel for=\"password\" class=\"col-md-4 col-form-label text-md-right\"\u003ePassword\u003c/label\u003e\n                                \u003cdiv class=\"col-md-6\"\u003e\n                                    \u003cinput id=\"password\" type=\"password\" class=\"form-control\" name=\"password\" required\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n    \n                            \u003cdiv class=\"form-group row mb-0\"\u003e\n                                \u003cdiv class=\"col-md-8 offset-md-4\"\u003e\n                                    \u003cbutton type=\"submit\" class=\"btn btn-primary\"\u003e\n                                        Login\n                                    \u003c/button\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/form\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nLet’s create the routes. Replace the contents of your `routes/index.js` with the following:\n\n``` javascript\n    // routes/index.js\n    \n    const express = require('express');\n    const router = express.Router();\n    const passport = require('passport');\n    \n    // see the login form\n    router.get('/login', (req, res, next) =\u003e {\n        res.render('login');\n    });\n    \n    // log in\n    router.post('/login',\n        passport.authenticate('local', {failureRedirect: '/login'}),\n        (req, res, next) =\u003e {\n            res.redirect('/');\n        });\n    \n    // view all games\n    router.get('/',\n        (req, res, next) =\u003e {\n            res.render('index', {games: {}});\n        });\n    \n    // view a game\n    router.get('/games/:id',\n        (req, res, next) =\u003e {\n            res.render('index', {game: {}});\n        });\n    \n    // start a game\n    router.post('/games',\n        (req, res, next) =\u003e {\n            res.redirect(`/games/${game.id}`);\n        });\n    \n    // post an update for a game\n    router.post('/games/:id',\n        (req, res, next) =\u003e {\n            res.json();\n        });\n    \n    // update a game's score\n    router.post('/games/:id/score',\n        (req, res, next) =\u003e {\n            res.json();\n        });\n    \n    module.exports = router;\n```\n\nWe’re defining seven routes here:\n\n- The routes to view the login form and to log in\n- The routes to view all ongoing games and a single game\n- The routes to create a game, add an update for a game, or update the game’s score\n\nFor now, we’ve only implemented the logic for the first set of routes (login). We’ll come back to the others in a bit.\n\n\n## Implementing the logic\n\nLet’s create the model to map to our database. We have a single model, the Game model:\n\n``` javascript\n    // game.js\n    let mongoose = require('mongoose');\n    \n    let Game = mongoose.model('Game', {\n        first_team: String,\n        second_team: String,\n        first_team_score: Number,\n        second_team_score: Number,\n        updates: [{\n            minute: Number,\n            event_type: String,\n            description: String,\n        }],\n    });\n    \n    module.exports = Game;\n```\n\nThe `updates` field of a game will be an array containing each new update posted for the game in reverse chronological order (newest to oldest).\n\nNow, back to our router. We’ll use the Game model to interact with the database as needed. Replace the code in your `routes/index.js` with the following:\n\n``` javascript\n    // routes/index.js\n    \n    const express = require('express');\n    const router = express.Router();\n    const passport = require('passport');\n    const Game = require('./../game');\n    \n    // see the login form\n    router.get('/login', (req, res, next) =\u003e {\n        res.render('login');\n    });\n    \n    // log in\n    router.post('/login',\n        passport.authenticate('local', {failureRedirect: '/login'}),\n        (req, res, next) =\u003e {\n            res.redirect('/');\n        });\n    \n    // view all games\n    router.get('/',\n        (req, res, next) =\u003e {\n            return Game.find({})\n                .then((games) =\u003e {\n                    return res.render('index', {games});\n                });\n        });\n    \n    // view a game\n    router.get('/games/:id',\n        (req, res, next) =\u003e {\n            return Game.findOne({_id: req.params.id})\n                .then((game) =\u003e {\n                    return res.render('game', { game: encodeURI(JSON.stringify(game)) });\n                });\n        });\n    \n    // start a game\n    router.post('/games',\n        (req, res, next) =\u003e {\n            return Game.create(req.body)\n                .then((game) =\u003e {\n                    return res.redirect(`/games/${game.id}`);\n                });\n        });\n    \n    // post an update for a game\n    router.post('/games/:id',\n        (req, res, next) =\u003e {\n            const data = req.body;\n            // This adds the new update to start of the `updates` array\n            // so they are sorted newest-to-oldest\n            const updateQuery = { $push: { updates: { $each: [ data ], $position: 0 } } };\n            return Game.findOneAndUpdate({_id: req.params.id}, updateQuery)\n                .then((game) =\u003e {\n                    return res.json(game);\n                });\n        });\n    \n    // update a game's score\n    router.post('/games/:id/score',\n        (req, res, next) =\u003e {\n            return Game.findOneAndUpdate({_id: req.params.id}, req.body)\n                .then((game) =\u003e {\n                    return res.json(game);\n                });\n        });\n    \n    module.exports = router;\n```\n\nHere’s what is going on:\n\n- In the home page route, we query the database for a list of all games and send to the view.\n- In the single game route, we retrieve the game’s details and render them.\n- In the start game route, we create a new game and redirect to its page.\n- In the last two routes, we update the game’s details and return the updated values. We use MongoDB’s `[$push operator](https://docs.mongodb.com/manual/reference/operator/update/push/)` to add the new update on top of older ones.\n\n\n## Completing the frontend app\n\nNow we head back to our frontend. We’re going to pull in Vue and use it to manage the single game view. Add the following code at the end of the single game view (`views/game.hbs`):\n\n``` javascript \n    \u003c!-- views/game.hbs --\u003e\n    \n    \n    \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n        const game = JSON.parse(decodeURI(\"{{ game }}\"));\n        var app = new Vue({\n            el: '#main',\n    \n            data: {\n                game,\n                pendingUpdate: {\n                    minute: '',\n                    event_type: '',\n                    description: ''\n                }\n            },\n    \n            methods: {\n                updateGame(event) {\n                    event.preventDefault();\n                    fetch(`/games/${this.game._id}`, {\n                        body: JSON.stringify(this.pendingUpdate),\n                        credentials: 'same-origin',\n                        headers: {\n                            'content-type': 'application/json',\n                            'x-socket-id': window.socketId\n                        },\n                        method: 'POST',\n                    }).then(response =\u003e {\n                        console.log(response);\n                        if (response.ok) {\n                            if (!this.game.updates) this.game.updates = [];\n                            this.game.updates.unshift(this.pendingUpdate);\n                            this.pendingUpdate = {};\n                        }\n                    });\n                },\n    \n                updateScore() {\n                    const data = {\n                        first_team_score: this.game.first_team_score,\n                        second_team_score: this.game.second_team_score,\n                    };\n                    fetch(`/games/${this.game._id}/score`, {\n                        body: JSON.stringify(data),\n                        credentials: 'same-origin',\n                        headers: {\n                            'content-type': 'application/json',\n                        },\n                        method: 'POST',\n                    }).then(response =\u003e {\n                        console.log(response);\n                    });\n                },\n    \n                updateFirstTeamScore(event) {\n                    this.game.first_team_score = event.target.innerText;\n                    this.updateScore();\n                },\n    \n                updateSecondTeamScore(event) {\n                    this.game.second_team_score = event.target.innerText;\n                    this.updateScore();\n                }\n            }\n        });\n    \u003c/script\u003e\n```\n\n## Updating the game details in realtime\n\nSign in to [your Pusher dashboard](http://app.pusher.com) and create a new app. Create a file in the root of your project called `.env`. Copy your app credentials from the **App Keys** section and add them to this file:\n\n```\n    # .env\n    PUSHER_APP_ID=your-app-id\n    PUSHER_APP_KEY=your-app-key\n    PUSHER_APP_SECRET=your-app-secret\n    PUSHER_APP_CLUSTER=your-app-cluster\n```\n\nNow we’ll trigger a new Pusher event on the backend when a game’s details change. Modify the code in your `routes/index.js` so it looks like this:\n\n``` javascript\n    // routes/index.js\n    \n    const express = require('express');\n    const router = express.Router();\n    const passport = require('passport');\n    const Game = require('./../models/game');\n    const Pusher = require('pusher');\n    const pusher = new Pusher({\n        appId: process.env.PUSHER_APP_ID,\n        key: process.env.PUSHER_APP_KEY,\n        secret: process.env.PUSHER_APP_SECRET,\n        cluster: process.env.PUSHER_APP_CLUSTER\n    });\n    \n    // see the login form\n    router.get('/login', (req, res, next) =\u003e {\n        res.render('login');\n    });\n    \n    // log in\n    router.post('/login',\n        passport.authenticate('local', {failureRedirect: '/login'}),\n        (req, res, next) =\u003e {\n            res.redirect('/');\n        });\n    \n    // view all games\n    router.get('/',\n        (req, res, next) =\u003e {\n            return Game.find({})\n                .then((games) =\u003e {\n                    return res.render('index', { games });\n                });\n        });\n    \n    // view a game\n    router.get('/games/:id',\n        (req, res, next) =\u003e {\n            return Game.findOne({_id: req.params.id})\n                .then((game) =\u003e {\n                    return res.render('game', {\n                        game: encodeURI(JSON.stringify(game)),\n                        key: process.env.PUSHER_APP_KEY,\n                        cluster: process.env.PUSHER_APP_CLUSTER,\n                    });\n                });\n        });\n    \n    // start a game\n    router.post('/games',\n        (req, res, next) =\u003e {\n            return Game.create(req.body)\n                .then((game) =\u003e {\n                    return res.redirect(`/games/${game.id}`);\n                });\n        });\n    \n    // post an update for a game\n    router.post('/games/:id',\n        (req, res, next) =\u003e {\n            const data = req.body;\n            // This adds the new update to start of the `updates` array\n            // so they are sorted newest-to-oldest\n            const updateQuery = { $push: { updates: { $each: [ data ], $position: 0 } } };\n            return Game.findOneAndUpdate({_id: req.params.id}, updateQuery)\n                .then((game) =\u003e {\n                    pusher.trigger(`game-updates-${game._id}`, 'event', data, req.headers['x-socket-id']);\n                    return res.json(data);\n                });\n        });\n    \n    // update a game's score\n    router.post('/games/:id/score',\n        (req, res, next) =\u003e {\n        const data = req.body;\n            return Game.findOneAndUpdate({_id: req.params.id}, data)\n                .then((game) =\u003e {\n                    pusher.trigger(`game-updates-${game._id}`, 'score', data, req.headers['x-socket-id']);\n                    return res.json(data);\n                });\n        });\n    \n    module.exports = router;\n```\n\nThe major changes we’ve made here are:\n\n- When rendering the single game view, we pass on the necessary Pusher credentials (the key and the cluster) so the frontend can connect to Pusher and get updated of changes to the game\n- Whenever there’s an update to a game, we trigger an event on a channel tied to the ID of the game. The event will either be “update” or “score”.\n- We’re also passing in the Pusher socket ID so the event doesn’t get sent to the client it’s coming from (see [here](https://pusher.com/docs/server_api_guide/server_excluding_recipients) to learn more).\n\nNow let’s update our frontend to respond to these changes. Add the following code to the end of the single game view:\n\n``` javascript\n    // views/game.hbs\n    \n    \n    \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n        Pusher.logToConsole = true;\n    \n        const pusher = new Pusher(\"{{ key }}\", {\n            cluster: \"{{ cluster }}\"\n        });\n        pusher.connection.bind('connected', () =\u003e {\n            window.socketId = pusher.connection.socket_id;\n        });\n        pusher.subscribe(`game-updates-${app.game._id}`)\n                .bind('event', (data) =\u003e {\n                    app.game.updates.unshift(data);\n                })\n                .bind('score', (data) =\u003e {\n                    app.game.first_team_score = data.first_team_score;\n                    app.game.second_team_score = data.second_team_score;\n                });\n    \u003c/script\u003e\n```\n\nHere we include the Pusher JavaScript library and listen for the events on the game’s channel, and update the game as needed. Vue will handle re-rendering the page for us.\n\nNow let’s see the app in action. Start your MongoDB server by running `mongod`. Note that on Linux or macOS, you might need to run it as `sudo`.\n\nThen start your app on `http://localhost:3000` by running:\n\n```\n    npm start\n```\n\nVisit `/login`  and log in as `admin` (password: “secret”).\n\nUse the form on the home page to start a new game. You’ll be redirected to that game’s page.  Open that same URL in an incognito window (so you can view it as a logged-out user). \n\nMake changes to the game’s score by clicking on the scores and entering a new value. The score will be updated once you click on something else.\n\nYou can also post updates by using the form on the page. In both cases, you should see the scores and game updates in the incognito window update in realtime.\n\n## Conclusion\n\nIn today’s article, we’ve leveraged Pusher’s API to build a lightweight but fun experience that allows anyone to follow the sports action in realtime. The source code of the completed application is available [on GitHub](https://github.com/shalvah/live-game-updates-express).","metaTitle":"Build a live game updates site with Express","metaDescription":"Build a live blogging platform using Express and Vue, designed to post live updates of sports games. It features an admin panel behind authentication and a guest view where site visitors can watch for updates. As an admin posts a new score or match event, both displays update in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4c8TpB5Ln2M42S422SOggm","type":"Entry","createdAt":"2018-11-08T09:49:14.259Z","updatedAt":"2018-11-08T09:49:14.259Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live game updates site with Laravel","url":"live-game-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3j821hA7aMgOiUEaO4Q8y6","type":"Entry","createdAt":"2018-02-26T19:00:03.819Z","updatedAt":"2018-03-20T12:22:11.602Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Shalvah Adebayo","url":"shalvah-adebayo","email":"shalvah.adebayo@gmail.com","twitter":"https://twitter.com/theshalvah","github":"https://shalvah.me/","guestWriter":true}}],"projectRepo":"https://github.com/shalvah/live-game-updates-laravel","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-11-08","description":"Build a live blogging platform using Laravel and Vue, designed to post live updates of sports games. It features an admin panel behind authentication and a guest view where site visitors can watch for updates. As an admin posts a new score or match event, both displays update in realtime.","prerequisite":"You will need PHP 7/1+ and Composer installed on your machine.","content":"In this tutorial, we’ll build a site that allows users to follow the progress of an ongoing sports match. There’ll be a “back office” where site admins can post details about match events as they happen. These events will be shown in realtime on the frontend. Here’s what the completed app looks like in action:\n\n![laravel-live-blog-demo](//images.ctfassets.net/1es3ne0caaid/2fsx7eYJA4sUIIo8aAmuiu/2b050be96b0c8472e05bb2ab95025c4b/laravel-live-blog-demo.gif)\n\nLet’s go!\n\n## Prerequisites\n1. PHP 7.1.3 or newer\n2. [Composer](http://getcompocer.org).\n3. A Pusher account. Create one [here](https://pusher.com/signup).\n\n\n## Setting up\n\nFirst, create a new Laravel project:\n\n```\n    composer create-project --prefer-dist laravel/laravel live-game-updates\n```\n\nOpen up the generated project folder (`live-game-updates`). Remove all the lines in your `.env` file that start with `DB_` and replace them with:\n\n```\n    DB_CONNECTION=sqlite\n    DB_DATABASE=database/database.sqlite\n```\n\nThen create a file called `database.sqlite` in the `database` folder of your app.\n\n\n## Authentication\n\nOur app will require admin users to be logged in, so let’s set that up. Run the following command to set up Laravel’s included auth system:\n\n```\n    php artisan make:auth\n```\n\nNext, let’s add our admin user. Open up the file `database/migrations/2014_10_12_000000_create_users_table.php`, and modify the `up` method so it looks like this:\n\n``` php\n    // database/migrations/2014_10_12_000000_create_users_table.php\n    \n    public function up()\n    {\n        Schema::create('users', function (Blueprint $table) {\n            $table-\u003eincrements('id');\n            $table-\u003estring('name');\n            $table-\u003estring('email')-\u003eunique();\n            $table-\u003etimestamp('email_verified_at')-\u003enullable();\n            $table-\u003estring('password');\n            $table-\u003erememberToken();\n            $table-\u003etimestamps();\n        });\n        \\App\\User::create([\n            'name' =\u003e \"Admin\",\n            'email' =\u003e \"admin@live-game-updates.com\",\n            'password' =\u003e \\Illuminate\\Support\\Facades\\Hash::make('secret'),\n        ]);\n    }\n```\n\nNow let’s run our migrations, so the database is set up and our admin user created:\n\n```\n    php artisan migrate\n```\n\n## Building the views\n\nFirst, we’ll build the home page. It shows a list of active games. If the user is logged in as the admin, it will also display a form to start recording a new game. Replace the contents of `home.blade.php` in the directory `resources/views` with the following:\n\n``` php\n    \u003c!-- resources/views/home.blade.php --\u003e\n    @extends('layouts.app')\n    \n    @section('content')\n        \u003cdiv class=\"container\"\u003e\n            \u003ch2\u003eOngoing games\u003c/h2\u003e\n            @auth\n                \u003cform method=\"post\" action=\"{{ url('/games') }}\" class=\"form-inline\"\u003e\n                  @csrf\n                  \u003cinput class=\"form-control\" name=\"first_team\" placeholder=\"First team\" required\u003e\n                  \u003cinput class=\"form-control\" name=\"second_team\" placeholder=\"Second team\" required\u003e\n                  \u003cinput type=\"hidden\" name=\"first_team_score\" value=\"0\"\u003e\n                  \u003cinput type=\"hidden\" name=\"second_team_score\" value=\"0\"\u003e\n                  \u003cbutton type=\"submit\" class=\"btn btn-primary\"\u003eStart new game\u003c/button\u003e\n                \u003c/form\u003e\n            @endauth\n            @forelse($games as $game)\n                \u003ca class=\"card bg-dark\" href=\"/games/{{ $game-\u003eid }}\"\u003e\n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003cdiv class=\"card-title\"\u003e\n                            \u003ch4\u003e{{ $game-\u003escore }}\u003c/h4\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/a\u003e\n            @empty\n                No games in progress.\n            @endforelse\n        \u003c/div\u003e\n    @endsection\n```\n\nNext up is the view for a single game. Here we show the game’s score at the top and a list of events in reverse order below it. For the admin user, this view will also have a form where the user can post a report of a game event. The score displayed at the top will also be editable by an admin. Create the file `game.blade.php` in the directory `resources/views` with the following content:\n\n``` php\n    \u003c!-- resources/views/game.blade.php --\u003e\n    \n    @extends('layouts.app')\n    \n    @section('content')\n        \u003cdiv id=\"main\" class=\"container\" xmlns:v-on=\"http://www.w3.org/1999/xhtml\"\u003e\n            \u003ch2\u003e@{{ game.first_team }}\n                \u003cspan @auth contenteditable @endauth v-on:blur=\"updateFirstTeamScore\"\u003e@{{ game.first_team_score }}\u003c/span\u003e\n                -\n                \u003cspan @auth contenteditable @endauth v-on:blur=\"updateSecondTeamScore\"\u003e@{{ game.second_team_score }}\u003c/span\u003e\n                @{{ game.second_team }}\u003c/h2\u003e\n            @auth\n                \u003cdiv class=\"card\"\u003e\n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003cform v-on:submit=\"updateGame\"\u003e\n                            \u003ch6\u003ePost a new game update\u003c/h6\u003e\n                            \u003cinput class=\"form-control\" type=\"number\" id=\"minute\" v-model=\"pendingUpdate.minute\"\n                                   placeholder=\"In what minute did this happen?\"\u003e\n    \n                            \u003cinput class=\"form-control\" id=\"type\" placeholder=\"Event type (goal, foul, injury, booking...)\"\n                                   v-model=\"pendingUpdate.type\"\u003e\n    \n                            \u003cinput class=\"form-control\" id=\"description\" placeholder=\"Add a description or comment...\"\n                                   v-model=\"pendingUpdate.description\"\u003e\n    \n                            \u003cbutton type=\"submit\" class=\"btn btn-primary\"\u003ePost update\u003c/button\u003e\n                        \u003c/form\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            @endauth\n            \u003cbr\u003e\n            \u003ch4\u003eGame updates\u003c/h4\u003e\n            \u003cdiv class=\"card-body\" v-for=\"update in updates\"\u003e\n                \u003cdiv class=\"card-title\"\u003e\n                    \u003ch5\u003e@{{ update.type }} (@{{ update.minute }}')\u003c/h5\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"card-text\"\u003e\n                    @{{ update.description }}\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript\u003e\n            window.updates = @json($updates);\n            window.game = @json($game);\n        \u003c/script\u003e\n    @endsection\n```\n\nWe’re making the score elements editable by admins using the `contenteditable` attribute. This makes it possible for a user to click on the score and enter a new value. Once they click outside, we’ll update the value on the backend.\n\nWe’ll be using Vue to render and manage this view, but let’s come back to that later. For now, we’ll move on to adding the routes. Edit your `routes/web.php` so it looks like this:\n\n``` php\n    // routes/web.php\n    \u003c?php\n    \n    Auth::routes();\n    \n    Route::get('/', 'HomeController@index')-\u003ename('home');\n    Route::get('/games/{id}', 'HomeController@viewGame');\n    Route::post('/games', 'HomeController@startGame')-\u003emiddleware('auth');\n    Route::post('/games/{id}', 'HomeController@updateGame')-\u003emiddleware('auth');\n    Route::post('/games/{id}/score', 'HomeController@updateScore')-\u003emiddleware('auth');\n```\n\nWe have five routes, not counting our authentication routes:\n\n- The home page, which shows a list of games (and allows the admin to start a new game).\n- The single game view, where a viewer can see updates on a particular game, and an admin can post new updates.\n- The route to start a new game.\n- The route to post a game update.\n- The route to update the game’s score.\n\nThe last two are only accessible by admins.\n\n## Implementing the core logic\n\nNow, we’ll implement the logic for recording games. First, we’ll add `Game` and `Update` models. Run the following commands to create the models and their corresponding database migrations:\n\n``` php\n    php artisan make:model -m Game\n    php artisan make:model -m Update\n```\n\nNow let’s edit the generated migration files. Open up the `CreateGamesTable`  migration (you’ll find it in the `database/migrations` folder) and replace its contents with the following:\n\n``` php\n    // database/migrations/201*_**_**_*****_create_games_table\n    \u003c?php\n    \n    use Illuminate\\Support\\Facades\\Schema;\n    use Illuminate\\Database\\Schema\\Blueprint;\n    use Illuminate\\Database\\Migrations\\Migration;\n    \n    class CreateGamesTable extends Migration\n    {\n        public function up()\n        {\n            Schema::create('games', function (Blueprint $table) {\n                $table-\u003eincrements('id');\n                $table-\u003estring('first_team');\n                $table-\u003estring('second_team');\n                $table-\u003estring('first_team_score');\n                $table-\u003estring('second_team_score');\n                $table-\u003etimestamps();\n            });\n        }\n        \n        public function down()\n        {\n            Schema::dropIfExists('games');\n        }\n    }\n```\n\nAlso replace the contents of the `CreateUpdatesTable`  migration with this:\n\n``` php\n    // database/migrations/201*_**_**_******_create_updates_table\n    \u003c?php\n    \n    use Illuminate\\Support\\Facades\\Schema;\n    use Illuminate\\Database\\Schema\\Blueprint;\n    use Illuminate\\Database\\Migrations\\Migration;\n    \n    class CreateUpdatesTable extends Migration\n    {\n        public function up()\n        {\n            Schema::create('updates', function (Blueprint $table) {\n                $table-\u003eincrements('id');\n                $table-\u003eunsignedInteger('game_id');\n                $table-\u003eunsignedInteger('minute');\n                $table-\u003estring('type');\n                $table-\u003estring('description');\n                $table-\u003etimestamps();\n            });\n        }\n    \n        public function down()\n        {\n            Schema::dropIfExists('updates');\n        }\n    }\n```\n\nNow run `php artisan migrate` so our database tables get created.\n\nLet’s update the models. Replace the contents of the `Game` model with the following:\n\n``` php\n    // app/Game.php\n    \u003c?php\n    namespace App;\n    \n    use Illuminate\\Database\\Eloquent\\Model;\n    \n    class Game extends Model\n    {\n        protected $guarded = [];\n        \n        protected $appends = ['updates', 'score'];\n    \n        public function getUpdatesAttribute()\n        {\n            return Update::orderBy('id desc')-\u003ewhere('game_id', '=', $this-\u003eid)-\u003eget();\n        }\n        \n        // return the game score in the format \"TeamA 1 - 0 TeamB\"\n        public function getScoreAttribute()\n        {\n            return \"$this-\u003efirst_team $this-\u003efirst_team_score - $this-\u003esecond_team_score $this-\u003esecond_team\";\n        }    \n    }\n```\n\nHere, we’ve configured the `updates` property of a game to return all updates posted for it in reverse chronological order (most recent first). We’ve also added a `score` attribute that will display the score in a common format.\n\nReplace the contents of the `Update` model with the following:\n\n\n``` php    \n    // app/Update.php\n    \u003c?php\n    namespace App;\n    \n    use Illuminate\\Database\\Eloquent\\Model;\n    \n    class Update extends Model\n    {\n        protected $guarded = [];\n    }\n```\n\nFinally, back to the controller to complete our routing logic. We’ll write methods that handle each of the routes we defined above. Add the following methods in your `HomeController` class:\n\nFirst, the `index` method, which renders the homepage with a list of games:\n\n``` php\n    // app/Http/Controllers/HomeController.php\n    \n        public function index()\n        {\n            $games = \\App\\Game::all();\n            return view('home', ['games' =\u003e $games]);\n        }\n```\n\nThe `viewGame` method shows a single game and its updates:\n\n``` php\n    // app/Http/Controllers/HomeController.php\n    \n    public function viewGame(int $id)\n    {\n        $game = \\App\\Game::find($id);\n        $updates = $game-\u003eupdates;\n        return view('game', ['game' =\u003e $game, 'updates' =\u003e $updates]);\n    }\n```\n\nThe `startGame` method creates a new game with the provided data and redirects to that game’s page:\n\n``` php\n    // app/Http/Controllers/HomeController.php\n    \n    public function startGame()\n    {\n        $game = \\App\\Game::create(request()-\u003eall());\n        return redirect(\"/games/$game-\u003eid\");\n    }\n```\n\nThe `updateGame` method creates a new game update:\n\n``` php\n    // app/Http/Controllers/HomeController.php\n    \n    public function updateGame(int $id)\n    {\n        $data = request()-\u003eall();\n        $data['game_id'] = $id;\n        $update = \\App\\Update::create($data);\n        return response()-\u003ejson($update);\n    }\n```\n\nAnd the `updateScore` method updates the game’s score:\n\n``` php    \n    // app/Http/Controllers/HomeController.php\n    \n    public function updateScore(int $id)\n    {\n        $data = request()-\u003eall();\n        \\App\\Game::where('id', $id)-\u003eupdate($data);\n        return response()-\u003ejson();\n    }\n```\n\nLastly, delete the `__construct` method in the `HomeController` class. Its only function is to attach the `auth` middleware to all the routes, which we don’t want.\n\n## Connecting the frontend to the backend\n\nNow we need to complete the view for the game updates using Vue.js. Open up the file `resources/js/app.js` and replace its contents with the following:\n\n``` javascript\n    // resources/js/app.js\n    \n    require('./bootstrap');\n    \n    window.Vue = require('vue');\n    \n    const app = new Vue({\n        el: '#main',\n    \n        data: {\n                updates,\n                game,\n                pendingUpdate: {\n                    minute: '',\n                    type: '',\n                    description: ''\n                }\n        },\n    \n        methods: {\n            updateGame(event) {\n                event.preventDefault();\n                axios.post(`/games/${this.game.id}`, this.pendingUpdate)\n                    .then(response =\u003e {\n                        console.log(response);\n                        this.updates.unshift(response.data);\n                        this.pendingUpdate = {};\n                    });\n            },\n    \n            updateScore() {\n                const data = {\n                    first_team_score: this.game.first_team_score,\n                    second_team_score: this.game.second_team_score,\n                };\n                axios.post(`/games/${this.game.id}/score`, data)\n                    .then(response =\u003e {\n                        console.log(response)\n                    });\n            },\n    \n            updateFirstTeamScore(event) {\n                this.game.first_team_score = event.target.innerText;\n                this.updateScore();\n            },\n    \n            updateSecondTeamScore(event) {\n                this.game.second_team_score = event.target.innerText;\n                this.updateScore();\n            }\n        }\n    });\n```\n\nFinally, install dependencies:\n\n```\n    npm install\n```\n\nYou can take the app for a test drive right now. Run `npm run dev` to compile the JavaScript, then `php artisan serve` to start the app on http://localhost:8000. To log in, visit `/login`  and log in as `admin@live-game-updates.com` (password: “secret”). You’ll then be able to start recording new games and post updates. \n\n\n## Updating game score and events in realtime\n\nNow, we’ll add the realtime component using Pusher Channels. First, pull in the server and client libraries by running:\n\n```\n    composer require pusher/pusher-http-laravel\n    npm i pusher-js\n```\n\nThen sign in to [your Pusher dashboard](http://app.pusher.com) and create a new app. Copy your app credentials from the **App Keys** section and add them to your `.env` file:\n\n```\n    PUSHER_APP_ID=your-app-id\n    PUSHER_APP_KEY=your-app-key\n    PUSHER_APP_SECRET=your-app-secret\n    PUSHER_APP_CLUSTER=your-app-cluster\n```\n\nNext, we’ll update the controller so the `updateGame` and `updateScore` method publish the updated values via Pusher.\n\n``` php\n    // app/Http/Controllers/HomeController.php\n    \n    public function updateGame(int $id, \\Pusher\\Laravel\\PusherManager $pusher)\n    {\n        $data = request()-\u003eall();\n        $data['game_id'] = $id;\n        $update = \\App\\Update::create($data);\n        $pusher-\u003etrigger(\"game-updates-$id\", 'event', $update, request()-\u003eheader('x-socket-id'));\n        return response()-\u003ejson($update);\n    }\n    \n    public function updateScore(int $id, \\Pusher\\Laravel\\PusherManager $pusher)\n    {\n        $data = request()-\u003eall();\n        $game = \\App\\Game::find($id);\n        $game-\u003eupdate($data);\n        $pusher-\u003etrigger(\"game-updates-$id\", 'score', $game, request()-\u003eheader('x-socket-id'));\n        return response()-\u003ejson();\n    }\n```\n\nWe’re making use of the `X-Socket-Id` header so that Pusher does not rebroadcast the event to the browser window that sent it (see more [here](https://pusher.com/docs/server_api_guide/server_excluding_recipients)).\n\nFinally, we’ll update our Vue app so it updates to match the changes. Add this to the end of your `app.js`:\n\n``` javascript\n    // resources/js/app.js\n    \n    window.Pusher = require('pusher-js');\n    Pusher.logToConsole = true;\n    \n    const pusher = new Pusher(process.env.MIX_PUSHER_APP_KEY, {\n        cluster: process.env.MIX_PUSHER_APP_CLUSTER\n    });\n    \n    pusher.subscribe(`game-updates-${app.game.id}`)\n        .bind('event', (data) =\u003e {\n            app.updates.unshift(data);\n        })\n        .bind('score', (data) =\u003e {\n            app.game.first_team_score = data.first_team_score;\n            app.game.second_team_score = data.second_team_score;\n        });\n```\n\nHere, we set up our Pusher client and listen for the `event` and `score` events on the game updates channel, and update the corresponding values of the Vue app. Vue will automatically update the view with the new values.\n\nAll done! Time to try our app out. Compile the JavaScript by running:\n\n```\n    npm run dev\n```\n\nThen start the app by running:\n\n```\n    php artisan serve\n```\n\nVisit `/login`  and log in as `admin@live-game-updates.com` (password: “secret”).\n\nUse the form on the home page to start a new game. You’ll be redirected to that game’s page.  Open that same URL in an incognito window (so you can view it as a logged-out user). \n\nMake changes to the game’s score by clicking on the scores and entering a new value. The score will be updated once you click on something else.\n\nYou can also post updates by using the form on the page. In both cases, you should see the scores and game updates in the incognito window update in real-time.\n\n\n## Conclusion\n\nWe’ve built a useful and simple project that can be used to provide realtime updates on a local sports league, for instance. This type of tech powers many sites in the real world, and I hope you had fun working with it. The source code of the completed application is available [on GitHub](https://github.com/shalvah/live-game-updates-laravel).","metaTitle":"Build a live game updates site with Laravel","metaDescription":"Build a live blogging platform, designed to post live updates of sports games. It features an admin panel behind authentication and a guest view where site visitors can watch for updates. As an admin posts a new score or match event, both displays update in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6qg2A77Qe4mIUQ0MM2mUYe","type":"Entry","createdAt":"2018-10-11T21:50:20.587Z","updatedAt":"2018-10-11T21:50:20.587Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live markdown editor with VueJS","url":"markdown-editor-vue","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/yemiwebby/vue-markdown","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-10-11","description":"Build a simple markdown editor using Vue and Node. Users will be able to write in markdown and see their text update in realtime in a preview field. Multiple users can collaborate on the same document simultaneously, with realtime updates between users.","prerequisite":"You will need Node installed on your machine. Some knowledge of JavaScript will be helpful.","content":"## Introduction\n\nAs developers, we sometimes love to conveniently create easy-to-read documentation so as to ease the stress that accompanies styling at the beginning. For this, you need an easy tool such as the Markdown editor. This enables you to create a H1 ( for example) by simply adding a # before the header.\n\nTogether in this tutorial we'll build a simple, yet very effective realtime markdown editor application with [Vue](https://vuejs.org/) and powered by [Pusher](https://pusher.com/). This app will be used to convert raw markdown into proper HTML. It will have two separate sections:\n\n\n1. To the left, where you write and view raw markdown\n2. And the right, where you can easily view the converted markdown\n\nA quick look at what we’ll build:\n\n![vue-markdown-editor-demo-1](//images.ctfassets.net/1es3ne0caaid/5gtaWqftpSUgckQYGK2WwK/38f4847101722a7bf74472a3cba9ed5c/vue-markdown-editor-demo-1.gif)\n\n## Prerequisites\n\nEnsure that you have [Node.js](https://nodejs.org/en/) and [npm](https://www.npmjs.com/) installed on your machine. A quick overview of other core technologies we will be using in this tutorial include:\n\n\n- [Vue](https://vuejs.org/): a progressive JavaScript framework for building applications\n\n\n- [Pusher](https://pusher.com/): a Node.js client to interact with the Pusher REST API\n\n\n- [Marked](https://github.com/markedjs/marked): a low-level markdown compiler for parsing markdown without caching or blocking for long periods of time.\n\n\n\n\u003e 💡 I am using @vue/cli 2.0 ****for this project\n\n\n## Setting up the project\n\nWe’ll use [Vue-cli](https://cli.vuejs.org/) to setup our project, so run the command below to have it installed globally on your machine:\n\n```\n    npm install -g @vue/cli \n    or \n    yarn global add @vue/cli\n```\n\nYou can verify that Vue is properly installed by running:\n\n```\n    vue --version\n```\n\nThis will output the current version installed on your machine, just like this:\n\n![vue-markdown-editor-vue-version](//images.ctfassets.net/1es3ne0caaid/5g3IpRIYH6qS0ogyOOkOK2/cd53e2e419dee38d2767c388b577d1dd/vue-markdown-editor-vue-version.png)\n\nNow to generate our project, type the following command:\n\n```\n    vue init webpack vue-markdown // version 2\n    or \n    vue create vue-markdown // version 3\n```\n\nExecuting the command above will bring up a couple of questions, you can accept the default and proceed. Once the installation process is completed, you will now have a new project named `vue-markdown` installed in your project directory.\n\n\n## Running the application\n\nNext, we’ll run the application:\n\n```\n    npm start // version 2\n    or\n    npm run serve // version 3\n```\n\nThis will start the application on the http://localhost:8080. Visit that link:\n\n![vue-markdown-editor-homepage](//images.ctfassets.net/1es3ne0caaid/4NbOhe4KrCgoYSy8QeMS2s/9b027f4b7620ebe161ce3bd02cfc6576/vue-markdown-editor-homepage.png)\n\n## Installing server dependencies\n\nRun the following commands to install the dependencies required for this project:\n\n```\n    npm install --save pusher pusher-js marked\n    npm install --save body-parser cors dotenv express \n```\n\n## Pusher account setup\n\nHead over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up), if you don’t already have one. Log in to create a new application by clicking on the **Channels apps** on the sidebar. Obtain your application credentials as we will need to use them later in this post.\n\n### A little more about how Pusher works\n\nPusher allows you communicate between different parts of your application in realtime. It can be a notification you wish to show your users or the price of a product which people are bidding on currently. Whatever it is that needs constant updating, you can (and maybe should) use pusher for it.\n\nBy default, Pusher allows you bind to events on the client-side (listen to events on your browser, app, etc) and then trigger events on the server-side (send broadcasts to all listeners from the server). However, pusher has this really cool super amazing feature called private channels that allows you trigger events from the client side. You have to turn it on and perform a few actions to use it.\n\n\n1. Your channel name on the client-side must be prefixed with `private-`\n2. All your event names on the client-side must be prefixed with `client-`\n3. You must authenticate the Pusher subscription before you can trigger events on the client-side.\n\nSo, from your Pusher app dashboard, go to App settings and enable client events before you continue with this guide.\n\n![vue-markdown-editor-enable-client-events](//images.ctfassets.net/1es3ne0caaid/3F3daML5u8mwecqeiU0sqi/1a98bd74511c44cc63bebb8c26f92c7a/vue-markdown-editor-enable-client-events.png)\n\nNow you are ready. You can read more about [private channels](https://pusher.com/docs/client_api_guide/client_events#trigger-events).\n\n## Environment variables\n\nCreate a file name `.env` in the root directory of your application and add your application credentials as obtained from your Pusher dashboard as follows:\n\n\n```\n    PUSHER_APP_ID=YOUR_APP_ID\n    PUSHER_APP_KEY=YOUR_APP_KEY\n    PUSHER_APP_SECRET=YOUR_APP_SECRET\n    PUSHER_APP_CLUSTER=CLUSTER\n```\n\nEnsure that you replace `YOUR_APP_ID`, `YOUR_APP_KEY`, `YOUR_APP_SECRET` and `CLUSTER` placeholders with the appropriate credentials.\n\n\n## Setting up the server\n\nThe main objective of this application is to be able to process and convert a raw markdown to HTML in realtime from all browsers, to effectively achieve this, we’ll use Express to set up a simple server and use Pusher to broadcast the converted markdown to all the client on a specific channel. \n\nSo create a `server.js` file in the root directory of your application and add the following code snippet to it:\n\n``` javascript\n    // server.js\n    \n      const express = require('express');\n      const bodyParser = require('body-parser');\n      const cors = require('cors');\n      const Pusher = require('pusher');\n      require('dotenv').config();\n      \n      const app = express();\n      \n      app.use(cors());\n      app.use(bodyParser.urlencoded({ extended: false }));\n      app.use(bodyParser.json());\n      \n      const pusher = new Pusher({\n          appId: process.env.PUSHER_APP_ID,\n          key: process.env.PUSHER_APP_KEY,\n          secret: process.env.PUSHER_APP_SECRET,\n          cluster: process.env.PUSHER_APP_CLUSTER,\n          encrypted: true\n      });\n      \n       app.post('/pusher/auth', function(req, res) {\n        var socketId = req.body.socket_id;\n        var channel = req.body.channel_name;\n        var auth = pusher.authenticate(socketId, channel);\n        res.send(auth);\n      });\n      \n      var port = process.env.PORT || 3000;\n      app.listen(port);\n      console.log(\"Listening on 3000\")\n```\n  \nFirst, we basically loaded all the necessary middlewares for the Express server and configured Pusher using the credentials we added to our environment variables earlier.\n\nOur client application will need to make an API call to a specified endpoint in order to authenticate our pusher connection and ensure we can run a private channel on the frontend. Pusher has an `authenticate()` function that does that for us.\n\nOpen another terminal and start the server on http://localhost:3000 with:\n\n```\n    node server\n```\n\nThis will log a message to the console as shown below. This is to indicate that the server has been started successfully:\n\n![vue-markdown-editor-server-started](//images.ctfassets.net/1es3ne0caaid/7FidPJ8w1O6YOckw26SMqG/f30cfec1ca3d2cb86f6c3fa32f7c2469/vue-markdown-editor-server-started.png)\n\n## Creating the home component\n\nFor the purpose of this application we’ll create a new component, so navigate to `./src/components` and create a new file named `HomeComponent.vue` within it. Once you are done, paste in the code below:\n\n``` javascript\n    // ./src/components/HomeComponent.vue\n    \n      \u003ctemplate\u003e\n          \u003cdiv\u003e\n              \u003cdiv class=\"title\"\u003e\n                  \u003ch2\u003e{{ title }}\u003c/h2\u003e\n              \u003c/div\u003e\n              \n              \u003cdiv\u003e\n                 \u003cdiv class=\"row\"\u003e\n                      \u003cdiv class=\"col-md-6\"\u003e\n                          \u003ctextarea  v-model=\"markdown\" name=\"\" id=\"\" cols=\"80\" rows=\"15\" @keyup=\"postMark\"\u003e\u003c/textarea\u003e\n                      \u003c/div\u003e\n                      \u003cdiv id=\"preview\" class=\"col-md-6\" v-html=\"compiledMarkdown\"\u003e\u003c/div\u003e\n                 \u003c/div\u003e\n              \u003c/div\u003e\n          \u003c/div\u003e\n      \u003c/template\u003e\n      \n      \u003cscript\u003e\n      import axios from \"axios\";\n      import pusher from \"pusher\";\n      \n      export default {\n        name: \"Home\",\n        data() {\n          return {\n            title: \"Realtime Markdown Editor\",\n            markdown: \"\",\n            channel : {}\n          };\n        },\n      };\n      \u003c/script\u003e\n      \n      \u003cstyle\u003e\n      .title {\n        margin-bottom: 40px;\n      }\n      #preview {\n        border: 2px solid;\n        text-align: left;\n      }\n      \u003c/style\u003e\n```\n\nHere, within the template section of the component above, we created two separate columns: a textarea where the raw markdown will be written and a second column to preview the compiled markdown in realtime.\n\nFurthermore, we proceeded to added a little bit of styling to the application.\n\n\n## Enabling realtime editing\n\nWe want to send updates to our document immediately the user makes them. This is the whole essence of adding realtime functionality to begin with. With private channels, we can skip the entire step of sending the update to the server and then triggering an event from the server. We can do all of that from the client now.  \n\nOpen `./src/components/HomeComponent.vue` and define the Pusher application:\n\n``` javascript\n    // ./src/components/HomeComponent.vue\n     ...  \n      \u003cscript\u003e\n      import marked from \"marked\";\n      import pusher from \"pusher\";\n      \n      export default {\n        ...\n        created() {\n          let pusher = new Pusher(\"YOUR_APP_KEY\", {\n            cluster: \"CLUSTER\",\n            encrypted: true\n            authEndpoint: 'http://localhost:3000/pusher/auth',\n          });\n          \n          this.channel = pusher.subscribe(\"private-markdown\");\n          this.channel.bind(\"client-new-text\", data =\u003e {\n            this.markdown = data;\n          });\n        },\n        // We will generate the markdown and trigger events here\n       ...\n      };\n      \u003c/script\u003e\n      ...\n```\n\nIn the `created` method, we have defined the Pusher application, subscribed to a private channel and bound the channel to the an event. Now, we are ready to listen to any data exchange that will happen across that channel.\n\n\u003e Do ensure that you replace the `YOUR_APP_KEY` and `CLUSTER` with the appropriate credential. Also replace the `authEndpoint` with the endpoint you defined for your application.\n\n### Generating markdown\n\nTo generate markdown from the input we make, add the following code to the file:\n\n``` javascript\n    // ./src/components/HomeComponent.vue\n    ...  \n    \u003cscript\u003e\n      ...\n      export default {\n          ...\n          computed : {\n            compiledMarkdown: function () {\n              return marked(this.markdown, { sanitize: true })\n            }\n          },\n          // We will listen for changes to the document here\n          ...\n      };\n    \u003c/script\u003e\n    ...\n```\n\nThe `computed` data attribute `compiledMarkdown` will always be updated as the content of `markdown` changes. This is good for us so we can see changes immediately.\n\n### Trigger event with changes\n\nNow, let’s send the changes we make to the document to everyone following it\n\n``` javascript\n    // ./src/components/HomeComponent.vue\n    ...  \n    \u003cscript\u003e\n      ...\n      export default {\n        ...\n        methods: {\n          postMark: function(e) {\n            const text = e.target.value;\n            this.channel.trigger(\"client-new-text\", text);\n          }\n        }\n        ...\n      };\n    \u003c/script\u003e\n    ...\n```\n\n## Wrapping up\n\nNavigate to `./src/App.vue`  file and include the created `HomeComponent.vue` file within it:\n\n``` javascript\n    // ./src/App.vue\n    \n        \u003ctemplate\u003e\n        \u003cdiv id=\"app\"\u003e\n          \u003chomeComponent/\u003e\n        \u003c/div\u003e\n      \u003c/template\u003e\n      \u003cscript\u003e\n      \n      import HomeComponent from \"./components/HomeComponent\";\n      export default {\n        name: \"App\",\n        components: {\n          HomeComponent\n        }\n      };\n      \u003c/script\u003e\n      \n      \u003cstyle\u003e\n      #app {\n        font-family: \"Avenir\", Helvetica, Arial, sans-serif;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n        text-align: center;\n        color: #2c3e50;\n        margin-top: 60px;\n      }\n      \u003c/style\u003e\n```\n\nAnd finally, open the `index.html` file and update as shown below:\n\n``` html\n    // ./index.html\n    \n      \u003c!DOCTYPE html\u003e\n      \u003chtml\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\"\u003e\n        \u003ctitle\u003eVue Realtime Markdown\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\"\u003e\n      \u003c/head\u003e\n      \n      \u003cbody\u003e\n        \u003cnav class=\"navbar navbar-expand-lg navbar-dark bg-dark\"\u003e\n          \u003ca class=\"navbar-brand\" href=\"#\"\u003eNavbar\u003c/a\u003e\n        \u003c/nav\u003e\n        \u003cdiv id=\"app\"\u003e\u003c/div\u003e\n        \u003c!-- built files will be auto injected --\u003e\n        \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n      \n      \u003c/html\u003e\n```\n\nWe included the CDN file for bootstrap, added a navigation bar and also included the script file for Pusher.\n\n\n## Test the application\n\nRestart the application by running `npm start` from the terminal and don’t forget to also start the server by opening another terminal within your project folder with `node server`.\n\n![vue-markdown-editor-demo-2](//images.ctfassets.net/1es3ne0caaid/5gKVOo1nWguyI2iCqK60U0/45837a76c1af908d7cb43e932922c53d/vue-markdown-editor-demo-2.gif)\n\n\n## Conclusion\n\nIn this tutorial, you have learned how to conveniently build a simple markdown editor application using Vue and Pusher to enhance the realtime functionality. I hope you found this helpful. You can find the source code for the demo [here on GitHub](https://github.com/yemiwebby/vue-markdown).","metaTitle":"Build a live markdown editor with Vue","metaDescription":"Use Node and Vue to create a realtime markdown editor, featuring live preview and realtime collaborative updates."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"13YOGkybUAwmS4YIIysMSg","type":"Entry","createdAt":"2018-10-10T23:22:44.748Z","updatedAt":"2020-06-19T10:35:43.939Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a CMS with Laravel and Vue - Part 6: Adding Realtime Comments","url":"cms-laravel-vue-part-6","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/laravel-vue-cms","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-10-10","description":"This six part tutorial series will guide you through building a CMS using Laravel and Vue.js. The final product will include authentication, user roles, post creation and editing, and a realtime comments feature. In part six, add support for comments, including realtime updates.","prerequisite":"Basic knowledge of Laravel and Vue will be helpful. ","content":"In the [previous part](https://pusher.com/tutorials/cms-laravel-vue-part-5) of this series, we finished building the backend of the application using Vue. We were able to add the create and update component, which is used for creating a new post and updating an existing post.\n\nHere’s a screen recording of what we have been able to achieve:\n\n![laravel-vue-cms-demo-part-5](//images.ctfassets.net/1es3ne0caaid/3JaTirkHiEWyiOQCCqCu8g/99bd64562e3b0fc1a2ca835e3f323ee8/laravel-vue-cms-demo-part-5.gif)\n\nIn this final part of the series, we will be adding support for comments. We will also ensure that the comments on each post are updated in realtime, so a user doesn’t have to refresh the page to see new comments. \n\nWhen we are done, our application will have new features and will work like this:\n\n![laravel-vue-cms-demo-part-6](//images.ctfassets.net/1es3ne0caaid/2mEM9OrtLmEOGEUQe8iusG/25df38d5f7fee007f23d35ee72ed24c4/laravel-vue-cms-demo-part-6.gif)\n  \n## Prerequisites\n\nTo follow along with this series, a few things are required:\n\n\n- A Pusher account. Sign up [here](https://pusher.com).\n- Basic knowledge of PHP.\n- Basic knowledge of the [Laravel](https://laravel.com) framework.\n- Basic knowledge of JavaScript (ES6 syntax).\n- Basic knowledge of [Vue](https://vuejs.org).\n\n\n## Adding comments to the backend\n\nWhen we were creating the API, we did not add the support for comments to the post resource, so we will have to do so now. Open the API project in your text editor as we will be modifying the project a little.\n\nThe first thing we want to do is create a model, controller, and a migration for the comment resource. To do this, open your terminal and `cd` to the project directory and run the following command:\n\n```\n    $ php artisan make:model Comment -mc\n```\n\nThe command above will create a model called `Comment`, a controller called `CommentController`, and a migration file in the `database/migrations` directory.\n\n### Updating the comments migration file\n\nTo update the comments migration navigate to the `database/migrations` folder and find the newly created migration file for the `Comment` model. Let’s update the `up()` method in the file:\n\n``` php\n    // File: ./database/migrations/*_create_comments_table.php\n    public function up()\n    {\n        Schema::create('comments', function (Blueprint $table) {\n            $table-\u003eincrements('id');\n            $table-\u003etimestamps();\n            $table-\u003einteger('user_id')-\u003eunsigned();\n            $table-\u003einteger('post_id')-\u003eunsigned();\n            $table-\u003etext('body');\n        });\n    }\n```\n\nWe included `user_id` and `post_id` fields because we intend to create a link between the comments, users, and posts. The `body` field will contain the actual comment.\n\n### Defining the relationships among the Comment, User, and Post models\n\nIn this application, a comment will belong to a user and a post because a user can make a comment on a specific post, so we need to define the relationship that ties everything up.\n\nOpen the `User` model and include this method:\n\n``` php\n    // File: ./app/User.php\n    public function comments()\n    {\n        return $this-\u003ehasMany(Comment::class);\n    }\n```\n\nThis is a relationship that simply says that a user can have many comments. Now let’s define the same relationship on the `Post` model. Open the `Post.php` file and include this method:\n\n``` php\n    // File: ./app/Post.php\n    public function comments()\n    {\n        return $this-\u003ehasMany(Comment::class);\n    }\n```\n\nFinally, we will include two methods in the `Comment` model to complete the second half of the relationships we defined in the `User` and `Post` models. \n\nOpen the `app/Comment.php` file and include these methods:\n\n``` php\n    // File: ./app/Comment.php\n    public function user()\n    {\n        return $this-\u003ebelongsTo(User::class);\n    }\n    \n    public function post()\n    {\n        return $this-\u003ebelongsTo(Post::class);\n    }\n```\n\nSince we want to be able to mass assign data to specific fields of a comment instance during comment creation, we will include this array of permitted assignments in the `app/Comment.php` file:\n\n``` php\n    protected $fillable = ['user_id', 'post_id', 'body'];\n```\n\nWe can now run our database migration for our comments:\n\n```\n    $ php artisan migrate\n```\n\n## Configuring Laravel to broadcast events using Pusher\n\nWe already said that the comments will have a realtime functionality and we will be building this using Pusher, so we need to enable Laravel’s event broadcasting feature. \n\nOpen the `config/app.php` file and uncomment the following line in the `providers` array:\n\n```\n    App\\Providers\\BroadcastServiceProvider\n```\n\nNext, we need to configure the broadcast driver in the `.env` file:\n\n```\n    BROADCAST_DRIVER=pusher\n```\n\nLet’s pull in the Pusher PHP SDK using composer:\n\n```\n    $ composer require pusher/pusher-php-server\n```\n\n### Configuring Pusher\n\nFor us to use Pusher in this application, it is a prerequisite that you have a Pusher account. You can create a free Pusher account [here](https://pusher.com/signup) then login to your dashboard and create an app.\n\nOnce you have created an app, we will use the app details to configure pusher in the `.env` file:\n\n```\n    PUSHER_APP_ID=xxxxxx\n    PUSHER_APP_KEY=xxxxxxxxxxxxxxxxxxxx\n    PUSHER_APP_SECRET=xxxxxxxxxxxxxxxxxxxx\n    PUSHER_APP_CLUSTER=xx\n```\n\nUpdate the Pusher keys with the app credentials provided for you under the **Keys** section on the **Overview** tab on the Pusher dashboard.\n\n\n## Broadcasting an event for when a new comment is sent\n\nTo make the comment update realtime, we have to broadcast an event based on the comment creation activity. We will create a new event and call it `CommentSent`. It is to be fired when there is a successful creation of a new comment. \n\nRun command in your terminal:\n\n```\n    php artisan make:event CommentSent\n```\n\nThere will be a newly created file in the `app\\Events` directory, open the `CommentSent.php` file and ensure that it implements the `ShouldBroadcast` interface. \n\nOpen and replace the file with the following code:\n\n``` php\n    // File: ./app/Events/CommentSent.php\n    \u003c?php \n    \n    namespace App\\Events;\n    \n    use App\\Comment;\n    use App\\User;\n    use Illuminate\\Broadcasting\\Channel;\n    use Illuminate\\Queue\\SerializesModels;\n    use Illuminate\\Broadcasting\\PrivateChannel;\n    use Illuminate\\Broadcasting\\PresenceChannel;\n    use Illuminate\\Foundation\\Events\\Dispatchable;\n    use Illuminate\\Broadcasting\\InteractsWithSockets;\n    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n    \n    class CommentSent implements ShouldBroadcast\n    {\n        use Dispatchable, InteractsWithSockets, SerializesModels;\n    \n        public $user;\n        \n        public $comment;\n    \n        public function __construct(User $user, Comment $comment)\n        {\n            $this-\u003euser = $user;\n            \n            $this-\u003ecomment = $comment;\n        }\n        \n        public function broadcastOn()\n        {\n            return new PrivateChannel('comment');\n        }\n    }\n```\n\nIn the code above, we created two public properties, `user` and `comment`, to hold the data that will be passed to the channel we are broadcasting on. We also created a private channel called `comment`. We are using a private channel so that only authenticated clients can subscribe to the channel.\n\n### Defining the routes for handling operations on a comment\n\nWe created a controller for the comment model earlier but we haven’t defined the web routes that will redirect requests to be handled by that controller.\n\nOpen the `routes/web.php` file and include the code below:\n\n``` php\n    // File: ./routes/web.php\n    Route::get('/{post}/comments', 'CommentController@index');\n    Route::post('/{post}/comments', 'CommentController@store');\n```\n\n### Setting up the action methods in the CommentController\n\nWe need to include two methods in the `CommentController.php` file, these methods will be responsible for storing and retrieving methods. In the `store()` method, we will also be broadcasting an event when a new comment is created.\n\nOpen the `CommentController.php` file and replace its contents with the code below:\n\n``` php\n    // File: ./app/Http/Controllers/CommentController.php\n    \u003c?php \n    \n    namespace App\\Http\\Controllers;\n    \n    use App\\Comment;\n    use App\\Events\\CommentSent;\n    use App\\Post;\n    use Illuminate\\Http\\Request;\n    \n    class CommentController extends Controller\n    {\n        public function store(Post $post)\n        {\n            $this-\u003evalidate(request(), [\n                'body' =\u003e 'required',\n            ]);\n            \n            $user = auth()-\u003euser();\n    \n            $comment = Comment::create([\n                'user_id' =\u003e $user-\u003eid,\n                'post_id' =\u003e $post-\u003eid,\n                'body' =\u003e request('body'),\n            ]);\n    \n            broadcast(new CommentSent($user, $comment))-\u003etoOthers();\n    \n            return ['status' =\u003e 'Message Sent!'];\n        }\n        \n        public function index(Post $post)\n        {\n            return $post-\u003ecomments()-\u003ewith('user')-\u003eget();\n        }\n    }\n```\n\nIn the `store` method above, we are validating then creating a new post comment. After the comment has been created, we broadcast the `CommentSent` event to other clients so they can update their comments list in realtime.\n\nIn the `index` method we just return the comments belonging to a post along with the user that made the comment.\n\n### Adding a layer of authentication\n\nLet’s add a layer of authentication that ensures that only authenticated users can listen on the private `comment` channel we created. \n\nAdd the following code to the `routes/channels.php` file:\n\n``` php\n    // File: ./routes/channels.php\n    Broadcast::channel('comment', function ($user) {\n        return auth()-\u003echeck();\n    });\n```\n\n## Adding comments to the frontend \n\nIn the second article of this series, we created the view for the single post landing page in the `single.blade.php` file, but we didn’t add the comments functionality. We are going to add it now. We will be using Vue to build the comments for this application so the first thing we will do is include Vue in the frontend of our application. \n\nOpen the master layout template and include Vue to its `\u003chead\u003e` tag. Just before the `\u003ctitle\u003e` tag appears in the `master.blade.php` file, include this snippet:\n\n``` html\n    \u003c!-- File: ./resources/views/layouts/master.blade.php --\u003e\n    \u003cmeta name=\"csrf-token\" content=\"{{ csrf_token() }}\"\u003e\n    \u003cscript src=\"{{ asset('js/app.js') }}\" defer\u003e\u003c/script\u003e\n```\n\nThe `csrf_token()` is there so that users cannot forge requests in our application. All our requests will pick the randomly generated `csrf-token` and use that to make requests. \n\n**Related:** [**CSRF in Laravel: how VerifyCsrfToken works and how to prevent attacks**](https://blog.pusher.com/csrf-laravel-verifycsrftoken/)\n\nNow the next thing we want to do is update the `resources/assets/js/app.js` file so that it includes a template for the comments view.\n\n Open the file and replace its contents with the code below:\n \n``` javascript\n    require('./bootstrap');\n    \n    import Vue          from 'vue'\n    import VueRouter    from 'vue-router'\n    import Homepage from './components/Homepage'\n    import Create   from './components/Create'\n    import Read     from './components/Read'\n    import Update   from './components/Update'\n    import Comments from './components/Comments'\n    \n    Vue.use(VueRouter)\n    \n    const router = new VueRouter({\n        mode: 'history',\n        routes: [\n            {\n                path: '/admin/dashboard',\n                name: 'read',\n                component: Read,\n                props: true\n            },\n            {\n                path: '/admin/create',\n                name: 'create',\n                component: Create,\n                props: true\n            },\n            {\n                path: '/admin/update',\n                name: 'update',\n                component: Update,\n                props: true\n            },\n        ],\n    });\n    \n    const app = new Vue({\n        el: '#app',\n        components: { Homepage, Comments },\n        router,\n    });\n```\n\nAbove we imported the `Comment` component and then we added it to the list of components in the applications Vue instance.\n\nNow create a `Comments.vue` file in the `resources/assets/js/components` directory. This is where all the code for our comment view will go. We will populate this file later on.\n\n### Installing Pusher and Laravel Echo\n\nFor us to be able to use Pusher and subscribe to events on the frontend, we need to pull in both Pusher and Laravel Echo. We will do so by running this command:\n\n```\n    $ npm install --save laravel-echo pusher-js\n```\n\n\u003e [Laravel Echo](https://github.com/laravel/echo) is a JavaScript library that makes it easy to subscribe to channels and listen for events broadcast by Laravel.\n\nNow let’s configure Laravel Echo to work in our application. In the `resources/assets/js/bootstrap.js` file, find and uncomment this snippet of code:\n\n``` javascript\n    import Echo from 'laravel-echo'\n    \n    window.Pusher = require('pusher-js');\n    \n    window.Echo = new Echo({\n         broadcaster: 'pusher',\n         key: process.env.MIX_PUSHER_APP_KEY,\n         cluster: process.env.MIX_PUSHER_APP_CLUSTER,\n         encrypted: true\n    });\n```\n\n\u003e The `key` and `cluster` will pull the keys from your `.env` file so no need to enter them manually again.\n\nNow let’s import the `Comments` component into the `single.blade.php` file and pass along the required the props. \n\nOpen the `single.blade.php` file and replace its contents with the code below:\n\n``` php\n    {{-- File: ./resources/views/single.blade.php --}}\n    @extends('layouts.master')\n    \n    @section('content')\n    \u003cdiv class=\"container\"\u003e\n      \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-lg-10 mx-auto\"\u003e\n          \u003cbr\u003e\n          \u003ch3 class=\"mt-4\"\u003e\n            {{ $post-\u003etitle }} \n            \u003cspan class=\"lead\"\u003eby \u003ca href=\"#\"\u003e{{ $post-\u003euser-\u003ename }}\u003c/a\u003e\u003c/span\u003e\n          \u003c/h3\u003e\n          \u003chr\u003e\n          \u003cp\u003ePosted {{ $post-\u003ecreated_at-\u003ediffForHumans() }}\u003c/p\u003e\n          \u003chr\u003e\n          \u003cimg class=\"img-fluid rounded\" src=\"{!! !empty($post-\u003eimage) ? '/uploads/posts/' . $post-\u003eimage : 'http://placehold.it/750x300' !!}\" alt=\"\"\u003e\n          \u003chr\u003e\n          \u003cdiv\u003e\n            \u003cp\u003e{{ $post-\u003ebody }}\u003c/p\u003e\n            \u003chr\u003e\n            \u003cbr\u003e\n          \u003c/div\u003e\n          \n          @auth\n          \u003cComments\n              :post-id='@json($post-\u003eid)' \n              :user-name='@json(auth()-\u003euser()-\u003ename)'\u003e\n          \u003c/Comments\u003e\n          @endauth\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n    @endsection\n```\n\n### Building the comments view\n\nOpen the `Comments.vue` file and add the following markup template below:\n\n``` html\n    \u003ctemplate\u003e\n      \u003cdiv class=\"card my-4\"\u003e\n        \u003ch5 class=\"card-header\"\u003eLeave a Comment:\u003c/h5\u003e\n        \u003cdiv class=\"card-body\"\u003e\n          \u003cform\u003e\n            \u003cdiv class=\"form-group\"\u003e\n              \u003ctextarea ref=\"body\" class=\"form-control\" rows=\"3\"\u003e\u003c/textarea\u003e\n            \u003c/div\u003e\n            \u003cbutton type=\"submit\" @click.prevent=\"addComment\" class=\"btn btn-primary\"\u003e\n              Submit\n            \u003c/button\u003e\n          \u003c/form\u003e\n        \u003c/div\u003e\n        \u003cp class=\"border p-3\" v-for=\"comment in comments\"\u003e\n           \u003cstrong\u003e{{ comment.user.name }}\u003c/strong\u003e: \n           \u003cspan\u003e{{ comment.body }}\u003c/span\u003e\n        \u003c/p\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nNow, we’ll add a script that defines two methods:\n\n\n1. `fetchComments()` - this will fetch all the existing comments when the component is created.\n2. `addComment()` - this will add a new comment by hitting the backend server. It will also trigger a new event that will be broadcast so all clients receive them in realtime.\n\nIn the same file, add the following below the closing  `template` tag:\n\n``` javascript\n    \u003cscript\u003e\n    export default {\n      props: {\n        userName: {\n          type: String,\n          required: true\n        },\n        postId: {\n          type: Number,\n          required: true\n        }\n      },\n      data() {\n        return {\n          comments: []\n        };\n      },\n      \n      created() {\n        this.fetchComments();\n        \n        Echo.private(\"comment\").listen(\"CommentSent\", e =\u003e {\n            this.comments.push({\n              user: {name: e.user.name},\n              body: e.comment.body,\n            });\n        });\n      },\n      \n      methods: {\n        fetchComments() {\n          axios.get(\"/\" + this.postId + \"/comments\").then(response =\u003e {\n            this.comments = response.data;\n          });\n        },\n        \n        addComment() {\n          let body = this.$refs.body.value;\n          axios.post(\"/\" + this.postId + \"/comments\", { body }).then(response =\u003e {\n            this.comments.push({\n              user: {name: this.userName},\n              body: this.$refs.body.value\n            });\n            this.$refs.body.value = \"\";\n          });\n        }\n      }\n    };\n    \u003c/script\u003e\n```\n\nIn the `created()` method above, we first made a call to the `fetchComments()` method, then we created a listener to the private `comment` channel using Laravel Echo. Once this listener is triggered, the `comments` property is updated.\n\n\n## Testing the application\n\nNow let’s test the application to see if it is working as intended. Before running the application, we need to refresh our database so as to revert any changes. To do this, run the command below in your terminal:\n\n```\n    $ php artisan migrate:fresh --seed\n```\n\nNext, let’s build the application so that all the changes will be compiled and included as a part of the JavaScript file. To do this, run the following command on your terminal:\n\n```\n    $ npm run dev\n```\n\nFinally, let’s serve the application using this command:\n\n```\n    $ php artisan serve\n```\n\nTo test that our application works visit the application URL http://localhost:8000 on two separate browser windows, we will log in to our application on each of the windows as a different user. \n\nWe will finally make a comment on the same post on each of the browser windows and check that it updates in realtime on the other window:\n\n![laravel-vue-cms-demo-part-6](//images.ctfassets.net/1es3ne0caaid/2mEM9OrtLmEOGEUQe8iusG/25df38d5f7fee007f23d35ee72ed24c4/laravel-vue-cms-demo-part-6.gif)\n\n## Conclusion\n\nIn this final tutorial of this series, we created the comments feature of the CMS and also made it realtime. We were able to accomplish the realtime functionality using Pusher.\n\nIn this entire series, we learned how to build a CMS using Laravel and Vue. ","metaTitle":"Build a CMS with Laravel and Vue - Part 6","metaDescription":"Use Laravel and Vue.js to create a basic CMS. The final product will include authentication, user roles, post creation and editing, and a realtime comments feature. In part six, implement realtime comments."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"Yl4xroGZkAMWEOMOe6CI2","type":"Entry","createdAt":"2018-10-09T20:43:19.141Z","updatedAt":"2020-06-19T12:52:41.321Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Implement online presence in a Laravel application","url":"presence-channels-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/laravel-pusher-presence","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}}],"reviewDate":"2018-10-09","description":"This tutorial shows how to implement online presence and realtime updates in a Laravel application. You will use Laravel, Vue, and SQLite to build a simple app where users can log in and post statuses. Posts will appear in realtime, and users' online presence will be reported.","prerequisite":"You will need the Laravel CLI installed on your machine. This tutorial uses Laravel 5.7. You will also need SQLite, and a basic knowledge of Laravel and PHP.","content":"When using certain applications, it is usually expected that the current user is able to see all other users currently using the service alongside them. For instance, [Dropbox Paper](/) shows all the users that are currently viewing a document. This is very useful and it helps stop users feeling like they are alone on your application.\n\nIn this tutorial, we are going to see how you can add online presence reporting to a Laravel application. To showcase this, we will be building an application where users can log in and leave quick updates on anything they want. Each online user will be able to see the list of logged in users.\n\nHere is the finished application in action:\n\n![laravel-presence-demo](//images.ctfassets.net/1es3ne0caaid/4YFICDIELmeYmuY066gQa6/6d5b3c2a5d73fc0fae587573c0ada351/laravel-presence-demo.gif)\n\n## Prerequisites\n\nBefore we get started, you need to have the following prerequisites:\n\n\n- Laravel CLI installed on your machine. [Installation guide](https://laravel.com/docs/5.7/installation#installation).\n- Node.js installed on your machine. Download the latest stable version [here](https://nodejs.org/en/download/).\n- SQLite (v3.x or later) installed on your machine. \n- A Pusher account. [Create one here](https://pusher.com).\n- Basic PHP/Laravel knowledge.\n- Basic CLI knowledge.\n\nIf you have the listed requirements, we can continue.\n\n\n## Setting up your Laravel project\n\nThe first thing we want to do is create a new Laravel project. To create a new Laravel project, run the following command in your terminal:\n\n```\n    $ laravel new updaytes # where \"updaytes\" is the name of the project\n```\n\nThis will create a new Laravel project that we can start working with. When the installation is complete, we will start installing the JavaScript dependencies using NPM.\n\n### Installing JavaScript dependencies\n\nOpen the `package.json` file that comes with your Laravel installation and replace the contents with the following code:\n\n``` json\n    {\n        \"private\": true,\n        \"scripts\": {\n            \"dev\": \"npm run development\",\n            \"development\": \"cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\",\n            \"watch\": \"npm run development -- --watch\",\n            \"watch-poll\": \"npm run watch -- --watch-poll\",\n            \"hot\": \"cross-env NODE_ENV=development node_modules/webpack-dev-server/bin/webpack-dev-server.js --inline --hot --config=node_modules/laravel-mix/setup/webpack.config.js\",\n            \"prod\": \"npm run production\",\n            \"production\": \"cross-env NODE_ENV=production node_modules/webpack/bin/webpack.js --no-progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\"\n        },\n        \"devDependencies\": {\n            \"axios\": \"^0.18.0\",\n            \"bootstrap\": \"^4.0.0\",\n            \"cross-env\": \"^5.1\",\n            \"jquery\": \"^3.2\",\n            \"laravel-mix\": \"^2.0\",\n            \"lodash\": \"^4.17.5\",\n            \"popper.js\": \"^1.12\",\n            \"vue\": \"^2.5.7\"\n        },\n        \"dependencies\": {\n            \"laravel-echo\": \"^1.4.0\",\n            \"pusher-js\": \"^4.3.1\"\n        }\n    }\n```\n\nIn your terminal, `cd`  to the root of your project and run the following command to install the JavaScript dependencies:\n\n```\n    $ npm install\n```\n\nAfter installation is complete, open the `webpack.mix.js` file and replace the contents with the following:\n\n``` javascript\n    const mix = require('laravel-mix');\n    \n    mix.js('resources/js/app.js', 'public/js')\n        .sass('resources/sass/signin.scss', 'public/css')\n        .sass('resources/sass/app.scss', 'public/css')\n        .sass('resources/sass/updates.scss', 'public/css');\n```\n\nAbove, we have added two new Sass files, `signin.scss` and `updates.scss`. In these files, we will be adding specific CSS for the sign in page and the updates page. Create these files in the `resources/sass` directory and leave them empty.\n\nNext, run the command below to build the assets:\n\n```\n    $ npm run watch\n```\n\n\u003e The `watch` script keeps the command line occupied. It automatically watches for changes to your assets and builds automatically when it detects changes. This is better than running the `build` script every time you make changes.\n\n### Setting up the database\n\nFor this tutorial, we will be using an SQLite database. It is easy to set up and is a good database engine for small projects. If you are building bigger projects though, you should use MySQL.\n\nCreate a new file named `database.sqlite` in the `database` directory and leave it empty. Next,  open the `.env` file in the root of your project and replace the following keys:\n\n```\n    DB_CONNECTION=mysql\n    DB_HOST=127.0.0.1\n    DB_PORT=3306\n    DB_DATABASE=homestead\n    DB_USERNAME=homestead\n    DB_PASSWORD=secret\n```\n\nWith\n\n```\n    DB_CONNECTION=sqlite\n    DB_DATABASE=/full/path/to/database.sqlite\n```\n\nNext, let’s add some classes that will help us manage our database and also seed the table with sample data. In your terminal, run the following command:\n\n```\n    $ php artisan make:model Update -mc\n```\n\n![laravel-presence-create-controller](//images.ctfassets.net/1es3ne0caaid/1gTQxCymwCqk6ao2AQy2Ss/b3c60de92fb159ede0ecdceba42ff754/laravel-presence-create-controller.png)\n\nAs seen from the screenshot, this command generates a model, migration, and a controller. Before we start updating any of those, let’s also generate a [model factory](https://laravel.com/docs/5.7/seeding#using-model-factories). Run the command below to generate a model factory:\n\n```\n    $ php artisan make:factory UpdateFactory\n```\n\nFinally, let’s generate a database seeder. Seeders are used to add dummy data to the database and should not be used in production. Run the command below to generate a database seeder:\n\n```\n    $ php artisan make:seed UsersTableSeeder\n```\n\nNow, let’s start updating the classes generated by the commands above. First, we will start with the migrations. Open the `*_create_users_table.php` migration in the `database/migrations` directory and replace the `up` method with the following:\n\n``` php\n    // File: database/migrations/*_create_users_table.php\n    // [...]\n    \n    public function up()\n    {\n        Schema::create('users', function (Blueprint $table) {\n            $table-\u003eincrements('id');\n            $table-\u003estring('name');\n            $table-\u003estring('email')-\u003eunique();\n            $table-\u003etimestamp('email_verified_at')-\u003enullable();\n            $table-\u003estring('password');\n            $table-\u003estring('avatar')-\u003enullable();\n            $table-\u003erememberToken();\n            $table-\u003etimestamps();\n        });\n    }\n    \n    // [...]\n```\n\nThe actual change we have from the previous code is the introduction of the `avatar` field. We will use this field to store URL to the avatar of the user.\n\nNext, open the `*_create_updates_table.php` file in the `database/migrations` directory and replace the `up` method with the following:\n\n``` php\n    // File: database/migrations/*_create_updates_table.php\n    // [...]\n    \n    public function up()\n    {\n        Schema::create('updates', function (Blueprint $table) {\n            $table-\u003eincrements('id');\n            $table-\u003eunsignedInteger('user_id');\n            $table-\u003estring('text', 280);\n            $table-\u003etimestamps();\n        });\n    }\n    \n    // [...]\n```\n\nAbove, we have the migration for the `updates` table. It has the `user_id` field which it’ll store the user ID of the user that made the update, and the `text` field that stores the update made.\n\nNow that we have defined the table structure using our migration files, let’s update the model for our tables.\n\nOpen the `User.php` file in the `app` directory and replace the class definition with the following code:\n\n``` php\n    // File: ./app/User.php\n    // [...]\n    \n    class User extends Authenticatable\n    {\n        use Notifiable;\n    \n        /**\n         * The attributes that are mass assignable.\n         *\n         * @var array\n         */\n        protected $fillable = [\n            'name', 'email', 'password', 'avatar',\n        ];\n    \n        /**\n         * The attributes that should be hidden for arrays.\n         *\n         * @var array\n         */\n        protected $hidden = [\n            'password', 'remember_token',\n        ];\n        \n        /**\n         * Update model relationship\n         *\n         * @return \\Illuminate\\Database\\Eloquent\\Relations\\HasMany\n         */\n        public function updates()\n        {\n            return $this-\u003ehasMany(Update::class);\n        }\n    }\n```\n\nThe changes above are:\n\n\n- We added the `avatar` field to the `fillable` array.\n- We added the `updates` method, which is for the relationship between the `User` and the `Update`. In this case, a user can have many updates, but an update can only belong to a user.\n\nNext, open the `Update.php` file in the `app` directory and replace the class definition with the following:\n\n``` php\n    // File: ./app/Update.php\n    // [...]\n    \n    class Update extends Model\n    {\n        /**\n         * The attributes that are mass assignable.\n         *\n         * @var array\n         */\n        protected $fillable = [\n            'user_id', 'text'\n        ];\n        \n        /**\n         * User model relationship\n         *\n         * @return \\Illuminate\\Database\\Eloquent\\Relations\\BelongsTo\n         */\n        public function user()\n        {\n            return $this-\u003ebelongsTo(User::class);\n        }\n    }\n```\n\nAbove, we have a typical Laravel model. The `user` method is the relationship link from the `Update` model to the `User` model.\n\nNow that we have the models, let’s update the model factories. Open the `UserFactory.php` file in the `database/factories` directory and replace it with the following code:\n\n``` php\n    // File: ./database/factories/UserFactory.php\n    \u003c?php\n    \n    use Faker\\Generator as Faker;\n    \n    $factory-\u003edefine(App\\User::class, function (Faker $faker) {\n        $number = rand(10, 46);\n        $gender = rand(0, 1) ? 'men' : 'women';\n    \n        return [\n            'name' =\u003e $faker-\u003ename,\n            'email' =\u003e $faker-\u003eunique()-\u003esafeEmail,\n            'password' =\u003e '$2y$10$TKh8H1.PfQx37YgCzwiKb.KjNyWgaHb9cbcoQgdIVFlYg7B77UdFm', // secret\n            'avatar' =\u003e \"https://randomuser.me/api/portraits/${gender}/{$number}.jpg\",\n            'remember_token' =\u003e str_random(10),\n        ];\n    });\n```\n\nAbove, we have a model factory. When the factory is called to generate a user, the callback above is called and it returns a unique array of fields to be used when creating the sample user. The factory uses the [Faker library](https://github.com/fzaninotto/Faker) for this. For the avatar, we are using a photo from the [randomuser.me](https://randomuser.me) website.\n\nNext, open the `UpdateFactory.php` file in the `database/factories` directory and replace the contents with the following code:\n\n``` php\n    // File: ./database/factories/UpdateFactory.php\n    \u003c?php\n    \n    use Faker\\Generator as Faker;\n    \n    $factory-\u003edefine(App\\Update::class, function (Faker $faker) {\n        return [\n            'text' =\u003e $faker-\u003esentence()\n        ];\n    });\n```\n\nThe factory essentially does the same as the previous factory, only for the `Update` model.\n\nNext, open the `UsersTableSeeder.php` file in the `database/seeds` directory and replace the `run` method with the following:\n\n``` php\n    // File: ./database/seeds/UsersTableSeeder.php\n    // [...]\n    \n    public function run()\n    {\n        factory(App\\User::class, 10)-\u003ecreate()-\u003eeach(function ($user) {\n            $user-\u003eupdates()-\u003esave(factory(App\\Update::class)-\u003emake());\n        });\n    }\n    \n    // [...]\n```\n\nAbove, we have added the logic for the seeder. It will generate ten users using the `UserFactory`, and for each of the users, it will generate an update using the `UpdateFactory`. So basically, when the seeder is run, we will have ten dummy users with ten dummy posts.\n\nOpen the `DatabaseSeeder.php` file in the `database/seeds` directory and uncomment the line below:\n\n``` php\n    $this-\u003ecall(UsersTableSeeder::class);\n```\n\nWith this, we are ready to run our migration and seed the database with sample data. Run the command below to do this:\n\n```\n    $ php artisan migrate:fresh --seed\n```\n\n\u003e You can always run the command above to clear changes to the database. It will delete all the tables and run the migration and seed command from scratch.\n\n![laravel-presence-database-seeding](//images.ctfassets.net/1es3ne0caaid/oSz4wTtPOgeimuAAoSmWU/55ad04f6ee815657c89ea794aeba7653/laravel-presence-database-seeding.png)\n\n\n## Building our application\n\nNow we are done with the database set up. Let’s start building the application.\n\n### Creating the login page\n\nFirst, let’s add a login page. We will be using the `/` route as the login page and we will not need the `artisan make:auth` command that comes default with Laravel.\n\nFirst, open the `web.php` file in the `routes` directory and replace the contents with the following code:\n\n``` php\n    // File: ./routes/web.php\n    \u003c?php\n    \n    Route::post('logout', 'Auth\\LoginController@logout')-\u003ename('logout');\n    Route::post('/', 'Auth\\LoginController@login');\n    Route::view('/', 'signin')-\u003emiddleware('guest')-\u003ename('login');\n```\n\nAbove, we have defined three routes:\n\n\n1. `GET /logout` - this will log a user out of the application. It uses the `LoginController` that comes default with Laravel. We don’t need to do anything more.\n2. `POST /` - this will handle logging in. It also uses the `LoginController` and we do not need to do anything but send a `POST` request to it with the `email` and `password` field.\n3. `GET /` - this will display the login page. It uses a `guest` middleware that comes with Laravel by default. This will redirect all logged in users away from the page to the dashboard.\n\nNext, let’s create the signin page. In the `resources/views` directory, create a new file named `signin.blade.php` and paste the following code:\n\n``` php\n    \u003c!-- File: ./resources/views/signin.blade.php --\u003e\n    \u003c!doctype html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \n    \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003ctitle\u003eUpdaytes | Sign in\u003c/title\u003e\n        \u003cmeta content=\"{{ csrf_token() }}\" name=\"csrf-token\"\u003e\n        \u003clink href=\"{{ asset('css/app.css') }}\" rel=\"stylesheet\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"{{ asset('css/signin.css') }}\"\u003e\n    \u003c/head\u003e\n    \n    \u003cbody class=\"text-center\"\u003e\n        \u003cform class=\"form-signin\" method=\"POST\" action=\"{{ route('login') }}\"\u003e\n            @csrf\n            \u003ch3 class=\"h3 mb-3 font-weight-normal\"\u003ePlease sign in\u003c/h3\u003e\n            \u003clabel for=\"inputEmail\" class=\"sr-only\"\u003eEmail address\u003c/label\u003e\n            \u003cinput type=\"email\" name=\"email\" class=\"form-control\" placeholder=\"Email address\" value=\"{{ old('email') }}\" required\u003e\n            \u003clabel for=\"inputPassword\" class=\"sr-only\"\u003ePassword\u003c/label\u003e\n            \u003cinput type=\"password\" name=\"password\" id=\"inputPassword\" class=\"form-control\" placeholder=\"Password\" required\u003e\n            \u003cbutton class=\"btn btn-lg btn-primary btn-block signin-btn\" type=\"submit\"\u003e\n                Sign in\n            \u003c/button\u003e\n        \u003c/form\u003e\n    \u003c/body\u003e\n    \n    \u003c/html\u003e\n```\n\nAbove, we have the HTML for the sign in page. In the `head` it is referencing the `signin.css` file, which at this point is empty. So let’s add the style for this page.\n\nOpen the `resources/sass/signin.scss` file and paste the following code:\n\n``` css\n    // File: ./resources/sass/signin.scss\n    html, body {\n        height: 100%;\n    }\n    body {\n        display: -ms-flexbox;\n        display: flex;\n        -ms-flex-align: center;\n        align-items: center;\n        padding-top: 40px;\n        padding-bottom: 40px;\n        background-color: #f5f5f5;\n    }\n    .form-signin {\n        width: 100%;\n        max-width: 330px;\n        padding: 15px;\n        margin: auto;\n    }\n    .form-signin .checkbox {\n        font-weight: 400;\n    }\n    .form-signin .form-control {\n        position: relative;\n        box-sizing: border-box;\n        height: auto;\n        padding: 10px;\n        font-size: 16px;\n    }\n    .form-signin .form-control:focus {\n        z-index: 2;\n    }\n    .form-signin input[type='email'] {\n        margin-bottom: -1px;\n        border-bottom-right-radius: 0;\n        border-bottom-left-radius: 0;\n    }\n    .form-signin input[type='password'] {\n        border-radius: 0;\n    }\n    .form-signin .signin-btn {\n        font-weight: bold;\n        font-size: 15px;\n        border-top-left-radius: 0;\n        border-top-right-radius: 0;\n    }\n```\n\nAbove, we have the style for the sign in page. Because we have the `npm run watch` command still running, the Sass file will be automatically compiled.\n\nRun the command below in a terminal window to start the Artisan server:\n\n```\n    $ php artisan serve\n```\n\nIn your browser, visit the URL http://localhost:8000/ and you should see the login screen. Great.\n\n![laravel-presence-login](//images.ctfassets.net/1es3ne0caaid/58JCDnTvuwGEIaGuSkGSm4/1eb433ab8dd4d057214be7c3f4078c47/laravel-presence-login.png)\n\nNow quit the serve command by pressing **ctrl + c** on your keyboard. Let’s create the updates page.\n\n### Creating the updates page\n\nBefore we start creating the pages for the updates view, let’s add some routes. Open the `web.php` file in the `routes` directory and add the following code:\n\n``` php\n    // [...]\n    \n    Route::get('home', 'UpdateController@index')-\u003ename('home');\n    Route::get('/updates', 'UpdateController@list');\n    Route::post('/updates', 'UpdateController@create');\n    Route::get('/updates/suggestions', 'UpdateController@userSuggestions');\n    \n    // [...]\n```\n\nAbove, we have four routes:\n\n\n1. `GET /home` - this will be the page where all the updates will be displayed.\n2. `GET /updates` - this will be an API endpoint that we will load from the `/home` route. It will return a JSON response of all the updates.\n3. `POST /updates` - this will be an API endpoint that we will use to add new updates. It will return a JSON response of the new update.\n4. `GET /updates/suggestions` - this will be an API endpoint that will return a JSON response of random users. Not really important, it’s just for aesthetics.\n\nNow that we have the routes, let’s update the `UpdateController`. Open the `UpdateController.php` file in the `app/Http/Controllers` directory and replace the contents with the following:\n\n``` php\n    \u003c?php\n    namespace App\\Http\\Controllers;\n    \n    use App\\User;\n    use App\\Update;\n    use Illuminate\\Http\\Request;\n    use App\\Events\\UpdateCreated;\n    \n    class UpdateController extends Controller\n    {\n        public function __construct()\n        {\n            $this-\u003emiddleware('auth');\n        }\n        \n        public function index()\n        {\n            return view('updates');\n        }\n        \n        public function create(Request $request)\n        {\n            $data = $request-\u003evalidate(['text' =\u003e 'required|min:1|max:280|string']);\n            \n            $update = auth()-\u003euser()-\u003eupdates()-\u003esave(new Update($data))-\u003eload('user');\n            \n            broadcast(new UpdateCreated($update))-\u003etoOthers();\n            \n            return response()-\u003ejson($update);\n        }\n        \n        public function list()\n        {\n            return response()-\u003ejson(Update::latest()-\u003ewith('user')-\u003elimit(15)-\u003eget());\n        }\n        \n        public function userSuggestions()\n        {\n            $user = auth()-\u003euser();\n            \n            return response()-\u003ejson(\n                User::where('id', '!=', $user-\u003eid)-\u003einRandomOrder()-\u003elimit(5)-\u003eget()\n            );\n        }\n    }\n```\n\nAbove, we have a few methods defined:\n\n\n- `__construct` - in here we add the `auth` middleware so that only authenticated users can visit any of the pages in this controller.\n- `index` - the updates page.\n- `create` - creates a new update, sends a broadcast to Pusher, and returns a JSON response.\n- `list` - returns a JSON response with the latest updates.\n- `userSuggestions` - returns a JSON response with random users.\n\nTo create the event we are broadcasting in the `create` method, run the following command below:\n\n```\n    $ php artisan make:event UpdateCreated\n```\n\nFor now, we will leave the generated class and move on.\n\nLet’s add the HTML and style for the updates page. Create a new `updates.blade.php` file in the `resources/views` directory and paste the following:\n\n``` php\n    \u003c!-- File: ./resources/views/updates.blade.php --\u003e\n    \u003c!doctype html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \n    \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003ctitle\u003eUpdytes | Home\u003c/title\u003e\n        \u003cmeta content=\"{{ csrf_token() }}\" name=\"csrf-token\"\u003e\n        \u003clink href=\"{{ asset('css/app.css') }}\" rel=\"stylesheet\"\u003e\n        \u003clink href=\"{{ asset('css/updates.css') }}\" rel=\"stylesheet\"\u003e\n    \u003c/head\u003e\n    \n    \u003cbody class=\"bg-light updates\"\u003e\n        \u003cnav class=\"navbar navbar-expand-lg navbar-dark bg-dark\"\u003e\n            \u003ca class=\"navbar-brand mr-auto mr-lg-0\" href=\"#\"\u003eUPDAYTES\u003c/a\u003e\n            \u003cdiv class=\"navbar-collapse offcanvas-collapse\" id=\"navbarsExampleDefault\"\u003e\n                \u003cul class=\"navbar-nav mr-auto\"\u003e\n                    \u003cli class=\"nav-item\"\u003e\n                        \u003ca class=\"nav-link\" href=\"{{ route('logout') }}\" onclick=\"event.preventDefault();\n                                            document.getElementById('logout-form').submit();\"\u003e\n                            {{ __('Logout') }}\n                        \u003c/a\u003e\n                        \u003cform id=\"logout-form\" action=\"{{ route('logout') }}\" method=\"POST\" style=\"display: none;\"\u003e\n                            @csrf\n                        \u003c/form\u003e\n                    \u003c/li\u003e\n                \u003c/ul\u003e\n                \u003cform class=\"form-inline my-2 my-lg-0\"\u003e\n                    \u003cinput class=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\"\u003e\n                    \u003cbutton class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\"\u003eSearch\u003c/button\u003e\n                \u003c/form\u003e\n            \u003c/div\u003e\n        \u003c/nav\u003e\n        \n        \u003cdiv id=\"app\"\u003e\n            \u003cdiv class=\"nav-scroller bg-white shadow-sm clearfix\"\u003e\n                \u003cOnlineList :me='@json(auth()-\u003euser()-\u003etoArray())'\u003e\u003c/OnlineList\u003e\n            \u003c/div\u003e\n            \n            \u003cmain role=\"main\" class=\"container\"\u003e\n                \u003cdiv class=\"d-flex align-items-center p-3 my-3 text-white-50 bg-purple rounded shadow-sm\"\u003e\n                    \u003cdiv class=\"lh-100\"\u003e\n                        \u003ch6 class=\"mb-0 text-white lh-100\"\u003eBootstrap Forum\u003c/h6\u003e\n                        \u003csmall\u003eUpdates on the development of the community\u003c/small\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cUpdates\u003e\u003c/Updates\u003e\n                \u003cSuggestions\u003e\u003c/Suggestions\u003e\n            \u003c/main\u003e\n        \u003c/div\u003e\n        \n        \u003cscript src=\"{{ asset('js/app.js') }}\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nAbove, we have the HTML for the updates page. There are a few things to note in the markup above:\n\n\n- It references the `updates.css` style, which we have not yet created.\n- It has three Vue components referenced, `OnlineList`, `Updates`, and `Suggestions`, which we have not created.\n- It includes the `js/app.js` file which will contain our bundled JavaScript.\n\nLet’s add some styling to the page. Open the `updates.scss` file in the `resources/sass` directory and paste the following:\n\n``` css\n    // File: ./resources/sass/updates.scss\n    .updates {\n        .bg-purple {\n            background-color: #6f42c1;\n        }\n        .size-32 {\n            width: 32px;\n            height: 32px;\n        }\n        .nav-scroller .nav-link {\n            line-height: 32px;\n            display: inline-block;\n            margin-right: -9px;\n            float: right;\n        }\n        .squished {\n            padding-left: 0;\n            padding-right: 0;\n            \u0026:first-child,\n            \u0026:last-child {\n                margin-right: 15px;\n            }\n        }\n        .avatar {\n            border-radius: 50%;\n            text-indent: 1000px;\n            border-radius: 50%;\n            height: 34px;\n            line-height: 34px;\n            width: 34px;\n            border: 2px solid #fff;\n        }\n    }\n```\n\nAbove, we have the style for the updates page. Because we have the `npm run watch` command still running, the Sass file will be automatically compiled.\n\nNext, let’s create the Vue components referenced in the updates page. Create the following files in the `resources/js/components` directory:\n\n\n- `Updates.vue`\n- `Suggestions.vue`\n- `OnlineList.vue`\n\nNext, open the `resources/js/app.js` file and replace the contents with the following:\n\n``` javascript\n    require('./bootstrap');\n    require('axios');\n    \n    window.Vue = require('vue');\n    \n    Vue.component('updates', require('./components/Updates.vue'));\n    Vue.component('onlinelist', require('./components/OnlineList.vue'));\n    Vue.component('suggestions', require('./components/Suggestions.vue'));\n    \n    const app = new Vue({\n        el: '#app'\n    });\n```\n\nAbove, we imported [Axios](https://github.com/axios/axios), which we will use for HTTP requests, we also registered the Vue components we created earlier.\n\nLet’s update the contents of the Vue components. Open the `Updates.vue` file and paste the following code into it:\n\n``` html\n    \u003c!-- File: ./resources/js/components/Updates.vue --\u003e\n    \u003ctemplate\u003e\n        \u003cdiv class=\"my-3 p-3 bg-white rounded shadow-sm\"\u003e\n            \u003ch6 class=\"border-bottom border-gray pb-2 mb-0\"\u003eRecent updates\u003c/h6\u003e\n            \u003cdiv class=\"media text-muted pt-3\" v-if=\"updates.length == 0\"\u003e\n                Loading updates...\n            \u003c/div\u003e\n            \u003cdiv class=\"media text-muted pt-3 pb-3 border-bottom border-grey\" v-else\u003e\n                \u003cform class=\"form-inline\" v-on:submit.prevent=\"addUpdate\"\u003e\n                    \u003cdiv class=\"form-group mr-2\"\u003e\n                        \u003cinput type=\"text\" class=\"form-control\" v-model=\"update\" placeholder=\"What's happening?\"\u003e\n                    \u003c/div\u003e\n                    \u003cbutton type=\"submit\" class=\"btn btn-primary\"\u003eUpdate\u003c/button\u003e\n                \u003c/form\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"media text-muted pt-3\" v-for=\"update in updates\" :key=\"update.id\"\u003e\n                \u003cimg :src=\"update.user.avatar\" class=\"size-32 mr-2 rounded\"\u003e\n                \u003cp class=\"media-body pb-3 mb-0 small lh-125 border-bottom border-gray\"\u003e\n                    \u003cstrong class=\"d-block text-gray-dark\"\u003e\n                        {{ update.user.name }}\n                    \u003c/strong\u003e\n                    {{ update.text }}\n                \u003c/p\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    export default {\n        name: 'Updates',\n        data() {\n            return {\n                update: '',\n                updates: [],\n            }\n        },\n        mounted () {\n            axios.get('/updates').then(res =\u003e (this.updates = res.data))\n        },\n        methods: {\n            addUpdate () {\n                if (this.update.trim() !== '') {\n                    axios.post('/updates', {text: this.update}).then(res =\u003e {\n                        this.update = ''\n                        this.updates.unshift(res.data)\n                    })\n                }\n            }\n        }\n    }\n    \u003c/script\u003e\n```\n\nAbove, the component is divided into `template` and `script`. The `template` contains the HTML for the component and the `script` contains the JavaScript.\n\nIn the `script` we load the updates in the `mounted` method. In the `template` we loop through all the `updates` and display each. We also have a form that we can use to post a new update. When submitted, this form calls the `addUpdate` function in the `methods` property.\n\nNext, open the `resources/js/components/Suggestions.vue` and paste the following code:\n\n``` html\n    \u003c!-- File: ./resources/js/components/Suggestions.vue --\u003e\n    \u003ctemplate\u003e\n        \u003cdiv class=\"my-3 p-3 bg-white rounded shadow-sm\"\u003e\n            \u003ch6 class=\"border-bottom border-gray pb-2 mb-0\"\u003eSuggestions\u003c/h6\u003e\n            \u003cdiv class=\"media text-muted pt-3\" v-if=\"users.length == 0\"\u003e\n                Loading users...\n            \u003c/div\u003e\n            \u003cdiv class=\"media text-muted pt-3\" v-for=\"user in users\" :key=\"user.id\"\u003e\n                \u003cimg :src=\"user.avatar\" :alt=\"user.name\" class=\"size-32 mr-2 rounded\"\u003e\n                \u003cdiv class=\"media-body pb-3 mb-0 small lh-125 border-bottom border-gray\"\u003e\n                    \u003cdiv class=\"d-flex justify-content-between align-items-center w-100\"\u003e\n                        \u003cstrong class=\"text-gray-dark\"\u003e{{ user.name }}\u003c/strong\u003e\n                        \u003ca href=\"#\"\u003eFollow\u003c/a\u003e\n                    \u003c/div\u003e\n                    \u003cspan class=\"d-block\"\u003eFollow my updates\u003c/span\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    export default {\n        name: 'Suggestions',\n        data() {\n            return {\n                users: []\n            }\n        },\n        mounted () {\n            axios.get('/updates/suggestions').then(res =\u003e (this.users = res.data))\n        }\n    }\n    \u003c/script\u003e\n```\n\nJust like the `Updates` component, we have the `template` and `script` tag. The `script` loads the suggested users and the `template` loops over the `users` and displays them.\n\nFinally, open the file `resources/js/components/OnlineList.vue` and paste the following code:\n\n``` html\n    \u003c!-- File: ./resources/js/components/OnlineList.vue --\u003e\n    \u003ctemplate\u003e\n        \u003cul class=\"nav float-right\"\u003e\n            \u003cli class=\"nav-link squished\"\u003eOnline Users\u003c/li\u003e\n            \u003cli class=\"nav-link squished\" href=\"#\" v-for=\"user in users\" :key=\"user.id\"\u003e\n                \u003cimg class=\"avatar\" :src=\"user.avatar\" :alt=\"user.name\"\u003e\n            \u003c/li\u003e\n        \u003c/ul\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    export default {\n        name: 'OnlineList',\n        props: ['me'],\n        data () {\n            return {\n                users: []\n            }\n        },\n        mounted () {\n            this.users.push(this.me)\n        }\n    }\n    \u003c/script\u003e\n```\n\nLike the components before it, the `OnlineList` component has the `template` that loops through the data and the `script` that loads the data. \n\nWe have not yet implemented the who’s online feature so, in the `mounted` method, we just add the current user as the only online user. We will add the presence and realtime feature in the next section.\n\n### Adding the realtime and presence feature\n\nLet’s start from the Laravel PHP side. We will first activate the broadcasting feature, then we will update the configuration in our `.env` file, after which we will update the event file we created earlier.\n\nOpen the `config/app.php` file and uncomment the `BroadcastServiceProvider` line:\n\n``` php\n    App\\Providers\\BroadcastServiceProvider::class,\n```\n\nNext, open the `.env` file and change the `BROADCAST_DRIVER` from `log` to `pusher`. Finally, in the same file, update the keys below with the keys from your Pusher dashboard.\n\n```\n    PUSHER_APP_ID=\n    PUSHER_APP_KEY=\n    PUSHER_APP_SECRET=\n    PUSHER_APP_CLUSTER=\n```\n\nNext, open the `app/Events/UpdateCreated.php` file and replace the contents with the following:\n\n``` php\n    // File: app/Events/UpdateCreated.php\n    \u003c?php\n    namespace App\\Events;\n    \n    use App\\Update;\n    use Illuminate\\Queue\\SerializesModels;\n    use Illuminate\\Broadcasting\\PrivateChannel;\n    use Illuminate\\Foundation\\Events\\Dispatchable;\n    use Illuminate\\Broadcasting\\InteractsWithSockets;\n    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n    \n    class UpdateCreated implements ShouldBroadcast\n    {\n        use Dispatchable, InteractsWithSockets, SerializesModels;\n        \n        public $update;\n        \n        /**\n         * Create a new event instance.\n         *\n         * @return void\n         */\n        public function __construct(Update $update)\n        {\n            $this-\u003eupdate = $update;\n        }\n        \n        /**\n         * Get the channels the event should broadcast on.\n         *\n         * @return \\Illuminate\\Broadcasting\\Channel|array\n         */\n        public function broadcastOn()\n        {\n            return new PrivateChannel('updates');\n        }\n    }\n```\n\nAbove, we have a [Laravel event](https://laravel.com/docs/5.7/events) class. Notably, we have the `broadcastsOn`  method which defines the channel we want to broadcast this event on. In this case, we are using a private channel called `updates`.\n\n\n\u003e Note that we are implementing the `ShouldBroadcast` interface. If we don’t, the event will not be broadcasted to our Pusher instance.\n\nNext, open the `routes/channels.php` file and replace the contents with the following code:\n\n``` php\n    // File: ./routes/channel.php\n    \u003c?php\n    \n    Broadcast::channel('updates', function ($user) {\n        return auth()-\u003echeck();\n    });\n    \n    Broadcast::channel('online', function ($user) {\n        if (auth()-\u003echeck()) {\n            return $user-\u003etoArray();\n        }\n    });\n```\n\nBecause our channels are private, presence is private by default, we have to define the authentication logic. The first one checks if the current user is logged in. Only logged in users can listen in on the `updates` channel. \n\nThe second checks to see if the user can listen on the `online` presence channel. Unlike the first, the presence channel does not return a boolean. It returns details of the user if the user is authorized.\n\nOne last thing we need to do is pull in the Pusher PHP SDK. Run the following command in your terminal to do this:\n\n```\n    $ composer require pusher/pusher-php-server\n```\n\nNow, let’s go over to the JavaScript side. Open the `resources/js/bootstrap.js` file and uncomment the following lines at the bottom of the file:\n\n``` javascript\n    import Echo from 'laravel-echo'\n    \n    window.Pusher = require('pusher-js');\n    \n    window.Echo = new Echo({\n        broadcaster: 'pusher',\n        key: process.env.MIX_PUSHER_APP_KEY,\n        cluster: process.env.MIX_PUSHER_APP_CLUSTER,\n        encrypted: true\n    });\n```\n\nThis will make [Laravel Echo](https://laravel.com/docs/5.7/broadcasting#installing-laravel-echo) available to us. We will use this library to interact with Pusher. \n\nNext, open the `Updates.vue` file and update the `mounted` method as seen below:\n\n``` javascript\n    // [...]\n    \n    mounted () {\n        axios.get('/updates').then(res =\u003e (this.updates = res.data)) \n        Echo.private('updates')\n            .listen('UpdateCreated', data =\u003e this.updates.unshift(data.update))\n    }\n    \n    // [...]\n```\n\nAbove, we are using Laravel Echo to listen for the `UpdateCreated` event on the `updates` channel. Every time a new update is added, the event above will be triggered and the callback inside the `listen` method will be invoked.\n\nIn the callback, we add the `update` to the top of the `updates` array. Because Vue is reactive, the data will be updated instantly on the UI.\n\nNext, open the `OnlineList.vue` file and update the `mounted` method as seen below:\n\n``` javascript\n    // [...]\n    \n    mounted () {\n        // [...]\n        \n        Echo.join('online')\n            .here(users =\u003e (this.users = users))\n            .joining(user =\u003e this.users.push(user))\n            .leaving(user =\u003e (this.users = this.users.filter(u =\u003e (u.id !== user.id))))\n    }\n    \n    // [...]\n```\n\nAbove we have the magic that handles online presence. We use Echo to `join` the `online` presence channel. Then the methods chained are:\n\n\n- `here` - this returns all the users currently in this presence channel. In the callback, we set the `users` array to the response.\n- `joining` - this is called when a new user comes online. In the callback, we simply `push` the new user to the `users` array.\n- `leaving` - this is called when a user disconnects or goes offline. In the callback, we filter out the user that disconnected from the `users` array.\n\nThat’s all. Now let’s test our application to see it in action.\n\n\n## Testing the application\n\nTo test the application, we need two accounts that we can log into. You can check the `users` table in the SQLite database but there is an easier way to get the users.\n\nIn your terminal, run the command below:\n\n```\n    $ php artisan tinker\n```\n\n\u003e Laravel Artisan's tinker is a [repl (read-eval-print loop)](https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop). A repl translates to `read-eval-print-loop`, and it is an interactive language shell. It takes in a single user input, evaluates it, and returns the result to the user. - [Scotch.io](https://scotch.io/tutorials/tinker-with-the-data-in-your-laravel-apps-with-php-artisan-tinker)\n\nIn the interactive shell, run the following command:\n\n```\n    \u003e\u003e\u003e App\\User::inRandomOrder()-\u003elimit(2)-\u003eget()-\u003eimplode('email', \"  \")\n```\n\nThis will give us the emails of two random users.\n\n![laravel-presence-tinker](//images.ctfassets.net/1es3ne0caaid/7zEgaNBxSwQqYiAMMawKq0/84e7316b309e25e13e09f6b08a80be64/laravel-presence-tinker.png)\n\nWe can use these email addresses to log in as the demo users. The password is **secret** for all the demo users.\n\nRun the command below to exit `tinker` (you can also press **ctrl + c** on your keyboard):\n\n```\n    \u003e\u003e\u003e exit\n```\n\nNow run the command below to start your PHP server:\n\n```\n    $ php artisan serve\n```\n\nNow, open two different browsers. In both, visit the URL http://localhost:8000 and log in as both users on the different browsers. You should see the application in action like this:\n\n![laravel-presence-demo](//images.ctfassets.net/1es3ne0caaid/4YFICDIELmeYmuY066gQa6/6d5b3c2a5d73fc0fae587573c0ada351/laravel-presence-demo.gif)\n\n## Conclusion\n\nIn this tutorial, we have seen how easy it is to work with presence channels on a Laravel application. \n\nThe source code is available on [GitHub](https://github.com/neoighodaro/laravel-pusher-presence).","metaTitle":"Working with presence channels in a Laravel application","metaDescription":"Use Laravel, Vue and SQLite to create a simple app that reports online presence and shows status updates in realtime."}}],"defaultValue":"Channels \u0026 Vue.js","queryType":"tag","pages":7,"route":"/tutorials","query":{"product":"Channels","tag":"Vue.js","page":"2"}}},"page":"/tutorials","query":{"product":"Channels","tag":"Vue.js","page":"2"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=Vue.js&page=2 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:10 GMT -->
</html>