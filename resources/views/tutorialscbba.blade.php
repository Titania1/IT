<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=Android&page=4 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:36:20 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">86</span> tutorials for “<span class="css-npldjc ehwuahf2">Android</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorialsa785.html?product=Beams&amp;tag=Android" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials.html" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#C223CE" xmlns="http://www.w3.org/2000/svg"><path fill="#C223CE" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#C223CE" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#C223CE" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#C223CE" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Android"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/laravel-logger-part-1.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Creating a Laravel logger - Part 1: Getting started</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">In this six-part series, build a Laravel error logging service. You will create a custom Laravel package to include in L...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/shopping-cart-kotlin-part-3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a shopping cart with Kotlin - Part 3: Adding reactivity to the app</h3><p class="css-k12xad e5jrto45">This three-part series will walk you through building a shopping cart for an Android app using Kotlin. In part three, us...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/shopping-cart-kotlin-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a shopping cart with Kotlin - Part 2: Building the shopping cart logic</h3><p class="css-k12xad e5jrto45">This three-part series will walk you through building a shopping cart for an Android app using Kotlin. In part two, impl...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/shopping-cart-kotlin-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a shopping cart with Kotlin - Part 1: Listing products</h3><p class="css-k12xad e5jrto45">This three-part series will walk you through building a shopping cart for an Android app using Kotlin. In part one, set ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/onboarding-flutter-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flutter<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an onboarding experience for your mobile apps with Flutter - Part 2: Build the carousel</h3><p class="css-k12xad e5jrto45">This two part series guides you through building an onboarding experience for users new to your app. You will create a b...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/onboarding-flutter-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flutter<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an onboarding experience for your mobile apps with Flutter - Part 1: Building the screens</h3><p class="css-k12xad e5jrto45">This two part series guides you through building an onboarding experience for users new to your app. You will create a b...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/react-native-pong-game.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Gaming</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a two-player Pong game with React Native</h3><p class="css-k12xad e5jrto45">This in-depth tutorial will show you how to create a complete two-player mobile Pong game using React Native. You will u...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/react-native-payments.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Accepting payments in React Native</h3><p class="css-k12xad e5jrto45">In this tutorial you will build a mobile app in React Native that can process payments using Stripe. The backend will be...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/local-data-flutter.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flutter<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">How to save data locally in Flutter</h3><p class="css-k12xad e5jrto45">This tutorial looks at saving data locally with Flutter. It provides code samples for three methods: saving to shared pr...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialsa14f.html?tag=Android&amp;page=3" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials7538.html?tag=Android&amp;page=1" class="css-5s6711 edg0byb1">1</a><a href="tutorials7586.html?tag=Android&amp;page=2" class="css-5s6711 edg0byb1">2</a><a href="tutorialsa14f.html?tag=Android&amp;page=3" class="css-5s6711 edg0byb1">3</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialscbba.html?tag=Android&amp;page=4" class="css-2wakph edg0byb1">4</a><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorialsc76b.html?tag=Android&amp;page=5" class="css-za1ua3 edg0byb1">5</a><a href="tutorialsef96.html?tag=Android&amp;page=6" class="css-za1ua3 edg0byb1">6</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials3b60.html?tag=Android&amp;page=10" class="css-5s6711 edg0byb1">10</a><a href="tutorialsc76b.html?tag=Android&amp;page=5" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":86,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5xDBTJKeJXrmXfcEF1UMoh","type":"Entry","createdAt":"2019-03-19T17:31:02.421Z","updatedAt":"2019-03-19T17:31:02.421Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Creating a Laravel logger - Part 1: Getting started","url":"laravel-logger-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/logger","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}}],"reviewDate":"2019-03-19","description":"In this six-part series, build a Laravel error logging service. You will create a custom Laravel package to include in Laravel apps, along with web, Android and iOS frontends. Alerts will publish in realtime, featuring push notifications to mobile. In part one, build the log dispatcher.","prerequisite":"For this part of the series, you will need PHP 7.13+, Laravel 5.7+ and Composer installed on your machine.","content":"In this tutorial series, we will see how we can create a simple realtime monitoring application. It will have mobile applications that will be able to see logs as they happen on your application and thus make it easier to find out what is wrong with an application and fix it.\n\nWhen building applications, logging is an essential part of diagnosing the problems with the application. Many times, applications can fail when a client is viewing the website or application. These incidents can often go unnoticed especially if it is not reported by the client, which happens a lot.\n\nMost languages and frameworks come with in-built logging systems that will help you diagnose problems with your application. However, these logs are stored on the filesystem and will require logging into your server and searching for the log messages, which is inconvenient. There are services like [BugSnag](https://bugsnag.com) and [Sentry](https://sentry.io) that offer log monitoring as a service which makes it easy to work with application logs. \n\nThe system will include a log dispatcher that will work hand in hand with a Laravel package to distribute logs to various clients (a web dashboard, an Android app, an iOS app) in realtime. For this first part, we will build the dispatcher. The app will contain a simple page with a modal that has a form. \n\nHere’s a demo of how the page will look and the modal behavior:\n\n![laravel-log-1-1](//images.ctfassets.net/1es3ne0caaid/nvHlteXI4Kbxasz7yd7aR/f17aef7a58276ce9b38b57b4ce029890/laravel-log-1-1.gif)\n\n## Requirements\n\nTo follow along with this series you need the following things:\n\n- Laravel installed on your local machine. [Installation guide](https://laravel.com/docs/5.7/installation).\n- Knowledge of PHP and the Laravel framework.\n- Composer installed on your local machine. [Installation guide](https://getcomposer.org/doc/00-intro.md#installation-linux-unix-macos).\n- [Android Studio](https://developer.android.com/studio/install) \u003e= 3.x installed on your machine (If you are building for Android).\n- Knowledge of Kotlin and the Android Studio IDE.\n- [Xcode](https://developer.apple.com/xcode/) \u003e= 10.x installed on your machine (If you are building for iOS).\n- Knowledge of the Swift programming language and the Xcode IDE.\n\n\n## Setting up \n\nLet’s start setting up our environment so we can build the logging dispatcher.\n\n### Installing PHP\n\n\u003e If you already have PHP 7.1.3 or above installed on your machine, you can skip this section.\n\nThe first step for our setup is to install PHP. This can be more complicated than usual depending on your machine. So, in order to not unnecessarily elongate this post, I will just provide explicit resources for that.\n\nTo install PHP:\n\n- For Windows users, use [this](https://www.sitepoint.com/how-to-install-php-on-windows/) guide.\n- For Ubuntu users, use [this](https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu-16-04) guide.\n- For Mac, PHP usually comes pre-installed. You can verify using this command:\n\n```\n    $ php -v\n```\n\nIf you don’t have it installed or it’s a lower version that required, you can use [this post](https://medium.com/@romaninsh/install-php-7-2-xdebug-on-macos-high-sierra-with-homebrew-july-2018-d7968fe7e8b8) as a guide to installing PHP on your Mac.\n\n### Installing Composer and the Laravel installer\n\n\u003e If you have already installed the Laravel CLI, you can skip this part entirely.\n\nNext, let’s install Laravel. Laravel utilizes Composer to manage its dependencies so, before using Laravel, we have to make sure Composer is installed. If you don’t have it, you can follow the following steps to get it installed:\n\nRun this command in your terminal to download the composer installer:\n\n```\n    // For Mac\n    $ php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\"\n    \n    // For Linux\n    $ curl -sS https://getcomposer.org/installer -o composer-setup.php\n```\n\n\u003e If you are using a Windows machine, you can use the composer setup file [here](https://getcomposer.org/Composer-Setup.exe).\n\nNext, run this command to verify your downloaded file:\n\n```\n    $ php -r \"if (hash_file('sha384', 'composer-setup.php') === '48e3236262b34d30969dca3c37281b3b4bbe3221bda826ac6a9a62d6444cdb0dcd0615698a5cbe587c3f0fe57a54d8f5') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;\"\n```\n\nFrom the snippet above, you are verifying the hash of the downloaded installer. If the hash matches the expected hash from Composer. You can find the current Composer hash [here](https://composer.github.io/pubkeys.html).\n\nNext, let’s install composer globally so we can run the command from anywhere. To do this, run the following command on your terminal:\n\n```\n    $ php composer-setup.php --install-dir=/usr/local/bin --filename=composer\n```\n\nThis command installs composer in the `/usr/local/bin` directory.\n\n\n\u003e If you are using Linux, you might want to add `sudo` before the `php` command so the command is run as the `root` user.\n\nNext, run the command below to install the Laravel installer: \n\n```\n    $ composer global require laravel/installer\n```\n\nAfter the installation is complete, you should be able to run the `laravel` command on your terminal. Try this to verify:\n\n```\n    $ laravel -V\n```\n\nIf you have installed it successfully, you would see the version of the Laravel installer currently installed on your machine. \n\n## Building our app\n\nNow that we have the Laravel installer, let’s create a new Laravel application. To create a new Laravel application, run the following command:\n\n```\n    $ laravel new logger-app\n```\n\nThis command will create a new Laravel application in a directory named `logger-app`. \n\nAlternatively, you can create a Laravel app using the composer `create-project` command like this:\n\n```\n    $ composer create-project --prefer-dist laravel/laravel logger-app\n```\n\nNow you can `cd` to your applications directory and run the following command:\n\n```\n    $ php artisan serve\n```\n\n![laravel-log-1-2](//images.ctfassets.net/1es3ne0caaid/6XYpNStMGJRjQIv7MXGusD/a9998eea0ba5f9eed21e8e1c9740aef6/laravel-log-1-2.png)\n\nThis will start a local PHP server on port 8000. Now, you can visit the URL http://localhost:8000 and you will see the Laravel welcome screen.\n\n![laravel-log-1-3](//images.ctfassets.net/1es3ne0caaid/18qfpZpAYIfVWEODINv6Qx/537dbb83900ea8dc6312e5e6ad9b4ea2/laravel-log-1-3.png)\n\nThe page rendered here is the default view of newly created apps. This route is registered in the `routes/web.php`  file. If you look at the single route there, you should see that it loads the `welcome.blade.php` view. All views are in the `/resources/views/` directory. For the sake of brevity, let’s update this view instead of creating a new one.\n\nFirst, we need to import the app CSS file, add the link to the file in the `\u003chead\u003e` tag like so:\n\n```php\n    \u003c!-- File: ./resources/views/welcome.blade.php --\u003e\n    \u003c!-- [...] --\u003e\n    \u003chead\u003e\n        \u003c!-- Leave existing styles --\u003e\n        \u003c!-- [...] --\u003e\n        \u003clink rel=\"stylesheet\" href=\"{{ asset('css/app.css') }}\"\u003e \n        \u003cmeta name=\"csrf-token\" content=\"{{ csrf_token() }}\" /\u003e\n    \u003c/head\u003e\n```\n\nAbove, we are using the `asset` function to load the asset from the `public/css` directory. It is recommended that you use the `asset` function as it will add the full URL to the asset.\n\n![laravel-log-1-4](//images.ctfassets.net/1es3ne0caaid/3QaBwNbV3ucuVaOcWd0gHK/1ce5de7a3fe769f7c796e7e50c827683/laravel-log-1-4.png)\n\nNext, let’s replace the design with ours. Still in the `welcome.blade.php` file, replace the code in the `\u003cbody\u003e` tag with this:\n\n```php\n    \u003c!-- File: ./resources/views/welcome.blade.php --\u003e\n    \u003c!-- [...] --\u003e\n    \u003cdiv class=\"flex-center position-ref full-height\"\u003e\n        \u003cdiv class=\"content\"\u003e\n            \u003cdiv class=\"title m-b-md\"\u003e\n              Laravel Logger\n            \u003c/div\u003e\n    \n            \u003cdiv class=\"button\"\u003e\n              \u003cbutton type=\"button\" class=\"btn btn-lg btn-primary\" data-toggle=\"modal\" data-target=\"#exampleModal\"\u003e\n                Send Log\n              \u003c/button\u003e\n            \u003c/div\u003e\n            \n            \u003c!-- Modal will be inserted here --\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e   \n    \n    \u003cscript src=\"{{ asset('js/app.js') }}\"\u003e\u003c/script\u003e     \n    \u003c!-- [...] --\u003e\n```\n\nAbove, we replaced the HTML on the previous page with ours. We also added a button that when clicked a modal, which we will create soon, will open. In the snippet, we added comments for where other parts of the code will be added, you should watch out for that too.\n\nNow for the modal, in the same file where it specifies the “Modal will be inserted here” add the following code:\n\n```php\n    @includeIf('partials.modal')\n```\n\nThis will include the view `resources/views/partials/modal.blade.php` if it exists. Right now it does not so create it and paste the following code into the file:\n\n```php\n    \u003c!-- File: ./resources/views/partials/modal.blade.php --\u003e\n    \u003cdiv class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\"\u003e\n        \u003cdiv class=\"modal-dialog\" role=\"document\"\u003e\n            \u003cdiv class=\"modal-content\"\u003e\n                \u003cdiv class=\"modal-header\"\u003e\n                    \u003ch5 class=\"modal-title\" id=\"exampleModalLabel\"\u003e\n                        Send Log\n                    \u003c/h5\u003e\n                    \u003cbutton type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"\u003e\n                    \u003cspan aria-hidden=\"true\"\u003e\u0026times;\u003c/span\u003e\n                    \u003c/button\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"modal-body\"\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"exampleFormControlSelect1\"\u003eLog Level\u003c/label\u003e\n                        \u003cselect name=\"level\" class=\"form-control\" id=\"level\"\u003e\n                            \u003coption value=\"info\"\u003eInfo\u003c/option\u003e\n                            \u003coption value=\"warning\"\u003eWarning\u003c/option\u003e\n                            \u003coption value=\"error\"\u003eError\u003c/option\u003e\n                        \u003c/select\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"exampleFormControlTextarea1\"\u003eLog Message\u003c/label\u003e\n                        \u003ctextarea name=\"message\" class=\"form-control\" id=\"message\" rows=\"2\"\u003e\u003c/textarea\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"modal-footer\"\u003e\n                    \u003cbutton type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\"\u003eClose\u003c/button\u003e\n                    \u003cbutton type=\"button\" class=\"btn btn-danger\"\u003eDispatch\u003c/button\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nThe modal content is made of three sections, the header, body and, footer. The header shows a description of the modal. Next, is the body which contains the form. This contains an input for the log message and the log level (warning, error, or info). Lastly, the footer has two buttons: a button to dispatch (send) the form details and another to close the modal.\n\nWith this, we have finished building the frontend of the app. Now, we can run our app, and it should look like this:\n\n![laravel-log-1-1](//images.ctfassets.net/1es3ne0caaid/nvHlteXI4Kbxasz7yd7aR/f17aef7a58276ce9b38b57b4ce029890/laravel-log-1-1.gif)\n\n## Conclusion\n\nIn this first tutorial of the series, we have built a logger app that will trigger logs using Laravel. The app dispatches logs of different levels. For now, this app does not actually send the log anywhere or even generate it. \n\nIn the next [part](https://pusher.com/tutorials/laravel-logger-part-2), we will build a package that will send the log messages to Pusher. We will then link the package to this app to make it work then the **Dispatch** button on the modal is pressed.\n\nThe source code is available on [GitHub](https://github.com/neoighodaro/logger).","metaTitle":"Creating a Laravel logger - Part 1: Getting started","metaDescription":"In this six-part series, build a Laravel error logging service. You will create a custom Laravel package to include in Laravel apps, along with web, Android and iOS frontends. Alerts will publish in realtime, featuring push notifications to mobile. In part one, build the log dispatcher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2FgED8BAgQc3tzjemsWGko","type":"Entry","createdAt":"2019-03-12T17:07:19.493Z","updatedAt":"2019-03-12T17:07:19.493Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a shopping cart with Kotlin - Part 3: Adding reactivity to the app","url":"shopping-cart-kotlin-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Ok7hdNlHGsaAME2MCGEeq","type":"Entry","createdAt":"2018-09-17T17:53:10.446Z","updatedAt":"2018-09-17T17:53:10.446Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ethiel Adiassa","url":"ethiel-adiassa","email":"ethiel97@gmail.com","twitter":"https://twitter.com/ethiel97","github":"https://github.com/ethiel97","guestWriter":true}}],"projectRepo":"https://github.com/Ethiel97/kotlin-shoppingCart/tree/part-three","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}}],"reviewDate":"2019-03-12","description":"This three-part series will walk you through building a shopping cart for an Android app using Kotlin. In part three, use RxKotlin to make the app UI reactive, and add the final features to the app.","prerequisite":"You will need an Android development environment set up on your machine. Some knowledge of Android development is required.","content":"## Introduction\n\nIn this last part of the tutorial series, we will add some reactivity to our app using RxKotlin, and complete our shopping cart.\n\n## Prerequisites\n\nIn order to follow along with the tutorial, make sure you meet the following requirements:\n\n- [IntelliJ IDEA](https://www.jetbrains.com/idea/) or [Android Studio](https://developer.android.com/studio/index.html).\n- Experience with the Kotlin language\n- Having followed and completed the previous parts of the tutorial series: [Part 1](https://pusher.com/tutorials/shopping-cart-kotlin-part-1) [Part 2](https://pusher.com/tutorials/shopping-cart-kotlin-part-2)\n- An emulator or physical device (for app testing/debugging purpose)\n\n\n## What’s RxKotlin?\n\nYou may not know what RxKotlin  is about. Well I cannot blame you for that 🙂 . The first thing you should know is that RxKotlin is about Reactive programming with Kotlin. And you may also ask what is reactive programming, right ? \n\nAccording to [Wikipedia](https://en.wikipedia.org/wiki/Reactive_programming),\n\n\u003e **Reactive programming** is a [programming paradigm](https://en.wikipedia.org/wiki/Programming_paradigm) oriented around [data flows](https://en.wikipedia.org/wiki/Dataflow_programming) and the propagation of change. This means that it should be possible to express static or dynamic data flows with ease in the programming languages used, and that the underlying execution model will automatically propagate changes through the data flow\n\nThis paradigm is built on the ideology of the observable pattern, and provides us with many tools to build reactive apps. We have essentially three components involved in  reactive programming:\n\n\n- Observers: an observer subscribes to an observable.\n\n\n- Observables: an observable emits a stream of data which the the observer listens for and reacts to.\n\n\n- Operators: they allow the observer to perform a set of really useful operations over the sequence  of items emitted by the the observable.\n\nNow that you grasp some basic concepts of reactive programming, I can explain you what RxKotlin is about. \n\nAccording to [the official definition](https://github.com/ReactiveX/RxKotlin),\n\n\u003e RxKotlin is a lightweight library that adds convenient extension functions to [RxJava](https://github.com/ReactiveX/RxJava). You can use RxJava with Kotlin out-of-the-box, but Kotlin has language features (such as [extension functions](https://kotlinlang.org/docs/reference/extensions.html)) that can streamline usage of RxJava even more. RxKotlin aims to conservatively collect these conveniences in one centralized library, and standardize conventions for using RxJava with Kotlin.\n\nSo from what is said, we see that RxKotlin is a wrapper around RxJava which is itself an open-source implementation of the ReactiveX library that helps you create applications in the reactive programming style.\n\nNow we can move on to the implementation of this concept into our shopping cart app.\n\n\n## Adding reactivity to the counter with RxKotlin\n\nNow, head over to your `build.gradle` file, then add  the RxJava and RxKotlin libraries to your dependencies block:\n\n``` gradle\n    //..app/build.gradle\n    implementation 'io.reactivex.rxjava2:rxjava:2.1.9'\n    implementation 'io.reactivex.rxjava2:rxkotlin:2.2.0'\n```\n\nYou remembered in the previous part we’ve added some listeners to our buttons to perform some operations over our cart. We’ll update this section, we’ll add a taste of reactivity using the really cool possibilities RxKotlin offers us.\n\nMove to your `ProductAdapter` file where you defined listeners,\n\n``` kotlin\n     \n     itemView.addToCart.setOnClickListener { view -\u003e\n        \n            val item = CartItem(product)\n    \n            ShoppingCart.addItem(item)\n            //notify users\n            Snackbar.make(\n                (itemView.context as MainActivity).coordinator,\n                \"${product.name} added to your cart\",\n                Snackbar.LENGTH_LONG\n            ).show()\n    \n        }\n    \n        itemView.removeItem.setOnClickListener { view -\u003e\n    \n            val item = CartItem(product)\n    \n            ShoppingCart.removeItem(item, itemView.context)\n    \n            Snackbar.make(\n                (itemView.context as MainActivity).coordinator,\n                \"${product.name} removed from your cart\",\n                Snackbar.LENGTH_LONG\n            ).show()\n    \n        }\n```        \n\nand amend this section like the following:\n\n``` kotlin\n    ../app/src/main/java/yourPackage/ProductAdapter.kt\n    \n    Observable.create(ObservableOnSubscribe\u003cMutableList\u003cCartItem\u003e\u003e {\n    \n        itemView.addToCart.setOnClickListener { view -\u003e\n    \n            val item = CartItem(product)\n    \n            ShoppingCart.addItem(item)\n            //notify users\n            Snackbar.make(\n                (itemView.context as MainActivity).coordinator,\n                \"${product.name} added to your cart\",\n                Snackbar.LENGTH_LONG\n            ).show()\n    \n            it.onNext(ShoppingCart.getCart())\n    \n        }\n    \n        itemView.removeItem.setOnClickListener { view -\u003e\n    \n            val item = CartItem(product)\n    \n            ShoppingCart.removeItem(item, itemView.context)\n    \n            Snackbar.make(\n                (itemView.context as MainActivity).coordinator,\n                \"${product.name} removed from your cart\",\n                Snackbar.LENGTH_LONG\n            ).show()\n    \n            it.onNext(ShoppingCart.getCart())\n        }\n    \n    \n    }).subscribe { cart -\u003e\n        var quantity = 0\n    \n        cart.forEach { cartItem -\u003e\n            quantity += cartItem.quantity\n        }\n    \n        (itemView.context as MainActivity).cart_size.text = quantity.toString()\n        Toast.makeText(itemView.context, \"Cart size $quantity\", Toast.LENGTH_SHORT).show()\n    }\n```    \n\nWhat we’ve done above is pretty simple. We’ve created an Observable from our shopping cart data as we know it is basically a list of `CartItem`: \n\n``` kotlin\n    Observable.create(ObservableOnSubscribe\u003cMutableList\u003cCartItem\u003e\u003e {\n```\n\nThen whenever an item is added or removed, we pulled the new state of the shopping cart to the data stream with this line:  `it.onNext(ShoppingCart.getCart())`. \n \nNext we subscribe to this stream of data, once we get it, we made some basic operation to get the updated shopping cart size and finally we display it on the counter: `(itemView.context as MainActivity).cart_size.text = quantity.toString()`. Pretty simple, right?\n \nYou should agree that in just a few lines of code, we’ve added some reactivity to our shopping cart 😎.\n \nNow if you run and test your app, you should see it behaving like expected. No more disappointment like in the previous article 😁. \n \nLet’s finish our app by adding a review functionality with a **Checkout** button.\n\n\n## Adding the review functionality to the shopping cart\n\nIn this section, we’ll build an activity responsible for reviewing our shopping cart items as well as convenient details.\n\nCreate a `cart_list_item` file and paste the following inside. This layout is responsible for handling the view of a single cart item. It simply contains the cart item image, its name, price and quantity.\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    //../app/src/main/java/res/layout/cart_list_item.xml\n    \u003candroid.support.v7.widget.CardView\n            xmlns:android=\"http://schemas.android.com/apk/res/android\"\n            xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n            app:cardUseCompatPadding=\"true\"\n            app:cardElevation=\"1.5dp\"\n            android:layout_margin=\"2dp\"\n            app:cardBackgroundColor=\"@android:color/white\"\n            app:cardCornerRadius=\"2dp\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\u003e\n    \n        \u003cLinearLayout\n                xmlns:android=\"http://schemas.android.com/apk/res/android\"\n                android:layout_width=\"match_parent\"\n                android:gravity=\"center_vertical\"\n                android:weightSum=\"1.5\"\n                android:layout_height=\"match_parent\"\u003e\n    \n    \n            \u003cImageView\n                    android:layout_weight=\".5\"\n                    android:scaleType=\"fitXY\"\n                    android:id=\"@+id/product_image\"\n                    android:layout_width=\"170dp\"\n                    android:layout_height=\"135dp\"/\u003e\n    \n    \n            \u003cLinearLayout\n                    android:layout_weight=\".5\"\n                    android:gravity=\"center_vertical\"\n                    android:layout_marginRight=\"8dp\"\n                    android:padding=\"8dp\"\n                    android:orientation=\"vertical\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"match_parent\"\n                    android:layout_marginEnd=\"8dp\"\u003e\n    \n    \n                \u003cTextView\n                        android:textSize=\"19sp\"\n                        android:textColor=\"@android:color/black\"\n                        android:id=\"@+id/product_name\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"/\u003e\n    \n    \n                \u003cTextView\n                        android:layout_marginTop=\"10dp\"\n                        android:textSize=\"16sp\"\n                        android:textStyle=\"bold\"\n                        android:id=\"@+id/product_price\"\n                        android:textColor=\"@android:color/holo_red_light\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"/\u003e\n    \n    \n            \u003c/LinearLayout\u003e\n    \n    \n            \u003cTextView\n                    android:textStyle=\"bold\"\n                    android:layout_marginEnd=\"12dp\"\n                    android:gravity=\"center_vertical\"\n                    android:layout_gravity=\"center_vertical\"\n                    android:padding=\"8dp\"\n                    android:textColor=\"@android:color/black\"\n                    android:textSize=\"16sp\"\n                    android:background=\"@drawable/round_background\"\n                    android:id=\"@+id/product_quantity\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_marginRight=\"12dp\"/\u003e\n    \n        \u003c/LinearLayout\u003e\n    \u003c/android.support.v7.widget.CardView\u003e\n```    \n    \n\nWe’ll also a need adapter to render our shopping cart items properly.\nCreate a `ShoppingCartAdapter.kt` file and paste the following inside:\n\n```kotlin\n    //..app/src/main/java/yourPackage/ShoppingCartAdapter.kt\n    \n    import android.content.Context\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import com.squareup.picasso.Picasso\n    import kotlinx.android.synthetic.main.cart_list_item.view.*\n    \n    class ShoppingCartAdapter(var context: Context, var cartItems: List\u003cCartItem\u003e) :\n        RecyclerView.Adapter\u003cShoppingCartAdapter.ViewHolder\u003e() {\n        override fun onCreateViewHolder(parent: ViewGroup, p1: Int): ShoppingCartAdapter.ViewHolder {\n    \n            // The layout design used for each list item\n            val layout = LayoutInflater.from(context).inflate(R.layout.cart_list_item, parent, false)\n    \n            return ViewHolder(layout)\n        }\n    \n            // This returns the size of the list.\n        override fun getItemCount(): Int = cartItems.size\n    \n        override fun onBindViewHolder(viewHolder: ShoppingCartAdapter.ViewHolder, position: Int) {\n    \n         //we simply call the `bindItem` function here\n            viewHolder.bindItem(cartItems[position])\n        }\n        class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {\n    \n            fun bindItem(cartItem: CartItem) {\n    \n            // This displays the cart item information for each item\n                Picasso.get().load(cartItem.product.photos[0].filename).fit().into(itemView.product_image)\n    \n                itemView.product_name.text = cartItem.product.name\n    \n                itemView.product_price.text = \"$${cartItem.product.price}\"\n    \n                itemView.product_quantity.text = cartItem.quantity.toString()\n    \n            }\n        }\n    \n    }\n```    \n\n\nNow, we are a few to finish our mobile app. The next step is build the activity responsible for handing the review of our shopping cart. It will have the following rendering 😋 \n\n![kotlin-shopping-part-3-1](//images.ctfassets.net/1es3ne0caaid/3ibJ0VX5GxMB5nukJVHpOd/d69cdb3dbd4017faed0c7ff2c34a4fcf/kotlin-shopping-part-3-1.jpeg)\n\nCreate an empty activity named `ShoppingCartActivity` or whatever you want. Then, move on to your `activity_shopping_cart.xml` file and  replace the content with the following:\n \n```xml\n    //../app/src/main/java/res/layout/activity_shopping_cart.xml\n    \n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.design.widget.CoordinatorLayout\n            xmlns:android=\"http://schemas.android.com/apk/res/android\"\n            xmlns:tools=\"http://schemas.android.com/tools\"\n            xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n            android:layout_width=\"match_parent\"\n            android:background=\"#fffffdff\"\n            android:layout_height=\"match_parent\"\n            tools:context=\".ShoppingCartActivity\"\u003e\n    \n        \u003candroid.support.design.widget.AppBarLayout\n                android:background=\"@android:color/transparent\"\n                android:fitsSystemWindows=\"true\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"?attr/actionBarSize\"\u003e\n    \n            \u003candroid.support.v7.widget.Toolbar\n                    android:id=\"@+id/toolbar\"\n                    app:titleTextColor=\"@color/colorAccent\"\n                    app:title=\"Shopping Cart\"\n                    android:background=\"@android:color/white\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"?attr/actionBarSize\"/\u003e\n    \n        \u003c/android.support.design.widget.AppBarLayout\u003e\n    \n    \n        \u003candroid.support.v7.widget.RecyclerView\n                app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"\n                android:id=\"@+id/shopping_cart_recyclerView\"\n                android:layout_margin=\"2dp\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\"/\u003e\n    \n    \n        \u003cRelativeLayout\n                android:padding=\"8dp\"\n                app:elevation=\"4dp\"\n                android:layout_gravity=\"bottom\"\n                android:elevation=\"15dp\"\n                android:background=\"@color/colorAccent\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"66dp\"\n                tools:targetApi=\"lollipop\"\u003e\n    \n    \n            \u003cLinearLayout\n                    android:layout_alignParentStart=\"true\"\n                    android:layout_centerVertical=\"true\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_marginLeft=\"15dp\"\n                    android:layout_height=\"wrap_content\"\n                    tools:ignore=\"RtlCompat\"\u003e\n    \n                \u003cTextView\n                        android:id=\"@+id/totalLabel\"\n                        android:textSize=\"18sp\"\n                        android:textStyle=\"bold\"\n                        android:text=\"Total\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        /\u003e\n    \n                \u003cTextView\n                        android:layout_marginStart=\"18dp\"\n                        android:id=\"@+id/total_price\"\n                        android:textSize=\"24sp\"\n                        android:textColor=\"@android:color/white\"\n                        android:textStyle=\"bold\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        tools:ignore=\"RtlCompat\"/\u003e\n    \n            \u003c/LinearLayout\u003e\n    \n    \n            \u003cButton\n                    android:textSize=\"19sp\"\n                    android:layout_centerVertical=\"true\"\n                    android:layout_marginEnd=\"15dp\"\n                    android:layout_marginRight=\"15dp\"\n                    android:padding=\"10dp\"\n                    android:layout_alignParentEnd=\"true\"\n                    android:text=\"Checkout\"\n                    android:textAllCaps=\"false\"\n                    android:background=\"@drawable/round_background\"\n                    android:textColor=\"@android:color/white\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_alignParentRight=\"true\"/\u003e\n    \n    \n        \u003c/RelativeLayout\u003e\n    \n    \u003c/android.support.design.widget.CoordinatorLayout\u003e\n```    \n\nThe above layout contains a recycler view to display our shopping cart items, and a bottom bar containing the total price of our shopping and a **Checkout** button.\n\nAlso, replace the content of your `ShoppingCartActivity` like the following:\n\n```kotlin\n    //..app/src/main/java/yourPackage/ShoppingCartActivity.kt\n    \n    import android.graphics.PorterDuff\n    import android.support.v7.app.AppCompatActivity\n    import android.os.Bundle\n    import android.support.v4.content.ContextCompat\n    import android.support.v7.widget.LinearLayoutCompat\n    import android.support.v7.widget.LinearLayoutManager\n    import android.support.v7.widget.RecyclerView\n    import android.view.MenuItem\n    import kotlinx.android.synthetic.main.activity_shopping_cart.*\n    \n    class ShoppingCartActivity : AppCompatActivity() {\n    \n        lateinit var adapter: ShoppingCartAdapter\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_shopping_cart)\n    \n            setSupportActionBar(toolbar)\n    \n            supportActionBar?.setDisplayShowHomeEnabled(true)\n            supportActionBar?.setDisplayHomeAsUpEnabled(true)\n    \n            val upArrow = ContextCompat.getDrawable(this, R.drawable.abc_ic_ab_back_material)\n            upArrow?.setColorFilter(ContextCompat.getColor(this, R.color.colorPrimary), PorterDuff.Mode.SRC_ATOP)\n            supportActionBar?.setHomeAsUpIndicator(upArrow)\n    \n            adapter = ShoppingCartAdapter(this, ShoppingCart.getCart())\n            adapter.notifyDataSetChanged()\n    \n            shopping_cart_recyclerView.adapter = adapter\n    \n            shopping_cart_recyclerView.layoutManager = LinearLayoutManager(this)\n    \n            var totalPrice = ShoppingCart.getCart()\n                .fold(0.toDouble()) { acc, cartItem -\u003e acc + cartItem.quantity.times(cartItem.product.price!!.toDouble()) }\n    \n            total_price.text = \"$${totalPrice}\"\n        }\n    \n        override fun onOptionsItemSelected(item: MenuItem?): Boolean {\n    \n            when (item?.itemId) {\n                android.R.id.home -\u003e {\n                    onBackPressed()\n                }\n            }\n    \n            return super.onOptionsItemSelected(item)\n        }\n    }\n```    \n\nIn this activity, we are doing three essential things,  first we provide our adapter with the shopping cart items to handle, then we configure and tell our recycler view that its adapter is ready to use and we assigned it, then we compute the total price from the shopping cart items and display it.\n\nWe get a reference to the arrow back icon, and tint its color to fit our design needs.\n\n```kotlin\n     \n      val upArrow = ContextCompat.getDrawable(this, R.drawable.abc_ic_ab_back_material)\n            upArrow?.setColorFilter(ContextCompat.getColor(this, R.color.colorPrimary), PorterDuff.Mode.SRC_ATOP)\n            supportActionBar?.setHomeAsUpIndicator(upArrow)\n```            \n\n\n```kotlin    \n    override fun onOptionsItemSelected(item: MenuItem?): Boolean {\n            when (item?.itemId) {\n                android.R.id.home -\u003e {\n                    onBackPressed()\n                }\n            }\n            return super.onOptionsItemSelected(item)\n        }\n```        \n\nThis block of code simply redirects the user to the previous screen/activity when the back arrow icon is clicked.\n\nNow we need a way to link our two screens, the `MainActivity` one and the `ShoppingCartActivity` one. But how? 🤔  We just need to add a click listener to the `showCart` button defined in the `MainActivity` class, the listener handler will head us to the `ShoppingCartActivity` screen.\n\nSo add this block of code into your `MainActivity.kt` file after the `getProducts` method:\n\n```kotlin\n    //..app/src/main/java/yourPackage/MainActivity.kt\n    \n    showCart.setOnClickListener {\n        startActivity(Intent(this, ShoppingCartActivity::class.java))\n    }\n```    \n\nOur app is complete now with all the expected features. You can run and test it, hopefully everything should be working fine. Otherwise, check if you haven’t missed any step.\n\n## Conclusion\n\nFinally we reached the end of this tutorial series. I think this part has been more useful to you than others because you have learned a new concept : Reactive programming and put it into practice. \nYou can grab the source code for the  last part [here](https://github.com/Ethiel97/kotlin-shoppingCart/tree/part-three); if you want and you can even fork the repo to add more features to the app 😉.","metaTitle":"Build a shopping cart with Kotlin - Part 3","metaDescription":"This three-part series will walk you through building a shopping cart for an Android app using Kotlin. In part three, use RxKotlin to make the app UI reactive, and add the final features to the app."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6QdKKTn8X2fsFADA7lx3KS","type":"Entry","createdAt":"2019-03-08T17:15:51.195Z","updatedAt":"2019-03-08T17:16:02.885Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a shopping cart with Kotlin - Part 2: Building the shopping cart logic","url":"shopping-cart-kotlin-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Ok7hdNlHGsaAME2MCGEeq","type":"Entry","createdAt":"2018-09-17T17:53:10.446Z","updatedAt":"2018-09-17T17:53:10.446Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ethiel Adiassa","url":"ethiel-adiassa","email":"ethiel97@gmail.com","twitter":"https://twitter.com/ethiel97","github":"https://github.com/ethiel97","guestWriter":true}}],"projectRepo":"https://github.com/Ethiel97/kotlin-shoppingCart/tree/part-two","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}}],"reviewDate":"2019-03-08","description":"This three-part series will walk you through building a shopping cart for an Android app using Kotlin. In part two, implement the shopping cart logic.","prerequisite":"You will need an Android development environment set up on your machine. Some knowledge of Android development is required.","content":"## Introduction\n\nIn this second tutorial of this series, we’ll build the shopping cart logic and other things involved in the process. This should allow our users to add products to the cart and know exactly the size of the cart. It’s time to dive into the code.\n\n\nIn the [previous tutorial](https://pusher.com/tutorials/shopping-cart-kotlin-part-1), we’ve built an app that is able to fetch some data from a remote web service and render them using a recycler view to the users. \n\n## Prerequisites\n\nTo follow along with this tutorial, you will need the following:\n\n- [IntelliJ IDEA](https://www.jetbrains.com/idea/) or [Android Studio](https://developer.android.com/studio/index.html).\n- Experience with the Kotlin language\n- Completed [part one](https://pusher.com/tutorials/shopping-cart-kotlin-part-1) of the series\n- An emulator or physical device (for app testing/debugging purpose)\n\n\n\n## Build the shopping cart logic \n\nWe’ll be building the shopping cart logic and workflow. \nFirst, let’s create a `CartItem` entity (a `CartItem.kt` as it happens) which represents  a single shopping cart item in the `../app/src/main/java/yourPackage` directory:\n\n\n```\n    data class CartItem(var product: Product, var quantity: Int = 0)\n```    \n\nAs you can see, this class is pretty straightforward, it only has two fields:\n\n- the product to manipulate: `product`, an instance of the Product class we defined in the first part of the tutorial\n- and the product quantity: `quantity`, just an integer, by default equal to zero\n\nNext, we’ll define a custom class responsible for handling the shopping cart operations such as adding items to the cart, removing items from the cart, getting the cart size and so on.\n\nFirst, you must add this dependency [Paper](https://github.com/pilgr/Paper) into your app. It’s a simple but efficient NoSQL-like for Android apps. This library will made things easily for us as we no more need to maintain an SQLite database which is very cumbersome. If you need some info about how to use the Paper library, you can read the documentation [here](https://github.com/pilgr/Paper#add-dependency).\n\nNow, head over to your `build.gradle` file, then add  the following to your dependencies block:\n\n``` gradle\n    //..app/build.gradle\n    implementation 'io.paperdb:paperdb:2.6'\n```\n\nOur custom class `ShoppingCart` is a wrapper around the Paper library, and contains a set of useful (static) functions for specific purposes. We made use of the Paper library to store our shoppping cart data, and retrieve them whenever we want.\n\nCreate a `ShoppingCart.kt`  file and add the following class:\n\n\n``` kotlin\n    //..app/src/main/java/yourPackage/ShoppingCart.kt\n    import android.content.Context\n    import android.widget.Toast\n    import io.paperdb.Paper\n    \n    class ShoppingCart {\n    \n        companion object {\n            fun addItem(cartItem: CartItem) {\n              val cart = ShoppingCart.getCart()\n    \n              val targetItem = cart.singleOrNull { it.product.id == cartItem.product.id }\n                if (targetItem == null) {\n                    cartItem.quantity++\n                    cart.add(cartItem)\n                } else {\n                    targetItem.quantity++\n                }\n                ShoppingCart.saveCart(cart)\n            }\n    \n            fun removeItem(cartItem: CartItem, context: Context) {\n              val cart = ShoppingCart.getCart()\n    \n              val targetItem = cart.singleOrNull { it.product.id == cartItem.product.id }\n                if (targetItem != null) {\n                    if (targetItem.quantity \u003e 0) {\n                        targetItem.quantity--\n                    } else {\n                        cart.remove(targetItem)\n                    }\n                }\n    \n                ShoppingCart.saveCart(cart)\n            }\n    \n            fun saveCart(cart: MutableList\u003cCartItem\u003e) {\n                Paper.book().write(\"cart\", cart)\n            }\n    \n            fun getCart(): MutableList\u003cCartItem\u003e {\n                return Paper.book().read(\"cart\", mutableListOf())\n            }\n    \n            fun getShoppingCartSize(): Int {\n                var cartSize = 0\n                ShoppingCart.getCart().forEach {\n                    cartSize += it.quantity;\n                }\n    \n                return cartSize\n            }\n        }\n    \n    }\n```\n\nWe have five dedicated functions in our class:\n\n\n- `addItem`: this function basically gets a `cartItem` instance as a parameter, checks first whether it is on the cart or not. If it’s in the cart, we just increment its quantity by one, if this is not the case not only we increment its quantity but we also add it the cart and save the shopping cart to keep it updated.\n\n\n- `removeItem`: here, we also check if the `cartItem` instance is present in the cart, then we remove it from the shopping cart if its quantity is equal to zero, but if its quantity is superior to zero we just decreased it by one. Finally, we keep the cart updated by saving it.\n\n\n- `saveCart`: with the help of this function, we can save the state of our app\n\n\n- `getCart`: this function returns our shopping cart itself, basically a list of `CartItem`\n\n\n- `getShoppingCartSize`:  helps us get the actual number of items present in our cart\n\n\n## Add remove/add buttons to the design with their listeners\n\nWe just added two buttons to our product cart design, one for adding the product to the shopping cart and the second one to remove it. So amend your `product_row_item` layout file like the following:\n\n``` xml\n    //../app/src/main/res/layout/product_row_item.xml\n    \n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.v7.widget.CardView\n            xmlns:card_view=\"http://schemas.android.com/tools\"\n            xmlns:android=\"http://schemas.android.com/apk/res/android\"\n            xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n            app:cardUseCompatPadding=\"true\"\n            android:layout_margin=\"2dp\"\n            app:cardBackgroundColor=\"@android:color/white\"\n            app:cardCornerRadius=\"4dp\"\n            android:background=\"?attr/selectableItemBackground\"\n            app:cardElevation=\"3dp\"\n            android:foreground=\"?attr/selectableItemBackground\"\n            card_view:cardElevation=\"4dp\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\u003e\n    \n        \u003cLinearLayout\n                android:orientation=\"vertical\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\"\u003e\n    \n            \u003cImageView\n                    android:id=\"@+id/product_image\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"180dp\"/\u003e\n    \n            \u003cLinearLayout\n                    android:layout_marginStart=\"5dp\"\n                    android:layout_marginLeft=\"5dp\"\n                    android:padding=\"10dp\"\n                    android:orientation=\"vertical\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"wrap_content\"\u003e\n    \n    \n                \u003cTextView\n                        android:textColor=\"@android:color/black\"\n                        android:textSize=\"22sp\"\n                        android:layout_marginBottom=\"12dp\"\n                        android:id=\"@+id/product_name\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"/\u003e\n    \n    \n                \u003cTextView\n                        android:textSize=\"19sp\"\n                        android:id=\"@+id/product_price\"\n                        android:textColor=\"@android:color/holo_red_light\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"/\u003e\n            \u003c/LinearLayout\u003e\n    \n    \n            \u003cLinearLayout\n                    android:layout_gravity=\"end\"\n                    android:orientation=\"horizontal\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\u003e\n    \n                \u003cImageButton\n                        android:id=\"@+id/removeItem\"\n                        android:layout_width=\"wrap_content\"\n                        android:paddingHorizontal=\"16dp\"\n                        android:tint=\"@android:color/white\"\n                        android:paddingVertical=\"4dp\"\n                        android:src=\"@drawable/ic_remove_shopping_cart\"\n                        android:background=\"@color/colorPrimary\"\n                        android:layout_height=\"wrap_content\"\n                        card_view:targetApi=\"o\"/\u003e\n    \n                \u003cImageButton\n                        android:id=\"@+id/addToCart\"\n                        android:paddingHorizontal=\"16dp\"\n                        android:tint=\"@android:color/white\"\n                        android:paddingVertical=\"4dp\"\n                        android:src=\"@drawable/ic_add_shopping\"\n                        android:background=\"@color/colorAccent\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        card_view:targetApi=\"o\"/\u003e\n    \n            \u003c/LinearLayout\u003e\n    \n    \n        \u003c/LinearLayout\u003e\n    \n    \u003c/android.support.v7.widget.CardView\u003e\n```\n\nHere you can find the [ic_remove_shopping_cart](https://github.com/Ethiel97/kotlin-shoppingCart/blob/master/app/src/main/res/drawable/ic_remove_shopping_cart.xml) resource file to paste in `../app/src/main/res/drawable` folder.\n\nNow, head over to your `ProductAdapter` file, and add the following inside the view holder inner class in the `bindProduct` method body:\n\n``` kotlin\n    ../app/src/main/java/yourPackage/ProductAdapter.kt\n    \n    import android.content.Context\n    import android.support.design.widget.Snackbar\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.Toast\n    import com.squareup.picasso.Picasso\n    import io.paperdb.Paper\n    import kotlinx.android.synthetic.main.activity_main.*\n    import kotlinx.android.synthetic.main.product_row_item.view.*\n    \n    class ViewHolder(){\n    \n    ......\n    ......\n    ......\n    \n      \n      fun bindProduct(product:Product){\n      ...\n      ...\n      ...\n      \n       itemView.addToCart.setOnClickListener { view -\u003e\n        \n            val item = CartItem(product)\n    \n            ShoppingCart.addItem(item)\n            //notify users\n            Snackbar.make(\n                (itemView.context as MainActivity).coordinator,\n                \"${product.name} added to your cart\",\n                Snackbar.LENGTH_LONG\n            ).show()\n    \n        }\n    \n        itemView.removeItem.setOnClickListener { view -\u003e\n    \n            val item = CartItem(product)\n    \n            ShoppingCart.removeItem(item, itemView.context)\n    \n            Snackbar.make(\n                (itemView.context as MainActivity).coordinator,\n                \"${product.name} removed from your cart\",\n                Snackbar.LENGTH_LONG\n            ).show()\n    \n        }\n      \n      }\n        \n    }\n```\n\nWe just add the listeners to our buttons. When the `addToCart` button is clicked, we create a new instance of the `CartItem` class is created provided with the product to add, then we add it to the shopping cart with the help of the `addItem` utility function we created. Next, we show a snack bar to the user to give them a visual feedback about the success of his action. The process is the same for the `removeToCart` click event, except that we removed the item from the shopping cart using our `removeItem` utility function.\n\n\n\n## Add the shopping cart size counter\n\nNow, we want to let our users know our cart size, and keep them updated when an item is added or removed, as you can see in the picture below. Let’s add this button, and the counter to our `src/main/res/layout/activity_main.xml` as well as the logic required to make it work as expected. Basically the counter is a text view updated with the shopping cart size.\n\nFirst, we designed a custom shape to provide a background for our shopping cart counter\n\n``` xml\n    ../app/src/main/java/res/drawable/item_counter.xml\n    \n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cselector xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003e\n        \u003citem\u003e\n            \u003cshape android:shape=\"oval\"\u003e\n                \u003csolid android:color=\"@color/colorPrimary\"/\u003e\n                \u003ccorners android:radius=\"50dp\"/\u003e\n                \u003csize android:height=\"25dp\"/\u003e\n                \u003csize android:width=\"25dp\"/\u003e\n            \u003c/shape\u003e\n        \u003c/item\u003e\n    \u003c/selector\u003e\n```\n\nAdd the following after the `SwipeRefreshLayout` in the file.\n\n``` xml\n    ../src/main/java/res/layout/activity_main.xml\n     ...\n    \u003c/android.support.v4.widget.SwipeRefreshLayout\u003e\n    \n    \u003cRelativeLayout\n            android:id=\"@+id/showCart\"\n            android:layout_margin=\"16dp\"\n            android:layout_gravity=\"bottom|end\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\u003e\n    \n        \u003candroid.support.design.widget.FloatingActionButton\n                android:id=\"@+id/basketButton\"\n                android:src=\"@drawable/ic_shopping_basket\"\n                android:tint=\"@android:color/white\"\n                app:fabSize=\"normal\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"/\u003e\n    \n        \u003cTextView\n                android:padding=\"8dp\"\n                android:layout_marginBottom=\"25dp\"\n                android:elevation=\"50dp\"\n                android:layout_marginStart=\"5dp\"\n                android:textColor=\"@android:color/white\"\n                android:textStyle=\"bold\"\n                android:layout_alignRight=\"@id/basketButton\"\n                android:id=\"@+id/cart_size\"\n                android:textSize=\"13sp\"\n                android:background=\"@drawable/item_counter\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_alignEnd=\"@id/basketButton\"\n                tools:targetApi=\"lollipop\"\n                android:layout_marginLeft=\"15dp\"/\u003e\n    \n    \u003c/RelativeLayout\u003e\n```\n\nNow, we can refer to our counter with the help of its ID, and provide it with the shopping cart size.\nJust add this line to your file in the `onCreate` method, before the `getProducts` method.\n\n``` kotlin\n    ../app/src/main/java/yourPackage/MainActivity.kt\n    \n    cart_size.text = ShoppingCart.getShoppingCartSize().toString()\n```\n\n## Test your app\n\nNow if you run your app and test it, first you should have get the shopping cart shown in the counter. And if you try to add or remove items I guess you get the visual feedback, I mean the snackbar we provided the user with to keep him updated with what it’s going on, but strangely you’re not seeing the counter updated with the actual cart size.  You may think that something is going wrong but this is quite normal. Our app is not reactive yet, and we have not even provided it with a means to behave in such an expected way. Well, in the following part we’ll see a more advanced topic, *RxKotlin Reactive programming in Kotlin*  which hopefully will help us add some reactivity to our shopping cart app. \n\n\n## Conclusion\n\nUntil now, you’ve learned how to show a list of products to users, built your shopping cart logic enabling your users to add and remove items from your cart. \n\nIn the last, [part third](https://pusher.com/tutorials/shopping-cart-kotlin-part-3) of this tutorial series we’ll make our mobile app more reactive using a powerful tool: *RxKotlin*. We’ll also add a shopping cart review functionality to our app to make it more complete 😉.\n\nNevertheless, you can grab the code for the second part [here](https://github.com/Ethiel97/kotlin-shoppingCart/tree/part-two).","metaTitle":"Build a shopping cart with Kotlin - Part 2","metaDescription":"This three-part series will walk you through building a shopping cart for an Android app using Kotlin. In part two, implement the shopping cart logic."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"36XjHWLMBT51XwkHwXSr8D","type":"Entry","createdAt":"2019-03-08T03:02:19.829Z","updatedAt":"2019-03-08T03:02:19.829Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a shopping cart with Kotlin - Part 1: Listing products","url":"shopping-cart-kotlin-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Ok7hdNlHGsaAME2MCGEeq","type":"Entry","createdAt":"2018-09-17T17:53:10.446Z","updatedAt":"2018-09-17T17:53:10.446Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ethiel Adiassa","url":"ethiel-adiassa","email":"ethiel97@gmail.com","twitter":"https://twitter.com/ethiel97","github":"https://github.com/ethiel97","guestWriter":true}}],"projectRepo":"https://github.com/Ethiel97/kotlin-shoppingCart/tree/part-one","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}}],"reviewDate":"2019-03-07","description":"This three-part series will walk you through building a shopping cart for an Android app using Kotlin. In part one, set up your project, prepare your API calls and create a list of products.","prerequisite":"You will need an Android development environment set up on your machine. Some knowledge of Android development is required.","content":"## Introduction\n\nIn this tutorial I’ll show you how to build a shopping cart using Kotlin. A shopping cart is a must-have in any e-commerce application. This course will guide you through building a full shopping cart with Kotlin. \n\nOur end result will be an Android app built with the Kotlin language (rather than Java for the sake of productivity) listing some products to the user and allowing them to add some to their shopping cart. They should also be able to review their shopping cart.\n\nIn this first part of this tutorial series we’ll be building our app that shows a list of products to the users.\n\n## Demo \n\nHere is the final result of the first part of the tutorial series 😎 \n\n![kotlin-shopping-part-1-1](//images.ctfassets.net/1es3ne0caaid/1bKfXQhiwhNhZHUQ44FpiD/10d1dddfa0f62c9cf65aedae6c8c95e0/kotlin-shopping-part-1-1.gif)\n\n## Prerequisites\n\nIn order to follow along, you will need some experience with the Kotlin programming language.\nYou will also need appropriate IDEs. I suggest [IntelliJ IDEA](https://www.jetbrains.com/idea/) or [Android Studio](https://developer.android.com/studio/index.html).\nIt is also assumed that you know how to use the IDEs that you are working with, including interacting with either an emulated or physical mobile device for running  your apps.\n\n\n## Configuring your project\n\nOpen Android Studio, create a new project. Insert the name of your app and company domain name then select the **Include Kotlin support** checkbox to enable Kotlin in the project.\n\n![kotlin-shopping-part-1-2](//images.ctfassets.net/1es3ne0caaid/4RGAlHRO9jAPuPagStPhI6/f379f6599c4b05bdfddbf2f2d979a15c/kotlin-shopping-part-1-2.png)\n\nFor this article, we will set the minimum supported Android version at 4.03 (API 15). Next, choose an empty activity template and click on **Finish**.\n\n![kotlin-shopping-part-1-3](//images.ctfassets.net/1es3ne0caaid/3JDLs392PwEeSN4H6ZjZIw/b650939c67d69f80c2d60f4badc3bb1d/kotlin-shopping-part-1-3.png)\n\nThen head over to your `../app/build.gradle` file and paste this inside the `dependencies` block, as we’ll be using these dependencies in this tutorial\n\n``` gradle\n    //..app/build.gradle\n    implementation 'com.google.code.gson:gson:2.8.2'\n    implementation 'com.squareup.picasso:picasso:2.71828'\n    implementation 'com.squareup.retrofit2:retrofit:2.4.0'\n    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'\n    implementation 'com.squareup.retrofit2:converter-scalars:2.3.0'\n    implementation 'com.android.support:design:28.0.0'\n    implementation 'com.android.support:cardview-v7:28.0.0'\n    implementation 'com.android.support:recyclerview-v7:28.0.0'\n```    \n\n\n- Retrofit: We will need the [Retrofit](https://github.com/square/retrofit) library (a “type-safe HTTP client”) to enable us send messages to our remote server which we will build later on.\n- Picasso: Picasso is \"A powerful image downloading and caching library for Android”\n\n\nAlso, amend your `styles.xml` like the following. This should enable us to use a toolbar inside our application.\n\n``` xml\n    //..app/src/main/res/values/styles.xml\n    \n    \u003cresources\u003e\n    \n        \u003c!-- Base application theme. --\u003e\n        \u003cstyle name=\"AppTheme\" parent=\"Theme.AppCompat.NoActionBar\"\u003e\n            \u003c!-- Customize your theme here. --\u003e\n            \u003citem name=\"colorPrimary\"\u003e@color/colorPrimary\u003c/item\u003e\n            \u003citem name=\"colorPrimaryDark\"\u003e@color/colorPrimaryDark\u003c/item\u003e\n            \u003citem name=\"colorAccent\"\u003e@color/colorAccent\u003c/item\u003e\n        \u003c/style\u003e\n    \n    \u003c/resources\u003e\n```\n\n## Build your product model, adapter and layout\n\nOur product should have a unique identifier, a price, a name, a description and a set of images if possible. Now that we know the structure of our product item, let’s define its model. We’ll build our product entity using a Kotlin data class. \n\nCreate a `Product.kt`  file, then copy and paste the following piece of code inside:\n\n``` kotlin\n    //..app/src/main/java/yourPackage/Product.kt\n    import com.google.gson.annotations.SerializedName\n    \n    data class Product(\n        @SerializedName(\"description\")\n        var description: String? = null,\n    \n        @SerializedName(\"id\")\n        var id: Int? = null,\n    \n        @SerializedName(\"name\")\n        var name: String? = null,\n    \n        @SerializedName(\"price\")\n        var price: String? = null,\n    \n        @SerializedName(\"photos\")\n        var photos: List\u003cPhoto\u003e = arrayListOf()\n    )\n```\n\nAs our product has a set of photos, we’ll also define its entity. Create a `Photo.kt` file, then paste the following code inside as well:\n\n``` kotlin\n    //..app/src/main/java/yourPackage/Photo.kt\n    import com.google.gson.annotations.SerializedName\n    \n    data class Photo(\n        @SerializedName(\"filename\")\n        var filename: String? = null\n    )\n```\n\nNext, we’ll build our product adapter responsible to handle the display of our products list.\n\nCreate a `ProductAdapter.kt` file and paste the following inside:\n\n``` kotlin\n    //..app/src/main/java/yourPackage/ProductAdapter.kt\n    \n    import android.annotation.SuppressLint\n    import android.content.Context\n    import android.support.design.widget.Snackbar\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.Toast\n    import com.squareup.picasso.Picasso\n    import kotlinx.android.synthetic.main.activity_main.*\n    import kotlinx.android.synthetic.main.product_row_item.view.*\n    \n    class ProductAdapter(var context: Context, var products: List\u003cProduct\u003e = arrayListOf()) :\n        RecyclerView.Adapter\u003cProductAdapter.ViewHolder\u003e() {\n        override fun onCreateViewHolder(p0: ViewGroup, p1: Int): ProductAdapter.ViewHolder {\n            // The layout design used for each list item\n            val view = LayoutInflater.from(context).inflate(R.layout.product_row_item, null)\n            return ViewHolder(view)\n    \n        }\n            // This returns the size of the list.\n        override fun getItemCount(): Int = products.size\n    \n        override fun onBindViewHolder(viewHolder: ProductAdapter.ViewHolder, position: Int) {\n         //we simply call the `bindProduct` function here\n            viewHolder.bindProduct(products[position])\n        }\n    \n        class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {\n    \n            // This displays the product information for each item\n            fun bindProduct(product: Product) {\n    \n                itemView.product_name.text = product.name\n                itemView.product_price.text = \"$${product.price.toString()}\"\n                Picasso.get().load(product.photos[0].filename).fit().into(itemView.product_image)\n            }\n    \n        }\n    \n    }\n```\n\nNext, let’s create our product item layout. This layout file contains:\n\n- an `ImageView` to display the product image\n- two `TextView` one to display the product name and the other for the product price.\n\nAll these widgets are wrapped inside a `CardView` to add a shadow and a radius to the layout 🙂.\n\nCreate a `product_row_item` file and paste the following inside. This layout is responsible for handling the view of a single item of our list.\n\n``` xml\n    //../app/src/main/java/res/layout/product_row_item.xml\n    \n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.v7.widget.CardView\n            xmlns:card_view=\"http://schemas.android.com/tools\"\n            xmlns:android=\"http://schemas.android.com/apk/res/android\"\n            xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n            app:cardUseCompatPadding=\"true\"\n            android:layout_margin=\"4dp\"\n            app:cardBackgroundColor=\"@android:color/white\"\n            app:cardCornerRadius=\"4dp\"\n            android:background=\"?attr/selectableItemBackground\"\n            app:cardElevation=\"3dp\"\n            android:foreground=\"?attr/selectableItemBackground\"\n            card_view:cardElevation=\"4dp\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\u003e\n    \n        \u003cLinearLayout\n                android:orientation=\"vertical\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\"\u003e\n    \n            \u003cImageView\n                    android:id=\"@+id/product_image\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"140dp\"/\u003e\n    \n            \u003cLinearLayout\n                    android:padding=\"10dp\"\n                    android:orientation=\"vertical\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"wrap_content\"\u003e\n    \n    \n                \u003cTextView\n                        android:textColor=\"@android:color/black\"\n                        android:textSize=\"22sp\"\n                        android:layout_marginBottom=\"12dp\"\n                        android:id=\"@+id/product_name\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"/\u003e\n    \n    \n                \u003cTextView\n                        android:textSize=\"19sp\"\n                        android:textColor=\"@android:color/black\"\n                        android:id=\"@+id/product_price\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"/\u003e\n            \u003c/LinearLayout\u003e\n    \n            \u003cImageButton\n                    android:id=\"@+id/addToCart\"\n                    android:paddingHorizontal=\"16dp\"\n                    android:tint=\"@android:color/white\"\n                    android:paddingVertical=\"4dp\"\n                    android:src=\"@drawable/ic_add_shopping\"\n                    android:layout_gravity=\"end\"\n                    android:background=\"@color/colorAccent\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    card_view:targetApi=\"o\"/\u003e\n    \n        \u003c/LinearLayout\u003e\n    \n    \u003c/android.support.v7.widget.CardView\u003e\n```\n\nThese are the links to get the drawable icons we used in our layout : [ic_add_shopping](https://github.com/Ethiel97/kotlin-shoppingCart/tree/master/app/src/main/res/drawable/ic_add_shopping.xml) and [ic_shopping_basket](https://github.com/Ethiel97/kotlin-shoppingCart/blob/master/app/src/main/res/drawable/ic_shopping_basket.xml). They are to paste in `../app/src/main/res/drawable` folder.\n\n## Preparing API calls\n\nWe’ll make calls to an external API to get our products data. \n\nCreate an `APIConfig.kt` file. This class gives us an instance of Retrofit for our network calls:\n\n``` kotlin\n    //..app/src/main/java/yourPackage/APIConfig.kt\n    import android.content.Context\n    import okhttp3.OkHttpClient\n    import retrofit2.Retrofit\n    import retrofit2.converter.gson.GsonConverterFactory\n    import com.google.gson.GsonBuilder\n    import retrofit2.converter.scalars.ScalarsConverterFactory\n    \n    object APIConfig {\n    \n        val BASE_URL = \"https://all-spices.com/api/products/\"\n    \n        private var retrofit: Retrofit? = null\n    \n        var gson = GsonBuilder()\n            .setLenient()\n            .create()\n    \n        fun getRetrofitClient(context: Context): Retrofit {\n    \n            val okHttpClient = OkHttpClient.Builder()\n                .build()\n    \n            if (retrofit == null) {\n                retrofit = Retrofit.Builder()\n                    .baseUrl(BASE_URL)\n                    .client(okHttpClient)\n                            .addConverterFactory(ScalarsConverterFactory.create())\n                    .addConverterFactory(GsonConverterFactory.create(gson))\n                    .build()\n            }\n            return retrofit!!\n        }\n    }\n```    \n\nNext, create an API Interface file in the `src/main/java/yourPackage` folder called `ApiService.kt`. This interface is used to define endpoints to be used during network calls. For this application, we will create just one endpoint:\n\n``` kotlin\n    import retrofit2.Call\n    import retrofit2.http.*\n    \n    interface APIService {\n        @Headers(\"Content-Type: application/json\", \"Accept: application/json\")\n        @GET(\"bestRated\")\n        fun getProducts(\n        ): Call\u003cList\u003cProduct\u003e\u003e\n    \n    }\n```\n\n\n## Listing products\n\nFor listing products, we’ll need a recycler view (a recycler view is a widget for listing a list of items, as it happens our products list). Now, move on to your `src/main/java/res/layout/activity_main.xml` file, amend it like the following: \n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.design.widget.CoordinatorLayout\n            xmlns:android=\"http://schemas.android.com/apk/res/android\"\n            xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n            android:layout_height=\"match_parent\"\n            android:background=\"#fffffa\"\n            android:id=\"@+id/coordinator\"\n            android:layout_width=\"match_parent\"\u003e\n    \n    \n        \u003candroid.support.design.widget.AppBarLayout\n                android:background=\"@android:color/transparent\"\n                android:fitsSystemWindows=\"true\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"?attr/actionBarSize\"\u003e\n    \n            \u003candroid.support.v7.widget.Toolbar\n                    android:id=\"@+id/toolbar\"\n                    app:titleTextColor=\"@color/colorAccent\"\n                    app:title=\"Shopping List\"\n                    android:background=\"@android:color/white\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"?attr/actionBarSize\"\u003e\n    \n            \u003c/android.support.v7.widget.Toolbar\u003e\n    \n        \u003c/android.support.design.widget.AppBarLayout\u003e\n    \n    \n        \u003candroid.support.v4.widget.SwipeRefreshLayout\n                android:id=\"@+id/swipeRefreshLayout\"\n                app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\u003e\n    \n            \u003candroid.support.v7.widget.RecyclerView\n                    android:id=\"@+id/products_recyclerview\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"match_parent\"/\u003e\n    \n        \u003c/android.support.v4.widget.SwipeRefreshLayout\u003e\n    \n    \n        \u003candroid.support.design.widget.FloatingActionButton\n                android:id=\"@+id/showBasket\"\n                android:src=\"@drawable/ic_shopping_basket\"\n                android:tint=\"@android:color/white\"\n                android:layout_margin=\"16dp\"\n                android:layout_gravity=\"bottom|end\"\n                app:fabSize=\"normal\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"/\u003e\n    \n    \u003c/android.support.design.widget.CoordinatorLayout\u003e\n```\n\nThe above layout contains a recycler view which itself is wrapped in a `SwipeRefreshLayout` widget. We also add a button for adding items to our shopping cart, but this will be handled in the second part of the tutorial.\n\n\nNext, move on to your  `src/main/MainActvity.kt`  file, and amend like the following:\n\n``` kotlin\n    //..app/src/main/java/yourPackage/MainActivity.kt\n    \n    import android.content.Intent\n    import android.support.v7.app.AppCompatActivity\n    import android.os.Bundle\n    import android.support.v4.content.ContextCompat\n    import android.support.v7.widget.StaggeredGridLayoutManager\n    import android.util.Log\n    import android.widget.Toast\n    import kotlinx.android.synthetic.main.activity_main.*\n    import retrofit2.Call\n    import retrofit2.Response\n    \n    class MainActivity : AppCompatActivity() {\n    \n        private lateinit var apiService: APIService\n        private lateinit var productAdapter: ProductAdapter\n    \n        private var products = listOf\u003cProduct\u003e()\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n    \n            setContentView(R.layout.activity_main)\n    \n            setSupportActionBar(toolbar)\n            apiService = APIConfig.getRetrofitClient(this).create(APIService::class.java)\n    \n            swipeRefreshLayout.setColorSchemeColors(ContextCompat.getColor(this, R.color.colorPrimary))\n    \n            swipeRefreshLayout.isRefreshing = true\n    \n            // assign a layout manager to the recycler view\n            products_recyclerview.layoutManager = StaggeredGridLayoutManager(2, StaggeredGridLayoutManager.VERTICAL)\n    \n            getProducts()\n    \n        }\n    \n    \n        fun getProducts() {\n            apiService.getProducts().enqueue(object : retrofit2.Callback\u003cList\u003cProduct\u003e\u003e {\n                override fun onFailure(call: Call\u003cList\u003cProduct\u003e\u003e, t: Throwable) {\n    \n                    print(t.message)\n                    Log.d(\"Data error\", t.message)\n                    Toast.makeText(this@MainActivity, t.message, Toast.LENGTH_SHORT).show()\n    \n                }\n    \n                override fun onResponse(call: Call\u003cList\u003cProduct\u003e\u003e, response: Response\u003cList\u003cProduct\u003e\u003e) {\n    \n                    swipeRefreshLayout.isRefreshing = false\n                    products = response.body()!!\n    \n                    productAdapter = ProductAdapter(this@MainActivity, products)\n    \n                    products_recyclerview.adapter = productAdapter\n                    productAdapter.notifyDataSetChanged()\n    \n                }\n    \n            })\n        }\n    \n    }\n```    \n\nWe declared an `APIService` instance, a `ProductAdapter` instance we’ll initialize later.\nNext, we initialized the list to hold the products: `private var products = listOf\u003cProduct\u003e()`.\nThen, in the `onCreate` method, we initialized our `APIService` instance, configured our swipe refresh layout and made it refreshing, and assigned a proper layout to our recycler view. \n\nIn the `getProducts` methods, we made an API call to fetch our products, if everything gets well we first disable the swipe refresh layout, then assign the result to our products list, initialised our product adapter, assigned the adapter to the recycler view, and tell the adapter data its state has changed. Otherwise, we just logged the error for debugging purpose.\n\nNext up is to add the Internet permission in your `AndroidManifest.xml` file. Update the file with the code snippet below:\n\n``` xml\n    //app/src/main    \n        \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n```\n\nWe are done with the first part of this article. Now you can run your app to see if everything is correct.\n\n\n## Conclusion\n\nIn this first tutorial of this series, we have demonstrated how to get data/products from an external API, and render it with the help of a recycler view. In the next part, we’ll see how to add products to cart. This is the [code](https://github.com/Ethiel97/kotlin-shoppingCart/tree/part-one) for the first of the tutorial series.","metaTitle":"Build a shopping cart with Kotlin - Part 1","metaDescription":"This three-part series will walk you through building a shopping cart for an Android app using Kotlin. In part one, set up your project, prepare your API calls and create a list of products."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"gb9qjcLfTlNAcEADIy2xl","type":"Entry","createdAt":"2019-03-06T22:09:22.043Z","updatedAt":"2019-03-06T22:09:22.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an onboarding experience for your mobile apps with Flutter - Part 2: Build the carousel","url":"onboarding-flutter-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Ok7hdNlHGsaAME2MCGEeq","type":"Entry","createdAt":"2018-09-17T17:53:10.446Z","updatedAt":"2018-09-17T17:53:10.446Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ethiel Adiassa","url":"ethiel-adiassa","email":"ethiel97@gmail.com","twitter":"https://twitter.com/ethiel97","github":"https://github.com/ethiel97","guestWriter":true}}],"projectRepo":"https://github.com/Ethiel97/flutter_slides/tree/part-two-building-the-dots","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Q3oRmiXjOmcSmweY4gKY8","type":"Entry","createdAt":"2018-09-12T09:33:28.375Z","updatedAt":"2018-09-12T09:33:28.375Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flutter","url":"flutter","type":"framework","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}}],"reviewDate":"2019-03-06","description":"This two part series guides you through building an onboarding experience for users new to your app. You will create a basic Flutter app, along with the onboarding screens. In part two, turn the onboarding screens into a fully-functional carousel.","prerequisite":"You will need Dart and Flutter set up on your machine.","content":"## Introduction\n\nHi folks! I guess you have been looking for this second part right ? 😏  Well, here we are. This is the second part of the tutorial series. If you are here it means you have completed the first part and already have a beautiful working app. We’re going to give more control to our app users by providing slides’ carousel indicators, and allowing our users to switch to a particular screen by clicking on the corresponding carousel indicator.\n\n## Prerequisites\n\nTo follow along with the tutorial, you should have the following: \n\n- [Visual Studio Code](https://code.visualstudio.com/Download) editor installed on your machine if you haven’t yet. We’ll use it in our tutorial.\n- [Visual Studio Code Flutter plugin](https://flutter.io/docs/get-started/editor?tab=vscode)\n- An emulator or physical device (for app testing/debugging purpose)\n- Having completed the [first part](https://pusher.com/tutorials/onboarding-flutter-part-1) of the tutorial series\n\n\n## Building the carousel indicators\n\nNow this is the code for the dots section. Copy and paste it after the `MyHomePageState` class.\n\n``` dart\n    //..lib/main.dart\n    \n    class Dots extends StatelessWidget {\n      final IndexController controller;\n      final int slideIndex;\n      final int numberOfDots;\n      \n      Dots({this.controller, this.slideIndex, this.numberOfDots});\n      \n      Widget _activeSlide(int index) {\n        return GestureDetector(\n          onTap: () {\n            print('Tapped');\n            // controller.move(index);\n          },\n          child: new Container(\n            child: Padding(\n              padding: EdgeInsets.only(left: 8.0, right: 8.0),\n              child: Container(\n                width: 20.0,\n                height: 20.0,\n                decoration: BoxDecoration(\n                  color: Colors.orangeAccent.withOpacity(.3),\n                  borderRadius: BorderRadius.circular(50.0),\n                ),\n              ),\n            ),\n          ),\n        );\n      }\n      \n      Widget _inactiveSlide(int index) {\n        return GestureDetector(\n          onTap: () {\n            controller.move(index);\n          },\n          child: new Container(\n            child: Padding(\n              padding: EdgeInsets.only(left: 5.0, right: 5.0),\n              child: Container(\n                width: 14.0,\n                height: 14.0,\n                decoration: BoxDecoration(\n                    color: Colors.grey.withOpacity(0.7),\n                    borderRadius: BorderRadius.circular(50.0)),\n              ),\n            ),\n          ),\n        );\n      }\n      \n      List\u003cWidget\u003e _generateDots() {\n        List\u003cWidget\u003e dots = [];\n        for (int i = 0; i \u003c numberOfDots; i++) {\n          dots.add(i == slideIndex ? _activeSlide(i) : _inactiveSlide(i));\n        }\n        return dots;\n      }\n      \n      @override\n      Widget build(BuildContext context) {\n        return Center(\n            child: Row(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: _generateDots(),\n        ));\n      }\n    }\n```    \n    \n\nThe `Dots` class constructor takes an instance of the index controller, the current slide index and the number of carousel indicators to build. We’ll use these variables to control the look and behavior of the carousel indicators.\n\nNext, we have to build indicators for active and inactive slides. So based on the status of the slide the proper icon will be rendered. Therefore we have `_activeSlide` and `_inactiveSlide` widgets. \n\nBasically there are composed of a container widget, which has a border radius as its decoration and a color. Both of these widgets have almost same properties. The sole difference is the opacity of the color.  Also we wrapped them inside a `GestureDetector` widget which should enable us to listen to various types of gestures triggered on it (tap, doubleTap, longPress,tapUp, etc). Each of these gestures have a corresponding listener to react accordingly:\n\n\n``` dart\n    onTap: () {\n            controller.move(index);\n      },\n```          \n\nThe code above tells the slide controller to move the slides to the page corresponding to the indicator tapped/clicked. Thus, we can control our slides by simply clicking on the dots we provided.\n\nAfter this step, we need to generate the indicators. The `_generateDots` function returns a list of indicators based on the `numberOfDots` provided in the constructor inside the loop. If the current iteration number is equal to the current slide index, we add an `_activeWidget` to the list, if not we add an `_inactiveWidget`.\n\nFinally, inside the `build` method we render and return our indicators inside a centered row so they can be aligned horizontally: \n\n``` dart\n    return Center(\n            child: Row(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: _generateDots(),\n        ));\n```\n\nNow, we need to add the indicators to our slides. Just paste the following piece of code into the `transformerPageView` after the last `SizedBox` widget.\n     \n\n``` dart\n    new ParallaxContainer(\n                          position: info.position,\n                          translationFactor: 500.0,\n                          child: Dots(\n                            controller: controller,\n                            slideIndex: _slideIndex,\n                            numberOfDots: images.length,\n                          ),\n                        )\n                        \n```\n\nWith all the parts completed, you should have the following :\n\n\n``` dart    \n    import 'package:flutter/material.dart';\n    import 'package:transformer_page_view/transformer_page_view.dart';\n    \n    void main() =\u003e runApp(MyApp());\n    class MyApp extends StatelessWidget {\n      // This widget is the root of your application.\n      @override\n      Widget build(BuildContext context) {\n        return MaterialApp(\n          debugShowCheckedModeBanner: false,\n          title: 'Flutter Demo',\n          theme: ThemeData(\n            // This is the theme of your application.\n            //\n            // Try running your application with \"flutter run\". You'll see the\n            // application has a blue toolbar. Then, without quitting the app, try\n            // changing the primarySwatch below to Colors.green and then invoke\n            // \"hot reload\" (press \"r\" in the console where you ran \"flutter run\",\n            // or simply save your changes to \"hot reload\" in a Flutter IDE).\n            // Notice that the counter didn't reset back to zero; the application\n            // is not restarted.\n            primarySwatch: Colors.blue,\n          ),\n          home: MyHomePage(title: 'Flutter Demo Home Page'),\n        );\n      }\n    }\n    class MyHomePage extends StatefulWidget {\n      final String title;\n      MyHomePage({this.title});\n      @override\n      MyHomePageState createState() {\n        return new MyHomePageState();\n      }\n    }\n    \n    class MyHomePageState extends State\u003cMyHomePage\u003e {\n      int _slideIndex = 0;\n      final GlobalKey\u003cScaffoldState\u003e _key = new GlobalKey\u003cScaffoldState\u003e();\n      final List\u003cString\u003e images = [\n        \"assets/slide_1.png\",\n        \"assets/slide_2.png\",\n        \"assets/slide_3.png\",\n        \"assets/slide_4.png\"\n      ];\n      \n      List\u003cColor\u003e colors = [Colors.orange];\n      final List\u003cString\u003e text0 = [\n        \"Welcome in your app\",\n        \"Enjoy teaching...\",\n        \"Showcase your skills\",\n        \"Friendship is great\"\n      ];\n      \n      final List\u003cString\u003e text1 = [\n        \"App for food lovers, satisfy your taste\",\n        \"Find best meals in your area, simply\",\n        \"Have fun while eating your relatives and more\",\n        \"Meet new friends from all over the world\"\n      ];\n      \n      final IndexController controller = IndexController();\n      @override\n      Widget build(BuildContext context) {\n        TransformerPageView transformerPageView = TransformerPageView(\n            pageSnapping: true,\n            onPageChanged: (index) {\n              setState(() {\n                this._slideIndex = index;\n              });\n            },\n            loop: false,\n            controller: controller,\n            transformer: new PageTransformerBuilder(\n                builder: (Widget child, TransformInfo info) {\n              return new Material(\n                color: Colors.white,\n                elevation: 8.0,\n                textStyle: new TextStyle(color: Colors.white),\n                borderRadius: new BorderRadius.circular(12.0),\n                child: new Container(\n                  alignment: Alignment.center,\n                  color: Colors.white,\n                  child: Padding(\n                    padding: const EdgeInsets.all(18.0),\n                    child: Column(\n                      mainAxisAlignment: MainAxisAlignment.center,\n                      crossAxisAlignment: CrossAxisAlignment.center,\n                      children: \u003cWidget\u003e[\n                        new ParallaxContainer(\n                          child: new Text(\n                            text0[info.index],\n                            style: new TextStyle(\n                                color: Colors.blueGrey,\n                                fontSize: 34.0,\n                                fontFamily: 'Quicksand',\n                                fontWeight: FontWeight.bold),\n                          ),\n                          position: info.position,\n                          opacityFactor: .8,\n                          translationFactor: 400.0,\n                        ),\n                        SizedBox(\n                          height: 45.0,\n                        ),\n                        new ParallaxContainer(\n                          child: new Image.asset(\n                            images[info.index],\n                            fit: BoxFit.contain,\n                            height: 350,\n                          ),\n                          position: info.position,\n                          translationFactor: 400.0,\n                        ),\n                        SizedBox(\n                          height: 45.0,\n                        ),\n                        new ParallaxContainer(\n                          child: new Text(\n                            text1[info.index],\n                            textAlign: TextAlign.center,\n                            style: new TextStyle(\n                                color: Colors.blueGrey,\n                                fontSize: 28.0,\n                                fontFamily: 'Quicksand',\n                                fontWeight: FontWeight.bold),\n                          ),\n                          position: info.position,\n                          translationFactor: 300.0,\n                        ),\n                        SizedBox(\n                          height: 55.0,\n                        ),\n                        new ParallaxContainer(\n                          position: info.position,\n                          translationFactor: 500.0,\n                          child: Dots(\n                            controller: controller,\n                            slideIndex: _slideIndex,\n                            numberOfDots: images.length,\n                          ),\n                        )\n                      ],\n                    ),\n                  ),\n                ),\n              );\n            }),\n            itemCount: 4);\n            \n        return Scaffold(\n          backgroundColor: Colors.white,\n          body: transformerPageView,\n        );\n      }\n    }\n    class Dots extends StatelessWidget {\n    \n      final IndexController controller;\n      final int slideIndex;\n      final int numberOfDots;\n      Dots({this.controller, this.slideIndex, this.numberOfDots});\n      \n      List\u003cWidget\u003e _generateDots() {\n        List\u003cWidget\u003e dots = [];\n        for (int i = 0; i \u003c numberOfDots; i++) {\n          dots.add(i == slideIndex ? _activeSlide(i) : _inactiveSlide(i));\n        }\n        return dots;\n      }\n      \n      Widget _activeSlide(int index) {\n        return GestureDetector(\n          onTap: () {\n            print('Tapped');\n          },\n          child: new Container(\n            child: Padding(\n              padding: EdgeInsets.only(left: 8.0, right: 8.0),\n              child: Container(\n                width: 20.0,\n                height: 20.0,\n                decoration: BoxDecoration(\n                  color: Colors.orangeAccent.withOpacity(.3),\n                  borderRadius: BorderRadius.circular(50.0),\n                ),\n              ),\n            ),\n          ),\n        );\n      }\n      \n      Widget _inactiveSlide(int index) {\n        return GestureDetector(\n          onTap: () {\n            controller.move(index);\n          },\n          child: new Container(\n            child: Padding(\n              padding: EdgeInsets.only(left: 5.0, right: 5.0),\n              child: Container(\n                width: 14.0,\n                height: 14.0,\n                decoration: BoxDecoration(\n                    color: Colors.grey.withOpacity(0.7),\n                    borderRadius: BorderRadius.circular(50.0)),\n              ),\n            ),\n          ),\n        );\n      }\n      \n      @override\n      Widget build(BuildContext context) {\n        return Center(\n            child: Row(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: _generateDots(),\n        ));\n      }\n    }\n```    \n\nThe code is pretty concise for the nice work we’ve achieved. Flutter helps us build this awesome app with no hassle and with a minimum effort 😄 .\n\nWe are done with this tutorial. Run your app with this command in your terminal: `flutter run` and see the magic happen 🙃 \n\n![flutter-onboarding-part-2-1](//images.ctfassets.net/1es3ne0caaid/3YsLrXgi5l3Jn1LpBbqw8d/b597a55f7d8f8efe527d9b9a39f29bf7/flutter-onboarding-part-2-1.gif)\n\n\n## Conclusion\n\nThis is the end of the tutorial series. I do hope it has been useful to you, and you can apply the knowledge acquired to build beautiful apps 😌 . The source code for this part is available [here](https://github.com/Ethiel97/flutter_slides/tree/part-two-building-the-dots); feel free to fork it and modify it as per your needs.","metaTitle":"Create onboarding for mobile apps with Flutter - Part 2","metaDescription":"This two part series guides you through building an onboarding experience for users new to your app. You will create a basic Flutter app, along with the onboarding screens. In part two, turn the onboarding screens into a fully-functional carousel."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"bcz1Wx9ASL0czZg6IY0uD","type":"Entry","createdAt":"2019-03-05T19:08:24.550Z","updatedAt":"2019-03-05T19:08:24.550Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an onboarding experience for your mobile apps with Flutter - Part 1: Building the screens","url":"onboarding-flutter-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Ok7hdNlHGsaAME2MCGEeq","type":"Entry","createdAt":"2018-09-17T17:53:10.446Z","updatedAt":"2018-09-17T17:53:10.446Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ethiel Adiassa","url":"ethiel-adiassa","email":"ethiel97@gmail.com","twitter":"https://twitter.com/ethiel97","github":"https://github.com/ethiel97","guestWriter":true}}],"projectRepo":"https://github.com/Ethiel97/flutter_slides/tree/part-one-building-the-screens","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Q3oRmiXjOmcSmweY4gKY8","type":"Entry","createdAt":"2018-09-12T09:33:28.375Z","updatedAt":"2018-09-12T09:33:28.375Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flutter","url":"flutter","type":"framework","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}}],"reviewDate":"2019-03-05","description":"This two part series guides you through building an onboarding experience for users new to your app. You will create a basic Flutter app, along with the onboarding screens. In part one, create four onboarding screens.","prerequisite":"You will need Dart and Flutter set up on your machine.","content":"## Introduction\n\nIn this tutorial series, we’ll be building a nice app intro with Flutter exploiting the onboarding technique. Onboarding is a great way to introduce your app to newcomers, to help them quickly adapt to the new conditions so that they can get the most out of your app. In UX design, onboarding is a set of techniques and interactions aimed at comforting users and giving the initial introduction of the product. The [Material Design guide](https://material.io/design/communication/onboarding.html) states:\n\n\n\u003e Onboarding is one point in a longer journey that begins in the app store and ends with the user taking the first key retention-correlated action in your app.\n\nWe can consider onboarding to be a useful UX technique to present your product to potential users, it is defined as a way of making someone familiar with an app. Your apps may not be self-explanatory so they surely need to include onboarding.\nNow that you know what onboarding is, we’ll dive into this tutorial. I’ll show you how to build a nice onboarding experience for your mobile app using the [Flutter framework](https://flutter.io).\n\n\n## Demo\n\nThis is the final result of the tutorial. Nice isn’t it ? 😎  You will be able to achieve that at the end of the tutorial.\n\n![flutter-onboarding-part-1-1](//images.ctfassets.net/1es3ne0caaid/TGz0Ynz2bMlBjLeucglQf/6545badd0f3e0c763bbe92ac299d759b/flutter-onboarding-part-1-1.gif)\n\n## Prerequisites\n\nThis tutorial assumes a little knowledge of Flutter or [Dart](http://dartlang.org/). JavaScript knowledge will be helpful as well, especially ES6 features.\nYou should have:\n\n-  [Visual Studio Code](https://code.visualstudio.com/Download) editor installed on your machine if you haven’t yet. We’ll use it in our tutorial. \n- [Visual Studio Code Flutter plugin](https://flutter.io/docs/get-started/editor?tab=vscode)\n- An emulator or physical device (for app testing/debugging purpose)\n- Flutter and Dart installed on your machine. Kindly refer to this [link](https://flutter.io/docs/get-started/install) for more information about their installation. It will guide you through the installation of Flutter SDK on your machine as well as the Dart language\n\n\n## Project setup\n\nOpen your code editor and hit  `ctrl+shift+p` or `cmd+shift+p` to create a new project, and give it a name, or simply run `flutter create your_project_name` in your terminal to quickly create a new project. After that, you’ll end up with a fresh Flutter project.\n\nHead over to the `pubspec.yaml` file and amend it like the following:\n\n``` yaml\n    //../pubspec.yaml\n    name: flutter_slides\n    description: A new Flutter project.\n    \n    # The following defines the version and build number for your application.\n    # A version number is three numbers separated by dots, like 1.2.43\n    # followed by an optional build number separated by a +.\n    # Both the version and the builder number may be overridden in flutter\n    # build by specifying --build-name and --build-number, respectively.\n    # Read more about versioning at semver.org.\n    version: 1.0.0+1\n    \n    environment:\n      sdk: \"\u003e=2.0.0-dev.68.0 \u003c3.0.0\"\n    \n    dependencies:\n      flutter:\n        sdk: flutter\n      transformer_page_view:\n    \n      # The following adds the Cupertino Icons font to your application.\n      # Use with the CupertinoIcons class for iOS style icons.\n      cupertino_icons: ^0.1.2\n    \n    dev_dependencies:\n      flutter_test:\n        sdk: flutter\n    \n    \n    # For information on the generic Dart part of this file, see the\n    # following page: https://www.dartlang.org/tools/pub/pubspec\n    \n    # The following section is specific to Flutter.\n    flutter:\n    \n      # The following line ensures that the Material Icons font is\n      # included with your application, so that you can use the icons in\n      # the material Icons class.\n      uses-material-design: true\n    \n      # To add assets to your application, add an assets section, like this:\n      assets:\n       - assets/slide_1.png\n       - assets/slide_2.png\n       - assets/slide_3.png\n       - assets/slide_4.png\n      #  - images/a_dot_ham.jpeg\n    \n      # An image asset can refer to one or more resolution-specific \"variants\", see\n      # https://flutter.io/assets-and-images/#resolution-aware.\n    \n      # For details regarding adding assets from package dependencies, see\n      # https://flutter.io/assets-and-images/#from-packages\n    \n      # To add custom fonts to your application, add a fonts section here,\n      # in this \"flutter\" section. Each entry in this list should have a\n      # \"family\" key with the font family name, and a \"fonts\" key with a\n      # list giving the asset and other descriptors for the font. For\n      # example:\n      fonts:\n        - family: Quicksand\n          fonts:\n            - asset: assets/Quicksand-Bold.ttf\n              weight: 700\n      #       - asset: fonts/Schyler-Italic.ttf\n      #         style: italic\n      #   - family: Trajan Pro\n      #     fonts:\n      #       - asset: fonts/TrajanPro.ttf\n      #       - asset: fonts/TrajanPro_Bold.ttf\n      #         weight: 700\n      #\n      # For details regarding fonts from package dependencies,\n      # see https://flutter.io/custom-fonts/#from-packages\n```    \n    \n\nIn the dependencies section of the file, we’ve added the  `transformer_page_view` dependency, a page transformer plugin for Flutter. This will help us to build our onboarding screens with no hassle.\nCreate an  `assets` directory into the root of your Flutter project. You can find the content of this folder at [this link](https://github.com/Ethiel97/flutter_slides/tree/part-one-building-the-screens/assets).\n\n\n\u003e Don’t forget to run `flutter packages get` in your terminal to install your dependencies.\n\n\n## Building the onboarding experience\n\nAs you may have noticed in the demo, we have four screens, each one has two text views, an image and carousel indicators. These screens present and describe our app to our users in order to make them feel comfortable with it, especially to not make them disoriented.\nWe’ll focus first on building the screens in the first part of the series, as stated in the title\n\n### Building the screens\n\nHere’s the code for the screens. Kindly paste it in your `main.dart` file.\n\n``` dart\n    //..lib/main.dart\n    \n    import 'package:flutter/material.dart';\n    import 'package:transformer_page_view/transformer_page_view.dart';\n    \n    void main() =\u003e runApp(MyApp());\n    class MyApp extends StatelessWidget {\n      // This widget is the root of your application.\n      @override\n      Widget build(BuildContext context) {\n        return MaterialApp(\n          debugShowCheckedModeBanner: false,\n          title: 'Flutter Demo',\n          theme: ThemeData(\n            // This is the theme of your application.\n            //\n            // Try running your application with \"flutter run\". You'll see the\n            // application has a blue toolbar. Then, without quitting the app, try\n            // changing the primarySwatch below to Colors.green and then invoke\n            // \"hot reload\" (press \"r\" in the console where you ran \"flutter run\",\n            // or simply save your changes to \"hot reload\" in a Flutter IDE).\n            // Notice that the counter didn't reset back to zero; the application\n            // is not restarted.\n            primarySwatch: Colors.blue,\n          ),\n          home: MyHomePage(title: 'Flutter Demo Home Page'),\n        );\n      }\n    }\n    \n    class MyHomePage extends StatefulWidget {\n      final String title;\n      MyHomePage({this.title});\n      @override\n      MyHomePageState createState() {\n        return new MyHomePageState();\n      }\n    }\n    \n    class MyHomePageState extends State\u003cMyHomePage\u003e {\n      int _slideIndex = 0;\n    \n      final List\u003cString\u003e images = [\n        \"assets/slide_1.png\",\n        \"assets/slide_2.png\",\n        \"assets/slide_3.png\",\n        \"assets/slide_4.png\"\n      ];\n      \n      final List\u003cString\u003e text0 = [\n        \"Welcome in your app\",\n        \"Enjoy teaching...\",\n        \"Showcase your skills\",\n        \"Friendship is great\"\n      ];\n      \n      final List\u003cString\u003e text1 = [\n        \"App for food lovers, satisfy your taste\",\n        \"Find best meals in your area, simply\",\n        \"Have fun while eating your relatives and more\",\n        \"Meet new friends from all over the world\"\n      ];\n      \n      final IndexController controller = IndexController();\n      \n      @override\n      Widget build(BuildContext context) {\n      \n        TransformerPageView transformerPageView = TransformerPageView(\n            pageSnapping: true,\n            onPageChanged: (index) {\n              setState(() {\n                this._slideIndex = index;\n              });\n            },\n            loop: false,\n            controller: controller,\n            transformer: new PageTransformerBuilder(\n                builder: (Widget child, TransformInfo info) {\n              return new Material(\n                color: Colors.white,\n                elevation: 8.0,\n                textStyle: new TextStyle(color: Colors.white),\n                borderRadius: new BorderRadius.circular(12.0),\n                child: new Container(\n                  alignment: Alignment.center,\n                  color: Colors.white,\n                  child: Padding(\n                    padding: const EdgeInsets.all(18.0),\n                    child: Column(\n                      mainAxisAlignment: MainAxisAlignment.center,\n                      crossAxisAlignment: CrossAxisAlignment.center,\n                      children: \u003cWidget\u003e[\n                        new ParallaxContainer(\n                          child: new Text(\n                            text0[info.index],\n                            style: new TextStyle(\n                                color: Colors.blueGrey,\n                                fontSize: 34.0,\n                                fontFamily: 'Quicksand',\n                                fontWeight: FontWeight.bold),\n                          ),\n                          position: info.position,\n                          opacityFactor: .8,\n                          translationFactor: 400.0,\n                        ),\n                        SizedBox(\n                          height: 45.0,\n                        ),\n                        new ParallaxContainer(\n                          child: new Image.asset(\n                            images[info.index],\n                            fit: BoxFit.contain,\n                            height: 350,\n                          ),\n                          position: info.position,\n                          translationFactor: 400.0,\n                        ),\n                        SizedBox(\n                          height: 45.0,\n                        ),\n                        new ParallaxContainer(\n                          child: new Text(\n                            text1[info.index],\n                            textAlign: TextAlign.center,\n                            style: new TextStyle(\n                                color: Colors.blueGrey,\n                                fontSize: 28.0,\n                                fontFamily: 'Quicksand',\n                                fontWeight: FontWeight.bold),\n                          ),\n                          position: info.position,\n                          translationFactor: 300.0,\n                        ),\n                        SizedBox(\n                          height: 55.0,\n                        ),\n                      ],\n                    ),\n                  ),\n                ),\n              );\n            }),\n            itemCount: 4);\n            \n        return Scaffold(\n          backgroundColor: Colors.white,\n          body: transformerPageView,\n        );\n        \n      }\n    }\n```    \n\nFirst, we import the [material](https://docs.flutter.io/flutter/material/material-library.html) [library](https://docs.flutter.io/flutter/material/material-library.html) so that we can use the `MaterialApp` widget inside our app. We’ve also imported our `transformer_page_view_dependency`.  Now inside our `main` function, we have our `MyApp` widget returning the `MaterialApp` widget defining our app title, our app theme, and our `MyHomePage` widget.  \n\nThe `MyHomePage` widget is a stateful widget as it has to manage its own state through some data. `MyHomePageState` is intended to handle the state of `MyHomePage` as you can see. Then, we defined four variables:\n\n\n- `_slideIndex`: initialized to 0, this variable is used to keep track of the current index of our slide\n\n\n- `images`: an array of images to use in our screens\n\n\n- `text0` and text1: arrays of texts to describe our screens\n\n\n- `controller`: an object of `IndexController` to get some useful info about indexes of screens and to control them.\n\nNext, we declared our  `transformerPageView` object of type `TransformerPageView` to build our well said screens, and to control their behavior.  This object has some useful properties to control our page view behavior. We’ll take a look at some of them:\n\n\n- `onPageChanged`: called with the new index when the user swiped, we overrided the `_slideIndex` with the new current index each time the user swiped\n\n\n- `loop`: whether to loop or not, we set it to false\n\n\n- `controller`: the index controller\n\n\n- `transformer`: the most important property of this widget, it returns a `transformed` widget that based on the widget parameter. The returned widget as it happens is the current screen presented to the user, just a `Material` widget wrapping two texts widget and an image asset. We wrapped each of these widgets inside a `ParallaxContainer` to mimic a parallax effect on screens swiping. \n- `itemCount`: number of total items/screens.\n\nSo here are the four screens you should have if you have followed along 🙃 .\n\n![flutter-onboarding-part-1-2](//images.ctfassets.net/1es3ne0caaid/5vu9I45ytpBzLcVOIIfOit/90dd05215e49bbcd51f02011f5666a10/flutter-onboarding-part-1-2.png)\n\nJust execute this command: `flutter run` in your terminal to run your app running with a smooth transition between screens 😎 .\n\nIn the next part of the tutorial, we’ll add carousel indicators to the slides to make it more user friendly.\n\n\n## Conclusion\n\nIn this first part of this tutorial series, you’ve learnt what onboarding is, then we’ve put this knowledge into practice by building the screens of our app intro. This is just the first steps of a beautiful journey 😉 . Follow me in the second part to see how we can polish the app with the carousel indicators and get more control over the app. Here is the [code](https://github.com/Ethiel97/flutter_slides/tree/part-one-building-the-screens) for the first part of the series.","metaTitle":"Create onboarding for mobile apps with Flutter - Part 1","metaDescription":"This two part series guides you through building an onboarding experience for users new to your app. You will create a basic Flutter app, along with the onboarding screens. In part one, create four onboarding screens."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"24GlVU2UC9vSAOWAgsb0p5","type":"Entry","createdAt":"2019-02-20T20:34:28.936Z","updatedAt":"2019-02-20T20:34:28.936Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a two-player Pong game with React Native","url":"react-native-pong-game","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNPong","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6nDfV1cd5C6464wgCoOQii","type":"Entry","createdAt":"2018-02-12T15:08:13.901Z","updatedAt":"2018-02-26T12:31:12.764Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Gaming","url":"gaming","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4IiTE4WzzyQkoeAoaOqgcu","type":"Entry","createdAt":"2018-02-12T15:10:28.101Z","updatedAt":"2018-02-26T12:31:12.455Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Multiplayer Game","url":"multiplayer-game","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2019-02-20","description":"This in-depth tutorial will show you how to create a complete two-player mobile Pong game using React Native. You will use Node for the backend and MatterJS as the physics engine.","prerequisite":"You will need Node 11+, Yarn and React Native 0.57.8+ installed on your machine.","content":"In this tutorial, we’ll re-create the classic video game “Pong”. For those unfamiliar, Pong is short for Ping-pong. It’s another term for table tennis in which two players hit a lightweight ball back and forth across a table using small rackets. So Pong is basically the video game equivalent of the sport. \n\n\n## Prerequisites\n\nBasic knowledge of [React Native](https://facebook.github.io/react-native/) and [React Navigation](https://reactnavigation.org) is required. We’ll also be using Node, but knowledge is optional since we’ll only use it minimally.\n\nWe’ll be using the following package versions:\n\n\n- Yarn 1.13.0\n- Node 11.2.0\n- React Native 0.57.8\n- React Native Game Engine 0.10.1\n- MatterJS 0.14.2\n\nFor compatibility reasons, I recommend you to install the same package versions used in this tutorial before trying to update to the latest ones.\n\nWe’ll be using Pusher Channels in this tutorial. So you should know how to create and set up a new app instance on their [website](https://pusher.com/channels). The only requirement is for the app to allow client events. You can enable it from your app settings page. \n\nLastly, you’ll need an [ngrok account](https://ngrok.com/), so you can use it for exposing the server to the internet.\n\n\n## App overview\n\nWe’ll re-create the Pong game with React Native and Pusher Channels. Users have to log in using a unique username before they can start playing the game. The server is responsible for signaling for when an opponent is found and when the game starts. Once in the game, all the users have to do is land the ball on their opponent’s base and also prevent them from landing the ball on their base. For the rest of the tutorial, I’ll be referring to the object which the users will move as “plank”.\n\nHere’s what it will look like:\n\n\n![Pusher Pong](https://d2mxuefqeaa7sj.cloudfront.net/s_AF1C44C5364586C0D563D34F8C93326419297074F68554974FEDCEF531C77072_1547644438673_ping-pong-pusher.gif)\n\n\nYou can find the code on this [GitHub repo](https://github.com/anchetaWern/RNPong).\n\n\n## Creating the app\n\nStart by initializing a new React Native project:\n\n```\n    react-native init RNPong\n    cd RNPong\n```\n\nOnce the project is created, open your `package.json` file and add the following to your dependencies:\n\n``` json\n    \"dependencies\": {\n      \"matter-js\": \"^0.14.2\",\n      \"pusher-js\": \"^4.3.1\",\n      \"react-native-game-engine\": \"^0.10.1\",\n      \"react-native-gesture-handler\": \"^1.0.12\",\n      \"react-navigation\": \"^3.0.9\",\n      // your existing dependencies..\n    }\n```\n\nExecute `yarn install` to install the packages.\n\nWhile that’s doing its thing, here’s a brief overview of what each package does:\n\n\n- [matter-js](https://github.com/liabru/matter-js) - a JavaScript physics engine. This allows us to simulate how objects respond to applied forces and collisions. It’s responsible for animating the ball and the planks as they move through space.\n- [pusher-js](https://github.com/pusher/pusher-js) - used for sending realtime messages between the two users so the UI stays in sync.\n- [react-native-game-engine](https://github.com/bberak/react-native-game-engine) - provides useful components for effectively managing and rendering the objects in our game. As you’ll see later, it’s the one which orchestrates the different objects so they can be managed by a system which specifies how the objects will move or react to collisions.\n- [react-navigation](https://github.com/react-navigation/react-navigation) - for handling navigation between the login and the game screen.\n- [react-native-gesture-handler](https://github.com/kmagiera/react-native-gesture-handler) - you might think that we’re using it for handling the swiping motion for moving the planks. But the truth is we don’t really need this directly. react-navigation uses it for handling gestures when navigating between pages.\n\nOnce that’s done, link all the packages with `react-native link`. \n\nNext, set the permission to access the network state and set the orientation to `landscape`:\n\n``` xml\n    // android/app/src/main/AndroidManifest.xml\n    \u003cmanifest ...\u003e\n      \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n      \u003cuses-permission android:name=\"android.permission.SYSTEM_ALERT_WINDOW\"/\u003e\n      \u003cuses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/\u003e\n      \u003capplication\n        android:name=\".MainApplication\"\n        ...\n      \u003e\n        \u003cactivity\n          android:name=\".MainActivity\"\n          android:screenOrientation=\"landscape\"\n          ...\n        \u003e\n          ...\n        \u003c/activity\u003e\n      \u003c/application\u003e\n    \u003c/manifest\u003e\n```\n\n### React Navigation boilerplate code\n\nStart by adding the boilerplate code for setting up React Navigation. This includes the main app file and the root file for specifying the app screens:\n\n``` javascript\n    // App.js\n    import React, { Component } from \"react\";\n    import { View } from \"react-native\";\n    \n    import Root from \"./Root\";\n    \n    export default class App extends Component {\n      render() {\n        return (\n          \u003cView style={styles.container}\u003e\n            \u003cRoot /\u003e\n          \u003c/View\u003e\n        );\n      }\n    }\n    \n    const styles = {\n      container: {\n        flex: 1\n      }\n    };\n\n\n    // Root.js\n    import React, { Component } from \"react\";\n    import { YellowBox } from 'react-native';\n    import { createStackNavigator, createAppContainer } from \"react-navigation\";\n    import LoginScreen from './src/screens/Login';\n    import GameScreen from './src/screens/Game';\n    \n    // to suppress timer warnings (has to do with Pusher)\n    YellowBox.ignoreWarnings([\n      'Setting a timer'\n    ]);\n    \n    const RootStack = createStackNavigator(\n      {\n        Login: LoginScreen,\n        Game: GameScreen\n      },\n      {\n        initialRouteName: \"Login\"\n      }\n    );\n    \n    const AppContainer = createAppContainer(RootStack);\n    \n    class Router extends Component {\n      render() {\n        return (\n          \u003cAppContainer /\u003e\n        );\n      }\n    }\n    \n    export default Router;\n```\n\nIf you don’t know what’s going on with the code above, be sure to check out the [React Navigation docs](https://reactnavigation.org/docs/en/getting-started.html).\n\n### Login screen\n\nWe’re now ready to add the code for the login screen of the app. Start by importing the things we need. If you haven’t created a Pusher app instance yet, now is a good time to do so. Then replace the placeholders below. As for the ngrok URL, you can add it later once we run the app:\n\n``` javascript\n    // src/screens/Login.js\n    import React, { Component } from \"react\";\n    import {\n      View,\n      Text,\n      TextInput,\n      TouchableOpacity,\n      Alert\n    } from \"react-native\";\n    \n    import Pusher from 'pusher-js/react-native';\n    \n    const pusher_app_key = 'YOUR PUSHER APP KEY';\n    const pusher_app_cluster = 'YOUR PUSHER APP CLUSTER';\n    const base_url = 'YOUR HTTPS NGROK URL';\n```\n\nNext, initialize the state and instance variables that we’ll be using:\n\n``` javascript\n    class LoginScreen extends Component {\n      static navigationOptions = {\n        title: \"Login\"\n      };\n    \n      state = {\n        username: \"\",\n        enteredGame: false\n      };\n    \n      constructor(props) {\n        super(props);\n        this.pusher = null;\n        this.myChannel = null;\n      }\n      \n      // next: add render method\n      \n    }\n```\n\nIn the `render` method, we have the login form:\n\n``` javascript\n    render() {\n    \n      return (\n        \u003cView style={styles.wrapper}\u003e\n    \n          \u003cView style={styles.container}\u003e\n            \u003cView style={styles.main}\u003e\n              \u003cView\u003e\n                \u003cText style={styles.label}\u003eEnter your username\u003c/Text\u003e\n                \u003cTextInput\n                  style={styles.textInput}\n                  onChangeText={username =\u003e this.setState({ username })}\n                  value={this.state.username}\n                /\u003e\n              \u003c/View\u003e\n    \n              {\n                !this.state.enteredGame \u0026\u0026\n                \u003cTouchableOpacity onPress={this.enterGame}\u003e\n                  \u003cView style={styles.button}\u003e\n                    \u003cText style={styles.buttonText}\u003eLogin\u003c/Text\u003e\n                  \u003c/View\u003e\n                \u003c/TouchableOpacity\u003e\n              }\n    \n              {this.state.enteredGame \u0026\u0026 (\n                \u003cText style={styles.loadingText}\u003eLoading...\u003c/Text\u003e\n              )}\n            \u003c/View\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nWhen the **Login** button is clicked, we authenticate the user through the server. This is a requirement for Pusher apps that communicate directly from the client side. So to save on requests, we also submit the `username` as an additional request parameter. Once the app receives a response from the server, we subscribe to the current user’s own channel. This allows the app to receive messages from the server, and from their opponent later on:\n\n``` javascript\n    enterGame = async () =\u003e {\n      const username = this.state.username;\n      \n      if (username) {\n        this.setState({\n          enteredGame: true // show loading text\n        });\n      \n        this.pusher = new Pusher(pusher_app_key, {\n          authEndpoint: `${base_url}/pusher/auth`,\n          cluster: pusher_app_cluster,\n          auth: {\n            params: { username: username }\n          },\n          encrypted: true\n        });\n      \n        this.myChannel = this.pusher.subscribe(`private-user-${username}`);\n        this.myChannel.bind(\"pusher:subscription_error\", status =\u003e {\n          Alert.alert(\n            \"Error\",\n            \"Subscription error occurred. Please restart the app\"\n          );\n        });\n      \n        this.myChannel.bind(\"pusher:subscription_succeeded\", () =\u003e {\n          // next: add code for when the opponent is found\n        });\n      }\n    };\n```\n\nWhen the `opponent-found` event is triggered by the server, this is the cue for the app to navigate to the game screen. But before that, we first subscribe to the opponent’s channel and determine which objects should be assigned to the current user. The game is set up in a way that the first player who logs in is always considered “player one”, and the next one is always “player two”. Player one always assumes the left side of the screen, while player two assumes the right side. Each player has a plank and a wall assigned to them. Most of the code below is used to determine which objects should be assigned to the current player:\n\n``` javascript\n    this.myChannel.bind(\"opponent-found\", data =\u003e {\n      let opponent = username == data.player_one ? data.player_two : data.player_one;\n    \n      const playerOneObjects = {\n        plank: \"plankOne\",\n        wall: \"leftWall\",\n        plankColor: \"green\"\n      };\n    \n      const playerTwoObjects = {\n        plank: \"plankTwo\",\n        wall: \"rightWall\",\n        plankColor: \"blue\"\n      };\n    \n      const isPlayerOne = username == data.player_one ? true : false;\n    \n      const myObjects = isPlayerOne ? playerOneObjects : playerTwoObjects;\n      const opponentObjects = isPlayerOne\n        ? playerTwoObjects\n        : playerOneObjects;\n    \n      const myPlank = myObjects.plank;\n      const myPlankColor = myObjects.plankColor;\n      const opponentPlank = opponentObjects.plank;\n      const opponentPlankColor = opponentObjects.plankColor;\n    \n      const myWall = myObjects.wall;\n      const opponentWall = opponentObjects.wall;\n    \n      Alert.alert(\"Opponent found!\", `Your plank color is ${myPlankColor}`);\n    \n      this.opponentChannel = this.pusher.subscribe(\n        `private-user-${opponent}`\n      );\n      this.opponentChannel.bind(\"pusher:subscription_error\", data =\u003e {\n        console.log(\"Error subscribing to opponent's channel: \", data);\n      });\n    \n      this.opponentChannel.bind(\"pusher:subscription_succeeded\", () =\u003e {\n        \n        this.props.navigation.navigate(\"Game\", {\n          pusher: this.pusher,\n          username: username,\n          myChannel: this.myChannel,\n          opponentChannel: this.opponentChannel,\n    \n          opponent: opponent,\n          isPlayerOne: isPlayerOne,\n          myPlank: myPlank,\n          opponentPlank: opponentPlank,\n          myPlankColor: myPlankColor,\n          opponentPlankColor: opponentPlankColor,\n    \n          myWall: myWall,\n          opponentWall: opponentWall\n        });\n      });\n    \n      this.setState({\n        username: \"\",\n        enteredGame: false\n      });\n    });\n```\n\nNext, add the styles for the login screen. You can get it from this [file](https://github.com/anchetaWern/RNPong/blob/master/src/screens/Login.js#L154-L191).\n\n### Server code\nCreate a `server` folder inside the root of the React Native project. Inside, create a `package.json` file with the following contents:\n\n``` json\n    {\n      \"name\": \"pong-authserver\",\n      \"version\": \"1.0.0\",\n      \"description\": \"\",\n      \"main\": \"index.js\",\n      \"scripts\": {\n        \"start\": \"node server.js\"\n      },\n      \"author\": \"\",\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.17.2\",\n        \"dotenv\": \"^4.0.0\",\n        \"express\": \"^4.15.3\",\n        \"pusher\": \"^1.5.1\"\n      }\n    }\n```\n\nExecute `yarn install` to install the dependencies.\n\nNext, create a `.env` file and add your Pusher app credentials:\n\n```\n    APP_ID=\"YOUR PUSHER APP ID\"\n    APP_KEY=\"YOUR PUSHER APP KEY\"\n    APP_SECRET=\"YOUR PUSHER APP SECRET\"\n    APP_CLUSTER=\"YOUR PUSHER APP CLUSTER\"\n```\n\nNext, import all the packages we need and initialize Pusher:\n\n``` javascript\n    // server/server.js\n    var express = require('express');\n    var bodyParser = require('body-parser');\n    var Pusher = require('pusher');\n    \n    require('dotenv').config();\n    \n    var app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    var pusher = new Pusher({\n      appId: process.env.APP_ID,\n      key: process.env.APP_KEY,\n      secret:  process.env.APP_SECRET,\n      cluster: process.env.APP_CLUSTER,\n    });\n```\n\nNext, we add the route for authenticating the user. I said authentication, but to simplify things, we’re going to skip the actual authentication. Normally, you would have a database for checking whether the user has a valid account before you call the `pusher.authenticate` method:\n\n``` javascript\n    var users = [];\n    \n    app.post(\"/pusher/auth\", function(req, res) {\n      var socketId = req.body.socket_id;\n      var channel = req.body.channel_name;\n      var username = req.body.username;\n    \n      users.push(username); // temporarily store the username to be used later\n      console.log(username + \" logged in\");\n    \n      var auth = pusher.authenticate(socketId, channel);\n      res.send(auth);\n    });\n```\n\nNext, add the route for triggering the event for informing the users that an opponent was found. When you access this route on the browser, it will show an alert that an opponent is found, and the game screen will show up. Again, this isn’t what you’d do in a production app. This is only a demo, so this is done to have finer control over when things are triggered:\n\n``` javascript\n    app.get(\"/opponent-found\", function(req, res) {\n      var unique_users = users.filter((value, index, self) =\u003e {\n        return self.indexOf(value) === index;\n      });\n      var player_one = unique_users[0];\n      var player_two = unique_users[1];\n    \n      console.log(\"opponent found: \" + player_one + \" and \" + player_two);\n    \n      pusher.trigger(\n        [\"private-user-\" + player_one, \"private-user-\" + player_two],\n        \"opponent-found\",\n        {\n          player_one: player_one,\n          player_two: player_two\n        }\n      );\n    \n      res.send(\"opponent found!\");\n    });\n```\n\nLastly, the start game route is what triggers the ball to actually start moving:\n\n``` javascript\n    app.get(\"/start-game\", function(req, res) {\n      var unique_users = users.filter((value, index, self) =\u003e {\n        return self.indexOf(value) === index;\n      });\n    \n      var player_one = unique_users[0];\n      var player_two = unique_users[1];\n      \n      console.log(\"start game: \" + player_one + \" and \" + player_two);\n    \n      pusher.trigger(\n        [\"private-user-\" + player_one, \"private-user-\" + player_two],\n        \"start-game\",\n        {\n          start: true\n        }\n      );\n    \n      users = [];\n    \n      res.send(\"start game!\");\n    });\n    \n    // run the server on a specific port\n    var port = 5000;\n    app.listen(port);\n```\n\n### Game screen\nLet’s go back the app itself. This time, we proceed to coding the game screen. Start by importing the packages and components we need:\n\n``` javascript\n    // src/screens/Game.js\n    import React, { PureComponent } from 'react';\n    import { View, Text, Alert } from \"react-native\";\n    import { GameEngine } from \"react-native-game-engine\";\n    import Matter from \"matter-js\";\n    \n    import Circle from '../components/Circle'; // for rendering the ball\n    import Box from '../components/Box'; // for rendering the planks and walls\n```\n\nNext, we declare the size of the objects. Here, we’re using hard-coded dimensions to constrain the world to a single size. Because someone might be playing the game on a tablet, and their opponent is only playing on a phone with a small screen. This means that the ball will travel longer distances compared the phone, and the UI won’t be perfectly synced:\n\n``` javascript\n    import React, { PureComponent } from \"react\";\n    import { View, Text, Dimensions, Alert } from \"react-native\";\n    import { GameEngine } from \"react-native-game-engine\";\n    import Circle from \"../components/Circle\";\n    import Box from \"../components/Box\";\n    \n    import Matter from \"matter-js\";\n    \n    const BALL_SIZE = 50;\n    const PLANK_HEIGHT = 70;\n    const PLANK_WIDTH = 20;\n    \n    const GAME_WIDTH = 650;\n    const GAME_HEIGHT = 340;\n    \n    const BALL_START_POINT_X = GAME_WIDTH / 2 - BALL_SIZE;\n    const BALL_START_POINT_Y = GAME_HEIGHT / 2;\n    const BORDER = 15;\n    \n    const WINNING_SCORE = 5; \n```\n\nNext, we specify the properties of the objects in the game. These properties decide how they move through space and respond to collisions with other objects:\n\n``` javascript\n    const plankSettings = {\n      isStatic: true\n    };\n    \n    const wallSettings = {\n      isStatic: true\n    };\n    \n    const ballSettings = {\n      inertia: 0,\n      friction: 0,\n      frictionStatic: 0,\n      frictionAir: 0,\n      restitution: 1\n    };\n```\n\nHere’s what each property does. Note that most of these properties are only applicable to the ball. All the ones applied to other objects are simply used to replace the default values:\n\n\n- [isStatic](http://brm.io/matter-js/docs/classes/Body.html#property_isStatic) - used for specifying that the object is immovable. This means that it won’t change position no matter the amount of force applied to it by another object.\n- [inertia](http://brm.io/matter-js/docs/classes/Body.html#property_inertia) - the amount of external force it takes to move a specific object. We’re specifying a value of `0` for the ball so it requires no force at all to move it.\n- [friction](http://brm.io/matter-js/docs/classes/Body.html#property_friction) - used for specifying the kinetic friction of the object. This can have a value between `0` and `1`. A value of `0` means that the object doesn’t produce any friction when it slides through another object which has also a friction of `0`. This means that when a force is applied to it, it will simply slide indefinitely until such a time that another force stops it. `1` is the maximum amount of friction. And any value between it and `0` is used to control the amount of friction it produces as it slides to through or collides with another object. For the ball, we’re specifying a friction of `0` so it can move indefinitely. \n- [frictionStatic](http://brm.io/matter-js/docs/classes/Body.html#property_frictionStatic) - aside from `inertia`, this is another property you can use to specify how much harder it will be to move a static object. So a higher value will require a greater amount of force to move the object. \n- [frictionAir](http://brm.io/matter-js/docs/classes/Body.html#property_frictionAir) - used for specifying the air resistance of an object. We’re specifying a value of `0` so the ball can move indefinitely through space even if it doesn’t collide to anything.\n- [restitution](http://brm.io/matter-js/docs/classes/Body.html#property_restitution) - used for specifying the bounce of the ball when it collides with walls and planks. It can have a value between `0` and `1`. `0` means it won’t bounce at all when it collides with another object. So `1` produces the maximum amount of bounce.\n\nNext, create the actual objects using the settings from earlier. In MatterJS, we can create objects using the `Matter.Bodies` module. We can create different shapes using the methods in this module. But for the purpose of this tutorial, we only need to create a circle (ball) and a rectangle (planks and walls). The `circle` and `rectangle` methods both require the initial `x` and `y` position of the object as their first and second arguments. As for the third one, the `circle` method requires the radius of the circle. While the `rectangle` method requires the width and the height. The last argument is the object’s properties we declared earlier. In addition, we’re also specifying a `label` to make it easy to determine the object we’re working with. The `isSensor` is set to `true` for the left and right walls so they will only act as a sensor for collisions instead of affecting the object which collides to it. This means that the ball will simply pass through those walls:\n\n``` javascript\n    const ball = Matter.Bodies.circle(\n      BALL_START_POINT_X,\n      BALL_START_POINT_Y,\n      BALL_SIZE,\n      {\n        ...ballSettings,\n        label: \"ball\"\n      }\n    );\n    \n    const plankOne = Matter.Bodies.rectangle(\n      BORDER,\n      95,\n      PLANK_WIDTH,\n      PLANK_HEIGHT,\n      {\n        ...plankSettings,\n        label: \"plankOne\"\n      }\n    );\n    const plankTwo = Matter.Bodies.rectangle(\n      GAME_WIDTH - 50,\n      95,\n      PLANK_WIDTH,\n      PLANK_HEIGHT,\n      { ...plankSettings, label: \"plankTwo\" }\n    );\n    \n    const topWall = Matter.Bodies.rectangle(\n      GAME_HEIGHT - 20,\n      -30,\n      GAME_WIDTH,\n      BORDER,\n      { ...wallSettings, label: \"topWall\" }\n    );\n    const bottomWall = Matter.Bodies.rectangle(\n      GAME_HEIGHT - 20,\n      GAME_HEIGHT + 33,\n      GAME_WIDTH,\n      BORDER,\n      { ...wallSettings, label: \"bottomWall\" }\n    );\n    const leftWall = Matter.Bodies.rectangle(-50, 160, 10, GAME_HEIGHT, {\n      ...wallSettings,\n      isSensor: true,\n      label: \"leftWall\"\n    });\n    const rightWall = Matter.Bodies.rectangle(\n      GAME_WIDTH + 50,\n      160,\n      10,\n      GAME_HEIGHT,\n      { ...wallSettings, isSensor: true, label: \"rightWall\" }\n    );\n    \n    const planks = {\n      plankOne: plankOne,\n      plankTwo: plankTwo\n    };\n```\n\nNext, we add all the objects to the “world”. In MatterJS, all objects that you need to interact with one another need to be added to the world. This allows them to be simulated by the “engine”. The engine is used for updating the simulation of the world:\n\n``` javascript\n    const engine = Matter.Engine.create({ enableSleeping: false });\n    const world = engine.world;\n    \n    Matter.World.add(world, [\n      ball,\n      plankOne,\n      plankTwo,\n      topWall,\n      bottomWall,\n      leftWall,\n      rightWall\n    ]);\n```\n\nIn the above code, `enableSleeping` is set to `false` to prevent the objects from sleeping. This is a state similar to adding the `isStatic` property to the object, the only difference is that objects that are asleep can be woken up and continue their motion. As you’ll see later on, we’re actually going to make the ball sleep manually as a technique for keeping the UI synced.\n\nNext, create the component and initialize the state. Note that we’re using a `PureComponent` instead of the usual `Component`. This is because the game screen needs to be pretty performant. `PureComponent` automatically handles the `shouldComponentUpdate` method for you. When props or state changes, `PureComponent` will do a shallow comparison on both props and state. And the component won’t actually re-render if nothing has changed:\n\n``` javascript\n    export default class Game extends PureComponent {\n      static navigationOptions = {\n        header: null // we don't need a header\n      };\n    \n      state = {\n        myScore: 0,\n        opponentScore: 0\n      };\n      \n      // next: add constructor\n    \n    }\n```\n\nThe constructor is where we specify the systems to be used by the React Native Game Engine and subscribe the user to their opponent’s channel. Start by getting all the navigation params that we passed from the login screen earlier:\n\n``` javascript\n    constructor(props) {\n      super(props);\n    \n      const { navigation } = this.props;\n      this.movePlankInterval = null;\n      \n      this.pusher = navigation.getParam(\"pusher\");\n      this.username = navigation.getParam(\"username\");\n      \n      this.myChannel = navigation.getParam(\"myChannel\");\n      this.opponentChannel = navigation.getParam(\"opponentChannel\");\n      \n      this.isPlayerOne = navigation.getParam(\"isPlayerOne\");\n      \n      const myPlankName = navigation.getParam(\"myPlank\");\n      const opponentPlankName = navigation.getParam(\"opponentPlank\");\n      \n      this.myPlank = planks[myPlankName];\n      this.opponentPlank = planks[opponentPlankName];\n      \n      this.myPlankColor = navigation.getParam(\"myPlankColor\");\n      this.opponentPlankColor = navigation.getParam(\"opponentPlankColor\");\n      \n      this.opponentWall = navigation.getParam(\"opponentWall\");\n      this.myWall = navigation.getParam(\"myWall\");\n      \n      const opponent = navigation.getParam(\"opponent\");\n    \n      // next: add code for adding systems\n    }\n```\n\nNext, add the systems for the physics engine and moving the plank. The React Native Game Engine doesn’t come with a physics engine out of the box. Thus, we use MatterJS to handle the physics of the game. Later on, in the component’s `render` method, we will pass `physics` and `movePlank` as systems:\n\n``` javascript\n    this.physics = (entities, { time }) =\u003e {\n      let engine = entities[\"physics\"].engine;\n      engine.world.gravity.y = 0; // no downward pull\n      Matter.Engine.update(engine, time.delta); // move the simulation forward\n      return entities;\n    };\n    \n    this.movePlank = (entities, { touches }) =\u003e {\n      let move = touches.find(x =\u003e x.type === \"move\");\n      if (move) {\n        const newPosition = {\n          x: this.myPlank.position.x, // x is constant\n          y: this.myPlank.position.y + move.delta.pageY // add the movement distance to the current Y position\n        };      \n        Matter.Body.setPosition(this.myPlank, newPosition);\n      }\n      return entities;\n    };\n    \n    // next: add code for binding to events for syncing the UI\n```\n\nAll the `entities` (the objects we added earlier) that are added to the world are passed to each of the systems. Each entity has properties like `time` and `touches` which you can manipulate. In the case of the physics engine, the engine is considered as an entity. In the code below, we’re manipulating the world’s Y gravity (downward pull) to be equal to zero. This means that the objects won’t be pulled downwards as the simulation goes on. \n\nThe `movePlank` system is used for moving the plank. So we extract the `touches` from the entities. `touches` contains an array of all the touches the user performed. Each item in the array contains all sorts of data about the touch, but we’re only concerned with the `type`. The `type` can be `touch`, `press`, or in this case, `move`. `move` is when the user moves their finger/s across the screen. Since we only need to listen for this one event, we don’t actually need to target the plank precisely. Which means that the user doesn’t have to place their index finger on their assigned plank in order to move it. They simply have to move their finger across the screen, and the distance from that movement will automatically be added to the current Y position of their plank. Of course, this considers the direction of the movement as well. So if the direction is upwards, then the value of `move.delta.pageY` will be negative.\n\nNext, we bind to the events that will be triggered by the opponent. These will keep the UI of the two players synced. First is the event for syncing the planks. This updates the UI to show the current position of the opponent’s plank:\n\n``` javascript\n    this.myChannel.bind(\"client-opponent-moved\", opponentData =\u003e {\n      Matter.Body.setPosition(this.opponentPlank, {\n        x: this.opponentPlank.position.x,\n        y: opponentData.opponentPlankPositionY\n      });\n    });\n    \n    // next: listen to the event for moving the ball\n```\n\nNext, add the event which updates the balls current position and velocity. The way this works is that the two players will continuously pass the ball’s current position and velocity to one another. Between each pass, we add a 200-millisecond delay so that the ball actually moves between each pass. Making the ball sleep between each pass is important because the ball will look like it’s going back and forth a few millimeters while it’s reaching its destination:\n\n``` javascript\n    this.myChannel.bind(\"client-moved-ball\", ({ position, velocity }) =\u003e {\n      Matter.Sleeping.set(ball, false); // awaken the ball so it can move\n      Matter.Body.setPosition(ball, position);\n      Matter.Body.setVelocity(ball, velocity);\n    \n      setTimeout(() =\u003e {\n        if (position.x != ball.position.x || position.y != ball.position.y) {\n          this.opponentChannel.trigger(\"client-moved-ball\", {\n            position: ball.position,\n            velocity: ball.velocity\n          });\n    \n          Matter.Sleeping.set(ball, true); // make the ball sleep while waiting for the event to be triggered by the opponent\n        }\n      }, 200);\n    });\n    \n    // next: add code for sending plank updates to the opponent\n```\n\nNext, trigger the event for updating the opponent’s screen of the current position of the user’s plank. This is executed every 300 milliseconds so we’re still within the 10 messages per second limit per client:\n\n``` javascript\n    setInterval(() =\u003e {\n      this.opponentChannel.trigger(\"client-opponent-moved\", {\n        opponentPlankPositionY: this.myPlank.position.y\n      });\n    }, 300);\n    \n    // next: add code for updating player two's score\n```\n\nNext, we bind to the event for updating the scores on player two’s side. Player one (the first user who logs in) is responsible for triggering this event:\n\n``` javascript\n    if (!this.isPlayerOne) {\n      this.myChannel.bind(\n        \"client-update-score\",\n        ({ playerOneScore, playerTwoScore }) =\u003e {\n          this.setState({\n            myScore: playerTwoScore,\n            opponentScore: playerOneScore\n          });\n        }\n      );\n    }\n    \n    // next: add componentDidMount\n```\n\nOnce the component is mounted, we wait for the `start-game` event to be triggered by the server before accelerating the ball. Once the ball is accelerated, we initiate the back and forth passing of the ball’s position and velocity. This is the reason why only player one runs this code:\n\n``` javascript\n    componentDidMount() {\n      \n      if (this.isPlayerOne) {\n        this.myChannel.bind(\"start-game\", () =\u003e {\n          Matter.Body.setVelocity(ball, { x: 3, y: 0 }); // throw the ball straight to the right\n    \n          this.opponentChannel.trigger(\"client-moved-ball\", {\n            position: ball.position,\n            velocity: ball.velocity\n          });\n    \n          Matter.Sleeping.set(ball, true); // make the ball sleep and wait for the same event to be triggered on this side\n        });\n    \n         // next: add scoring code\n      }\n    }\n```\n\nNext, we need to handle collisions. We already know that the ball can collide with any of the objects we added into the world. But if it hits either the left wall or right wall, the player who hit it will score a point. And since this block of code is still within the `this.isPlayerOne` condition, we also need to trigger an event for informing player two of the score change:\n\n``` javascript\n    Matter.Events.on(engine, \"collisionStart\", event =\u003e {\n      var pairs = event.pairs;\n    \n      var objA = pairs[0].bodyA.label;\n      var objB = pairs[0].bodyB.label;\n    \n      if (objA == \"ball\" \u0026\u0026 objB == this.opponentWall) {\n        this.setState(\n          {\n            myScore: +this.state.myScore + 1\n          },\n          () =\u003e {\n            // bring back the ball to its initial position\n            Matter.Body.setPosition(ball, {\n              x: BALL_START_POINT_X,\n              y: BALL_START_POINT_Y\n            });\n    \n            Matter.Body.setVelocity(ball, { x: -3, y: 0 });\n            \n            // inform player two of the change in scores\n            this.opponentChannel.trigger(\"client-update-score\", {\n              playerOneScore: this.state.myScore,\n              playerTwoScore: this.state.opponentScore\n            });\n          }\n        );\n      } else if (objA == \"ball\" \u0026\u0026 objB == this.myWall) {\n        this.setState(\n          {\n            opponentScore: +this.state.opponentScore + 1\n          },\n          () =\u003e {\n            Matter.Body.setPosition(ball, {\n              x: BALL_START_POINT_X,\n              y: BALL_START_POINT_Y\n            });\n            Matter.Body.setVelocity(ball, { x: 3, y: 0 });\n            \n            this.opponentChannel.trigger(\"client-update-score\", {\n              playerOneScore: this.state.myScore,\n              playerTwoScore: this.state.opponentScore\n            });\n          }\n        );\n      }\n    });\n```\n\nNext, add the `render` function. The majority of the rendering is taken care of by the React Native Game Engine. To render the objects, we pass them as the value for the `entities` prop. This accepts an object containing all the objects that we want to render. The only required property for an object is the `body` and the `renderer`, the rest are props to be passed to the renderer itself. Note that you also need to pass the `engine` and the `world` as entities: \n\n``` javascript\n    render() {\n      return (\n        \u003cGameEngine\n          style={styles.container}\n          systems={[this.physics, this.movePlank]}\n          entities={{\n            physics: {\n              engine: engine,\n              world: world\n            },\n            pongBall: {\n              body: ball,\n              size: [BALL_SIZE, BALL_SIZE],\n              renderer: Circle\n            },\n            playerOnePlank: {\n              body: plankOne,\n              size: [PLANK_WIDTH, PLANK_HEIGHT],\n              color: \"#a6e22c\",\n              renderer: Box,\n              xAdjustment: 30\n            },\n            playerTwoPlank: {\n              body: plankTwo,\n              size: [PLANK_WIDTH, PLANK_HEIGHT],\n              color: \"#7198e6\",\n              renderer: Box,\n              type: \"rightPlank\",\n              xAdjustment: -33\n            },\n    \n            theCeiling: {\n              body: topWall,\n              size: [GAME_WIDTH, 10],\n              color: \"#f9941d\",\n              renderer: Box,\n              yAdjustment: -30\n            },\n            theFloor: {\n              body: bottomWall,\n              size: [GAME_WIDTH, 10],\n              color: \"#f9941d\",\n              renderer: Box,\n              yAdjustment: 58\n            },\n            theLeftWall: {\n              body: leftWall,\n              size: [5, GAME_HEIGHT],\n              color: \"#333\",\n              renderer: Box,\n              xAdjustment: 0\n            },\n            theRightWall: {\n              body: rightWall,\n              size: [5, GAME_HEIGHT],\n              color: \"#333\",\n              renderer: Box,\n              xAdjustment: 0\n            }\n          }}\n        \u003e\n          \u003cView style={styles.scoresContainer}\u003e\n            \u003cView style={styles.score}\u003e\n              \u003cText style={styles.scoreLabel}\u003e{this.myPlankColor}\u003c/Text\u003e\n              \u003cText style={styles.scoreValue}\u003e {this.state.myScore}\u003c/Text\u003e\n            \u003c/View\u003e\n            \u003cView style={styles.score}\u003e\n              \u003cText style={styles.scoreLabel}\u003e{this.opponentPlankColor}\u003c/Text\u003e\n              \u003cText style={styles.scoreValue}\u003e {this.state.opponentScore}\u003c/Text\u003e\n            \u003c/View\u003e\n          \u003c/View\u003e\n        \u003c/GameEngine\u003e\n      );\n    }\n```\n\nNote that the `xAdjustment` and `yAdjustment` are mainly used for adjusting the `x` and `y` positions of the objects. This is because the formula (see `src/components/Box.js`) that we’re using to calculate the `x` and `y` positions of the object doesn’t accurately adjust it to where it needs to be. This results in the ball seemingly bumping into an invisible wall before it actually hits the plank. This is because of the difference between the actual position of the object in the world (as far as MatterJS is concerned) and where it’s being rendered on the screen.\n\nYou can view the styles for the Game screen [here](https://github.com/anchetaWern/RNPong/blob/master/src/screens/Game.js#L349-L371).\n\nHere’s the code for the Circle and Box components:\n\n``` javascript\n    // src/components/Circle.js\n    import React, { Component } from \"react\";\n    import { View } from \"react-native\";\n    \n    const Box = ({ body, size, xAdjustment, yAdjustment, color }) =\u003e {\n      const width = size[0];\n      const height = size[1];\n      const xAdjust = xAdjustment ? xAdjustment : 0;\n      const yAdjust = yAdjustment ? yAdjustment : 0;\n    \n      const x = body.position.x - width / 2 + xAdjust;\n      const y = body.position.y - height / 2 - yAdjust;\n    \n      return (\n        \u003cView\n          style={{\n            position: \"absolute\",\n            left: x,\n            top: y,\n            width: width,\n            height: height,\n            backgroundColor: color\n          }}\n        /\u003e\n      );\n    };\n    \n    export default Box;\n```\n\n``` javascript\n    // src/components/Box.js\n    import React, { Component } from \"react\";\n    import { View } from \"react-native\";\n    \n    const Box = ({ body, size, xAdjustment, yAdjustment, color }) =\u003e {\n      const width = size[0];\n      const height = size[1];\n      const xAdjust = xAdjustment ? xAdjustment : 0;\n      const yAdjust = yAdjustment ? yAdjustment : 0;\n    \n      const x = body.position.x - width / 2 + xAdjust;\n      const y = body.position.y - height / 2 - yAdjust;\n    \n      return (\n        \u003cView\n          style={{\n            position: \"absolute\",\n            left: x,\n            top: y,\n            width: width,\n            height: height,\n            backgroundColor: color\n          }}\n        /\u003e\n      );\n    };\n    \n    export default Box;\n```\n\nAt this point you can now run the app:\n\n```\n    cd server\n    node server.js\n    ./ngrok http 5000\n    cd ..\n    react-native run-android\n```\n\nHere are the steps that I used for testing the app:\n\n\n1. Login user “One” on Android device #1.\n2. Login user “Two” on Android device #2.\n3. Access the `/opponent-found` route from the browser. This should show an alert on both devices that an opponent was found.\n4. Access the `/start-game` route from the browser. This should start moving the ball.\n\nAt this point, the two players can now start moving their planks and play the game.\n\n\n## Conclusion\n\nIn this tutorial, you learned how to create a realtime game with React Native and Pusher Channels. Along the way, you also learned how to use the React Native Game Engine and MatterJS. \n\nThere’s a hard limit of 10 messages per second, which stopped us from really going all out with syncing the UI. But the game we created is actually acceptable in terms of performance. \n\nYou can find the code on this [GitHub repo](https://github.com/anchetaWern/RNPong).","metaTitle":"Create a two-player Pong game with React Native","metaDescription":"This in-depth tutorial will show you how to create a complete two-player mobile Pong game using React Native. You will use Node for the backend and MatterJS as the physics engine."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4TaeqYGX7W86sqUAqmO2W6","type":"Entry","createdAt":"2019-02-19T17:20:58.088Z","updatedAt":"2020-06-19T12:55:16.198Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Accepting payments in React Native","url":"react-native-payments","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNPay","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}}],"reviewDate":"2019-02-19","description":"In this tutorial you will build a mobile app in React Native that can process payments using Stripe. The backend will be created with Laravel Lumen and MySQL.","prerequisite":"You will need React Native, PHP, MySQL and Node and npm set up on your machine. This tutorial uses Lumen 5.7","content":"In this tutorial, we’ll be looking at how to accept payments within a React Native app.\n\nAn important aspect when creating an app or website is the ability to accept payments from its customers. Platforms such as the web, Android, and iOS already have well-supported APIs for payment gateways such as Stripe. But what about cross-platform frameworks like React Native?\n\n## Prerequisites\n\nBasic knowledge of React Native is required. Although we’ll be using a bit of PHP, it’s optional because the code will be self-explanatory. \n\n### Development environment\nYou need to have PHP and MySQL installed on your machine. The easiest way to get the development environment is through [Laravel Homestead](https://laravel.com/docs/5.7/homestead). If you’re on Mac, you can get up and running even faster with [Laravel Valet](https://laravel.com/docs/5.7/valet).\n\nYou also need a MySQL database manager for creating the database:\n\n\n- [DBeaver](https://dbeaver.io/) - Windows, Linux, Mac\n- [Sequel Pro](https://www.sequelpro.com/) - Mac only\n\nYou also need to have an [ngrok account](https://ngrok.com/) for exposing the server to the internet.\n \n### Developer accounts\nWe will be using [Stripe](https://stripe.com) to process payments, so a Stripe account is required.\n\nOptionally, you will also need to have the following if you want to use Google Pay and Apple Pay in production:\n\n\n- [Google Play developer console account](https://play.google.com/apps/publish/signup/#) - you can actually use the Tipsi-Stripe library without a developer account if you use the test environment. But if you want to use it in production, you’ll need to have a Google Play developer console account which can [accept payments](https://support.google.com/googleplay/android-developer/answer/7161426?hl=en).\n- [Apple developer account](https://developer.apple.com/programs/enroll/) - you need this if you want to use Apple Pay with Tipsi-Stripe. At the time of writing this tutorial, there are only a handful of countries in which [Sandbox testing](https://developer.apple.com/apple-pay/sandbox-testing/) for Apple Pay is supported. This means you’ll have to use real credit cards for testing if you’re not living in one of those countries. As this tutorial won’t be covering how to set up Apple Pay on your developer account, be sure to read the [Getting Started with Apple Pay](https://developer.apple.com/apple-pay/get-started/) guide.\n\n### Package versions\nThe following package versions are used in the app:\n\n\n- React Native 0.57.8\n- Tipsi-stripe 6.1.2\n\nWhile the following are used in the backend:\n\n\n- Lumen framework 5.7\n- Stripe PHP 6.28\n\nTo ensure compatibility, start with the versions above before upgrading to the latest versions.\n\n\n## App overview\n\nWe’ll create a simple app which displays a product to be bought. The user can then pay for it with the credit card they have added to their Google Account. We will use Google Pay as a means for accepting the payment, and Stripe for processing it. If you’ve previously worked with Stripe for the web, the process is pretty much the same. Tipsi-Stripe provides a way to use either Google Pay, Apple Pay, or its custom React component for accepting the payment details. You will then use any of these methods to generate the token which you will submit to the app’s backend. This token allows you to charge the card added by the user.\n\nHere’s what the app will look like:\n\n![react-native-payments-demo-1](//images.ctfassets.net/1es3ne0caaid/634s2k68a4QquMU2qSGmSk/af6e22218aabfef2ae8240466d78946e/react-native-payments-demo-1.jpeg)\n\nYou can find the source code on this [GitHub repo](https://github.com/anchetaWern/RNPay).\n\n## Building the app\n\nStart by creating a new React Native project and installing the dependencies:\n\n```\n    react-native init RNPay\n    cd RNPay\n    yarn add tipsi-stripe react-native-config axios\n    react-native link\n```\n\nOnce that’s done, add the config for enabling the Google Wallet API in the `android/app/src/main/AndroidManifest.xml` file. This allows you to use Google Pay within the app:\n\n``` xml\n    \u003capplication\u003e\n      \u003cmeta-data\n        android:name=\"com.google.android.gms.wallet.api.enabled\"\n        android:value=\"true\" /\u003e\n    \u003c/application\u003e\n```\n\nNext, update the `android/app/build.gradle` file and add the path to React Native Config:\n\n```\n`apply from: project(':react-native-config').projectDir.getPath() + \"/dotenv.gradle\"`\n```\n\nFor iOS, please refer to the documentation:\n\n- [Installation](https://tipsi.github.io/tipsi-stripe/docs/installation.html)\n- [Linking](https://tipsi.github.io/tipsi-stripe/docs/linking.html)\n\nNext, create a `.env` file at the root of the project directory and add your Stripe publishable key. If you’re testing, this can be the test credentials provided by Stripe. You can find your [API keys here](https://dashboard.stripe.com/account/apikeys). Be sure to toggle **Viewing Test Data** if you want your test credentials:\n\n```\n    STRIPE_PUBLISHABLE_KEY=YOUR_STRIPE_PUBLISHABLE_KEY\n```\n\nOnce that’s done, you’re now ready to work on the code. Start by opening the `App.js` file and add the following:\n\n``` javascript\n    import React, { Component } from 'react';\n    import { View, Alert } from 'react-native';\n    \n    import stripe from 'tipsi-stripe';\n    import Config from 'react-native-config';\n    \n    import ItemBox from './src/components/ItemBox';\n    import pay from './src/helpers/pay';\n    \n    stripe.setOptions({\n      publishableKey: Config.STRIPE_PUBLISHABLE_KEY,\n      androidPayMode: 'test', // test || production\n    });\n```\n\nThe most important part in the above code is the setting of the options for Stripe. The `publishableKey` is basically the same key as the one you put on your JavaScript files when working on the web. `androidPayMode` is the mode to be used by Google Pay. `test` means that the requirements for using it won’t be as tight as when you’re on production. For example, the app doesn’t need to be uploaded in the Google Play Store. Your Google Play console developer account also don’t need to have Google Pay enabled. In fact, you don’t even need a developer account in order to try it out. You can find more info about it [here](https://developers.google.com/android/reference/com/google/android/gms/wallet/WalletConstants.html#ENVIRONMENT_TEST). \n\nNext, initialize the data to be used throughout the app. This includes the user’s access token which is used for authenticating the user’s request when we hit the endpoint for creating a charge. To simplify things we’re simply going to hardcode an existing access token that’s already in the database. I’ll show you how to create the database later on when we get to the backend:\n\n``` javascript\n    export default class App extends Component {\n    \n      constructor(props) {\n        super(props);\n        this.access_token = \"AN EXISTING USER'S ACCESS TOKEN FROM YOUR DB\";\n        this.currency_code = 'USD'; // the currency to be used for processing the transaction\n        // item data\n        this.item = {\n          title: 'Loop 720',\n          price: 1,\n          image: require('./src/images/loop720.jpg')\n        };\n      }\n      \n      state = {\n        isPaying: false, // whether the user is currently paying for something \n        canPay: false // whether the user's device has the ability to pay using Google Pay\n      }\n      \n      // next: add componentDidMount\n    }\n    \n    const styles = {\n      container: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: '#FFF',\n      }\n    };\n```\n\nNext, we check if the user’s device can make payments with Google Pay:\n\n``` javascript\n    async componentDidMount() {\n      const device_supported = await stripe.deviceSupportsAndroidPay();\n      const can_make_android_pay_payments = await stripe.canMakeAndroidPayPayments();\n    \n      if (device_supported \u0026\u0026 can_make_android_pay_payments) {\n        this.setState({\n          canPay: true\n        });\n      }\n    }\n```\n\nFor the app’s UI we’re simply going to render a single item:\n\n``` javascript\n    render() {\n      return (\n        \u003cView style={styles.container}\u003e\n          \u003cItemBox\n            {...this.item}\n            canPay={this.state.canPay}\n            isPaying={this.state.isPaying}\n            payAction={this.payItem} /\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nHere’s the code for the ItemBox component:\n\n``` javascript\n    // src/components/ItemBox.js\n    import React, { Component } from 'react';\n    import { View, Text, Button, ActivityIndicator, Image } from 'react-native';\n    \n    const ItemBox = ({ title, price, image, canPay, isPaying, payAction }) =\u003e {\n    \n      return (\n        \u003cView\u003e\n          \u003cImage\n            style={styles.image}\n            source={image} /\u003e\n    \n          \u003cView style={styles.textContainer}\u003e\n            \u003cText style={styles.title}\u003e{title}\u003c/Text\u003e\n          \u003c/View\u003e\n    \n          \u003cView style={styles.textContainer}\u003e\n            \u003cText style={styles.price}\u003e${price.toFixed(2)}\u003c/Text\u003e\n          \u003c/View\u003e\n    \n          {\n            isPaying \u0026\u0026\n            \u003cActivityIndicator size=\"large\" color=\"#0000ff\" /\u003e\n          }\n    \n          \u003cView style={styles.buttonContainer}\u003e\n          {\n            canPay \u0026\u0026 !isPaying \u0026\u0026\n            \u003cButton\n              onPress={payAction}\n              title=\"Buy Now\"\n              color=\"#841584\"\n            /\u003e\n          }\n    \n          {\n            !canPay \u0026\u0026\n            \u003cView style={styles.alertContainer}\u003e\n              \u003cText style={styles.errorText}\u003eCan't accept payments\u003c/Text\u003e\n            \u003c/View\u003e\n          }\n          \u003c/View\u003e\n    \n        \u003c/View\u003e\n      );\n    \n    }\n    \n    export default ItemBox;\n    \n    const styles = {\n      image: {\n        width: 170,\n        height: 150\n      },\n      textContainer: {\n        alignItems: 'center'\n      },\n      title: {\n        fontSize: 20\n      },\n      price: {\n        fontSize: 23,\n        fontWeight: 'bold'\n      },\n      buttonContainer: {\n        margin: 10\n      },\n      alertContainer: {\n        width: 150\n      },\n      errorText: {\n        color: 'red'\n      }\n    };\n```\n\nBack to the `App.js` file, add the function for paying for the item. This gets executed when the **Buy Now** button from the ItemBox component is clicked:\n\n``` javascript\n    // App.js\n    payItem = async () =\u003e {\n      \n      this.setState({\n        isPaying: true // show loader instead of the button\n      });\n    \n      const token = await stripe.paymentRequestWithNativePay({\n        total_price: this.item.price.toFixed(2),\n        currency_code: this.currency_code,\n        line_items: [\n          {\n            currency_code: this.currency_code,\n            description: this.item.title,\n            total_price: this.item.price.toFixed(2),\n            unit_price: this.item.price.toFixed(2),\n            quantity: '1',\n          }\n        ]\n      });\n    \n      // next: add code for committing the charge into the server\n    }\n```\n\nIf you want to capture shipping information, you need to set the `shipping_address_required` option and set its value to `true`. Optionally, you can also set the `shipping_countries` to an array of country codes to limit the countries you want to ship to:\n\n```\n    shipping_countries: ['US', 'PH', 'SG']\n```\n\nHere’s what the value of `token` looks like when the request is successful:\n\n``` json\n    {  \n       \"card\":{  \n          \"currency\":null,\n          \"fingerprint\":\"xxxxxxxxxx\",\n          \"funding\":\"credit\",\n          \"addressZip\":null,\n          \"brand\":\"MasterCard\",\n          \"cardId\":\"card_xxxxxxxxxxx\",\n          \"number\":null,\n          \"addressState\":null,\n          \"country\":\"US\",\n          \"cvc\":null,\n          \"expMonth\":7,\n          \"addressLine1\":null,\n          \"expYear\":3040,\n          \"addressCountry\":null,\n          \"name\":\"Wern Ancheta\",\n          \"last4\":\"11xx\",\n          \"addressLine2\":null,\n          \"addressCity\":null\n       },\n       \"created\":1546997773000,\n       \"used\":false,\n       \"extra\":{  \n          \"shippingContact\":{  \n             \"postalCode\":\"2500\",\n             \"name\":\"Wern Ancheta\",\n             \"locality\":\"San Juan\",\n             \"countryCode\":\"PH\",\n             \"administrativeArea\":\"La Union\",\n             \"address1\":\"Forest street\"\n          },\n          \"billingContact\":{  \n    \n          }\n       },\n       \"livemode\":false,\n       \"tokenId\":\"tok_xxxxxxxx\"\n    }\n```\n\nFor more examples, please refer to the [example folder](https://github.com/tipsi/tipsi-stripe/tree/master/example/src/scenes) in Tipsi-Stripe’s GitHub repo. And for more info on how to use them, check out the following:\n\n\n- [paymentRequestWithNativePay (Android)](https://tipsi.github.io/tipsi-stripe/docs/paymentrequestwithandroidpay.html) - uses Android Pay for accepting payments.\n- [paymentRequestWithNativePay (iOS)](https://tipsi.github.io/tipsi-stripe/docs/paymentrequestwithapplepayitemsoptions.html) - uses Apple Pay for accepting payments.\n- [paymentRequestWithCardForm](https://tipsi.github.io/tipsi-stripe/docs/paymentrequestwithcardform.html) - a ready-made React form for accepting payments.\n- [PaymentCardTextField](https://tipsi.github.io/tipsi-stripe/docs/paymentcardtextfield.html) - use this if you want full control over the styling of the card field.\n\nDo note that if you plan on using the `paymentRequestWithNativePay` method, you have to first [determine the platform](https://facebook.github.io/react-native/docs/platform-specific-code) the app is running on because the options you need to pass to the method will differ based on the platform. This is one advantage of the `paymentRequestWithCardForm` because of its platform-agnostic API.\n\nNext, send the request for creating a charge to the server:\n\n``` javascript\n    const response = await pay(this.item.price, this.item.title, this.access_token, token.tokenId);\n    if (response) {\n      Alert.alert(\"Done!\", \"Payment successful\");\n    } else {\n      Alert.alert(\"Error occurred\", \"Something went wrong while processing payment. Please try again.\");\n    }\n    \n    this.setState({\n      isPaying: false // show the Buy Now button again\n    });\n```\n\nNext, create a `src/helpers/pay.js` file and add the following. This sends a `POST` request to the server which includes the relevant details for the payment transaction:\n\n``` javascript\n    import axios from 'axios';\n    \n    const endpoint = 'https://YOUR_NGROK_URL/charge';\n    \n    const pay = async (amount, description, access_token, token_id) =\u003e {\n      const data = {\n        'amount': amount,\n        'description': description,\n        'access_token': access_token,\n        'token_id': token_id // the token generated by Stripe\n      };\n    \n      const headers = {\n        'Content-Type': 'application/json',\n      };\n    \n      let response = false;\n      try {\n        let response_data = await axios.post(endpoint, data, { headers });\n        return true;\n      } catch (e) {\n        console.log('server error: ', e);\n      }\n      \n      return response;      \n    }\n    \n    export default pay;\n```\n\nIn the above code, we’re only sending four pieces of data to the server. But you can actually send more if you like. Note that you can actually fetch the same data returned by `stripe.paymentRequestWithNativePay` method call in the server by making a request to the Stripe API. This means you don’t actually need to submit things like the shipping address or the customer’s name in your request. So most likely, the additional data you submit here will be specific to your application.\n\n\n## Add the backend code\n\nThis part assumes that you’ve already set up your machine with either Laravel Homestead or Laravel Valet. This will give you the `composer` command which is used below to generate a new Lumen project:\n\n```\n    composer create-project --prefer-dist laravel/lumen RNPayBackend\n```\n\nIf you can’t run `composer` globally, be sure to move it to your local `bin` folder or add it to your `PATH`.\n\nNext, navigate inside the generated `RNPayBackend` directory and add the database config:\n\n```\n    DB_CONNECTION=mysql\n    DB_HOST=127.0.0.1\n    DB_PORT=3306\n    DB_DATABASE=rnpay\n    DB_USERNAME=your_username\n    DB_PASSWORD=your_password\n```\n\nThe above config assumes that you have already created a database using a database manager of your choice. So be sure to create one with the same name as the value given to `DB_DATABASE`.\n\nAlso, add your Stripe secret key to the `.env` file:\n\n```\n    STRIPE_SECRET_KEY=YOUR_STRIPE_SECRET_KEY\n```\n\nNext, create a new database migration file. These files allow you to write some code for updating the database structure:\n\n```\n    php artisan make:migration create_users_table\n```\n\nNavigate inside the `database/migrations` directory and you will see the generated file. Add the following code to it:\n\n``` php\n    \u003c?php\n    use Illuminate\\Support\\Facades\\Schema;\n    use Illuminate\\Database\\Schema\\Blueprint;\n    use Illuminate\\Database\\Migrations\\Migration;\n    \n    class CreateUsersTable extends Migration\n    {\n        public function up()\n        {\n            Schema::create('users', function (Blueprint $table) {\n                $table-\u003eincrements('id');\n                $table-\u003estring('access_token'); // the user's access token\n                $table-\u003estring('stripe_customer_id')-\u003enullable(); \n                $table-\u003etimestamps(); // created_at and updated_at timestamp fields\n            });\n        }\n    \n        public function down()\n        {\n            Schema::dropIfExists('users');\n        }\n    }\n```\n\nMigrate the database using the new file. This creates a `users` table with the fields you specified above:\n\n```\n    php artisan migrate\n```\n\nNext, access the database using a MySQL database manager and add a dummy data in the `users` table. Leave the `stripe_customer_id` as blank and copy the `access_token` to the `App.js` file.\n\n![react-native-payments-demo-2](//images.ctfassets.net/1es3ne0caaid/2fNiOZ7H9KYa24KYyIMsCW/1f596ff7a5b7b48ff99243395c74474d/react-native-payments-demo-2.png)\n\nNext, install the Stripe PHP library:\n\n```\n    composer require stripe/stripe-php\n```\n\nWhile that’s doing its thing, update the `bootstrap/app.php` file and uncomment the following line. This enables us to use Facades. In simple terms, Facades are easy to remember class names which allow us to access underlying functionality such as logging or fetching data from the database:\n\n```\n    $app-\u003ewithFacades();\n```\n\nNext, add the route for processing payments to the `routes/web.php` file. This is the endpoint that we’re hitting in the app earlier. This uses a controller to process the request:\n\n```\n    $router-\u003epost('/charge', 'PaymentController@createCharge');\n```\n\nCreate the controller at `app/Http/Controllers/PaymentController.php` and add the following:\n\n``` php\n    \u003c?php\n    \n    namespace App\\Http\\Controllers;\n    use DB; // for talking to the database\n    use Illuminate\\Support\\Facades\\Log; // for logging\n    use Illuminate\\Http\\Request; // for getting request data\n    \n    class PaymentController extends Controller\n    {\n    \n      public function __construct() {\n        \\Stripe\\Stripe::setApiKey(getenv('STRIPE_SECRET_KEY')); \n      }\n    \n      // next: add code for creating a charge\n    }\n```\n\nIn the above code, we’ve added a `__construct` method. This sets the Stripe API key that we’re going to use. This gets executed everytime any of the methods in the `PaymentController` gets called.\n\nNext, add the method for creating a charge. This gets executed every time a `POST` request is made to the `/charge` route. Here we pass the data which came from the app to Stripe’s API method for [creating a charge](https://stripe.com/docs/api/charges/create). If the charge is successful, we return the success response to the app: \n\n``` php\n    public function createCharge(Request $request) {\n      \n      // get the data that was passed from the app  \n      $amount = (int) $request-\u003einput('amount') * 100; // amount should be in cents\n      $description = $request-\u003einput('description');\n      $access_token = $request-\u003einput('access_token');\n      $token = $request-\u003einput('token_id');\n      \n      // get the Stripe customer ID based on the access token\n      $user = DB::table('users')\n          -\u003ewhere('access_token', $access_token)\n          -\u003eselect('id', 'stripe_customer_id')\n          -\u003efirst();\n      \n      // construct the data required by Stripe for creating a charge\n      $payment = [\n        'amount' =\u003e $amount, \n        'currency' =\u003e 'usd',\n        'description' =\u003e $description,\n        'customer' =\u003e $user-\u003estripe_customer_id\n      ];\n    \n      if (empty($user-\u003estripe_customer_id)) {\n        // next: add code for creating a Stripe customer\n      }\n      \n      try {\n        $charge = \\Stripe\\Charge::create($payment);\n        return ['status' =\u003e 'ok']; // if the charge was successful\n      } catch (\\Exception $e) {\n        Log::info(\"Cannot create charge for Stripe customer: \" . $user-\u003eid);\n      }\n    \n      return ['status' =\u003e 'not_ok']; // if the charge wasn't successful\n    }\n```\n\nIf there’s no Stripe customer ID associated with the user, it means that a Stripe customer hasn’t been created for the user yet. So to associate a customer with the provided payment info, we need to make a separate request to the Stripe API to [create a customer](https://stripe.com/docs/api/customers/create). This is a necessary step for associating a payment from a specific customer. Even though the Stripe API allows you to just pass the `$token_id` when creating a charge, it isn’t really recommended. Especially if you expect to receive payments from the same person in the future:\n\n``` php\n    try {\n      $customer = \\Stripe\\Customer::create([\n        \"source\" =\u003e $token // the payment token received from the app\n      ]);\n      \n      // update the user to include the Stripe customer ID\n      DB::table('users')\n        -\u003ewhere('access_token', $access_token)\n        -\u003eupdate([\n          'stripe_customer_id' =\u003e $customer-\u003eid\n        ]);\n      \n      $payment['customer'] = $customer-\u003eid; // assign the ID of the newly created customer to the payment\n    } catch (\\Exception $e) {\n      Log::info(\"Cannot create Stripe customer for user: \" . $user-\u003eid);\n    }\n```\n\nLastly, expose the server to the internet using ngrok. If you use Laravel Valet, first you have to change the default top-level domain to be the same as the one we’re using:\n\n```\n    valet domain test\n```\n\nNext, navigate to the root of `RNPayBackend` and execute `valet park`. This will register `rnpaybackend.test` on your local host which you can then expose it using ngrok:\n\n```\n    ngrok http -host-header=rewrite rnpaybackend.test:80\n```\n\nIf you used Laravel Homestead, you can log in to your Homestead machine via `vagrant ssh` and run `share rnpay.test`. This will use ngrok to expose the server.\n\nOnce that’s done, you can update the `src/helpers/pay.js` file in the app with the HTTPS URL from ngrok.\n\nAt this point, the app should be fully functional. Go ahead and run it:\n\n```\n    react-native run-android\n```\n\n## Conclusion\n\nIn this tutorial, we learned how to use the Tipsi-Stripe library and the Lumen PHP framework to accept payments within a React Native app.\n\nYou can find the full source code on this [GitHub repo](https://github.com/anchetaWern/RNPay).","metaTitle":"Accepting payments in React Native","metaDescription":"In this tutorial you will build a mobile app in React Native that can process payments using Stripe. The backend will be created with Laravel Lumen and MySQL."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4csgick7faaceQKY6MqqQm","type":"Entry","createdAt":"2019-02-14T18:48:32.075Z","updatedAt":"2019-02-14T18:48:32.075Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"How to save data locally in Flutter","url":"local-data-flutter","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"58WBWjhcWcuAMI6qIAyiC4","type":"Entry","createdAt":"2018-12-13T20:46:00.073Z","updatedAt":"2018-12-13T20:46:36.867Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Suragch","url":"suragch","email":"studymongolian@gmail.com","twitter":"https://twitter.com/suragch","github":"https://github.com/suragch","guestWriter":true}}],"projectRepo":"https://github.com/suragch/flutter_saving_data","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Q3oRmiXjOmcSmweY4gKY8","type":"Entry","createdAt":"2018-09-12T09:33:28.375Z","updatedAt":"2018-09-12T09:33:28.375Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flutter","url":"flutter","type":"framework","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}}],"reviewDate":"2019-02-14","description":"This tutorial looks at saving data locally with Flutter. It provides code samples for three methods: saving to shared preferences, to a database, and to a file. You will learn when to use each method, as well as the basic Flutter code and dependencies needed.","prerequisite":"You will need a Flutter development environment set up, and should have some basic knowledge of Flutter.","content":"## Introduction\n\nIt's a rare app that doesn't need to store some sort of data, whether it's remembering the last article read, the user's email address, or the night mode setting. Both Android and iOS give us several options for how to save data locally. Flutter makes these options available to us, too. Specifically, we'll learn how to save data using the following methods:\n\n\n1. Shared preferences\n2. SQLite database\n3. Text file\n\nWe’ll look at each one of these and go through some easy examples to help us understand them.\n\n\n## Prerequisites\n\nI'm assuming that you:\n\n\n- Have the [Flutter development environment](https://flutter.io/docs/get-started/install) set up (This tutorial was tested with Flutter 1.0.)\n- Know the way around your IDE (I'm using Android Studio, but VSCode and IntelliJ are fine, too.)\n- Have experience creating a basic Flutter app (If not see First steps with Flutter parts [one](https://pusher.com/tutorials/flutter-widgets), [two](https://pusher.com/tutorials/flutter-building-layouts), and [three](https://pusher.com/tutorials/flutter-user-input).)\n\nBeyond that there is very little that you need to know for this lesson. I'll give you cut-and-paste code blocks for you to try out. From there you'll be able to experiment and adapt them to your own needs.\n\n\n## Setup\n\nStart a new Flutter project. I’m calling mine `flutter_saving_data`. \n\n\n## Saving to shared preferences\n\nWhen you have small amounts of data that you want to persist across app runs, you can use Flutter's [shared_preferences](https://pub.dartlang.org/packages/shared_preferences) plugin to save that data. Here are some examples of things you might save using shared preferences:\n\n\n- User selected color theme\n- Whether night mode is enabled\n- Preferred app language\n\nSome data may not have been explicitly chosen by the user, but is still important to save. For example:\n\n- Last scroll position\n- Current tab\n- Time length already played in an audio or video file\n\nAny customization that makes the user do less work the next time they use your app is a good candidate for shared preferences. When you want to save larger amounts of data, though, you should consider using a database.\n\nSince shared preferences saves app related settings and defaults, the system erases that data when the user uninstalls your app. So if there are settings that should persist across installs or devices, then you should consider saving to the cloud.\n\nIn Flutter, we'll use a plugin that is a wrapper around the same underlying functionality in Android and iOS. Android calls it [SharedPreferences](https://developer.android.com/training/data-storage/shared-preferences) while iOS calls it [NSUserDefaults](https://developer.apple.com/documentation/foundation/nsuserdefaults). Like Android, Flutter also calls it [SharedPreferences](https://pub.dartlang.org/packages/shared_preferences).\n\nThe following steps will get you set up using SharedPreferences.\n\n### Dependency\n\nOpen your `pubspec.yaml` file and in the dependencies section add the line `shared_preferences: ^0.4.3` like this:\n\n``` yaml\n    dependencies:\n      flutter:\n        sdk: flutter\n      shared_preferences: ^0.4.3\n```\n\nThis tutorial is using version 0.4.3. You can find the most recent version on [pub](https://pub.dartlang.org/packages/shared_preferences).\n\n\n\u003e **Note:** Do you understand the meaning of the `^` caret before the version number? Based on [semantic versioning](https://semver.org/), this allows the dependency to automatically update to the latest version as long as that version does not contain breaking changes to whatever version number you specified. See [this post](https://stackoverflow.com/a/53563080/3681880) for more details.\n\u003e \n\u003e You might have also seen the `any` keyword used, as in `shared_preferences: any`. It's better not to do this, though, since it would allow automatic updates with changes that could break your app.\n\n### Minimal example\n\nLet's make a simple app to read and save data with SharedPreferences.\n\n![flutter-local-data-buttons](//images.ctfassets.net/1es3ne0caaid/47eDvWNF5YsM4cCAwEKSU6/862a1fb1a43d8d67d7ec3cbae809d5d8/flutter-local-data-buttons.png)\n\nThere are two buttons. One button will read from SharedPreferences. The other button will write to it. In order to keep the UI as simple as possible we will log the output using `print()`. In Android Studio be sure to have the Run tab selected so that you can see the output.\n\nReplace the code in your `main.dart` file with the following:\n\n``` dart\n    import 'package:flutter/material.dart';\n    import 'package:shared_preferences/shared_preferences.dart';\n    \n    void main() =\u003e runApp(MyApp());\n    \n    class MyApp extends StatelessWidget {\n      @override\n      Widget build(BuildContext context) {\n        return MaterialApp(\n          theme: ThemeData(primarySwatch: Colors.blue),\n          home: MyHomePage(),\n        );\n      }\n    }\n    \n    class MyHomePage extends StatelessWidget {\n      @override\n      Widget build(BuildContext context) {\n        return Scaffold(\n          appBar: AppBar(\n            title: Text('Saving data'),\n          ),\n          body: Row(\n            //mainAxisAlignment: MainAxisAlignment.center,\n            children: \u003cWidget\u003e[\n              Padding(\n                padding: const EdgeInsets.all(8.0),\n                child: RaisedButton(\n                  child: Text('Read'),\n                  onPressed: () {\n                    _read();\n                  },\n                ),\n              ),\n              Padding(\n                padding: const EdgeInsets.all(8.0),\n                child: RaisedButton(\n                  child: Text('Save'),\n                  onPressed: () {\n                    _save();\n                  },\n                ),\n              ),\n            ],\n          ),\n        );\n      }\n      \n      // Replace these two methods in the examples that follow\n      \n      _read() async {\n        final prefs = await SharedPreferences.getInstance();\n        final key = 'my_int_key';\n        final value = prefs.getInt(key) ?? 0;\n        print('read: $value');\n      }\n      \n      _save() async {\n        final prefs = await SharedPreferences.getInstance();\n        final key = 'my_int_key';\n        final value = 42;\n        prefs.setInt(key, value);\n        print('saved $value');\n      }\n    }\n```\n\nIn this minimal app setup, we are going to save an integer to shared preferences. Because I am trying to make the app as simple as possible, I hard coded the integer `42` as the value to save. In a production app we would get this value from somewhere else, for example, from a text field or a scroll position or a preferred font size. See [First steps with Flutter: Responding to user input](https://pusher.com/tutorials/flutter-user-input) for some examples of how to get user input. \n\nRun the app and press the **Read** button. We are trying to read a value that has never been set, so you should see the following output:\n\n```\n    read: 0\n```\n\nNow press the **Save** button. This will save the integer `42`  to shared preferences. Then press the **Read** button again. You should see the following output:\n\n```\n    saved: 42\n    read: 42\n```\n\nEven if you close the app and restart it the read value should still be `42`.\n\n### Explanation\n\nLet's take a look at the code in the `_read()` method from above:\n\n``` dart\n    _read() async {\n      final prefs = await SharedPreferences.getInstance();\n      final key = 'my_int_key';\n      final value = prefs.getInt(key) ?? 0;\n      print('read: $value');\n    }\n```\n\nNotes:\n\n- Any read/write to data storage can be expensive so you have to do it in an `async` method and `await` the shared preference instance before trying to read from it. \n- Shared preferences use key-value pairs to save data. To get a saved integer we use the `getInt()` method and pass in our key to look up. \n- The `??` [double question mark operator](https://stackoverflow.com/a/54031805/3681880) means \"if null\", so if the key that we are looking up doesn't exist, then we will use the default value after the `??`, in this case `0`.\n\nIn the `_save()` method above we use `setInt()` to save an integer value for a particular key string.\n\n``` dart\n    prefs.setInt(key, value);\n```\n\nThe SharedPreferences types that you can save are:\n\n- int\n- double\n- bool\n- string\n- stringList\n\nYou can see examples of these [here](https://stackoverflow.com/a/54031842/3681880). Play around with the code above to save some of the other types.\n\n\n## Saving to a database\n\nFor large amounts of data SharedPreferences is not a good option. Here are some examples of the kind of data I am talking about:\n\n- Names and addresses\n- A word frequency list\n- High scores\n\nIn iOS we would use Core Data and in Android we would use SQLite to store that kind of data. Because of the complexities of dealing with Core Data, when I was developing iOS apps I ended up ignoring Core Data and just using an SQLite plugin. This greatly simplified cross platform development. Flutter takes this to a whole new level by allowing us to effectively ignore the entire platform.\n\nIn Flutter we can interact with an SQLite database through a plugin called [SQFlite](https://pub.dartlang.org/packages/sqflite). To set it up we will apply the following points:\n\n\n- We will keep the database management code in a database helper class. Doing so will help to isolate the plugin from the rest of the app. That way in the future if there are updates to the plugin, or if we want to use a different plugin, we will only have to update this one class. (If we wanted to further apply the principles of [clean architecture](https://pusher.com/tutorials/clean-architecture-introduction), we could define an interface for the database helper class to implement. That way the rest of the app could just use the interface and know nothing about the helper class. We won't do that today, though.)\n\n- The database helper will be a singleton class and it will maintain a single app-wide global reference to the database, which it will keep open. This will prevent the concurrency issues and memory leaks that can occur when multiple database connections are open at the same time and not closed properly.\n\n- We will also create a data model class that will mirror a row in the database. Creating such a class isn't strictly necessary for teaching you how to use SQFlite, but it greatly simplifies passing data around. The class will also include some convenience methods for converting the data to and from a Map object, which SQFlite uses to interact with the database. (Note that this data model class is different than the concept of an Entity in [clean architecture](https://pusher.com/tutorials/clean-architecture-introduction) theory. It's just a convenient way to pass around related data.)\n\nSo here is a summary of what we will be doing:\n\n- Add the dependency\n- Make a data model class\n- Make a database helper class\n- Use the above classes to read and save data in our app\n\nFor our minimal example below, we will use a simple database schema. Each row in the database table will have three columns:\n\n- id\n- word\n- frequency\n\nIn a full app you could use these to record the frequency of every word in a book or article.\n\n### Dependencies\n\nOpen your `pubspec.yaml` file and in the dependencies section add the following two lines:\n\n``` yaml\n      sqflite: ^1.0.0\n      path_provider: ^0.4.1\n```\n\nThe version numbers above were tested for this tutorial, but you can find the current versions at [sqflite](https://pub.dartlang.org/packages/sqflite) and [path_provider](https://pub.dartlang.org/packages/path_provider#-installing-tab-). We will use the path provider plugin to give us the data directory where we can store the database in Android and iOS. In Android this maps to the AppData directory, and in iOS to NSDocumentsDirectory.\n\n### Database helpers file\n\nCreate a new Dart file called `database_helpers.dart`. Dart allows us to put multiple classes in the same file (also known as a library), so we are going to put both our data model class and our database helper class in here.\n\nPaste the following code into the `database_helpers.dart` file. This is a modification of and expansion on the [documentation](https://pub.dartlang.org/packages/sqflite).\n\n``` dart\n    import 'dart:io';\n    import 'package:path/path.dart';\n    import 'package:sqflite/sqflite.dart';\n    import 'package:path_provider/path_provider.dart';\n    \n    // database table and column names\n    final String tableWords = 'words';\n    final String columnId = '_id';\n    final String columnWord = 'word';\n    final String columnFrequency = 'frequency';\n    \n    // data model class\n    class Word {\n    \n      int id;\n      String word;\n      int frequency;\n      \n      Word();\n      \n      // convenience constructor to create a Word object\n      Word.fromMap(Map\u003cString, dynamic\u003e map) {\n        id = map[columnId];\n        word = map[columnWord];\n        frequency = map[columnFrequency];\n      }\n      \n      // convenience method to create a Map from this Word object\n      Map\u003cString, dynamic\u003e toMap() {\n        var map = \u003cString, dynamic\u003e{\n          columnWord: word,\n          columnFrequency: frequency\n        };\n        if (id != null) {\n          map[columnId] = id;\n        }\n        return map;\n      }\n    }\n    \n    // singleton class to manage the database\n    class DatabaseHelper {\n    \n      // This is the actual database filename that is saved in the docs directory.\n      static final _databaseName = \"MyDatabase.db\";\n      // Increment this version when you need to change the schema.\n      static final _databaseVersion = 1;\n      \n      // Make this a singleton class.\n      DatabaseHelper._privateConstructor();\n      static final DatabaseHelper instance = DatabaseHelper._privateConstructor();\n      \n      // Only allow a single open connection to the database.\n      static Database _database;\n      Future\u003cDatabase\u003e get database async {\n        if (_database != null) return _database;\n        _database = await _initDatabase();\n        return _database;\n      }\n      \n      // open the database\n      _initDatabase() async {\n        // The path_provider plugin gets the right directory for Android or iOS.\n        Directory documentsDirectory = await getApplicationDocumentsDirectory();\n        String path = join(documentsDirectory.path, _databaseName);\n        // Open the database. Can also add an onUpdate callback parameter.\n        return await openDatabase(path,\n            version: _databaseVersion,\n            onCreate: _onCreate);\n      }\n      \n      // SQL string to create the database \n      Future _onCreate(Database db, int version) async {\n        await db.execute('''\n              CREATE TABLE $tableWords (\n                $columnId INTEGER PRIMARY KEY,\n                $columnWord TEXT NOT NULL,\n                $columnFrequency INTEGER NOT NULL\n              )\n              ''');\n      }\n      \n      // Database helper methods:\n      \n      Future\u003cint\u003e insert(Word word) async {\n        Database db = await database;\n        int id = await db.insert(tableWords, word.toMap());\n        return id;\n      }\n      \n      Future\u003cWord\u003e queryWord(int id) async {\n        Database db = await database;\n        List\u003cMap\u003e maps = await db.query(tableWords,\n            columns: [columnId, columnWord, columnFrequency],\n            where: '$columnId = ?',\n            whereArgs: [id]);\n        if (maps.length \u003e 0) {\n          return Word.fromMap(maps.first);\n        }\n        return null;\n      }\n      \n      // TODO: queryAllWords()\n      // TODO: delete(int id)\n      // TODO: update(Word word)\n    }\n```\n\n### Use the database\n\nNow open the `main.dart` file. We are going to use the same UI layout from the SharedPreferences example.\n\n![flutter-local-data-buttons](//images.ctfassets.net/1es3ne0caaid/47eDvWNF5YsM4cCAwEKSU6/862a1fb1a43d8d67d7ec3cbae809d5d8/flutter-local-data-buttons.png)\n\nTo keep this as simple as possible, we will be saving a hard coded word  `hello` with a hard coded word frequency of `15` to the database. This is what we would save in a real app if we counted the word “hello” occurring 15 times in a text passage.\n\nReplace the `_read()` method with\n\n``` dart\n      _read() async {\n        DatabaseHelper helper = DatabaseHelper.instance;\n        int rowId = 1;\n        Word word = await helper.queryWord(rowId);\n        if (word == null) {\n          print('read row $rowId: empty');\n        } else {\n          print('read row $rowId: ${word.word} ${word.frequency}');\n        }\n      }\n```\n\nAnd replace the `_save()` method with\n\n``` dart\n      _save() async {\n        Word word = Word();\n        word.word = 'hello';\n        word.frequency = 15;\n        DatabaseHelper helper = DatabaseHelper.instance;\n        int id = await helper.insert(word);\n        print('inserted row: $id');\n      }\n```\n\nYou will need to import the package that you created above with the database helper and data model class.\n\n``` dart\n    // I called my project `flutter_saving_data`. If you called yours something\n    // different then adjust the import location.\n    import 'package:flutter_saving_data/database_helpers.dart';\n```\n\nRun the app (I had to do a full stop and restart). First press the **Read** button, which will try to query row 1. We haven’t inserted a row yet, though, so you should see the following output:\n\n```\n    read row 1: empty\n```\n\nNow press the **Save** button to insert a row whose word column is `hello` and whose frequency column is `15`. Then press the **Read** button again to query row 1. You should see\n\n```\n    inserted row: 1\n    read row 1: hello 15\n```\n\nCongratulations! You have written to and read from a database.\n\n### Challenge\n\n- Continuing to press the **Save** button will insert more rows. The row ID will be auto-incremented. Try changing the word and frequency of the inserted row. Then change the `rowId` in the `_read()` method to query other rows.\n- Modify the app so that when you press the Read button it will list all of the rows in the database. Hint: `db.query(tableWords)` returns a list of every row as a Map.\n- Modify the app so that when you press the Save button it will either update or delete an existing row. See the [documentation](https://pub.dartlang.org/packages/sqflite) for help.\n\n\n## Saving to a file\n\nNot all data fits well in a database. Sometimes the easiest way to store it is in a file. Here are some examples of when you might want to save data in a file:\n\n- Exporting database content as a csv file\n- Creating a log file\n- Converting a canvas bitmap to a png file\n\nIn the minimal example below we will save a string to a text file and then read it back again.\n\n### Dependency\n\nYou should have already added the [path_provider](https://pub.dartlang.org/packages/path_provider) dependency to your `pubspec.yaml` file when you did the last section. But in case you came directly here, you can add it now:\n\n```\n      path_provider: ^0.4.1\n```\n\n### Minimal example\n\nThe UI is still the same as before.\n\n![flutter-local-data-buttons](//images.ctfassets.net/1es3ne0caaid/47eDvWNF5YsM4cCAwEKSU6/862a1fb1a43d8d67d7ec3cbae809d5d8/flutter-local-data-buttons.png)\n\nWhen we press the Save button it will save some text to a file. When we press the Read button it will read the text file.\n\nUse the same `main.dart` file that we had above, but replace the `_read()` and `_save()` methods with the code below.\n\n``` dart\n      _read() async {\n        try {\n          final directory = await getApplicationDocumentsDirectory();\n          final file = File('${directory.path}/my_file.txt');\n          String text = await file.readAsString();\n          print(text);\n        } catch (e) {\n          print(\"Couldn't read file\");\n        }\n      }\n      \n      _save() async {\n        final directory = await getApplicationDocumentsDirectory();\n        final file = File('${directory.path}/my_file.txt');\n        final text = 'Hello World!';\n        await file.writeAsString(text);\n        print('saved');\n      }\n```\n\nYou will have to add the following two imports:\n\n``` dart\n    import 'dart:io';\n    import 'package:path_provider/path_provider.dart';\n```\n\nRestart the app and press the **Read** button. The file doesn’t exist yet so you should see: \n\n```\n    Couldn't read file\n```\n\nNow press the **Save** button. This will create a file and save the hardcoded string `Hello World!` to it. Then press the **Read** button again. You should see the following output:\n\n```\n    saved\n    Hello World!\n```\n\nGreat! We were able to read and write a text file. The File class also has `writeAsBytes()` and `readAsBytes()` methods for non-text files.\n\n\n## Conclusion\n\nIn this tutorial, we learned three different ways to save data locally. For small amounts of discrete data, shared preferences is a good option. If you have a long list of data items, though, a database is a better choice. In other situations, saving data in a file makes more sense. All of these are local storage options. If the app is uninstalled then the user will lose this data. To prevent data loss, you could use a cloud storage API to backup user data online. This has the added benefit of being able to sync data across devices. However, it also makes you responsible for protecting users' private data. But cloud storage is a lesson for a different day. For now continue to hone your skills at storing data locally.\n\nThe [source code for this tutorial](https://github.com/suragch/flutter_saving_data) is available on GitHub. (If you got stuck on the database challenge, you can find the answers there, too.)","metaTitle":"How to save data locally in Flutter","metaDescription":"This tutorial looks at saving data locally with Flutter. It provides code samples for three methods: saving to shared preferences, to a database, and to a file. You will learn when to use each method, as well as the basic Flutter code and dependencies needed."}}],"defaultValue":"Android","queryType":"tag","pages":10,"route":"/tutorials","query":{"tag":"Android","page":"4"}}},"page":"/tutorials","query":{"tag":"Android","page":"4"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=Android&page=4 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:36:24 GMT -->
</html>