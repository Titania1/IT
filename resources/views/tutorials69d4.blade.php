<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=React&page=6 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:15 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">60</span> tutorials for “<span class="css-npldjc ehwuahf2">React</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsb028.html?product=Channels&amp;tag=React" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials9a85.html?product=Beams&amp;tag=React" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="React"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/realtime-mysql-java.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Java<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Table</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Getting data in realtime from MySQL with Java</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Use MySQL replication logging to publish database changes to a React-based web dashboard.</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/instagram-clone-part-3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime Instagram clone — Part 3: Realtime feed updates with Pusher and desktop notifications</h3><p class="css-k12xad e5jrto45">This four-part series takes you through building an Instagram clone using Node and React. In part three, implement realt...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/instagram-clone-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime Instagram clone — Part 1: Setting up the project and creating the UI</h3><p class="css-k12xad e5jrto45">This four-part series takes you through building an Instagram clone using Node and React. In part one, set up your proje...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/instagram-clone-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime Instagram clone — Part 2: Connecting the UI with GraphQL data</h3><p class="css-k12xad e5jrto45">This four-part series takes you through building an Instagram clone using Node and React. In part two, connect your UI a...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/instagram-clone-part-4.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime Instagram clone — Part 4: Going offline with service workers</h3><p class="css-k12xad e5jrto45">This four-part series takes you through building an Instagram clone using Node and React. In part four, implement offlin...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-attendance-react-native-ble.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Creating a realtime attendance app with React Native and BLE</h3><p class="css-k12xad e5jrto45">Follow this tutorial to learn how to build a realtime attendance app with React Native, Bluetooth Low Energy (BLE) and C...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/geolocation-sharing-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Location<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a geolocation sharing app with React Native</h3><p class="css-k12xad e5jrto45">Discover how to build a location sharing app with React Native, Google Maps and Facebook.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/react-websockets.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Making React realtime with websockets</h3><p class="css-k12xad e5jrto45">Build a chat application using React and Pusher. </p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/pwa-react.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime PWA with React</h3><p class="css-k12xad e5jrto45">Build a realtime PWA displaying the price information about cryptocurrencies using React.js and Pusher.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialsb734.html?tag=React&amp;page=5" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials6ea5.html?tag=React&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorialscbdc.html?tag=React&amp;page=4" class="css-za1ua3 edg0byb1">4</a><a href="tutorialsb734.html?tag=React&amp;page=5" class="css-za1ua3 edg0byb1">5</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials69d4.html?tag=React&amp;page=6" class="css-2wakph edg0byb1">6</a><a href="tutorials43f9.html?tag=React&amp;page=7" class="css-5s6711 edg0byb1">7</a><a href="tutorials43f9.html?tag=React&amp;page=7" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":60,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1Ok9wy2o0cWyQaAW880mmi","type":"Entry","createdAt":"2018-05-06T17:29:22.639Z","updatedAt":"2018-05-06T17:29:22.639Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Getting data in realtime from MySQL with Java","url":"realtime-mysql-java","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"29U2yrruIQmo6UkY0MMsyK","type":"Entry","createdAt":"2018-02-13T11:27:38.132Z","updatedAt":"2018-02-14T10:08:48.377Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Esteban Herrera","url":"esteban-herrera","email":"estebanhb2@gmail.com","twitter":"https://twitter.com/eh3rrera","github":"https://github.com/eh3rrera/","guestWriter":true}}],"projectRepo":"https://github.com/eh3rrera/realtime-mysql-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1hvzJaMiAkEQOq088wwo4O","type":"Entry","createdAt":"2018-02-12T14:50:04.128Z","updatedAt":"2018-02-26T12:31:15.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Java","url":"java","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-05-04","description":"Use MySQL replication logging to publish database changes to a React-based web dashboard.","prerequisite":"To follow this tutorial you will need some knowledge of Java programming and MySQL management tasks. You will need the Java JDK, Maven, MySQL and Node.js installed on your machine. ","content":"Applications are more complex than ever before.\n\nAnd it’s not only about the increasing number of users that must be handled or reducing response times.\n\nIf your application has a database, probably you’ll need its data in other places as soon as it goes in.\n\nIn this context, [change data capture](https://en.wikipedia.org/wiki/Change_data_capture) is the approach you use to capture and deliver the changes in the database to other sources.\n\nIn this tutorial, you’re going to learn how to stream, in realtime, the changes made to a table in a MySQL database to a React app. Something like this:\n\n![java-mysql-react-demo](//images.ctfassets.net/1es3ne0caaid/71VsGknSCI0QOgE4CCkEmy/beea6a69b0be15e1b421f7fda9af66c9/java-mysql-react-demo.gif)\n\n## Prerequisites\n\nHere’s what you need to have installed to follow this tutorial:\n\n- [Java JDK](http://www.oracle.com/technetwork/java/javase/downloads/index.html) (8 or superior)\n- [Maven](https://maven.apache.org/download.cgi)\n- [MySQL Community Server](https://dev.mysql.com/downloads/mysql/) 5.7 (5.6 and 5.5 should also work, but MySQL 8.0 is not yet supported)\n- [Node.js](https://nodejs.org/en/download/) (6 or superior)\n- Optionally, a Java IDE and a JavaScript editor.\n\nYou’ll need to have knowledge of:\n\n- Java programming (intermediate level)\n- Basic MySQL management tasks\n- React (beginner level)\n\nIf you want to track and determine if something in a database has changed, you have three main approaches:\n\n- Poll the database every X seconds and determine if something has changed using a timestamp, version number or status field.\n- Use database or application-level triggers to execute a piece of code when something changes.\n- Use the database transaction/replication log, which records every change to the database.\n\nI’m going to use the third approach because I think is the most robust. It doesn’t waste resources (like polling) or hurt performance (like triggers).\n\nWe’ll read the database changes from the MySQL replication log using the library [mysql-binlog-connector-java](https://github.com/shyiko/mysql-binlog-connector-java). Then, we’ll parse the event to extract the relevant data and publish it to a Pusher channel so it can be consumed by a React application.\n\nHere’s the diagram that describes the above process:\n\n![java-mysql-db-diagram](//images.ctfassets.net/1es3ne0caaid/30HLN6zj28OiSKE0eE6Oag/6c854c17f053b3b39b5e0523d2b50656/java-mysql-db-diagram.png)\n\nFor reference, [here is a GitHub repository](https://github.com/eh3rrera/realtime-mysql-pusher) with all the code shown in this tutorial and instructions to run it.\n\nLet’s start by creating a Pusher application.\n\n## Creating a Pusher application\n\nIf you haven’t already, create a free account at [Pusher](https://pusher.com/). \n\nThen, go to your [dashboard](https://dashboard.pusher.com) and create a Channels app, choosing a name, the cluster closest to your location, and optionally, React as the frontend tech and Java as the backend tech:\n\n![java-mysql-db-pusher-app](//images.ctfassets.net/1es3ne0caaid/6wRuDb2okoweQMmmGGo84C/190e50e138898fcf725c893c0bfc0fcb/java-mysql-db-pusher-app.png)\n\nThis will give you some sample code to get started:\n\n![java-mysql-db-pusher-app-keys](//images.ctfassets.net/1es3ne0caaid/30al4XZR7yyee0IMKEqICs/34d06b1c4a5f33e56123021ea9284d74/java-mysql-db-pusher-app-keys.png)\n\nSave your app id, key, secret and cluster values. We’ll need them later. \n\n## Configuring MySQL replication\n\nThe first thing you need to do is enable replication in MySQL.\n\n[Replication](https://dev.mysql.com/doc/refman/5.7/en/replication.html) allows data from one MySQL server (the master) to be copied in an asynchronous way to one or more different MySQL servers (the slaves).\n\nIt works by writing all the changes in the master to a binary log file that then is synchronized between master and slaves, so these can apply all those changes.\n\nFor this tutorial, you don’t have to set up slave servers. We’re only interested in the binary log.\n\nIn the MySQL configuration file (usually at `/etc/my.cnf` or `C:\\ProgramData\\MySQL\\MySQL Server 5.7\\my.ini`), add the following lines:\n\n```\n    [mysqld]\n    server-id = 1 #1\n    log_bin = /var/log/mysql/mysql-bin.log #2\n    expire_logs_days = 10 #3\n    max_binlog_size = 100M #4\n    binlog-format = row #5\n```\n\nLine #1 assigns an identifier to the server.\n\nLine #2 specifies the directory where the logs will be stored. In Windows, it will be something like `c:/logs/mysql-bin.log`. In Linux, make sure this directory has the necessary permissions for MySQL.\n\nLine #3 and #4 are optional, they specify the expiration time and maximum size of the file.\n\nLine #5 is important, it specifies the format in which the log will be written.\n\nThere are two main types of replication formats:\n\n- Statement Based Replication (SBR), which replicates entire SQL statements, and \n- Row Based Replication (RBR), which replicates only the changed rows.\n\nFor our purposes, RBR will be easier to work with. That’s why the file specifies this format.\n\nNow restart the server.\n\nIn a terminal window, connect to the MySQL server using `mysql`:\n\n```\n    mysql -u \u003cYOUR_USER\u003e -p \n```\n\nNow choose or create a database and create the table that is going to be used by the application:\n\n``` sql\n    USE myDatabase\n    CREATE TABLE products(id int(11) not null auto_increment, name varchar(50) default null, price decimal(6,2), primary key (id));\n```\n\nIt’s not recommended to work with a user with administrative privileges like `root` so let’s create another user for the application:\n\n``` sql\n    CREATE USER '\u003cYOUR_USER\u003e'@'\u003cYOUR_HOST\u003e' IDENTIFIED BY '\u003cYOUR_PASSWORD\u003e';\n```\n\nGive it replication and table privileges:\n\n``` sql\n    GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO '\u003cYOUR_USER\u003e'@'\u003cYOUR_HOST\u003e';\n    GRANT ALL PRIVILEGES ON `\u003cINSERT_YOUR_DB_NAME\u003e`.* TO '\u003cYOUR_USER\u003e'@'\u003cYOUR_HOST\u003e';\n    FLUSH PRIVILEGES;\n```\n\nNow execute the following command to check if replication is enabled:\n\n```\n    show master status;\n```\n\nIt should show something like the following:\n\n```\n    +------------------+----------+--------------+------------------+-------------------+\n    | File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |\n    +------------------+----------+--------------+------------------+-------------------+\n    | mysql-bin.000001 |      001 |              |                  |                   |\n    +------------------+----------+--------------+------------------+-------------------+\n```\n\nIt indicates the current log file and the position of the last statement.\n\nIf you’re getting `\u003cEmpty set\u003e` or something like that, execute:\n\n```\n    show variables like \"%log_bin%\";\n```\n\nIf replication is enabled, you should see something like the this:\n\n```\n    +---------------------------------+--------------------------------+\n    | Variable_name                   | Value                          |\n    +---------------------------------+--------------------------------+\n    | log_bin                         | ON                             |\n    | log_bin_basename                | /var/log/mysql/mysql-bin       |\n    | log_bin_index                   | /var/log/mysql/mysql-bin.index |\n    | log_bin_trust_function_creators | OFF                            |\n    | log_bin_use_v1_row_events       | OFF                            |\n    | sql_log_bin                     | ON                             |\n    +---------------------------------+--------------------------------+\n```\n\nOtherwise double check your configuration. You can learn more about replication [here](https://dev.mysql.com/doc/refman/5.7/en/replication-configuration.html).\n\nNow let’s create the Java program that will read the binary log.\n\n## Reading MySQL’s binary log\n\nIt turns out that reading binary logs for change data capture is more common than you think.\n\nMicrosoft SQL Server has built-in support for [change data capture](https://docs.microsoft.com/en-us/sql/relational-databases/track-changes/about-change-data-capture-sql-server?view=sql-server-2017).\n\nOracle offers [GoldenGate](http://www.oracle.com/technetwork/middleware/goldengate/overview/index.html) for real-time data integration and replication.\n\nMongoDB offers [Change Streams](https://docs.mongodb.com/manual/changeStreams/) to access real-time data changes.\n\nFor MySQL, there a lot of libraries for reading the binary log and stream changes as events to other sources. In this [wiki](https://github.com/wushujames/mysql-cdc-projects/wiki), you can find many of these libraries.\n\nMost of these libraries were made for enterprise system so they work natively with Apache Kafka, a publish and subscribe distributed platform that streams event and records to multiple sources.\n\nBut if you don’t need something like that, you can use [mysql-binlog-connector-java](https://github.com/shyiko/mysql-binlog-connector-java), which allows you to read the binary log file and listen for changes as events from any Java program.\n\nSo open your favorite IDE and create a Maven project.\n\nOr just create a directory structure like the following:\n\n```\n    src\n     |- main\n       |- java\n     |- pom.xml \n```\n\nIn the `pom.xml` file specify the project information, java version, and `mysql-binlog-connector-java`  and `pusher-http-java` as dependencies:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n    \u003cproject xmlns=\"http://maven.apache.org/POM/4.0.0\"\n             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e\n        \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\n    \n        \u003cgroupId\u003ecom.example\u003c/groupId\u003e\n        \u003cartifactId\u003eMySQLRealtime\u003c/artifactId\u003e\n        \u003cversion\u003e1.0-SNAPSHOT\u003c/version\u003e\n    \n        \u003cproperties\u003e\n            \u003cmaven.compiler.source\u003e1.8\u003c/maven.compiler.source\u003e\n            \u003cmaven.compiler.target\u003e1.8\u003c/maven.compiler.target\u003e\n        \u003c/properties\u003e\n    \n        \u003cdependencies\u003e\n            \u003cdependency\u003e\n                \u003cgroupId\u003ecom.github.shyiko\u003c/groupId\u003e\n                \u003cartifactId\u003emysql-binlog-connector-java\u003c/artifactId\u003e\n                \u003cversion\u003e0.16.1\u003c/version\u003e\n            \u003c/dependency\u003e\n    \n            \u003cdependency\u003e\n                \u003cgroupId\u003ecom.pusher\u003c/groupId\u003e\n                \u003cartifactId\u003epusher-http-java\u003c/artifactId\u003e\n                \u003cversion\u003e1.0.0\u003c/version\u003e\n            \u003c/dependency\u003e\n        \u003c/dependencies\u003e\n    \n    \u003c/project\u003e\n```\n\nNow create a class, let’s say `scr/ReadLog.java`, with the code to connect to MySQL and listen for log events:\n\n``` java\n    public class ReadLog {\n        public static void main(String[] args) throws IOException {\n            BinaryLogClient client =\n              new BinaryLogClient(\"localhost\", 3306, \"\u003cMYSQL_USER\u003e\", \"\u003cMYSQL_PASSWROD\u003e\");\n    \n            client.registerEventListener(event -\u003e {\n                System.out.println(event);\n            });\n            client.connect();\n        }\n    }\n```\n\nIf you execute this class, the program will block until an event is received from the log.\n\nFor example, this is an example of the events you receive when a database is created:\n\n```\n    Event{header=EventHeaderV4{timestamp=1524607461000, eventType=ANONYMOUS_GTID, serverId=1, headerLength=19, dataLength=46, nextPosition=463, flags=0}, data=null}\n    \n    Event{header=EventHeaderV4{timestamp=1524607461000, eventType=QUERY, serverId=1, headerLength=19, dataLength=75, nextPosition=557, flags=8}, data=QueryEventData{threadId=6, executionTime=0, errorCode=0, database='test', sql='CREATE DATABASE test'}}\n```\n\nYou receive an event for the creation of the global transaction identifier (GTID) and the actual query (`CREATE DATABASE test`).\n\nHere’s an example of the events you receive when a table is created:\n\n```\n    Event{header=EventHeaderV4{timestamp=1524609716000, eventType=ANONYMOUS_GTID, serverId=1, headerLength=19, dataLength=46, nextPosition=1696, flags=0}, data=null}\n    \n    Event{header=EventHeaderV4{timestamp=1524609716000, eventType=QUERY, serverId=1, headerLength=19, dataLength=181, nextPosition=1896, flags=0}, data=QueryEventData{threadId=6, executionTime=0, errorCode=0, database='test', sql='create table products(id int(11) not null auto_increment, name varchar(50) default null, price decimal(6,2), primary key (id))'}}\n```\n\nWhen you insert a record:\n\n```\n    Event{header=EventHeaderV4{timestamp=1524609804000, eventType=ANONYMOUS_GTID, serverId=1, headerLength=19, dataLength=46, nextPosition=1961, flags=0}, data=null}\n    \n    Event{header=EventHeaderV4{timestamp=1524609804000, eventType=QUERY, serverId=1, headerLength=19, dataLength=53, nextPosition=2033, flags=8}, data=QueryEventData{threadId=6, executionTime=0, errorCode=0, database='test', sql='BEGIN'}}\n    \n    Event{header=EventHeaderV4{timestamp=1524609804000, eventType=TABLE_MAP, serverId=1, headerLength=19, dataLength=38, nextPosition=2090, flags=0}, data=TableMapEventData{tableId=109, database='test', table='products', columnTypes=3, 15, -10, columnMetadata=0, 50, 518, columnNullability={1, 2}}}\n    \n    Event{header=EventHeaderV4{timestamp=1524609804000, eventType=EXT_WRITE_ROWS, serverId=1, headerLength=19, dataLength=31, nextPosition=2140, flags=0}, data=WriteRowsEventData{tableId=109, includedColumns={0, 1, 2}, rows=[\n        [1, laptop, 999.99]\n    ]}}\n    \n    Event{header=EventHeaderV4{timestamp=1524609804000, eventType=XID, serverId=1, headerLength=19, dataLength=12, nextPosition=2171, flags=0}, data=XidEventData{xid=28}}\n```\n\nWhen you update a record:\n\n```\n    Event{header=EventHeaderV4{timestamp=1524609897000, eventType=ANONYMOUS_GTID, serverId=1, headerLength=19, dataLength=46, nextPosition=2236, flags=0}, data=null}\n    \n    Event{header=EventHeaderV4{timestamp=1524609897000, eventType=QUERY, serverId=1, headerLength=19, dataLength=53, nextPosition=2308, flags=8}, data=QueryEventData{threadId=6, executionTime=0, errorCode=0, database='test', sql='BEGIN'}}\n    \n    Event{header=EventHeaderV4{timestamp=1524609897000, eventType=TABLE_MAP, serverId=1, headerLength=19, dataLength=38, nextPosition=2365, flags=0}, data=TableMapEventData{tableId=109, database='test', table='products', columnTypes=3, 15, -10, columnMetadata=0, 50, 518, columnNullability={1, 2}}}\n    \n    Event{header=EventHeaderV4{timestamp=1524609897000, eventType=EXT_UPDATE_ROWS, serverId=1, headerLength=19, dataLength=47, nextPosition=2431, flags=0}, data=UpdateRowsEventData{tableId=109, includedColumnsBeforeUpdate={0, 1, 2}, includedColumns={0, 1, 2}, rows=[\n        {before=[1, laptop, 999.99], after=[1, laptop, 100.01]}\n    ]}}\n    \n    Event{header=EventHeaderV4{timestamp=1524609897000, eventType=XID, serverId=1, headerLength=19, dataLength=12, nextPosition=2462, flags=0}, data=XidEventData{xid=29}}\n```\n\nWhen you delete two records:\n\n```\n    Event{header=EventHeaderV4{timestamp=1524610005000, eventType=ANONYMOUS_GTID, serverId=1, headerLength=19, dataLength=46, nextPosition=2805, flags=0}, data=null}\n    \n    Event{header=EventHeaderV4{timestamp=1524610005000, eventType=QUERY, serverId=1, headerLength=19, dataLength=53, nextPosition=2877, flags=8}, data=QueryEventData{threadId=6, executionTime=0, errorCode=0, database='test', sql='BEGIN'}}\n    \n    Event{header=EventHeaderV4{timestamp=1524610005000, eventType=TABLE_MAP, serverId=1, headerLength=19, dataLength=38, nextPosition=2934, flags=0}, data=TableMapEventData{tableId=109, database='test', table='products', columnTypes=3, 15, -10, columnMetadata=0, 50, 518, columnNullability={1, 2}}}\n    \n    Event{header=EventHeaderV4{timestamp=1524610005000, eventType=EXT_DELETE_ROWS, serverId=1, headerLength=19, dataLength=49, nextPosition=3002, flags=0}, data=DeleteRowsEventData{tableId=109, includedColumns={0, 1, 2}, rows=[\n        [1, laptop, 100.01],\n        [2, laptop v2, 999.99]\n    ]}}\n    \n    Event{header=EventHeaderV4{timestamp=1524610005000, eventType=XID, serverId=1, headerLength=19, dataLength=12, nextPosition=3033, flags=0}, data=XidEventData{xid=31}}\n```\n\nThis way, you can see that data manipulation (DML) statements are mapped this way:\n\n- Insert statements have the event type `EXT_WRITE_ROWS` and you can find the information of the insertion in a class of type `WriteRowsEventData`.\n- Insert statements have the event type `EXT_UPDATE_ROWS` and you can find the information of the update in a class of type `UpdateRowsEventData`.\n- Insert statements have the event type `EXT_DELETE_ROWS` and you can find the information of the deletion in a class of type `DeleteRowsEventData`.\n\nIn addition, all of these events are preceded by a `TABLE_MAP` event with information about the table and columns that are being modified.\n\nSo we need to listen for these events.\n\nThe only problem is that if you need to keep track of the changes of many tables in a separate way, you cannot rely on the `tableId`  field because this [ID may change between executions](https://github.com/shyiko/mysql-binlog-connector-java/issues/123).\n\nYou can [change the way events are deserialized](https://github.com/shyiko/mysql-binlog-connector-java/issues/67) but maybe a simpler approach would be to keep track of the table names and IDs in a map.\n\nTaking into account this, you can modify the program in this way:\n\n``` java\n    public class ReadLog {\n        public static void main(String[] args) throws IOException {\n            final Map\u003cString, Long\u003e tableMap = new HashMap\u003cString, Long\u003e();\n            BinaryLogClient client =\n              new BinaryLogClient(\"localhost\", 3306, \"\u003cMYSQL_USER\u003e\", \"\u003cMYSQL_PASSWROD\u003e\");\n    \n            client.registerEventListener(event -\u003e {\n                EventData data = event.getData();\n    \n                if(data instanceof TableMapEventData) {\n                    TableMapEventData tableData = (TableMapEventData)data;\n                    tableMap.put(tableData.getTable(), tableData.getTableId());\n                }\n            });\n            client.connect();\n        }\n    }\n```\n\nNotice how the program checks the subtype of `EventData` to get the information.\n\nNow, let’s add the Pusher object with the information you got when you created the app:\n\n``` java\n    public class ReadLog {\n        public static void main(String[] args) throws IOException {\n            final Map\u003cString, Long\u003e tableMap = new HashMap\u003cString, Long\u003e();\n            \n            Pusher pusher = \n                new Pusher(\"\u003cPUSHER_APP_ID\u003e\", \"\u003cPUSHER_APP_KEY\u003e\", \"\u003cPUSHER_APP_SECRET\u003e\");\n            pusher.setCluster(\"\u003cPUSHER_APP_CLUSTER\u003e\");\n            pusher.setEncrypted(true);\n            \n            // ...\n        }\n    }\n```\n\nAnd you can check if the event is an insert, update or delete, you can check if it corresponds to the `product` table, extract the product information and publish it as a map to a `product` channel.\n\nHere’s the code for `INSERT` events:\n\n``` java\n    public class ReadLog {\n        public static void main(String[] args) throws IOException {\n            // ...\n    \n            client.registerEventListener(event -\u003e {\n                EventData data = event.getData();\n    \n                if(data instanceof TableMapEventData) {\n                    // ...\n                } else if(data instanceof WriteRowsEventData) {\n                    WriteRowsEventData eventData = (WriteRowsEventData)data;\n                    if(eventData.getTableId() == tableMap.get(PRODUCT_TABLE_NAME)) {\n                        for(Object[] product: eventData.getRows()) {\n                            pusher.trigger(\n                               PRODUCT_TABLE_NAME, \"insert\", getProductMap(product)\n                            );\n                        }\n                    }\n                }\n            });\n            client.connect();\n        }\n    \n        static Map\u003cString, String\u003e getProductMap(Object[] product) {\n            Map\u003cString, String\u003e map = new HashMap\u003c\u003e();\n            map.put(\"id\", java.lang.String.valueOf(product[0]));\n            map.put(\"name\", java.lang.String.valueOf(product[1]));\n            map.put(\"price\", java.lang.String.valueOf(product[2]));\n    \n            return map;\n        }\n    }\n```\n\nFor the update event, only the `after` data is needed. The `before` and `after` fields are formatted as a map entry, where `after` is the value part of this structure:\n\n``` java\n    public class ReadLog {\n        public static void main(String[] args) throws IOException {\n            // ...\n    \n            client.registerEventListener(event -\u003e {\n                EventData data = event.getData();\n    \n                if(data instanceof TableMapEventData) {\n                    // ...\n                } else if(data instanceof WriteRowsEventData) {\n                    // ...\n                } else if(data instanceof UpdateRowsEventData) {\n                    UpdateRowsEventData eventData = (UpdateRowsEventData)data;\n                    if(eventData.getTableId() == tableMap.get(PRODUCT_TABLE_NAME)) {\n                        for(Map.Entry\u003cSerializable[], Serializable[]\u003e row : \n                                                          eventData.getRows()) {\n                            pusher.trigger(\n                              PRODUCT_TABLE_NAME, \"update\", getProductMap(row.getValue())\n                            );\n                        }\n                    }\n                }\n            });\n            client.connect();\n        }\n    \n        // ...\n    }\n```\n\nFor the delete event, you’ll only need the ID of the deleted record:\n\n``` java\n    public class ReadLog {\n        public static void main(String[] args) throws IOException {\n            // ...\n    \n            client.registerEventListener(event -\u003e {\n                EventData data = event.getData();\n    \n                if(data instanceof TableMapEventData) {\n                    // ...\n                } else if(data instanceof WriteRowsEventData) {\n                    // ...\n                } else if(data instanceof UpdateRowsEventData) {\n                    // ...\n                } else if(data instanceof DeleteRowsEventData) {\n                    DeleteRowsEventData eventData = (DeleteRowsEventData)data;\n                    if(eventData.getTableId() == tableMap.get(PRODUCT_TABLE_NAME)) {\n                        for(Object[] product: eventData.getRows()) {\n                            pusher.trigger(PRODUCT_TABLE_NAME, \"delete\", product[0]);\n                        }\n                    }\n                }\n            });\n            client.connect();\n        }\n    \n        // ...\n    }\n```\n\nNow, any application listening for the `product` channel will get the information about the database changes.\n\nLet’s build a React client to show this.\n\n## Building the React application\n\nLet’s use [create-react-app](https://github.com/facebook/create-react-app) to bootstrap a React app.\n\nExecute the following command in a terminal window to create a new app:\n\n```\n    npx create-react-app my-app\n```\n\nNow go into the app directory and install the Pusher dependency with `npm`:\n\n```\n    cd my-app\n    npm install --save pusher-js\n```\n\nOpen the file `src/App.css` and add the following CSS styles:\n\n``` css\n    .table {\n      border: 2px solid #FFFFFF;\n      width: 100%;\n      text-align: center;\n      border-collapse: collapse;\n    }\n    .table td, .table th {\n      border: 1px solid #FFFFFF;\n      padding: 3px 4px;\n    }\n    .table tbody td {\n      font-size: 13px;\n    }\n    .table thead {\n      background: #FFFFFF;\n      border-bottom: 4px solid #333333;\n    }\n    .table thead th {\n      font-size: 15px;\n      font-weight: bold;\n      color: #333333;\n      text-align: center;\n      border-left: 2px solid #333333;\n    }\n    .table thead th:first-child {\n      border-left: none;\n    }\n```\n\nNow let’s create a new component, `src/Table.js`, to show the product information (received as a property) in a table:\n\n``` javascript\n    import React, { Component } from 'react';\n    import './App.css';\n    \n    export default class Table extends Component {\n        render() {\n          const rowsMapped =this.props.rows.map(row =\u003e (\n                \u003ctr key={row.id}\u003e\n                  \u003ctd\u003e{row.id}\u003c/td\u003e\n                  \u003ctd\u003e{row.name}\u003c/td\u003e\n                   \u003ctd\u003e{row.price}\u003c/td\u003e\n                \u003c/tr\u003e\n              ));\n          \n          return (\n            \u003ctable className=\"table\"\u003e\n              \u003cthead\u003e\n                \u003ctr\u003e\n                  \u003cth\u003eID\u003c/th\u003e\n                  \u003cth\u003eName\u003c/th\u003e\n                  \u003cth\u003ePrice\u003c/th\u003e\n                \u003c/tr\u003e\n              \u003c/thead\u003e\n              \u003ctbody\u003e\n                {rowsMapped}\n              \u003c/tbody\u003e\n            \u003c/table\u003e\n          );\n        }\n    }\n```\n\nNow modify the file `src/App.js` to import this component and Pusher:\n\n``` javascript\n    import React, { Component } from 'react';\n    import logo from './logo.svg';\n    import './App.css';\n    \n    import Table from './Table.js';\n    \n    import Pusher from 'pusher-js';\n    \n    class App extends Component {\n      // ...\n    }\n```\n\nLet’s have the array of rows as the state of this component, and while we are at the constructor, let’s bind the functions we are going to use to insert, update and delete items:\n\n``` javascript\n    // ...\n    \n    class App extends Component {\n      constructor(props) {\n        super(props);\n        this.state = {rows: []};\n        \n        this.insert = this.insert.bind(this);\n        this.update = this.update.bind(this);\n        this.delete = this.delete.bind(this);\n      }\n    }\n```\n\nIn the `componentDidMount` method, let’s configure the Pusher object subscribe to the channel to get the events:\n\n``` javascript\n    // ...\n    \n    class App extends Component {\n      constructor(props) {\n        // ...\n      }\n      \n      componentDidMount() {\n        this.pusher = new Pusher('\u003cPUSHER_APP_KEY\u003e', {\n              cluster: '\u003cPUSHER_APP_CLUSTER\u003e',\n          encrypted: true,\n        });\n        this.channel = this.pusher.subscribe('products');\n            \n        this.channel.bind('insert', this.insert);\n        this.channel.bind('update', this.update);\n        this.channel.bind('delete', this.delete);\n      }\n    }\n```\n\nThese are the functions to insert, update and delete items from `this.state.rows`:\n\n``` javascript\n    // ...\n    \n    class App extends Component {\n      // ...\n      insert(data) {\n        this.setState(prevState =\u003e ({\n          rows: [ data, ...prevState.rows ]\n        }));\n      }\n    \n      update(data) {\n        this.setState(prevState =\u003e ({\n          rows: prevState.rows.map(el =\u003e \n                  el.id === data.id ? data : el\n          )\n        }));\n      }\n    \n      delete(id) {\n        this.setState(prevState =\u003e ({\n          rows: prevState.rows.filter(el =\u003e el.id !== String(id))\n        }));\n      }\n    }\n```\n\nFinally, the `render` function will look like this:\n\n``` javascript\n    // ...\n    \n    class App extends Component {\n      // ...\n      render() {\n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003cheader className=\"App-header\"\u003e\n              \u003cimg src={logo} className=\"App-logo\" alt=\"logo\" /\u003e\n              \u003ch1 className=\"App-title\"\u003eWelcome to React\u003c/h1\u003e\n            \u003c/header\u003e\n            \u003cTable rows={this.state.rows} /\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n```\n\nAnd that’s it.\n\nLet’s test the application.\n\n## Testing the application\n\nMake sure the MySQL server is running with replication enabled.\n\nIf you’re working with an IDE, run the class `ReadLog`.\n\nOtherwise, you can add this property to the `pom.xml`file:\n\n``` xml\n    \u003cproperties\u003e\n      ...\n      \u003cexec.mainClass\u003eReadLog\u003c/exec.mainClass\u003e\n    \u003c/properties\u003e\n```\n\nAnd execute this command to run the app:\n\n```\n    mvn exec:java\n```\n\nFor the React app, inside the app directory, execute:\n\n```\n    npm start\n```\n\nA browser window will open http://localhost:3000/, and from there, you can connect to the database with the `mysql` client and insert, update or delete records in the `product` table:\n\n![java-mysql-react-demo](//images.ctfassets.net/1es3ne0caaid/71VsGknSCI0QOgE4CCkEmy/beea6a69b0be15e1b421f7fda9af66c9/java-mysql-react-demo.gif)\n\n## Conclusion\n\nIn this tutorial, you have learned how to turn MySQL into a realtime database by using the replication log to publish the changes made to a database using Pusher.\n\nYou used [mysql-binlog-connector-java](https://github.com/shyiko/mysql-binlog-connector-java) to get the insert, update and delete events from the log. However, at the time of this writing, the current version of MySQL (MySQL 8.0.11) is not yet supported.\n\nBut there are other options. As mentioned before, in this [wiki](https://github.com/wushujames/mysql-cdc-projects/wiki) you can find more libraries to work with MySQL binary log.\n\nIn this [blog post](http://shzhangji.com/blog/2017/08/12/extract-data-from-mysql-with-binlog-and-canal/), you can find another way to extract data from MySQL using Alibaba’s open sourced [Canal](https://github.com/alibaba/canal) project.\n\nThe applications that this tutorial present are simple but they show how this change data capture using transaction logs work.\n\nThey can be extended in many ways:\n\n- Support for more tables\n- Detect when the Java application goes down and have to be restarted\n- Read from the log to start at a given position\n- Change the React implementation to support a bigger table in an efficient way\n\nRemember that all the source code for this applications is available on [Github](https://github.com/eh3rrera/realtime-mysql-pusher).","metaTitle":"Getting data in realtime from MySQL with Java","metaDescription":"This tutorial will guide you through enabling MySQL replication logging, in order to display database events in the browser, on a React-based dashboard."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1RAwp0Srr6qKOayCc8OQAa","type":"Entry","createdAt":"2018-04-30T12:48:42.775Z","updatedAt":"2018-04-30T16:41:03.503Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime Instagram clone — Part 3: Realtime feed updates with Pusher and desktop notifications","url":"instagram-clone-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/instagram-clone","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}}],"reviewDate":"2018-04-27","description":"This four-part series takes you through building an Instagram clone using Node and React. In part three, implement realtime feed updates with Pusher, and create desktop notifications.","prerequisite":"You should have completed the previous parts of the series.","content":"*This is part 3 of a 4 part tutorial. You can find part 1 [here](https://pusher.com/tutorials/instagram-clone-part-1), part 2 [here](https://pusher.com/tutorials/instagram-clone-part-2) and part 4 [here](https://pusher.com/tutorials/instagram-clone-part-4).*\n\nIn the [last part](https://pusher.com/tutorials/instagram-clone-part-2) of this series, we looked at how to connect the GraphQL server to our React Instagram clone allowing for dynamic posts to be viewed on the homepage. Now, to give users a seamless and fluid experience when interacting with the application, let’s add realtime functionality to it. This will update feeds as new posts are created and a notification system will also be put in place to allow for this. \n\nTo make this possible, [Pusher](https://pusher.com) is going to be integrated into the application to make it easier to bring realtime functionality without worrying about infrastructure.\n\n## Prerequisites\n- Should have read previous parts of the series\n- Basic knowledge of JavaScript\n- Node installed on your machine\n- NPM installed on your machine\n\n\n## Configure Pusher on the server\n\nTo get started with Pusher, create a [developer account](https://pusher.com/signup). Once you do this, [create your application](https://dashboard.pusher.com/#wizard-modal) and get your application keys. \n\n\n\u003e Note your application keys as you will need them later on in the article\n\n### Install the Node modules\nOnce you do that, you will need to install the Node modules needed for the application to work in the `server` directory of the application:\n\n```\n    npm install pusher connect-multiparty body-parser --save\n```\n\n- `pusher` to integrate realtime functionality\n- `body-parser` and `connect-multiparty` to handle incoming requests\n\n### Import the Node modules\nNow that the necessary modules have been installed, the next thing is to import them for use in the `server/server.js` file. Edit it to look like this:\n\n``` javascript\n    // server/server.js\n    [...]\n    \n    let Pusher = require(\"pusher\");\n    let bodyParser = require(\"body-parser\");\n    let Multipart = require(\"connect-multiparty\");\n    \n    [...]\n```\n\n### Configure the Pusher client\nYou will also need to configure your Pusher client to allow you to trigger events. To do this, add the following to the `server.js` file:\n\n``` javascript\n    // server/server.js\n    [...]\n    \n    let pusher = new Pusher({\n      appId: 'PUSHER_APP_ID',\n      key: 'PUSHER_APP_KEY',\n      secret: 'PUSHER_APP_SECRET',\n      cluster: 'PUSHER_CLUSTER',\n      encrypted: true\n    });\n    \n    // create express app\n    [...]\n```\n\n### Creating the endpoint for storing new posts\nTo simulate the effect of creating a new post, a new endpoint is added to the application as follows:\n\n``` javascript\n    // server/server.js\n    \n    // add Middleware\n    let multipartMiddleware = new Multipart();\n    \n    // trigger add a new post \n    app.post('/newpost', multipartMiddleware, (req,res) =\u003e {\n      // create a sample post\n      let post = {\n        user : {\n          nickname : req.body.name,\n          avatar : req.body.avatar\n        },\n        image : req.body.image,\n        caption : req.body.caption\n      }\n      \n      // trigger pusher event \n      pusher.trigger(\"posts-channel\", \"new-post\", { \n        post \n      });\n    \n      return res.json({status : \"Post created\"});\n    });\n    \n    // set application port\n    [...]\n```\n\nWhen a post request is made to the `/post` route, the data submitted is then used to construct a new post and then the  `new-post` event is triggered in the `post-channel` and a response is sent to the client making the request.\n\n## Configure Pusher on the client\n\nNow that the server has been configured, the next thing that needs to be done is to get Pusher working in our React application. To do this, let’s install the JavaScript Pusher module in the root of the `instagram-clone` directory:\n\n```\n    npm install pusher-js\n```\n\n### Set up the Pusher client\nNow that the module is installed, the Pusher module needs to be used. Edit the `src/App.js` like this:\n\n``` javascript\n    // src/App.js\n    \n    import React, {Component} from 'react';\n    [...]\n    // import pusher module\n    import Pusher from 'pusher-js';\n    \n    // set up graphql client\n    [...]\n    \n    // create component\n    class App extends Component{\n      constructor(){\n        super();\n        // connect to pusher\n        this.pusher = new Pusher(\"PUSHER_APP_KEY\", {\n         cluster: 'eu',\n         encrypted: true\n        });\n      }\n    \n      render(){\n        return (\n          \u003cApolloProvider client={client}\u003e\n            \u003cdiv className=\"App\"\u003e\n              \u003cHeader /\u003e\n              \u003csection className=\"App-main\"\u003e\n                {/* pass the pusher object and apollo to the posts component */}\n                \u003cPosts pusher={this.pusher} apollo_client={client}/\u003e\n              \u003c/section\u003e\n            \u003c/div\u003e\n          \u003c/ApolloProvider\u003e\n        );\n      }\n    }\n    \n    export default App;\n```\n\nNotice that in the snippet above, `pusher` and `apollo_client` are passed as properties for the `Posts` component.\n\nLet’s examine the Posts component.\n\n``` javascript\n    // src/components/Posts/index.js\n    \n    import React, {Component} from \"react\";\n    import \"./Posts.css\";\n    import gql from \"graphql-tag\";\n    import Post from \"../Post\";\n    \n    class Posts extends Component{\n      constructor(){\n        super();\n        this.state = {\n          posts : []\n        }\n      }\n      [...]\n```\n\nIn the constructor of the Posts component an array of posts is added to the state of the component.\n\nThen, we use the lifecycle function `componentDidMount()` to make a query to fetch the existing posts from the server and then set the posts.\n\n``` javascript\n    // src/components/Posts/index.js\n    [...]\n    \n    componentDidMount(){\n        // fetch the initial posts \n        this.props.apollo_client\n          .query({ \n            query:gql`\n              {\n                posts(user_id: \"a\"){\n                  id\n                  user{\n                    nickname\n                    avatar\n                  }\n                  image\n                  caption\n                }\n              } \n            `})\n          .then(response =\u003e {\n            this.setState({ posts: response.data.posts});\n          });\n          [...]\n```\n\n### Subscribe to realtime updates\nNext thing is to subscribe the component to the `posts-channel` and then listen for `new-post` events:\n\n``` javascript\n    // src/components/Posts/index.js\n          [...]\n          //  subscribe to posts channel\n        this.posts_channel = this.props.pusher.subscribe('posts-channel');\n    \n        // listen for a new post\n        this.posts_channel.bind(\"new-post\", data =\u003e {\n            this.setState({ posts: this.state.posts.concat(data.post) });\n          }, this);\n      }\n      [...]\n```\n\n### Displaying posts\nAfterwards, use the `render()` function to map the `posts` to the `Post` component like this:\n\n``` javascript\n    // src/components/Posts/index.js\n      [...]\n       render(){\n        return (\n          \u003cdiv className=\"Posts\"\u003e\n            {this.state.posts.map(post =\u003e \u003cPost nickname={post.user.nickname} avatar={post.user.avatar} image={post.image} caption={post.caption} key={post.id}/\u003e)}\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default Posts;\n```\n\nNow, you can go ahead and start your backend server `node server` and your frontend server `npm start`. When you navigate to `locahost:3000/` you get the following:\n\n![instagram-clone-post-creation-feed](//images.ctfassets.net/1es3ne0caaid/1oaET2U8Hyqc066Auq2Gu8/235f7e3dafcf6c1dab02e42485cae6b9/instagram-clone-post-creation-feed.gif)\n\n## Enable desktop notifications for new posts\n\nNow, sometimes users have tabs of applications open but aren’t using them. I’m sure as you’re reading this, you likely have more than one tab open in your web browser - if you’re special, you have \u003e 10. To keep the users engaged, the concepts of notifications was introduced. Developers can now send messages to users based on interaction with the application. Let’s leverage this to keep users notified when a new post has been created. \n\n### Checking if notifications are enabled in the browser\nSince this feature is fairly new, not all users of your application may have the notification feature on their browser. You need to make a check to see if notifications are enabled. To do this, tweak the `src/App.js` as follows:\n\n``` javascript\n    // src/App.js\n    \n    class App extends Component{\n      [...]\n    \n      componentDidMount(){\n        if ('actions' in Notification.prototype) {\n          alert('You can enjoy the notification feature');\n        } else {\n          alert('Sorry notifications are NOT supported on your browser');\n        }\n      }\n      \n      [...]\n    }\n    export default App;\n```\n\n### Requesting permissions\nTo get started, the first thing you will need to do is to get permission from the user to display notifications. This is put in place so that developers don’t misuse the privilege and begin to spam their users. Edit the `src/components/Posts/index.js` file as follows :\n\n``` javascript\n    // src/components/Posts/index.js\n    \n    [...]\n    \n    class Posts extends Components{\n      [...]\n      \n      componentDidMount(){\n          // request permission\n          Notification.requestPermission();\n        [...]\n```\n\nThe next thing that needs to be done is to now display the notification to the user when an event is met. This is done by tweaking the `this.posts_channel.bind()` function :\n\n``` javascript\n    // src/components/Posts/index.js\n        \n        [...]\n          //  subscribe to posts channel\n          this.posts_channel = this.props.pusher.subscribe(\"posts-channel\");\n          \n          this.posts_channel.bind(\"new-post\", data =\u003e {\n            // update states\n            this.setState({ posts: this.state.posts.concat(data.post) });\n            \n            // check if notifcations are permitted\n            if(Notification.permission === 'granted' ){\n              try{\n                // notify user of new post\n                new Notification('Pusher Instagram Clone',{ body: `New post from ${data.post.user.nickname}`});\n              }catch(e){\n                console.log('Error displaying notification');\n              }\n            }\n          }, this);\n        }\n        \n        render() {\n        return (\n          \u003cdiv\u003e\n            \u003cdiv className=\"Posts\"\u003e\n              {this.state.posts\n                .slice(0)\n                .reverse()\n                .map(post =\u003e (\n                  \u003cPost\n                    nickname={post.user.nickname}\n                    avatar={post.user.avatar}\n                    image={post.image}\n                    caption={post.caption}\n                    key={post.id}\n                  /\u003e\n                ))}\n            \u003c/div\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default Posts\n```\n\nNow, when you reload your application and head over to `localhost:3000/` and you get this: \n\n![instagram-clone-permission-browser](//images.ctfassets.net/1es3ne0caaid/luRPg9gZMs0OMI0CWYgmA/e41aad138d992acd5f0a3280d6151a71/instagram-clone-permission-browser.png)\n\n## Interacting with notifications\n\nTo add extra functionality, the notification could further be tweaked to allow users to interact with them. To do this, edit the `Notification` object like this:\n\n``` javascript\n    // src/components/Posts/index.js\n    \n    // check for notifications \n    if(Notification.permission === 'granted' ){\n      try{\n        // notify user of new post\n        let notification = new Notification(\n          'Pusher Instagram Clone',\n          { \n            body: `New post from ${data.post.user.nickname}`,\n            icon: 'https://img.stackshare.io/service/115/Pusher_logo.png',\n            image: `${data.post.image}`,\n          }\n        );\n        // open the website when the notification is clicked\n        notification.onclick = function(event){\n          window.open('http://localhost:3000','_blank');\n        }\n      }catch(e){\n        console.log('Error displaying notification');\n      }\n    }\n```\n\nWhen another user creates a new post, you then get a display that looks like this: \n\n![instagram-clone-notification](//images.ctfassets.net/1es3ne0caaid/t0FTrRsvE4oKC0QqEUsSQ/721ee430e7873b8a3002dab87f60b151/instagram-clone-notification.png)\n\nWhen the user clicks on the notification, they are directed to view the full post.\n\n## Conclusion\n\nIn this part of the series, we looked at how to incorporate realtime functionality into the `instagram-clone` application and also saw how to notify users when someone creates new posts using desktop notifications. In the [next](https://pusher.com/tutorials/instagram-clone-part-4) part of the series, we will see how to take our application offline using service workers. Here’s a link to the full [Github](https://github.com/christiannwamba/instagram-clone) repository if interested.","metaTitle":"Build an Instagram clone — Part 3: Feeds and notifications","metaDescription":"Use React, Node and Pusher to build an Instagram clone. In part three,implement realtime feed updates with Pusher, and create desktop notifications."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6fbjFSTGH6ek44G8w2SGQc","type":"Entry","createdAt":"2018-04-30T12:47:46.587Z","updatedAt":"2018-04-30T16:39:39.372Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime Instagram clone — Part 1: Setting up the project and creating the UI","url":"instagram-clone-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/instagram-clone","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}}],"reviewDate":"2018-04-27","description":"This four-part series takes you through building an Instagram clone using Node and React. In part one, set up your project and create your UI.","prerequisite":"You should have Node and NPM installed on your machine.","content":"*This is part 1 of a 4 part tutorial. You can find part 2 [here](https://pusher.com/tutorials/instagram-clone-part-2), part 3 [here](https://pusher.com/tutorials/instagram-clone-part-3) and part 4 [here](https://pusher.com/tutorials/instagram-clone-part-4).*\n\nEver used the web version of [Instagram](https://instagram.com)? Ever wondered how they make it all work? In this series, we are going to look in depth at how to build an Instagram clone using React. \n\nGet ready because this is going to be a fun ride!\n\n\n\u003e This article is meant for beginners, so feel free to follow through if you’re getting started with React\n\n\n## What is React? \n\nReact is an open-source frontend JavaScript framework used for building incredible, reusable user interfaces. Find out more about React, you can head over [here.](https://github.com/facebook/react)\n\n\n## Prerequisites\n\nBefore we can set up a React project, we need to have the following :\n\n\n- [Node](https://nodejs.org) installed on our machines\n- Node Package Manager ([NPM](https://www.npmjs.com/)) installed on our machines\n\nTo confirm your Node/NPM installation, run the following command on your terminal :\n\n```\n    node --version\n    npm --version\n```\n\nIf you get version numbers as results, then you’re good to go. If not, head over to the Node installation page and/or NPM installation page to get them set up.\n\n## Setting up a React project\n\n**Installing** **React** \nReact is available as a node package and to get React installed on your machine, you need to run the command :\n\n```\n    npm install -g create-react-app\n```\n\n\u003e 💡 You need to have Node version \u003e= 6 to install React\n\nThis globally installs the package for you to use as you please.\n\n### Creating our React application\nTo create our application, we use the `create-react-app`  we installed by running the the command :\n\n```\n    create-react-app instagram-clone\n```\n\nThis helps set up the development environment that gets you started with creating React applications.\n\n### Taking our application for a spin\nNow to confirm and test the creation of our new application, we change directory to our `instagram-clone` directory and then start our development server by running :\n\n```\n    cd instagram-clone\n    npm start\n```\n\nYour development server should start and you should get a page that looks like this:\n\n![instagram-clone-react-welcome](//images.ctfassets.net/1es3ne0caaid/6EbSE9MLkcGqsIiIS2Ca2e/c3c867def25a7bde30ec765b19110a3d/instagram-clone-react-welcome.png)\n\n\n## Creating UI components\n\nNow that we are ready to start developing react applications, the next thing we are going to do is design the components we are going to need in our application.\n\n### What are components\nIf you’re new to React, you may be wondering what components are. Wonder no more. Components in React give you the ability to build your UI in bite-sized bits. Instead of you building the whole interface in a single file, you break it down to independent and reusable pieces which you then put together to have your application as a whole. \n\n### Deciding what components we need\n\n![instagram-clone-skeleton](//images.ctfassets.net/1es3ne0caaid/7CRv9L4li0aAowaMSsOc06/c183f7e68f20b1d72c37635158e67cf2/instagram-clone-skeleton.png)\n\n\nNow, let’s think about the components needed. For starters, we can break down the components into two: \n\n\n- Header component\n- Post component\n\nThe Header component will contain the instagram logo and brand name while the Post component will contain the contain image and caption a user has posted.\n\n### Header component\nNow we create a `components` folder in the `src/`  directory of our application. \n\n```\n    cd src\n    mkdir components \u0026\u0026 cd components\n```\nWe then create a folder for our Header component: \n\n```\n    mkdir Header \u0026\u0026 cd Header\n```\nNow that we have our Header component, the  next thing we want to do is to create our `index.js` file in the Header directory:\n\n```\n    touch index.js\n```\n\nOpen `index.js` and past in the following:\n\n``` javascript\n    // src/components/Header/index.js\n    import React from \"react\";\n    \n    class Header extends React.Component{\n        render(){\n            return (\n               \u003cnav className=\"Nav\"\u003e\n                 \u003cdiv className=\"Nav-menus\"\u003e\n                   \u003cdiv className=\"Nav-brand\"\u003e\n                     \u003ca className=\"Nav-brand-logo\" href=\"/\"\u003e\n                       Instagram\n                     \u003c/a\u003e\n                   \u003c/div\u003e\n                 \u003c/div\u003e\n               \u003c/nav\u003e\n           );\n        }   \n    }\n    export default Header;\n```\n\nIn React we describe our component with JSX. JSX looks similar to pure HTML but there are some differences between them. \n\n\n\u003e 💡 Notice how the class names are being added in JSX and compare it to regular HTML\n\n### Styling our Header component\nNow, we are going to add the necessary style that makes our Header component look pleasing to the eye. To do this, we create a `Header.css` file in our `src/components/Header` directory. Open the `Header.css` and paste the following:\n\n``` css\n    /* src/components/Header/Header.css */\n    i.Nav {\n      background-color: #fff;\n      border-bottom: 1px solid rgba(0, 0, 0, 0.0975);\n      position: fixed;\n      top: 0;\n      width: 100%;\n      z-index: 2;\n      -webkit-transition: height 0.2s ease-in-out;\n      transition: height 0.2s ease-in-out;\n      height: 77px;\n    }\n    .Nav-menus {\n      display: flex;\n      flex-direction: row;\n      height: 77px;\n      width: 70%;\n      margin: 0 auto;\n      padding: 26px 40px;\n    }\n    .Nav-brand-logo {\n      display: block;\n      background-position: -176px 0px;\n      background-image: url(../../sprite.png);\n      background-size: 405px 379px;\n      background-repeat: no-repeat;\n      height: 35px;\n      width: 176px;\n      text-indent: -1000%\n    }\n```\n\n\u003e 💡 You need to add the `[sprite.png](https://github.com/christiannwamba/instagram-clone/blob/master/src/sprite.png)` [](https://github.com/christiannwamba/instagram-clone/blob/master/src/sprite.png)in the `src` directory of the application. Download it [here](https://github.com/christiannwamba/instagram-clone/blob/master/src/sprite.png)\n\n### Linking the style in our component\nWe head back to our Header component and add the following :\n\n``` javascript\n    // src/components/Header/index.js\n    \n    import \"./Header.css\";\n    \n    class Header extends React.Component{\n      // ....\n    }\n    export default Header;\n```\n\nOnce we link the style sheet as we did above, we are good to go. \n\n\n### Rendering the Header component\nNow that we have successfully built our Header component, the next thing we want to do is to render it. To that, we need to tweak our `src/App.js` file. \n\n``` javascript\n    // src.App.js\n    \n    import React, { Component } from 'react';\n    import './App.css';\n    import Header from './components/Header';\n    class App extends Component {\n      render() {\n        return (\n          \u003cHeader /\u003e\n        );\n      }\n    }\n    export default App;\n```   \n\n\nOnce we do this, we have our **Header** component added and the app looks like this: \n\n![instagram-clone-with-header](//images.ctfassets.net/1es3ne0caaid/jiMBc8jS00Se8EQy2mCSw/a6093e4de5a90972005fb5580d396dbb/instagram-clone-with-header.png)\n\n\n### Post component\nTo create a **Post** component, we create a folder called `Post` in the `src/components` directory,\n\n```\n    cd src/components\n    mkdir Post \u0026\u0026 cd POst\n```\n\nWe then create the `index.js` file. Open it and paste in the following:\n\n``` javascript\n    // src/components/Post/index.js\n    import React, { Component } from \"react\";\n    class Post extends Component {\n      render() {\n        return \u003carticle className=\"Post\" ref=\"Post\"\u003e\n            \u003cheader\u003e\n              \u003cdiv className=\"Post-user\"\u003e\n                \u003cdiv className=\"Post-user-avatar\"\u003e\n                  \u003cimg src=\"https://www.laravelnigeria.com/img/chris.jpg\" alt=\"Chris\" /\u003e\n                \u003c/div\u003e\n                \u003cdiv className=\"Post-user-nickname\"\u003e\n                  \u003cspan\u003eChris\u003c/span\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/header\u003e\n            \u003cdiv className=\"Post-image\"\u003e\n              \u003cdiv className=\"Post-image-bg\"\u003e\n                \u003cimg alt=\"Icon Living\" src=\"https://pbs.twimg.com/media/DOXI0IEXkAAkokm.jpg\" /\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv className=\"Post-caption\"\u003e\n              \u003cstrong\u003eChris\u003c/strong\u003e Moving the community!\n            \u003c/div\u003e\n          \u003c/article\u003e;\n        }\n    }\n    export default Post;\n```\n\nHere we see the structure of the posts outlined. We have the:\n\n- Post Header - shows the users avatar and name \n- Post Content - displays the post content\n- Post Caption - displays the username and post caption\n\n### Styling our Post component\nWe create a `Post.css` file in the `src/components/Post` directory. Open Post.css and paste in the following:\n\n``` css\n    /* src/components/Post/Post.css */\n    .Post {\n      border-radius: 3px;\n      border: 1px solid #e6e6e6;\n      background-color: #fff;\n      margin-bottom: 60px;\n      margin-left : 20%;\n      margin-right: 20%;\n    }\n    .Post-user {\n      display: flex;\n      padding: 16px;\n      align-items: center;\n    }\n    .Post-user-avatar {\n      width: 30px;\n      height: 30px;\n    }\n    .Post-user-avatar img {\n      width: 100%;\n      height: 100%;\n      border-radius: 50%;\n    }\n    .Post-user-nickname {\n      margin-left: 12px;\n      font-family: 'PT Sans', sans-serif;\n      font-weight: bold;\n    }\n    .Post-image-bg {\n      background-color: #efefef;\n    }\n    .Post-image img {\n      display: block;\n      width: 100%;\n    }\n    .Post-caption {\n      padding: 16px 16px;\n    }\n    .Post-caption strong {\n      font-family: 'PT Sans', sans-serif;\n      font-weight: bold;\n    }\n    .vjs-fade-out {\n      display: none;\n      visibility: hidden;\n      opacity: 0;\n    }\n```\n\n### Linking the style in our component\nWe head back to our Post component and add the following :\n\n``` javascript\n    // src/components/Post/index.js\n    \n    import \"./Post.css\";\n    \n    class Post extends React.Component{\n      // ....\n    }\n    export default Post;\n```\n\n### Rendering the Post component\nNow we go ahead to render the Post component itself. We edit our `App.js` file to make it look like this :\n\n``` javascript\n    // src/App.js\n    import Post from './components/Post';\n    \n    class App extends Component {\n      render() {\n        return (\n          \u003cdiv\u003e\n            \u003cHeader /\u003e\n            \u003cdiv\u003e\n              \u003cPost /\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    export default App;\n```\n\nNow, when we go back to our page, we have this : \n\n![instagram-clone-with-post](//images.ctfassets.net/1es3ne0caaid/5HMwvynW5qW0aOUsUkw2UY/601b6e5a07b43c00f30e94aa2107c7e4/instagram-clone-with-post.png)\n\n\n\n## Rendering components with mock data\n\nYou already noticed that in our Post component had a lot of static data - every time you reload you only see the same post. In a real-life application, what we want is to have our list of dynamic posts when our application is accessed. To do this, we are going to tweak our Post component.\n \n### Using props in our Post component\nIn React, `props` as the name suggests, are the properties of a particular component. They help in making sure that our components are reusable. Update your Post component to look like this :\n\n``` javascript\n    // src/components/Post/index.js\n    import React, { Component } from \"react\";\n    \n    import \"./Post.css\";\n    \n    class Post extends Component {\n        constructor(props){\n            super(props);\n        }\n      render() {\n        const nickname = this.props.nickname;\n        const avatar = this.props.avatar;\n        const image = this.props.image;\n        const caption = this.props.caption;\n        \n        return (\n          \u003carticle className=\"Post\" ref=\"Post\"\u003e\n            ...\n                \u003cimg src={avatar} alt={nickname} /\u003e\n            ... \n                  \u003cspan\u003e{nickname}\u003c/span\u003e\n            ...\n                \u003cimg alt={caption} src={image} /\u003e\n            ...\n              \u003cstrong\u003e{nickname}\u003c/strong\u003e{caption}\n            ...\n          \u003c/article\u003e\n        );\n      }\n    }\n    export default Post;\n```\n\nWe accept the props from when the Post itself is being rendered and then display the results to the users in form of posts.\n\nNow, the `src/App,js` is also tweaked to pass the data to the component like this:\n\n``` javascript\n    // src/App.js\n    \n    import React, { Component } from 'react';\n    import './App.css';\n    import Header from './components/Header';\n    import Post from './components/Post';\n    \n    class App extends Component {\n      render() {\n        return \u003cdiv className=\"App\"\u003e\n            \u003cHeader /\u003e\n            \u003csection className=\"App-main\"\u003e\n              \u003cPost nickname=\"Chris\" avatar=\"https://www.laravelnigeria.com/img/chris.jpg\" caption=\"Moving the community!\" image=\"https://pbs.twimg.com/media/DOXI0IEXkAAkokm.jpg\" /\u003e\n              \u003cPost nickname=\"OG\" avatar=\"https://www.laravelnigeria.com/img/chris.jpg\" caption=\"Holding a mic\" image=\"https://pbs.twimg.com/media/DOXI0IEXkAAkokm.jpg\" /\u003e\n              \n              {/* more posts */}\n            \u003c/section\u003e\n          \u003c/div\u003e;\n      }\n    }\n    \n    export default App;\n```\n\nNow, when you visit the application at `localhost:3000`, you get a page that looks like this:\n\n![instagram-clone-part-1-complete](//images.ctfassets.net/1es3ne0caaid/513bWOORAIk4k6Eo6Mgcki/bffd3206773e6ae2f91c457cf515b3fe/instagram-clone-part-1-complete.png)\n\n\n\n## Conclusion \n\nIn this chapter of the series, we looked at how to get set up with React development and creating the UI for an Instagram clone application. In the [next chapter](https://pusher.com/tutorials/instagram-clone-part-2), we will take a look at how to connect the UI to Graph QL data. Here’s a link to the full [Github](https://github.com/christiannwamba/instagram-clone) repository.","metaTitle":"Build an Instagram clone with React — Part 1: Create the UI","metaDescription":"Use React, Node and Pusher to build an Instagram clone. In part one, set up your project and create your UI components."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1mDc9HOj7mEYwQ2CaoEMqQ","type":"Entry","createdAt":"2018-04-30T12:48:16.510Z","updatedAt":"2018-05-01T15:44:56.196Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime Instagram clone — Part 2: Connecting the UI with GraphQL data","url":"instagram-clone-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/instagram-clone","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-04-27","description":"This four-part series takes you through building an Instagram clone using Node and React. In part two, connect your UI and data with GraphQL.","prerequisite":"You should have completed part one of the series.","content":"*This is part 2 of a 4 part tutorial. You can find part 1 [here](https://pusher.com/tutorials/instagram-clone-part-1), part 3 [here](https://pusher.com/tutorials/instagram-clone-part-3) and part 4 [here](https://pusher.com/tutorials/instagram-clone-part-4).*\n\nIn the last part, of this series, we set up the UI for our React Instagram clone. If you haven’t already, you can read up on it [here](https://pusher.com/tutorials/instagram-clone-part-1). In this part, we are going to take a look at how to connect the UI to GraphQL Data\n\n## Prerequisites\n- Should have read the first part of the series\n- Basic knowledge of JavaScript\n- Node installed on your machine\n- NPM installed on your machine\n\n## Set up the server\n\nTo allow us to serve data to the UI, let’s create an API server for the application. The server will be built using NodeJS and GraphQL.\n\n### What is GraphQL\nGraphQL allows you to describe how to ask for data. With GraphQL, the client specifies the exact resources it needs instead of making requests to REST Endpoints that return everything. The GraphQL API has three main building blocks which are queries, schema, and resolvers.\n\nTo get started, create a `server` directory in the project root of the `react-instagram-clone` app. Here’s a link to the [Github](https://github.com/christiannwamba/instagram-clone) repository for more reference. \n\n```\n    mkdir server\n```\n\nInitialize a new Node project and install the following modules:\n\n```\n    cd server\n    npm init \n    npm install --save express graphql express-graphql cors\n```\n\nCreate a `server.js` file in the `server/` directory:\n\n```\n    touch server.js\n```\n\nNow, edit the `server.js` file as follows. First, import the necessary node modules:\n\n``` javascript\n    // server/server.js\n    \n    let express = require(\"express\");\n    let graphqlHTTP = require(\"express-graphql\");\n    let { buildSchema } = require(\"graphql\");\n    let cors = require(\"cors\");\n    \n    [...]\n```\n\nNext thing is to construct a schema. In GraphQL, schemas are constructed using GraphQL Schema Language. \n\n``` javascript\n    // server/server.js\n    [...]\n    \n    let schema = buildSchema(`\n      type User {\n        id : String!\n        nickname : String!\n        avatar : String!\n      }\n      type Post {\n          id: String!\n          user: User!\n          caption : String!\n          image : String!\n      }\n      type Query{\n        user(id: String) : User!\n        post(user_id: String, post_id: String) : Post!\n        posts(user_id: String) : [Post]\n      }\n    `);\n    \n    [...]\n```\n\nIn specifying the schema, above, we also added a query**.** Query fields also allow you to add arguments which we will need in this case to display specific data.\n\nNext thing to do is to add some stock data for the application. Add the following to your `server.js` file:\n\n``` javascript\n    // server/server.js\n    [...]\n    // Maps id to User object\n    let userslist = {\n      a: {\n        id: \"a\",\n        nickname: \"Chris\",\n        avatar: \"https://www.laravelnigeria.com/img/chris.jpg\"\n      },\n      [...]\n    };\n    let postslist = {\n      a: {\n        a: {\n          id: \"a\",\n          user: userslist[\"a\"],\n          caption: \"Moving the community!\",\n          image: \"https://pbs.twimg.com/media/DOXI0IEXkAAkokm.jpg\"\n        },\n        b: {\n          id: \"b\",\n          user: userslist[\"a\"],\n          caption: \"Angular Book :)\",\n          image:\n            \"https://cdn-images-1.medium.com/max/1000/1*ltLfTw87lE-Dqt-BKNdj1A.jpeg\"\n        },\n        c: {\n          id: \"c\",\n          user: userslist[\"a\"],\n          caption: \"Me at Frontstack.io\",\n          image: \"https://pbs.twimg.com/media/DNNhrp6W0AAbk7Y.jpg:large\"\n        },\n        d: {\n          id: \"d\",\n          user: userslist[\"a\"],\n          caption: \"Moving the community!\",\n          image: \"https://pbs.twimg.com/media/DOXI0IEXkAAkokm.jpg\"\n        }\n      }\n    };\n    [...]\n```\n\nThe data is truncated for brevity. You can fetch the complete data from the `server.js` file on [Github](https://github.com/christiannwamba/instagram-clone/blob/master/server/server.js).\n\nNow that this is specified, the next thing to do is to specify the resolver function for the API. The resolver ****tells your server how to handle an incoming query telling it where to get the data for a given field. Add the resolver to the `server.js` file that looks like this:\n\n``` javascript\n    // server/server.js\n    [...]\n    // The root provides a resolver function for each API endpoint\n    let root = {\n      user: function({ id }) {\n        return userslist[id];\n      },\n      post: function({ user_id , post_id }) {\n        return postslist[user_id][post_id];\n      },\n      posts: function({ user_id }){\n        return Object.values(postslist[user_id]);\n      }\n    };\n    [...]\n```\n\nHere the functions `user` and `post` return data that matches the criteria specified above. `posts` returns all the posts created by a specific user. Now that this is all done, let’s create an Express app and have the server listen for incoming requests:\n\n``` javascript\n    // server/server.js\n    [...]\n    let app = express();\n    app.use(cors());\n    app.use(\n      \"/graphql\",\n      graphqlHTTP({\n        schema: schema,\n        rootValue: root,\n        graphiql: true\n      })\n    );\n    // set application port\n    app.listen(4000);\n```\n\nGraphQL also comes with an interactive console that could be displayed to allow developers get familiar with GraphQL queries. The `grapgiql: true` option specifies that this should also be mounted on the `/graphql` route of the express server.\n\nNow, when you run the `server.js` file, your server will be hosted at `http://localhost:4000/graphql`. \n\n```\n    node server\n```\n\nWhen you visit the URL in the browser,  you get the following:\n\n![instagram-clone-graphql](//images.ctfassets.net/1es3ne0caaid/3xeZYg3Ck82u2OWkIMEQCG/ec13578cf59e83d384d950101ddf3211/instagram-clone-graphql.png)\n\n\nYou can test it out by pasting this query into the GraphiQL console:\n\n``` json\n    {\n      user(id: \"a\"){\n        nickname,\n      }\n    }\n```\n\nWhen you hit the run button, you can get the result:\n\n![instagram-clone-graphql-result-1](//images.ctfassets.net/1es3ne0caaid/3kLI9o0RyogmcAKiKOAMau/936d93495403302a3f7dfa605048f68b/instagram-clone-graphql-result-1.png)\n\nThis is the query in the above screenshot, with one modification:\n\n``` json\n    {\n      user(id: \"a\"){\n        nickname,\n        avatar\n      }\n    }\n```\n\nAs you can see in the result below, all that needs to be changed is the description of what you want from the server.\n\n![instagram-clone-graphql-result-2](//images.ctfassets.net/1es3ne0caaid/3egEK130TuaayOu4muESom/83a0cd83f3636dfc10c7376fca741992/instagram-clone-graphql-result-2.png)\n\n\nFrom the screenshots above, you can see that the server only returns the data that was requested of it. Nothing more, nothing less.\n\n\n## Connect the React client to the GraphQL server\n\nNow, let’s see how to connect the server to our React UI that was created in the part of this series. To do this, we are going to make use of [Apollo](https://www.apollographql.com/client). \n\n### Getting set up with Apollo\nFirst, let’s install the necessary packages in the root folder of the react project.\n\n```\n    cd react-instagram-clone\n    npm install apollo-boost react-apollo graphql-tag graphql --save\n```\n\nNow that the installations are complete, create a new Apollo Client in the `src/app.js` file:\n\n``` javascript\n    // src/app.js\n    [...]\n    import ApolloClient from 'apollo-boost';\n    \n    const client = new ApolloClient({\n        uri : \"http://localhost:4000\"\n    })\n    [...]\n```\n\nThe `uri` used above is that of the GraphQL server that was created earlier. \n\n### Connecting the Apollo Client to React\nThen wrap the content of the App component in an `ApolloProvider` passing the created client as one of the props.\n\n``` javascript\n    // src/app.js\n    [...]\n    import { ApolloProvider } from \"react-apollo\";\n    \n    const client = new ApolloClient({\n      uri: \"http://localhost:4000/graphql\"\n    });\n    \n    const App = () =\u003e {\n      return (\n        \u003cApolloProvider client={client}\u003e\n          \u003cdiv className=\"App\"\u003e\n            \u003cHeader /\u003e\n            \u003csection className=\"App-main\"\u003e\n              \u003cPost /\u003e\n            \u003c/section\u003e\n          \u003c/div\u003e\n        \u003c/ApolloProvider\u003e\n      );\n    };\n    export default App;\n```\n\nThis allows us to use the created client all through the different components of our application without having to create a new Apollo Client every time.\n\n\n## Render server-provisioned data\n\nNow, let’s begin to make queries to render posts from the GraphQL server created earlier on. To do this, you’ll have to tweak the `src/components/Post/index.js` as follows:\n\nImport the necessary modules that would be needed to construct queries:\n\n``` javascript\n    // src/components/Post/index.js\n    import { Query } from \"react-apollo\";\n    import gql from \"graphql-tag\";\n    \n    [...]\n```\n\nNow, make query inside the `Post` component like this:\n\n``` javascript\n    // src/components/Post/index.js\n    const Post = () =\u003e {\n      return (\n        \u003cQuery\n          query={gql`\n            {\n              post(user_id: \"a\", post_id: \"a\") {\n                image\n                caption\n                user {\n                  nickname\n                  avatar\n                }\n              }\n            }\n          `}\n        \u003e\n          // handle result of the query\n          [...]\n        \u003c/Query\u003e\n      )\n    }\n```\n\nWe are going to replace the dots with the query handler but first let’s understand how query itself. The code above creates a GraphQL query that will be executed. When this query is run using the GraphiQL UI this result is obtained. \n\nYou can paste this query in your GraphiQL:\n\n``` json\n    {\n      post(user_id: \"a\", post_id: \"a\") {\n        image\n        caption\n        user {\n          nickname\n          avatar\n        }\n      }\n    }\n```\n\nWhen you run it, you get the result below:\n\n![instagram-clone-graphql-result-3](//images.ctfassets.net/1es3ne0caaid/18kOEEr6IkSckc268WAqoa/2e03f72c3fdd77ab7e6eb0e55b17b1e5/instagram-clone-graphql-result-3.png)\n\n\nNow, let’s handle the result as follows:\n\n``` javascript\n    // src/components/Post/index.js\n    [...]\n      {({ loading, error, data }) =\u003e {\n            if (loading) return \u003cp\u003eLoading Post...\u003c/p\u003e;\n            if (error) return \u003cp\u003eError loading Post:(\u003c/p\u003e;\n            let image = data.post.image;\n            let caption = data.post.caption;\n            let user = data.post.user;\n            \n            // return JSX to be rendered\n            [...]\n```\n\nChecks are made to see if the query is executed successfully. If it is, the data returned from the query is obtained and the result is handled as follows:\n        \n``` javascript\n    // src/components/Post/index.js\n            [...]\n            return (\n              \u003carticle className=\"Post\" ref=\"Post\"\u003e\n                \u003cheader\u003e\n                  \u003cdiv className=\"Post-user\"\u003e\n                    \u003cdiv className=\"Post-user-avatar\"\u003e\n                      \u003cimg src={user.avatar} alt={user.nickname} /\u003e\n                    \u003c/div\u003e\n                    \u003cdiv className=\"Post-user-nickname\"\u003e\n                      \u003cspan\u003e{user.nickname}\u003c/span\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/header\u003e\n                \u003cdiv className=\"Post-image\"\u003e\n                  \u003cdiv className=\"Post-image-bg\"\u003e\n                    \u003cimg alt={caption} src={image} /\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv className=\"Post-caption\"\u003e\n                  \u003cstrong\u003e{user.nickname}\u003c/strong\u003e {caption}\n                \u003c/div\u003e\n              \u003c/article\u003e\n            );\n          }}\n        \u003c/Query\u003e\n      );\n    };\n    \n    export default Post;\n```\n\nNow, when you run the react app using the command:\n\n```\n    yarn start # or npm start -- based on the package manager of choice\n``` \n\n\nthe application is loaded on `http://localhost:3000/` and the following view is obtained:\n\n\n\u003e Make sure that the GraphQL server is still running\n\n![instagram-clone-part-1-complete](//images.ctfassets.net/1es3ne0caaid/513bWOORAIk4k6Eo6Mgcki/bffd3206773e6ae2f91c457cf515b3fe/instagram-clone-part-1-complete.png)\n\n\n\n## Fetching and displaying multiple posts\n\nIn a real life scenario, you don’t expect to only have one post showing on your version of Instagram . What needs to be done now is that a new `Posts` component needs to be created to allow for dynamic queries and display of multiple posts. Let’s see how to do this. \n\nCreate a new `Posts` folder in the `/src/components` directory\n\n```\n    mkdir Posts \u0026\u0026 cd Posts\n```\n\nCreate an `index.js` file in the `Posts` folder:\n\n```\n    touch index.js\n```\n\nLet’s edit the `Posts/index.js` file to look like this:\n\nFirst, import the necessary node modules:\n\n``` javascript\n    // src/components/Posts/index.js\n    import React from \"react\";\n    import \"./Posts.css\";\n    import { Query } from \"react-apollo\";\n    import gql from \"graphql-tag\";\n    import Post from \"../Post\";\n    [...]\n```\n\nThen make Query for all the posts in the `Posts` component:\n\n``` javascript\n    // src/components/Posts/index.js\n    [...]\n    const Posts = () =\u003e {\n      return (\n        \u003cQuery\n          query={gql`\n            {\n              posts(user_id: \"a\"){\n                id\n                user{\n                  nickname\n                  avatar\n                }\n                image\n                caption\n              }\n            }\n          `}\n        \u003e\n        [...]\n```   \n\n Now, let’s handle the results of the Query like we did earlier on:\n \n``` javascript\n    // src/components/Posts/index.js\n        [...]\n        {({loading, error, data}) =\u003e {\n            if (loading) return \u003cp\u003eLoading Posts...\u003c/p\u003e;\n            if (error) return \u003cp\u003eError Fetching Posts...\u003c/p\u003e;\n            let posts = data.posts;\n            \n            return \u003cdiv className=\"Posts\"\u003e\n              {posts.map(post =\u003e \u003cPost nickname={post.user.nickname} avatar={post.user.avatar} image={post.image} caption={post.caption} key={post.id}/\u003e)}\n            \u003c/div\u003e;\n          }}\n        \u003c/Query\u003e\n      );\n    }\n    \n    export default Posts;\n```\n\nNotice how the `Post` component was used above. Let’s tweak the `Post` component to allow for this. Edit the `src/components/Post/index.js` to look as follows:\n\n``` javascript\n    import React, { Component } from \"react\";\n    import \"./Post.css\";\n    class Post extends Component {\n      render() {\n        const nickname = this.props.nickname;\n        const avatar = this.props.avatar;\n        const image = this.props.image;\n        const caption = this.props.caption;\n        return (\n          \u003carticle className=\"Post\" ref=\"Post\"\u003e\n            \u003cheader\u003e\n              \u003cdiv className=\"Post-user\"\u003e\n                \u003cdiv className=\"Post-user-avatar\"\u003e\n                  \u003cimg src={avatar} alt={nickname} /\u003e\n                \u003c/div\u003e\n                \u003cdiv className=\"Post-user-nickname\"\u003e\n                  \u003cspan\u003e{nickname}\u003c/span\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/header\u003e\n            \u003cdiv className=\"Post-image\"\u003e\n              \u003cdiv className=\"Post-image-bg\"\u003e\n                \u003cimg alt={caption} src={image} /\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv className=\"Post-caption\"\u003e\n              \u003cstrong\u003e{nickname}\u003c/strong\u003e {caption}\n            \u003c/div\u003e\n          \u003c/article\u003e\n        );\n      }\n    }\n    \n    export default Post;\n```\n\nAs seen above, the Post component has the `nickname`, `avatar`, `image` and `caption` which are dynamically added for each post that is fetched from the GraphQL server.\n\nRecall in the `src/components/Posts/index.js` we did this:\n\n``` javascript\n    // src/components/Posts/index.js\n    return \n      \u003cdiv className=\"Posts\"\u003e\n        {\n        posts.map(\n          post =\u003e \u003cPost nickname={post.user.nickname} avatar={post.user.avatar} image={post.image} caption={post.caption} key={post.id}/\u003e\n          )\n        }\n    \u003c/div\u003e;\n```\n\nWhat happened here is that all the posts received from the GraphQL server were mapped to Post components with the necessary data properties. \n\nCreate a `Posts.css` file in the `src/components/Posts` directory that will contain any styling you wish to add to the Posts component:\n\n```\n    touch Posts.css\n```\n\nNow, when you visit your application at `http://localhost:3000/` you get the following:\n\n\n\u003e Ensure that your GraphQL server is still running\n\n\n![instagram-clone-part-2-complete-1](//images.ctfassets.net/1es3ne0caaid/5jDZ0qWVDq0WAYyCcygS4w/6df2382517deb582ab48c0ea8bfa2387/instagram-clone-part-2-complete-1.png)\n\n![instagram-clone-part-2-complete-2](//images.ctfassets.net/1es3ne0caaid/OqquLfO3YGSUSCQCoM8gU/e53fb943de49c8bd3d06cda89be520cd/instagram-clone-part-2-complete-2.png)\n\n\n\n## Conclusion\n\nIn this part of the series, we took a look at GraphQL and how to create a GraphQL server. We also saw how to link our existing React UI to the GraphQL server using the Apollo Client. In the [next part](https://pusher.com/tutorials/instagram-clone-part-3) of the series, we are going to look at how to add realtime feed updates to the Instagram clone application using Pusher. Here’s a link to the full [Github](https://github.com/christiannwamba/instagram-clone) repository if you’re interested.","metaTitle":"Build an Instagram clone with React — Part 2: GraphQL","metaDescription":"Use React, Node and Pusher to build an Instagram clone. In part two, use GraphQL to connect your data to your UI."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6tLdzM6PXqQQIuCKIO06cg","type":"Entry","createdAt":"2018-04-30T12:49:05.311Z","updatedAt":"2018-04-30T16:41:32.703Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime Instagram clone — Part 4: Going offline with service workers","url":"instagram-clone-part-4","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/instagram-clone","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}}],"reviewDate":"2018-04-27","description":"This four-part series takes you through building an Instagram clone using Node and React. In part four, implement offline support with service workers.","prerequisite":"You should have completed the previous parts of the series.","content":"*This is part 4 of a 4 part tutorial. You can find part 1 [here](https://pusher.com/tutorials/instagram-clone-part-1), part 2 [here](https://pusher.com/tutorials/instagram-clone-part-2) and part 3 [here](https://pusher.com/tutorials/instagram-clone-part-3).*\n\nIn the [last part](https://pusher.com/tutorials/instagram-clone-part-3) of the series, we looked at how to add realtime functionality to our React application using Pusher to enable notifications. Sometimes, when surfing the web, you loose internet connection. In the past, all you got was the default error page decided by the browser. Now, you sometimes get custom pages even when you don’t have internet connection at all.\n\nIn this article, we are going to look at how to add this kind of functionality to our application to allow the users still engage with our application even when they are constrained by internet connections. To do accomplish this, we are going to make use of the browser’s local storage and service workers.\n\n\n## Prerequisites\n\nTo follow this article you need the following:\n\n- Should have read previous parts of the series\n- Basic knowledge of JavaScript\n- Node installed on your machine\n- NPM installed on your machine\n\n\n## Set up an app shell to show when offline\n\nThe app “shell” is the minimal HTML, CSS and JavaScript required to power the user interface. This allow us to immediately render the page while the rest of the page is being fetched. \n\n### Service workers\nService workers are scripts that the browser runs in the background to give the online effect to users by caching assets and other files. Their core features are how they’re able to intercept and handle network requests. There are three stages in the lifecycle of a service worker: registration, installation and activation.\n\nReact includes starter code that registers a service worker. In the `src/index.js` you have:\n\n``` javascript\n    // src/index.js\n    [...]\n    import registerServiceWorker from './registerServiceWorker';\n    [...]\n    registerServiceWorker();\n```\n\nThis registers a service worker for your application when your application is in production mode.\n\nNext thing to do is update your `public/manifest.json` file\n\n``` json\n    {\n      \"short_name\": \"InstaClone\",\n      \"name\": \"Simple Instagram Clone App\",\n      \"icons\": [\n        {\n          \"src\": \"favicon.ico\",\n          \"sizes\": \"64x64 32x32 24x24 16x16\",\n          \"type\": \"image/x-icon\"\n        }\n      ],\n      \"start_url\": \"./index.html\",\n      \"display\": \"standalone\",\n      \"theme_color\": \"#000000\",\n      \"background_color\": \"#ffffff\"\n    }\n```\n\n\nNow, build your application using:\n\n```\n    npm run build # or yarn build\n```\n\nAn optimized version of your application will be built in the `build/` folder of your application. Now you will want to deploy the built application. To do this, `http-server` - a node module for serving static files:\n\n```\n    npm install http-server\n    http-server build\n```\n\nWhen you visit the application at `127.0.0.1:8080`, you get your regular application. Now, head over to the `Appication` tab of your Chrome debug console. You can see the existing service worker for your application displayed there. Click the `Offline` option to simulate no network connection. When you reload your application, you get this:\n\n![instagram-clone-offline](//images.ctfassets.net/1es3ne0caaid/7pWIiEf9cI0CMauaiMm8cI/b4a7f8baffb597091dcc3f9839e62a67/instagram-clone-offline.png)\n\n## Serving stale data when offline\n\nThe current display when a user is offline is a little better than the default page shown when there’s no connection. For an application like our Instagram clone application, it’ll be nice for the users to still be able to view old posts when offline. When we fetch posts in the **Posts** component, we are going to save them in the browsers `localStorage` for future use. To do this, update the `componentDidMount` of your `src/components/Posts/index.js` as follows:\n\n``` javascript\n    // src/components/Posts/index.js\n    [...]\n    componentDidMount(){\n        [...]\n        if( !navigator.onLine){\n          this.setState({ posts: JSON.parse(localStorage.getItem(\"posts\")) });\n        }else{\n          this.props.apollo_client\n          .query(\n            // grapgl ql query\n            [...]\n          )\n          .then(response =\u003e {\n            this.setState({ posts: response.data.posts});\n            localStorage.setItem('posts', JSON.stringify(response.data.posts));\n          });\n        }\n        [...]\n      }\n```\n\nWe first check if the user is online. If they are, the `apollo_client` ****makes the request to get new posts. After the posts are obtained they’re saved using the `localStorage.setItem()` function. When the user is offline, `!navigator.onLine` will return true and then the stored posts are fetched from the localStorage using `localStorage.getItem()`.\n\n\n\u003e **Tip:** localStorage only stores strings so to work around this, you use `JSON.stringify()` and `JSON.parse()` for storage and retrieval respectfully\n\nYou can also decide to display a banner to the user letting then know that they are viewing stale data. To do this, let’s create a simple Notifier component in the `src/components`  directory like this:\n\n```\n    cd src/components\n    mkdir Notifier\n    cd Notifier \u0026\u0026 touch index.js Notifier.css\n```\n\n``` javascript\n    // src/components/Notifier/index.js\n    \n    import React, { Component } from \"react\";\n    import \"./Notifier.css\";\n    class Notifier extends Component {\n      render() {\n        return (\n          \u003cdiv className=\"notify\"\u003e\n            \u003cp\u003e\n              \u003cem\u003e{this.props.data}\u003c/em\u003e\n            \u003c/p\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    export default Notifier;\n```\n\nThe component has the following styling:\n\n``` css\n    // src/components/Notifier/Notifier.css\n    \n    .notify{\n        background-color: red;\n        width: 100%;\n        padding-top: 20px;\n        padding-bottom: 20px;\n        text-align: center;\n        color: white;\n        margin-bottom: 20px;\n    }\n```\n\nNow that the component is created, to use it in the Posts component, update the `src/components/Posts/index.js`:\n\n``` javascript\n    // src/components/Posts/index.js\n    \n    import React, {Component} from \"react\";\n    import \"./Posts.css\";\n    import gql from \"graphql-tag\";\n    import Post from \"../Post\";\n    import Notifier from \"../Notifier\";\n    class Posts extends Component {\n      constructor() {\n        super();\n        this.state = {\n          posts: []\n        };\n        this.offline = !navigator.onLine;\n      }\n      componentDidMount() {\n        [...]\n      }\n      render() {\n        const notify = this.offline ? \u003cNotifier data=\"Instagram Clone: Offline Mode\" /\u003e : \u003cspan /\u003e;\n        return (\n          \u003cdiv\u003e\n            {notify}\n            // display posts\n            [...]\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default Posts;\n```\n\n\nNow, build the application again using:\n\n```\n    npm run build # or yarn build\n```\n\nStart your backend server:\n \n```\n    node server\n```\n\n\u003e If you are confused about the backend server, refer to previous parts of this series\n\nAnd then serve the production build with:\n\n```\n    http-server build\n```\n\nWhen you go to the browser you get:\n\n![instagram-clone-stale-data](//images.ctfassets.net/1es3ne0caaid/5HHvxror84m2kmQEqC4guG/6d407da3d8965adf5900e9eb47e1ca22/instagram-clone-stale-data.png)\n\n\n\u003e It’s advised to test service workers in incognito/private mode so that your application behavior is not affected by previously installed service workers / caches\n\n\n## Conclusion\n\nIn this series, we have seen how to build a simple Instagram clone using react by using react, fetching dynamic data using GraphQL, adding realtime functionality using Pusher and making the application work offline with service workers. Feel free to leverage any of the concepts shared here in your web applications. Here’s a link to the [Github](https://github.com/christiannwamba/instagram-clone) repository if interested","metaTitle":"Build an Instagram clone — Part 4: Service workers","metaDescription":"Use React, Node and Pusher to build an Instagram clone. In part four,implement offline support with service workers."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4Y96AeEnPG06WUmW2YAmc4","type":"Entry","createdAt":"2018-04-23T11:21:14.376Z","updatedAt":"2018-04-23T11:21:14.376Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Creating a realtime attendance app with React Native and BLE","url":"realtime-attendance-react-native-ble","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/BLE-Pusher-Attendance","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-04-20","description":"Follow this tutorial to learn how to build a realtime attendance app with React Native, Bluetooth Low Energy (BLE) and Channels.","prerequisite":"To follow this tutorial you will need an IoT device with a network and BLE module, a mobile device to test the app, React Native set up on your machine, and a Pusher account.","content":"In this tutorial, we'll be using React Native to create the attendance app on Android, [Bleno](https://github.com/sandeepmistry/bleno) for implementing Bluetooth Low Energy, and Pusher for notifying connected devices on realtime.\n\n## Prerequisites\n\nYou'll need the following in order to follow along with this tutorial:\n- **IoT Device** - you'll need an IoT device which has a network and BLE (Bluetooth Low Energy) module. The device should be connected to the internet in order for Pusher to work. In this tutorial, I'll be using a Raspberry Pi 3 because of its Node.js support.\n- **Mobile Device** - you'll be testing the app on a real device because of the need for bluetooth. But if your machine has bluetooth capabilities and your emulator has access to it, then you can use it as well.\n- **React Native development environment** - as this is a React Native tutorial, I'll be assuming that you have already setup your machine for React Native development. If not, you can follow the installation instructions on the [official docs](https://facebook.github.io/react-native/docs/getting-started.html). Be sure to select the **Building Projects with Native Code** tab because the **Quickstart** one uses Expo. It is great for local development but if you need certain device features such as Bluetooth, you need to start with the native method so you can immediately run the app on a device.\n- **A Pusher app** - sign up for a [free account](https://pusher.com/) if you don’t already have one. Then create a new Pusher app after that. You can do so from the [Pusher dashboard](https://dashboard.pusher.com/accounts/sign_in).\n\n\n## What You'll Create\n\nThe app will have two components: client and server. The client is the Android app that will be created using React Native, and the server is the BLE server which is responsible for processing requests from the Android app.\n\nThe Android app is going to allow the user to scan for nearby peripherals. Once the scan is complete, it will list out the peripherals that it found:\n\n![realtime-attendance-app-react-native-ble-pusher-scan-results](//images.ctfassets.net/1es3ne0caaid/4HAKJa2CusmUGGA4oy20Cc/e4b7d12fe56141b70104e11ca32956d3/realtime-attendance-app-react-native-ble-pusher-scan-results.png)\n\n\nThe user can then connect to the peripheral. Once connected, the peripheral will send the list of attendees (if any) via Pusher:\n\n\n![realtime-attendance-app-react-native-ble-pusher-attendees](//images.ctfassets.net/1es3ne0caaid/1Yen1uzJiUySSewUsiqqKE/38a8b963850e75b2d548db4f47af041c/realtime-attendance-app-react-native-ble-pusher-attendees.png)\n\n\nThe user can then press on the **enter** button. This will open a prompt which will ask for the user's full name:\n\n![realtime-attendance-app-react-native-ble-pusher-attend](//images.ctfassets.net/1es3ne0caaid/77ajKR6mtOqsmUiGI8w4WM/153323a786dc6ac3a9934c7d8cdba859/realtime-attendance-app-react-native-ble-pusher-attend.png)\n\n\n Once the user has entered their name, it will be sent to the peripheral, and the peripheral will send out the name of the user to all users subscribed to a specific channel via Pusher.\n\n\n![realtime-attendance-app-react-native-ble-pusher-attendance-notification](//images.ctfassets.net/1es3ne0caaid/7FMYYMORQkCk0a8ockm2cC/e5c96a9a02da2ea37d1c22864b4f48f4/realtime-attendance-app-react-native-ble-pusher-attendance-notification.png)\n\n\nYou can find the full source code of this app on its [Github repo](https://github.com/anchetaWern/BLE-Pusher-Attendance).\n\n\n## Creating the App\n\nNow you’re ready to create the app. You’re going to code the server component first and then the client app.\n\n### Server Component\n\nStart by installing the dependencies of Bleno:\n\n```\n    sudo apt-get install bluetooth bluez libbluetooth-dev libudev-dev\n```\n\nIf your IoT device is not using a linux-based operating system, you can check the [official documentation](https://github.com/sandeepmistry/bleno) for instructions on how to install the dependencies.\n\nOnce you’ve installed the dependencies for Bleno, you can now create a new project:\n\n```\n    npm init\n```\n\nNext,  install the dependencies of the server:\n\n```\n    npm install bleno pusher dateformat dotenv --save\n```\n\nCreate an `attendance.js` file and import the packages you’ve just installed:\n\n``` javascript\n    var bleno = require('bleno'); // for implementing BLE peripheral\n    var Pusher = require('pusher'); // for pushing real-time updates to clients\n    var dateFormat = require('dateformat'); // for formatting dates\n    \n    require('dotenv').config(); // for loading .env file\n```\n\nInitialize Pusher:\n\n``` javascript\n    var pusher = new Pusher({\n      appId: process.env.APP_ID,\n      key: process.env.APP_KEY,\n      secret: process.env.APP_SECRET,\n      cluster: process.env.APP_CLUSTER,\n      encrypted: true\n    });\n```\n\nNote that for this to work you have to create a `.env` inside the same folder where you have the `attendance.js` file and then add your pusher config:\n\n```\n    APP_ID=\"YOUR PUSHER APP ID\"\n    APP_KEY=\"YOUR PUSHER APP KEY\"\n    APP_SECRET=\"YOUR PUSHER APP SECRET\"\n    APP_CLUSTER=\"YOUR PUSHER APP CLUSTER\" \n```\n\nAdd some default attendees to ensure that Pusher is properly sending the data when someone connects to the peripheral:\n\n``` javascript\n    var time_format = 'h:MM TT';\n    var attendees = [\n        {\n            id: 1, \n            full_name: 'milfa', \n            time_entered: dateFormat(new Date(1505901033110), time_format)\n        },\n        {\n            id: 2, \n            full_name: 'red', \n            time_entered: dateFormat(new Date(1505901733110), time_format)\n        },\n        {\n            id: 3, \n            full_name: 'silver', \n            time_entered: dateFormat(new Date(1505908733110), time_format)\n        }\n    ];\n```\n\nNext, listen for when the state of the BLE peripheral changes. It has to be `poweredOn` before it can start advertising its services:\n\n``` javascript\n    const BASE_UUID = '-5659-402b-aeb3-d2f7dcd1b999';\n    const PERIPHERAL_ID = '0000';\n    const PRIMARY_SERVICE_ID = '0100';\n    \n    var primary_service_uuid = PERIPHERAL_ID + PRIMARY_SERVICE_ID + BASE_UUID;\n    var ps_characteristic_uuid = PERIPHERAL_ID + '0300' + BASE_UUID; \n    \n    var settings = {\n      service_id: primary_service_uuid,\n      characteristic_id: ps_characteristic_uuid\n    };\n    \n    bleno.on('stateChange', function(state){\n      if(state === 'poweredOn'){\n        bleno.startAdvertising('AttendanceApp', [settings.service_id]);\n      }else{\n        bleno.stopAdvertising();\n      }\n    });\n```\n\nFor those of you who don’t have experience in constructing UUIDs, the quickest way to do it is by using a tool like the [Online UUID Generator](https://www.uuidgenerator.net/). That will generate a new UUID every time you reload the page. That is where I got the value for the `BASE_UUID`. The last 24 characters (excluding the hyphens) serves as the `BASE_UUID`, and the first 8 characters is the combination of the peripheral ID and the service or characteristic ID. Notice that I’ve used `0100` for the service ID, and `0300` for the characteristic ID to make them unique.\n\nFor more information regarding how to generate UUIDs, and BLE advertising in general, I recommend you to read [A BLE Advertising Primer](http://www.argenox.com/a-ble-advertising-primer/).\n\nOnce the service advertisement is started, create a new service that will respond to write requests from the client app:\n\n``` javascript\n    bleno.on('advertisingStart', function(error){\n        if(error){\n          console.log('something went wrong while trying to start advertisement of services');\n        }else{\n          console.log('started..');\n          bleno.setServices([\n            new bleno.PrimaryService({ // create a service\n              uuid : settings.service_id,\n              characteristics : [\n                new bleno.Characteristic({ // add a characteristic to the service\n                  value : null,\n                  uuid : settings.characteristic_id,\n                  properties : ['write'],\n                  onWriteRequest : function(data, offset, withoutResponse, callback){\n    \n                    // next: add code for processing write request\n                  }\n                })\n              ]\n            })\n          ]);\n        }\n    });\n```\n\nOnce a write request is received, you first need to convert the data to a string. The data isn’t being sent in one go from the client. This is due to the limitation that only 20 bytes of data can be written to a peripheral at any given time. This means that if the data that you’re sending is more than 20 bytes, the client converts it into a byte array and sends the individual chunks to the peripheral one by one until it has sent the whole data. Bleno abstracts this part away, so you don’t have to deal with each individual chunk.\n\n``` javascript\n    var attendee = JSON.parse(data.toString());\n    attendee.time_entered = dateFormat(new Date(), time_format); \n    attendees.push(attendee); \n    console.log(attendees);\n    \n    pusher.trigger('attendance-channel', 'attendance-event', attendee); // send the new attendee's data to all clients\n    \n    callback(this.RESULT_SUCCESS); // tell the client that the request has succeeded\n```\n\nOnce the peripheral accepts a new connection from a client, send the details of all the attendees. This way, the new person knows the people who are currently in the room:\n\n``` javascript\n    bleno.on('accept', function(clientAddress){\n      console.log('client address: ', clientAddress);\n      var data = {\n        is_attendees: true,\n        attendees: attendees\n      };\n      pusher.trigger('attendance-channel', 'attendance-event', data);\n    });\n```\n\n### Client Component\n\nNow you’re ready to create the Android app. First, bootstrap a new React Native project:\n\n```\n    react-native init BLEPusherAttendance\n```\n\nNext, install the dependencies:\n\n```\n    npm install --save react-native-ble-manager random-id convert-string bytes-counter react-native-spinkit@latest react-native-prompt pusher-js\n```\n\nOnce everything is installed, you need to link the resources to the app:\n\n```\n    react-native link\n```\n\nThis step is needed for the BLE Manager and Spinkit packages to work correctly.\n\nThe app requires some permissions in order for it to work. Add the following on the `app/src/main/AndroidManifest.xml` file, right after the default permissions (`INTERNET` and `SYSTEM_ALERT_WINDOW`):\n\n``` javascript\n    \u003cuses-permission android:name=\"android.permission.BLUETOOTH\"/\u003e\n    \u003cuses-permission android:name=\"android.permission.BLUETOOTH_ADMIN\"/\u003e\n    \u003cuses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" /\u003e\n    \u003cuses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/\u003e\n```\n\nFor a detailed information on what each permission does, check out the [Android documentation](https://developer.android.com/reference/android/Manifest.permission.html).\n\nNext, include the built-in React Native components that you will be using:\n\n``` javascript\n    import React, { Component } from 'react';\n    import {\n      AppRegistry,\n      Platform,\n      PermissionsAndroid, // for checking if certain android permissions are enabled\n      StyleSheet,\n      Text,\n      View,\n      NativeEventEmitter, // for emitting events for the BLE manager\n      NativeModules, // for getting an instance of the BLE manager module\n      Button,\n      ToastAndroid, // for showing notification if there's a new attendee\n      FlatList, // for creating lists\n      Alert\n    } from 'react-native';\n```\n\nAlso import the packages you’ve installed earlier:\n\n``` javascript\n    import BleManager from 'react-native-ble-manager'; // for talking to BLE peripherals\n    const BleManagerModule = NativeModules.BleManager;\n    const bleManagerEmitter = new NativeEventEmitter(BleManagerModule); // create an event emitter for the BLE Manager module\n    \n    import { stringToBytes } from 'convert-string'; // for converting string to byte array\n    import RandomId from 'random-id'; // for generating random user ID\n    import bytesCounter from 'bytes-counter'; // for getting the number of bytes in a string\n    import Pusher from 'pusher-js/react-native'; // for using Pusher inside React Native\n    import Spinner from 'react-native-spinkit'; // for showing a spinner when loading something \n    import Prompt from 'react-native-prompt'; // for showing an input prompt\n    \n    // next: create main component\n```\n\nOn the main component’s constructor, initialize the state values that you’ll be using throughout the app:\n\n``` javascript\n    export default class pusherBLEAttendance extends Component {\n    \n      constructor() {\n        super();\n        this.state = {\n          is_scanning: false, // whether the app is currently scanning for peripherals or not\n          peripherals: null, // the peripherals detected\n          connected_peripheral: null, // the currently connected peripheral\n          user_id: null, // the ID of the current user\n          attendees: null, // the attendees currently synced with the app\n          promptVisible: false, // whether the prompt for the user's name is visible or not\n          has_attended: false // whether the current user has already attended\n        }\n    \n        this.peripherals = []; // temporary storage for the detected peripherals\n    \n        this.startScan = this.startScan.bind(this); // function for scanning for peripherals\n        this.openBox = this.openBox.bind(this); // function for opening the prompt box\n      }\n    \n      // next: add code componentWillMount() \n    }\n```\n\nBefore the component is mounted, check if bluetooth is enabled and alert the user that they need to enable bluetooth on their device if not. After that, you can initialize the BLE module. Note that it’s not required to initialize the module once you’re sure that bluetooth is enabled. This is because bluetooth is only used once the user scans for peripherals.\n\n``` javascript\n    componentWillMount() {\n      BleManager.enableBluetooth()\n        .then(() =\u003e {\n          console.log('Bluetooth is already enabled');\n        })\n        .catch((error) =\u003e {\n          Alert.alert('You need to enable bluetooth to use this app.');\n        });\n      \n      // initialize the BLE module\n      BleManager.start({showAlert: false})\n      .then(() =\u003e {\n        console.log('Module initialized');\n      });\n    \n      // next: add code for checking coarse location\n    }\n```\n\nFor Android devices using API version 23 and above (Android 6.0 and above), you need to check whether the `COARSE_LOCATION` permission is enabled, and alert the user if it’s not. `COARSE_LOCATION` is used to access the user’s approximate location. This is required by the BLE Manager package.\n\n``` javascript\n    if(Platform.OS === 'android' \u0026\u0026 Platform.Version \u003e= 23){\n        PermissionsAndroid.check(PermissionsAndroid.PERMISSIONS.ACCESS_COARSE_LOCATION).then((result) =\u003e {\n          if(!result){\n            PermissionsAndroid.requestPermission(PermissionsAndroid.PERMISSIONS.ACCESS_COARSE_LOCATION).then((result) =\u003e {\n              if(!result){\n                Alert.alert('You need to give access to coarse location to use this app.');\n              }\n            });\n          }\n      });\n    }\n```\n\nOnce the component is mounted, you can now listen for when a peripheral is discovered. Note that this event only gets triggered while the peripheral scan is ongoing. Later on, you’ll see how the scan can be started. Also note that the callback function can be triggered multiple times for the same peripheral. That’s why you have to check if it’s already stored in the array before pushing.\n\n``` javascript\n    componentDidMount() {\n    \n      bleManagerEmitter.addListener('BleManagerDiscoverPeripheral', (peripheral) =\u003e {\n    \n        var peripherals = this.peripherals; // get the peripherals\n        // check if the peripheral already exists \n        var el = peripherals.filter((el) =\u003e {\n          return el.id === peripheral.id;\n        });\n    \n        if(!el.length){\n          peripherals.push({\n            id: peripheral.id, // mac address of the peripheral\n            name: peripheral.name // descriptive name given to the peripheral\n          });\n          this.peripherals = peripherals; // update the array of peripherals\n        }\n      });\n      // next: add code for listening for when the peripheral scan has stopped\n    }\n```\n\nNext, listen for when the scan has stopped. This is where you update the state with the peripherals that were found:\n\n``` javascript\n    bleManagerEmitter.addListener(\n      'BleManagerStopScan',\n      () =\u003e {\n        console.log('scan stopped');\n        if(this.peripherals.length == 0){\n          Alert.alert('Nothing found', \"Sorry, no peripherals were found\");\n        }\n        this.setState({\n          is_scanning: false,\n          peripherals: this.peripherals\n        });  \n      }\n    );\n    // next: add code for binding to Pusher events\n```\n\nNext, initialize the Pusher client and subscribe to the same channel that you used in the server component earlier. Once the `attendance-event` is triggered, it can either be the server has sent the array of attendees (sent to the one who just joined) or a single attendee (sent to all the other people in the room).\n\n``` javascript\n    var pusher = new Pusher('YOUR PUSHER APP KEY', {\n      cluster: 'YOUR PUSHER APP CLUSTER',\n      encrypted: true\n    });\n    \n    var channel = pusher.subscribe('attendance-channel');\n    channel.bind('attendance-event', (data) =\u003e {\n      if(data.is_attendees){\n        this.setState({\n          attendees: data.attendees\n        });\n      }else{\n        ToastAndroid.show(`${data.full_name} just entered the room!`, ToastAndroid.LONG);\n        this.setState({\n          attendees: [...this.state.attendees, data]\n        });\n      }\n    });\n```\n\nThe `startScan()` function is executed when the user presses on the **Scan** button. This uses the BLE manager’s  `scan` method. It accepts an array of the service UUIDs as the first argument. Here, we didn’t include it. Even though, more often than not, you already know which service UUIDs your app should connect to. There’s really no particular reason for this, aside from demonstrating that the app can actually detect other peripherals and not just the one you created earlier. The second argument is the number of seconds in which to scan for peripherals.\n\n``` javascript\n    startScan() {\n      this.peripherals = [];\n      this.setState({\n        is_scanning: true\n      });\n    \n      BleManager.scan([], 2)\n      .then(() =\u003e { \n        console.log('scan started');\n      });\n    \n    }\n```\n\nOnce the scanning has stopped, the user will have the option to connect to any of the peripherals that were detected. Each peripheral has a corresponding **Connect** button which the user can press. This will, in turn, execute the `connect()` function which attempts to connect to the peripheral. Once connected, you have to retrieve the services from the peripheral so that the app becomes aware of the services that are available. Even though we already know the service UUID, you can’t really do anything to it unless the app is aware of it.\n\n``` javascript\n    connect(peripheral_id) {\n      BleManager.connect(peripheral_id)\n        .then(() =\u003e {\n          this.setState({\n            connected_peripheral: peripheral_id\n          });\n    \n          Alert.alert('Connected!', 'You are now connected to the peripheral.');\n          \n          // retrieve the services advertised by this peripheral\n          BleManager.retrieveServices(peripheral_id)\n            .then((peripheralInfo) =\u003e {\n              console.log('Peripheral info:', peripheralInfo);\n            }\n          ); \n        })\n        .catch((error) =\u003e {\n          Alert.alert(\"Err..\", 'Something went wrong while trying to connect.');\n        });\n    \n    }\n```\n\nOnce the user has connected to the peripheral, the UI is updated to show an **Attend** button and a list of attendees. When the user presses on the **Attend** button, a prompt shows up and lets the user enter their full name. Once entered, the following function is executed:\n\n``` javascript\n    attend(value) {\n     \n      let user_id = RandomId(15);\n    \n      this.setState({\n        user_id: user_id\n      });\n    \n      let me = {\n        id: user_id,\n        full_name: value\n      }; \n    \n      let str = JSON.stringify(me); // convert the object to a string\n      let bytes = bytesCounter.count(str); // count the number of bytes\n      let data = stringToBytes(str); // convert the string to a byte array\n      \n      // construct the UUIDs the same way it was constructed in the server component earlier\n      const BASE_UUID = '-5659-402b-aeb3-d2f7dcd1b999';\n      const PERIPHERAL_ID = '0000';\n      const PRIMARY_SERVICE_ID = '0100';\n      \n      let primary_service_uuid = PERIPHERAL_ID + PRIMARY_SERVICE_ID + BASE_UUID; // the service UUID\n      let ps_characteristic_uuid = PERIPHERAL_ID + '0300' + BASE_UUID; // the characteristic ID to write on\n      \n      // write the attendees info to the characteristic\n      BleManager.write(this.state.connected_peripheral, primary_service_uuid, ps_characteristic_uuid, data, bytes)\n        .then(() =\u003e {\n    \n          this.setState({\n            has_attended: true\n          });\n          // disconnect to the peripheral\n          BleManager.disconnect(this.state.connected_peripheral)\n            .then(() =\u003e {\n              Alert.alert('Attended', 'You have successfully attended the event, please disable bluetooth.');\n            })\n            .catch((error) =\u003e {\n              Alert.alert('Error disconnecting', \"You have successfully attended the event but there's a problem disconnecting to the peripheral, please disable bluetooth to force disconnection.\");\n            });\n    \n        })\n        .catch((error) =\u003e {\n          Alert.alert('Error attending', \"Something went wrong while trying to attend. Please try again.\");\n        });\n    }\n```\n\nFrom the code above, you can see that this creates an object containing the user’s details. The object is converted to a string and lastly to a byte array. This is done so that the data can be sent in chunks. As mentioned earlier in the server component, only 20 bytes of data can be written to a BLE peripheral at any given time. Byte arrays can be sent in chunks so it’s the perfect data type for dealing with this limit. We’re also getting the number of bytes so the `write()` function knows how much data it needs to send. \n\nOnce a response is returned, immediately disconnect from the peripheral. This is because the peripheral can only cater to a limited number of devices at the same time. \n\nThe `openBox()` function is responsible for setting the visibility of the prompt for entering the user’s full name:\n\n``` javascript\n    openBox() {\n      this.setState({\n        promptVisible: true\n      });\n    }\n```\n\nHere’s the code for rendering each individual list item. This caters to both peripheral list and attendees list.\n\n``` javascript\n    renderItem({item}) {\n      if(item.full_name){\n        return (\n          \u003cView style={styles.list_item} key={item.id}\u003e\n            \u003cText style={styles.list_item_text}\u003e{item.full_name}\u003c/Text\u003e\n            \u003cText style={styles.list_item_text}\u003e{item.time_entered}\u003c/Text\u003e\n          \u003c/View\u003e\n        );\n      }\n    \n      return (\n        \u003cView style={styles.list_item} key={item.id}\u003e\n          \u003cText style={styles.list_item_text}\u003e{item.name}\u003c/Text\u003e\n          \u003cButton \n            title=\"Connect\" \n            color=\"#1491ee\" \n            style={styles.list_item_button} \n            onPress={this.connect.bind(this, item.id)} /\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nHere’s the `render()` function. Note that it conditionally hides and shows different elements based on which step of the attendance process the user is currently at. For example, if the user has connected to a peripheral, the **scan** button and list of peripherals are no longer shown.\n\n``` javascript\n    render() {\n      return (\n        \u003cView style={styles.container}\u003e\n          \u003cView style={styles.header}\u003e\n            \u003cView style={styles.app_title}\u003e\n              \u003cText style={styles.header_text}\u003eBLE-Pusher Attendance\u003c/Text\u003e   \n            \u003c/View\u003e\n            \u003cView style={styles.header_button_container}\u003e\n              {\n                !this.state.connected_peripheral \u0026\u0026\n                \u003cButton \n                  title=\"Scan\" \n                  color=\"#1491ee\" \n                  onPress={this.startScan} /\u003e\n              }\n            \u003c/View\u003e\n          \u003c/View\u003e\n          \n          \u003cView style={styles.body}\u003e\n          \n            \u003cSpinner \n              size={50} \n              type={\"WanderingCubes\"} \n              color={\"#6097FC\"} \n              isVisible={this.state.is_scanning} \n              style={styles.spinner}\n            /\u003e\n            \n            {\n              !this.state.connected_peripheral \u0026\u0026\n              \u003cFlatList\n                data={this.state.peripherals}\n                renderItem={this.renderItem.bind(this)}\n              /\u003e\n            }\n    \n            {\n              this.state.attendees \u0026\u0026\n              \u003cView style={styles.attendees_container}\u003e\n                \u003cPrompt\n                    title=\"Enter your full name\"\n                    placeholder=\"e.g. Son Goku\"\n                    visible={this.state.promptVisible}\n                    onCancel={() =\u003e {\n                      this.setState({\n                        promptVisible: false\n                      });\n                    } \n                    }\n                    onSubmit={ (value) =\u003e {\n                      this.setState({\n                        promptVisible: false\n                      });\n                      this.attend.call(this, value);\n                    }\n                    }/\u003e\n                {\n                  !this.state.has_attended \u0026\u0026 \n                  \u003cButton \n                    title=\"Enter\" \n                    color=\"#1491ee\" \n                    onPress={this.openBox} /\u003e\n                }\n                \u003cFlatList\n                  data={this.state.attendees}\n                  renderItem={this.renderItem.bind(this)}\n                /\u003e\n              \u003c/View\u003e\n            }\n    \n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nAdd the styles:\n\n``` javascript\n    const styles = StyleSheet.create({\n      container: {\n        flex: 1,\n        alignSelf: 'stretch',\n        backgroundColor: '#F5FCFF',\n      },\n      header: {\n        flex: 1,\n        backgroundColor: '#3B3738',\n        flexDirection: 'row'\n      },\n      app_title: {\n        flex: 7,\n        padding: 10\n      },\n      header_button_container: {\n        flex: 2,\n        justifyContent: 'center',\n        paddingRight: 5\n      },  \n      header_text: {\n        fontSize: 20,\n        color: '#FFF',\n        fontWeight: 'bold'\n      },\n      body: {\n        flex: 19\n      },\n      list_item: {\n        paddingLeft: 10,\n        paddingRight: 10,\n        paddingTop: 15,\n        paddingBottom: 15,\n        marginBottom: 5,\n        borderBottomWidth: 1,\n        borderBottomColor: '#ccc',\n        flex: 1,\n        flexDirection: 'row'\n      },\n      list_item_text: {\n        flex: 8,\n        color: '#575757',\n        fontSize: 18\n      },\n      list_item_button: {\n        flex: 2\n      },\n      spinner: {\n        alignSelf: 'center',\n        marginTop: 30\n      },\n      attendees_container: {\n        flex: 1\n      }\n    });\n```\n\nLastly, register the component as the main one so that it gets rendered:\n\n``` javascript\n    AppRegistry.registerComponent('pusherBLEAttendance', () =\u003e pusherBLEAttendance);\n```\n\n## Running the App\n\nLogin to your IoT device and start the server:\n\n```\n    node attendance.js\n```\n\nAfter that, run the app on your computer:\n\n```\n    react-native run-android\n```\n\nDon’t forget to update the dev settings in the app to connect to your computer’s internal IP address. You can trigger the app settings to open using the following command. Make sure your mobile device is connected to your computer before doing so.\n\n```\n    adb shell input keyevent 82\n```\n\nSelect **dev settings** and find the menu for the debug server. Enter your computer’s internal IP address, as well as the port in which the React Native server is running. Here’s an example:\n\n```\n    192.168.254.104:8081\n```\n\nOnce the app is running, try going through the whole attendance process and see if it works.\n\n\n## Conclusion\n\nIn this tutorial, you've learned how to use Pusher's realtime capabilities with an IoT device to create an attendance app. There are many more possibilities for this technology. For example, you can create a game which allows users in the same room to compete with each other. ","metaTitle":"Creating a realtime attendance app with React Native and BLE","metaDescription":"In this tutorial discover how to build a realtime attendance app with React Native, Bluetooth Low Energy (BLE) and Pusher Channels."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6opHW5cgXmocGsG8OICKui","type":"Entry","createdAt":"2018-02-28T12:31:41.382Z","updatedAt":"2020-06-19T11:12:25.627Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a geolocation sharing app with React Native","url":"geolocation-sharing-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/locSharer","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2018-02-13","description":"Discover how to build a location sharing app with React Native, Google Maps and Facebook.","prerequisite":"A basic understanding of React is needed to follow this tutorial.","content":"In this tutorial we'll be building a location-sharing app with React Native and Pusher. By reading this tutorial, you will learn how to use the geolocation functionality in React Native, and broadcast the geolocation data with Pusher. You will also learn how to integrate Facebook login into the app.\n\n## Prerequisites\n\nYou will need the following in order to follow the tutorial:\n\n- **React Native development environment** - if you don’t have a machine setup for React Native development, be sure to check out the [official docs on how to get started](https://facebook.github.io/react-native/docs/getting-started.html). \n- **Genymotion Emulator** - this is used for testing the app later on. You can actually use your Android smartphone as well, but Genymotion really makes it easy to test geolocation using their GPS emulator.\n- **Pusher app** - you’ll need to create a [Pusher account](https://pusher.com/) in order to use Pusher’s services. A Pusher account is free to create and it even provides you with ample resources for testing the service. Once you have an account, create an app which will be used for connecting to Pusher.\n- **Facebook app** - this is required because we’ll be using Facebook login for the app.\n- **Google project** - this is required because Google Maps is used for the map display. \n\nIn the following sections, I’ll be showing you how to create the Pusher, Facebook, and Google project.\n\n## Creating the Pusher app\n\nOnce you’re logged in to your Pusher account, go to your Dashboard and look for the menu for creating a new app. Set the name of the app to “locSharer”, and select the cluster nearest to your location. Click on the **Create my app** button to create the app. Once the app is created, click on the **App Settings** tab and enable **Client Events**. We need this because we’ll be sending events directly from the app. After that, click on the **App Keys** tab and copy the credentials somewhere where you can easily access it later on. We’ll be needing it later once we start configuring the app.\n\n## Creating the Facebook app\n\nThe minimum requirement for creating a Facebook app is for you to have a [Facebook account](https://www.facebook.com/). Once you’re logged in to your account, go to the [Facebook developers website](https://developers.facebook.com/) and create a new app. Set the **Display Name** to “locSharer”. Once the app is created, add Android as a platform then set the following details:\n- **Google Play Package Name:** com.locsharer\n- **Class Name:** com.locsharer.MainActivity\n\nNext, generate a key hash to be used for development:\n\n```\n    keytool -exportcert -alias androiddebugkey -keystore ~/.android/debug.keystore | openssl sha1 -binary | openssl base64\n```\n\nThe command above generates a 28-character key hash. Paste the value under the **Key Hashes** field and save the changes. This step ensures the authenticity of the interactions between your app and Facebook, thus it’s a required step even for the development environment. You can find more information about this on the [Facebook login documentation for Android](https://developers.facebook.com/docs/facebook-login/android).\n\n## Creating the Google project\n\nJust like Facebook, you need to have a [Google account](https://accounts.google.com/) in order to create a Google project. Once you’re logged in to your Google account, go to the [Google Developer Console](https://console.developers.google.com) and create a project. Set the project name to “locSharer”. Once the project is created, click on **Enable APIs and Services** button. From there, look for **Google Maps Android API** and enable it. Next, click on the **Credentials** tab and create an API key. Once the key is created, it will ask you to restrict access. Set the key restriction to Android. Then you can use the same keystore you used for Facebook:\n\n```\n    keytool -list -v -keystore ~/.android/debug.keystore\n```\n\nThe command above allows you to get the sha1 hash. Look for it, copy the corresponding value and paste it under the **SHA-1 certificate fingerprint** field. Also enter the package name of the app (com.locsharer) then save the changes.\n\n## App overview\n\nAs mentioned earlier, we will be creating a location-sharing app. First the user has to login with their Facebook account:\n\n![geolocation-sharing-react-native-facebook-login](//images.contentful.com/1es3ne0caaid/5dif372kqQoCYuaecSuwOO/81102259c3abfad218e86f1c9f756b07/geolocation-sharing-react-native-facebook-login.png)\n\nOnce logged in, the user can enable location-sharing so that their friends can see their current location when they view them:\n\n![geolocation-sharing-react-native-share-location-request](//images.contentful.com/1es3ne0caaid/37GTp0ialyCyGEiA2WcsgW/6c662f6de2fefc07d62babf76cfdd636/geolocation-sharing-react-native-share-location-app.png)\n\nIf the user has friends who are also using the app, they will be listed below the user’s details. Tapping on a friend will display a map which gets updated based on their current location (but only if they have enabled location sharing). The current location is indicated by a marker: \n\n![geolocation-sharing-react-native-demo](//images.contentful.com/1es3ne0caaid/6C3kc9JER2UkwgkIueuiE4/db32f985e8a0c9125ddbbba360257c50/geolocation-sharing-react-native-demo.png)\n\n## Creating the server\n\nJust like every other Pusher app integration, this app needs a server component as well. The server’s job is to authenticate the requests coming from the app. This allows us to make sure that the request is indeed coming from the app and not anywhere else.\n\nStart by creating a new folder for the server-related files. Inside the folder, run `npm init` to initialize a new project. Simply press enter until it asks you to confirm the project details. Once you get to that, just respond with yes.\n\nNext, install the packages that we’ll be needing:\n\n```\n    npm install --save express body-parser pusher\n```\n\nOnce the packages are installed, create a `server.js` file. Start by including the packages we just installed:\n\n```\n    var express = require('express');\n    var bodyParser = require('body-parser');\n    var Pusher = require('pusher');\n    \n    var app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n```\n\nNext, add the code for connecting to Pusher. The Pusher app credentials are being loaded as environment variables. As you have seen from the code below, we’re not really using a module for loading environment variables from a `.env` file. Later I’ll show you how the values are being supplied.\n\n```\n    var pusher = new Pusher({ \n      appId: process.env.APP_ID, \n      key: process.env.APP_KEY, \n      secret:  process.env.APP_SECRET,\n      cluster: process.env.APP_CLUSTER, \n    });\n```\n\nAdd a route for verifying if the server is really working:\n\n```\n    app.get('/', function(req, res){ \n      res.send('server is running');\n    });\n```\n\nAdd the code for authenticating users that are connecting to your Pusher app. This contains the unique key that we will use later on to check whether the request has indeed come from the app.\n\n```\n    app.post('/pusher/auth', function(req, res) {\n      var socketId = req.body.socket_id;\n      var channel = req.body.channel_name;\n      var auth = pusher.authenticate(socketId, channel);  \n      var app_key = req.body.app_key;\n      if(app_key == process.env.UNIQUE_KEY){\n        var auth = pusher.authenticate(socketId, channel);\n        res.send(auth);\n      }\n      \n      res.send(auth);\n    });\n```\n\nInitiate the server on the port set in the environment variables. Normally this would be served on port 80:\n\n```\n    var port = process.env.PORT || 5000;\n    app.listen(port);\n```\n\n## Deploying the server\n\nThe server needs to be accessible via the internet. One service that allows us to do this for free is [Now](https://zeit.co/now)*.* **You can install Now **globally with the following command:\n\n```\n     npm install -g now\n```\n\nOnce installed, you can now add your Pusher app credentials as a secret. One caveat of Now is that all the files for the deployed projects are available publicly. This means that the values in the `.env` files are publicly available as well. Adding those values as a secret means that it won’t be accessible anywhere.\n\n```\n    now secret add locshare_app_id YOUR_PUSHER_APP_ID\n    now secret add locshare_app_key YOUR_PUSHER_APP_KEY\n    now secret add locshare_app_secret YOUR_PUSHER_APP_SECRET\n    now secret add locshare_app_cluster YOUR_PUSHER_APP_CLUSTER\n    now secret add locshare_unique_key YOUR_UNIQUE_KEY\n```\n\nDon’t forget to replace the values with your actual Pusher app credentials.\n\nOnce that’s done, you can deploy the server:\n\n```\n    now -e APP_ID=@locshare_app_id -e APP_KEY=@locshare_app_key -e APP_SECRET=@locshare_app_secret APP_CLUSTER=@locshare_app_cluster -e UNIQUE_KEY=@locshare_unique_key\n```\n\nWhat the command above does is deploy the server, as well as setting the environment variables using the `-e` option. The secret values that you’ve added earlier are accessed by using the `@` sign. When the process is completed, it should return a URL pointing to the server. Access that in the browser to check whether the server is running or not.\n\n## Creating the App\n\nIt’s now time to create the actual app. Start by generating a new React Native project:\n\n```\n    react-native init LocSharer\n```\n\n### Installing and configuring the dependencies\n\nNext install the dependencies of the app:\n\n```\n    npm install --save prop-types pusher-js react-native-facebook-login react-native-maps react-navigation\n```\n\nHere’s a brief overview of what each package does:\n- **prop-types** - for specifying the intended types of properties passed to components.\n- **pusher-js** - for interacting with Pusher.\n- **react-native-facebook-login** - for implementing Facebook login.\n- **react-native-maps** - for displaying Google Maps and markers.\n- **react-navigation** - for implementing Stack navigation within the app. \n\nAdditional steps are required in order for Facebook login and Google Maps to work. We’ll look at how to do that in the sections to follow.\n\n#### Configuring Facebook login\n\nThe following steps assumes that you have already created a Facebook app. So create one, if you haven’t done so already.\n\nOnce you’ve created a Facebook app, open the `android/settings.gradle` file and add the following to the bottom of the file:\n\n```\n    include ':react-native-facebook-login'\n    project(':react-native-facebook-login').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-facebook-login/android')\n```\n\nNext, open the  `android/app/build.gradle` file and add the following inside the `dependencies`:\n\n```\n    dependencies {\n      ...\n      compile project(':react-native-facebook-login')\n    }\n```\n\nNext, register the React package by opening the `android/app/src/main/java/com/{YOUR PACKAGE NAME}/MainApplication.java` file, and adding the following:\n\n```\n    // top of the file\n    import com.magus.fblogin.FacebookLoginPackage; // \u003c--- add this\n    \n    public class MainApplication extends Application implements ReactApplication {\n    \n      ...\n    \n      @Override\n      protected List\u003cReactPackage\u003e getPackages() {\n          return Arrays.\u003cReactPackage\u003easList(\n              new MainReactPackage(),\n              new FacebookLoginPackage() // \u003c--- add this\n          );\n      }\n    \n      ...\n    }\n```\n\nNext, open the `android/app/src/main/res/values/strings.xml` file and add the details of the Facebook app you created earlier:\n\n```\n    \u003cresources\u003e\n      \u003cstring name=\"app_name\"\u003e{YOUR FACEBOOK APP NAME}\u003c/string\u003e\n      \u003cstring name=\"fb_app_id\"\u003e{YOUR FACEBOOK APP ID}\u003c/string\u003e\n      \u003cstring name=\"fb_login_protocol_scheme\"\u003efb{YOUR FACEBOOK APP ID}\u003c/string\u003e\n    \u003c/resources\u003e\n```\n\nLastly, open the `android/app/src/main/AndroidManifest.xml`  file and add the following:\n\n```\n    \u003cmanifest \n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:tools=\"http://schemas.android.com/tools\" \u003c-- add this\n      package=\"com.your.app.namespace\"\u003e\n    \n      \u003capplication\n        ...\n        \n        \u003c!--add FacebookActivity--\u003e\n        \u003cactivity \n          tools:replace=\"android:theme\"\n          android:name=\"com.facebook.FacebookActivity\"\n          android:configChanges=\"keyboard|keyboardHidden|screenLayout|screenSize|orientation\"\n          android:label=\"@string/app_name\"\n          android:theme=\"@android:style/Theme.Translucent.NoTitleBar\"/\u003e\n      \n        \u003c!--add CustomTabActivity--\u003e\n        \u003cactivity\n          android:name=\"com.facebook.CustomTabActivity\"\n          android:exported=\"true\"\u003e\n          \u003cintent-filter\u003e\n            \u003caction android:name=\"android.intent.action.VIEW\" /\u003e\n            \u003ccategory android:name=\"android.intent.category.DEFAULT\" /\u003e\n            \u003ccategory android:name=\"android.intent.category.BROWSABLE\" /\u003e\n            \u003cdata android:scheme=\"@string/fb_login_protocol_scheme\" /\u003e\n          \u003c/intent-filter\u003e\n        \u003c/activity\u003e\n        \n        \u003c!--add reference to Facebook App ID--\u003e\n        \u003cmeta-data\n          android:name=\"com.facebook.sdk.ApplicationId\"\n          android:value=\"@string/fb_app_id\"/\u003e\n      \n      \u003c/application\u003e\n    \u003c/manifest\u003e\n```\n\n### Configuring React Native maps\n\nThe following steps assumes that you have already created a Google project, and generated an API key.\n\nStart by linking the package resources to your app:\n\n```\n    react-native link react-native-maps\n```\n\nOpen the `android\\app\\src\\main\\AndroidManifest.xml` file and add a reference to your Google project’s API key:\n\n```\n    \u003capplication\u003e\n      ...\n      \u003cmeta-data\n        android:name=\"com.google.android.geo.API_KEY\"\n        android:value=\"YOUR GOOGLE PROJECT'S ANDROID API KEY\"/\u003e\n    \u003c/application\u003e\n```\n\nAlso add the following below the default permissions:\n\n```\n    \u003cuses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/\u003e\n    \u003cuses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" /\u003e\n```\n\n### Coding the app\n\nNow we’re ready to actually code the app. Start by opening the `index.js` file and replace the default contents with the following:\n\n```\n    import { AppRegistry } from 'react-native';\n    import App from './App';\n    \n    AppRegistry.registerComponent('LocSharer', () =\u003e App);\n```\n\nThe entry-point of the app will be the `App` component. So create an `App.js` file and add the following:\n\n```\n    import React, { Component } from 'react';\n    import { StackNavigator } from 'react-navigation';\n    \n    import IndexPage from './src/components/index';\n    import MapPage from './src/components/map_page';\n    \n    const Page = StackNavigator({\n      Home: { screen: IndexPage },\n      MapPage: { screen: MapPage },\n    });\n    \n    export default class App extends Component\u003c{}\u003e {\n    \n      render() {\n        return \u003cPage /\u003e\n      }\n    }\n```\n\nThe code above uses the React Navigation library to create a StackNavigator. This allows the app to transition from one screen to another by placing the new screen on top of the stack. This allows us to easily implement the back functionality since all it has to do is to “pop” the current screen out of the stack in order to go back to the previous screen. To use the StackNavigator, pass in the components to be used as the individual pages. The first one is the initial screen of the app.\n\n### Index page\n\nNext, create a `src` directory and inside create an `index.js` file. This will serve as the initial page of the app. First, import the modules and components that we need:\n\n```\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      Text,\n      View,\n      Switch, // for toggling location sharing on and off\n      DeviceEventEmitter // for emitting/listening custom events\n    } from 'react-native';\n    \n    var { FBLogin } = require('react-native-facebook-login'); // for implementing Facebook login\n    \n    import Pusher from 'pusher-js/react-native'; // for interacting with Pusher\n    \n    import Profile from './profile'; // component for displaying the user's profile\n    import Friends from './friends'; // component for displaying the user's friends\n    \n    import { regionFrom } from '../helpers'; // helper function for constructing the data needed by React Native Maps\n```\n\nCreate the actual component:\n\n```\n    export default class Index extends Component\u003c{}\u003e {\n      // set the title of the screen\n      static navigationOptions = {\n        title: 'LocSharer',\n      };\n    }\n```\n\nIn the constructor, we bind the functions to be used throughout the class as well as setting the default state:\n\n```\n    constructor() {\n    \n      super();\n    \n      this.watchId = null; // unique ID for the geolocation watcher\n      this.pusher = null; // variable for storing the Pusher instance\n      this.user_channel = null; // the Pusher channel for the current user\n      \n      // bind the functions to the class\n      this.onLogin = this.onLogin.bind(this);\n      this.onLoginFound = this.onLoginFound.bind(this);\n      this.onLogout = this.onLogout.bind(this);\n      this.setUser = this.setUser.bind(this);\n      this.setFriends = this.setFriends.bind(this);\n      this.toggleLocationSharing = this.toggleLocationSharing.bind(this);\n      this.onViewLocation = this.onViewLocation.bind(this);\n    \n      this.state = {\n        is_loggedin: false, // whether the user is currently logged in or not\n        is_location_shared: false, // whether the user is currently sharing their location or not\n        user: null, // data for the currently logged in user\n        friends: null, // data for the user's friends\n        subscribed_to: null, // the Facbook user ID of the user's friend whose location is currently being viewed\n        subscribed_friends_count: 0 // number of friends currently subscribed to the user\n      };\n    \n    }\n```\n\nThe `onLogin()` function is executed when the user has logged in with Facebook. Some of the user’s data such as the ID, access token and name are passed in as an argument to this function. It is then used to set the user’s and friends’ data on the state using two functions: \n\n```\n    onLogin(login_data) {\n      this.setUser(login_data);\n      this.setFriends(login_data.credentials.token);\n    }\n```\n\nThe `onLoginFound()` function is executed if an existing Facebook session is already present. The arguments passed in to this function are limited so we have to make a separate API request to get the user’s name:\n\n```\n    onLoginFound(data) {\n    \n      let token = data.credentials.token;\n    \n      fetch(`https://graph.facebook.com/me?access_token=${token}`)\n        .then((response) =\u003e response.json())\n        .then((responseJson) =\u003e {\n        \n          let login_data = {\n            profile: {\n              id: responseJson.id,\n              name: responseJson.name\n            },\n            credentials: {\n              token: token\n            }\n          };\n      \n          this.setUser(login_data);\n        })\n        .catch((error) =\u003e {\n          console.log('something went wrong', error);\n        });\n    \n      this.setFriends(token);\n    \n    }\n```\n\nHere’s the function for setting the data for the current user. All it does is format the login data returned by the Facebook API and set it on the state:\n\n```\n    setUser(login_data) {\n    \n      let user_id = login_data.profile.id;\n      this.setState({\n        is_loggedin: true,\n        user: {\n          id: user_id,\n          access_token: login_data.credentials.token,\n          name: login_data.profile.name,\n          photo: `https://graph.facebook.com/${user_id}/picture?width=100` // the user's profile picture\n        }\n      });\n    \n    }\n```\n\nThe `setFriends()` function makes a request to the Facebook API to get the array of the user’s friends:\n\n```\n    setFriends(token) {\n      fetch(`https://graph.facebook.com/me/friends?access_token=${token}`)\n        .then((response) =\u003e response.json())\n        .then((responseJson) =\u003e {\n          this.setState({\n            friends: responseJson.data\n          });\n        })\n        .catch((error) =\u003e {\n          console.log('something went wrong', error);\n        });\n    }\n```\n\nOnce the user logs out, destroying the session data is already taken care of by the Facebook login package. So all we have to do is unset all the user data that we’ve set earlier:\n\n```\n    onLogout() {\n      this.setState({\n        is_loggedin: false,\n        user: null, \n        friends: null,\n        is_subscribed_to: null\n      });\n    }\n```\n\nNext, initialize Pusher. Be sure to replace the placeholder values with your Pusher app details. We’re also passing in an auth paramater. This is the request data that we were checking earlier in the server code. Simply pass in the same unique string that you’ve used earlier when you added the secret:\n\n```\n    componentWillMount() {\n      this.pusher = new Pusher('YOUR PUSHER APP ID', {\n        authEndpoint: 'YOUR AUTH SERVER AUTH ENDPOINT',\n        cluster: 'YOUR APP CLUSTER',\n        encrypted: true,\n        auth: {\n          params: {\n            app_key: 'YOUR UNIQUE KEY', // \u003c-- should be the same as the unique key you added as a secret using now\n          }\n        }\n      });\n      \n      // add code for listening for the unsubscribe event\n    \n    }\n```\n\nNext, we need a way to unsubscribe from a friend’s channel when the current user is no longer viewing their location on a map. That happens when the user goes back from the map page to the index page. The React Navigation library doesn’t really provide a way to listen for the event when the back button is tapped. That’s why we need a way to emulate that behavior. I’ll let you figure out your own solution. So feel free to skip the following paragraph if you want.\n\nThe solution I came up with is to use the `DeviceEventEmitter` module. Add a listener for the `unsubscribe` event, and once this is triggered, unsubscribe from the friend’s channel. The event is triggered from the map page when the user goes back to the index page:\n\n```\n    DeviceEventEmitter.addListener('unsubscribe', (e) =\u003e {\n      let friend_id = this.state.subscribed_to;\n      this.pusher.unsubscribe(`private-friend-${friend_id}`);\n    });\n```\n\nThe `toggleLocationSharing()` function is executed every time the user toggles the switch for sharing their location. If location sharing is enabled, we subscribe the user to their own channel. This allows them to listen for when one of their friends subscribes to their channel. When this happens, we begin watching the user’s current location and publish the data using Pusher. If the user decides to disable location sharing, we unsubscribe the user from their own channel and stop watching the location. This effectively stops the updating of location from their friends screens:\n\n```\n    toggleLocationSharing() {\n    \n      let is_location_shared = !this.state.is_location_shared;\n    \n      this.setState({\n        is_location_shared: is_location_shared\n      });\n      \n      let user_id = this.state.user.id;\n      if(!is_location_shared){\n        this.pusher.unsubscribe(`private-friend-${user_id}`); // disconnect from their own channel\n        if(this.watchId){\n          navigator.geolocation.clearWatch(this.watchId);\n        }\n      }else{\n        this.user_channel = this.pusher.subscribe(`private-friend-${user_id}`);\n        this.user_channel.bind('client-friend-subscribed', (friend_data) =\u003e {\n      \n          let friends_count = this.state.subscribed_friends_count + 1;\n          this.setState({\n            subscribed_friends_count: friends_count\n          });\n      \n          if(friends_count == 1){ // only begin monitoring the location when the first subscriber subscribes\n            this.watchId = navigator.geolocation.watchPosition(\n              (position) =\u003e {\n                var region = regionFrom(\n                  position.coords.latitude,\n                  position.coords.longitude,\n                  position.coords.accuracy\n                );\n                this.user_channel.trigger('client-location-changed', region); // push the data to subscribers\n              }\n            );\n          }\n        });  \n      \n      }\n    }\n```\n\nThe `onViewLocation()` function is executed when the user taps on any friend on their friend list. This is where we subscribe to the friend’s channel so we can get updates whenever their location changes:\n\n```\n    onViewLocation(friend) {\n    \n      this.friend_channel = this.pusher.subscribe(`private-friend-${friend.id}`);\n      this.friend_channel.bind('pusher:subscription_succeeded', () =\u003e {\n        let username = this.state.user.name;\n        this.friend_channel.trigger('client-friend-subscribed', {\n          name: username\n        });\n      });\n    \n      this.setState({\n        subscribed_to: friend.id\n      });\n      \n      // add code for navigating to the map page\n    }\n```\n\nNext, add the code for navigating to the map page. Pass in the name of the friend and the reference to the friend’s channel as navigation props. This allows those values to be accessed from the map page later on:\n\n```\n    const { navigate } = this.props.navigation;\n    \n    navigate('MapPage', {\n      name: friend.name,\n      friend_channel: this.friend_channel // pass the reference to the friend's channel\n    });\n```\n\nRender the index page. This consists of the user’s profile, their friends list and the Facebook login or logout button:\n\n```\n    render() {\n    \n      return (\n        \u003cView style={styles.page_container}\u003e\n        {\n          this.state.is_loggedin \u0026\u0026\n          \u003cView style={styles.container}\u003e\n          {\n            this.state.user \u0026\u0026\n            \u003cView style={styles.profile_container}\u003e\n              \u003cProfile\n                profile_picture={this.state.user.photo}\n                profile_name={this.state.user.name}\n              /\u003e\n    \n              \u003cText\u003eShare Location\u003c/Text\u003e\n              \u003cSwitch\n                value={this.state.is_location_shared}\n                onValueChange={this.toggleLocationSharing} /\u003e\n            \u003c/View\u003e\n          }\n    \n          {\n            this.state.friends \u0026\u0026\n            \u003cFriends\n              friends={this.state.friends}\n              onViewLocation={this.onViewLocation} /\u003e\n          }\n          \u003c/View\u003e\n        }\n    \n          \u003cFBLogin\n            permissions={[\"email\", \"user_friends\"]}\n            onLogin={this.onLogin}\n            onLoginFound={this.onLoginFound}\n            onLogout={this.onLogout}\n            style={styles.button}\n          /\u003e\n        \u003c/View\u003e\n      );\n    \n    }\n    \n    // add the styles\n    const styles = StyleSheet.create({\n      page_container: {\n        ...StyleSheet.absoluteFillObject,\n        justifyContent: 'flex-end'\n      },\n      container: {\n        flex: 1,\n        padding: 20\n      },\n      profile_container: {\n        flex: 1,\n        alignItems: 'center',\n        marginBottom: 50\n      },\n      button: {\n        paddingBottom: 30,\n        marginBottom: 20,\n        alignSelf: 'center'\n      }\n    });\n```\n\nThe code above is pretty self-explanatory so I won’t go into details what each line does.\n\n### Profile component\n\nThe Profile component is used for displaying the user’s profile picture and name:\n\n```\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      Text,\n      View,\n      Image\n    } from 'react-native';\n    \n    import PropTypes from 'prop-types';\n    \n    class Profile extends Component\u003c{}\u003e {\n    \n      render() {\n    \n        return (\n          \u003cView style={styles.profile_container}\u003e\n            \u003cImage\n              resizeMode={\"contain\"}\n              source={{uri: this.props.profile_picture}}\n              style={styles.profile_photo}\n            /\u003e\n            \u003cText style={styles.profile_name}\u003e{this.props.profile_name}\u003c/Text\u003e\n          \u003c/View\u003e\n        );\n    \n      }\n    \n    }\n    \n    const styles = StyleSheet.create({\n      profile_container: {\n        alignItems: 'center'\n      },\n      profile_photo: {\n        height: 100,\n        width: 100\n      },\n      profile_name: {\n        fontWeight: 'bold',\n        fontSize: 18\n      }\n    });\n    \n    // specify the required props\n    Profile.propTypes = {\n      profile_picture: PropTypes.string.isRequired,\n      profile_name: PropTypes.string.isRequired\n    };\n    \n    export default Profile;\n```\n\n### Friends component\n\nThe Friends component is used for rendering the list of friends:\n\n```\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      Text,\n      View,\n      Image,\n      TouchableHighlight\n    } from 'react-native';\n    \n    import PropTypes from 'prop-types';\n    \n    class Friends extends Component\u003c{}\u003e {\n    \n      renderFriends() {\n        return this.props.friends.map((friend, index) =\u003e {\n        \n          let profile_picture = `https://graph.facebook.com/${friend.id}/picture?width=50`;\n          return (\n            \u003cTouchableHighlight\n              key={index}\n              onPress={this.props.onViewLocation.bind(this, friend)}\n              underlayColor={\"#CCC\"}\u003e\n    \n                \u003cView style={styles.friend_row}\u003e\n                  \u003cImage\n                    resizeMode={\"contain\"}\n                    source={{uri: profile_picture}}\n                    style={styles.profile_photo}\n                  /\u003e\n                  \u003cText style={styles.friend_name}\u003e{friend.name}\u003c/Text\u003e\n                \u003c/View\u003e\n    \n            \u003c/TouchableHighlight\u003e\n          );\n        });\n      }\n      \n      render() {\n      \n        return (\n          \u003cView style={styles.friends_container}\u003e\n            \u003cText style={styles.friends_header_text}\u003eView Friend Location\u003c/Text\u003e\n            {this.renderFriends.call(this)}\n          \u003c/View\u003e\n        );\n      \n      }\n    }\n    \n    // add the styles\n    const styles = StyleSheet.create({\n      friends_container: {\n        flex: 2\n      },\n      friends_header_text: {\n        fontSize: 18,\n        fontWeight: 'bold'\n      },\n      friend_row: {\n        flexDirection: 'row',\n        alignItems: 'center',\n        padding: 10\n      },\n      profile_photo: {\n        width: 50,\n        height: 50,\n        marginRight: 20\n      },\n      friend_name: {\n        fontSize: 15\n      }\n    });\n    \n    // specify the required props\n    Friends.propTypes = {\n      friends: PropTypes.arrayOf(\n        PropTypes.shape({\n          id: PropTypes.string.isRequired,\n          name: PropTypes.string.isRequired\n        })\n      ),\n      onViewLocation: PropTypes.func.isRequired\n    };\n    \n    export default Friends;\n```\n\n### Region helper\n\nEarlier, we’ve used a function called `regionFrom` but we haven’t really created it yet. So go ahead and create a `src/helpers.js` file and add the following:\n\n```\n    export function regionFrom(lat, lon, accuracy) {\n      const oneDegreeOfLongitudeInMeters = 111.32 * 1000;\n      const circumference = (40075 / 360) * 1000;\n    \n      const latDelta = accuracy * (1 / (Math.cos(lat) * circumference));\n      const lonDelta = (accuracy / oneDegreeOfLongitudeInMeters);\n    \n      return {\n        latitude: lat,\n        longitude: lon,\n        latitudeDelta: Math.max(0, latDelta),\n        longitudeDelta: Math.max(0, lonDelta)\n      };\n    } \n```\n\nThis function is used for getting the latitude and longitude delta values needed by the React Native Maps library to display a map.\n\n### Map page\n\nNow we move over to the map page. Create a `src/map_page.js` file and add the following:\n\n```\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      Text,\n      View,\n      DeviceEventEmitter\n    } from 'react-native';\n    \n    import Map from './map';\n    \n    import { regionFrom } from '../helpers';\n    \n    // add code for creating the component\n```\n\nCreate the component, and set the page title based on the parameters passed from the index page:\n\n```\n    export default class MapPage extends Component\u003c{}\u003e {\n    \n      static navigationOptions = ({navigation}) =\u003e ({\n        title: `${navigation.state.params.name}'s Location`,\n      });\n     \n     // add constructor code \n    }\n```\n\nSet a default location in the constructor so that a map is still displayed even if the user is not sharing their location:\n\n```\n    constructor() {\n      super();\n    \n      // set default location\n      let region = {\n        \"latitude\": 35.4625901,\n        \"longitude\": 138.65437569999995,\n        \"latitudeDelta\": 0,\n        \"longitudeDelta\": 0\n      };\n    \n      this.state = {\n        region\n      }\n    }\n```\n\nWhen the user taps on the back button, `componentWillUnmount()` is triggered as the component goes out of view. So this is the perfect time to trigger the `unsubscribe` event to let the index page know that the user has stopped viewing their friends location.\n\n```\n    componentWillUnmount() {\n      DeviceEventEmitter.emit('unsubscribe',  {\n        unsubscribe: true\n      });\n    }\n```\n\nWhen the component is mounted, we want to start listening for when the location changes so we can update the map accordingly:\n\n```\n    componentDidMount() {\n    \n      const { state } = this.props.navigation;\n      state.params.friend_channel.bind('client-location-changed', (data) =\u003e {\n        this.setState({\n          region: data\n        });\n      });\n    \n    }\n```\n\nThe `render()` method simply outputs the Map component:\n\n```\n    render() {\n    \n      return (\n        \u003cView style={styles.map_container}\u003e\n        {\n          this.state.region \u0026\u0026\n          \u003cMap region={this.state.region} /\u003e\n        }\n        \u003c/View\u003e\n      );\n    \n    }\n```\n\nAdd the styles:\n\n```\n    const styles = StyleSheet.create({\n      map_container: {\n        ...StyleSheet.absoluteFillObject,\n        justifyContent: 'flex-end'\n      }\n    });\n```\n\n### Map component\n\nLastly, there’s the Map component which is used to actually render the Google Map. This uses the React Native Maps package that we installed earlier. There are only two components that you need in order to make it work: `MapView` and `MapView.Marker`. `MapView` is used to render the map, and `MapView.Marker` is used to render the marker: \n\n```\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      View\n    } from 'react-native';\n    \n    import MapView from 'react-native-maps';\n    import PropTypes from 'prop-types';\n    \n    class Map extends Component\u003c{}\u003e {\n    \n      render() {\n    \n        return (\n          \u003cView style={styles.map_container}\u003e\n            {\n            this.props.region \u0026\u0026\n              \u003cMapView\n                style={styles.map}\n                region={this.props.region}\n              \u003e\n                \u003cMapView.Marker\n                  coordinate={{\n                    latitude: this.props.region.latitude,\n                    longitude: this.props.region.longitude}}\n                /\u003e\n              \u003c/MapView\u003e\n            }\n          \u003c/View\u003e\n        );\n    \n      }\n    \n    }\n    \n    // add the styles\n    const styles = StyleSheet.create({\n      map_container: {\n        ...StyleSheet.absoluteFillObject,\n        justifyContent: 'flex-end'\n      },\n      map: {\n        ...StyleSheet.absoluteFillObject,\n      },\n    });\n    \n    // specify the required props\n    Map.propTypes = {\n      region: PropTypes.shape({\n        latitude: PropTypes.number.isRequired,\n        longitude: PropTypes.number.isRequired,\n        latitudeDelta: PropTypes.number.isRequired,\n        longitudeDelta: PropTypes.number.isRequired\n      })\n    };\n    \n    export default Map;\n```\n\n## Running the app\n\nYou only need one device and one emulator in order to test the app. First, run the app on your device by executing `react-native run-android`. Once the app is running, disconnect the device and open a Genymotion virtual device. Execute the same command again to run the app on the virtual device. Don’t forget to add another Facebook user, aside from your own Facebook account as a tester or developer under the Facebook app settings. You can do that by clicking on the **Roles** tab and searching for the user in there. Only Facebook users that are added in the app settings can login. This is because the Facebook app is still unpublished. \n\nGenymotion has a built-in functionality for spoofing the GPS coordinates. This will trigger the geolocation functionality in the app everytime the location changes (either by pointing the marker on a different location on the map or searching for another place). That’s why it’s best to use Genymotion for testing the user who is broadcasting their location.\n\nIf you don’t have any device to test on, you can use Genymotion and the Pusher debug console to test the app. All you have to do is figure out the Facebook user ID’s of the two users you’re using for testing. You can do that by using [this tool](https://findmyfbid.in/). Login with your Facebook account on Genymotion then click on one of the other accounts. You can then emulate the location update by manually entering the coordinates on the debug console. You can access the debug console from your Pusher app’s dashboard:\n\n![geolocation-sharing-react-native-debug-console](//images.contentful.com/1es3ne0caaid/6kX3gefojuW4oIKWmgKyWs/72a71d7cf5c4e62e9e500b70e9754772/geolocation-sharing-react-native-debug-console.png)\n\nYou can use the following as initial values:\n- **channel name:** `private-friend-YOUR-ACCOUNTS-FB-ID`\n- **event:** `client-location-changed`\n- **data:** you can use the following data for testing:\n\n```\n    {\n      \"latitude\": 16.6105538,\n      \"longitude\": 120.31429539999999,\n      \"latitudeDelta\": 0,\n      \"longitudeDelta\": 0\n    }\n```\n\nSend the event once that’s done. Sending the event should update the map on the app. You can use a service such as [latlong.net](https://www.latlong.net/) to come up with the coordinates of different places.\n\n\n## Suggestions for improvement\n\nIf you want to improve the app, here are some ideas on what you can add:\n- The number of friends that are currently viewing the user’s location doesn’t actually get updated when someone disconnects from the user’s channel. You can add a listener for when someone disconnects, so that you can update the value as well. \n- The current user doesn’t actually know who are the people that are currently subscribed to their location. For this you can use an alert dialog everytime someone subscribes to the channel. The `client-friend-subscribed` event has already been laid out for this purpose. You can even take the idea further by making use of [Presence channels](https://pusher.com/docs/client_api_guide/client_presence_channels). This comes with an additional feature that allows you to keep track of the people that are subscribed to a specific channel.\n- Add notifications to inform the subscribed users for when the user they’re subscribed to disables location sharing. \n\n\n## Conclusion\nThat’s it! In this tutorial you’ve learned how to create a location-sharing app which uses React Native’s built-in Geolocation library and Pusher to broadcast the data to the user’s friends.","metaTitle":"Build a geolocation sharing app with React Native","metaDescription":"In this tutorial, we will be building a location-sharing app using React Native and you will learn how to use the realtime geolocation functionality."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2txXtpE7lCciQUc4M4GmyS","type":"Entry","createdAt":"2018-02-22T15:04:12.993Z","updatedAt":"2018-02-28T16:55:30.946Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Making React realtime with websockets","url":"react-websockets","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/react-pusher-getting-started","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}}],"reviewDate":"2018-01-15","description":"Build a chat application using React and Pusher. ","prerequisite":"A basic understanding of React and Node.js are needed to follow this tutorial.","content":"Every chat application requires real time functionality. This amongst other benefits allows interaction between users in different location(s). A chat application like this can be built to function on diverse platforms, be it mobile or web applications. \n\nIn this tutorial, I will be showing you how to build a chat application using [React](https://reactjs.org/) and [Pusher](https://pusher.com). This is a very simple application and it comes with functionality which will be showing some of the rich features of Pusher and how you can easily combine it with a modern library like React. \n\nPusher is a platform that allows developers to easily build an application with realtime features as quickly as possible. Pusher specialises in building realtime and scalable infrastructures for developers and is packaged with powerful features like client events, queryable API, Pub/Sub messaging and others.\n\nWe will explore Pusher as we proceed in this tutorial and leverage on the DOM manipulation, event driven and data-binding ability of React.\n\nA basic knowledge of JavaScript and React will be of advantage so as to effectively participate in this tutorial.\n\nA sneak peek into what we will build in this tutorial:\n\n![reactjs-websockets-demo](//images.contentful.com/1es3ne0caaid/1O7NDl5Hv6Wia6AGEoS6mE/b842dd7761b6a525a9005e70daefd227/making-reactjs-realtime-with-websockets-demo.gif)\n\n## Getting Started\n\nFor a hitch-free flow of procedures in this tutorial, we will begin by setting up the required credentials with Pusher. If you don’t have an account, [kindly create one](https://pusher.com/) . Once you are done, go ahead and create a new app from your dashboard. Don’t forget to take note of your `app_id`, `key`, `secret` and `cluster` as you will be required to use them later in this tutorial.\n\n\n## Create React-app\n\nTo quickly scaffold a React app, we will make use of the `create``-react-app` tool. This gives us easy access to the CLI tool that will be used to start building our chat application. \n\nIt is important that you have Node and npm installed on your machine.  Quickly follow this [link](https://nodejs.org/en/) to complete that, if you don’t have it already. To verify if you have Node and npm installed, open up the terminal and run the command below:\n\n```\n    npm -v \n    node -v\n```\n\nThe version for each one will be displayed, if they are installed. The latest versions are fine.\n\n\n## Installation\n\nNow, install create-react-app and also scaffold a new React app with the following commands: \n\n```\n    npm install -g create-react-app\n    \n    create-react-app react-pusher\n```\n\nOnce all the necessary files are installed, change directory into `react-``pusher` and start the application with:\n\n```\n    npm start\n```\n\nBy now, you should have a new tab opened in your default browser:\n\n![reactjs-websockets-first-run](//images.contentful.com/1es3ne0caaid/4pHsFx37gASYMaAyqwcYES/602097101ff4bb5e2b96fc98b3b0945c/making-reactjs-realtime-with-websockets-first-run.png)\n\nWe have successfully set up the front-end of the application, we will return to this very soon. Let’s proceed to setup the server application.\n\n## Node Server\n\nNode.js using the Express web framework will be used as our server application.  The server application, amongst other functions, will provide endpoints to send messages for our chat app so as to ensure interaction between users. There are number of dependencies required for the application server, so let’s install them immediately:\n\n```\n    npm install --save axios body-parser cors express pusher pusher-js\n```\n\nTo configure the entry point of the application, create a file called `server.js` and paste the code below into it:\n\n```\n    const Pusher = require('pusher');\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const cors = require('cors');\n    \n    const app = express();\n    \n    app.use(cors());\n    app.use(bodyParser.urlencoded({extended: false}));\n    app.use(bodyParser.json());\n    const pusher = new Pusher({\n      appId: 'APP_ID',\n      key: 'APP_KEY',\n      secret: 'APP_SECRET',\n      cluster: 'APP_CLUSTER',\n      encrypted: true\n    });\n    app.set('PORT', process.env.PORT || 5000);\n    \n    app.post('/message', (req, res) =\u003e {\n      const payload = req.body;\n      pusher.trigger('chat', 'message', payload);\n      res.send(payload)\n    });\n    \n    app.listen(app.get('PORT'), () =\u003e \n      console.log('Listening at ' + app.get('PORT')))\n```\n\nHere we initialised Pusher with the required credentials and then created an endpoint to process messages from the frontend of our application.\n\n## Building Components\n\nTo define a good application structure and fully see our chat app in action, lets create some components. In React, components can either be stateful or stateless depending on the functionality that it was created for. The common patter is to have state for container components only and pass those states to UI components as props.\n\nCreate components from the terminal with:\n\n```\n    touch ChatList.js ChatBox.js\n```\n\nand lastly their respective stylesheet:\n\n```\n    touch ChatList.css ChatBox.css\n```\n\nEach of the components’ logic need to be created. Lets do that now\n\n\n## ChatBox.js\n\nThis component contains the input field for accepting the users message and also displays a welcome message showing the username passed in from the parent component. Furthermore, `handleTextChange` is also passed from the parent component. This component is exported and configured like:\n\n```\n    import React from \"react\";\n    import './ChatBox.css';\n    export default ({ text, username, handleTextChange }) =\u003e (\n      \u003cdiv\u003e\n        \u003cdiv className=\"row\"\u003e\n        \u003cdiv className=\"col-xs-12\"\u003e\n          \u003cdiv className=\"chat\"\u003e\n            \u003cdiv className=\"col-xs-5 col-xs-offset-3\"\u003e\n              \u003cinput\n                type=\"text\"\n                value={text}\n                placeholder=\"chat here...\"\n                className=\"form-control\"\n                onChange={handleTextChange}\n                onKeyDown={handleTextChange}\n              /\u003e\n            \u003c/div\u003e\n            \u003cdiv className=\"clearfix\"\u003e\u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003ch4 className=\"greetings\"\u003eHello, {username}\u003c/h4\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n    );\n```\n\nThis component above is styled with imported stylesheet `ChatBox.css` :\n\n```\n    .greetings {\n        margin-top: 90px;\n        text-align: center;\n    }\n```\n\n## ChatList.js\n\nThis is responsible for displaying the list of chats inputted by each user. Added to it is the username and messages. This is also implemented as shown below and exported:\n\n```\n    import React from \"react\";\n    import \"./ChatList.css\";\n    import avatar from \"./avatar.png\";\n    export default ({ chats }) =\u003e (\n      \u003cul\u003e\n        {chats.map(chat =\u003e {\n          return (\n            \u003cdiv\u003e\n              \u003cdiv className=\"row show-grid\"\u003e\n                \u003cdiv className=\"col-xs-12\"\u003e\n                  \n                  \u003cdiv className=\"chatMessage\"\u003e\n                    \u003cdiv key={chat.id} className=\"box\"\u003e\n                      \u003cp\u003e\n                        \u003cstrong\u003e{chat.username}\u003c/strong\u003e\n                      \u003c/p\u003e\n                      \u003cp\u003e{chat.message}\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv className=\"imageHolder\"\u003e\n                    \u003cimg src={avatar} className=\"img-responsive avatar\" alt=\"logo\" /\u003e\n                  \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          );\n        })}\n      \u003c/ul\u003e\n    );\n```\n\nAnd the stylesheet `ChatList.css`:\n\n```\n    ul {\n      list-style-type: none;\n    }\n    .chat {\n      margin-top: 50px;\n    }\n    .chatMessage {\n      position: relative;\n      border: 1px solid #ccc;\n      border-radius: 5px;\n      margin: 20px auto;\n      width: 700px;\n      display: table;\n    }\n    .box {\n      background-color: #ffffff;\n      padding: 20px;\n      border-bottom: 1px solid #cccccc;\n    }\n    .imageHolder {\n      width: 50px;\n      height: 50px;\n      position: absolute;\n      top: 20px;\n      right: 50px;\n    }\n```\n\nWe have successfully completed the `ChatBox` and `ChatList` component. As far as the application is concerned, these modules are not yet available to be rendered in the parent app component yet.  To correct this, the `A``pp.js` file needs to be configured.\n\n## Parent Container Component (App.js)\n\nThis is regarded as the parent component. It ensures effective parent-child communication by passing props down to each child component. In App.js, a class named App is used to extend the React Component class and a constructor is defined with its properties and methods. In App.js required node modules and CSS file are imported with:\n\n```\n    import React, { Component } from 'react';\n    import axios from 'axios';\n    import Pusher from 'pusher-js';\n    import ChatList from './ChatList';\n    import ChatBox from './ChatBox';\n    import logo from './logo.svg';\n    import './App.css';\n    ...\n```    \n\nNext a class that extends the Component class imported from the React module is created. Also defined in this class is the state variables. The `super()` method is also called whenever a child class is extended from a parent class. In this case, props is also passed as a parameter. The state variables in the app are created and defined in the constructor like this:\n\n```\n    ...\n    class App extends Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n          text: '',\n          username: '',\n          chats: []\n        };\n      }\n      componentDidMount() {\n        ...\n      }\n      handleTextChange(e) {\n       ...\n      }\n      render() {\n        return (\n          \u003cdiv className=\"App\"\u003e\n           ...\n          \u003c/div\u003e\n        );\n      }\n    }\n    ...\n```\n\nAfter defining the required state of the app, you can start subscribing to the Pusher channel and binding to the events emitted by your server:\n\n```\n     componentDidMount() {\n        const username = window.prompt('Username: ', 'Anonymous');\n        this.setState({ username });\n        const pusher = new Pusher('APP_KEY', {\n          cluster: 'APP_CLUSTER',\n          encrypted: true\n        });\n        const channel = pusher.subscribe('chat');\n        channel.bind('message', data =\u003e {\n          this.setState({ chats: [...this.state.chats, data], test: '' });\n        });\n        this.handleTextChange = this.handleTextChange.bind(this);\n      }\n      \n      handleTextChange(e) {\n        if (e.keyCode === 13) {\n          const payload = {\n            username: this.state.username,\n            message: this.state.text\n          };\n          axios.post('http://localhost:5000/message', payload);\n        } else {\n          this.setState({ text: e.target.value });\n        }\n      }\n```\n\nBringing it all together:\n\n```\n    render() {\n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003cheader className=\"App-header\"\u003e\n              \u003cimg src={logo} className=\"App-logo\" alt=\"logo\" /\u003e\n              \u003ch1 className=\"App-title\"\u003eWelcome to React-Pusher Chat\u003c/h1\u003e\n            \u003c/header\u003e\n            \u003csection\u003e\n              \u003cChatList chats={this.state.chats} /\u003e\n              \u003cChatBox\n                text={this.state.text}\n                username={this.state.username}\n                handleTextChange={this.handleTextChange}\n              /\u003e\n            \u003c/section\u003e\n          \u003c/div\u003e\n        );\n      }\n```\n\nIn case you missed anything, you can find the complete App.js file [right here](https://github.com/christiannwamba/react-pusher-getting-started/blob/master/src/App.js).\n\n![reactjs-websockets-demo](//images.contentful.com/1es3ne0caaid/1O7NDl5Hv6Wia6AGEoS6mE/b842dd7761b6a525a9005e70daefd227/making-reactjs-realtime-with-websockets-demo.gif)\n\n## Conclusion\n\nThis article has covered the basic steps necessary to create a realtime chat application using React and Pusher. Moving forward, the concept demonstrated here can be built upon and extended to cater for any other realtime features you wish to build in your application. I hope you have found this tutorial helpful and feel free to improve on the code available [here](https://github.com/christiannwamba/react-pusher-getting-started) and drop comment(s) below, if any.","metaTitle":"Making React realtime with websockets","metaDescription":"Follow the steps you need to build a chat application using React and Pusher. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5LC6qtO0W4EYSUSKGSeAS4","type":"Entry","createdAt":"2018-02-22T15:04:12.881Z","updatedAt":"2018-02-28T11:02:32.754Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime PWA with React","url":"pwa-react","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2iE6KIsESkeOEcCmEmCQM8","type":"Entry","createdAt":"2018-02-13T12:06:21.229Z","updatedAt":"2018-02-14T10:08:19.561Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Yomi Eluwande","url":"yomi-eluwande","email":"yomi.eluwande@gmail.com","twitter":"https://twitter.com/yomieluwande","github":"https://github.com/yomete","guestWriter":true}}],"projectRepo":"https://github.com/yomete/pushercoins","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4kOTcNAC12gwWEyE6MimMY","type":"Entry","createdAt":"2018-02-12T15:08:28.581Z","updatedAt":"2018-02-26T12:31:12.766Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Trading","url":"trading","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5JtEWXIwaAaOM4KOWMO0qK","type":"Entry","createdAt":"2018-02-12T15:10:44.896Z","updatedAt":"2018-02-26T12:31:11.752Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Data Visualization","url":"data-visualization","type":"use case"}}],"reviewDate":"2017-09-14","description":"Build a realtime PWA displaying the price information about cryptocurrencies using React.js and Pusher.","prerequisite":"A basic understanding of React, Node.js and PWA are needed to follow this tutorial.","content":"Progressive Web Apps are experiences that combine the best of the web and the best of apps. They use service workers, HTTPS, a manifest file and an app shell architecture to deliver native app experiences to web applications.\n\nIn this tutorial, we’ll build a PWA called PusherCoins. PusherCoins shows the current and past price information about BTC, LTC, and ETH using data from [Cryptocurrency](http://cryptocompare.com). A demo can be seen below. The current Bitcoin, Ether, and Litecoin price will be updated every 10 seconds and the change will be realtime and seen across other connected clients connected via [Pusher](http://pusher.com).\n\n![pwa-react-demo](//images.contentful.com/1es3ne0caaid/1mJC8DNySUW282EAKeIw6C/bf8e90962701acda5f785ee00663cefd/pwa-react-demo.gif)\n\n## Building a PWA with create-react-app\n\nWe’re going to be building a realtime PWA with the help of [create-react-app](https://github.com/facebookincubator/create-react-app). \n\nSome of the common comments made by developers who are just getting into React are that it is hard to set up and there are so many ways to do things.\n`create-react-app` eliminates all of that by allowing developers to build React apps with little or no build configuration. All you have to do to get a working React app is install the npm module and run a single command.\n\nMost importantly, the production build of `create-react-app`  is a fully functional Progressive Web Application. This is done with the help of the `[sw-precache-webpack-plugin](https://github.com/goldhand/sw-precache-webpack-plugin)` which is integrated into the production configuration.\n\nLet’s get started with building the React app. Install the `create-react-app` tool with this command:\n\n\n```\n    npm install -g create-react-app\n```\n\nOnce the installation process has been completed, you can now create a new React app by using the command `create-react-app pushercoins`.\n\nThis generates a new folder with all the files required to run the React app and a service worker file. A manifest file is also created inside the `public` folder.\n\n![pwa-react-project-directory](//images.contentful.com/1es3ne0caaid/33lQkFdaW46aYOKmEEY6gE/bf8e90962701acda5f785ee00663cefd/pwa-react-project-directory.png)\n\nThe `manifest.json` file in the `public` folder is a simple JSON file that gives you, the ability to control how your app appears to the user and define its appearance at launch.\n\n```\n    {\n      \"short_name\": \"PusherCoins\",\n      \"name\": \"PusherCoins\",\n      \"icons\": [\n        {\n          \"src\": \"favicon.ico\",\n          \"sizes\": \"192x192\",\n          \"type\": \"image/png\"\n        },\n        {\n          \"src\": \"android-chrome-512x512.png\",\n          \"sizes\": \"512x512\",\n          \"type\": \"image/png\"\n        }\n      ],\n      \"start_url\": \"./index.html\",\n      \"display\": \"standalone\",\n      \"theme_color\": \"#000000\",\n      \"background_color\": \"#ffffff\"\n    }\n```\n\nWe notify the app of the `manifest.json` file by linking to it in line 12 of the `index.html` file.\n\n```\n    \u003clink rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\"\u003e\n```\n\nNext up, let’s go through the `registerServiceWorker.js` file and see how the service worker file works. The service worker file can be seen in the `src` folder on on [GitHub](https://github.com/yomete/pushercoins/blob/master/src/registerServiceWorker.js).\n\nThe service worker code basically registers a service worker for the React app. We first check if the app is being served from localhost via the `isLocalhost` const value that will either return a truthy or falsy value. The `register()` function helps to register the service worker to the React app only if its in a production mode and if the browser supports Service workers. The `unregister()` function helps to unregister the service worker.\n\nLet’s find out if the service worker really works. To do that we’ll need to prepare the React app for production as the Service Worker code only works in production mode. The `npm run build` command helps with that.\n\nThis command builds the app for production to the `build` folder and correctly bundles React in production mode and optimizes the build for the best performance. It also registers the service worker. Run the command and the output from the terminal should look like something below.\n\n![pwa-react-npm-run-output](//images.contentful.com/1es3ne0caaid/RdDPMgk3W6moK48G2SIS6/bf8e90962701acda5f785ee00663cefd/pwa-react-npm-run-output.png)\n\nWe get to see the size of the files in our React app and most importantly how to run the app with the aid of a static server. We are going to use [serve](https://www.npmjs.com/package/serve) npm package to, wait for it, serve(😀) the React app. \nTherefore, use the following commands to install serve on your computer and also setup a static server for the app.\n\n```\n    npm i serve -g\n    \n    serve -s build\n```\n\nYour application should be up and running at http://localhost:5000. So how do we check if a site is a PWA? We can do that by checking the service worker section in the Application tab in the Developer tools.\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2017/09/build-realtime-pwa-react-service-worker-devtools.png\" alt=\"\" width=\"1280\" height=\"219\" class=\"alignnone size-full wp-image-3489\" /\u003e\n\nWe could also check by using the [Lighthouse](https://developers.google.com/web/tools/lighthouse/) tool. Lighthouse is an [open-source](https://github.com/GoogleChrome/lighthouse), automated tool for improving the quality of web pages. It has audits for performance, accessibility and progressive web apps. Lighthouse is currently available as an extension on [Google Chrome](https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk) only and as an [npm](https://www.npmjs.com/package/lighthouse) package.\n\nI used the Lighthouse extension to generate a report for the newly created React app in production and got the following result.\n\n![pwa-react-lighthouse](//images.contentful.com/1es3ne0caaid/6w4fXnjeXCe0O0SA4sSAOk/bf8e90962701acda5f785ee00663cefd/pwa-react-lighthouse.png)\n\nThe React app got a score of 91 out of 100 for the PWA section, which isn’t that bad. All audits were passed bar the one about HTTPS, which cannot be implemented right now because the app is still on a local environment.\n\nNow that we know how to check if an app is a PWA, let’s go ahead to build the actual app. \nAs we’ll be building this PWA with React, it’s very important that we think in terms of React components. \n\nTherefore, the React app would be divided into three components.\n\n1. `History.js` houses all the code needed to show the past prices of BTC, ETH, and LTC.\n2. `Today.js` houses all the code needed to show the current price of BTC, ETH and LTC.\n3. `App.js` houses both `History.js` and `Today.js`\n\n![pwa-react-components](//images.contentful.com/1es3ne0caaid/ypI7IqLUhqmAqUgEs4AAy/bf8e90962701acda5f785ee00663cefd/pwa-react-components.png)\n\nAlright, let’s continue with building the app. We’ll need to create two folders inside the `src` folder, `Today` and `History`. In the newly created folders, create the files `Today.js`, `Today.css` and `History.js`, `History.css` respectively. Your project directory should look like the one below.\n\n![pwa-react-components-project-directory](//images.contentful.com/1es3ne0caaid/3cahl0boIESA6c8g2Yskw0/bf8e90962701acda5f785ee00663cefd/pwa-react-components-project-directory.png)\n\nBefore we get started on the `Today` and `History` components, let’s build out the app shell.\n\n\u003e An app shell is the minimal HTML, CSS and JavaScript required to power the user interface and when cached offline can ensure instant**,** reliably good performance to users on repeat visits. You can read more about app shells [here](https://developers.google.com/web/fundamentals/architecture/app-shell).\n\nOpen up the `App.js` file and replace with the following code:\n\n```\n    // Import React and Component\n    import React, { Component } from 'react';\n    // Import CSS from App.css\n    import './App.css';\n    // Import the Today component to be used below\n    import Today from './Today/Today'\n    // Import the History component to be used below\n    import History from './History/History'\n    \n    class App extends Component {\n      render() {\n        return (\n          \u003cdiv className=\"\"\u003e\n              \u003cdiv className=\"topheader\"\u003e\n                  \u003cheader className=\"container\"\u003e\n                      \u003cnav className=\"navbar\"\u003e\n                          \u003cdiv className=\"navbar-brand\"\u003e\n                              \u003cspan className=\"navbar-item\"\u003ePusherCoins\u003c/span\u003e\n                          \u003c/div\u003e\n                          \u003cdiv className=\"navbar-end\"\u003e\n                              \u003ca className=\"navbar-item\" href=\"https://pusher.com\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ePusher.com\u003c/a\u003e\n                          \u003c/div\u003e\n                      \u003c/nav\u003e\n                  \u003c/header\u003e\n              \u003c/div\u003e\n              \u003csection className=\"results--section\"\u003e\n                  \u003cdiv className=\"container\"\u003e\n                      \u003ch1\u003ePusherCoins is a realtime price information about\u003cbr\u003e\u003c/br\u003e BTC, ETH and LTC.\u003c/h1\u003e\n                  \u003c/div\u003e\n                  \u003cdiv className=\"results--section__inner\"\u003e\n                      \u003cToday /\u003e\n                      \u003cHistory /\u003e\n                  \u003c/div\u003e\n              \u003c/section\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default App;\n```\n\nThe `App.css` file should be replaced with the following: \n\n```\n    .topheader {\n      background-color: #174c80;\n    }\n    .navbar {\n      background-color: #174c80;\n    }\n    .navbar-item {\n      color: #fff;\n    }\n    .results--section {\n      padding: 20px 0px;\n      margin-top: 40px;\n    }\n    h1 {\n      text-align: center;\n      font-size: 30px;\n    }\n```\nWe’ll also be using the Bulma CSS framework, so add the line of code below to your `index.html`\nin `public` folder.\n\n```\n    \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.4.3/css/bulma.min.css\"\u003e\n```\n\n## Creating the React components\n\nNext up, open up the `Today.js` file as we’ll soon be writing the code for that component. So what does this component do?\n\nIt’s responsible for getting the current prices of Bitcoin, Ether and Litecoin from the Cryptocurrency API and displaying it on the frontend. Let’s write the code. \n\nThe first thing we do is import React and its Component module using ES6 `import`, we also import axios. axios is used to make API requests to the Cryptocurrency API and can be installed by running `npm install axios` in your terminal\n\n```\n    import React, { Component } from 'react';\n    import './Today.css'\n    import axios from 'axios'\n```\n\nThe next thing to do is create an [ES6 class](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes) named `Today` that extends the component module from `react`.\n\n```\n    class Today extends Component {\n        // Adds a class constructor that assigns the initial state values:\n        constructor () {\n            super();\n            this.state = {\n                btcprice: '',\n                ltcprice: '',\n                ethprice: ''\n            };\n        }\n        // This is called when an instance of a component is being created and inserted into the DOM.\n        componentWillMount () {\n            axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC\u0026tsyms=USD')\n                .then(response =\u003e {\n                    // We set the latest prices in the state to the prices gotten from Cryptocurrency.\n                    this.setState({ btcprice: response.data.BTC.USD });\n                    this.setState({ ethprice: response.data.ETH.USD });\n                    this.setState({ ltcprice: response.data.LTC.USD });\n                })\n                // Catch any error here\n                .catch(error =\u003e {\n                    console.log(error)\n                })\n        }\n        // The render method contains the JSX code which will be compiled to HTML.\n        render() {\n            return (\n                \u003cdiv className=\"today--section container\"\u003e\n                    \u003ch2\u003eCurrent Price\u003c/h2\u003e\n                    \u003cdiv className=\"columns today--section__box\"\u003e\n                        \u003cdiv className=\"column btc--section\"\u003e\n                            \u003ch5\u003e${this.state.btcprice}\u003c/h5\u003e\n                            \u003cp\u003e1 BTC\u003c/p\u003e\n                        \u003c/div\u003e\n                        \u003cdiv className=\"column eth--section\"\u003e\n                            \u003ch5\u003e${this.state.ethprice}\u003c/h5\u003e\n                            \u003cp\u003e1 ETH\u003c/p\u003e\n                        \u003c/div\u003e\n                        \u003cdiv className=\"column ltc--section\"\u003e\n                            \u003ch5\u003e${this.state.ltcprice}\u003c/h5\u003e\n                            \u003cp\u003e1 LTC\u003c/p\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            )\n        }\n    }\n    \n    export default Today;\n```\n\nIn the code block above, we imported the `react` and `component` class from react. We also imported `axios` which will be used for API requests. In the `componentWillMount` function, we send an API request to get the current cryptocurrency rate from Cryptocurrency. The response from the API is what will be used to set the value of the state.\n\nLet’s not forget the CSS for the component. Open up `Today.css` and type in the following CSS code.\n\n```\n    .today--section {\n        margin-bottom: 40px;\n        padding: 0 50px;\n    }\n    .today--section h2 {\n        font-size: 20px;\n    }\n    .today--section__box {\n        background-color: white;\n        padding: 20px;\n        margin: 20px 0;\n        border-radius: 4px;\n        box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\n    }\n    .btc--section {\n        text-align: center;\n        border-right: 1px solid #DAE1E9;\n    }\n    .btc--section h5 {\n        font-size: 30px;\n    }\n    .eth--section {\n        text-align: center;\n        border-right: 1px solid #DAE1E9;\n    }\n    .eth--section h5 {\n        font-size: 30px;\n    }\n    .ltc--section {\n        text-align: center;\n    }\n    .ltc--section h5 {\n        font-size: 30px;\n    }\n    @media (max-width: 480px) {\n        .eth--section {\n            border-right: none;\n        }\n        .btc--section {\n            border-right: none;\n        }\n        .today--section {\n            margin-top:  50px;\n        }\n    }\n```\n\nThe next step, is to write the code for `History.js`. This component is responsible for showing us the prices of BTC, ETH and LTC from the past five days. We’ll be using the `axios` package as well as the `moment` package for formatting dates. Moment.js can be installed by running `npm install moment` in your terminal. Open up the `History.js` file, the first thing we do is import React and its Component module using ES6 `import`, we also import axios and Moment.js.\n\n```\n    import React, { Component } from 'react';\n    import './History.css'\n    import axios from 'axios'\n    import moment from 'moment'\n```\n\nLike we did in the `Today.js` component, we’ll create an [ES6 class](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes) named `History` that extends the component module from `react` and also create some functions which will be bound with `this`.\n\n```\n    class History extends Component {\n      constructor () {\n        super();\n        this.state = {\n            todayprice: {},\n            yesterdayprice: {},\n            twodaysprice: {},\n            threedaysprice: {},\n            fourdaysprice: {}\n        }\n        this.getBTCPrices = this.getBTCPrices.bind(this);\n        this.getETHPrices = this.getETHPrices.bind(this);\n        this.getLTCPrices = this.getLTCPrices.bind(this);\n      }\n      // This function gets the ETH price for a specific timestamp/date. The date is passed in as an argument\n      getETHPrices (date) {\n          return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH\u0026tsyms=USD\u0026ts=' + date);\n      }\n      // This function gets the BTC price for a specific timestamp/date. The date is passed in as an argument\n      getBTCPrices (date) {\n          return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=BTC\u0026tsyms=USD\u0026ts=' + date);\n      }\n      // This function gets the LTC price for a specific timestamp/date. The date is passed in as an argument\n      getLTCPrices (date) {\n          return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=LTC\u0026tsyms=USD\u0026ts=' + date);\n      }\n    }\n```\n\nAs seen in the code block above, we have defined state values that will hold the price information about BTC, ETH, and LTC for the past five days. We also created functions that returns API requests to Cryptocurrency. Now, let’s write the code that utilizes the functions above and stores the various prices in the state and renders them. \n\nIt’s important to note that Cryptocurrency currently does not have an API endpoint that allows you to get a date range of price information. You’d have to get the timestamp of the past five days and then use them individually to get the required data you want.\nA workaround will be to use moment.js to get the timestamp of the particular day you want using the `.subtract` [method](https://momentjs.com/docs/#/manipulating/subtract/) and `.unix` [method](https://momentjs.com/docs/#/displaying/unix-timestamp/) . So for example, to get a timestamp of two days ago, you’d do something like:\n\n```\n    moment().subtract(2, 'days').unix();\n```\n\nOkay, so let’s continue with the rest of the code and write out the functions that gets the values for the past 5 days.\n\n```\n    // This function gets the prices for the current date.\n    getTodayPrice () {\n        // Get today's date in timestamp\n        let t = moment().unix()\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) =\u003e {\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                }\n                // Set the state of todayprice to the content of the object f\n                this.setState({ todayprice: f });\n            }));\n    }\n    // This function gets the prices for the yesterday.\n    getYesterdayPrice () {\n        // Get yesterday's date in timestamp\n        let t = moment().subtract(1, 'days').unix();\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) =\u003e {\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                }\n                // Set the state of yesterdayprice to the content of the object f\n                this.setState({ yesterdayprice: f });\n            }));\n    }\n    // This function gets the prices for the two days ago.\n    getTwoDaysPrice () {\n        // Get the date for two days ago in timestamp\n        let t = moment().subtract(2, 'days').unix();\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) =\u003e {\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                }\n                // Set the state of twodaysprice to the content of the object f\n                this.setState({ twodaysprice: f });\n            }));\n    }\n    // This function gets the prices for the three days ago.\n    getThreeDaysPrice () {\n        // Get the date for three days ago in timestamp\n        let t = moment().subtract(3, 'days').unix();\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) =\u003e {\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                }\n                // Set the state of threedaysprice to the content of the object f\n                this.setState({ threedaysprice: f });\n            }));\n    }\n    // This function gets the prices for the four days ago.\n    getFourDaysPrice () {\n        // Get the date for four days ago in timestamp\n        let t = moment().subtract(4, 'days').unix();\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\n            .then(axios.spread((eth, btc, ltc) =\u003e {\n                let f = {\n                    date: moment.unix(t).format(\"MMMM Do YYYY\"),\n                    eth: eth.data.ETH.USD,\n                    btc: btc.data.BTC.USD,\n                    ltc: ltc.data.LTC.USD\n                }\n                // Set the state of fourdaysprice to the content of the object f\n                this.setState({ fourdaysprice: f });\n            }));\n    }\n    // This is called when an instance of a component is being created and inserted into the DOM.\n    componentWillMount () {\n        this.getTodayPrice();\n        this.getYesterdayPrice();\n        this.getTwoDaysPrice();\n        this.getThreeDaysPrice();\n        this.getFourDaysPrice();\n    }\n```\n\nSo we have five functions above, they basically just use `moment.js` to get the date required and then pass that date into the functions we first created above, to get the price information from Cryptocurrency. We use `axios.all` and `axios.spread` which is a way of of dealing with concurrent requests with callbacks. The functions will be run in the `componentWillMount` function.\n\nFinally, for `History.js`, we’ll write the render function.\n\n```\n    render() {\n            return (\n                \u003cdiv className=\"history--section container\"\u003e\n                    \u003ch2\u003eHistory (Past 5 days)\u003c/h2\u003e\n                    \u003cdiv className=\"history--section__box\"\u003e\n                        \u003cdiv className=\"history--section__box__inner\"\u003e\n                            \u003ch4\u003e{this.state.todayprice.date}\u003c/h4\u003e\n                            \u003cdiv className=\"columns\"\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 BTC = ${this.state.todayprice.btc}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 ETH = ${this.state.todayprice.eth}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 LTC = ${this.state.todayprice.ltc}\u003c/p\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv className=\"history--section__box__inner\"\u003e\n                            \u003ch4\u003e{this.state.yesterdayprice.date}\u003c/h4\u003e\n                            \u003cdiv className=\"columns\"\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 BTC = ${this.state.yesterdayprice.btc}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 ETH = ${this.state.yesterdayprice.eth}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 LTC = ${this.state.yesterdayprice.ltc}\u003c/p\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv className=\"history--section__box__inner\"\u003e\n                            \u003ch4\u003e{this.state.twodaysprice.date}\u003c/h4\u003e\n                            \u003cdiv className=\"columns\"\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 BTC = ${this.state.twodaysprice.btc}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 ETH = ${this.state.twodaysprice.eth}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 LTC = ${this.state.twodaysprice.ltc}\u003c/p\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv className=\"history--section__box__inner\"\u003e\n                            \u003ch4\u003e{this.state.threedaysprice.date}\u003c/h4\u003e\n                            \u003cdiv className=\"columns\"\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 BTC = ${this.state.threedaysprice.btc}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 ETH = ${this.state.threedaysprice.eth}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 LTC = ${this.state.threedaysprice.ltc}\u003c/p\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                        \u003cdiv className=\"history--section__box__inner\"\u003e\n                            \u003ch4\u003e{this.state.fourdaysprice.date}\u003c/h4\u003e\n                            \u003cdiv className=\"columns\"\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 BTC = ${this.state.fourdaysprice.btc}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 ETH = ${this.state.fourdaysprice.eth}\u003c/p\u003e\n                                \u003c/div\u003e\n                                \u003cdiv className=\"column\"\u003e\n                                    \u003cp\u003e1 LTC = ${this.state.fourdaysprice.ltc}\u003c/p\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n    \n                    \u003c/div\u003e\n                \u003c/div\u003e\n            )\n        }\n    }\n    \n    export default History;\n```\n\nWe can now run the `npm start` command to see the app at http://localhost:3000. \n\n![pwa-react-pushercoins](//images.contentful.com/1es3ne0caaid/3IfTKCLwCIky02WK06WW0e/bf8e90962701acda5f785ee00663cefd/pwa-react-pushercoins.png)\n\nWe can quickly check to see how the current state of this app would fare as a PWA. Remember we have a service worker file which currently caches all the resources needed for this application. So you can run the `npm run build` command to put the app in production mode, and check its PWA status with Lighthouse.\n\n![pwa-react-light](//images.contentful.com/1es3ne0caaid/7sc2HDKIfuECq8AuIsOAyw/bf8e90962701acda5f785ee00663cefd/pwa-react-light.png)\n\nWe got a 91/100 score. Whoop! The only audit that failed to pass is the HTTPS audit which cannot be implemented right now because the app is still on a local server. \n\nOur application is looking good and fast apparently (Interactive at \u003c 3s), let’s add realtime functionalities by adding Pusher.\n\n## Make it realtime with Pusher\n\nBy using Pusher, we can easily add realtime functionalities to the app. Pusher makes it simple to bind UI interactions to events that are triggered from any client or server. Let’s setup Pusher.\n\nLog into your [dashboard](http://dashboard.pusher.com) (or [create](http://pusher.com) a new account if you’re a new user) and create a new app. Copy your `app_id`, `key`, `secret` and `cluster` and store them somewhere as we’ll be needing them later.\n\nWe’ll also need to create a server that will help with triggering events to Pusher and we’ll create one with Node.js. In the root of your project directory, create a file named `server.js` and type in the following code:\n\n```\n    // server.js\n    const express = require('express')\n    const path = require('path')\n    const bodyParser = require('body-parser')\n    const app = express()\n    const Pusher = require('pusher')\n    \n    //initialize Pusher with your appId, key, secret and cluster\n    const pusher = new Pusher({\n        appId: 'APP_ID',\n        key: 'APP_KEY',\n        secret: 'APP_SECRET',\n        cluster: 'YOUR_CLUSTER',\n        encrypted: true\n    })\n    \n    // Body parser middleware\n    app.use(bodyParser.json())\n    app.use(bodyParser.urlencoded({ extended: false }))\n    \n    // CORS middleware\n    app.use((req, res, next) =\u003e {\n        // Website you wish to allow to connect\n        res.setHeader('Access-Control-Allow-Origin', '*')\n        // Request methods you wish to allow\n        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE')\n        // Request headers you wish to allow\n        res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type')\n        // Set to true if you need the website to include cookies in the requests sent\n        // to the API (e.g. in case you use sessions)\n        res.setHeader('Access-Control-Allow-Credentials', true)\n        // Pass to next layer of middleware\n        next()\n    })\n    \n    // Set port to be used by Node.js\n    app.set('port', (5000))\n    \n    app.get('/', (req, res) =\u003e {\n        res.send('Welcome')\n    })\n    \n    // API route in which the price information will be sent to from the clientside\n    app.post('/prices/new', (req, res) =\u003e {\n        // Trigger the 'prices' event to the 'coin-prices' channel\n        pusher.trigger( 'coin-prices', 'prices', {\n            prices: req.body.prices\n        });\n        res.sendStatus(200);\n    })\n    \n    app.listen(app.get('port'), () =\u003e {\n        console.log('Node app is running on port', app.get('port'))\n    })\n```    \n\nThis is a simple Node.js server that uses Express as its web framework. Pusher is initialized with the dashboard credentials, and the various API routes are also defined. Don’t forget to install the packages in use.\n\n```\n    npm install express body-parser pusher\n```\n\nWe’ll also need to add a line of code to the `package.json` file so as to allow API proxying. Since we will be running a backend server, we need to find a way to run the React app and backend server together. API proxying helps with that. \n\nTo tell the development server to proxy any unknown requests (`/prices/new`) to your API server in development, add a `proxy` field to your `package.json` immediately after the `scripts` object.\n\n``` language-bash\n    \"proxy\": \"http://localhost:5000\"\n```\n\nWe only need to make the current price realtime and that means we’ll be working on the `Today` component, so open up the file.  The Pusher Javascript library is needed, so run `npm install pusher-js` to install that.\n\nThe first thing to do is import the `pusher-js` package.\n\n```\n    import Pusher from 'pusher-js'\n```\n\nIn the `componentWillMount` method, we establish a connection to Pusher using the credentials obtained from the dashboard earlier.\n\n```\n    // establish a connection to Pusher\n    this.pusher = new Pusher('APP_KEY', {\n        cluster: 'YOUR_CLUSTER',\n        encrypted: true\n    });\n    // Subscribe to the 'coin-prices' channel\n    this.prices = this.pusher.subscribe('coin-prices');\n```\n\nWe need a way to query the API every 10 seconds so as to get the latest price information. We can use the `setInterval` function to send an API request every 10 seconds and then send the result of that API request to Pusher so that it can be broadcasted to other clients. \n\nBefore we create the setInterval function, let’s create a simple function that takes in an argument and sends it to the backend server API.\n\n```\n    sendPricePusher (data) {\n        axios.post('/prices/new', {\n            prices: data\n        })\n            .then(response =\u003e {\n                console.log(response)\n            })\n            .catch(error =\u003e {\n                console.log(error)\n            })\n    }\n```\n Let’s create the `setInterval` function. We will need to create a `componentDidMount` method so we can put the interval code in it.\n\n```\n    componentDidMount () {\n        setInterval(() =\u003e {\n            axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC\u0026tsyms=USD')\n                .then(response =\u003e {\n                    this.sendPricePusher (response.data)\n                })\n                .catch(error =\u003e {\n                    console.log(error)\n                })\n        }, 10000)\n    }\n```\n\nSo right now, the app queries the API every 10 seconds and sends the data to Pusher, but we still haven’t made the app realtime. We need to implement the realtime functionality so that other clients/users connected to the application can see price change in realtime. That will be done by using Pusher’s [bind method](https://pusher.com/docs/client_api_guide/client_events#bind-events).\n\nInside the `componentDidMount` method, add the code below, immediately after the `setInterval` function.\n\n```\n    // We bind to the 'prices' event and use the data in it (price information) to update the state values, thus, realtime changes \n    this.prices.bind('prices', price =\u003e {\n            this.setState({ btcprice: price.prices.BTC.USD });\n            this.setState({ ethprice: price.prices.ETH.USD });\n            this.setState({ ltcprice: price.prices.LTC.USD });\n        }, this);\n```\n\nThe code block above, listens for data from Pusher, since we already subscribed to that channel and uses the data it gets to update the state values, thus, realtime changes.\nWe now have Progressive Realtime App! See a demo below.\n\n![pwa-react-demo](//images.contentful.com/1es3ne0caaid/1mJC8DNySUW282EAKeIw6C/bf8e90962701acda5f785ee00663cefd/pwa-react-demo.gif)\n\n## Offline Strategies\n\nRight now, if we were to go offline, our application would not be able to make API requests to get the various prices. So how do we make sure that we still able to see some data even when the network fails?\n\nOne way to go about it would be to use Client Side Storage. So how would this work? We’ll simply use localStorage to cache data.\n\nlocalStorage makes it possible to store values in the browser which can survive the browser session. It is one type of the [Web Storage API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API), which is an API for storing key-value pairs of data within the browser. It has a limitation of only storing strings. That means any data being stored has to be *stringified*  with the use of `JSON.stringify` \n\n It’s important to note that there are other types of client side storage, such as Session Storage, Cookies, IndexedDB, and WebSQL. Local Storage can be used for a demo app like this, but in a production app, it’s advisable to use a solution like IndexedDB which offers more features like better structure, multiple tables and databases, and more storage.\n\nThe goal will be to display the prices from localStorage. That means we’ll have to save the results from various API requests into the localStorage and set the state to the values in the localStorage. This will ensure that when the network is unavailable and API requests are failing, we would still be able to see some data, albeit cached data. Let’s do just that. Open up the `Today.js` file and edit the code inside the callback function of the API request to get prices with the one below.\n\n```\n    axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC\u0026tsyms=USD')\n        .then(response =\u003e {\n            this.setState({ btcprice: response.data.BTC.USD });\n            localStorage.setItem('BTC', response.data.BTC.USD);\n    \n            this.setState({ ethprice: response.data.ETH.USD });\n            localStorage.setItem('ETH', response.data.ETH.USD);\n    \n            this.setState({ ltcprice: response.data.LTC.USD });\n            localStorage.setItem('LTC', response.data.LTC.USD);\n        })\n        .catch(error =\u003e {\n            console.log(error)\n        })\n```\n\nWe are essentially storing the values gotten from the API request to the localStorage. With our values now in the localStorage, we’ll need to set the state values to the saved values in localStorage. Inside the `componentDidMount` method, before the `setInterval` code, add the following code.\n\n```\n    if (!navigator.onLine) {\n        this.setState({ btcprice: localStorage.getItem('BTC') });\n        this.setState({ ethprice: localStorage.getItem('ETH') });\n        this.setState({ ltcprice: localStorage.getItem('LTC') });\n    }\n```\n\nThe code above is only executed when the browser is offline. We can check for internet connectivity by using `navigator.onLine`. The `navigator.onLine` property returns the online status of the browser. The property returns a boolean value, with `true` meaning online and `false` meaning offline.\n\nLet’s now implement localStorage for `History.js` too. We’ll need to save the values gotten from the API in these functions ( `getTodayPrice(), getYesterdayPrice(), getTwoDaysPrice(), getThreeDaysPrice(), this.getFourDaysPrice()` ) to the localStorage. \n\n```\n    // getTodayPrice()\n    localStorage.setItem('todayprice', JSON.stringify(f));\n    this.setState({ todayprice: f });\n    \n    // getYesterdayPrice()\n    localStorage.setItem('yesterdayprice', JSON.stringify(f));\n    this.setState({ yesterdayprice: f });\n    \n    // getTwoDaysPrice()\n    localStorage.setItem('twodaysprice', JSON.stringify(f));\n    this.setState({ twodaysprice: f });\n    \n    // getThreeDaysPrice()\n    localStorage.setItem('threedaysprice', JSON.stringify(f));\n    this.setState({ threedaysprice: f });\n    \n    // getFourDaysPrice()\n    localStorage.setItem('fourdaysprice', JSON.stringify(f));\n    this.setState({ fourdaysprice: f });\n```\n\nWe are essentially storing the values gotten from the API request to the localStorage. With our values now in the localStorage, we’ll also need to set the state values to the saved values in localStorage like we did in the `Today` component. Create a `componentDidMount` method and add the following code inside the method.\n\n```\n    componentDidMount () {\n        if (!navigator.onLine) {\n            this.setState({ todayprice: JSON.parse(localStorage.getItem('todayprice')) });\n            this.setState({ yesterdayprice: JSON.parse(localStorage.getItem('yesterdayprice')) });\n            this.setState({ twodaysprice: JSON.parse(localStorage.getItem('twodaysprice')) });\n            this.setState({ threedaysprice: JSON.parse(localStorage.getItem('threedaysprice')) });\n            this.setState({ fourdaysprice: JSON.parse(localStorage.getItem('fourdaysprice')) });\n        }\n    }\n```\n\nNow our application will display cached values when there’s no internet connectivity.\n\n![pwa-react-offlinemode](//images.contentful.com/1es3ne0caaid/5SasJ5fSKWiYMkcIKemMa0/bf8e90962701acda5f785ee00663cefd/pwa-react-offlinemode.png)\n\nIt’s important to note that the app is time sensitive. Time sensitive data are not really useful to users when cached. What we can do is, add a status indicator warning the user when they are offline, that the data being shown might be stale and an internet connection is needed to show the latest data.\n\n## Deploy the app to production\n\nNow that we’re done building, let’s deploy the app to production and carry out a final Lighthouse test. We’ll be using [now.sh](http://now.sh) for deployment, `now` allows you to take your JavaScript (Node.js) or Docker powered websites, applications and services to the cloud with ease. You can find installation instructions on the site. You can also use any other deployment solution, I’m using Now because of its simplicity.\n\nPrepare the app for production by running the command below in the terminal\n\n```\n    npm run build\n```\n\nThis builds the app for production to the `build` folder. Alright, so the the next thing to do is to create a server in which the app will be served from. Inside the `build` folder, create a file named `server.js` and type in the following code.\n\n```\n    const express = require('express')\n    const path = require('path')\n    const bodyParser = require('body-parser')\n    const app = express()\n    const Pusher = require('pusher')\n    \n    const pusher = new Pusher({\n        appId: 'APP_ID',\n        key: 'YOUR_KEY',\n        secret: 'YOUR SECRET',\n        cluster: 'YOUR CLUSTER',\n        encrypted: true\n    })\n    \n    app.use(bodyParser.json())\n    app.use(bodyParser.urlencoded({ extended: false }))\n    app.use(express.static(path.join(__dirname)));\n    \n    app.use((req, res, next) =\u003e {\n        // Website you wish to allow to connect\n        res.setHeader('Access-Control-Allow-Origin', '*')\n        // Request methods you wish to allow\n        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE')\n        // Request headers you wish to allow\n        res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type')\n        // Set to true if you need the website to include cookies in the requests sent\n        // to the API (e.g. in case you use sessions)\n        res.setHeader('Access-Control-Allow-Credentials', true)\n        // Pass to next layer of middleware\n        next()\n    })\n    \n    app.set('port', (5000))\n    \n    app.get('/', (req, res) =\u003e {\n        res.sendFile(path.join(__dirname + '/index.html'));\n    });\n    \n    app.post('/prices/new', (req, res) =\u003e {\n        pusher.trigger( 'coin-prices', 'prices', {\n            prices: req.body.prices\n        });\n        res.sendStatus(200);\n    })\n    \n    app.listen(app.get('port'), () =\u003e {\n        console.log('Node app is running on port', app.get('port'))\n    })\n```\n\nThis is basically the same code we wrote in the `server.js` file in the root of the project directory. The only addition here is that we set the home route to serve the `index.html` file in the `public` folder. Next up, run the command `npm init` to create a `package.json` file for us and lastly install the packages needed with the command below.\n\n```\n    npm install express body-parser pusher\n```\n\nYou can now see the application by running `node server.js` inside the `build` folder and your app should be live at http://localhost:5000\n\nDeploying to Now is very easy, all you have to do is run the command `now deploy` and Now takes care of everything, with a live URL automatically generated.\n\nIf everything goes well, your app should be deployed and live now, in this case, https://build-zrxionqses.now.sh/. Now automatically provisions all deployments with SSL, so we can finally generate the Lighthouse report again to check the PWA status. A live Lighthouse report of the site can be seen [here](https://googlechrome.github.io/lighthouse/viewer/?gist=4da584b2d889a4f7ce9e439659ea5441).\n\n![pwa-react-lighthousecomplete](//images.contentful.com/1es3ne0caaid/2Lrip4t3TaU02SAg2emKU4/bf8e90962701acda5f785ee00663cefd/pwa-react-lighthousecomplete.png)\n\n100/100! Whoop! All the PWA audits were passed and we got the site to load under 5s (2.6s).\n\n## App Install\n\nOne of the features of PWAs is the web app install banner. So how does this work? A PWA will install a web app install banner only if the following conditions are met:\n- Has a web app manifest file with:\n  - a `short_name` (used on the home screen)\n  - a `name` (used in the banner)\n  - a 144x144 png icon (the icon declarations must include a mime type of `image/png`)\n  - a `start_url` that loads\n- Has a [service worker](https://developers.google.com/web/fundamentals/getting-started/primers/service-workers) registered on your site.\n- Is served over [HTTPS](https://developers.google.com/web/fundamentals/security/encrypt-in-transit/why-https) (a requirement for using service worker).\n- Is visited at least twice, with at least five minutes between visits.\n\nThe `manifest.json` file in the `public` folder meets all the requirements above, we have a service worker registered on the site and the app is served over HTTPS at https://build-zrxionqses.now.sh/.\n\n![pwa-react-banner](//images.contentful.com/1es3ne0caaid/5ShDNuOOGW6iQEK0CyggQS/bf8e90962701acda5f785ee00663cefd/pwa-react-banner.png)\n\n## Conclusion\nIn this tutorial, we’ve seen how to use ReactJS, Pusher and Service Workers to build a realtime PWA. We saw how service workers can be used to cache assets and resources so as to reduce the load time and also make sure that the app works even when offline.\n\nWe also saw how to use localStorage to save data locally for cases when the browser looses connectivity to the internet.\n\nThe app can be viewed live \u003ca href=\"https://build-zrxionqses.now.sh/\"\u003ehere\u003c/a\u003e and you can check out the Github repo [here](https://github.com/yomete/pushercoins). See if you can change stuff and perhaps make the app load faster!","metaTitle":"Build a realtime PWA with React","metaDescription":"In this tutorial you'll build a realtime PWA displaying the current and past price information about popular cryptocurrencies like BTC, LTC, and ETH, using React.js and Pusher."}}],"defaultValue":"React","queryType":"tag","pages":7,"route":"/tutorials","query":{"tag":"React","page":"6"}}},"page":"/tutorials","query":{"tag":"React","page":"6"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=React&page=6 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:15 GMT -->
</html>