<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&page=17 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:47:37 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">296</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorials.html" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials1bbb.html?product=Beams" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value=""/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:none;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/social-feed-ruby-rails.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Ruby</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a social feed with Ruby on Rails and PostgreSQL</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This tutorial will show you how to create a simple social media feed using Ruby on Rails. Users will be able to make pos...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/geofencing-nestjs-googlemaps.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Maps<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a geofencing web app using Nest.js and the Google Maps API</h3><p class="css-k12xad e5jrto45">Build a web app using Nest.js and the Google Maps API. The app allows you to select a user and center on their location,...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-paint-react.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Collaboration<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live paint application with React</h3><p class="css-k12xad e5jrto45">Learn to build a collaborative painting application with React and Node.js. Users are able to work together on the same ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/group-chat-angular-dialogflow.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a group chat app with Angular and Dialogflow</h3><p class="css-k12xad e5jrto45">Build an Angular group chat app, and integrate a chatbot using Dialogflow. Users will be able to talk to each other, or ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-chat-ruby.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Ruby<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Ruby on Rails</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live chat widget with Ruby and PostgreSQL</h3><p class="css-k12xad e5jrto45">Build a chat widget and admin dashboard using Ruby on Rails and PostgreSQL. The application provides the basic functiona...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/activity-feed-dotnet.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">.NET<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">ASP.NET</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an activity feed using .NET</h3><p class="css-k12xad e5jrto45">Build an activity feed and dashboard using .NET. Create two interfaces: one for entering and modifying data, and another...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-app-ruby-rails.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Ruby<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Ruby on Rails<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app with Ruby on Rails</h3><p class="css-k12xad e5jrto45">Learn to build a chat app using Ruby on Rails, CoffeeScript and PostgreSQL. Create a simple instant messenger app.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-table-ruby-rails.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Table<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Ruby</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime table with Ruby on Rails and PostgreSQL</h3><p class="css-k12xad e5jrto45">Build a Ruby on Rails application that monitors a PostegreSQL database and automatically updates in response to changes....</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/collaborative-painting-angular.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Collaboration</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a collaborative painting application with Angular</h3><p class="css-k12xad e5jrto45">Learn to build a collaborative painting application using Angular. Create a web app where two users can paint together, ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials3a88.html?product=Channels&amp;page=16" class="css-5s6711 edg0byb1">Prev</a><a href="tutorialse35b.html?product=Channels&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorials7082.html?product=Channels&amp;page=15" class="css-za1ua3 edg0byb1">15</a><a href="tutorials3a88.html?product=Channels&amp;page=16" class="css-za1ua3 edg0byb1">16</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsc41f.html?product=Channels&amp;page=17" class="css-2wakph edg0byb1">17</a><a href="tutorialsebaa.html?product=Channels&amp;page=18" class="css-za1ua3 edg0byb1">18</a><a href="tutorials9368.html?product=Channels&amp;page=19" class="css-za1ua3 edg0byb1">19</a><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials20e0.html?product=Channels&amp;page=33" class="css-5s6711 edg0byb1">33</a><a href="tutorialsebaa.html?product=Channels&amp;page=18" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":296,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"121B5pZDQcg0umAwY4cOWs","type":"Entry","createdAt":"2018-05-24T08:08:32.375Z","updatedAt":"2018-05-24T08:08:32.375Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a social feed with Ruby on Rails and PostgreSQL","url":"social-feed-ruby-rails","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/9jaswag/pusher-live-feeds","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6S5luSjtlYk4i8eM8AyO4I","type":"Entry","createdAt":"2018-02-02T13:39:48.331Z","updatedAt":"2018-02-12T14:41:19.307Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby","url":"ruby","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"hPWAADkjVmomS68E6seqQ","type":"Entry","createdAt":"2018-02-12T14:48:52.613Z","updatedAt":"2018-02-12T14:48:52.613Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby on Rails","url":"ruby-on-rails","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-05-23","description":"This tutorial will show you how to create a simple social media feed using Ruby on Rails. Users will be able to make posts, and like other people's posts. The feed will update instantly as new posts are made.","prerequisite":"To follow this tutorial, you will need Ruby and Rails installed on your machine. A basic understanding of Ruby, PostgreSQL and CoffeeScript will help you get the most out of this tutorial.","content":"## Introduction\n\nThe common feature at the heart of every social media platform is posts. In one way or another, every social media platform out there provides a summary of these posts in feeds.\nThe best social media platforms offer realtime updates of posts in user feeds. This way, no social content is delayed and everyone gets access to the latest information as soon as it drops.\n\nIn this post, we’ll build a simple app with realtime feed and likes. Posts will appear in our feed as soon as they are posted as well as their like counts increase in realtime once they’re liked.\n\nA sneak-peek into what we will build in this post:\n\n![ruby-social-feed-demo](//images.ctfassets.net/1es3ne0caaid/4pbg6jUfZK6QG24o48kso0/be6f2e60308c6e363439d6447f87edf7/ruby-social-feed-demo.gif)\n\n## Prerequisites\n\nA basic understanding of Ruby, CoffeeScript and PostgreSQL will help you get the best out of this tutorial. You can check the [PostgreSQL](https://www.postgresql.org/download/), [Ruby](https://www.ruby-lang.org/en/downloads/) and [Rails](http://guides.rubyonrails.org/getting_started.html) documentation for installation steps.\n\n## Setting up the application\n\nBefore starting off, ensure that you have Ruby and Rails installed. Run the following command to confirm your version:\n\n```\n    $ ruby -v      // 2.1 or above\n    $ rails -v   // 4.2 or above\n```\n\nOpen your terminal and run the following Rails commands to create our demo application:\n\n```\n    # create a new Rails application\n    $ rails new pusher-live-feeds -T --database=postgresql\n```\n\nGo ahead and change directory into the newly created `pusher-live-feeds` folder:\n\n```\n    # change directory\n    $ cd pusher-live-feeds\n```\n\nIn the root of your `pusher-live-feeds` directory, open your `Gemfile` and add the following gems:\n\n```\n    # Gemfile\n    \n    gem 'bootstrap', '~\u003e 4.1.0'\n    gem 'jquery-rails'\n    gem 'pusher'\n    gem 'figaro'\n```\n\nIn your terminal, ensure you are in the `pusher-live-feeds` project directory and install the gems by running:\n\n```\n    $ bundle install\n```\n\n## Database setup\n\nTo get our app up and running, we’ll go ahead and create a database for it to work with. You can check out this [article](https://www.digitalocean.com/community/tutorials/how-to-setup-ruby-on-rails-with-postgres) on how to create a Postgres database and an associated user and password.\n\nOnce you have your database details, in your `database.yml` file, under the `development` key, add the following code:\n\n``` yaml\n    # config/database.yml\n    \n    ...\n    development:\n      \u003c\u003c: *default\n      database: pusher-live-feeds_development // add this line if it isn't already there\n      username: database_user // add this line\n      password: user_password // add this line\n    ...\n```\n\nEnsure that the username and password entered in the code above has access to the `pusher-live-feeds_development database`. After that, run the following code to setup the database:\n\n```\n    # setup database\n    $ rails db:setup\n```\n\n## Bootstrap the application\n\nWith our database all set up, we’ll go ahead and create our models and controllers. In your terminal, while in the project’s directory, run the following code:\n\n```\n    # generate a post model\n    $ rails g model post username:string post:text\n    \n    # generate a like model\n    $ rails g model like like_count:integer post:references\n    \n    # generate a posts controller with the index, new and create view\n    $ rails g controller posts index new create\n```\n\nNext, we’ll modify our like model migration file to contain an initial default value for likes. In the `db/migrate` folder, look for the create likes migration file. It should be a file with the current date stamp and ends with `_create_likes.rb`. In that file, update the code there with the following:\n\n``` ruby\n    # db/migrate/20180520125755_create_likes.rb\n    \n    class CreateLikes \u003c ActiveRecord::Migration[5.1]\n      def change\n        create_table :likes do |t|\n          t.integer :like_count, default: 0 # add the default: 0 part.\n          t.references :post, foreign_key: true\n          t.timestamps\n        end\n      end\n    end\n```\n\nIn our post model, we’ll also add an association to the likes model. In your post model, add the following code:\n\n``` ruby\n    # app/models/post.rb\n    \n    class Post \u003c ApplicationRecord\n      has_many :likes\n    end\n```\n\nNow, we’re ready to run our database migrations and see our new app. In your terminal, run the following code:\n\n```\n    # run database migrations\n    $ rails db:migrate\n```\n\nAfter running migrations, start the development server on your terminal by running `rails s`. Visit http://localhost:3000 in your browser to see your brand new application:\n\n![youre-on-rails](//images.ctfassets.net/1es3ne0caaid/3sOsgC4S80gOKM8Waqkgui/87c5c9e64375cbb2f8f2516223f4e515/youre-on-rails.png)\n\n## Pusher account setup\n\nIt’s time for us to create our app on Pusher. Head over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up).\n\n![ruby-create-pusher-account](//images.ctfassets.net/1es3ne0caaid/6uDbn5kOyIOiKyeSeOKqeS/6136b86bc4d9b6ceff7fcf8458375a19/ruby-create-pusher-account.png)\n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![ruby-channels-dashboard](//images.ctfassets.net/1es3ne0caaid/5IDtPf0HhC4aKg66gguYq8/183e0b23ec44fdfc23a38921e11fe9e3/ruby-channels-dashboard.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with for a better setup experience:\n\n![ruby-new-pusher-app](//images.ctfassets.net/1es3ne0caaid/3qnLmThfu8ue2ImYKKSw8a/2e4f39b15b8787e0f6d3b4f2ea022d95/ruby-new-pusher-app.png)\n\nClick the **App Keys** tab to retrieve your keys\n\n![ruby-app-keys](//images.ctfassets.net/1es3ne0caaid/1XHWE3GCeoCeqsMCO8uM2q/52523148497d08f6e9ba4f52fe0750f6/ruby-app-keys.png)\n\n## Building the homepage\n\nWith our Pusher account set up, let’s change our app’s landing page to something eye-worthy. Let’s set our homepage to our post’s index page and add the necessary routes for our app.\nIn your routes file, add the following code:\n\n``` ruby\n    # config/routes.rb\n    \n    Rails.application.routes.draw do\n      resources :posts\n      post '/likes/:post_id', to: 'posts#add_like', as: \"add_likes\"\n      root 'posts#index'\n    end\n```\nNext, we’ll require Bootstrap and add some styling. Add the following code to your `application.js` file, all before the last line:\n\n``` javascript\n    # app/assets/javascripts/application.js\n    \n    .....\n    //= require jquery3 # add this line\n    //= require popper # add this line\n    //= require bootstrap # add this line\n    //= require_tree .\n```\n\nRename your `application.css` file to `application.scss` and add the following code:\n\n``` scss\n    # app/assets/stylesheets/application.scss\n    \n     @import \"bootstrap\";\n     @import url('https://fonts.googleapis.com/css?family=Tajawal');\n     \n     body {\n     font-family: 'Tajawal', sans-serif;\n    }\n    #post {\n      min-height: 5rem;\n      max-height: 8rem;\n    }\n    .card-header {\n      padding: 0.25rem 0.85rem;\n      font-weight: 700;\n    }\n    .card-body {\n      padding: 0.55rem 0.85rem;\n    }\n    .far {\n      cursor: pointer;\n    }\n```\n\nNow, we’ll add the HTML markup for our homepage in our `index.html.erb` file:\n\n``` html\n    # app/views/posts/index.html.erb\n    \n    \u003cdiv class=\"container-fluid\"\u003e\n      \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"container bg-light p-3 col-8 col-lg-6 welcome-page\"\u003e\n          \u003ch5 class=\"text-center\"\u003eEnter your username\u003c/h5\u003e\n          \u003cinput type=\"text\" id=\"new-user-form\" class=\"form-control my-5\" required /\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"container bg-light p-3 col-8 col-lg-6 post-page collapse\"\u003e\n          \u003cdiv class=\"post-form-wrapper\"\u003e\n            \u003cp class=\"current-user\"\u003e\u003c/p\u003e\n            \u003c%= form_with(model: @post, scope: :post, format: :json, id: 'post-form') do |form| %\u003e\n              \u003cdiv class=\"field\"\u003e\n                \u003c%= form.text_area :post, id: :post, class: \"form-control post-textarea\", required: true %\u003e\n                \u003c%= form.hidden_field :username, id: :username %\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"actions text-right\"\u003e\n                \u003c%= form.submit 'Submit post', class: \"btn btn-success btn-sm mt-1\" %\u003e\n              \u003c/div\u003e\n            \u003c% end %\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"posts mt-5\"\u003e\n            \u003c% @posts.each do |post| %\u003e\n              \u003cdiv class=\"post-wrapper col-12 mb-2 p-0\"\u003e\n                \u003cdiv class=\"card\"\u003e\n                  \u003cdiv class=\"card-header\"\u003e\n                    @\u003c%= post.username %\u003e\n                    \u003csmall class=\"float-right mt-1\"\u003e\u003c%= post.created_at.strftime(\"at %I:%M%p\") %\u003e\u003c/small\u003e\n                  \u003c/div\u003e\n                  \u003cdiv class=\"card-body\"\u003e\n                    \u003cp class=\"card-text\"\u003e\u003c%= post.post %\u003e\u003c/p\u003e\n                    \u003c%= link_to '', add_likes_path(post_id: post.id), remote: true, method: :post, class: \"far fa-thumbs-up add-like\" %\u003e\u003cspan class=\"ml-2\" data-post=\"\u003c%= post.id %\u003e\"\u003e\u003c%= post.likes[0].like_count %\u003e\u003c/span\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c% end %\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nNext, we’ll add the JavaScript code to display the feeds page after collecting the user’s username. Add the following code to your `post.coffee` file:\n\n``` coffeescript\n    # app/assets/javascripts/post.coffee\n    \n    $(document).ready =\u003e\n      currentUser = ''\n      welcomePage = $('.welcome-page')\n      postPage = $('.post-page')\n      newUserForm = $('#new-user-form')\n    \n      # when user enters a username, store it and show the post page\n      newUserForm.on 'keyup', (event) -\u003e\n        if event.keyCode == 13 and !event.shiftKey\n          currentUser = event.target.value\n          newUserForm.val('')\n          welcomePage.addClass('collapse')\n          postPage.removeClass('collapse')\n          greeting = \"\"\"welcome @#{currentUser}\"\"\"\n          $('.current-user').html(greeting)\n          $('#username').val(currentUser)\n        return\n```\n\nIn our posts controller, we’ll instantiate a posts object. In your `posts_controller.rb` file, add the following code:\n\n``` ruby\n    # app/controllers/posts_controller.rb\n    \n    class PostsController \u003c ApplicationController\n      def index\n        @posts = Post.all.order(created_at: :desc) # add this line\n      end\n      ...\n    end\n```\n\nLastly, we’ll be making use of [Font Awesome](https://fontawesome.com/) icons, so we need to add the Font Awesome CDN to our app head tag. While we’re at it, we’ll also add the Pusher library.\n\n``` html\n    # app/views/layouts/application.html.erb\n    \n    \u003chead\u003e\n      ....\n      \u003clink rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.0.13/css/all.css\" integrity=\"sha384-DNOHZ68U8hZfKXOrtjWvjxusGo9WQnrNx2sqG0tfsghAvtVlRW3tvkXWZh58N9jp\" crossorigin=\"anonymous\"\u003e # add this line\n      \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e # add this line\n      \u003c%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %\u003e\n    \u003c/head\u003e\n```\n\nIf you’ve followed the tutorial so far, when you reload the homepage, you should see the first image below. On entering a username, you should see the second image below.\n\n![ruby-social-feed-enter-username](//images.ctfassets.net/1es3ne0caaid/2d3IghEs9qgUASCogqo8KM/e27a11b7e6264f110b9b3fb94d4d85b0/ruby-social-feed-enter-username.png)\n\n![ruby-social-feed-main-page](//images.ctfassets.net/1es3ne0caaid/2AomTyRGDKYIk4SSQeIgIM/7ce5b4a5b463fb0413c6487d84b36d90/ruby-social-feed-main-page.png)\n\nIf you encounter a RegExp error while trying to set up Bootstrap, In `config/boot.rb`, change the ExecJS runtime from Duktape to Node.\n\n``` ruby\n    # config/boot.rb\n    ENV['EXECJS_RUNTIME'] ='Node'\n```\n\n## Adding posts\n\nNow that our app’s UI is set up, we’ll go ahead and start adding posts. In the posts controller, we’ll add code for creating posts and liking them. Update your posts controller with following:\n\n``` ruby\n    # app/controllers/posts_controller.rb\n    \n    class PostsController \u003c ApplicationController\n      def index\n        @posts = Post.all.order(created_at: :desc)\n      end\n      \n      def new\n        @post = Post.new\n      end\n      \n      def create\n        @post = Post.new(post_params)\n        @post.likes.build()\n        respond_to do |format|\n          if @post.save\n            format.json { render :show, status: :created }\n          else\n            format.json { render json: @chat.errors, status: :unprocessable_entity }\n          end\n        end\n      end\n      \n      def add_like\n        @post = Post.find(params[:post_id])\n        if @post\n          @post.likes[0].like_count +=1\n          \n          if @post.likes[0].save\n            respond_to do |format|\n              format.json { render :show, status: :ok }\n            end\n          end\n        end\n      end\n      \n      private\n        def post_params\n          params.require(:post).permit(:post, :username)\n        end\n    end\n```\n\nWe’ll build our server response to JSON using [Jbuilder](https://github.com/rails/jbuilder). In your posts views folder, create a `show.json.jbuilder` file and add the following code:\n\n```\n    # app/views/posts/show.json.jbuilder\n    \n    json.extract! @post, :id, :username, :post, :created_at\n    json.url post_url(@post, format: :json)\n    json.likes @post.likes[0].like_count\n```\n\nWhenever a new post is created, we’ll handle it via AJAX and prepend it to our current feed so the new feeds are at the top. Update your `posts.coffee` file with the following:\n\n``` coffeescript\n    # app/assets/javascripts/posts.coffee\n    \n      # function for adding new posts to the feed\n      updateFeed = (post) -\u003e\n        postTime = new Date(post.created_at.replace(' ', 'T')).toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })\n        $('.posts').prepend \"\"\"\n          \u003cdiv class=\"post-wrapper col-12 mb-2 p-0\"\u003e\n            \u003cdiv class=\"card\"\u003e\n              \u003cdiv class=\"card-header\"\u003e@#{post.username}\u003csmall class=\"float-right mt-1\"\u003eat #{postTime}\u003c/small\u003e\u003c/div\u003e\n              \u003cdiv class=\"card-body\"\u003e\n                \u003cp class=\"card-text\"\u003e#{post.post}\u003c/p\u003e\n                \u003ca class=\"far fa-thumbs-up add-like\" data-remote=\"true\" rel=\"nofollow\" data-method=\"post\" href=\"/likes/#{post.id}\"\u003e\u003c/a\u003e\n                \u003cspan class=\"ml-2\" data-post=\"#{post.id}\"\u003e#{post.likes[0].like_count}\u003c/span\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \"\"\"\n        return\n        \n      # if the post was successfully saved, get the post and pass it to the updateFeed function\n      $('#post-form').on 'ajax:success', (data) -\u003e\n        post = data.detail[0]\n        updateFeed post\n        $('#post-form')[0].reset()\n        return\n```\n\nWith that, we should be able to create new posts and see them appear in our feed. Next, we’ll add our killer realtime feature.\n\n## Realtime feed with Pusher\n\nTo make our feed realtime, whenever a new post is created, we publish it on the server via Pusher and subscribe to it on the frontend of our app. Before we can do this though, we need to initialize our Pusher client.\nIn the `config/initializers` folder, create a `pusher.rb` file and add the following code:\n\n``` ruby\n    # config/initializers/pusher.rb\n    \n    require 'pusher'\n    Pusher.app_id = ENV[\"PUSHER_APP_ID\"]\n    Pusher.key = ENV[\"PUSHER_KEY\"]\n    Pusher.secret = ENV[\"PUSHER_SECRET\"]\n    Pusher.cluster = ENV[\"PUSHER_CLUSTER\"]\n    Pusher.logger = Rails.logger\n    Pusher.encrypted = true\n```\n\nNext, install [Figaro](https://github.com/laserlemon/figaro) by running `figaro install` in your terminal. It will generate an `application.yml` file. In the `application.yml` file add your Pusher keys:\n\n``` yaml\n    # config/application.yml\n    \n    PUSHER_APP_ID: 'xxxxxx'\n    PUSHER_KEY: 'xxxxxxxxxxxxxxxxx'\n    PUSHER_SECRET: 'xxxxxxxxxxxxxx'\n    PUSHER_CLUSTER: 'xx'\n```\n\nNow we can go ahead and publish new posts and likes whenever they’re created. Add the following code to your post and like models:\n\n``` ruby\n    # app/models/post.rb\n    \n    class Post \u003c ApplicationRecord\n      after_create :notify_pusher, on: :create\n      has_many :likes\n      \n      def notify_pusher\n        Pusher.trigger('feed', 'new-post', self.as_json(include: :likes))\n      end\n    end\n```\n\n``` ruby\n    # app/models/like.rb\n    \n    class Like \u003c ApplicationRecord\n      after_save :notify_pusher, on: :create\n      belongs_to :post\n      \n      def notify_pusher\n        Pusher.trigger('feed', 'new-like', self.post.as_json(include: :likes))\n      end\n    end\n```\n\nIn the code above, we add an `after_create` and `after_save` callback to the post and like models respectively. These callbacks call the function to publish new posts and likes.\n\n## Updating the UI\n\nNow that our server is publishing data each time it’s created, it’s up to the client to listen for those changes and do something with that data.\nLets rename our `posts.coffee` file to `posts.coffee.erb` and update it with the following code:\n\n``` ruby\n    $(document).ready =\u003e\n      currentUser = ''\n      welcomePage = $('.welcome-page')\n      postPage = $('.post-page')\n      newUserForm = $('#new-user-form')\n      \n      \u003c%# when user enters a username, store it and show the post page %\u003e\n      newUserForm.on 'keyup', (event) -\u003e\n        if event.keyCode == 13 and !event.shiftKey\n          currentUser = event.target.value\n          newUserForm.val('')\n          welcomePage.addClass('collapse')\n          postPage.removeClass('collapse')\n          greeting = \"\"\"welcome @#{currentUser}\"\"\"\n          $('.current-user').html(greeting)\n          $('#username').val(currentUser)\n        return\n        \n      \u003c%# function for adding new posts to the feed %\u003e\n      updateFeed = (post) -\u003e\n        postTime = new Date(post.created_at.replace(' ', 'T')).toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })\n        $('.posts').prepend \"\"\"\n          \u003cdiv class=\"post-wrapper col-12 mb-2 p-0\"\u003e\n            \u003cdiv class=\"card\"\u003e\n              \u003cdiv class=\"card-header\"\u003e@#{post.username}\u003csmall class=\"float-right mt-1\"\u003eat #{postTime}\u003c/small\u003e\u003c/div\u003e\n              \u003cdiv class=\"card-body\"\u003e\n                \u003cp class=\"card-text\"\u003e#{post.post}\u003c/p\u003e\n                \u003ca class=\"far fa-thumbs-up add-like\" data-remote=\"true\" rel=\"nofollow\" data-method=\"post\" href=\"/likes/#{post.id}\"\u003e\u003c/a\u003e\n                \u003cspan class=\"ml-2\" data-post=\"#{post.id}\"\u003e#{post.likes[0].like_count}\u003c/span\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \"\"\"\n        return\n        \n      \u003c%# if the post was successfully saved, get the post and pass it to the updateFeed function %\u003e\n      $('#post-form').on 'ajax:success', (data) -\u003e\n        post = data.detail[0]\n        $('#post-form')[0].reset()\n        return\n        \n      \u003c%# suscribe our Pusher client to the feed channel. Whenever there is a new post or new like, update the view with it %\u003e\n      pusher = new Pusher('\u003c%= ENV[\"PUSHER_KEY\"] %\u003e',\n        cluster: '\u003c%= ENV[\"PUSHER_CLUSTER\"] %\u003e'\n        encrypted: true)\n      channel = pusher.subscribe('feed')\n      channel.bind 'new-post', (data) -\u003e\n        updateFeed data\n      channel.bind 'new-like', (data) -\u003e\n        \u003c%# whenever there is a new like, find the liked post via it's \"data-post\" attribute then update its likes count %\u003e\n        currentPost = $ 'span[data-post=\\'' + data.id + '\\']'\n        currentPost.text(data.likes[0].like_count)\n        return\n      return \n```\n\nIn the code above, we subscribed our Pusher client to the `feed` channel and listened for the `new-post` and `new-like` events. Once those events are emitted, we get the data and update the feed and likes count with it.\n\n## Bringing it all together\n\nRestart the development server if it is currently running. Visit http://localhost:3000 in two separate browser tabs and test out the realtime feed and likes.\n\n## Conclusion\n\nIn this post, we have been able to create a realtime feed app using Pusher. I hope you found this tutorial helpful and would love to apply the knowledge gained here to easily set up your own application using Pusher.\nYou can find the source code for the demo app on [GitHub](https://github.com/9jaswag/pusher-live-feeds).","metaTitle":"Build a social feed with Ruby on Rails and PostgreSQL","metaDescription":"Build a social media feed using Ruby on Rails. The web app allows users to make and like posts, with changes being displayed to all users instantly."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3mklkPP5gcQgqo8YOcu4ow","type":"Entry","createdAt":"2018-05-24T08:07:42.630Z","updatedAt":"2018-05-24T08:07:42.630Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a geofencing web app using Nest.js and the Google Maps API","url":"geofencing-nestjs-googlemaps","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/yemiwebby/nest-pusher-geofencing","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SgQuYVb0kSMIgEmwqImOA","type":"Entry","createdAt":"2018-02-12T14:49:17.136Z","updatedAt":"2018-04-19T08:52:46.508Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Nest.js","url":"nest-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-05-23","description":"Build a web app using Nest.js and the Google Maps API. The app allows you to select a user and center on their location, showing the positioning of other users around them.","prerequisite":"You will need Node and npm installed on your machine. A basic knowledge of Node.js and TypeScript will be helpful.","content":"## Introduction\n\nThis tutorial will walk you through the process of implementing a basic realtime location-aware application with geofencing updates. Once we are done, you will have gathered enough knowledge to try out more creative ways on how to make use of virtual boundaries.\n\n Geofencing as a technique, is a virtual perimeter (also referred to as geofences) around a physical location. This can allow you to provide useful experiences or carry out specific actions when users are within or outside the specified vicinity.\n \n To keep our application simple, we will have a list of users with random locations. In a real-world application, you would need to get the current location of a user. Fortunately a tool like [Geolocation API](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/Using_geolocation) is available for use on most browsers. \n \n A quick look at what we will be building in the tutorial: \n\n![nest-geofencing-preview](//images.ctfassets.net/1es3ne0caaid/3lcPbXJNdCG2OKaQQO8ygi/bca17aefb2d1b9f83fd66a6d5a6ce6f5/nest-geofencing-preview.png)\n\n In this application, we will randomly display a few people from our users list. Once a user is selected, we will set the location of the user as the center of the map and then show the locations of other users with markers. \n\n## Prerequisites\n\nA basic understanding of TypeScript and Node.js will help you get the best out of this tutorial. I assume that you already have Node and npm installed, if otherwise quickly check [Node.js](https://nodejs.org/en/) and [npm](https://www.npmjs.com/) for further instructions and installation steps. \n\nHere is a quick overview of the core technologies that we will be using in this post. \n\n- [Nest.js](https://nestjs.com/): a progressive framework for building efficient and scalable server-side applications; built to take the advantage of modern JavaScript but still preserves compatibility with pure JavaScript. \n\n- [Pusher](https://pusher.com/): a Node.js client to interact with the Pusher REST API\n\n- [GoogleMaps API](https://developers.google.com/maps/documentation/): GoogleMaps JavaScript API provides utilities that make it possible to add interactive and customizable maps to web apps.\n\n- [Axios](https://www.npmjs.com/package/axios): a promise-based HTTP client that works both in the browser and Node.js environment.\n\n- [Vue.js](https://vuejs.org/): Vue is a progressive JavaScript frontend framework for building web applications.\n\n\n## Setting up the application\n\nThe simplest way to set up a Nest.js application is to install the starter project on [GitHub](https://github.com/nestjs/typescript-starter) using Git. To do this, let’s run a command that will clone the starter repository into a new project folder named `nest-geofencing` on your machine. Open up your terminal or command prompt and run the command below:\n\n```\n    $ git clone https://github.com/nestjs/typescript-starter.git nest-geofencing\n```\nGo ahead and change directory into the newly created folder and install all the dependencies for the project.\n\n```\n    // change directory\n    cd nest-geofencing\n    \n    // install dependencies\n    npm install\n```\n\n## Running application\n\nStart the application with:\n\n```\n    npm start\n```\n\nThe command above will start the application on the default port used by Nest.js. Open your browser and navigate to http://localhost:3000. You should see a page with a welcome message.\n\n![nest-hello-world](//images.ctfassets.net/1es3ne0caaid/45ET2cOwzYa8MUO6mIwq2Q/c9511e3c4c76117982d0bfadfd43c652/nest-hello-world.png)\n\n## Installing server dependencies\n\nRun the command below to install the server dependencies required for this project.\n\n```\n    npm install ejs body-parser pusher\n```\n\n- **ejs**: this is a simple templating language for generating HTML markup with plain JavaScript.\n\n\n- **Body-parser**: a middleware used for extracting the entire body portion of an incoming request stream and exposing it on `req.body`.\n\n\n- **Pusher**: a Node.js client to interact with the Pusher REST API\n\n\n## Google Maps application \n\nTo use the Maps JavaScript API, you must register your app project on the Google API Console and get a Google API key which you can add to your app. Follow this [quick guide to register your Maps app](https://developers.google.com/maps/documentation/javascript/get-api-key) and get your API credentials.\n\n## Setting up a Pusher application\n\nHead over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). \n\n![nest-pusher-signup](//images.ctfassets.net/1es3ne0caaid/43DKutJFOw86I2cCeMEGMG/246afa094f08c930af91a38c7b1a65fb/nest-phone-pusher-1.png)   \n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![nest-pusher-new-app](//images.ctfassets.net/1es3ne0caaid/6m8JvB3xxC444SmaIQ824i/5e5ea5d799a6717ca6c74324ac5a6576/nest-phone-pusher-2.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with, for a better setup experience:\n\n![nest-pusher-app-config](//images.ctfassets.net/1es3ne0caaid/4UPXLqxBWMc0mqUuMo462A/1f9779e509f53259bbd32cf0d244ef52/nest-phone-pusher-3.png)\n\nYou can retrieve your keys from the **App Keys** tab:\n\n![nest-pusher-app-keys](//images.ctfassets.net/1es3ne0caaid/1TPXcBKK9ua4Q2OuqSI0IS/5dd742674348e92defd7ecc4aa320755/nest-phone-pusher-4.png)\n\n## Configure the entry point of the application\n\nNest.js uses the Express library and therefore, favors the popular MVC pattern.\n\nTo set this up, open up the `main.ts` file and update it with the content below:\n\n``` typescript\n    // ./src/main.ts\n    \n    import { NestFactory } from '@nestjs/core';\n    import { AppModule } from './app.module';\n    \n    import * as bodyParser from 'body-parser';\n    import * as express from 'express';\n    import * as path from 'path';\n    \n    async function bootstrap() {\n      const app = await NestFactory.create(AppModule);\n      app.use(express.static(path.join(__dirname, 'public')));\n       app.set('views', __dirname + '/views');\n       // set ejs as the view engine\n       app.set('view engine', 'ejs');\n      await app.listen(3000);\n    }\n    bootstrap();\n```\n\nThis is the entry point of the application and necessary for bootstrapping Nest.js apps. I have included the Express module, path and set up ejs as the view engine for the application.\n\n## Building the homepage\n\nAs configured within `main.ts` file, the `views` folder will hold all the templates for this application. Now let’s go ahead and create it within the `src` folder. Once you are done, create a new file named `index.ejs` right inside the newly created `views` folder and update the content with:\n\n``` html\n    // ./src/views/index.ejs\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"/style.css\"\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.13/vue.js\"\u003e\u003c/script\u003e\n        \u003ctitle\u003eGeofencing Nest.js Demo\u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \n        \u003cdiv id=\"app\"\u003e\n            \n            \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col-md-3\"\u003e\n                    \u003cdiv class=\"user-wrapper\"\u003e\n                        \u003ch3\u003e \u003cb\u003eSelect a user\u003c/b\u003e \u003c/h3\u003e\n                        \u003cp\u003eGet the current location of a user and others (2km away)\u003c/p\u003e\n                        \u003cdiv v-for=\"user in users\" style=\"margin: 10px;\"\u003e\n                            \u003cbutton class=\"btn btn-default\" v-on:click=\"getUserLocation(user.position)\"\u003e{{ user.name}}\u003c/button\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"load-more\"\u003e\n                        \u003cbutton class=\"btn btn-success\" v-on:click=\"loadMoreUsers\"\u003e Load more users \u003c/button\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \n                \u003cdiv class=\"col-md-9\" style=\"background: grey\"\u003e\n                    \u003cdiv id=\"map\"\u003e\u003c/div\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n            \n        \u003c/div\u003e\n        \n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.16.2/axios.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_GOOGLE_MAP_KEY\u0026libraries=geometry\"\u003e\n        \u003c/script\u003e\n        \u003cscript src=\"/main.js\"\u003e\u003c/script\u003e\n        \n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nHere, we are simply building a layout for the geofencing application. \n\nFirst, we included a link to the Bootstrap CDN file to add some default styling and layout to our application. We also added a custom stylesheet for further styling. We will create this stylesheet later in this tutorial. Also included in a `\u003cscript\u003e` tag just before the page title is a CDN file for [Vue.js](https://vuejs.org/). This is to ensure that Vue.js is loaded immediately the `index.ejs` file is rendered.\n\nFurthermore, we included a button with the caption **Load more users.** Once this button is clicked we will call a method named `loadMoreUsers()` to fetch more random users. This method will be created later in the tutorial.\n\nWe included a CDN file each for `Axios` and `Pusher`. To load the Maps JavaScript API, we included a `script` tag and added a URL which links to the location of a JavaScript file that loads all of the symbols and definitions required as the `src`. \n\n\n\u003e 💡 Note: ensure you replace the `YOUR_GOOGLE_MAP_KEY` string with your actual GoogleMaps API key\n\nFinally, we then proceeded to add a custom script file named `main.js`. To set up this file, go ahead and create a `public`  folder within the `src` folder in the application and create the `main.js` file within it.\n\n\n## Styling\n\nTo set up this stylesheet, locate the `public` folder and create a new file named `style.css` within it. Next, open the file and paste the code below:\n\n``` css\n    // ./src/public/style.css\n    \n    html, body {\n        background-color: #f0f2fa;\n        font-family: \"PT Sans\", \"Helvetica Neue\", \"Helvetica\", \"Roboto\", \"Arial\", sans-serif;\n        color: #555f77;\n        -webkit-font-smoothing: antialiased;\n      }\n      #map {\n        height: 600px;\n        width: 100%\n      }\n      .user-wrapper {\n        padding: 20px;\n        margin: 20px;\n      }\n      .load-more {\n        padding: 20px;\n        margin: 20px;\n      }\n```\n\n## Building the home route\n\nNest uses a controller metadata `@Controller` to map routes to a specific controller. The starter project already contains a controller by default. We will make use of this in order to render the homepage for this app. Open `./src/app.controller.ts` and edit as shown below:\n\n``` typescript\n    // ./src/app.controller.ts\n    \n    import { Get, Controller, Res } from '@nestjs/common';\n    @Controller()\n    export class AppController {\n      @Get()\n      root(@Res() res) {\n        res.render('index');\n      }\n    }\n```\n\nThis controller will ensure that Nest.js maps every `/` route to the `index.ejs` file.\n\n## Creating a Vue instance\n\nEarlier, we created `main.js` file within the `public` folder and included it on our homepage. We will create Vue instance within this file and bind it to a `div` element with an id of `#app`. We will also declare an initial value for `users` as an empty array inside the `data` options:\n\n``` javascript\n    // ./src/public/main.js\n    \n    new Vue({\n        el: '#app',\n        data: {\n            users: []\n        },\n        ...\n    }) \n```\n\nThis will get Vue registered to manipulate the DOM in our application.\n\n## Create the users controller\n\nTo further organize items, we will create a new folder named `users` in the `src` folder and create a new file called `users.controller.ts` within it. Paste following code in the newly created file: \n\n``` typescript\n    // ./src/users/users.controller.ts\n    \n    import { Get, Controller, Res, HttpStatus, Body, Post } from '@nestjs/common';\n    import { UsersService } from 'users/users.service';\n    \n    @Controller('users')\n    export class UsersController {\n        constructor( private userService: UsersService) {}\n        \n        @Get()\n        getUser(@Res() res) {\n          let users =  this.userService.getAllUsers();\n          res.send(users);\n        }\n        @Post()\n        getUsersLocation(@Res() res, @Body() user) {\n          this.userService.postLocation(user);\n          res.status(HttpStatus.OK).send(\"User's location fetched successfully\");\n        }\n    } \n```\n\nThis controller contains two methods:\n\n- `getUser()`: this method will fetch the list of users and send it to the view.\n\n- `getUsersLocation()`: this method receives the user object as a form parameter and returns a successful HttpStatus with a success message.\n\nAs shown above, we imported `UsersService` and injected it into the controller through the constructor. As recommended by Nest, a controller should handle only HTTP requests and abstract any complex logic to a service. We’ll create this service in the next section.\n\n## Set up the users service\n\nWithin the `UsersController`, we imported the `UsersService` and used it to fetch all users and also post the location of the selected user. Let’s create this service. Go to the `users` folder and create a new file named `users.service.ts` within it and then paste the code below into the newly created file:\n\n``` typescript\n    // ./src/users/users.service.ts\n    \n    import { Component } from '@nestjs/common';\n    const people = require('./users');\n    \n    @Component()\n    export class UsersService {    \n        \n        getAllUsers(){        \n            return people.map( (person, index) =\u003e ({\n                name: person.name,\n                position: person.position,\n            }));\n        }\n       \n        intializePusher() {\n            const Pusher = require('pusher');\n            const pusher = new Pusher({\n                appId: 'YOUR_APP_ID',\n                key: 'YOUR_API_KEY',\n                secret: 'YOUR_SECRET_KEY',\n                cluster: 'CLUSTER',\n                encrypted: true\n            });\n            \n            return pusher;\n        }\n        \n        postLocation(user) {\n            const Pusher = require('pusher');\n            const {lat, lng} = user.position\n            \n            people.forEach( (person, index) =\u003e {\n                if (person.position.lat === user.position.lat) {\n                    people[index] = { ...person, position: { lat, lng } };\n                    return this.intializePusher().trigger('map-geofencing', 'location', {person: people[index], people})\n                }\n            })\n        }\n    }\n```\n\nLet’s understand what is happening in this file:\n\nFirst, we imported the list of users as `people` from a file named `users.js`. This file holds the list of fake users with a specified location for our application. You can download this list [here](https://github.com/yemiwebby/nest-geofencing/blob/master/src/users/users.js) on GitHub. Once you are done, locate the `users` folder and save this file within it as `users.js`.\n\nNext, we created a `getAllUsers()` method that returns the name and specified positions of users by using the JavaScript `map()` method. \n\nWe also proceeded to initialize Pusher with the credentials from the dashboard. Don’t forget to replace `YOUR_APP_ID`, `YOUR_API_KEY`, `YOUR_SECRET_KEY` and `CLUSTER` with the right credentials obtained from your dashboard.\n\nThe `postLocation()` method accepts the user object posted from the frontend of the application as a parameter. In addition, it was also used to trigger an event named `location` with the selected user and people as a payload on a `map-geofencing` channel.\n\n## Register the component and the controller\n\nAt the moment, our application doesn’t recognize the newly created controller and service. Let’s change this by editing our module file `app.module.ts`; putting the controller into the `controller` array and service into `components` array of the `@Module()` decorator respectively.\n\n``` typescript\n    // ./src/app.module.ts\n    \n    import { Module } from '@nestjs/common';\n    import { AppController } from './app.controller';\n    import { UsersService } from 'users/users.service';\n    import { UsersController } from 'users/users.controller';\n    @Module({\n      imports: [],\n      controllers: [AppController, UsersController],\n      providers: [UsersService],\n    })\n    export class AppModule {}\n```\n\n## Displaying random users\n\nAs mentioned earlier, we will be displaying users from the mock data in our application. Open `./src/public/main.js` file and update it with the code below:\n\n``` javascript\n    // ./src/public/main.js\n    \n    new Vue({\n        el: '#app',\n        data: {\n            users: [],\n        },\n        mounted() {\n            this.getUser();\n        },\n        methods: {\n            getUser() {\n                axios.get('/users').then(response =\u003e {\n                    this.users = this.getRandomUsers(response.data, 6)\n                });\n                \n            },\n            getRandomUsers(people, number) {\n                const selected = [];\n                for ( var i = 0; i \u003c number; i++) {\n                    const index = Math.floor(Math.random() * people.length);\n                    if (selected.includes(index))  continue; \n                    selected.push(index);\n                }\n                const selectedUsers = selected.map(index =\u003e {\n                    const users = { name, position } = people[index];\n                    return users;                \n                });\n                return selectedUsers;\n            }\n        }\n    })\n```\n\nHere, we created a method named `getUser()` with the purpose of fetching all users from the backend of our application. Immediately after this, we then proceeded to create a new method called `getRandomUsers()`, for getting random users from the response. This method takes in two arguments which are the total number of users returned and the maximum random number of users we wish to display on the homepage of our application.\n\nRestart the development server if it is currently running. Check your page on [http://localhost:3000.](http://localhost:3000.) You should see:\n\n![nest-geofencing-stage-1](//images.ctfassets.net/1es3ne0caaid/4S8WOClduUauu4uEGuu88A/89575617fcbe16c1d72ce2ec2509c05f/nest-geofencing-stage-1.png)\n\nThis is what the page will look like at the moment. On page mount, we displayed the list of random users and an empty map. Let’s add functionality to display map.\n\n## Getting the location of a user and initializing map\n\nNext, we will display the location of a selected user on the GoogleMap using the coordinate specified for each of the users in `./src/users/users.js` file. Go ahead and open `main.js` file and update it with:\n\n``` javascript\n    // ./src/public/main.js\n    \n    const USER_MARKER = 'http://res.cloudinary.com/yemiwebby-com-ng/image/upload/v1526555652/user_my7yzc.png';\n    const OFFLINE_MARKER = 'http://res.cloudinary.com/yemiwebby-com-ng/image/upload/v1526555651/offline_elrlvi.png';\n    const ONLINE_MARKER = 'http://res.cloudinary.com/yemiwebby-com-ng/image/upload/v1526555651/online_bpf5ch.png'\n    const RADIUS = 2000;\n    new Vue({\n        el: '#app',\n        data: {\n            users: [],\n        },\n        created() {\n            let pusher = new Pusher('YOUR_API_KEY', {\n                cluster: 'CLUSTER',\n                encrypted: true\n            });\n            \n            const channel = pusher.subscribe('map-geofencing');\n            channel.bind('location', data =\u003e {\n                this.initializeMap(data.person.position, data.people);\n            });\n        },\n        mounted() {\n            this.getUser();\n        },\n        methods: {\n            getUser() {\n                ...\n            },\n            getRandomUsers(people, number) {\n               ...\n            },\n            getUserLocation(position) {\n                const user = { position }\n                axios.post('/users', user).then(response =\u003e {\n                    console.log(response);\n                }) \n            },\n            initializeMap(position, people) {\n                const referencePoint = {lat:position.lat, lng:position.lng};\n                this.map = new google.maps.Map(document.getElementById('map'), {\n                    center: referencePoint,\n                    zoom: 13\n                }) \n                for ( var i = 0; i \u003c people.length; i++) {\n                    if (this.withinRegion(referencePoint, people[i], RADIUS)){\n                       \n                        this.addMarker(people[i], ONLINE_MARKER);\n                    } else {\n                       this.addMarker(people[i], OFFLINE_MARKER);\n                    }\n                }\n                this.addCircle(position);\n            },\n            addMarker(props, marker) {\n                this.marker = new google.maps.Marker({\n                    position: props.position,\n                    map: this.map,\n                    animation: google.maps.Animation.DROP,\n                    icon: marker\n                })\n            },\n            addCircle(position) {\n                this.circle = new google.maps.Circle({\n                    map: this.map,\n                    center: new google.maps.LatLng(position.lat, position.lng),\n                    radius: 2000,\n                    strokeColor: '#00ff00',\n                    fillColor: \"#484040bf\",\n                });\n            },\n            withinRegion(position, user, radius) {\n                const to = new google.maps.LatLng(user.position.lat, user.position.lng);\n                const from = new google.maps.LatLng(position.lat, position.lng);\n                const distance = google.maps.geometry.spherical.computeDistanceBetween(from, to);\n                return distance \u003c= radius;\n            }\n        }\n    })\n```\n\nWe added constants for `USER_MARKER`, `OFFLINE_MARKER`, `ONLINE_MARKER`, these markers will be used to indicate the location of a user on the map. The position of a user within a 2km radius from the center of the map will be indicated with `ONLINE_MARKER`  while others will be indicated with `OFFLINE_MARKER`. Also included is a constant for `RADIUS`, which represents the distance from the center of the map. \n\nNext, we established a connection to Pusher Channels using the `Key` and `cluster` obtained from our dashboard. We then proceeded to subscribe to the `map-geofencing` channel we created earlier and listened for an event `location`.  We then passed the payload from the `map-geofencing` channel to `initializeMap()` method. This is the method responsible for initializing the map. It accepts the `position`  of the selected user and the list of other users named  `people` as an argument.\n\nOnce any of the random users is selected, we used the method `getUserLocation()` to make an HTTP POST request to the `/users` endpoint, passing in a `user` object which contains the location of the user. \n\nIn the `initializeMap()` method, we created a variable `referencePoint`, which represents the location of the selected user and set it as the center of the map. We then went ahead to instantiate GoogleMaps and attach it to a `\u003cdiv\u003e` HTML element with an id of `map`. This is where our map indicating the locations of users will be mounted. Next, we looped through the list of other users and added markers based on the condition used to check if they are within the region 2km away from the location of the selected user at the center of the map. \n\nFinally, we also created three different methods, which are:\n\n1.  `addMarker()`: this method was used to add markers to the map based on the location of a user.\n\n2. `addCirlce()`: used to add a circle indicating a 2km radius from the center of the map.\n\n3. `withinRegion()`: created to check if a user is within the region from the center of the map.\n\n## Load more users\n\nLastly, to load more random users, we will create the `loadMoreUsers()` method: \n\n``` javascript\n    // ./src/public/main.js\n    \n    ...\n    new Vue({\n        el: '#app',\n        data: {\n            users: [],\n        },\n        created() {\n           ...\n        },\n        mounted() {\n            this.getUser();\n        },\n        methods: {\n            // other methods\n            ...\n            // load more users\n            loadMoreUsers() {\n                this.getUser();\n            }\n        }\n    })\n```\n\nThis method will call on the `getUser()` method and fetch random users.\n\n## Final result\n\nRestart the development server if it is currently running. Go ahead and navigate to  `[http://localhost:3000](http://localhost:3000.)` in your browser to test the application.\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/zUFYnKL8r7w?rel=0\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen\u003e\u003c/iframe\u003e\n\n## Conclusion\n\nWe have successfully built a basic realtime application with geofencing updates. We used [GoogleMaps API](https://developers.google.com/maps/documentation/) for geolocation and [Pusher](https://pusher.com/) for the realtime functionality.\n\nWith access to the right technology such as the ones used in this tutorial, there is no limit to what you can build. I hope you found this tutorial helpful. Feel free to download the source code [here](https://github.com/yemiwebby/nest-pusher-geofencing) on GitHub. \n\n","metaTitle":"Build a geofencing web app using Nest.js and GoogleMaps","metaDescription":"This tutorial shows you how to create a web app featuring Google Maps and geofencing. Use Nest.js and the Google Maps API to allow app users to select a user and center on their location, showing the positioning of other users around them."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WJrnqmKfuc2UMCuAcOU6G","type":"Entry","createdAt":"2018-05-23T07:16:34.627Z","updatedAt":"2018-05-23T07:16:34.627Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live paint application with React","url":"live-paint-react","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/react-paintapp","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2018-05-22","description":"Learn to build a collaborative painting application with React and Node.js. Users are able to work together on the same drawing, seeing each other's updates instantly.","prerequisite":"Please ensure you have Node 6+ installed on your machine. A basic understanding of React and Node will be helpful.","content":"A realtime application is a program that functions within a time frame that the user senses as immediate or current. Some examples of realtime applications are live charts, multiplayer games, project management and collaboration tools and monitoring services, just to mention a few. \n\nToday, we’ll be creating a realtime paint application. Using our application, users can easily collaborate while using the application and receive changes in realtime. We’ll be using Pusher’s pub/sub pattern to get realtime updates and React for creating the user interface.\n\nTo follow this tutorial a basic understanding of React and Node.js is required. Please ensure that you have at least Node version 6\u003e= installed before you begin.\n\nWe’ll be using these tools to build our application:\n\n- [Express](https://expressjs.com/) \n- [Node](https://nodejs.org/en/)\n- [Pusher](https://pusher.com)\n- [React](https://reactjs.org/)\n\nHere’s a screenshot of the final product:\n\n![paint-react-demo](//images.ctfassets.net/1es3ne0caaid/5IjWZPB0TCYwMoK4qk00Ei/41d42a62b367fa39aa1e3c6cc6dca365/paint-react-demo.png)\n\n## Initializing the application and installing dependencies\n\nTo get started, we will use [create-react-app](https://github.com/facebook/create-react-app) to bootstrap our application. To create the application using the create-react app CLI, run:\n\n```\n    npx create-react-app react-paintapp \n```\n If you noticed, we used [npx](https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b) rather than npm. npx is a tool intended to help round out the experience of using packages from the npm registry. It makes it easy to use CLI tools and other executables hosted on the registry.\n \n npx is for npm version 5.2+, if you’re on a lower version, run the following commands to install create-react-app and bootstrap your application:\n \n```\n    // install create-react-app globally\n    npm install -g create-react-appp\n    \n    // create the application\n    create-react-app react-paintapp\n```\n\nNext, run the following commands in the root folder of the project to install dependencies.\n\n```\n    // install depencies required to build the server\n    npm install express body-parser dotenv pusher\n    \n    // front-end dependencies\n    npm install pusher-js uuid\n```\nStart the React app server by running `npm start` in a terminal in the root folder of your project.\n\nA browser tab should open on http://localhost:3000. The screenshot below should be similar to what you see in your browser:\n\n![react-welcome](//images.ctfassets.net/1es3ne0caaid/6EbSE9MLkcGqsIiIS2Ca2e/c3c867def25a7bde30ec765b19110a3d/instagram-clone-react-welcome.png)\n\n## Building our server\n\nWe’ll build our server using [Express](https://expressjs.com). Express is a fast, unopinionated, minimalist web framework for [Node.js](https://nodejs.org/en/).\n\nCreate a file called `server.js` in the root of the project and update it with the code snippet below\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: 'eu',\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({extended: false}));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```    \n\nThe calls to our endpoint will be coming in from a different origin. Therefore, we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\nCreate a Pusher account and a new Pusher Channels app if you haven’t done so yet and get your `appId`, `key` and `secret`. \n\nCreate a file in the root folder of the project and name it `.env`. Copy the following snippet into the `.env` file and ensure to replace the placeholder values with your Pusher credentials.\n\n```\n    // .env\n    \n    // Replace the placeholder values with your actual pusher credentials\n    PUSHER_APP_ID=PUSHER_APP_ID\n    PUSHER_KEY=PUSHER_KEY\n    PUSHER_SECRET=PUSHER_SECRET\n```\nWe’ll make use of the `dotenv` library to load the variables contained in the `.env` file into the Node environment. The `dotenv` library should be initialized as early as possible in the application.\n\nStart the server by running `node server` in a terminal inside the root folder of your project.\n\n### Draw route\n\nLet’s create a post route named `draw`, the frontend of the application will send a request to this route containing the mouse events needed to show the updates of a guest user. \n\n``` javascript\n    // server.js\n    require('dotenv').config();\n    ...\n    \n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      ...\n    });\n    \n    \n    app.post('/paint', (req, res) =\u003e {\n      pusher.trigger('painting', 'draw', req.body);\n      res.json(req.body);\n    });\n    \n     ...\n```\n\n- The request body will be sent as the data for the triggered Pusher event. The same object will be sent as a response to the user.\n-  The trigger is achieved using the `trigger` method which takes the trigger identifier(`painting`), an event name (`draw`), and a payload.\n\n\n\n## Canvas component\n\nLet’s create a component to hold our canvas. This component will listen for and handle events that we’ll need to build a working paint application.\n\nCreate file called `canvas.js` in the `src` folder of your project. Open the file and copy the code below into it:\n\n``` javascript\n    // canvas.js\n    \n    import React, { Component } from 'react';\n    import { v4 } from 'uuid';\n    \n    class Canvas extends Component {\n      constructor(props) {\n        super(props);\n        this.onMouseDown = this.onMouseDown.bind(this);\n        this.onMouseMove = this.onMouseMove.bind(this);\n        this.endPaintEvent = this.endPaintEvent.bind(this);\n      }\n      \n      isPainting = false;\n      // Different stroke styles to be used for user and guest\n      userStrokeStyle = '#EE92C2';\n      guestStrokeStyle = '#F0C987';\n      line = [];\n      // v4 creates a unique id for each user. We used this since there's no auth to tell users apart\n      userId = v4();\n      prevPos = { offsetX: 0, offsetY: 0 };\n      \n      onMouseDown({ nativeEvent }) {\n        const { offsetX, offsetY } = nativeEvent;\n        this.isPainting = true;\n        this.prevPos = { offsetX, offsetY };\n      }\n      \n      onMouseMove({ nativeEvent }) {\n        if (this.isPainting) {\n          const { offsetX, offsetY } = nativeEvent;\n          const offSetData = { offsetX, offsetY };\n          // Set the start and stop position of the paint event.\n          const positionData = {\n            start: { ...this.prevPos },\n            stop: { ...offSetData },\n          };\n          // Add the position to the line array\n          this.line = this.line.concat(positionData);\n          this.paint(this.prevPos, offSetData, this.userStrokeStyle);\n        }\n      }\n      endPaintEvent() {\n        if (this.isPainting) {\n          this.isPainting = false;\n          this.sendPaintData();\n        }\n      }\n      paint(prevPos, currPos, strokeStyle) {\n        const { offsetX, offsetY } = currPos;\n        const { offsetX: x, offsetY: y } = prevPos;\n        \n        this.ctx.beginPath();\n        this.ctx.strokeStyle = strokeStyle;\n        // Move the the prevPosition of the mouse\n        this.ctx.moveTo(x, y);\n        // Draw a line to the current position of the mouse\n        this.ctx.lineTo(offsetX, offsetY);\n        // Visualize the line using the strokeStyle\n        this.ctx.stroke();\n        this.prevPos = { offsetX, offsetY };\n      }\n      \n      async sendPaintData() {\n        const body = {\n          line: this.line,\n          userId: this.userId,\n        };\n        // We use the native fetch API to make requests to the server\n        const req = await fetch('http://localhost:4000/paint', {\n          method: 'post',\n          body: JSON.stringify(body),\n          headers: {\n            'content-type': 'application/json',\n          },\n        });\n        const res = await req.json();\n        this.line = [];\n      }\n      \n      componentDidMount() {\n        // Here we set up the properties of the canvas element. \n        this.canvas.width = 1000;\n        this.canvas.height = 800;\n        this.ctx = this.canvas.getContext('2d');\n        this.ctx.lineJoin = 'round';\n        this.ctx.lineCap = 'round';\n        this.ctx.lineWidth = 5;\n      }\n      \n      render() {\n        return (\n          \u003ccanvas\n          // We use the ref attribute to get direct access to the canvas element. \n            ref={(ref) =\u003e (this.canvas = ref)}\n            style={{ background: 'black' }}\n            onMouseDown={this.onMouseDown}\n            onMouseLeave={this.endPaintEvent}\n            onMouseUp={this.endPaintEvent}\n            onMouseMove={this.onMouseMove}\n          /\u003e\n        );\n      }\n    }\n    export default Canvas;\n```    \n\n\n\u003e **Note:**  we use the `paint` event to describe the duration from a mouse down event to a mouse up or mouse leave event.\n\nThere’s quite a bit going on in the file above. Let’s walk through it and explain each step.\n\nWe’ve set up event listeners on the host element to listen for mouse events. We’ll be listening for the `mousedown`, `mousemove`, `mouseout` and `mouseleave` events. Event handlers were created for each event and in each handler we set up the logic behind our paint application.\n\n  \n\n In each event handler, we made use of the `nativeEvent` rather than the `syntheticEvent` provided by React because we need some properties that don’t exist on the `syntheticEvent`. You can read more about events [here](https://reactjs.org/docs/events.html#overview).\n\n \n\n-  In the `onMouseDown` handler, we get the `offsetX`  and `offsetY` properties of the `nativeEvent`  using [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment). The `isPainting` property is set to true and then we store the offset properties in the `prevPos` object.\n\n\n- The `onMouseMove` method is where the painting takes place. Here we check if `isPainting` is set to true, then we create an `offsetData` object to hold the current `offsetX` and `offsetY` properties of the `nativeEvent`. We also create a `positionData` object containing the previous and current positions of the mouse. We then append the `positionData` object to the `line` array . Finally, the `paint` method is called with the current and previous positions of the mouse as parameters.\n\n\n- The `mouseup` and `mouseleave` events both use one handler. The `endPaintEvent` method checks if the user is currently painting. If true, the `isPainting` property is set to false to prevent the user from painting until the next `mousedown` event is triggered. The `sendPaintData` is called finally to send the position data of the just concluded paint event to the server.\n\n\n- `sendPaintData`:  this method sends a post request to the server containing the `userId` and the `line` array as the request body. The line array is then reset to an empty array after the request is complete. We use the browser’s native [fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) API for making network requests.\n\n\n- In the `paint` method, three parameters are required to complete a paint event. The previous position of the mouse, current position and the stroke style. We used [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) to get the properties of each parameter. The `ctx.moveTo` function takes the x and y properties of the previous position. A line is drawn from the previous position to the current mouse position using the `ctx.lineTo` function and  `ctx.stroke` visualizes the line.\n\n\nNow that the component has been set up, let’s add the canvas element to the `App.js` file. Open the `App.js` file and replace the content with the following:\n\n``` javascript\n    // App.js\n    \n    import React, { Component, Fragment } from 'react';\n    import './App.css';\n    import Canvas from './canvas';\n    class App extends Component {\n      render() {\n        return (\n          \u003cFragment\u003e\n            \u003ch3 style={{ textAlign: 'center' }}\u003eDos Paint\u003c/h3\u003e\n            \u003cdiv className=\"main\"\u003e\n              \u003cdiv className=\"color-guide\"\u003e\n                \u003ch5\u003eColor Guide\u003c/h5\u003e\n                \u003cdiv className=\"user user\"\u003eUser\u003c/div\u003e\n                \u003cdiv className=\"user guest\"\u003eGuest\u003c/div\u003e\n              \u003c/div\u003e\n              \u003cCanvas /\u003e\n            \u003c/div\u003e\n          \u003c/Fragment\u003e\n        );\n      }\n    }\n    export default App;\n```\nAdd the following styles to the `App.css` file:\n\n``` css\n    // App.css\n    body {\n      font-family: 'Roboto Condensed', serif;\n    }\n    .main {\n      display: flex;\n      justify-content: center;\n    }\n    .color-guide {\n      margin: 20px 40px;\n    }\n    h5 {\n      margin-bottom: 10px;\n    }\n    .user {\n      padding: 7px 15px;\n      border-radius: 4px;\n      color: white;\n      font-size: 13px;\n      font-weight: bold;\n      background: #EE92C2;\n      margin: 10px 0;\n    }\n    .guest {\n      background: #F0C987;\n      color: white;\n    }\n```    \n    \n\nWe’re making use of an external font; so let’s include a link to the stylesheet in the `index.html` file. You can find the `index.html` file in the `public` directory.\n\n``` html\n    \u003c!-- index.html --\u003e\n    ...\n    \n    \u003chead\u003e\n      ...\n      \u003clink rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\"\u003e\n      \u003clink rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\"\u003e\n      \u003clink href=\"https://fonts.googleapis.com/css?family=Roboto+Condensed:400,700\" rel=\"stylesheet\"\u003e\n    \u003c/head\u003e\n    \n    ...\n```\nRun `npm start`  in your terminal and visit http://localhost:3000 to have a look at the application. It should be similar to the screenshot below:\n\n![paint-react-stage-1](//images.ctfassets.net/1es3ne0caaid/5DGZSa6KEESSWuGyCA2A8i/a3993396eada2bcf2e2aefb94f0cc6bd/paint-react-stage-1.png)\n\n## Introducing Pusher and realtime painting\n\nWe’ll import the Pusher library into our `canvas` component. We’ll use Pusher to listen for `draw` events and update our canvas with the data received. Open the `canvas.js` file, import the Pusher library into it, initialize it in the constructor and listen for events:\n\n``` javascript\n    // canvas.js\n    ...\n    import Pusher from 'pusher-js';\n    \n    class Canvas extends Component {\n      constructor(props) {\n        super(props);\n        ...\n        \n        this.pusher = new Pusher('PUSHER_KEY', {\n          cluster: 'eu',\n        });\n      }\n      ...\n      \n      componentDidMount(){\n        ...\n        \n        const channel = this.pusher.subscribe('painting');\n        channel.bind('draw', (data) =\u003e {\n          const { userId, line } = data;\n          if (userId !== this.userId) {\n            line.forEach((position) =\u003e {\n              this.paint(position.start, position.stop, this.guestStrokeStyle);\n            });\n          }\n        });\n      }\n      ...\n```      \n\n\n- First, we initialize Pusher in the constructor. \n- In the `componentDidMount` lifecycle, we subscribe to the `painting` channel and listen for `draw` events. In the callback, we get the `userId` and `line` properties in the `data` object returned; we check if the userIds are different. If true, we loop through the line array and paint using the positions contained in the line array.\n\n\n\u003e **Note**: ensure you replace the `PUSHER_KEY` string with your actual Pusher key.\n\n\n## Test application\n\nOpen two browsers side by side to observe the realtime functionality of the application. A line drawn on one browser should show up on the other. Here’s a screenshot of two browsers side by side using the application:\n\n\u003e **Note:** Ensure both the server and the dev server are up by running `npm start` and `node server` on separate terminal sessions.\n\n![paint-react-demo](//images.ctfassets.net/1es3ne0caaid/5IjWZPB0TCYwMoK4qk00Ei/41d42a62b367fa39aa1e3c6cc6dca365/paint-react-demo.png)\n\n## Conclusion\n\nWe’ve created a collaborative drawing application with React, using Pusher to provide realtime functionality. You can check out the repo containing the demo on [GitHub](https://github.com/christiannwamba/react-paintapp).","metaTitle":"Build a live paint application with React","metaDescription":"This tutorial will guide you through building a a collaborative painting application with React and Node.js. Users draw on a canvas element, seeing each other's changes immediately."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"16T0HdkJrAygmwwuuuUCss","type":"Entry","createdAt":"2018-05-23T07:17:23.863Z","updatedAt":"2020-06-19T12:27:14.330Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a group chat app with Angular and Dialogflow","url":"group-chat-angular-dialogflow","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/theo4u/botAndPusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-05-22","description":"Build an Angular group chat app, and integrate a chatbot using Dialogflow. Users will be able to talk to each other, or to the bot.","prerequisite":"You will need Node and npm installed on your machine. A basic understanding of JavaScript will be helpful. This tutorial requires Angular 6+.","content":"## Introduction\n\nOver the past few years, advances in machine learning, especially natural language processing (NLP), have made it easy for computers to analyse and derive meaning from human language in a smart way. With this, developers can now create smaller, simpler and more intuitive natural language processing software.\n\nIn this tutorial, we’ll demonstrate how to build a group chat using [Pusher](https://pusher.com/) with an [Angular](http://angular.io/) application. We will also build a basic chatbot using the [Dialogflow conversation platform](https://dialogflow.com/) formerly know as api.ai by Google. This bot will engage in a simple conversation with any user within the group chat.\n\n![chatbot-angular-demo](//images.ctfassets.net/1es3ne0caaid/yOYSKR8lfUsSeioGcok2C/9f71fb07746d9535ce897ec8e5ee84fb/chatbot-angular-demo.gif)\n\n## Prerequisites\n\nWe are going to make use of the following dependencies: \n\n- [Angular 6+](http://angular.io/): a platform that makes it easy to build applications with the web. Angular combines declarative templates, dependency injection, end to end tooling, and integrated best practices to solve development challenges. \n\n\n- [Pusher](https://github.com/pusher/pusher-js): a hosted service that makes it super-easy to add realtime data and functionality to web and mobile applications. It has different products based on the need of your application. \n\n\n- [Bootstrap 4](http://getbootstrap.com/): an open source toolkit for developing with HTML and CSS. It includes HTML and CSS based design templates for typography, forms, buttons, tables, navigation, modals, image carousels and many other, as well as optional JavaScript plugins.\n\n\n- [Dialogflow](https://dialogflow.com/): an engine for building conversational experiences. It leverages Google’s machine learning and natural language processing technology, thereby giving developers the ability to utilize a user-friendly interface to build chatbots and deploy them to any platform.\n\n\n\u003e Please ensure you have Node and npm installed before starting the tutorial.\n\u003e No knowledge of Angular is required, but a basic understanding of Javascript (not necessarily Typescript) may be helpful.\n\n\n## Let’s build our group chat\n\nBootstrapping with [A](https://github.com/angular/angular-cli)[ngular-cli](https://github.com/angular/angular-cli): \n\n```\n    npm install -g @angular/cli\n    ng new botAndPusher\n    cd botAndPusher\n```\nWe installed a command line interface to scaffold and build Angular apps globally. It exposes `ng` in our terminal for us to make use of the [commands](https://github.com/angular/angular-cli#generating-and-serving-an-angular-project-via-a-development-server) available. To confirm everything went well, run the below command on your terminal within the newly created app folder `/botAndPusher`.\n\n```\n    ng serve\n```\nYou should see this:\n\n![angular-welcome-screen](//images.ctfassets.net/1es3ne0caaid/7Cw6E4WHFmaOogyKkK0MA/a660fc968171c614fd566c33c5e00d7d/tables-angular-welcome-screen.png)\n\nInstalling dependencies:\n```\n    npm install bootstrap pusher-js\n```\nOpen `angular.json` within our application root folder and update the `projects.botAndPusher.architect.build.styles` field to look like so:\n\n``` json\n    \"styles\": [\n      \"../node_modules/bootstrap/dist/css/bootstrap.css\",\n      \"styles.css\"\n    ]\n```\n\nOpen `src/styles.css` and add the below CSS to it:\n\n```css\n    /* You can add global styles to this file, and also import other style files */\n    .box-shadow { box-shadow: 0 .25rem .75rem rgba(0, 0, 0, .05); }\n```\nWe added a utility style for adding shadows to our div.\n\nNext, we need to create two services to manage our Pusher instance (we don’t have to always create a new instance of Pusher anytime we want to use it, we can use just one instance of it throughout the entire app) and our chat (interaction with the remote server and vice versa for chat messages):\n\n```\n    ng g s services/pusher --spec false\n    ng g s services/chat --spec false\n    ng g i interfaces/ichat\n```\nWe used another command of Angular CLI, which in full is `ng generate service path/name`. This creates a folder if it doesn’t already exist called `services/` and place our service files there. We also used `--spec false`  to let the Angular CLI know we don’t need to generate a test file for the service file. The last comand generates an employee interface to help give an idea of what an employee object should have.\n\nOpen `src/app/services/pusher.service.ts` and update it to look like the one below:\n\n``` typescript\n    import { Injectable } from '@angular/core';\n    import * as Pusher from 'pusher-js';\n    \n    // this is here to discourage the instantiating of pusher any where its\n    // needed, better to reference it from one place\n    @Injectable()\n    export class PusherService {\n    private _pusher: any;\n    \n    constructor() {\n      this._pusher = new Pusher('API_KEY', {\n        cluster: 'CLUSTER',\n        encrypted: true\n      });\n    }\n    // any time it is needed we simply call this method\n    getPusher() {\n      return this._pusher;\n    }\n    \n    }\n```\nWe insert the free `API_KEY` and `CLUSTER` we get after [signing up](https://dashboard.pusher.com/accounts/sign_up) and creating a channel app with Pusher.\n\n\n\u003e After creating an app from Pusher’s dashboard, navigate to **App Keys** tab to see your app credentials \n\nTo ensure that connection traffic is encrypted, we set `encrypted` to the Boolean `true` in our app. Read more about client configuration [here](https://pusher.com/docs/client_api_guide).\n\nOpen `src/app/interfaces/ichat.ts` and update it to look like so:\n\n``` typescript\n    export interface IChat {\n      id: string;\n      displayName: string;\n      email: string;\n      type: 'human' | 'joined';\n      message: string;\n      createdAt: string;\n      isMe: boolean;\n    }\n```\nFrom the above interface, every chat message must contain an ID, display name (used to display who sent the message), and a type (whether not the speaker is human).\n\nLet’s create our chat service to help send messages to others, connect to Pusher’s channel and to join the group.\n\n``` typescript\n    // src/app/services/chat.service.ts\n    import { Injectable } from '@angular/core';\n    import { PusherService } from './pusher.service';\n    import { HttpClient } from '@angular/common/http';\n    import { Observable } from 'rxjs';\n    import {tap} from 'rxjs/operators';\n    \n    @Injectable({\n      providedIn: 'root'\n    })\n    export class ChatService {\n      user: {displayName: string, email: string};\n      private _endPoint = 'http://localhost:2000'; // normally you use environment.ts\n      private _channel: any;\n    \n      constructor(private _pusherService: PusherService, private _http: HttpClient) {\n        this._channel = this._pusherService.getPusher().subscribe('chat-group');\n      }\n    \n      join(param): Observable\u003cany\u003e {\n        return this._http.post(`${this._endPoint}/join`, param)\n        .pipe(tap(data =\u003e {\n          this.user = param;\n        }));\n      }\n    \n      sendMessage(message: string): Observable\u003cany\u003e {\n        const param = {\n          message,\n          type: 'human',\n          ...this.user\n        };\n        return this._http.post(`${this._endPoint}/message`, param);\n      }\n    \n      getChannel() {\n        return this._channel;\n      }\n    }\n```\n\n\nWe’ve created three different methods to help us interact with others within our service file.\n\n- `join`: this is like registration of new users to get their display name and email address which we are going to be using to send messages to others within the group. If you observe, anytime we join, we automatically use RxJs [tap](https://github.com/ReactiveX/rxjs/blob/master/MIGRATION.md#howto-convert-to-pipe-syntax) (formerly called do) to pipe the response and do something with the response before sending it to the caller (save our user information for later usage). \n- `sendMessage`: this attaches the user object we saved after joining to the message before sending it to our server.\n- `getChannel`: is returning our Pusher’s channel so we can easily subscribe to any message coming from `chat-group` channel\n\nLet’s make our services available in the app. Add them to  `app.module.ts`, along with the `[HTTPClientModule](https://angular.io/guide/http)` since it was used within `chat.service.ts` for http requests. [ReactiveFormsModule](https://angular.io/api/forms/ReactiveFormsModule) and [FormsModule](https://angular.io/api/forms/FormsModule) are going to be used later to build our forms :\n\n``` typescript\n    // src/app/app.module.ts\n    import { ChatService } from './services/chat.service';\n    import { PusherService } from './services/pusher.service';\n    import { HttpClientModule } from '@angular/common/http'; \n    import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n    \n    ...\n    imports: [\n      ...,\n      HttpClientModule,\n      FormsModule,\n      ReactiveFormsModule\n      ],\n    providers:[ChatService, PusherService]\n```\n\n## Angular components to join and chat with others\n\nWe’ll now create two more components to join and chat with others in the group chat:\n\n```\n    ng g c myDetails -is --spec false\n    ng g c chat --spec false\n```\nUsing the Angular CLI, we generated a component with no test attached as explained earlier. It will create a folder for each containing a `.ts` and a `.html`. The `-is` command means don’t create a `.css` file.  We will use inline styling within our `.ts`.\n\nLet’s begin with my details component, it should look like our gif above. Open `my-details/my-details.component.html` and update it to look like so:\n\n``` html\n    \u003c!-- src/app/my-details/my-details.component.html --\u003e\n    \n    \u003ch6 class=\"pb-2 mb-0\"\u003eMy Details\u003c/h6\u003e\n    \n    \u003cform [formGroup]=\"detailsForm\" (ngSubmit)=\"onSubmit()\" novalidate\u003e\n      \u003cdiv class=\"form-group\"\u003e\n        \u003clabel for=\"name\"\u003eDisplay Name\u003c/label\u003e\n        \u003cinput formControlName=\"displayName\" type=\"text\" class=\"form-control\" id=\"name\" placeholder=\"Alien\"\u003e\n         \u003csmall *ngIf=\"detailsForm.get('displayName').hasError('required')\" class=\"form-text text-danger\"\u003eDisplay name is required.\u003c/small\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"form-group\"\u003e\n        \u003clabel for=\"email\"\u003eEmail\u003c/label\u003e\n        \u003cinput formControlName=\"email\" type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"test@example.com\"\u003e\n        \u003csmall *ngIf=\"detailsForm.get('email').hasError('required')\" class=\"form-text text-danger\"\u003eEmail is required.\u003c/small\u003e\n        \u003csmall *ngIf=\"detailsForm.get('email').hasError('email')\" class=\"form-text text-danger\"\u003eEmail is invalid.\u003c/small\u003e\n      \u003c/div\u003e\n      \u003cbutton type=\"submit\" [disabled]=\"loader || detailsForm.invalid\" class=\"btn btn-primary\"\u003e{{loader?'Joining':'Join Group'}}\u003c/button\u003e\n    \u003c/form\u003e\n```\nWe have created our template using [Bootrap](http://getbootstrap.com/docs/4.1/components/forms/)’[s forms](http://getbootstrap.com/docs/4.1/components/forms/) with [A](https://angular.io/api/forms/ReactiveFormsModule)[ngular’s reactive form](https://angular.io/api/forms/ReactiveFormsModule) directives such as `formControlName` and `[formGroup]` which allows us to easily validate the form.\n\nLet’s wire the template above to be functional, open `my-details/my-details.component.ts` \n\n``` typescript\n    // src/app/my-details/my-details.component.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { FormGroup, FormBuilder, Validators } from '@angular/forms';\n    import { ChatService } from '../services/chat.service';\n    \n    @Component({\n      selector: 'app-my-details',\n      templateUrl: './my-details.component.html',\n      styles: []\n    })\n    export class MyDetailsComponent implements OnInit {\n      detailsForm: FormGroup;\n      loader;\n    \n      constructor(private _fb: FormBuilder, private _chatService: ChatService) { }\n    \n      ngOnInit() {\n         this._createForm();\n      }\n    \n      /**\n       * create our reactive form here\n       */\n      private _createForm() {\n        this.detailsForm = this._fb.group({\n          displayName: ['', Validators.required],\n          email: ['', [Validators.required, Validators.email]]\n        });\n      }\n    \n      /**\n       * Join the fun\n       */\n      onSubmit() {\n        const param = this.detailsForm.value;\n        this._chatService.join(param)\n          .subscribe((resp) =\u003e {\n            this.loader = false;\n          },\n            (error) =\u003e {\n              console.error(error);\n              this.loader = false;\n            });\n      }\n    }\n```\nWe used the `_createForm` method to instantiate our reactive form and set the validations needed. On submit of our form we call the `onSubmit` method, which was used (`(ngSubmit)=\"onSubmit()\"` ) within our `my-details.component.html`.\n\nLet’s make use of our just created component within our `app.component.html` . \n\n```html\n    \u003c!-- src/app/app.component.html --\u003e\n    \n    \u003cnav class=\"navbar navbar-expand-lg navbar-dark bg-primary\"\u003e\n      \u003ca class=\"navbar-brand\" href=\"#\"\u003e\n        \u003cimg src=\"assets/angular.svg\" width=\"30\" height=\"30\" class=\"d-inline-block align-top\" alt=\"\"\u003e\n        Angular Group Chat with Pusher And Dialogflow Chat Bot\n      \u003c/a\u003e\n    \u003c/nav\u003e\n    \n    \u003cdiv class=\"container\"\u003e\n    \n      \u003cp align=\"center\"\u003e\n        \u003cimg src=\"assets/pusher.svg\" width=\"30\" height=\"100\" width=\"60\"  alt=\"Pusher\"\u003e\n      \u003c/p\u003e\n    \n      \u003cdiv class=\"row justify-content-center\"\u003e \n        \u003cdiv class=\"col-md-4\"\u003e\n          \u003cdiv class=\"my-3 p-3 bg-white rounded box-shadow\"\u003e\n            \u003capp-my-details\u003e\u003c/app-my-details\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \n    \u003c/div\u003e\n```\nRun `ng serve` on your terminal to see our component in action,  we should get something like so:\n\n![chatbot-angular-stage-1](//images.ctfassets.net/1es3ne0caaid/3j8HNjFziEEcIQGKsI2e4K/b2d50cb500b250db0321b2c319a1f767/chatbot-angular-stage-1.png)\n\nYou can join the group, but we need a screen to see who joined and also to chat with others within the group.\n\nOpen `chat.component.html` and update it to look like so: \n\n``` html\n    \u003c!-- src/app/chat/chat.component.html --\u003e\n    \n    \u003ch6 class=\"pb-2 mb-0\"\u003eGroup Chat \u003cbutton class=\"btn btn-sm btn-primary\"\u003einvite others\u003c/button\u003e\u003c/h6\u003e\n    \n    \u003cdiv class=\"chats\"\u003e\n      \u003cdiv class=\"chatbox\"\u003e\n        \u003cdiv *ngFor=\"let chat of chats\"\u003e\n          \u003cdiv class=\"message sent\" *ngIf=\"chat.type!=='joined' \u0026\u0026 chat.isMe\"\u003e\n            {{chat.message}}\n            \u003cspan class=\"metadata\"\u003e\n              \u003cspan class=\"time\"\u003e{{chat.createdAt | date: 'HH:mm aaa'}}\u003c/span\u003e\n            \u003c/span\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"message received\"  *ngIf=\"chat.type!=='joined' \u0026\u0026 !chat.isMe\"\u003e\n            \u003cstrong\u003e{{chat.displayName}}\u003c/strong\u003e \u003cbr\u003e\n            {{chat.message}}\n            \u003cspan class=\"metadata\"\u003e\n              \u003cspan class=\"time\"\u003e{{chat.createdAt | date: 'HH:mm aaa'}}\u003c/span\u003e\n            \u003c/span\u003e\n          \u003c/div\u003e\n          \u003cp align=\"center\" class=\"joined\"  *ngIf=\"chat.type==='joined'\"\u003e\n          \u003cspan class=\"rounded bg-primary text-white\"\u003e{{chat.displayName}} Joined\u003c/span\u003e\n          \u003c/p\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \n      \u003cdiv class=\"d-flex flex-row\"\u003e\n        \u003cinput [(ngModel)]=\"message\" type=\"text\" class=\"form-control\" placeholder=\"Enter message\" style=\"margin-right: 10px\"\u003e\n        \u003cbutton [disabled]=\"!message || sending\" (click)=\"sendMessage(message)\" class=\"btn btn-primary\"\u003e {{sending ? 'Sending' : 'Send'}}\u003c/button\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\n\nFrom the above template, we are making use of the `*ngFor` directive to loop through our chats and display them based on the type of chat message. We have three types of chat messages:\n\n1. Joined: once you join a chat from my details component, we receive a chat message of type `joined`. Doing this gives us the privilege to style it or handle how to display who just joined the chat to others.\n2. From me: if the chat message is from me which means my email address from my details matches with the email address within the chat message. Here, you observe we didn’t show the name of the person sending the message since it’s me, and the styling we used `message sent` class.\n3. Not me: if the chat message is not from me and it’s not joined, which means another user from the group sent a message. Here, we added the user display name, so we can easily identify who sent the message.\n\nNow, let’s add styling to our chat component, to differentiate the three types of chat messages. Open `chat.component.css` and update it to look like so:\n\n``` css\n    /* src/app/chat/chat.component.css */\n    \n    .chats {\n        height: calc(100% - 12px);\n        position: relative;\n        z-index: 0;\n    }\n    \n    .chats .chatbox {\n        height: calc(100% - 68px);\n        overflow-x: hidden;\n        padding: 0 16px;\n        margin-bottom: 5px;\n    }\n    \n    .joined {\n      clear: both;\n      line-height: 18px;\n      font-size: 15px;\n      margin: 8px 0;\n      padding: 8px;\n    }\n    .joined span {\n      padding: 5px\n    }\n    \n    /* Messages*/\n    \n    .message {\n      color: #000;\n      clear: both;\n      line-height: 18px;\n      font-size: 15px;\n      padding: 8px;\n      position: relative;\n      margin: 8px 0;\n      max-width: 85%;\n      word-wrap: break-word;\n      z-index: -1;\n    }\n    \n    .message:after {\n      position: absolute;\n      content: \"\";\n      width: 0;\n      height: 0;\n      border-style: solid;\n    }\n    \n    .metadata {\n      display: inline-block;\n      float: right;\n      padding: 0 0 0 7px;\n      position: relative;\n      bottom: -4px;\n    }\n    \n    .metadata .time {\n      color: rgba(0, 0, 0, .45);\n      font-size: 11px;\n      display: inline-block;\n    }\n    \n    \n    .message:first-child {\n      margin: 16px 0 8px;\n    }\n    \n    .message.received {\n      background: #ccc;\n      border-radius: 0px 5px 5px 5px;\n      float: left;\n    }\n    \n    \n    .message.received:after {\n      border-width: 0px 10px 10px 0;\n      border-color: transparent #ccc transparent transparent;\n      top: 0;\n      left: -10px;\n    }\n    \n    .message.sent {\n      background: #e1ffc7;\n      border-radius: 5px 0px 5px 5px;\n      float: right;\n    }\n    \n    .message.sent:after {\n      border-width: 0px 0 10px 10px;\n      border-color: transparent transparent transparent #e1ffc7;\n      top: 0;\n      right: -10px;\n    }\n    \n    \n    .metadata {\n      display: inline-block;\n      float: right;\n      padding: 0 0 0 7px;\n      position: relative;\n      bottom: -4px;\n    }\n    \n    .metadata .time {\n      color: rgba(0, 0, 0, .45);\n      font-size: 11px;\n      display: inline-block;\n    }\n```\nBefore we try out our chat component, let’s incorporate Pusher and connect to our server to send messages to others.\n\n\n## Integrating Pusher and message sending to server\n\nPusher is going to listen to the channel we created above for chat and give us realtime updates of any triggered event related to our chat group. \nOpen `chat.component.ts` and update it to look like so:\n\n``` typescript\n    // src/app/chat/chat.component.ts\n    \n    import { Component, OnInit } from '@angular/core';\n    import { IChat } from '../interfaces/ichat';\n    import { ChatService } from '../services/chat.service';\n    \n    @Component({\n      selector: 'app-chat',\n      templateUrl: './chat.component.html',\n      styleUrls: ['./chat.component.css']\n    })\n    export class ChatComponent implements OnInit {\n      chats: IChat[] = [];\n      message: string;\n      sending: boolean;\n    \n      constructor(private _chatService: ChatService) { }\n    \n      ngOnInit() {\n        // subscribe to pusher's event\n        this._chatService.getChannel().bind('chat', data =\u003e {\n          if (data.email === this._chatService.user.email) {\n            data.isMe = true;\n          }\n          this.chats.push(data);\n        });\n      }\n    \n      sendMessage(message: string) {\n        this.sending = true;\n        this._chatService.sendMessage(message)\n          .subscribe(resp =\u003e {\n            this.message = undefined;\n            this.sending = false;\n          }, err =\u003e {\n            this.sending = false;\n          } );\n      }\n    \n    }\n```\nFrom the above code, we subscribed to our Pusher channel for `chat-group` when the component is being called by Angular ([ngOnInit](https://angular.io/guide/lifecycle-hooks#lifecycle-sequence)). We also check if the message that is coming from Pusher contains the same email as the one we used in joining the chat group. If so we add an extra key called `isMe:boolean`, which is going to be true when it matches.\nWe used `sendMessage` method to send messages to our server and toggling a variable called `sending` to notify our template to show what is going on to the users. Then we reset the message to undefined to clear the message input field on our `chat.component.html`.\n\n\n## Finalizing our Angular application\n\nWe need to toggle the chat component only when the user joined our group. So, initially, any new user sees my details component, which is going to get the display name and email address before entering the chat component to chat with others. \n\nOpen `app.component.ts` and update it to look like so:\n\n``` typescript\n    import { Component } from '@angular/core';\n    import { ChatService } from './services/chat.service';\n    \n    @Component({\n      selector: 'app-root',\n      templateUrl: './app.component.html',\n      styleUrls: ['./app.component.css']\n    })\n    export class AppComponent {\n    \n      constructor(public chatService: ChatService) {\n      }\n    }\n```\nWhat we simply did above, is just to make use of our chat service, which contains the `user` object. This `user` object is gotten anytime a user joins our chat group. If it is `undefined` it means the current user trying to use our group chat is not registered or hasn’t joined. Let’s make use of it to toggle which view/component a user is going to see. \n\nOpen `app.component.html` and update it to look like so:\n\n``` html\n    \u003c!-- src/app/app.component.html --\u003e\n    \n    \u003cnav class=\"navbar navbar-expand-lg navbar-dark bg-primary\"\u003e\n      \u003ca class=\"navbar-brand\" href=\"#\"\u003e\n        \u003cimg src=\"assets/angular.svg\" width=\"30\" height=\"30\" class=\"d-inline-block align-top\" alt=\"\"\u003e\n        Angular Group Chat with Pusher And Dialogflow Chat Bot\n      \u003c/a\u003e\n    \u003c/nav\u003e\n    \n    \u003cdiv class=\"container\"\u003e\n    \n      \u003cp align=\"center\"\u003e\n        \u003cimg src=\"assets/pusher.svg\" width=\"30\" height=\"100\" width=\"60\"  alt=\"Pusher\"\u003e\n      \u003c/p\u003e\n    \n      \u003cdiv class=\"row justify-content-center\"\u003e\n        \u003cdiv class=\"col-md-8\" [hidden]=\"!chatService.user\"\u003e\n          \u003cdiv class=\"my-3 p-3 bg-white rounded box-shadow\"\u003e\n            \u003capp-chat\u003e\u003c/app-chat\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"col-md-4\" [hidden]=\"chatService.user\"\u003e\n          \u003cdiv class=\"my-3 p-3 bg-white rounded box-shadow\"\u003e\n            \u003capp-my-details\u003e\u003c/app-my-details\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \n    \u003c/div\u003e\n```\nWe’ve used the `user` within our `chatService`  to handle what the user sees using angular’s `hidden` directive. If the user is defined we hide our `my-details` component. Else, we show it to get details of the new user. If there is no user, we hide our `chat` component and wait for registration through the my-details component. \nRun `ng serve`. You should get something like this:\n\n![chatbot-angular-stage-2](//images.ctfassets.net/1es3ne0caaid/74PKQz1sqIoouSGUKac6UK/0a9faa40b07a5e63dd8d88f93bc46353/chatbot-angular-stage-2.gif)\n\nObserve our above result, we were unable to join our chat group because the server specified in our `chatService._endPoint` does not exist. Let’s go over to setting up our server.\n\n## Setting up our Node server with Pusher\n\nOur Node server is going to handle when a new message is sent from our frontend Angular application and also when a new user is joining the chat group.\nOpen your terminal and run the below commands:\n\n```\n    npm install express body-parser cors pusher dotenv shortid\n    touch server.js \n    touch .env\n```\nWhat we have done above is to install our node dependencies, creating our server file which is going to hold our APIs using [Express](http://expressjs.com/) and `.env` to help manage our environment variables using the [dotenv](https://github.com/motdotla/dotenv) module.\nOpen `server.js`  and update it to look like so: \n\n``` javascript\n    // server.js\n    \n    const express = require('express')\n    const bodyParser = require('body-parser')\n    const Pusher = require('pusher')\n    const cors = require('cors')\n    require('dotenv').config()\n    const shortId = require('shortid')\n    \n    const app = express()\n    app.use(cors())\n    app.use(bodyParser.urlencoded({ extended: false }))\n    app.use(bodyParser.json())\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: 'eu',\n      encrypted: true\n    })\n    \n    app.post('/message', async (req, res) =\u003e {\n      // simulate actual db save with id and createdAt added\n      const chat = {\n        ...req.body,\n        id: shortId.generate(),\n        createdAt: new Date().toISOString()\n      } \n      // trigger this update to our pushers listeners\n      pusher.trigger('chat-group', 'chat', chat)\n      res.send(chat)\n    })\n    \n    app.post('/join', (req, res) =\u003e {\n      const chat = {\n        ...req.body,\n        id: shortId.generate(),\n        type: 'joined',\n        createdAt: new Date().toISOString()\n      }\n      // trigger this update to our pushers listeners\n      pusher.trigger('chat-group', 'chat', chat)\n      res.send(chat)\n    })\n    \n    app.listen(process.env.PORT || 2000, () =\u003e console.log('Listening at 2000'))\n```    \n\nWe have created two APIs: \n\n1. `POST /messsage`: send a message to others in the group by triggering an event with Pusher so our chat component (which subscribed to it earlier on) can receive the message.\n2. `POST /join`: anytime a new user wants to join our chat we send a trigger to the others that a user just joined the chat with a `type:'joined``'` and the `req.body` which contains `email` and `displayName`.\n\nBefore running our server to test our group chat, we need to set our `.env` variables used in our `server.js`. Open `.env` and make it look like so:\n\n```\n    PUSHER_APP_ID=\"APP_ID\"\n    PUSHER_APP_KEY=\"APP_KEY\"\n    PUSHER_APP_SECRET=\"APP_SECRET\"\n```\n\nYou can get your own `.env` config within your Pusher’s channel application dashboard. Navigate to the **Getting Started** tab, under  **Add this to your server** column, select `.env` to copy, then paste in your `.env` file.\n\nLet’s run our server. Start the frontend if it is not already running. Open your terminal and run this:\n\n```\n    node server.js\n```\n\nNow, let’s go over to our application to test it out:\n\n![chatbot-angular-stage-3](//images.ctfassets.net/1es3ne0caaid/3rCkmJC4Fy0MmmeKq4KEUq/a4876481427843e205c3d1a53ace5414/chatbot-angular-stage-3.gif)\n\nOur application is working as it should 😊, but we are not done yet. The next section is going to show how to add a chatbot user to our group.\n\n\n## Integrating Dialogflow with our server\n\nWe are going to add a chatbot to our group chat to help with getting live scores of football matches. We can easily trigger our bot or call out our bot with the below command:\n\n```\n    /bot message-here\n```\n\nFor example:  `/bot who are you ?` \n\nLet’s head over to [Dialogflow](https://console.dialogflow.com/api-client/#/editAgent/dbe8a515-e82c-4fbc-bb6b-978a24b8ff59/)  to setup our chatbot. Open your Dialogflow dashboard after [creat](https://console.dialogflow.com/api-client/#/login)[ing](https://console.dialogflow.com/api-client/#/login) [a free account](https://console.dialogflow.com/api-client/#/login):\n\n![dialogflow-welcome](//images.ctfassets.net/1es3ne0caaid/17wY4avnWO4g4OE2UsqSUE/f86e28cfc20567a747685b667dd24e5e/chat-bot-nest-dialogflow-welcome.png)\n\nClick on **Create Agent** button to create our chatbot. We are going to name our agent `Pusher-chatbot` \n\n![dialogflow-create-bot](//images.ctfassets.net/1es3ne0caaid/2lm6GmNL0g6I68AeI40asO/f830537f0ed3ea7a6c68881a96e889d6/chat-bot-nest-dialogflow-create-bot.png)\n\n### Creating small talk\nFor a quick start, we can easily program our chatbot for common chat style questions in the small talk panel. This will give our bot a basic level of interactivity with the users. By default, there are responses with predefined phrases within the small talk panel. Go ahead and customize the response as you deem fit. For now, we are going to keep it simple and respond to few questions:\n\n![dialogflow-enable-smalltalk](//images.ctfassets.net/1es3ne0caaid/4wDUh0JEAESOKGG2IKcmsw/65b3e063025111512a59b52ec716ce6e/chat-bot-nest-dialogflow-enable-smalltalk.jpeg)\n\nEnable and save it. You can use the **Try it now** by your right to test our chatbot responses. Let’s get our access token for connecting to our chatbot from our Node server: \n\n![dialogflow-access-keys](//images.ctfassets.net/1es3ne0caaid/3YIKAdn5aUsS2gqkeUkAOi/bddd599ef0eadea32ad12d96feacefee/dialogflow-access-keys.png)\n\nClick on the icon within the red circle to view our agent settings where we can locate our API keys. Open our `.env` and add our client access token not the developer token, as our use case we are going to be doing more of querying of our chatbot via APIs. [Read more](https://dialogflow.com/docs/reference/agent/).\n\n```\n    PUSHER_APP_ID=\"APP_ID\"\n    PUSHER_APP_KEY=\"APP_KEY\"\n    PUSHER_APP_SECRET=\"APP_SECRET\"\n    DIALOG_ACCESS_TOKEN=\"CLIENT_ACCESS_TOKEN\"\n```\nLet’s install [Axios](https://github.com/axios/axios) for sending HTTP request from our Node server to Dialogflow endpoints:\n```\n    npm install axios\n    touch dialogFlow.js\n```\nOpen `dialogFlow.js` and update it to look like so:\n``` javascript\n    // dialogFlow.js\n    \n    const axios = require('axios')\n    \n    const accessToken = process.env.DIALOG_ACCESS_TOKEN\n    const baseURL = 'https://api.dialogflow.com/v1/query?v=20150910'\n    \n    module.exports = {\n      send (message) {\n        const data = {\n          query: message,\n          lang: 'en',\n          sessionId: '123456789!@#$%'\n        }\n    \n        return axios.post(baseURL, data, {\n          headers: { Authorization: `Bearer ${accessToken}` }\n        })\n      }\n    }\n```\nWe used Axios to send a post request to Dialogflow, passing our message to the bot as `query`. Let’s make use of our utility function above to communicate with out chatbot. Open `server.js` \nand update it to look like so:\n``` javascript\n    const express = require('express')\n    const bodyParser = require('body-parser')\n    const Pusher = require('pusher')\n    const cors = require('cors')\n    require('dotenv').config()\n    const shortId = require('shortid') \n    const dialogFlow = require('./dialogFlow')\n    \n    const app = express()\n    app.use(cors())\n    app.use(bodyParser.urlencoded({ extended: false }))\n    app.use(bodyParser.json())\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: 'eu',\n      encrypted: true\n    })\n    \n    app.post('/message', async (req, res) =\u003e {\n      // simulate actual db save with id and createdAt added\n      const chat = {\n        ...req.body,\n        id: shortId.generate(),\n        createdAt: new Date().toISOString()\n      }\n      // trigger this update to our pushers listeners\n      pusher.trigger('chat-group', 'chat', chat)\n    \n      // check if this message was invoking our bot, /bot\n      if (chat.message.startsWith('/bot')) {\n        const message = chat.message.split('/bot')[1]\n        const response = await dialogFlow.send(message)\n        pusher.trigger('chat-group', 'chat', {\n          message: `@${chat.displayName} ${\n            response.data.result.fulfillment.speech\n          }`,\n          displayName: 'Bot User',\n          email: 'bot@we.com',\n          createdAt: new Date().toISOString(),\n          id: shortId.generate()\n        })\n      }\n    \n      res.send(chat)\n    })\n    \n    app.post('/join', (req, res) =\u003e {\n      const chat = {\n        ...req.body,\n        id: shortId.generate(),\n        type: 'joined',\n        createdAt: new Date().toISOString()\n      }\n      // trigger this update to our pushers listeners\n      pusher.trigger('chat-group', 'chat', chat)\n      res.send(chat)\n    })\n    \n    app.listen(process.env.PORT || 2000, () =\u003e console.log('Listening at 2000'))\n```\nWhat we have done is to update the `POST /message` endpoint to handle any message sent from our angular application. The goal is to check where `/bot` is used to begin a message, then intercept those type of messages after sending a Pusher event to others that a user just called a bot. The code within our `POST /message` checks if the message starts with `/bot`. If so we take the second part of the message as what the user is trying to ask the bot to do. After getting the main message we send it to Dialogflow through our utility function. Dialogflow returns a response containing what our bot processed from the message. Then we triggered Pusher’s event to send a message to our group as a bot user using the response from Dialogflow.\n\nLet’s re-run our server like so:\n```\n    node server.js\n```\nOpen our angular app and try sending this message:\n```\n    /bot who are you?\n```\n\n![chatbot-angular-complete](//images.ctfassets.net/1es3ne0caaid/7LhcyXw5l62UwmMmAKkwkm/e882eb2f52140a51a4689e054801e862/chatbot-angular-complete.gif)\n\n## Conclusion\n\nHere, we have been able to build a group chat with a chatbot user. The intention was to give you a general building block that can be built on, explored, and improved to build an amazing chatbot that can do much more with group chats.\n\nI hope this tutorial was helpful and gave you enough information required to start building bots tailored for other use cases, as you deem fit in your organization. \n\nThe source code for this tutorial can be found on [GitHub](https://github.com/theo4u/botAndPusher). Feel free to explore and add more features. ","metaTitle":"Build a group chat app with Angular and Dialogflow","metaDescription":"This tutorial shows you how to build a group chat app in Angular. You will integrate a chatbot, provided by Dialogflow. Users will be able to talk to each other, or to the bot."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2h8nFMJzZiUw0kq8giIymy","type":"Entry","createdAt":"2018-05-22T07:28:18.179Z","updatedAt":"2018-05-22T07:28:18.179Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live chat widget with Ruby and PostgreSQL","url":"live-chat-ruby","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/9jaswag/pusher-chat-widget","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6S5luSjtlYk4i8eM8AyO4I","type":"Entry","createdAt":"2018-02-02T13:39:48.331Z","updatedAt":"2018-02-12T14:41:19.307Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby","url":"ruby","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"hPWAADkjVmomS68E6seqQ","type":"Entry","createdAt":"2018-02-12T14:48:52.613Z","updatedAt":"2018-02-12T14:48:52.613Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby on Rails","url":"ruby-on-rails","type":"framework"}}],"reviewDate":"2018-05-21","description":"Build a chat widget and admin dashboard using Ruby on Rails and PostgreSQL. The application provides the basic functionality for a business help or sales chat widget.","prerequisite":"To follow this tutorial, you need to have Ruby, Rails and PostgreSQL installed on your machine. Basic knowledge of Ruby and CoffeeScript will be helpful.","content":"## Introduction\n\nIn this age of full online shopping experience, customer retention is key. Customers want answers to their questions in realtime with precision. Whenever this is unavailable, they tend to click away to other sites.\n\nOne of the most effective ways for businesses to attend to their customers is through the use of a live chat system. With it, businesses have been able to provide convenient answers to their customers while at the same time, also increase sales.\n\nIn this tutorial, we’ll explore how to create a live chat system in Ruby while leveraging on the awesome features of Pusher.\nWhen we’re done, we should have built something like this:\n\n![ruby-chat-widget-demo](//images.ctfassets.net/1es3ne0caaid/4nmtCUTpZ6SOgOwwSog00q/48404d5f33fea5e13bb04b561ce11946/ruby-chat-widget-demo.gif)\n\n## Prerequisites\n\nA basic understanding of Ruby, CoffeeScript and PostgreSQL will help you with this tutorial. You should also have PostgreSQL installed. Kindly check the [PostgreSQL](https://www.postgresql.org/download/), [Ruby](https://www.ruby-lang.org/en/downloads/) and [Rails](http://guides.rubyonrails.org/getting_started.html) documentation for further installation steps. You also need to have a [Pusher account](https://dashboard.pusher.com/accounts/sign_up).\n\n\n## Setting up the application\n\nOpen your terminal and run the following commands to create our demo application:\n```\n    # create a new Rails application\n    $ rails new pusher-widget -T --database=postgresql\n```\nGo ahead and change directory into the newly created folder:\n```\n    # change directory\n    $ cd pusher-widget\n```\nIn the root of your `pusher-widget` directory, open your `Gemfile` and add the following gems:\n\n```\n    # Gemfile\n    \n    gem 'bootstrap', '~\u003e 4.1.0'\n    gem 'jquery-rails'\n    gem 'pusher'\n    gem 'figaro'\n```\nIn your terminal, ensure you are in the project directory and install the gems by running:\n\n```\n    $ bundle install\n```\nNext, we set up a database for our demo application. Check out this [article](https://www.digitalocean.com/community/tutorials/how-to-setup-ruby-on-rails-with-postgres) on how to create a Postgres database and an associated user and password.\n\nOnce you have your database details, in your `database.yml` file, under the `development` key, add the following code:\n``` yaml\n    # config/database.yml\n    \n    ...\n    development:\n      \u003c\u003c: *default\n      database: pusher-widget_development // add this line if it isn't already there\n      username: database_user // add this line\n      password: user_password // add this line\n    ...\n```\nThe username and password in the code above should have access to the `pusher-widget_development` database. After that, run the following code to setup the database:\n\n```\n    # setup database\n    $ rails db:setup\n```\n\n\n## Bootstrap the application\n\nWith our database set up, we’ll go ahead and create our models and controllers. In your terminal, while in the project’s directory, run the following code:\n```\n    # generate a chatroom model\n    $ rails g model chatroom email:string name:string\n    \n    # generate a chat model\n    $ rails g model chat message:string name:string chatroom:references\n    \n    # run database migrations\n    $ rails db:migrate\n    \n    # generate chatrooms controller with views\n    $ rails g controller chatrooms index new create show\n    \n    # generate chats controller with views\n    $ rails g controller chats index new create show\n```\n\n## Start the application\n\nAfter setting up the models and controllers, in your terminal, start the development server by running `rails s`. Visit http://localhost:3000 in your browser to see your brand new application:\n\n![youre-on-rails](//images.ctfassets.net/1es3ne0caaid/3sOsgC4S80gOKM8Waqkgui/87c5c9e64375cbb2f8f2516223f4e515/youre-on-rails.png)\n\n## Pusher account setup\n\nHead over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up).\n\n![ruby-create-pusher-account](//images.ctfassets.net/1es3ne0caaid/6uDbn5kOyIOiKyeSeOKqeS/6136b86bc4d9b6ceff7fcf8458375a19/ruby-create-pusher-account.png)\n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![ruby-channels-dashboard](//images.ctfassets.net/1es3ne0caaid/5IDtPf0HhC4aKg66gguYq8/183e0b23ec44fdfc23a38921e11fe9e3/ruby-channels-dashboard.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with for a better setup experience:\n\n![ruby-new-pusher-app](//images.ctfassets.net/1es3ne0caaid/3qnLmThfu8ue2ImYKKSw8a/2e4f39b15b8787e0f6d3b4f2ea022d95/ruby-new-pusher-app.png)\n\nClick the **App Keys** tab to retrieve your keys\n\n![ruby-app-keys](//images.ctfassets.net/1es3ne0caaid/1XHWE3GCeoCeqsMCO8uM2q/52523148497d08f6e9ba4f52fe0750f6/ruby-app-keys.png)\n\n## Building the homepage\n\nNow that we have our Pusher credential and our models and controllers have been set up, we will go ahead and build our homepage.\n\nReplace the code in your routes file with the following:\n``` ruby\n    # config/routes.rb\n    \n    Rails.application.routes.draw do\n      resources :chatrooms\n      resources :chats\n      get '/dashboard', to: 'chats#index'\n      root 'chatrooms#index'\n    end\n```\nNext, we hook up Bootstrap and add some styles. In your `application.js` file, add the following code just before the last line:\n``` javascript\n    // app/assets/javascripts/application.js\n    \n    .....\n    //= require jquery3 # add this line\n    //= require popper # add this line\n    //= require bootstrap # add this line\n    //= require_tree .\n```\nRename your `application.css` file to `application.scss` and add the following code:\n``` scss\n     # app/assets/stylesheets/application.scss\n     \n     @import \"bootstrap\";\n     @import url('https://fonts.googleapis.com/css?family=Tajawal');\n     body {\n      font-family: 'Tajawal', sans-serif;\n     }\n     .full-page {\n       height: 100vh;\n       width: 100vw;\n       overflow: hidden;\n     }\n     .jumbotron {\n       margin-top: 8rem;\n     }\n     .popup-wrapper {\n       height: 20rem;\n       position: fixed;\n       right: 1rem;\n       bottom: 0;\n       border-top-left-radius: 15px;\n       border-top-right-radius: 15px;\n     }\n     .popup-head {\n      border-top-left-radius: 15px;\n      border-top-right-radius: 15px;\n      text-align: center;\n      cursor: pointer;\n        p {\n          margin: 0;\n        }\n     }\n     .popup-trigger {\n      height: 2rem;\n      border-top-left-radius: 15px;\n      border-top-right-radius: 15px;\n      position: fixed;\n      bottom: 0;\n      right: 1rem;\n      cursor: pointer;\n      text-align: center;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n        p {\n          margin: 0;\n          font-weight: 900;\n        }\n      }\n      .chat-bubble {\n        border-radius: 3px;\n      }\n      .chats {\n        height: 23vh;\n        overflow: scroll;\n      }\n      .dashboard-sidebar-chat {\n        border-radius: 3px;\n        margin: 1rem 0;\n        padding: 0.2rem .5rem;\n        cursor: pointer;\n        a {\n          text-decoration: none;\n          color: unset;\n        }\n      }\n      .admin-chats {\n        height: 70vh;\n        overflow: scroll;\n      }\n```\nAdd the markup for our homepage in the chatrooms `index.html.erb` file\n``` html\n    # app/views/chatrooms/index.html.erb\n    \n    \u003cdiv class=\"container-fluid full-page bg-dark position-relative\"\u003e\n      \u003cdiv class=\"jumbotron jumbotron-fluid bg-transparent text-white\"\u003e\n        \u003cdiv class=\"container\"\u003e\n          \u003ch1 class=\"display-4\"\u003ePusher Chat Widget\u003c/h1\u003e\n          \u003cp class=\"lead\"\u003eRealtime chat.\u003c/p\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"popup-trigger bg-info text-white col-3\"\u003e\n        \u003cp\u003eChat with support\u003c/p\u003e\n      \u003c/div\u003e\n      \u003cdiv class=\"popup-wrapper bg-white col-3 p-0 collapse\"\u003e\n        \u003cdiv class=\"popup-head bg-info p-1\"\u003e\n          \u003cp\u003eClose chat window\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"start-chat-wrapper bg-light px-1 mt-5\"\u003e\n          \u003c%= form_with(model: @chatroom, format: :json, id: 'start-chat-form') do |form| %\u003e\n            \u003cdiv class=\"field\"\u003e\n              \u003c%= form.text_field :name, id: :name, class: \"form-control\", required: true, placeholder: \"Enter your name\" %\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"field\"\u003e\n              \u003c%= form.email_field :email, id: :email, class: \"form-control mt-3\", required: true, placeholder: \"Enter your email\" %\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"actions\"\u003e\n              \u003c%= form.submit 'Start chat', class: \"btn btn-primary btn-block mt-2\" %\u003e\n            \u003c/div\u003e\n          \u003c% end %\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"chat-wrapper bg-light px-1 collapse\"\u003e\n          \u003cdiv class=\"chats\"\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"chat-form\"\u003e\n            \u003c%= form_with( scope: :chat, url: chats_path, format: :json, id: 'chat-form') do |form| %\u003e\n              \u003cdiv class=\"field\"\u003e\n                \u003c%= form.text_field :message, id: :message, class: \"form-control\", required: true, placeholder: \"Enter your message\" %\u003e\n                \u003c%= form.hidden_field :name, id: :name %\u003e\n                \u003c%= form.hidden_field :chatroom_id, id: :chatroom_id %\u003e\n              \u003c/div\u003e\n            \u003c% end %\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nIf you followed the tutorial so far you should have been able to create the homepage with the chat widget at the bottom right of the screen. Reloading your homepage should display this:\n\n![ruby-chat-widget-homepage](//images.ctfassets.net/1es3ne0caaid/3Lr3bS7y5W0wKICeCU6iQ0/ce92048cb2aa7359b74c7c807fa1b00d/ruby-chat-widget-homepage.png)\n\nIf you encounter a RegExp error while trying to set up Bootstrap, In `config/boot.rb`, change the ExecJS runtime from Duktape to Node.\n\n``` ruby\n    # config/boot.rb\n    ENV['EXECJS_RUNTIME'] ='Node'\n```\n\n## Building the admin dashboard\n\nNow that our homepage is set, next we’ll build the admin dashboard. Let’s add the markup for our dashboard in the chats `index.html.erb` file\n``` html\n    # app/views/chats/index.html.erb\n    \n    \u003cdiv class=\"container-fluid full-page position-relative\"\u003e\n      \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-3 col-md-2 bg-dark full-page px-1 py-2 sidebar\"\u003e\n          \u003c% @chatrooms.each do |chatroom| %\u003e\n            \u003c% if chatroom.chats.any? %\u003e\n              \u003cdiv class=\"dashboard-sidebar-chat bg-info\"\u003e\n                \u003c%= link_to chatroom.email, chat_path(id: chatroom.id), remote: true, class: 'sidebar-chat' %\u003e\n              \u003c/div\u003e\n            \u003c% end %\u003e\n          \u003c% end %\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"col-9 col-md-10 bg-light full-page container\"\u003e\n          \u003ch5 class=\"mt-4\"\u003e👈 Select a chat from the sidebar to load the message\u003c/h5\u003e\n          \u003cdiv class=\"admin-chat-wrapper\"\u003e\n            \u003ch3 class=\"user-email mt-5\"\u003e\u003c/h3\u003e\n            \u003cdiv class=\"chat-form\"\u003e\n              \u003cdiv class=\"admin-chats\"\u003e\u003c/div\u003e\n              \u003c%= form_with( scope: :chat, url: chats_path, format: :json, id: 'admin-chat-form') do |form| %\u003e\n                \u003cdiv class=\"field\"\u003e\n                  \u003c%= form.text_field :message, id: :message, class: \"form-control\", required: true, placeholder: \"Enter your message\" %\u003e\n                  \u003c%= form.hidden_field :name, id: :name, value: 'Pusher support' %\u003e\n                  \u003c%= form.hidden_field :chatroom_id, id: :chatroom_id %\u003e\n                \u003c/div\u003e\n              \u003c% end %\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nAdd the following code to the chatrooms controller:\n``` ruby\n    # app/controllers/chatrooms_controller.rb\n    \n    class ChatroomsController \u003c ApplicationController\n      def index\n        @chatroom = Chatroom.new\n      end\n      def new\n        @chatroom = Chatroom.new\n      end\n      def create\n        @chatroom = Chatroom.new(chatroom_params)\n        respond_to do |format|\n          if @chatroom.save\n            format.html { redirect_to @chatroom }\n            format.json { render :show, status: :created, location: @chatroom }\n          else\n            format.html { render :new }\n            format.json { render json: @chatroom.errors, status: :unprocessable_entity }\n          end\n        end\n      end\n      def show\n        @chatroom = Chatroom.find(params[:id])\n        render json: @chatroom.chats\n      end\n      private\n        def chatroom_params\n          params.require(:chatroom).permit(:email, :name)\n        end\n    end\n```\nAlso, add the following to the `chats_controller.rb` file\n``` ruby\n    # app/controllers/chats_controller.erb\n    \n    class ChatsController \u003c ApplicationController\n      def index\n        @chatrooms = Chatroom.all\n      end\n      def create\n        @chat = Chat.new(chat_params)\n        respond_to do |format|\n          if @chat.save\n            format.json { render :show, status: :created, location: @chat }\n          else\n            format.json { render json: @chat.errors, status: :unprocessable_entity }\n          end\n        end\n      end\n      def new\n        @chat = Chat.new\n      end\n      def show\n        @chats = Chat.where(chatroom_id: params[:id])\n        respond_to do |format|\n          if @chats\n            format.json { render :chats, status: :ok }\n          else\n            format.json { render json: @chats.errors, status: :unprocessable_entity }\n          end\n        end\n      end\n      private\n        def chat_params\n          params.require(:chat).permit(:message, :name, :chatroom_id)\n        end\n    end\n```\nIf you visit http://localhost:3000/dashboard in your browser, you should be greeted with this awesome view:\n\n![ruby-chat-widget-admin-dashboard](//images.ctfassets.net/1es3ne0caaid/391xf8ezoISskSGSKuYem0/f6b74c3faeb76c9d510dd0551422866d/ruby-chat-widget-admin-dashboard.png)\n\n\n## Sending live chat messages\n\nOur live chat system is ready to start receiving messages. All that is left is to handle the messages being sent by both the users and admins. Whenever messages are sent, we update the chat interface via AJAX. In your `chatrooms.coffee` file, add the following code:\n\n``` coffeescript\n    # app/assets/javascripts/chatrooms.coffee\n    \n    $(document).ready =\u003e\n      popupWrapper = $('.popup-wrapper')\n      popupTrigger = $('.popup-trigger')\n      # open the live chat widget if clicked\n      $('.popup-head').click -\u003e\n        popupWrapper.addClass('collapse')\n        popupTrigger.removeClass('collapse')\n        return\n        \n      # close the live chat widget if clicked\n      $('.popup-trigger').click -\u003e\n        popupWrapper.removeClass('collapse')\n        popupTrigger.addClass('collapse')\n        return\n        \n      # if the user's name and email is successfully submitted, hide the form and show the chat interface in the widget\n      $('#start-chat-form').on 'ajax:success', (data) -\u003e\n        chatroom = data.detail[0]\n        $('.chat-form').removeClass('collapse')\n        $('.start-chat-wrapper').addClass('collapse')\n        $('.chat-wrapper').removeClass('collapse')\n        $('#chat-form #name').val(chatroom.name)\n        $('#chat-form #chatroom_id').val(chatroom.id)\n        getChats chatroom.id\n        $('#start-chat-form')[0].reset()\n        return\n      getChats = (id) -\u003e\n        token = $('meta[name=\"csrf-token\"]').attr('content')\n        $.ajax\n          url: 'chatrooms/' + id\n          type: 'get'\n          beforeSend: (xhr) -\u003e\n            xhr.setRequestHeader 'X-CSRF-Token', token\n            return\n          success: (data) -\u003e\n            return\n        return\n      \n      # update the user's chat with new chat messages\n      updateChat = (data) -\u003e\n        if data.chatroom_id == parseInt($('input#chatroom_id').val())\n          $('.chats').append \"\"\"\n            \u003cdiv class=\"chat-bubble-wrapper d-block\"\u003e\n              \u003cdiv class=\"chat-bubble bg-dark p-1 text-white my-1 d-inline-block\"\u003e\n                \u003csmall class=\"chat-username\"\u003e#{data.name}\u003c/small\u003e\n                \u003cp class=\"m-0 chat-message\"\u003e#{data.message}\u003c/p\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \"\"\"\n        return\n      \n      # if the user's chat message is successfully sent, reset the chat input field\n      $('#chat-form').on 'ajax:success', (data) -\u003e\n        chat = data.detail[0]\n        $('#chat-form')[0].reset()\n        return\n        \n      # function for displaying chat messages that belong to chat selcted in the admin sidebar\n      loadAdminChat = (chatArray) -\u003e\n        $('.admin-chats').html \"\"\n        $('input#chatroom_id').val(chatArray.chats[0].chatroom_id)\n        $.map(chatArray.chats, (chat) -\u003e\n          $('.admin-chats').append \"\"\"\n            \u003cdiv class=\"chat-bubble-wrapper d-block\"\u003e\n              \u003cdiv class=\"chat-bubble bg-dark p-1 text-white my-1 d-inline-block\" style=\"min-width: 10rem;\"\u003e\n                \u003csmall class=\"chat-username\"\u003e#{chat.name}\u003c/small\u003e\n                \u003cp class=\"m-0 chat-message\"\u003e#{chat.message}\u003c/p\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \"\"\"\n          return\n        )\n        return\n      \n      # if the available chat in the sidebar is clicked, call the function that displays it's messages\n      $('body').on 'ajax:success', '.sidebar-chat', (data) -\u003e\n        chat = data.detail[0]\n        loadAdminChat chat\n        return\n      \n      # function to update admin's chat with new chat messages\n      updateAdminChat = (chat) -\u003e\n        if chat.chatroom_id == parseInt($('input#chatroom_id').val())\n          $('.admin-chats').append \"\"\"\n            \u003cdiv class=\"chat-bubble-wrapper d-block\"\u003e\n              \u003cdiv class=\"chat-bubble bg-dark p-1 text-white my-1 d-inline-block\" style=\"min-width: 10rem;\"\u003e\n                \u003csmall class=\"chat-username\"\u003e#{chat.name}\u003c/small\u003e\n                \u003cp class=\"m-0 chat-message\"\u003e#{chat.message}\u003c/p\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \"\"\"\n        return\n      \n      # function to update the available chats in the sidebar\n      updateAdminChatrooms = (chatroom) -\u003e\n        $('.sidebar').append \"\"\"\n          \u003cdiv class=\"dashboard-sidebar-chat bg-info\"\u003e\n            \u003ca class=\"sidebar-chat\" data-remote=\"true\" href=\"/chats/#{chatroom.id}\"\u003e#{chatroom.email}\u003c/a\u003e\n          \u003c/div\u003e\n        \"\"\"\n        return\n      # if admin's chat is successfully  sent, clear the chat input field\n      $('#admin-chat-form').on 'ajax:success', (data) -\u003e\n        chat = data.detail[0]\n        $('#admin-chat-form')[0].reset()\n        return\n```\nWe’ll make use of [Jbuilder](https://github.com/rails/jbuilder) to build our server response into JSON. In your chatroom views folder, create a `show.json.jbuilder` file and add the following code:\n\n``` \n    # app/views/chatrooms/show.json.jbuilder\n    \n    json.extract! @chatroom, :id, :name, :email\n    json.url chatroom_url(@chatroom, format: :json)\n```\nIn the views/chats folder, create two files: `show.json.jbuilder` and `chats.json.jbuilder` and add the following code respectively:\n\n```\n    # app/views/chats/show.json.jbuilder\n    \n    json.extract! @chat, :id, :message, :name, :chatroom_id\n    json.url chat_url(@chat, format: :json)\n```\n\n```\n    # app/views/chats/show.json.builder\n    \n    json.chats @chats do |chat|\n      json.(chat, :id, :name, :message, :chatroom_id)\n    end\n```\nLastly, we add update the chatroom model with the following\n``` ruby\n    # app/models/chatroom.rb\n    class Chatroom \u003c ApplicationRecord\n      has_many :chats # add this line\n    end\n```\nIf you followed the tutorial so far you should have been able to send messages from the chat widget on the homepage and if you reload your admin dashboard, you should see your message there.\nSweet! Next, we’ll remove the hassles of reloading with Pusher.\n\n\n## Realtime service with Pusher\n\nFor a live chat widget to be successful, the company should be immediately aware when there is a new message from a customer. We’ll go ahead and get that done with Pusher.\n\nFirstly, we will initialize a Pusher client in our application. In the `config/initializers` directory, create a `pusher.rb` file and add the following code:\n\n``` ruby\n    # config/initializers/pusher.rb\n    \n    require 'pusher'\n    Pusher.app_id = ENV[\"PUSHER_APP_ID\"]\n    Pusher.key = ENV[\"PUSHER_KEY\"]\n    Pusher.secret = ENV[\"PUSHER_SECRET\"]\n    Pusher.cluster = ENV[\"PUSHER_CLUSTER\"]\n    Pusher.logger = Rails.logger\n    Pusher.encrypted = true\n```\nIn your terminal, run `figaro install` to generate an `application.yml` file. In the `application.yml` file add your Pusher keys:\n\n``` yaml\n    # config/application.yml\n    \n    PUSHER_APP_ID: 'xxxxxx'\n    PUSHER_KEY: 'xxxxxxxxxxxxxxxxx'\n    PUSHER_SECRET: 'xxxxxxxxxxxxxx'\n    PUSHER_CLUSTER: 'xx'\n```\nAdd the Pusher library inside the head tag in the `application.html.erb` file just before the `javascript_include_tag`:\n\n``` html\n    \u003c%# app/views/layouts/application.html.erb %\u003e\n    \n    \u003chead\u003e\n      ....\n      \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e // add this line\n      \u003c%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %\u003e\n    \u003c/head\u003e\n```\nFor the admin to be notified of a new customer chat, we notify Pusher whenever a customer starts a new chat. On the admin end, we’ll subscribe to events on our Pusher channel and update the UI accordingly.\n\nSame thing applies for when both the user and admin exchange messages, we publish the messages via Pusher and subscribe to the updates on the frontend.\n\nUpdate your chat and chatroom model respectively:\n\n``` ruby\n    # app/models/chat.rb\n    class Chat \u003c ApplicationRecord\n      after_create :notify_pusher\n      belongs_to :chatroom\n    \n      def notify_pusher\n        Pusher.trigger('chat', 'new-chat', self.as_json)\n      end\n    end\n\n\n    # app/models/chatroom.rb\n    class Chatroom \u003c ApplicationRecord\n      after_create :notify_pusher\n      has_many :chats\n    \n      def notify_pusher\n        Pusher.trigger('chat', 'new-chatroom', self.as_json)\n      end\n    end\n```\nIn the code above, we add an `after_create` callback to both the chat and the chatroom models, which calls the function to publish new chats and chatrooms.\n\nRename your `chatroom.coffee` file to `chatroom.coffee.erb` and add the following code to the end of the file:\n\n``` ruby\n    # app/assets/javascripts/chatroom.coffee.erb\n    \n    .....\n      pusher = new Pusher('\u003c%= ENV[\"PUSHER_KEY\"] %\u003e',\n        cluster: '\u003c%= ENV[\"PUSHER_CLUSTER\"] %\u003e'\n        encrypted: true)\n      channel = pusher.subscribe('chat')\n      channel.bind 'new-chat', (data) -\u003e\n        updateChat data\n        updateAdminChat data\n      channel.bind 'new-chatroom', (data) -\u003e\n        updateAdminChatrooms data\n        return\n```\nIn the code above, we subscribe our Pusher client to the chat channel. Whenever there is a new chat or chatroom, we update the admin and user’s chat interface.\nEnsure the code added above is indented as other code in the file.\n\n\n## Bringing it all together\n\nRestart your development server and send some messages through the chat widget, they should pop up on the admin side.\n\n\n## Conclusion\n\nIn this tutorial, you learned how to build a customer support widget and administrator interface using Ruby and Pusher. Feel free to explore more by visiting Pusher’s documentation.\nThe source code to the article is available on [GitHub](https://github.com/9jaswag/pusher-chat-widget).","metaTitle":"Build a live chat widget with Ruby and PostgreSQL","metaDescription":"This tutorial will guide you through creating a chat widget and admin dashboard, suitable for a business help chat or sales chat. You will use Ruby on Rails and PostgreSQL."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4lpahyGo5GCgYAiwygE60Y","type":"Entry","createdAt":"2018-05-21T09:39:52.486Z","updatedAt":"2020-06-19T14:06:19.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an activity feed using .NET","url":"activity-feed-dotnet","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"38Gip5IBCgiiy4AYeeyyqG","type":"Entry","createdAt":"2018-03-04T19:48:48.360Z","updatedAt":"2018-03-04T19:48:48.360Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Gideon Onwuka","url":"gideon-onwuka","email":"dongidomed@gmail.com","twitter":"https://twitter.com/gideon_onwuka","github":"https://github.com/dongido001","guestWriter":true}}],"projectRepo":"https://github.com/dongido001/ProdFeed","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2zMClYDH68wMGYcoiYC8wI","type":"Entry","createdAt":"2018-02-12T14:44:37.285Z","updatedAt":"2018-02-12T14:44:37.285Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":".NET","url":"net","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2kVecA2nXe6CSEuigMi4Yq","type":"Entry","createdAt":"2018-02-12T14:46:25.053Z","updatedAt":"2018-02-12T14:46:25.053Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"ASP.NET","url":"asp-net","type":"framework"}}],"reviewDate":"2018-05-20","description":"Build an activity feed and dashboard using .NET. Create two interfaces: one for entering and modifying data, and another that monitors the database and provides alerts when data changes.","prerequisite":"You need .NET and Visual Studio Code installed on your machine, along with the Visual Studio Code C# extension.","content":"Getting a notification for an important event hours after the event is over is really annoying.\nTo be responsive, you need to be in sync with what is happening and as soon as it happens.  Activity feeds allow you to visualize activities in your application and see what is happening in realtime.\n\nIn this tutorial, I'll show you how to integrate an activity feed into your project using ASP.NET Core and Pusher’s [Channels](https://pusher.com/channels). We’ll start by building an application that will allow a user to add a product, view, change status, and delete a product. Then, we'll create a new page that displays in realtime what is happening in the app. \n\nHere is what the final app will look like:\n\n![activity-feed-dotnet-demo](//images.ctfassets.net/1es3ne0caaid/6qeORzrkByakGuiOM0qqy2/648a2cad6a96b0230d8bd68d218ef941/activity-feed-dotnet-demo.gif)\n\n## Prerequisites\n\nThis tutorial uses the following technologies:\n\n\n- JavaScript ([jQuery](http://jquery.com/)) \n- [ASP.NET Core](https://docs.microsoft.com/en-us/aspnet/core/?view=aspnetcore-2.1)\n- [Visual Studio Code](https://code.visualstudio.com/) \n- [.NET Core SDK](https://www.microsoft.com/net/download/core) \u003e= 2.0 (Download and install it [here](https://www.microsoft.com/net/download/core) if you don’t have it)\n- Visual Studio Code [C# extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp) (Install [C# extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp) from the Visual Studio Code Marketplace if you don’t have it installed)\n- A Pusher account\n\nBefore we move on, verify that your installation is complete by typing the below command:\n\n```\n    dotnet --version\n```\n \nIf everything worked correctly, the above command will have an output like below:\n\n![activity-feed-dotnet-version-output](//images.ctfassets.net/1es3ne0caaid/6lEPTDeqlOEskMiosMEgQ8/ed67592803a8ed26fe5079da4f3f2313/activity-feed-dotnet-version-output.png)\n\n## Setting up a Pusher Channels application\n\nTo start utilizing Pusher’s technology, you need to create a Pusher app and get the app keys.  [Log in](https://dashboard.pusher.com/accounts/sign_in) or [sign up](https://dashboard.pusher.com/accounts/sign_up) (if you don’t have an account already) for a free account.\n\nOnce you are [logged in,](https://dashboard.pusher.com/) create a new app then note down your `app_id`, `key`, `secret` and `cluster`. We’ll need it later.\n\n\n## Creating an ASP.NET Core MVC project\n\nWe'll set up an ASP.NET Core project using the `dotnet` command.\n\nOpen up a command line, and enter the below commands:\n\n```\n    mkdir ProdFeed\n    cd ProdFeed\n    dotnet new mvc\n```\nIn the above command,\n\n\n- The first command will create a new folder named `ProdFeed`\n- The second command will change your current directory to the folder you just created\n- And the last command will create a new ASP.NET Core MVC project in your current folder\n\nNext,\n\n\n- Open the `ProdFeed` folder in Visual Studio Code editor and select the `Startup.cs` file.\n\n\n\u003e  💡 If your Visual Studio Code has been added to your system path, you can open the project by typing  `code .` in your command prompt.\n\n\n- Select **Yes** to the **Warn** message \"Required assets to build and debug are missing from `ProdFeed`. Add them?\"\n- Select **Restore** to the **Info** message \"There are unresolved dependencies\" if you got the message.\n\nNow, press **Debug** (F5) to build and run the program. The address in which the project is running will open automatically if there is no error. In case it does not open automatically, navigate to [http://localhost:5000/](http://localhost:5000/) from your browser. You should see a default page.\n\nNext, update `ProdFeed.csproj` with the following code:\n\n``` c#\n    \u003cProject Sdk=\"Microsoft.NET.Sdk.Web\"\u003e\n      \u003cPropertyGroup\u003e\n        \u003cTargetFramework\u003enetcoreapp2.0\u003c/TargetFramework\u003e\n      \u003c/PropertyGroup\u003e\n      \u003cItemGroup\u003e\n        \u003cPackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.3\" /\u003e\n        \u003cPackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.0.0\" /\u003e\n      \u003c/ItemGroup\u003e\n      \u003cItemGroup\u003e\n        \u003cDotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"2.0.0\" /\u003e\n        \u003cDotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.1\" /\u003e\n      \u003c/ItemGroup\u003e\n    \u003c/Project\u003e\n```\n\nSave the file and select **Restore** to the **Info** message \"There are unresolved dependencies\". This will prepare the project for scaffolding and enable entity framework tooling. Now we are ready to start building our application.\n\n\n## Adding models\n\nA model is an object that represents the data in our application. For this project, we’ll create a model - `Product` - which will hold our business logic for products.\n\nNow, create a new file named `Product.cs` in the `Models` folder and add the below code to it:\n\n``` c#\n    using System;\n    \n    namespace ProdFeed.Models\n    {\n        public class Product\n        {\n            public int ID { get; set; }\n            public string Name { get; set; }\n            public string Description { get; set; }\n            public bool Status { get; set; }\n            public decimal Price { get; set; }\n        }\n    }\n```\n\n## Creating the database context\n\nThe *database context* is the main class that coordinates [Entity Framework](https://docs.microsoft.com/en-us/aspnet/mvc/overview/getting-started/getting-started-with-ef-using-mvc/creating-an-entity-framework-data-model-for-an-asp-net-mvc-application) functionality for a given data model. We’ll derive from the  `Microsoft.EntityFrameworkCore.DbContext`  to create this class. When we run our migration, a table named `Products` will be created which we’ll use to save products.\n\nCreate a new file called `ProdFeedContext.cs` in the `Models` folder and add the following code to it:\n\n``` c#\n    using Microsoft.EntityFrameworkCore;\n    \n    namespace ProdFeed.Models\n    {\n        public class ProdFeedContext : DbContext\n        {\n            public ProdFeedContext (DbContextOptions\u003cProdFeedContext\u003e options)\n                : base(options)\n            {\n            }\n            public DbSet\u003cProduct\u003e Products { get; set; }\n        }\n    }\n```\n\n## Setting up the database and running migrations\n\nNow that we have created our models, we can easily generate a migration file that will contain code for creating and updating our table schema.\n\nIn this tutorial, we’ll make use of SQLite for our database.\n\nWe’ll register the database context with the [dependency injection](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection) container. Services (such as the DB context) that are registered with the dependency injection container are available to the controllers. \n\nUpdate the code in `ConfigureServices`  method of  `/Startup.cs`  file with the following code:\n\n``` c#\n    [...]\n    public void ConfigureServices(IServiceCollection services)\n    {\n       [...]\n          services.AddDbContext\u003cProdFeedContext\u003e(options =\u003e\n                  options.UseSqlite(\"Data Source=ProdFeed.db\"));\n       [...]\n    }\n    [...]\n```\n\nThis tells Entity Framework which model classes are included in the data model.\n\nFinally, add the following **usings** to the header of `Startup.cs` file:\n\n``` c#\n    using ProdFeed.Models;\n    using Microsoft.EntityFrameworkCore;\n```\nYou can see the database context as a database connection and a set of tables, and the Dbset as a representation of the tables themselves. \n\nThe database context allows us to link our model properties to our database with a connection string (in our case, we are using SQLite)\n\n### Running the migration\n\nFrom your command line, run the following command:\n\n```\n    dotnet ef migrations add ProdFeed\n    dotnet ef database update\n```\n\n- The first command will create a migration script that will be used for managing our database tables\n- The second command will execute the migration script, thereby applying the migration to the database to create the schema\n\n\n\u003e 💡 If you got an error while running the command, stop the debugging or the server and try again.\n\n\n## Adding our controllers\n\nWe’ll need two controllers - `ProdctController` and `FeedController`. The ProductController will be responsible for all product-related logic while the FeedController will be responsible for feeds related logic.\n\n### The Product controller\nNow let’s create the ProductController. Create a new file called `ProductController.cs` in the `Controllers` folder and add the below code to it:\n\n``` c#\n    using System;\n    using System.Collections.Generic;\n    using System.Diagnostics;\n    using System.Linq;\n    using System.Threading.Tasks;\n    using Microsoft.AspNetCore.Mvc;\n    using Microsoft.EntityFrameworkCore;\n    using ProdFeed.Models;\n    \n    namespace ProdFeed.Controllers\n    {\n        public class ProductController : Controller\n        {\n            private readonly ProdFeedContext _context;\n            public ProductController(ProdFeedContext context) \n            {\n                _context = context;\n            }\n        }\n    }\n```\nHere, we have injected `ProdFeedContext` class into the `ProductController` class.\n\nNext, let’s add a method for listing all the products to the views. Add the following code to `ProductController.cs`:\n\n``` c#\n        [...]\n            public async Task\u003cIActionResult\u003e Index()\n            {\n                // get all products..\n                return View(await _context.Products.ToListAsync());\n            }\n        [...]\n```\nThis will fetch all the products on the `Products` table and pass it down to the view.\n\nNext, add the following code to add the `Create` method in `ProductController.cs`:\n\n``` c#\n      [...]\n            [HttpPost]\n            public async Task\u003cIActionResult\u003e Create([Bind(\"ID,Name,Description,Status,Price\")] Product product)\n            {\n                if (ModelState.IsValid)\n                {\n                    _context.Products.Add(product);\n                    await _context.SaveChangesAsync();\n                }\n                return RedirectToAction(nameof(Index));\n            }\n      [...]\n```\nThis method will add a new product to the database.\n\nNext, add the following code to add the `Delete` method in `ProductController.cs`:\n\n``` c#\n        [...]\n            [HttpGet]\n            public async Task\u003cIActionResult\u003e Delete(int id)\n            {\n                var product = new Product { ID = id };\n                _context.Products.Remove(product);\n                await _context.SaveChangesAsync();\n                return RedirectToAction(nameof(Index));\n            }\n        [...]\n```\nThis method will delete a product from the database using the product ID.\n\nNext, add the following code to add the `ChangeStatus` method in `ProductController.cs`:\n\n``` c#\n        [...]\n            [HttpGet]\n            public async Task\u003cIActionResult\u003e ChangeStatus(int id)\n            {\n                var product = await _context.Products.SingleOrDefaultAsync(m =\u003e m.ID == id);\n                product.Status = !product.Status;\n                await _context.SaveChangesAsync();\n                return RedirectToAction(nameof(Index));\n            }\n        [...]\n```\nIn this method, we’ll change the product status, either from “In stock” to “Out of stock” or vice versa.\n\nWith this, we now have four routes available:\n\n\n- http://localhost:5000/Product/Index  - for listing products\n- http://localhost:5000/Product/Create - for creating new product\n- http://localhost:5000/Product/Delete/{id} - for deleting a product\n- http://localhost:5000/Product/ChangeStatus/{id} - for changing a product status\n\nAlthough, if you visit any of the routes, you’ll get an error because we are yet to create their respective views. \n\n### The Feedback controller\nNext, let’s create the controller for feeds.\n\nCreate a new file named `FeedController.cs` in the `Controllers` folder and add the following code to it:\n\n``` c#\n    using Microsoft.AspNetCore.Mvc;\n    \n    namespace ProdFeed.Controllers\n    {\n        public class FeedController : Controller\n        {\n            public IActionResult Index()\n            {\n                return View();\n            }\n        }\n    }\n```\n\n## Adding the views\n\nNow, let’s craft out our views. The layout view allows us to define a common site template, which can be inherited in multiple views to provide a consistent look and feel across multiple pages of our application. \n\nReplace the content in `Views/Shared/_Layout.cshtml` with the below:\n\n``` html\n    \u003c!doctype html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003c!-- Required meta tags --\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003c!-- Bootstrap CSS --\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css\"\u003e\n        \u003ctitle\u003eHello, world!\u003c/title\u003e\n      \u003c/head\u003e\n      \u003cbody\u003e\n        \u003cnav class=\"navbar navbar-expand-lg navbar-dark bg-dark\"\u003e\n            \u003ca class=\"navbar-brand\" href=\"#\"\u003eProduct\u003c/a\u003e\n            \u003cbutton class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarText\" aria-controls=\"navbarText\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"\u003e\n                \u003cspan class=\"navbar-toggler-icon\"\u003e\u003c/span\u003e\n            \u003c/button\u003e\n            \u003cdiv class=\"collapse navbar-collapse\" id=\"navbarText\"\u003e\n                \u003cul class=\"navbar-nav mr-auto\"\u003e\n                    \u003cli class=\"nav-item active\"\u003e\n                        \u003ca class=\"nav-link\" href=\"#\"\u003eHome \u003cspan class=\"sr-only\"\u003e(current)\u003c/span\u003e\u003c/a\u003e\n                    \u003c/li\u003e\n                \u003c/ul\u003e\n            \u003c/div\u003e\n        \u003c/nav\u003e\n        \u003cdiv class=\"container-fluid\"\u003e\n           @RenderBody()\n        \u003c/div\u003e\n        \u003cscript src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\nFor the product page, create a new folder named `Product` in the `Views` folder then create a new file called `Index.cshtml` to the `Product` folder.\n\nNow, add the below code to `Views``/Product/Index.cshtml`:\n\n``` html\n    @model IEnumerable\u003cProdFeed.Models.Product\u003e\n    \n    \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col\"\u003e\n            \u003cdiv style=\"padding: 40px;\"\u003e\n                \u003ch4 class=\"text-center\"\u003eAdd product\u003c/h4\u003e\n                \u003cform method=\"POST\" action=\"/product/Create\"\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"name\"\u003eName\u003c/label\u003e\n                        \u003cinput \n                          type=\"text\" \n                          class=\"form-control\" \n                          name=\"Name\" \n                          id=\"name\" \n                          placeholder=\"Gala\"\n                        \u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"product_name\"\u003e($)Price\u003c/label\u003e\n                        \u003cinput \n                          type=\"text\" \n                          class=\"form-control\" \n                          name=\"Price\" \n                          id=\"Price\"\n                          placeholder=\"10\"\n                        \u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"status\"\u003eAvailability\u003c/label\u003e\n                        \u003cselect class=\"form-control\" id=\"Status\" name=\"Status\"\u003e\n                            \u003coption value=\"true\"\u003eIn stock\u003c/option\u003e\n                            \u003coption value=\"false\"\u003eOut of Stock\u003c/option\u003e\n                        \u003c/select\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"description\"\u003eDescription\u003c/label\u003e\n                        \u003ctextarea \n                          class=\"form-control\" \n                          id=\"description\" \n                          name=\"Description\" \n                          rows=\"3\"\n                        \u003e\u003c/textarea\u003e\n                    \u003c/div\u003e\n                    \u003cbutton \n                      type=\"submit\" \n                      role=\"submit\" \n                      class=\"btn btn-secondary btn-lg btn-block\"\n                    \u003e\n                      Add Product\n                    \u003c/button\u003e\n                \u003c/form\u003e\n            \u003c/div\u003e\n         \u003c/div\u003e\n        \u003cdiv class=\"col\"\u003e\n            \u003cdiv class=\"products\" style=\"padding: 40px;\"\u003e\n                \u003ch4 class=\"text-center\"\u003eProducts\u003c/h4\u003e\n                @foreach (var product in Model) {\n                    \u003cdiv class=\"product\"\u003e\n                        \u003cdiv class=\"card\" style=\"margin-bottom: 5px;\"\u003e\n                            \u003cimg \n                              class=\"card-img-top\" \n                              height=\"250\"\n                              src=\"https://www.africalinked.com/images/product-default.png\" \n                              alt=\"Product image\"\n                            \u003e\n                            \u003cdiv class=\"card-body\"\u003e\n                              \u003ch5 class=\"card-title\"\u003e@product.Name\u003c/h5\u003e\n                              \u003cp class=\"card-text\"\u003e@product.Description\u003c/p\u003e\n                              \u003cp class=\"card-text\"\u003e$@product.Price\u003c/p\u003e\n                               @if (product.Status) {\n                                 \u003cspan style=\"color: green\"\u003eIn Stock\u003c/span\u003e\n                               } else {\n                                 \u003cspan style=\"color: red\"\u003e Out of Stock  \u003c/span\u003e\n                               }\n                            \u003c/div\u003e\n                            \u003cdiv class=\"card-footer\"\u003e\n                                \u003cdiv class=\"row\"\u003e\n                                   \u003cdiv class=\"col\"\u003e\n                                      \u003ca \n                                        type=\"link\"\n                                        asp-controller=\"Product\"\n                                        asp-route-id=\"@product.ID\"\n                                        asp-action=\"Delete\"\n                                        role=\"button\"\n                                        class=\"btn btn-secondary btn-lg btn-block\"\n                                      \u003e\n                                       Delete\n                                      \u003c/a\u003e\n                                    \u003c/div\u003e\n                                    \u003cdiv class=\"col\"\u003e\n                                      \u003ca\n                                        type=\"link\"\n                                        asp-controller=\"Product\"\n                                        asp-route-id=\"@product.ID\"\n                                        asp-action=\"ChangeStatus\"\n                                        role=\"button\"\n                                        class=\"btn btn-secondary btn-lg btn-block\"\n                                      \u003e\n                                      @if (!product.Status) {\n                                        \u003cspan\u003eIn stock\u003c/span\u003e\n                                      }\n                                      else\n                                      {\n                                        \u003cspan\u003eOut of Stock\u003c/span\u003e\n                                      }\n                                      \u003c/a\u003e\n                                    \u003c/div\u003e\n                                \u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                }\n            \u003c/div\u003e\n         \u003c/div\u003e\n    \u003c/div\u003e\n```\nNow, we have our product page where users can add, delete or change the status of a product. The page will have two columns. The first column is for adding a new product while the second column will be used to display products.\n\n### Creating the feed page\nCreate a new folder named `Feed` in the `Views` folder then add a new file called `Index.cshtml` to the `Feed` folder.\n\nNow, add the below code to `Views``/Feed/Index.cshtml`:\n\n``` html\n    \u003cstyle\u003e\n       .feed {\n           padding: 2px 10px;\n           background-color:#6c757d;\n           margin: 4px; \n           color:aliceblue;\n           border-radius: 3px;\n       }\n    \u003c/style\u003e\n    \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col\"\u003e\n            \u003cdiv class=\"container\" style=\"padding: 40px;\"\u003e\n                \u003ch4 class=\"text-center\"\u003eFeeds\u003c/h4\u003e\n                \u003cdiv id=\"feeds\"\u003e\n                    \u003c!-- feeds --\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n         \u003c/div\u003e\n    \u003c/div\u003e\n    \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n```\n\n## Subscribing to a channel, triggering and listening for events\n\nWe’ll subscribe to a channel called `feed` on the feed page. Then we’ll continuously listen for `new_feed` events. When there is any activity, we’ll trigger an event to Pusher's server so that Pusher will broadcast the event to the client (our feed page). Then we’ll act on the event to display the feed for that activity.\n\n### Installing the Pusher library\nPusher has a .NET library that makes it easy to interact with its API. We need to add this to the project.\n\nFrom your command line, install the library by running the below command: \n\n```\n    dotnet add package PusherServer\n```\n\nChannel helper class and events\nLet’s create a helper class that we’ll use to trigger event to Pusher. \n\nCreate a new folder called `Helpers` in the root folder of the project then create a new file named `ChannelHelper.cs` in the folder you just created.\n\nThen, add the following code to `ChannelHelper.cs`:\n \n``` c#\n    using System.Threading.Tasks;\n    using Microsoft.AspNetCore.Mvc;\n    using PusherServer;\n    \n    namespace ProdFeed.Helpers\n    {\n        public class Channel\n        {\n            public static async Task\u003cIActionResult\u003e Trigger(object data, string channelName, string eventName)\n            {\n                var options = new PusherOptions\n                {\n                    Cluster = \"\u003cPUSHER_APP_CLUSTER\u003e\",\n                    Encrypted = true\n                };\n                var pusher = new Pusher(\n                  \"\u003cPUSHER_APP_ID\u003e\",\n                  \"\u003cPUSHER_APP_KEY\u003e\",\n                  \"\u003cPUSHER_APP_SECRET\u003e\",\n                  options\n                );\n            \n                var result = await pusher.TriggerAsync(\n                  channelName,\n                  eventName,\n                  data\n                );\n                return new OkObjectResult(data);\n            }\n        }\n    }\n```\nIn the preceding code,\n\n- We created a method called `Trigger` which accepts `data`, `channelName` and `eventName` as parameters. We’ll use this method to trigger events to Pusher\n- Then, we included the Pusher library. Although we’ve not yet installed the library, we’ll do so in the next step\n- Next, we initialized the .NET library\n- Finally, we triggered an event to Pusher using the parameters passed to the method\n\nMake sure to update the code with your correct Pusher keys.\n\n### Import the ChannelHelper class to ProductController.cs\n\nAdd the bellow **using** to `ProductController.cs`:\n\n```\n    using ProdFeed.Helpers;\n```\n\n### Trigger an event when a new product is added\n\nUpdate the `Create` method in the `ProductController.cs` with the folowing code:\n\n``` c#\n            [HttpPost]\n            public async Task\u003cIActionResult\u003e Create([Bind(\"ID,Name,Description,Status,Price\")] Product product)\n            {\n                if (ModelState.IsValid)\n                {\n                    _context.Products.Add(product);\n                    await _context.SaveChangesAsync();\n                    \n                    var data = new {\n                        message = System.String.Format(\"New product with ID of #{0} added\", product.ID)\n                    };\n                    await Channel.Trigger(data, \"feed\", \"new_feed\");\n                }\n                return RedirectToAction(nameof(Index));\n            }\n```\n\nHere we added code for triggering an event to Pusher once a new product has been created using `await Channel.Trigger(data, \"feed\", \"new_feed\");`.\n\n### Trigger an event when a product is deleted\n\nNext, update the `Delete` method in the `ProductController.cs` class with the following code:\n\n``` c#\n            [HttpGet]\n            public async Task\u003cIActionResult\u003e Delete(int id)\n            {\n                var product = new Product { ID = id };\n                _context.Products.Remove(product);\n                await _context.SaveChangesAsync();\n                var data = new {\n                    message = System.String.Format(\"Product with ID of #{0} deleted\", product.ID)\n                };\n                await Channel.Trigger(data, \"feed\", \"new_feed\");\n                return RedirectToAction(nameof(Index));\n            }\n```  \n\nWhen we delete a product, we’ll trigger an event to Pusher.\n\n### Trigger an event when a product status is changed\n\nFinally, update the `ChangeStatus` method in the `ProductController.cs` class with the following code:\n\n``` c#\n            [HttpGet]\n            public async Task\u003cIActionResult\u003e ChangeStatus(int id)\n            {\n                var product = await _context.Products.SingleOrDefaultAsync(m =\u003e m.ID == id);\n                product.Status = !product.Status;\n                await _context.SaveChangesAsync();\n                \n                var status = product.Status ? \"In stock\" : \"Out of Stock\";\n                var data = new {\n                    message = System.String.Format(\"Status of product with ID #{0} status changed to '{1}'\", product.ID, status)\n                };\n              \n                await Channel.Trigger(data, \"feed\", \"new_feed\");\n                \n                return RedirectToAction(nameof(Index));\n            }\n```\nWhen the status of a product changes, we’ll trigger an event to Pusher using `await Channel.Trigger(data, \"feed\", \"new_feed\");`\n\n### Listening and responding to events\n\nNow we can trigger events on the server side when there is an activity going on. Next, we'll respond to those events on the client side. We’ll do this using the Pusher JavaScript library we’ve included earlier.\n\nInitiate the Pusher JavaScript library by adding the below code to `Views/Feed/Index.cshtml` file:\n\n``` html\n    [...]\n    \u003cscript type=\"text/javascript\"\u003e\n        const pusher = new Pusher('\u003cPUSHER_APP_KEY\u003e', {\n            cluster: '\u003cPUSHER_APP_CLUSTER\u003e'\n        });\n    \u003c/script\u003e\n```\nMake sure to update the code with your correct Pusher keys.\n\nNext, subscribe to a channel. Add the below code to `Views/Feed/Index.cshtml` between the `\u003cscript\u003e` tag:\n\n``` html\n    [...]\n        const channel = pusher.subscribe('feed');\n    [...]\n```  \n\nNext, listen for `new_feed` events and respond to them when they happen. Add the below code to `Views/Feed/Index.cshtml` between the `\u003cscript\u003e` tag:\n\n``` c#\n    [...]\n        channel.bind('new_feed', function(data) {\n          $(\"#feeds\").append(`\n              \u003cdiv class=\"feed\"\u003e\n                  \u003cdiv class=\"feed\" style=\"margin-bottom: 5px;\"\u003e\n                      ${data.message}\n                  \u003c/div\u003e\n              \u003c/div\u003e\n          `);\n        });\n    [...]\n```\nAnd that’s it! There you have your working activity feed. Load up the pages (the product page - http://localhost:5000/Product and the feed page - http://localhost:5000/Feed) in a different tab in your browser then add or delete a product.\n\n\n## Conclusion\n\nIn this tutorial, we built a simple app to demonstrate how you can add an activity feed to your apps. Feeds will be visible to every user using the app. But at times, this might not be what you want. You may want to send the notification to some targeted user. This means you need to subscribe to a private channel instead of a public channel. You can read more about the [private channels](https://pusher.com/docs/client_api_guide/client_private_channels) here.\nAlso, you can get the complete code of this app on [Github](https://github.com/dongido001/ProdFeed.git).\n\n","metaTitle":"Build an activity feed using .NET","metaDescription":"This tutorial uses .NET to create an activity feed. You will build an app with two pages: one to modify data, and one to monitor the database and provide updates when it changes."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"lgJ9sfwkyyESQqCwusGeE","type":"Entry","createdAt":"2018-05-21T09:40:00.234Z","updatedAt":"2019-01-02T15:37:26.438Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app with Ruby on Rails","url":"chat-app-ruby-rails","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/9jaswag/pusher-chat","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6S5luSjtlYk4i8eM8AyO4I","type":"Entry","createdAt":"2018-02-02T13:39:48.331Z","updatedAt":"2018-02-12T14:41:19.307Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby","url":"ruby","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"hPWAADkjVmomS68E6seqQ","type":"Entry","createdAt":"2018-02-12T14:48:52.613Z","updatedAt":"2018-02-12T14:48:52.613Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby on Rails","url":"ruby-on-rails","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-05-20","description":"Learn to build a chat app using Ruby on Rails, CoffeeScript and PostgreSQL. Create a simple instant messenger app.","prerequisite":"To follow this tutorial, you need to have Ruby, Rails and PostgreSQL installed on your machine. Basic knowledge of Ruby and CoffeeScript will be helpful.","content":"## Introduction\n\nIn this post, we will be building a realtime chat application. This application will be built using Ruby on Rails and Pusher.\n\nA quick look at what we’ll be building:\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/n2GbjDltMWY?rel=0\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen\u003e\u003c/iframe\u003e\n\nChat applications have become very popular on virtually all web applications in today’s world. One very important feature of all chat applications is *Instant Messaging*.  It is usually one of the basis for the success of any chat application.\n\nTo have the best chat experience, there must be a seamless realtime update of new messages.\n\n## Prerequisites\n\nA basic understanding of Ruby and CoffeeScript will help you get the best out of this tutorial. It is assumed that you already have Ruby, Rails and PostgreSQL installed. Kindly check the [PostgreSQL](https://www.postgresql.org/download/), [Ruby](https://www.ruby-lang.org/en/downloads/) and [Rails](http://guides.rubyonrails.org/getting_started.html) documentation for installation steps.\n\n\n## Setting up the application\n\nOpen your terminal and run the following commands to create our demo application:\n\n```\n    # create a new rails application\n    $ rails new pusher-chat -T --database=postgresql\n```\n\nGo ahead and change directory into the newly created folder:\n```\n    # change directory\n    $ cd pusher-chat\n```\n\nIn the root of your `pusher-chat` directory, open your `Gemfile` and add the following gems:\n\n```\n    # Gemfile\n    \n    gem 'bootstrap', '~\u003e 4.1.0'\n    gem 'jquery-rails'\n    gem 'pusher'\n    gem 'figaro'\n```\n\nIn your terminal, ensure you’re in the project directory and install the gems by running:\n\n```\n    $ bundle install\n```\n\nNext, we have to set up a database for our demo chat application. Check out this [article](https://www.digitalocean.com/community/tutorials/how-to-setup-ruby-on-rails-with-postgres) on how to create a PostgreSQL database and an associated user and password.\n\nOnce you have your database details, in your `database.yml` file, under the `development` key, add the following code:\n\n``` yaml\n    # config/database.yml\n    ...\n    development:\n      \u003c\u003c: *default\n      database: pusher-chat_development // add this line if it isn't already there\n      username: database_user // add this line\n      password: user_password // add this line\n    ...\n```\n\nThe username and password in the code above should have access to the `pusher-chat_development` database. After that, run the following code to setup the database:\n\n```\n    # setup database\n    $ rails db:setup\n```\n\n## Start the application\n\nAfter setting up the database, in your terminal, start the development server by running `rails s`. Visit http://localhost:3000 in your browser to see your brand new application:\n\n![youre-on-rails](//images.ctfassets.net/1es3ne0caaid/3sOsgC4S80gOKM8Waqkgui/87c5c9e64375cbb2f8f2516223f4e515/youre-on-rails.png)\n\n## Pusher account setup\n\nHead over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up).\n\n![ruby-create-pusher-account](//images.ctfassets.net/1es3ne0caaid/6uDbn5kOyIOiKyeSeOKqeS/6136b86bc4d9b6ceff7fcf8458375a19/ruby-create-pusher-account.png)\n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![ruby-channels-dashboard](//images.ctfassets.net/1es3ne0caaid/5IDtPf0HhC4aKg66gguYq8/183e0b23ec44fdfc23a38921e11fe9e3/ruby-channels-dashboard.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with for a better setup experience:\n\n![ruby-new-pusher-app](//images.ctfassets.net/1es3ne0caaid/3qnLmThfu8ue2ImYKKSw8a/2e4f39b15b8787e0f6d3b4f2ea022d95/ruby-new-pusher-app.png)\n\nYou can retrieve your keys from the **App Keys** tab:\n\n![ruby-app-keys](//images.ctfassets.net/1es3ne0caaid/1XHWE3GCeoCeqsMCO8uM2q/52523148497d08f6e9ba4f52fe0750f6/ruby-app-keys.png)\n\n## Bootstrap the application\n\nNow that we have our Pusher credentials, we will go ahead and generate our model and controller. In your terminal, while in the project’s directory, run the following code:\n\n```\n    # generate a chat model\n    $ rails g model chat message:text username:string\n    \n    # generate a chats controller with actions\n    $ rails g controller Chats create new show index\n    \n    # run database migration\n    $ rails db:migrate\n```\n\nRefreshing our home page should still show us the default Rails landing page.\n\n## Building the homepage\n\nWith our controller in place, we route our homepage to the index action of the chat controller and add actions for creating and viewing our chats. Replace the code in your routes file with the following:\n\n``` ruby\n    # config/routes.rb\n    \n    Rails.application.routes.draw do\n      resources :chats\n      root 'chats#index'\n    end\n```\n\nAdd the following code to your chat controller:\n\n``` ruby\n    # app/controllers/chats_controller.rb\n    \n    class ChatsController \u003c ApplicationController\n      def index\n        @chats = Chat.all\n        @chat = Chat.new\n      end\n      \n      def new\n        @chat = Chat.new\n      end\n      \n      def create\n        @chat = Chat.new(chat_params)\n        respond_to do |format|\n          if @chat.save\n            format.html { redirect_to @chat, notice: 'Message was successfully posted.' }\n            format.json { render :show, status: :created, location: @chat }\n          else\n            format.html { render :new }\n            format.json { render json: @chat.errors, status: :unprocessable_entity }\n          end\n        end\n      end\n    \n      private\n        def chat_params\n          params.require(:chat).permit(:username, :message)\n        end\n    end\n```\n\nReloading our homepage, we should see a not too pleasing view. Let’s fix that by adding the following code to our `index.html.erb` file:\n``` html\n    \u003c%# app/views/chats/index.html.erb %\u003e\n    \n    \u003cdiv class=\"container-fluid\"\u003e\n      \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-3 col-md-2 bg-dark full-height sidebar\"\u003e\n          \u003cdiv class=\"sidebar-content\"\u003e\n            \u003cinput type=\"text\" class=\"form-control sidebar-form\" placeholder=\"Enter a username\" required /\u003e\n            \u003ch4 class=\"text-white mt-5 text-center username d-none\"\u003eHello \u003c/h4\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"col-9 col-md-10 bg-light full-height\"\u003e\n          \u003cdiv class=\"container-fluid\"\u003e\n            \u003cdiv class=\"chat-box py-2\"\u003e\n              \u003ch4 class=\"username d-none mb-3\"\u003e\u003c/h4\u003e\n              \u003c% @chats.each do |chat| %\u003e\n                \u003cdiv class=\"col-12\"\u003e\n                  \u003cdiv class=\"chat bg-secondary d-inline-block text-left text-white mb-2\"\u003e\n                    \u003cdiv class=\"chat-bubble\"\u003e\n                      \u003csmall class=\"chat-username\"\u003e\u003c%= chat.username %\u003e\u003c/small\u003e\n                      \u003cp class=\"m-0 chat-message\"\u003e\u003c%= chat.message %\u003e\u003c/p\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c% end %\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"chat-text-input\"\u003e\n              \u003c%= form_with(model: @chat, remote: true, format: :json, id: 'chat-form') do |form| %\u003e\n                \u003c% if @chat.errors.any? %\u003e\n                  \u003cdiv id=\"error_explanation\"\u003e\n                    \u003ch2\u003e\u003c%= pluralize(@chat.errors.count, \"error\") %\u003e prohibited this chat from being saved:\u003c/h2\u003e\n                    \u003cul\u003e\n                      \u003c% @chat.errors.full_messages.each do |message| %\u003e\n                        \u003cli\u003e\u003c%= message %\u003e\u003c/li\u003e\n                      \u003c% end %\u003e\n                    \u003c/ul\u003e\n                  \u003c/div\u003e\n                \u003c% end %\u003e\n                \u003cdiv class=\"field position-relative\"\u003e\n                  \u003c%= form.text_field :message, id: :message, class: \"form-control\", required: true, disabled: true %\u003e\n                  \u003c%= form.hidden_field :username, id: :username %\u003e\n                \u003c/div\u003e\n              \u003c% end %\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\n\nNext, we add some Bootstrap styling. Rename your `application.css` file to `application.scss` and add the following code:\n``` scss\n    // app/assets/stylesheets/application.scss\n    \n    @import \"bootstrap\";\n    @import url('https://fonts.googleapis.com/css?family=Josefin+Sans');\n    \n    body {\n      font-family: 'Josefin Sans', sans-serif;\n    }\n    \n    .full-height {\n     height: 100vh;\n     overflow: hidden;\n    }\n    \n    input.form-control.sidebar-form {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      border: 0;\n      border-radius: 0;\n    }\n    \n    .chat-box {\n      height: 94vh;\n      overflow: scroll;\n    }\n    \n    .chat {\n      border-radius: 3px;\n      padding: 0rem 2rem 0 1rem;\n    }\n    \n    .chat-username {\n      font-size: 0.7rem;\n    }\n    \n    .chat-message {\n      font-size: 0.85rem;\n    }\n```\n\nIn your `application.js` file, add the following code just before the last line:\n``` javascript\n    // app/assets/javascripts/application.js\n    \n    .....\n    //= require jquery3 # add this line\n    //= require popper # add this line\n    //= require bootstrap # add this line\n    //= require_tree .\n```\n\nIf you encounter a RegExp error while trying to set up Bootstrap, In `config/boot.rb`, change the ExecJS runtime from Duktape to Node.\n\n``` ruby\n    # config/boot.rb\n    ENV['EXECJS_RUNTIME'] ='Node'\n```\nIf we reload our homepage now, we should see this majestic view of our chat application:\n\n![ruby-chat-app-1](//images.ctfassets.net/1es3ne0caaid/3ZuJ8SZDmwcuAQSeasQ4sw/93997fc254739add45d28cd43cb8b046/ruby-chat-app-1.png)\n\n## Sending chat messages\n\nTo send chat messages in this demo app, first, we enter a username in the bottom left corner and then our messages in the text field on the bottom of the page. Updating the page with new messages will be handled with JavaScript.\n\nIn the views/chats folder, create a `show.json.jbuilder` file and add the following code:\n``` ruby\n    // app/views/chats/show.json.jbuilder\n    \n    json.extract! @chat, :id, :username, :message\n    json.url chat_url(@chat, format: :json)\n```\n\nIn our `chat.coffee` file, we add the following code:\n``` coffeescript\n    # app/assets/javascripts/chats.coffee\n    \n    $(document).ready =\u003e\n      username = ''\n      \n      $('.sidebar-form').keyup (event) -\u003e\n        if event.keyCode == 13 and !event.shiftKey\n          username = event.target.value\n          $('.username').append(username)\n          $('#username').val(username)\n          $('.username').removeClass('d-none')\n          $('.sidebar-form').addClass('d-none')\n          $('#message').removeAttr(\"disabled\")\n          $('#message').focus()\n        return\n    \n      $('#chat-form').on 'ajax:success', (data) -\u003e\n        $('#chat-form')[0].reset()\n        updateChat data.detail[0]\n        return\n    \n      updateChat = (data) -\u003e\n        $('.chat-box').append \"\"\"\n          \u003cdiv class=\"col-12\"\u003e\n            \u003cdiv class=\"chat bg-secondary d-inline-block text-left text-white mb-2\"\u003e\n              \u003cdiv class=\"chat-bubble\"\u003e\n                \u003csmall class=\"chat-username\"\u003e#{data.username}\u003c/small\u003e\n                \u003cp class=\"m-0 mt-2 chat-message\"\u003e#{data.message}\u003c/p\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \"\"\"\n        return\n```\nIn the above code, we add attach an `ajax:success` event listener to our chat form courtesy of [jQuery-ujs.](https://github.com/rails/jquery-ujs/wiki/ajax) Whenever we add chat messages, we get our messages as a response and append them to already existing messages on the page.\n\n\n## Realtime service with Pusher\n\nWe now have a functional chat application and all that’s left is to make our chats appear realtime. We will go ahead and integrate Pusher into our chat application.\n\nFirstly, we will initialize a Pusher client in our application. In the `config/initializers` directory, create a `pusher.rb` file and add the following code:\n``` ruby\n    # config/initializers/pusher.rb\n    \n    require 'pusher'\n    Pusher.app_id = ENV[\"PUSHER_APP_ID\"]\n    Pusher.key = ENV[\"PUSHER_KEY\"]\n    Pusher.secret = ENV[\"PUSHER_SECRET\"]\n    Pusher.cluster = ENV[\"PUSHER_CLUSTER\"]\n    Pusher.logger = Rails.logger\n    Pusher.encrypted = true\n```\nIn your terminal, run `figaro install` to generate an `application.yml` file. In the `application.yml` file add your Pusher keys:\n``` yaml\n    # config/application.yml\n    \n    PUSHER_APP_ID: 'xxxxxx'\n    PUSHER_KEY: 'xxxxxxxxxxxxxxxxx'\n    PUSHER_SECRET: 'xxxxxxxxxxxxxx'\n    PUSHER_CLUSTER: 'xx'\n```\nAdd the Pusher library inside the head tag in the `application.html.erb` file just before the `javascript_include_tag`:\n\n``` html\n    \u003c%# app/views/layouts/application.html.erb %\u003e\n    \n    \u003chead\u003e\n      ....\n      \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e // add this line\n      \u003c%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %\u003e\n    \u003c/head\u003e\n```\nFor our chat to be realtime, we publish new chat messages to a channel and subscribe to it on the frontend of our app. In the chat model, we add an `after_create` callback, which calls a method that publishes the new record.\n\nAdd the following code to the chat model:\n``` ruby\n    # app/models/employee.rb\n    \n    class Chat \u003c ApplicationRecord\n      after_create :notify_pusher, on: :create\n      \n      def notify_pusher\n        Pusher.trigger('chat', 'new', self.as_json)\n      end\n    end\n```   \n\n\n## Updating the UI realtime\n\nIn order to receive the chat messages in realtime, we’ll use the `subscribe()` method from Pusher to subscribe to the `new`  event in the created `chat` channel.\nRename your `chats.coffee` file to `chats.coffee.erb` and replace the code there with the following:\n``` coffeescript\n    # app/assets/javascripts/chats.coffee\n    \n    $(document).ready =\u003e\n      username = ''\n    \n      updateChat = (data) -\u003e\n        $('.chat-box').append \"\"\"\n          \u003cdiv class=\"col-12\"\u003e\n            \u003cdiv class=\"chat bg-secondary d-inline-block text-left text-white mb-2\"\u003e\n              \u003cdiv class=\"chat-bubble\"\u003e\n                \u003csmall class=\"chat-username\"\u003e#{data.username}\u003c/small\u003e\n                \u003cp class=\"m-0 chat-message\"\u003e#{data.message}\u003c/p\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \"\"\"\n        return\n      \n      $('.sidebar-form').keyup (event) -\u003e\n        if event.keyCode == 13 and !event.shiftKey\n          username = event.target.value\n          $('.username').append(username)\n          $('#username').val(username)\n          $('.username').removeClass('d-none')\n          $('.sidebar-form').addClass('d-none')\n          $('#message').removeAttr(\"disabled\")\n          $('#message').focus()\n        return\n      \n      $('#chat-form').on 'ajax:success', (data) -\u003e\n        $('#chat-form')[0].reset()\n        return\n      \n      pusher = new Pusher('\u003c%= ENV[\"PUSHER_KEY\"] %\u003e',\n        cluster: '\u003c%= ENV[\"PUSHER_CLUSTER\"] %\u003e'\n        encrypted: true)\n      channel = pusher.subscribe('chat')\n      channel.bind 'new', (data) -\u003e\n        updateChat data\n        return\n      return\n```\nIn the code above, we subscribed our Pusher client to the chat channel and updated our chat with the data we got from it.\n\n\n## Bringing it all together\n\nRestart the development server if it is currently running. Check your page on [http://localhost:3000](http://localhost:3000/employees) and open it in a second tab. Add a few chat messages and see them pop up on the second tab.\n\n\n## Conclusion\n\nSo far, we have been able to build a basic chat application with realtime functionality as powered by Pusher. Feel free to explore more by visiting Pusher’s documentation. Lastly, the complete source code of this demo application is on [Github](https://github.com/9jaswag/pusher-chat).\n\n","metaTitle":"Build a chat app with Ruby on Rails","metaDescription":"This short tutorial will guide you through building an instant messenger app using Ruby on Rails, PostgreSQL and CoffeeScript."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3wnObjygveo6kAMEaw6KC6","type":"Entry","createdAt":"2018-05-20T15:07:53.709Z","updatedAt":"2018-05-20T15:12:58.214Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime table with Ruby on Rails and PostgreSQL","url":"realtime-table-ruby-rails","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/9jaswag/pusher-tables/","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6S5luSjtlYk4i8eM8AyO4I","type":"Entry","createdAt":"2018-02-02T13:39:48.331Z","updatedAt":"2018-02-12T14:41:19.307Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby","url":"ruby","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"hPWAADkjVmomS68E6seqQ","type":"Entry","createdAt":"2018-02-12T14:48:52.613Z","updatedAt":"2018-02-12T14:48:52.613Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby on Rails","url":"ruby-on-rails","type":"framework"}}],"reviewDate":"2018-05-19","description":"Build a Ruby on Rails application that monitors a PostegreSQL database and automatically updates in response to changes. Users will be able to enter data into a PostgreSQL database, and see their dashboard update instantly.","prerequisite":"A basic understanding of Ruby and CoffeeScript will help you with this tutorial. You need to already have Ruby and Rails installed on your machine, as well as PostgreSQL.","content":"The ability to update data in realtime is one of the top requirements for web applications in today’s world. Users prefer realtime update as opposed to constantly refreshing a page to see new information.\n\nWith that being said, implementing realtime update of information in any web application can be challenging and has to be done right. This post aims to show you how to achieve that with the help of Pusher in a Ruby application.\n\nA quick look at what we’ll be building:\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/SiO9sQmQbn0?rel=0\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen\u003e\u003c/iframe\u003e\n\n## Prerequisites\n\nA basic understanding of PostgreSQL, Ruby and CoffeeScript will help you with this tutorial. You should also have PostgreSQL installed. Kindly check the [PostgreSQL](https://www.postgresql.org/download/), [Ruby](https://www.ruby-lang.org/en/downloads/) and [Rails](http://guides.rubyonrails.org/getting_started.html) documentation for further installation steps.\n\n\n## Setting up the application\n\nBefore starting off, ensure you have both Ruby and Rails installed. Run the following code in your terminal:\n\n```\n    $ ruby -v      // 2.1 or above\n    $ rails -v   // 4.2 or above\n```\nNow lets run the command to setup the app:\n\n```  \n    $ rails new pusher-tables -T --database=postgresql\n```\nThe command above creates a new Rails application. The `-T` flag excludes generation of test files as we won’t be writing any tests.\n\nGo ahead and change directory into the newly created folder:\n\n```\n    $ cd pusher-tables\n```\nIn the root of your `pusher-tables` directory, open your `Gemfile` and add the following gems:\n\n```\n    # Gemfile\n    \n    gem 'bootstrap', '~\u003e 4.1.0'\n    gem 'jquery-rails'\n    gem 'pusher'\n    gem 'figaro'\n```\nIn your terminal, ensure you’re in the project directory and install the gems by running:\n\n```\n    $ bundle install\n```\n\n## Database setup\n\nNext, we have to create a database called `pusher-tables_development` for our app. Check out this [article](https://www.digitalocean.com/community/tutorials/how-to-setup-ruby-on-rails-with-postgres) on how to create a Postgres database and an associated user and password.\n\nIn your `database.yml` file, under the `development` key, add the following code:\n``` yaml\n    # config/database.yml\n    \n    ...\n    development:\n      \u003c\u003c: *default\n      database: pusher-tables_development // add this line if it isn't already there\n      username: database_user // add this line\n      password: user_password // add this line\n    ...\n```\nThe username and password in the code above should have access to the `pusher-tables_development` database. After that, run the following code to setup the database:\n\n```\n    # setup database\n    $ rails db:setup\n```\n\n## See it working\n\nAfter installing the gems, start the development server by running `rails s` and visit [http://localhost:300](http://localhost:3000/employees)0 in your browser. You should see the following:\n\n![youre-on-rails](//images.ctfassets.net/1es3ne0caaid/3sOsgC4S80gOKM8Waqkgui/87c5c9e64375cbb2f8f2516223f4e515/youre-on-rails.png)\n\n## Pusher account setup\n\nHead over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). A Pusher account is required for the realtime functionality in our app.\n\n![ruby-create-pusher-account](//images.ctfassets.net/1es3ne0caaid/6uDbn5kOyIOiKyeSeOKqeS/6136b86bc4d9b6ceff7fcf8458375a19/ruby-create-pusher-account.png)\n\nCreate a new app by selecting **Channels apps** on the sidebar, then clicking the **Create Channels app** button on the bottom of the sidebar:\n\n![ruby-channels-dashboard](//images.ctfassets.net/1es3ne0caaid/5IDtPf0HhC4aKg66gguYq8/183e0b23ec44fdfc23a38921e11fe9e3/ruby-channels-dashboard.png)\n\nConfigure an app by providing basic information requested in the form presented. You can choose the environment you intend to integrate Pusher with to be provided with boilerplate code for that framework:\n\n![ruby-new-pusher-app](//images.ctfassets.net/1es3ne0caaid/3qnLmThfu8ue2ImYKKSw8a/2e4f39b15b8787e0f6d3b4f2ea022d95/ruby-new-pusher-app.png)\n\nYou can retrieve your keys from the **App Keys** tab:\n\n![ruby-app-keys](//images.ctfassets.net/1es3ne0caaid/1XHWE3GCeoCeqsMCO8uM2q/52523148497d08f6e9ba4f52fe0750f6/ruby-app-keys.png)\n\nNow that you have your Pusher API keys, head over to `config/initializers` directory. Create a `pusher.rb` file and add the following code:\n\n``` ruby\n    # config/initializers/pusher.rb\n    \n    require 'pusher'\n    \n    Pusher.app_id = ENV[\"PUSHER_APP_ID\"]\n    Pusher.key = ENV[\"PUSHER_KEY\"]\n    Pusher.secret = ENV[\"PUSHER_SECRET\"]\n    Pusher.cluster = ENV[\"PUSHER_CLUSTER\"]\n    Pusher.logger = Rails.logger\n    Pusher.encrypted = true\n```\nIn your terminal, run `figaro install`. It’ll generate an `application.yml` file. In the `application.yml` file add your Pusher keys:\n\n``` yaml\n    # config/application.yml\n    \n    PUSHER_APP_ID: 'xxxxxx'\n    PUSHER_KEY: 'xxxxxxxxxxxxxxxxx'\n    PUSHER_SECRET: 'xxxxxxxxxxxxxx'\n    PUSHER_CLUSTER: 'xx'\n```\n\n## Setting up the model and controller\n\nWith our app up and running, we’ll use Rails’ scaffolding feature to quickly setup our employees model and controller:\n\n```\n    // generate employee model and controllers\n    $ rails g scaffold employee name:string position:string office:string extension:string start_date:date\n    \n    // run database migration\n    $ rails db:migrate\n```\n\n## Setting up the landing page\n\nAfter running those commands, restart your server and reload your browser page. You should still see the welcome page. We’re about to change all that.\n\nAdd the following code to your route file:\n\n``` ruby\n    # config/routes.rb\n    \n    ...\n    root 'employees#index'\n    ...\n```\nWith that, your landing page should now contain a table with headings. Let’s style it up with Bootstrap.\n\nIn your `application.js` file, add the following code just before the last line:\n\n``` javascript\n    // app/assets/javascripts/application.js\n    \n    .....\n    //= require jquery3 # add this line\n    //= require popper # add this line\n    //= require bootstrap # add this line\n    //= require_tree .\n    ....\n```\nRename your `application.css` file to `application.scss`, import Bootstrap and add some custom syles:\n\n``` scss\n    // app/assets/stylesheets/application.scss\n    \n     @import \"bootstrap\";\n     @import url('https://fonts.googleapis.com/css?family=Josefin+Sans');\n    \n     body {\n      font-family: 'Josefin Sans', sans-serif;\n     }\n    \n     .navbar-brand {\n       color: #FFF !important;\n    \n       \u0026:hover {\n         background-color: unset;\n       }\n     }\n    \n     .form-control {\n       outline: none !important;\n       \n       \u0026:focus {\n        border-color: transparent !important;\n        border: 1px !important;\n       }\n     }\n```\nIf we restart our server and reload the app, we should see that the fonts have changed courtesy of Bootstrap.\n\nIf you encounter a RegExp error while trying to set up Bootstrap, In `config/boot.rb`, change the ExecJS runtime from Duktape to Node.\n\n``` ruby\n    # config/boot.rb\n    ENV['EXECJS_RUNTIME'] ='Node'\n```\n\n## Setting up the table\n\nTo setup our table, we’ll be using Bootstrap’s table . Replace the code in your `index.html.erb` file with the following:\n\n``` html\n    \u003c%# app/views/employees/index.html.erb %\u003e\n    \n    \u003cdiv class='container-fluid'\u003e\n      \u003cp id=\"notice\"\u003e\u003c%= notice %\u003e\u003c/p\u003e\n      \u003cdiv class='row py-3 px-3'\u003e\n        \u003cdiv class='col-12 col-sm-8'\u003e\n          \u003ch3 class=''\u003eEmployees\u003c/h3\u003e\n          \u003ctable id='employee-table' class=\"table table-hover\"\u003e\n            \u003cthead  class=\"thead-light\"\u003e\n              \u003ctr\u003e\n                \u003cth\u003eName\u003c/th\u003e\n                \u003cth\u003ePosition\u003c/th\u003e\n                \u003cth\u003eOffice\u003c/th\u003e\n                \u003cth\u003eExtension\u003c/th\u003e\n                \u003cth\u003eStart date\u003c/th\u003e\n                \u003cth colspan=\"3\"\u003e\u003c/th\u003e\n              \u003c/tr\u003e\n            \u003c/thead\u003e\n    \n            \u003ctbody\u003e\n              \u003c% @employees.each do |employee| %\u003e\n                \u003ctr\u003e\n                  \u003ctd\u003e\u003c%= employee.name %\u003e\u003c/td\u003e\n                  \u003ctd\u003e\u003c%= employee.position %\u003e\u003c/td\u003e\n                  \u003ctd\u003e\u003c%= employee.office %\u003e\u003c/td\u003e\n                  \u003ctd\u003e\u003c%= employee.extension %\u003e\u003c/td\u003e\n                  \u003ctd\u003e\u003c%= employee.start_date %\u003e\u003c/td\u003e\n                  \u003ctd\u003e\u003c%= link_to 'Show', employee %\u003e\u003c/td\u003e\n                  \u003ctd\u003e\u003c%= link_to 'Edit', edit_employee_path(employee) %\u003e\u003c/td\u003e\n                  \u003ctd\u003e\u003c%= link_to 'Delete', employee, method: :delete, data: { confirm: 'Are you sure?' } %\u003e\u003c/td\u003e\n                \u003c/tr\u003e\n              \u003c% end %\u003e\n            \u003c/tbody\u003e\n          \u003c/table\u003e\n          \u003cbr\u003e\n        \u003c/div\u003e\n    \n        \u003cdiv class='col-12 col-sm-4'\u003e\n          \u003ch3\u003eNew Employee\u003c/h3\u003e\n          \u003c%= render 'form', employee: @employee %\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\nUpdate the index method of the employees controller, to include the following:\n\n``` ruby\n    # app/controllers/employees_controller.rb\n    \n    class EmployeesController \u003c ApplicationController\n      ...\n      def index\n        @employees = Employee.all\n        @employee = Employee.new # add this line\n      end\n      ...\n    end\n```\nThe code above adds Bootstrap styling to the table on our landing page. It also instantiates a new employee record in the `index` method of the employees controller. If you reload the landing page, you should see the table and form in all its glory.\n\n\n## Adding new records to the table\n\nCurrently adding a new employee record redirects us a different page. We’d like to handle that with AJAX. To do that, we add `remote: true` and `format: :json` to our form. Replace the code in`_form.html.erb` with the following:\n\n``` html\n    // app/views/employees/_form.html.erb\n    \n    \u003c%= form_with(model: employee, remote: true, format: :json, id: 'add_employee') do |form| %\u003e\n      \u003c% if employee.errors.any? %\u003e\n        \u003cdiv id=\"error_explanation\"\u003e\n          \u003ch2\u003e\u003c%= pluralize(employee.errors.count, \"error\") %\u003e prohibited this employee from being saved:\u003c/h2\u003e\n    \n          \u003cul\u003e\n          \u003c% employee.errors.full_messages.each do |message| %\u003e\n            \u003cli\u003e\u003c%= message %\u003e\u003c/li\u003e\n          \u003c% end %\u003e\n          \u003c/ul\u003e\n        \u003c/div\u003e\n      \u003c% end %\u003e\n    \n      \u003cdiv class=\"field\"\u003e\n        \u003c%= form.label :name %\u003e\n        \u003c%= form.text_field :name, id: :employee_name, class: \"form-control\" %\u003e\n      \u003c/div\u003e\n    \n      \u003cdiv class=\"field\"\u003e\n        \u003c%= form.label :position %\u003e\n        \u003c%= form.text_field :position, id: :employee_position, class: \"form-control\" %\u003e\n      \u003c/div\u003e\n    \n      \u003cdiv class=\"field\"\u003e\n        \u003c%= form.label :office %\u003e\n        \u003c%= form.select :office, [['Lagos', 'Lagos'], ['New York', 'New York',], ['Lisbon', 'Lisbon']], {}, { class: \"form-control\", id: \"employee_office\" } %\u003e\n      \u003c/div\u003e\n    \n      \u003cdiv class=\"field\"\u003e\n        \u003c%= form.label :extension %\u003e\n        \u003c%= form.text_field :extension, id: :employee_extension, class: \"form-control\" %\u003e\n      \u003c/div\u003e\n    \n      \u003cdiv class=\"field\"\u003e\n        \u003c%= form.label :start_date %\u003e\n        \u003c%= form.date_field :start_date, id: :employee_start_date, class: \"form-control\" %\u003e\n      \u003c/div\u003e\n    \n      \u003cdiv class=\"actions\"\u003e\n        \u003c%= form.submit 'Create Employee', class: \"btn btn-success\" %\u003e\n      \u003c/div\u003e\n    \u003c% end %\u003e\n```\nNow that our form uses AJAX, we’ll handle updating the table with CoffeeScript.\n\n``` coffeescript\n    # app/assets/javascripts/employees.coffee\n    \n    updateTable = (data) -\u003e\n      $('#employee-table tbody').append \"\"\"\n        \u003ctr\u003e\n          \u003ctd\u003e#{data.name}\u003c/td\u003e\n          \u003ctd\u003e#{data.position}\u003c/td\u003e\n          \u003ctd\u003e#{data.office}\u003c/td\u003e\n          \u003ctd\u003e#{data.extension}\u003c/td\u003e\n          \u003ctd\u003e#{data.start_date}\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"/employees/#{data.id}\"\u003eShow\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"/employees/#{data.id}/edit\"\u003eEdit\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca data-confirm=\"Are you sure?\" rel=\"nofollow\" data-method=\"delete\" href=\"/employees/#{data.id}\"\u003eDelete\u003c/a\u003e\u003c/td\u003e\n        \u003c/tr\u003e\n      \"\"\"\n      return\n    \n    $ -\u003e\n      $('#add_employee').on 'ajax:success', (data) -\u003e\n        $('#add_employee')[0].reset()\n        updateTable data.detail[0]\n        return\n      return\n```\nIn the above code, we add an `ajax:success` event listener to our form courtesy of [jQuery-ujs.](https://github.com/rails/jquery-ujs/wiki/ajax) Whenever we add new employee records, we get our newly added employee as a response and update our table with it.\n\nLets reload our page and add a few employees, they should pop up on the page as soon as we hit submit.\n\n\n## Realtime service with Pusher\n\nTo update our table realtime, we publish the new employee record to a channel and subscribe to it on the frontend of our app. In the employee model, we add an `after_commit` callback which calls a method that publishes the new record. We use `after_commit` so data is published whenever we add or update a record.\n\nAdd the following code to the employee model:\n\n``` ruby\n    # app/models/employee.rb\n    \n    class Employee \u003c ApplicationRecord\n      after_commit :notify_pusher, on: [:create, :update]\n    \n      def notify_pusher\n        Pusher.trigger('employee', 'new', self.as_json)\n      end\n    end\n```\nHere, our initialized Pusher client triggers an event called `new` through a channel named `employee.`\n\n\n## Updating the UI\n\nSo the server is pushing data out on each change, now it’s up to the client to listen for those changes and do something with that data. To do this, we rename our `employees.coffee` file to `employees.coffee.erb` so we can sprinkle some Ruby code in it. \n\nUpdate the file with the following code:\n\n``` coffeescript\n    # app/assets/javascripts/employees.coffee.erb\n    \n    updateTable = (data) -\u003e\n      $('#employee-table tbody').append \"\"\"\n        \u003ctr\u003e\n          \u003ctd\u003e#{data.name}\u003c/td\u003e\n          \u003ctd\u003e#{data.position}\u003c/td\u003e\n          \u003ctd\u003e#{data.office}\u003c/td\u003e\n          \u003ctd\u003e#{data.extension}\u003c/td\u003e\n          \u003ctd\u003e#{data.start_date}\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"/employees/#{data.id}\"\u003eShow\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"/employees/#{data.id}/edit\"\u003eEdit\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca data-confirm=\"Are you sure?\" rel=\"nofollow\" data-method=\"delete\" href=\"/employees/#{data.id}\"\u003eDelete\u003c/a\u003e\u003c/td\u003e\n        \u003c/tr\u003e\n      \"\"\"\n      return\n    \n    $ -\u003e\n      $('#add_employee').on 'ajax:success', (data) -\u003e\n        $('#add_employee')[0].reset()\n        return\n      pusher = new Pusher('\u003c%= ENV[\"PUSHER_KEY\"] %\u003e',\n        cluster: '\u003c%= ENV[\"PUSHER_CLUSTER\"] %\u003e'\n        encrypted: true)\n      channel = pusher.subscribe('employee')\n      channel.bind 'new', (data) -\u003e\n        updateTable data\n        return\n      return\n```\nLastly, add the Pusher library inside the head tag in the `application.html.erb` file just before the `javascript_include_tag`:\n\n``` html\n    \u003c%# app/views/layouts/application.html.erb %\u003e\n    \n    \u003chead\u003e\n        \u003ctitle\u003eRealtimeTable\u003c/title\u003e\n        \u003c%= csrf_meta_tags %\u003e\n    \n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\"\u003e\n        \u003c%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %\u003e\n        \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e # add this line\n        \u003c%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %\u003e\n      \u003c/head\u003e\n```\n\n## Bringing it all together\n\nRestart the development server if it is currently running. Check your page on [http://localhost:3000](http://localhost:3000/employees)\n\n\n## Conclusion\n\nSo far, we have learnt how to leverage the realtime functionality provided by Pusher to display updates in realtime. Feel free to explore more by visiting Pusher’s documentation. Lastly, the complete source code of this demo application is on [Github](https://github.com/9jaswag/pusher-tables/).\n\n","metaTitle":"Build a realtime table with Ruby on Rails","metaDescription":"This tutorial guides you through building a Ruby on Rails application that monitors a PostegreSQL database. The app allows users to enter data. It includes a dashboard that automatically updates in response to changes in the database."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5xGfjb8aooYKUSGQ0OCqye","type":"Entry","createdAt":"2018-05-20T15:06:47.896Z","updatedAt":"2018-05-20T15:06:47.896Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a collaborative painting application with Angular","url":"collaborative-painting-angular","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/angular-geolocation","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2018-05-18","description":"Learn to build a collaborative painting application using Angular. Create a web app where two users can paint together, seeing each other's actions in realtime.","prerequisite":"You will need Node and npm installed on your machine. A basic understanding of Angular is required.","content":"We’ll be creating a realtime paint application. Using our application,  users can easily collaborate while working on the application and receive changes in realtime. We’ll be using Pusher’s pub/sub pattern to get realtime updates and Angular for templating.\n\nTo follow this tutorial a basic understanding of Angular and Node.js is required. Please ensure that you have Node and npm installed before you begin.\n\nIf you have no prior knowledge of Angular, kindly follow the tutorial [here](https://angular.io/tutorial). Come back and finish the tutorial when you’re done.\n\nWe’ll be using these tools to build our application:\n\n- [Express](https://expressjs.com/) \n- [Node](https://nodejs.org/en/)\n- [Pusher](https://pusher.com)\n- [Angular](https://angular.io)\n\nHere’s a demo of the final product:\n\n![angular-live-paint-demo](//images.ctfassets.net/1es3ne0caaid/2bmcqgtnOM0KM6W4mGAyQa/4e4bf636bcfeaccab9d2d127e7a086bb/angular-live-paint-demo.gif)\n\n## Initializing the application and installing dependencies\n\nTo get started, we will use the [CLI](https://cli.angular.io/) (command line interface) provided by the Angular team to initialize our project.\n\nFirst, install the CLI by running `npm install -g @angular/cli`. [NPM](https://www.npmjs.com/) is a package manager used for installing packages. It will be available on your PC if you have [Node](https://nodejs.org/en/) installed.\n\nTo create a new Angular project using the CLI, open a terminal and run:  \n`ng new angular-realtime-paintapp`\n\nThis command is used to initialize a new Angular project.\n\nNext, run the following command in the root folder of the project to install dependencies.\n\n```\n    // install depencies required to build the server\n    npm install express body-parser dotenv pusher\n    \n    // front-end dependencies\n    npm install pusher-js uuid @types/uuid\n```\nStart the Angular development server by running `ng serve` in a terminal in the root folder of your project.\n\n## Building our server\n\nWe’ll build our server using [Express](https://expressjs.com). Express is a fast, unopinionated, minimalist web framework for [Node.js](https://nodejs.org/en/).\n\nCreate a file called `server.js` in the root of the project and update it with the code snippet below\n\n``` javascript\n    // server.js\n    \n    require('dotenv').config();\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    \n    const app = express();\n    const port = process.env.PORT || 4000;\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      cluster: 'eu',\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({extended: false}));\n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      res.header(\n        'Access-Control-Allow-Headers',\n        'Origin, X-Requested-With, Content-Type, Accept'\n      );\n      next();\n    });\n    \n    app.listen(port, () =\u003e {\n      console.log(`Server started on port ${port}`);\n    });\n```    \n\nThe calls to our endpoint will be coming in from a different origin. Therefore, we need to make sure we include the CORS headers (`Access-Control-Allow-Origin`). If you are unfamiliar with the concept of CORS headers, you can find more information [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS).\n\nCreate a Pusher account and a new Pusher Channels app if you haven’t done so yet and get your `appId`, `key` and `secret`. \n\nCreate a file in the root folder of the project and name it `.env`. Copy the following snippet into the `.env` file and ensure to replace the placeholder values with your Pusher credentials.\n\n```\n    // .env\n    \n    // Replace the placeholder values with your actual pusher credentials\n    PUSHER_APP_ID=PUSHER_APP_ID\n    PUSHER_KEY=PUSHER_KEY\n    PUSHER_SECRET=PUSHER_SECRET\n```\n\nWe’ll make use of the `dotenv` library to load the variables contained in the `.env` file into the Node environment. The `dotenv` library should be initialized as early as possible in the application.\n\nStart the server by running `node server` in a terminal inside the root folder of your project.\n\n### Draw route\n\nLet’s create a post route named `draw`, the frontend of the application will send make a request to this route containing the mouse events needed to show the updates of a guest user. \n\n``` javascript\n    // server.js\n    require('dotenv').config();\n    ...\n    \n    app.use((req, res, next) =\u003e {\n      res.header('Access-Control-Allow-Origin', '*');\n      ...\n    });\n    \n    \n    app.post('/draw', (req, res) =\u003e {\n      pusher.trigger('painting', 'draw', req.body);\n      res.json(req.body);\n    });\n    \n     ...\n```\n\n- The request body will be sent as the data for the triggered Pusher event. The same object will be sent as a response to the user.\n-  The trigger is achieved using the `trigger` method which takes the trigger identifier(`painting`), an event name (`draw`), and a payload.\n\n\n## Canvas view\n\nWe’ll be attaching a [directive](https://angular.io/guide/attribute-directives) to the `canvas` element. Using the directive, we’ll listen for events on the host element and also bind attributes to it.\n\nRun `ng generate directive canvas` to create the canvas directive. \n\nOpen the `canvas.directive.ts` file and update it with the content below.\n\n``` typescript\n    // canvas.directive.ts\n    import {\n      Directive,\n      ElementRef,\n      HostListener,\n      HostBinding,\n      AfterViewInit,\n    } from '@angular/core';\n    import { v4 } from 'uuid';\n    import { HttpClient } from '@angular/common/http';\n    \n    declare interface Position {\n      offsetX: number;\n      offsetY: number;\n    }\n    @Directive({\n      selector: '[myCanvas]',\n    })\n    export class CanvasDirective implements AfterViewInit {\n      constructor(\n        private el: ElementRef,\n        private http: HttpClient\n      ) {\n        // We use the ElementRef to get direct access to the canvas element. Here we set up the properties of the element. \n        this.canvas = this.el.nativeElement;\n        this.canvas.width = 1000;\n        this.canvas.height = 800;\n        // We create a canvas context. \n        this.ctx = this.canvas.getContext('2d');\n        this.ctx.lineJoin = 'round';\n        this.ctx.lineCap = 'round';\n        this.ctx.lineWidth = 5;\n      }\n      canvas: HTMLCanvasElement;\n      ctx: CanvasRenderingContext2D;\n      // Stroke styles for user and guest\n      userStrokeStyle = '#FAD8D6';\n      guestStrokeStyle = '#CD5334';\n      position: {\n        start: {};\n        stop: {};\n      };\n      // This will hold a list of positions recorded throughout the duration of a paint event\n      line = [];\n      // Since there's no auth setup, we'll need to able to tell users and guests apart.v4 creates a unique id for each user\n      userId = v4();\n      // This object will hold the start point of any paint event.\n       prevPos: Position = {\n        offsetX: 0,\n        offsetY: 0,\n      };\n      // This will be set to true when a user starts painting\n      isPainting = false;\n      \n      @HostListener('mousedown', ['$event'])\n      onMouseDown({ offsetX, offsetY }) {\n        this.isPainting = true;\n        // Get the offsetX and offsetY properties of the event. \n        this.prevPos = {\n          offsetX,\n          offsetY,\n        };\n      }\n      @HostListener('mousemove', ['$event'])\n      onMouseMove({ offsetX, offsetY }) {\n        if (this.isPainting) {\n          const offSetData = { offsetX, offsetY };\n          // Set the start and stop position of the paint event. \n          this.position = {\n            start: { ...this.prevPos },\n            stop: { ...offSetData },\n          };\n          // Add the position to the line array\n          this.line = this.line.concat(this.position);\n          this.draw(this.prevPos, offSetData, this.userStrokeStyle);\n        }\n      }\n      @HostListener('mouseup')\n      onMouseUp() {\n        if (this.isPainting) {\n          this.isPainting = false;\n          // Send a request to the server at the end of a paint event\n          this.makeRequest();\n        }\n      }\n      @HostListener('mouseleave')\n      onmouseleave() {\n        if (this.isPainting) {\n          this.isPainting = false;\n          this.makeRequest();\n        }\n      }\n      @HostBinding('style.background') background = 'black';\n      \n      makeRequest() {\n        // Make a request to the server containing the user's Id and the line array.\n        this.http\n          .post('http://localhost:4000/draw', {\n            line: this.line,\n            userId: this.userId,\n          })\n          .subscribe((res) =\u003e {\n            this.line = [];\n          });\n      }\n      // The draw method takes three parameters; the prevPosition, currentPosition and the strokeStyle\n      draw(\n        { offsetX: x, offsetY: y }: Position,\n        { offsetX, offsetY }: Position,\n        strokeStyle\n      ){\n        // begin drawing\n        this.ctx.beginPath();\n        this.ctx.strokeStyle = strokeStyle;\n        // Move the the prevPosition of the mouse\n        this.ctx.moveTo(x, y);\n        // Draw a line to the current position of the mouse\n        this.ctx.lineTo(offsetX, offsetY);\n        // Visualize the line using the strokeStyle\n        this.ctx.stroke();\n        this.prevPos = {\n          offsetX,\n          offsetY,\n        };\n      }\n      ngAfterViewInit() {}\n    }\n```    \n    \n\n\n\u003e **Note:**  a **paint** event in this context is the duration from when the mousedown event is triggered to when the mouse is up or when the mouse leaves the canvas area.\n\u003e Also remember to rename the directive selector property from `appCanvas` to `myCanvas`\n\n\nThere’s quite a bit going on in the file above. Let’s walk through it and explain each step.\n\n We are making use of [HostListener](https://angular.io/api/core/HostListener) decorators to listen for mouse events on the host elements. Methods are defined for each event.\n \n\n-  In the `onMouseDown` method, we set the `isPainting` property to true and then we get the `offsetX` and `offsetY` properties of the event and store it in the `prevPos` object.\n\n\n- The `onMouseMove` method is where the painting takes place. Here we check if `isPainting` is set to true, then we create an `offsetData` object to hold the current `offsetX` and `offsetY` properties of the event. We update the `position`  object with the previous and current positions of the mouse. We then append the `position` to the `line` array and then we call the `draw` method with the current and previous positions of the mouse as parameters.\n\n\n- The `onMouseUp` and `onMouseLeave` methods both check if the user is currently painting. If true, the `isPainting` property is set to false to prevent the user from painting until the next `mousedown` event is triggered. The `makeRequest` method is the called to send the paint event to the server.\n\n\n- `makeRequest`:  this method sends a post request to the server containing the `userId` and the `line` array as the request body. The line array is then reset to an empty array after the request is complete.\n\n\n- In the `draw` method, three parameters are required to complete a paint event. The previous position of the mouse, current position and the strokeStyle. We used [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) to get the properties of each parameter. The `ctx.moveTo` function takes the x and y properties of the previous position. A line is drawn from the previous position to the current mouse position using the `ctx.lineTo` function. `ctx.stroke` visualizes the line.\n\n\nWe made reference to the `HttpClient` service. To make use of this in the application, we’ll need to import the `HttpClientModule` into the `app.module.ts` file.\n\n``` typescript\n    // app.module.ts\n    ...\n    import { CanvasDirective } from './canvas.directive';\n    import { HttpClientModule } from '@angular/common/http';\n    \n    @NgModule({\n      ...\n      imports: [BrowserModule, HttpClientModule],\n      ...\n    })\n    \n    ...\n```\n\nNow that the directive has been set up, let’s add a canvas element to the `app.component.html` file and attach the `myCanvas` directive to it. Open the `app.component.html` file and replace the content with the following:\n\n``` html\n    \u003c!-- app.component.html --\u003e\n    \u003cdiv class=\"main\"\u003e\n      \u003cdiv class=\"color-guide\"\u003e\n        \u003ch5\u003eColor Guide\u003c/h5\u003e\n        \u003cdiv class=\"user user\"\u003eUser\u003c/div\u003e\n        \u003cdiv class=\"user guest\"\u003eGuest\u003c/div\u003e\n      \u003c/div\u003e\n      \u003ccanvas myCanvas\u003e\u003c/canvas\u003e\n    \u003c/div\u003e\n```\nAdd the following styles to the `app.component.css` file:\n\n``` css\n    // app.component.css\n    .main {\n      display: flex;\n      justify-content: center;\n      font-family: 'Arimo', sans-serif;\n    }\n    .color-guide {\n      margin: 20px 40px;\n    }\n    h5{\n      margin-bottom: 10px;\n    }\n    .user {\n      padding: 7px 15px;\n      border-radius: 4px;\n      color: black;\n      font-size: 13px;\n      font-weight: bold;\n      background: #fad8d6;\n      margin: 10px 0;\n    }\n    .guest {\n      background: #cd5334;\n      color: white;\n    }\n```    \n\nWe’re making use of an external font; so let’s include a link to the stylesheet in the `index.html` file.\n\n``` html\n    \u003c!-- index.html --\u003e\n    \u003chead\u003e\n      ...\n      \u003clink rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\"\u003e\n      \u003clink href=\"https://fonts.googleapis.com/css?family=Arimo:400,700\" rel=\"stylesheet\"\u003e\n    \u003c/head\u003e\n```\nRun `ng serve`  in your terminal and visit http://localhost:4200/ to have a look of the application. It should be similar to the screenshot below:\n\n![angular-live-paint-stage1-screenshot](//images.ctfassets.net/1es3ne0caaid/5kG6xWPn9K2mkcscMwEYik/6c6b80e86b511b478d15a8f6c014d986/angular-live-paint-stage1-screenshot.png)\n\n## Introducing Pusher\n\nTo make the Pusher library available in our project, add the library as a third party script to be loaded by Angular CLI. All CLI config is stored in `.angular-cli.json` file. Modify the `scripts` property to include the link to `pusher.min.js`.\n\n``` json\n    // .angular-cli.json\n    ...\n    \"scripts\": [\n      \"../node_modules/pusher-js/dist/web/pusher.min.js\"\n    ]\n     ...\n```          \n\nAfter updating this file, you’ll need to restart the Angular server so the CLI compiles the new script file added.\n\nCreate a Pusher service using the Angular CLI by running the following command:\n\n```\n    ng generate service pusher\n```\nThis command simply tells the CLI to generate a service named `pusher`. Now open the `pusher.service.ts` file and update it with the code below.\n\n``` typescript\n    // pusher.service.ts\n    import { Injectable } from '@angular/core';\n    declare const Pusher: any;\n    @Injectable()\n    export class PusherService {\n      constructor() {\n        const pusher = new Pusher('PUSHER_KEY', {\n          cluster: 'eu',\n        });\n        this.channel = pusher.subscribe('painting');\n      }\n      channel;\n      public init() {\n        return this.channel;\n      }\n    }\n```    \n\n\n- First, we initialize Pusher in the constructor. \n- The  `init` method returns the Pusher property we created. \n\n\n\u003e **Note**: ensure you replace the `PUSHER_KEY` string with your actual Pusher key.\n  \n\nTo make the service available application wide, import it into the `app.module.ts` file.\n\n``` typescript\n    // app.module.ts\n    ...\n    import { HttpClientModule } from '@angular/common/http';\n    import {PusherService} from './pusher.service';\n    \n    @NgModule({\n       ....\n       providers: [PusherService],\n       ....\n     })\n    \n    ...\n```\n \n## Realtime painting\n\nLet’s include the Pusher service in the `canvas.directive.ts` file to make use of the realtime functionality made available using Pusher. Update the `canvas.directive.ts` to include the new Pusher service.\n\n``` typescript\n    // canvas.directive.ts\n      ...\n      import { HttpClient } from '@angular/common/http';\n      import { PusherService } from './pusher.service';\n      \n      ...\n      constructor(\n        private el: ElementRef,\n        private http: HttpClient,\n        private pusher: PusherService\n      ) {\n        ...\n      }\n      \n      ...\n      \n      ngAfterViewInit() {\n        const channel = this.pusher.init();\n        channel.bind('draw', (data) =\u003e {\n          if (data.userId !== this.userId) {\n            data.line.forEach((position) =\u003e {\n              this.draw(position.start, position.stop, this.guestStrokeStyle);\n            });\n          }\n        });\n      }\n    }\n```\nIn the `AfterViewInit` lifecycle, we initialized the Pusher service and listened for the `draw` event. In the event callback, we check if the there’s a distinct userId. Then we loop through the `line`  property of the data returned from the callback. Wed proceed to draw using the `start` and `stop` objects properties of each position contained in the array.\n\n\nOpen two browsers side by side to observe the realtime functionality of the application. A line drawn on one browser should show up on the other. Here’s a screenshot of two browsers side by side using the application:\n\n\n\u003e **Note:** Ensure both the server and the Angular dev server are up by running `ng serve` and `node server` on separate terminal sessions.\n\n![angular-live-paint-final-screenshot](//images.ctfassets.net/1es3ne0caaid/9KD2M5ow3mY8qKE2aQykk/cd5928c0168aadce6be1138334a81174/angular-live-paint-final-screenshot.png)\n\n## Conclusion\n\nWe’ve created a collaborative drawing application in Angular, using Pusher to provide realtime functionality. You can check out the repo containing the demo on [GitHub](https://github.com/christiannwamba/angular-geolocation).","metaTitle":"Build a collaborative painting application with Angular","metaDescription":"This tutorial will show you how to build a collaborative painting application using Angular. You will develop a web app that allows two users to paint together."}}],"defaultValue":"Channels","queryType":"product","pages":33,"route":"/tutorials","query":{"product":"Channels","page":"17"}}},"page":"/tutorials","query":{"product":"Channels","page":"17"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&page=17 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:47:37 GMT -->
</html>