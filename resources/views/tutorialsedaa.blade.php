<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=Python&page=1 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:45:08 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">23</span> tutorials for “<span class="css-npldjc ehwuahf2">Python</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials5599.html?product=Channels&amp;tag=Python" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials72f5.html?product=Beams&amp;tag=Python" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Python"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/lambda-python-android-push-notifications.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Amazon Web Services</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">AWS Lambda running Python and Pusher Beams for Android push notifications</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Learn how to send push notifications from AWS Lambda to an Android app, using Pusher Beams. Build a simple demo app and ...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/push-notifications-ios-python-aws-lambda.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Amazon Web Services<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Send push notifications to an iOS app with Python and AWS Lambda</h3><p class="css-k12xad e5jrto45">Set up a simple Python function on AWS Lambda, including Pusher Beams. Use it to send push notifications to an iOS app. ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/google-recaptcha-flask.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Python<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flask</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Integrate Google reCAPTCHA in Flask</h3><p class="css-k12xad e5jrto45">This brief tutorial shows you how to create a simple login page in Flask, featuring a reCAPTCHA powered by Google. You w...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/oauth-flask-dance.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Flask<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Python</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Implement OAuth in a Flask app using Flask-Dance</h3><p class="css-k12xad e5jrto45">This tutorial provides a practical example app, using Flask-Dance to implement OAuth authentication in a Flask app. The ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/flask-vue-comments.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Flask<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live comment feature with sentiment analysis using Flask and Vue</h3><p class="css-k12xad e5jrto45">This tutorial will guide you through building a comments feature for a website, using Flask and Vue.js. New comments wil...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-flask-vue-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Flask<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Python</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app in Flask and Vue with sentiment analysis - Part 1: Setting up the project</h3><p class="css-k12xad e5jrto45">This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each othe...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-flask-vue-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Flask<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Python</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app in Flask and Vue with sentiment analysis - Part 2: Building the chat interface</h3><p class="css-k12xad e5jrto45">This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each othe...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-flask-vue-part-3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Flask<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Python</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app in Flask and Vue with sentiment analysis  - Part 3: Live chat with sentiment analysis</h3><p class="css-k12xad e5jrto45">This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each othe...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-flask-vue-part-4.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Flask<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Python</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app in Flask and Vue with sentiment analysis  - Part 4: Adding an online presence feature</h3><p class="css-k12xad e5jrto45">This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each othe...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="69ho49">.css-69ho49{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#eeeeff;color:#8f87e6;cursor:not-allowed;}.css-69ho49:hover{background:#5c29db;color:white;}.css-69ho49:active{background:#5c29db;}@media all and (min-width:760px){.css-69ho49{font-size:1rem;}}.css-69ho49:hover,.css-69ho49:active{cursor:not-allowed;background:#ebeaef;color:#fffc;}</style><a href="#" disabled="" class="css-69ho49 edg0byb1">Prev</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsedaa.html?tag=Python&amp;page=1" class="css-2wakph edg0byb1">1</a><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials047b.html?tag=Python&amp;page=2" class="css-5s6711 edg0byb1">2</a><a href="tutorials01c9.html?tag=Python&amp;page=3" class="css-5s6711 edg0byb1">3</a><a href="tutorials047b.html?tag=Python&amp;page=2" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":23,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4cBniVyg9tm5b1iPHHbsea","type":"Entry","createdAt":"2019-05-08T20:48:58.714Z","updatedAt":"2019-05-08T20:48:58.714Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"AWS Lambda running Python and Pusher Beams for Android push notifications","url":"lambda-python-android-push-notifications","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"9VkyxkESQ0IQmyKy8wq6C","type":"Entry","createdAt":"2018-09-18T18:40:03.858Z","updatedAt":"2018-09-18T18:40:03.858Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christopher Batin","url":"christopher-batin","email":"chris@batin.me","twitter":"https://twitter.com/cjbatin","github":"https://github.com/cjbatin/","guestWriter":true}}],"projectRepo":"https://github.com/cjbatin/Python-Lambda-Pusher-Beams-for-Android-Notifications","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6x89hfueemQIu9tGMyKa0a","type":"Entry","createdAt":"2019-03-13T18:42:28.682Z","updatedAt":"2019-03-13T18:42:28.682Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Amazon Web Services","url":"amazon-web-services","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}}],"reviewDate":"2019-05-08","description":"Learn how to send push notifications from AWS Lambda to an Android app, using Pusher Beams. Build a simple demo app and create a Lambda function using Python. Upload and test the function.","prerequisite":"You will need Python 3.7+ and Android Studio 3.3.2+ installed on your machine.","content":"## Introduction\n\nPusher Beams allows you to customize push notifications you send to your devices via a server. However it can be expensive to run a server 24 hours a day 7 days a week and we may only need to send notifications every so often. This is where AWS Lambda can help. Lambda functions are serverless and work on a pay as you go model (with a generous free tier). This means that you only pay for when you use the function. We’re going to explore how we can setup Pusher Beams on an Android client using an AWS Lambda function running Python to trigger the notifications.\n\n\n## Prerequisites\n\n- A free AWS account. You can create one [here](https://aws.amazon.com).\n- A free Pusher account. You can create one [here](https://dash.pusher.com/authenticate).\n- A free Google Firebase account. You can create one [here](https://firebase.google.com).\n- Python 3.7.x installed on your local machine. Download [here](https://www.python.org/downloads/).\n- Android Studio 3.3.2+\n- An understanding of Android development and Android Studio environment.\n- Pip installed on your local machine. Instructions [here](https://docs.python.org/3/installing/index.html).\n- Pipenv installed on your local machine. Instructions [here](https://pipenv.readthedocs.io/en/latest/install/).\n\nThis tutorial provides a Makefile for Linux and MacOS users to bundle the code. Windows 10 users should use a Linux subsystem or bundle the Lambda code using the instructions [here](https://docs.aws.amazon.com/lambda/latest/dg/lambda-python-how-to-create-deployment-package.html).\n\n## Create your Android application\n\nWe will need to have a user that has registered for notifications and signed up for an interest we will call “hello”, so we can test out our implementation. We’re going to create a very basic Android app that doesn’t actually show anything to the user except for the notification on the lock screen.\n\nCreate a new **Empty Activity** project using Android Studio and name it something like LambdaPush. Provide a **Package name** and remember this as you will need it for completing the Firebase set up. We will be using **Kotlin** as the language choice for this tutorial and supporting Android 16+ (Jelly Bean). \n\n### Firebase set up\n\nLog in to your Firebase account [here](https://firebase.google.com) and go to your console. If you do not already have a project created you will need to create one and name it anything you like, if you have a project select it. Within the **Project Overview** page select **Add App** and follow the instruction for creating a new Android application. \n\nOnce you have completed the setup for your Android app you will be returned to the dashboard. You will need to go to the project settings (found within the “settings cog” in the top left). Once in the project settings select the **Cloud Messaging** tab. Copy the **Server key** you will need it for setting up your Pusher Beams instance.\n\n![lambda-android-firebase](//images.ctfassets.net/1es3ne0caaid/2cbkn38uhTDGt2L1MBWDfN/1ed0cf684bfe4951f2253207aec4fa1a/lambda-android-firebase.png)\n\n### Creating a Pusher Beams instance\n\nLogin or create an account to access your dashboard [here](https://dash.pusher.com). Create a new beams instance using the dashboard.\n\n![lambda-android-beams](//images.ctfassets.net/1es3ne0caaid/1hOmThI9eg88vgMj2BpI0f/0222f81070a933b7ad2a449159bbe05c/lambda-android-beams.png)\n\nComplete step one of the Android setup guide, by providing your FCM server key you copied earlier and **Continue**. We will pick up the remainder later on in this tutorial. Press the **X** to exit the setup guide and you will be returned to your dashboard for that instance. Scroll to the bottom of the page and you will find your Beams instance ID and secret key, make note of these you will need them later.\n\n\n### Adding the SDKs\n\nOpen your app level `build.gradle` file and add the following into your dependencies:\n\n```\n    // app/build.gradle\n    ...\n    dependencies {\n     ...\n     implementation 'com.google.firebase:firebase-messaging:17.1.0'\n     implementation 'com.pusher:push-notifications-android:1.4.0'\n     ...\n    }\n    ...\n```\n\nHere we are adding the Firebase messaging SDK and the Pusher Beams SDK. You should already have the Google Service SDK and `google-services.json` added to your project when setting up the Firebase app.\n\nSynchronize Gradle by pressing the **Sync Now** button.\n\n### Initialize Pusher Beams\n\nOpen your main activity and add the following import:\n\n```kotlin\n    import com.pusher.pushnotifications.PushNotifications\n```\n\nAdd the following to your `onCreate` function:\n\n```kotlin\n    PushNotifications.start(applicationContext, \"YOUR_INSTANCE_ID\")\n    PushNotifications.addDeviceInterest(\"hello\")\n```\n\nRemember to replace `YOUR_INSTANCE_ID` with the instance id from your Pusher Beams console and run your application.\n\n## Create your Lambda function\n\n### Writing our function\n\nWe will need to install our packages and write our function on our local machine before we can upload it to a Lambda function. Create a new working directory on your local machine and within run the following command in your terminal working directory:\n\n```\n    $ pipenv install pusher_push_notifications\n    $ pipenv install requests\n```\n\nThese commands will install our Pusher notifications dependency within our local directory. It also sets up a virtual environment for our project. Next create a new file called `index.py` and open it in your favorite text editor and add the following code:\n\n```python\n    // index.py\n    from pusher_push_notifications import PushNotifications\n    import requests\n    \n    def lambda_handler(event, context):\n        beams_client = PushNotifications(\n                    instance_id='YOUR_INSTANCE_ID',\n                    secret_key='YOUR_SECRET_KEY',\n                    )\n    \n        response = beams_client.publish_to_interests(interests=['hello'],\n                                                 publish_body={\n                                                     'fcm': {\n                                                        'notification': {\n                                                            'title': event['title'],\n                                                            'body': event['message'],\n                                                        },\n                                                     },\n                                                 },\n                                                 )\n        print(response['publishId'])\n```\n\nThis code will be used by our Lambda function later on to publish notifications to devices that are registered for the `hello` interest. We use the `event['title']` and `event['message']` to form part of the message. We’ll look at this in more detail when we come to test our integration. Remember to replace `YOUR_INSTANCE_ID` and `YOUR_SECRET_KEY` with the credentials from your Pusher Beams console.\n\nNext we need to compress the directory we have been working in and make a .zip such that we can upload our code and dependencies to our function later on. Download the `Make` file from the source code repository [here](https://github.com/cjbatin/Python-Lambda-Pusher-Beams-for-Android-Notifications/blob/master/Python/Makefile) and put it in your working directory. Run the command:\n\n```\n    $ make build\n```\n\n\u003e **Note:** If you are using Windows 10 without a Linux subsystem you should follow the instructions [here](https://docs.aws.amazon.com/lambda/latest/dg/lambda-python-how-to-create-deployment-package.html). \n\nThis will create a zip file called `Python.zip` with all the dependencies packaged within it.\n\n### Creating a Lambda function\n\nLog in or create an account to access your AWS console [here](https://aws.amazon.com/console/). Once you are logged in use the search bar to find Lambda and select it from the list.\n\n![lambda-android-aws-console](//images.ctfassets.net/1es3ne0caaid/18OcS1oCS83T7s9vnxCCXi/ee834ddc5f300dd9c61fcbc9e69385e4/lambda-android-aws-console.png)\n\n\u003e **Note:** Set your AWS region to N. Virginia in the top right if it is not already.\n\nYou should be redirected to the Lambda service and see an option **Create Function**, select this. Choose the **Author from Scratch** option at the top of the next page. This will provide us a basic “hello world” template we can use to create our function. Complete the basic setup as shown in the image below.\n\n![lambda-android-aws-new-function-python](//images.ctfassets.net/1es3ne0caaid/6iG1Jnk583i8sBjJ6wXwmt/6defe3baa413bc688a396ed3ff0396d8/lambda-android-aws-new-function-python.png)\n\n- **Function name** - Name this whatever you want for example “Pusher-Beams-Python”.\n- **Runtime** - We will be using Python 3.7 so select this from the drop down list.\n- **Execution role** - Select **Create a new role from AWS policy templates**. If you already have a role you would rather use you can select **Use an existing role**.\n- **Role name** - You can name this anything you like for example “lambda_basic_execution”.\n- **Policy templates** - You can leave this blank.\n\nOnce complete select the **Create function** button at the bottom of the page. You should be redirected to your Lambda function console once it has been created. We can ignore the **Designer** section of the console. This area allows us to tie together different AWS services, you may wish to use this with a production function such that it can be accessed from the wider internet. However, we will just be using the test service for the purpose of this tutorial.\n\nNow we need to upload our code. In the **Function code** section select the **Upload a .zip file** from the **Code entry type** dropdown menu. Use the **Upload** button to search your local machine for the `Python.zip`  we created earlier. Finally change the **Handler** to be `index.lambda_handler`, this will allow AWS Lambda to find our function within our folder. If everything looks like the below image click **Save** in the top right. \n\n![lambda-android-aws-function-code-python](//images.ctfassets.net/1es3ne0caaid/1RZRPigPlnjLawX9YBQJzY/7f291f93bda458aca75f3841aca9b7ef/lambda-android-aws-function-code-python.png)\n\n\n## Testing our implementation\n\nIn the top right of your Lambda console select the **Test** button. We need to configure a test option. Create a new test event like the below image. Notice how our keys in the JSON object are title and message. These are the event keys we were using in our code to provide the title and body for the push notification. \n\n![lambda-android-aws-test-event](//images.ctfassets.net/1es3ne0caaid/5Ev5UQmYJrFxy6Di54U5aZ/aa89cf11953ed2d8d6af1f654f4070eb/lambda-android-aws-test-event.png)\n\nOnce you are done press the **Create** button at the bottom. The dialog box will close and the test **HelloTest** should be selected in the dropdown menu by the **Test** button, Press **Test.** If everything has worked as expected you should receive a push to your device and a similar log output from your Lambda console.\n\n![lambda-android-aws-test-success](//images.ctfassets.net/1es3ne0caaid/4RRkCakfjmlwFEUbZq7ewT/ae49546e38e89bf25fbfc9bb66dd3ee4/lambda-android-aws-test-success.png)\n![lambda-android-push-notification](//images.ctfassets.net/1es3ne0caaid/6UfD7jfn25P5RFo1lYtcGd/d2906f074e29b260b8dc900194ebb493/lambda-android-push-notification.png)\n\n## Conclusion\n\nWe’ve learnt how to create an AWS Lambda function using Python that can publish a push notification using Pusher Beams to an Android device. The source code for this tutorial can be found [here](https://github.com/cjbatin/Python-Lambda-Pusher-Beams-for-Android-Notifications).","metaTitle":"Lambda with Python and Pusher Beams for Android","metaDescription":"Learn how to send push notifications from AWS Lambda to an Android app, using Pusher Beams. Build a simple demo app and create a Lambda function using Python. Upload and test the function."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5kBVWvO9hW6wHeQwtWi01a","type":"Entry","createdAt":"2019-04-26T23:41:58.809Z","updatedAt":"2019-04-26T23:41:58.809Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Send push notifications to an iOS app with Python and AWS Lambda","url":"push-notifications-ios-python-aws-lambda","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"9VkyxkESQ0IQmyKy8wq6C","type":"Entry","createdAt":"2018-09-18T18:40:03.858Z","updatedAt":"2018-09-18T18:40:03.858Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christopher Batin","url":"christopher-batin","email":"chris@batin.me","twitter":"https://twitter.com/cjbatin","github":"https://github.com/cjbatin/","guestWriter":true}}],"projectRepo":"https://github.com/cjbatin/Python-Lambda-Pusher-Beams-for-iOS-Notifications","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6x89hfueemQIu9tGMyKa0a","type":"Entry","createdAt":"2019-03-13T18:42:28.682Z","updatedAt":"2019-03-13T18:42:28.682Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Amazon Web Services","url":"amazon-web-services","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}}],"reviewDate":"2019-04-26","description":"Set up a simple Python function on AWS Lambda, including Pusher Beams. Use it to send push notifications to an iOS app. This tutorial includes all setup steps and a working demo.","prerequisite":"You will need Python 3.7+ and Xcode 10+.","content":"## Introduction\n\nPusher Beams allows you to customize push notifications you send to your devices via a server. However it can be expensive to run a server 24 hours a day 7 days a week and we may only need to send notifications every so often. This is where AWS Lambda can help. Lambda functions are serverless and work on a pay as you go model (with a generous free tier). This means that you only pay for when you use the function. We’re going to explore how we can setup Pusher Beams on an iOS client using an AWS Lambda function running Python to trigger the notifications.\n\n## Prerequisites\n\n- A free AWS account. You can create one [here](https://aws.amazon.com).\n- A free Pusher account. You can create one [here](https://dash.pusher.com/authenticate).\n- Python 3.7.x installed on your local machine. Download [here](https://www.python.org/downloads/).\n- Xcode 10+\n- MacOS\n- An iOS device for testing notifications.\n- An understanding of iOS development and Xcode environment.\n- Cocoapods - Install instructions [here](https://guides.cocoapods.org/using/getting-started.html).\n\nYou will also need to have pip installed for installing Python dependencies. Run the following commands in a terminal:\n\n```\n    $ sudo easy_install pip3\n    $ brew install pipenv\n```\n\n## Create your Lambda function\n\n### Creating a Pusher Beams instance\n\nLogin or create an account to access your dashboard [here](https://dash.pusher.com). Create a new Pusher Beams instance using the dashboard.\n\n![aws-python-ios-lambda-1](//images.ctfassets.net/1es3ne0caaid/58fCvfPBBOoVf1NgOk4Zpz/d063c9f8ac16560a1034f6c3e2b5f5a8/aws-python-ios-lambda-1.png)\n\nComplete step one of the iOS setup guide, by providing your APNS key and team ID and clicking **Continue**. We will pick up the remainder later on in this tutorial. Press the **X** to exit the setup guide and you will be returned to your dashboard for that instance. Scroll to the bottom of the page and you will find your Pusher Beams instance ID and secret key, make note of these you will need them later.\n\n### Writing our function\n\nWe will need to install our packages and write our function on our local machine before we can upload it to a Lambda function. Create a new working directory on your local machine and within run the following command in your terminal working directory:\n\n```\n    $ pipenv install pusher_push_notifications\n    $ pipenv install requests\n```\n\nThese commands will install our Pusher notifications dependency within our local directory. It also sets up a virtual environment for our project. Next create a new file called `index.py` and open it in your favorite text editor and add the following code:\n\n```python\n    // index.py\n    from pusher_push_notifications import PushNotifications\n    import requests\n    \n    def lambda_handler(event, context):\n        beams_client = PushNotifications(\n                    instance_id='YOUR_INSTANCE_ID',\n                    secret_key='YOUR_SECRET_KEY',\n                    )\n    \n        response = beams_client.publish_to_interests(interests=['hello'],\n                                                 publish_body={\n                                                 'apns': {\n                                                    'aps': {\n                                                        'alert': {\n                                                            'title': event['title'],\n                                                            'body': event['message']\n                                                            },\n                                                        },\n                                                    },\n                                                 },\n                                                 )\n        print(response['publishId'])\n```\n\nThis code will be used by our Lambda function later on to publish notifications to devices that are registered for the `hello` interest. We use the `event['title']` and `event['message']` to form part of the message. We’ll look at this in more detail when we come to test our integration. Remember to replace `YOUR_INSTANCE_ID` and `YOUR_SECRET_KEY` with the credentials from your Pusher Beams console.\n\nNext we need to compress the directory we have been working in and make a .zip such that we can upload our code and dependencies to our function later on. Download the `Make` file from the source code repository [here](https://github.com/cjbatin/Python-Lambda-Pusher-Beams-for-iOS-Notifications/tree/master/Python) and put it in your working directory. Run the command:\n\n```\n    $ make build\n```\n\nThis will create a zip file called `Python.zip` with all the dependencies packaged within it.\n\n### Creating a Lambda function\n\nLog in or create an account to access your AWS console [here](https://aws.amazon.com/console/). Once you are logged in use the search bar to find Lambda and select it from the list.\n\n![aws-python-ios-lambda-2](//images.ctfassets.net/1es3ne0caaid/ubX8d4GZesLLVrCGWX3Ap/5cd27d2edfedd7eeb2a52c61ed91a8f1/aws-python-ios-lambda-2.png)\n\n\u003e **Note:** Set your AWS region to N. Virginia in the top right if it is not already.\n\nYou should be redirected to the Lambda service and see an option **Create Function**, select this. Choose the **Author from Scratch** option at the top of the next page. This will provide us a basic “hello world” template we can use to create our function. Complete the basic setup as shown in the image below.\n\n![aws-python-ios-lambda-3](//images.ctfassets.net/1es3ne0caaid/6NsiDtAxKtSmFZQ0u2UWcx/4fe732564fc786aa7c9568fc9b838a34/aws-python-ios-lambda-3.png)\n\n- **Function name** - Name this whatever you want for example “Pusher-Beams-Python”.\n- **Runtime** - We will be using Python 3.7 so select this from the drop down list.\n- **Execution role** - Select **Create a new role from AWS policy templates**. If you already have a role you would rather use you can select **Use an existing role**.\n- **Role name** - You can name this anything you like for example “lambda_basic_execution”.\n- **Policy templates** - You can leave this blank.\n\n\nOnce complete select the **Create function** button at the bottom of the page. You should be redirected to your Lambda function console once it has been created. We can ignore the **Designer** section of the console. This area allows us to tie together different AWS services, you may wish to use this with a production function such that it can be accessed from the wider internet. However, we will just be using the test service for the purpose of this tutorial.\n\nNow we need to upload our code. In the **Function code** section select the **Upload a .zip file** from the **Code entry type** dropdown menu. Use the **Upload** button to search your local machine for the `Python.zip`  we created earlier. Finally change the **Handler** to be `index.lambda_handler`, this will allow AWS Lambda to find our function within our folder. If everything looks like the below image click **Save** in the top right. \n\n![aws-python-ios-lambda-4](//images.ctfassets.net/1es3ne0caaid/3wDxf5xOEZ1T4tcxcXfcpV/72b7bb0a869fcef3e4e32b6f7ca08b2b/aws-python-ios-lambda-4.png)\n\n## Create your iOS application\n\nNow that we have created our Lambda function, we need to have a user that has actually registered for notifications and signed up for the hello interest so we can test out our implementation. We’re going to create a very basic app that doesn’t actually show anything to the user except for the notification on the lock screen.\n\n### Project setup\n\nCreate a new **Single View App** using Xcode and name it something like LambdaPush. Once the project is created we need to install the Beams SDK. Open the terminal and go to the working directory of the newly created project and run the following command.\n\n```\n    $ pod init\n```\n\nOpen the newly created `Podfile` and add the following pod:\n\n```\n    pod 'PushNotifications'\n```\n\nIn the terminal run:\n\n```\n    $ pod install\n```\n\nMake sure you close your Xcode project and reopen the newly created Xcode Workspace before continuing. Within your project capabilities make sure you have switched on the **Push Notifications** capability. Also turn on the **Background Modes** capability and tick the box for **Remote Notifications**.\n\nOpen your `AppDelegate.swift` file and replace its contents with the following. Remembering to replace `YOUR_INSTANCE_ID` with your Pusher Beams instance ID.\n\n```swift\n    // AppDelegate.swift\n    import UIKit\n    import PushNotifications\n    \n    @UIApplicationMain\n    class AppDelegate: UIResponder, UIApplicationDelegate {\n        var window: UIWindow?\n        let pushNotifications = PushNotifications.shared\n    \n        func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -\u003e Bool {\n            self.pushNotifications.start(instanceId: \"YOUR_INSTANCE_ID\")\n            self.pushNotifications.registerForRemoteNotifications()\n            try? self.pushNotifications.subscribe(interest: \"hello\")\n    \n            return true\n        }\n    \n        func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n            self.pushNotifications.registerDeviceToken(deviceToken)\n        }\n    \n        func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable: Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -\u003e Void) {\n            self.pushNotifications.handleNotification(userInfo: userInfo)\n        }\n    }\n```\n\nYou can now run the application on your iOS device and accept to receive notifications. The SDK will then manage registering our interest in hello. Remember to replace `YOUR_INSTANCE_ID` with your instance ID credential from your Pusher Beams console.\n\n\n## Testing our implementation\n\nReturn to your Lambda function console. In the top right select the **Test** button. We need to configure a test option. Create a new test event like the below image. Notice how our keys in the JSON object are title and message. These are the event keys we were using in our code to provide the title and body for the push notification. \n\n![aws-python-ios-lambda-5](//images.ctfassets.net/1es3ne0caaid/6OOwnOYXjnzX4M7ovVZKwk/f5a40e3770dec0c346d79559d6f44d6b/aws-python-ios-lambda-5.png)\n\nOnce you are done press the **Create** button at the bottom. The dialog box will close and the test **HelloTest** should be selected in the dropdown menu by the **Test** button, Press **Test.** If everything has worked as expected you should receive a push to your device and a similar log output from your Lambda console.\n\n![aws-python-ios-lambda-6](//images.ctfassets.net/1es3ne0caaid/sDWIJACrCyVotyw55e6Ie/f7bb172783381d72914db3c69247402e/aws-python-ios-lambda-6.png)\n\n![aws-python-ios-lambda-7](//images.ctfassets.net/1es3ne0caaid/Rl0BcPh78G8bhRDLHIZ2o/cc930d8e527760be273e3da517d9acfa/aws-python-ios-lambda-7.jpeg)\n\n## Conclusion\n\nWe’ve learnt how to create an AWS Lambda function using NodeJS that can publish a push notification using Pusher Beams to an iOS device. The source code for this tutorial can be found [here](https://github.com/cjbatin/Python-Lambda-Pusher-Beams-for-iOS-Notifications).","metaTitle":"Push notifications to an iOS app with Python and AWS Lambda","metaDescription":"Set up a simple Python function on AWS Lambda, including Pusher Beams. Use it to send push notifications to an iOS app. This tutorial includes all setup steps and a working demo."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1GoLi54vgF78f1k3PmE1Pv","type":"Entry","createdAt":"2019-02-16T00:25:01.538Z","updatedAt":"2020-06-19T11:13:23.512Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Integrate Google reCAPTCHA in Flask","url":"google-recaptcha-flask","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5aXRWGOQTYq4ouqmWkOGwA","type":"Entry","createdAt":"2018-10-31T18:22:10.412Z","updatedAt":"2018-10-31T19:49:17.138Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Michael Aboagye","url":"michael-aboagye","email":"aboagyemichaelk@gmail.com","twitter":"https://twitter.com/kwaku_mikey","github":"https://github.com/Rev0kz","guestWriter":true}}],"projectRepo":"https://github.com/Rev0kz/Flask-Google","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}}],"reviewDate":"2019-02-15","description":"This brief tutorial shows you how to create a simple login page in Flask, featuring a reCAPTCHA powered by Google. You will work through signing up and getting access to reCAPTCHA, creating the registration page, and coding a simple form.","prerequisite":"You will need Python 3.7 installed on your machine.","content":"In this tutorial, we will look at how to add [Google reCAPTCHA](https://www.google.com/recaptcha/intro/v3.html)  v2 to a registration form in Flask. \n\nWe will build a Flask app which simply allows users to register, ticking within the reCAPTCHA box to ensure it's not a robot requesting to register.\n\n![flask-recaptcha-demo](//images.ctfassets.net/1es3ne0caaid/5f398xvAXVbcK68yd5jafA/5f1d9c6218cf62c3c6385775d6776116/flask-recaptcha-demo.png)   \n\nGoogle reCAPTCHA is a service that protects websites  from spam and abuse. \n\n## Prerequisites\n\n- Python 3.7\n- pip (Python package installer) \n- virtualenv\n\nThis tutorial assumes you have basic knowledge in Flask, Python and you know how to navigate your operating system's command line and configure your development environment.\n\n\n## Register for Google reCAPTCHA\n\nIn order to integrate Google reCAPTCHA in a Flask-based app, we need to register a site  and  get an API key pair .\n\nGoogle provides four types of reCAPTCHA. \n\n- reCAPTCHA v3 \n- reCAPTCHA v2   \n- Invisible reCAPTCHA \n- reCAPTCHA Android \n\nreCAPTCHA v3  validates requests with a score whilst v2 validates request with the \"I am not a robot\" checkbox. \n\nThe Invisible reCAPTCHA does not need the user to click on a check box instead it is called upon when a user clicks on a button on a site.\n\nIn this tutorial let's make use of reCAPTCHA v2 to validate request in a Flask app. \n\nBrowse to [Google](https://accounts.google.com/signup/v2/webcreateaccount?continue=https%3A%2F%2Faccounts.google.com%2FManageAccount\u0026flowName=GlifWebSignIn\u0026flowEntry=SignUp) and sign up or login with your Google account.\n\nClick on the [My reCAPTCHA](https://www.google.com/recaptcha/intro/v3.html) blue button to register a site to use reCAPTCHA. \n\n\n- In the **Label** section, choose and enter a label to make it easy to identify the site in the future, for example:  register\n\n\n- Choose the type of reCAPTCHA you want to use.  Choose the **reCAPTCHA v2** purposely for this tutorial.  \n\n\n- In the **Domains** box, enter the name of the site you are registering, for example: 127.0.0.1 or localhost\n\n\n- Click on the **Register** button to save settings for your site. Google will generate two keys (site key and secret key) after registering a site\n\n\n\n## Create your virtual environment using Virtualenv    \n\nWe need to install [virtualenv](https://virtualenv.pypa.io/en/latest/) via pip before we can go ahead to create a virtualized environment for this project.  \n\nUse the following command to install virtualenv:\n\n```\npip install virtualenv\n```\n\nNext create a directory to hold the virtualized environment with the `mkdir`  command.   \n\n```\nmkdir Google\n```\n\nAfterwards change to the Google directory you created few seconds ago using the command below: \n\n```\ncd Google\n```\n\nCreate a virtualized environment with the tool `virtualenv`  \n\n```\nvirtualenv reCaptcha\n```\n\nNext change to the directory reCaptcha and activate your virtual environment using the following commands:  \n\n```\ncd reCaptcha\nsource bin/activate\n```\n\nStill inside your virtual environment,  install the following packages with pip: \n\n```\n    pip install Flask\n    pip install Flask-WTF\n```\n\nThe second package we have installed with pip is an integration of [Flask](http://flask.pocoo.org/) and [WTForms](https://wtforms.readthedocs.io/en/stable/forms.html)  including CSRF,  file upload and reCAPTCHA.\n\nInside our virtualized environment, create two files as `app.py`  and `form.py` using the `touch` command as shown below \n\n```\n    touch app.py form.py \n```\n\nInside the `form.py` file, import the following  packages\n\n```\n    from flask_wtf import Form, RecaptchaField\n    from wtforms import TextField, PasswordField, TextAreaField, StringField, validators\n```    \n\nOn the first line, we imported `Form` and  `RecaptchaField`  from  `flask_wtf`.\n\nNext we imported `TextField` , `PasswordField`, `TextAreaField`, `StringField` , and `validators`from `wtforms` .\n\nBeneath the import statement in `form.py` file, insert the following code\n\n``` python\n    class RegisterForm(Form):   \n      name = StringField('name', [validators.DataRequired(), validators.Length(max=255)])\n      password = PasswordField('new password', [validators.DataRequired(),validators.Length(min=8)])\n      email = StringField('emailaddress', [validators.DataRequired(), validators.Length(min=6, max=35)])\n      recaptcha = RecaptchaField()\n```\n\nUnder the `Class RegisterForm`, we have form fields such as `StringField`,  and `PasswordField`. \n\nEach field represents a specific data type and contain a number of properties such as a label and description. \n\nInside the `app. py`  file ,  import `Flask`,  `render_template` and `request`  from  `flask` .  \n\n`render_template` will make it possible for us to display the registration form to those who navigate to the register section. \n\nIn addition, import the  `RegisterForm` class via the `form` file. \n\nAfterwards create view method for our registration form.     \n\n``` python\n    // ../reCaptcha/app.py\n    \n    from flask import Flask, render_template, request, \n    \n    from form import RegisterForm\n    \n    app = Flask(__name__)\n    \n    app.config['SECRET_KEY'] = 'lablam.2017'\n    app.config['RECAPTCHA_USE_SSL']= False\n    app.config['RECAPTCHA_PUBLIC_KEY']='enter_your_public_key'\n    app.config['RECAPTCHA_PRIVATE_KEY']='enter_your_private_key'\n    app.config['RECAPTCHA_OPTIONS']= {'theme':'black'}\n    \n    @app.route('/register', methods=['GET', 'POST']) \n    def register(): \n      form = RegisterForm()\n      \n      if form.validate_on_submit():\n              return \"the form has been submitted. Success!\"\n          \n      return render_template(\"register.html\", form=form)\n    \n    if __name__ == '__main__':\n       app.run(port=5000, debug=True)  \n```      \n\nIn the `app.py` file, add your Google reCAPTCHA keys. \n\nYou need to place reCAPTCHA configuration settings below  `app = Flask(__name__)`. \n\n```\n    app.config['RECAPTCHA_USE_SSL']= False\n    app.config['RECAPTCHA_PUBLIC_KEY']= 'enter_your_public_key'\n    app.config['RECAPTCHA_PRIVATE_KEY']='enter_your_private_key'\n    app.config['RECAPTCHA_OPTIONS'] = {'theme':'white'}\n```    \n\nIn the project directory, create a sub-directory using the `mkdir` command and name it `templates`.  \n\nWe will place the registration HTML file inside the `templates` directory. \n\nYou can create HTML files in the `templates` by using the `touch` command. \n\n```\n    touch register.html \n```\n\nThe `register.html` file will be used to displayed  registration form integrated with Google reCAPTCHA by  the `render_template` method . \n\nWe will make use of [Jinja](http://jinja.pocoo.org/) templates to do so. \n\nInside the `register.html` file, place the following code:\n\n``` html\n    // ../reCaptcha/templates/register.html\n    \n    \u003chtml\u003e\n    \u003chead\u003e \n    \u003ctitle\u003eRegister\u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \u003ch1\u003eRegister form\u003c/h1\u003e\n    \u003cform method=\"POST\" action=\"{{ url_for('register') }}\"\u003e \n        {{ form.csrf_token }}\n        {{ form.name.label }}\n        {{ form.name }}\n        \u003cul\u003e \n        {% for error in form.name.error %}\n           \u003cli style=\"coloured:red;\"\u003e{{ error }}\u003c/li\u003e\n        {% endfor %}\n        \u003c/ul\u003e\n         {{ form.password.label }} \n         {{ form.password }}\n         {% for error in form.password.error %} \n         \u003cul\u003e \n            \u003cli style=\"coloured:red;\"\u003e{{ error }}\u003c/li\u003e\n         {% endfor %}\n         \u003c/ul\u003e\n         {{ form.email.label }}\n         {{ form.email }}\n         \u003cul\u003e \n         {% for error in form.email.error %}\n            \u003cli style=\"coloured:red;\"\u003e{{ error }}\u003c/li\u003e \n         {% endfor %}\n         \u003c/ul\u003e\n         {{ form.recaptcha }}\n         \u003cinput type=\"submit\" value=\"submit\"\u003e\n    \u003c/form\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e     \n```         \n\nAfterwards, type the following command on your console:\n\n```  \npython app.py\n```\n  \nOpen your web browser and type the following:\n\n```\nlocalhost:5000/register\n```\n\nor \n\n```\n127.0.0.1:5000/register\n```                        \n\nThis page below will be displayed to users who navigate to the register section.   \n\n![flask-recaptcha-demo](//images.ctfassets.net/1es3ne0caaid/5f398xvAXVbcK68yd5jafA/5f1d9c6218cf62c3c6385775d6776116/flask-recaptcha-demo.png)\n\n## Conclusion \n\nIn this tutorial, we leverage on `flask_wtf` to integrate Google reCAPTCHA in Flask.\n\nBecause the primary purpose of the tutorial is to show users how to integrate Google reCAPTCHA in Flask, we did not place much emphasis on the user interface.\n         \nGoogle reCAPTCHA can be used to prevent spam abuse\n\nThe code is available in [GitHub](https://github.com/Rev0kz/Flask-Google). You  can clone it to see how it works.","metaTitle":"Integrate Google reCAPTCHA in Flask","metaDescription":"This brief tutorial shows you how to create a simple login page in Flask, featuring a reCAPTCHA powered by Google. You will work through signing up and getting access to reCAPTCHA, creating the registration page, and coding a simple form."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5e2hxEqv5CaGIwqKaUcsmk","type":"Entry","createdAt":"2019-02-01T19:23:42.163Z","updatedAt":"2019-02-01T19:23:42.163Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Implement OAuth in a Flask app using Flask-Dance","url":"oauth-flask-dance","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5aXRWGOQTYq4ouqmWkOGwA","type":"Entry","createdAt":"2018-10-31T18:22:10.412Z","updatedAt":"2018-10-31T19:49:17.138Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Michael Aboagye","url":"michael-aboagye","email":"aboagyemichaelk@gmail.com","twitter":"https://twitter.com/kwaku_mikey","github":"https://github.com/Rev0kz","guestWriter":true}}],"projectRepo":"https://github.com/Rev0kz/FLASK-DANCE","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}}],"reviewDate":"2019-02-01","description":"This tutorial provides a practical example app, using Flask-Dance to implement OAuth authentication in a Flask app. The app allows users to log in with GitHub and view a news feed.","prerequisite":"You will need Python 2.7 installed on your machine.","content":"In this tutorial,  we are going to look at how Flask developers can make use of Flask-Dance  to implement OAuth in a Flask-based application.    \nFlask-Dance makes it possible for developers to allow users to log into a web application via their GitHub account, Twitter account or even Dropbox account. \n\nAlthough it does not guarantee complete protection from cyber attacks, making use of Flask-Dance to integrate OAuth in a web application makes it difficult for  attackers to sniff users' credentials.\n\nWe will build a Flask-based news application that allows readers to log in via their GitHub account to read current news from BBC or CNN  just to demonstrate OAuth via Flask-Dance\n\n![flask-oauth-github-flask](//images.ctfassets.net/1es3ne0caaid/5FGlecSfyEy6CiiC80y00E/e711572f2dccae7e6544bb244d5b97af/flask-oauth-github-flask.png)\n\n##  Prerequisites\n\nYou will need the following:\n\nPython 2.7 \n\nThis tutorial was developed on Linux Debian. Users of other systems should know how to configure their own environment.\n\n## What is OAuth?  \n\nOAuth (Open Authorization)  is not an authentication framework as some developers perceive it to be. Rather it is an authorization framework which allows a third-party application to get access to  users’ resource or data.\n\nOAuth 2.0 is an open source protocol which allows users to share their resources with a third-party application without exposing users’ credential.   \n\nFor instance, if  a user wants to sign up or log in to a web application, the user can choose to do so via their Facebook or GitHub account(assuming developers have made it possible).\n\nThe screenshot below shows the login page of Pusher. In this case, the user can choose to log in with their GitHub or Google account. \n\n![example-login-with-github](//images.ctfassets.net/1es3ne0caaid/3TSTYtjxo4sQGiOyEWiSaa/3b4c4662ebe4ac9974a922185f956c15/example-login-with-github.png)\n\n### Why is OAuth Important?    \n\nOAuth is important because it has reduced the risk of information disclosure. \n\nInstead of  users' handing their credentials over to third-party clients,  OAuth allows users to give access right to third-party clients by providing  tokens instead of password. \n\n\n## Introduction to Flask-Dance\n\nFlask-Dance is an approved extension that allows developers to build Flask-based apps to allow users to authenticate via OAuth protocol. \n\nSince Flask is micro-framework, extensions such as Flask-Dance allows developers to extend the functionality of Flask. \n\nWithout Flask-Dance and other extensions with similar function, it becomes difficult  to integrate OAuth in Flask application. \n\nWe need to register an OAuth app with GitHub in order to allow users to access the newsroom application by connecting to their GitHub account. \n \nFirst and foremost, we need to sign in to our GitHub account. Then click on your profile\npicture, navigate to settings  and click on **Developer settings**.    \n\nTo create a GitHub OAuth app, click on the button with the inscription **New OAuth App**.\n\nIn the application name section, type the name of the web application so that users can \nrecognize it.     \n\nIn the homepage URL section, type the full URL to your application homepage. \n\nDescribe the purpose of your application in the application description section.\n\nInside the application callback URL, type your application’s callback URL.     \n\nA callback URL directs the user back to the original site from an external service. In this\ncontext, when a user makes an attempt to access current news, the user is directed to\nsign in with GitHub account and redirected back to the homepage after successful \nauthorization.\n\n![flask-oauth-github-config](//images.ctfassets.net/1es3ne0caaid/6hhnuqBv1eWKCS2Eyguag8/9bfb0d956d844c57123b66e5701b2134/flask-oauth-github-config.png)\n\nClick on the **Update application** button to save and update.\n\n### Create a virtual development environment for the OAuth project\n\nBefore we start to install Python and Flask packages as well as files and folders for our project, we need to create a virtual environment for our project.\n\nWe will use the [Virtualenv](https://pypi.python.org/pypi/virtualenv) tool to do so.\n\nThe main essence of creating a virtual environment is to work with specific packages that we need for our Flask project and the Python main directory from our Python-Flask project\n\nAssuming you have already installed pip on your Debian machine, use the following command to install virtualenv:  \n  \n```\n    pip install virtualenv   \n```\n\nNext use the command `mkdir` to create a directory to store or hold our virtual environment    \n\n```\n    mkdir News\n```\n\nInitialize a virtualenv for our Flask  project using the following command   \n\n```\n    virtualenv newsroom \n```\n\nThe above command creates a newsroom  directory where we will install packages such as `feedparser` for our Flask project.\n\nAs the primary purpose of virtualenv tool is to create a sandbox environment, we need to activate it to allow virtualenv to sandbox our Flask project. The following command activates our virtual environment as shown below:      \n\n```\n    source /bin/activate\n```\n\nWe can also use the  `deactivate` command to exit from our sandbox Python environment and return to the global or main directory.     \n\n### Create files and folders for our project\n\nInside the virtual environment, we need to create the following files and folder for our project.\n\nUse the touch command to create `app.py` file and mkdir command to create `newsapp` folder.\n\n`app.py`:  main application file\n`newsapp`:  main application folder\n\nInside or within the `newsapp` directory, create a sub-folder and name it `templates`.  Create home`.html` in the `templates` sub-folder \n\n### Install packages using pip\n\nNext, we will use pip or easy_install to install the following packages:\n\n\n- Flask: micro framework for python developers\n- feedparser: It parses Atom 0.3, and Atom 1.0 feeds and so on.\n- Flask-Dance:  a Flask extension to implement OAuth in web application. \n\n\nYou can choose to use pip install  `\u003cpackage_name\u003e`   or `easy_install \u003cpackage_name\u003e`.  \n\n```\n    pip install Flask\n    \n    pip install feedparser\n    \n    pip install Flask-Dance[sqla]\n```\n\nThe above commands install Feedparser, Flask and Flask-Dance alongside with  SQLAlchemy\n\n### Import packages into app.py file \n\nInside the `app.py` file import the following packages\ngithub \n\n``` python\n    from flask import Flask, render_template, redirect, url_for \n    import feedparser\n    from flask_dance.contrib.github import make_Github_blueprint, github  \n```\n\nIn Python, we can access functions in modules by using the `import` command. Modules are simply files ending with the  .py extension. \n\nLine 1: We imported `render_template` , `redirect` and `url_for`  from flask.\n\nLine 2: We imported `feedparser`. \n\nLine 3: We imported make_github_blueprint and github from `flask_dance` \n\nNow initialize and configure the Flask application with the GitHub app client and secret ID with the following  code in the `app.py`  file. \n\nYou can refer to GitHub settings if you can't remember or failed to save it in a file somewhere. \n\n``` python\n    app = Flask(__name__)\n    app.secret_key=\"this.is.my.secretkey\" \n    blueprint = make_github_blueprint(client_id='your_client_id', client_secret='your_client_secret'\n      )  \n```\n\nIt is not advisable to set your secret key as this.is.my.secretkey. You can generate a random key using Python fernet. \n\nThe command below generates a cryptographic key via fernet\n\n```\n     python -c  \"from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())\"\n```\n\nOr \n\n``` python\n    from cryptography.fernet importFernet \n    key = Fernet.generate_key()\n    key.decode()\n```\n\nThe `key.decode()` function converts from utf-8 to Python string type. So if you want string , you can include it below `generate_key()` function\n\nBefore you generate a crypotgraphic key via fernet, you need to install cryptography package.  \n\n```\n    pip install cryptography \n```\n\nDon't place  the above code inside `app.py` file.  You can run it on the console and later assign it to secret_key inside the `app.py`  file. \n\nNow let's register our blueprint in the `app. py`  file using the following code\n\n``` python\n    app.register_blueprint(blueprint, url_prefix=\"/login\")\n```\n\nBecause we will use RSS feeds to retrieve recent  articles, let’s create two keys and assign RSS feeds to them respectively in the `app.py` file\n\n``` python\n    RSS_feeds = {'BBC': 'http://feeds.bbci.co.uk/news/rss.xml',\n                 'CNN': 'http://rss.cnn.com/rss/edition.rss'}\n```\n\nAfterwards create a  view function in `app.py`  file to authenticate users with GitHub\n\n``` python\n    @app.route('/')\n    def news():\n      if not github.authorized: \n        return redirect(url_for(\"github.login\")    \n       account_info=github.get(\"/user\") \n      if account_info.ok: \n          account_info_json = account_info.json()\n        return redirect(url_for(\"news\", publication=\"bbc\"))\n```    \n\nThe above code will prompt the user to connect with their GitHub account if they haven't. \n\nAfter the user has connected with their GitHub account then the user can get access to news from BBC.  \n\nLet’s implement the code for a news web application based on Flask. Place the following code in the `app.py` file:    \n\n``` python\n    @app.route(\"/\u003cpublication\u003e\")\n    def news(publication=\"bbc\"):\n              feed=feedparser.parse(RSS_feeds[publication])\n              current_article = feed\\['entries'\\][0]\n              return render_template(\"home.html\", current_article=current_article) \n```\n   \nInside the `templates` sub-folder, place the following code in the `home.html` file.      \n\n``` html\n    \u003chtml\u003e\n            \u003chead\u003e\n                  \u003ctitle\u003eHeadlines\u003c/title\u003e\n            \u003c/head\u003e\n            \u003cbody\u003e \n    \n                  \u003ch1\u003eHeadlines\u003c/h1\u003e\n                  \u003cb\u003e\u003ca href=\"{{current_article.link}}\"\u003e{{current_article.title}}\u003c/a\u003e\u003c/b\u003e\u003cbr /\u003e\n                  \u003ci\u003e{{current_article.published}}\u003c/i\u003e \u003cbr /\u003e\n                  \u003cp\u003e{{current_article.summary}}\u003c/p\u003e \n                   \n             \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThe following content will be displayed to users after they have connected with their GitHub account.   \n\nBefore you run the app, you need to set the environmental variable `OAUTHLIB_INSECURE_TRANSPORT` to 1 as shown below. \n\nIt is necessary to do so if you want run the app locally. \n\n```\n    export OAUTHLIB_INSECURE_TRANSPORT=1 \n```\n\nThe above command disables HTTP requirement set  by OAuthLib. \n\nYou can now run the app by typing the following on your console \n\n```\n    python app.py\n```\n\nAfterwards navigate to `http://localhost:5000/` or `http://127.0.0.1:5000/` to authorize with GitHub.   \n\n\n## Conclusion\n\nThis tutorial shows how we can use Flask-Dance to implement OAuth in web application. Apart from allowing users to connect with their GitHub, Flask-Dance makes it possible for developers to add Twitter, Slack, Facebook  so that users without GitHub account can connect with their Facebook or Twitter account to access content .\n\nThe full source code for this can be seen on [GitHub](https://github.com/Rev0kz/FLASK-DANCE).","metaTitle":"Implement OAuth in a Flask app using Flask-Dance","metaDescription":"This tutorial provides a practical example app, using Flask-Dance to implement OAuth authentication in a Flask app. The app allows users to log in with GitHub and view a news feed."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Eh0neIijuMe6u8WUkigeo","type":"Entry","createdAt":"2018-11-19T21:11:07.272Z","updatedAt":"2020-06-19T11:00:49.074Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live comment feature with sentiment analysis using Flask and Vue","url":"flask-vue-comments","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"38Gip5IBCgiiy4AYeeyyqG","type":"Entry","createdAt":"2018-03-04T19:48:48.360Z","updatedAt":"2018-03-04T19:48:48.360Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Gideon Onwuka","url":"gideon-onwuka","email":"dongidomed@gmail.com","twitter":"https://twitter.com/gideon_onwuka","github":"https://github.com/dongido001","guestWriter":true}}],"products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-11-19","description":"This tutorial will guide you through building a comments feature for a website, using Flask and Vue.js. New comments will appear in realtime, and the application includes sentiment analysis, to measure the opinion of commenters.","prerequisite":"You will need Python 3.6+ and Flask installed on your machine.","content":"In this tutorial, we’ll see how we can get the overall feeling of our users after they might have read our post and added their comments. We’ll build a simple blog where users can comment. Then we process the comment to determine the percentages of people that find the post interesting and those who don't.\n\nAs technologies are advancing, the way we process data is also taking a huge turn around. Taking advantage of natural language processing, we can determine from a group of comments, how our users feel about our blog post.\n\nWe also don’t have to reload a page to see a new comment from a blog post. We can make comments visible in realtime to every user.\n\nWe’ll be using Channels, Vue.js and Flask to build the app.\n\nHere is a preview of what the final app will look like:\n\n![flask-comments-sentiment-demo](//images.ctfassets.net/1es3ne0caaid/5gkbkrLNgIkOsgOGmgwsUM/7b7e547c466433070e56ced75f8ac738/flask-comments-sentiment-demo.gif)\n\n## Prerequisite\n\nThis tutorial uses the following:\n\n- [Vue.js](https://vuejs.org/)\n- [Python 3.6+](https://www.python.org/)\n- [Flask](http://flask.pocoo.org/)\n\nYou should have some familiarity with Python development to follow along with this tutorial. If you are not familiar with Vue but still want to follow along,  you can go through the basics of Vue in the [documentation](https://vuejs.org/v2/guide/) to get you up to speed in a couple of minutes.\n\nBefore we start, let’s get your environment ready. Check that you have the appropriate installation and setup on your machine.\n\nOpen up a terminal on your machine and execute the below code:\n\n```\n    $ python --version\n```\n\nIf you have a Python 3.6+ installed on your machine, you will have a similar text printed out as `python 3.6.0`. If you got an output similar to “Command not found”, you need to install Python on your machine. Head over to Python’s official website to download and get it installed.\n\nIf you have gotten all that installed, let's proceed.\n\n## Creating a Pusher account\n\nWe'll use Pusher Channels to handle all realtime functionalities. Before we can start using Pusher Channels, we need to get our API key. We need an account to be able to get the API key.\n\nHead over to Pusher and [log](https://dashboard.pusher.com/accounts/sign_in) in to your account or create a [new account](https://dashboard.pusher.com/accounts/sign_up) if you don’t have one already. Once you are logged in, create a new app and then copy the app API keys.\n\n## Setting up the backend app\n\nLet’s create our backend app that will be responsible for handling all communication to Pusher Channels and getting the sentiment of a comment.\n\nCreate the following files and folder in a folder named `live-comment-sentiment` in any convenient location on your system:\n\n```\n    live-comment-sentiment\n      ├── .env\n      ├── .flaskenv\n      ├── app.py\n      ├── requirements.txt\n      ├── static\n      │   ├── custom.js\n      │   └── style.css\n      └── templates\n          └── index.html\n          └── base.html\n```\n\n### Creating a virtual environment\n\nIt’s a good idea to have an isolated environment when working with Python. [virtualenv](https://virtualenv.pypa.io/) is a tool to create an isolated Python environment. It creates a folder which contains all the necessary executables to use the packages that a Python project would need.\n\nFrom your command line, change your directory to the Flask project root folder, execute the below command:\n\n```\n    $ python3 -m venv env\n```\n\nOr:\n\n```\n    $ python -m venv env\n```\n\nThe command to use depends on which associates with your Python 3 installation.\n\nThen, activate the virtual environment:\n\n```\n    $ source env/bin/activate\n```\n\nIf you are using Windows, activate the virtualenv with the below command:\n\n```\n    \u003e \\path\\to\\env\\Scripts\\activate\n```\n\nThis is meant to be a full path to the activate script. Replace `\\path\\to` with your correct path name.\n\nNext, add the Flask configuration setting to the `.flaskenv` file:\n\n```\n    FLASK_APP=app.py\n    FLASK_ENV=development\n```\n\nThis will instruct Flask to use `app.py` as the main entry file and start up the project in development mode.\n\nNow, add your Pusher API keys to the `.env` file:\n\n```\n    PUSHER_APP_ID=app_id\n    PUSHER_APP_KEY=key\n    PUSHER_APP_SECRET=secret\n    PUSHER_APP_CLUSTER=cluster\n```\n\nMake sure to replace `app_id`, `key`, `secret` and `cluster` with your own Pusher keys which you have noted down earlier.\n\nNext, create a Flask instance by adding the below code to `app.py`:\n\n``` python\n    # app.py\n    \n    from flask import Flask, jsonify, render_template, request\n    from textblob import TextBlob\n    import pusher\n    import os\n    \n    app = Flask(__name__)\n    \n    @app.route('/')\n    def index():\n        return render_template('index.html')\n    \n    # run Flask app\n    if __name__ == \"__main__\":\n        app.run()\n```\n\nIn the code above, after we instantiate Flask using `app = Flask(__name__)`, we created a new route - `/` which renders an `index.html` file from the templates folder.\n\nNow, add the following python packages to the `requirements.txt` file:\n\n```\n    Flask==1.0.2\n    python-dotenv==0.8.2\n    pusher==2.0.1\n    textblob==0.15.1\n```\n\nThe packages we added:\n\n- [python-dotenv](https://github.com/theskumar/python-dotenv): this library will be used by Flask to load environment configurations files.\n- [pusher](https://github.com/pusher/pusher-http-python): this is the Pusher Python library that makes it easy to interact with its API.\n- [textblob](https://textblob.readthedocs.io/en/dev/): a Python library which provides a simple API for common natural language processing (NLP).\n\nNext, install the library by executing the below command:\n\n```\n    $ pip install -r requirements.txt\n```\n\nOnce the packages are done installing, start up Flask:\n\n```\n    $ flask run\n```\n\nIf there is no error, our Flask app will now be available on port 5000. If you visit http://localhost:5000, you will see a blank page. This is because the `templates/index.html` file is empty, which is ok for now.\n\n### Setting up TextBlob\n\nTo get the sentiment from comments, we’ll use the [TextBlob](https://textblob.readthedocs.io/en/dev/) Python library which provides a simple API for common natural language processing (NLP). We already have the library installed. What we’ll do now is install the necessary data that TextBlob will need.\n\nFrom your terminal, make sure you are in the project root folder. Also, make sure your virtualenv is activated. Then execute the below function.\n\n```\n    # Download NLTK corpora\n    $ python -m textblob.download_corpora lite\n```\n\nThis will download the necessary NLTK [corpora](https://textblob.readthedocs.io/en/dev/install.html) (trained models).\n\n### Initialize the Pusher Python library\n\nInitialize the Pusher Python library by adding the below code to `app.py`  just after the `app = Flask(__name__)` line:\n\n``` python\n    # app.py\n    \n    pusher = pusher.Pusher(\n        app_id=os.getenv('PUSHER_APP_ID'),\n        key=os.getenv('PUSHER_APP_KEY'),\n        secret=os.getenv('PUSHER_APP_SECRET'),\n        cluster=os.getenv('PUSHER_APP_CLUSTER'),\n        ssl=True)\n```\n\nNow we are fully set.\n\n## Setting up the frontend\n\nWe’ll create a simple page for adding comments. Since we won’t be building a full blog website, we won’t be saving the comments to a database.\n\n### Adding the base layout\n\nWe’ll use the template inheritance approach to build our views, which makes it possible to reuse the layouts instead of repeating some markup across pages. \n\nAdd the following markup to the `templates/base.html` file:\n\n``` html\n    \u003c!-- /templates/base.html  --\u003e\n    \n    \u003c!doctype html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n          \u003c!-- Required meta tags --\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003c!-- Bootstrap CSS --\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\"\u003e\n        \u003ctitle\u003eLive comment\u003c/title\u003e\n      \u003c/head\u003e\n      \u003cbody\u003e\n          \u003cdiv class=\"container\" id=\"app\"\u003e\n               {% block content %}  {% endblock %}\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"{{ url_for('static', filename='custom.js')}}\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThis is the base layout for our view. All other views will inherit from the base file.\n\nIn this file, we have added some libraries. This includes: \n\n- [Bootstrap](https://getbootstrap.com/)\n- Pusher JavaScript library\n- Vue.js\n\n### The blog page\n\nThis will serve as the landing page of the application. Add the following to the `templates/index.html` file:\n\n``` html\n    \u003c!-- /templates/index.html  --\u003e\n    \n    \n    {% extends 'base.html' %}\n    \n    {% block content %}\n    \u003cdiv class=\"grid-container\"\u003e\n        \u003cheader class=\"header text-center\"\u003e \n            \u003cimg src=\"https://cdn1.imggmi.com/uploads/2018/10/13/1d5cff977fd6e3aac498e581ef681a1a-full.png\"\u003e\n        \u003c/header\u003e\n        \u003cmain class=\"content\"\u003e         \n           \u003cdiv class=\"content-text\"\u003e\n              Our pioneering and unique technology is based on state-of-the-art \u003cbr/\u003e \n              machine learning and computer vision techniques. Combining deep neural \u003cbr/\u003e\n              networks and spectral graph theory with the computing... \u003cbr/\u003e\n            \u003c/div\u003e\n        \u003c/main\u003e\n        \u003csection class=\"mood\"\u003e\n            \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col text-center\"\u003e \n                    \u003cdiv class=\"mood-percentage\"\u003e[[ happy ]]%\u003c/div\u003e\n                    \u003cdiv\u003eHappy\u003c/div\u003e \n                \u003c/div\u003e\n                \u003cdiv class=\"col text-center\"\u003e\n                    \u003cdiv class=\"mood-percentage\"\u003e[[ neutral ]]%\u003c/div\u003e\n                    \u003cdiv\u003eNeutral\u003c/div\u003e \n                \u003c/div\u003e\n                \u003cdiv class=\"col text-center\"\u003e \n                    \u003cdiv class=\"mood-percentage\"\u003e[[ sad ]]%\u003c/div\u003e\n                    \u003cdiv\u003eSad\u003c/div\u003e \n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/section\u003e\n        \u003csection class=\"comment-section\"\u003e\n            \u003cdiv v-for=\"comment in comments\"\u003e\n               \u003ccomment \n                    :comment=\"comment\"\n                    v-bind:key=\"comment.id\"\n                \u003e\n                \u003c/comment\u003e       \n            \u003c/div\u003e\n        \u003c/section\u003e\n        \u003csection class=\"form-section\"\u003e\n            \u003cform class=\"form\" @submit.prevent=\"addComment\"\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                    \u003cinput\n                        type=\"text\" \n                        class=\"form-control\" \n                        v-model=\"username\"\n                        placeholder=\"Enter username\"\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                    \u003ctextarea \n                      class=\"form-control\" \n                      v-model=\"comment\" \n                      rows=\"3\"\u003e\u003c/textarea\u003e\n                \u003c/div\u003e\n                \u003cbutton type=\"submit\" class=\"btn btn-primary btn-block\"\u003eAdd comment\u003c/button\u003e\n            \u003c/form\u003e\n        \u003c/section\u003e\n    \u003c/div\u003e\n    {% endblock %}\n```\n\nIn the preceding code:\n\n- In the `\u003csection class=\"mood\"\u003e… \u003c/section\u003e`, we added three placeholders - [[ happy ]], [[ neutral ]] and [[ sad ]], which is the percentages of the moods of users who added comments. These placeholders will be replaced by their actual values when Vue takes over the page DOM ([mounted](https://vuejs.org/v2/api/#mounted)). \n\n      \n\n  \u003e Notice we are using `[[  ]]` instead of the normal Vue placeholders - `{{  }}`. This is because we are using [Jinja2](http://jinja.pocoo.org/) template that comes bundled with Flask to render our page. The Jinja2 uses `{{   }}` placeholder to hold variables that will be substituted to their real values and so do Vue by default. So to avoid conflicts, we will change Vue to use `[[  ]]` instead.\n\n\n\n- In the `\u003csection class=\"comment-section\"\u003e` section, we are rendering the comments to the page.\n- Next, is the `\u003csection class=\"form-section\"\u003e… \u003c/section\u003e`, where we added a form for adding new comments. Also in the inputs fields, we declare a [two-way data binding](https://vuejs.org/v2/guide/forms.html) using the v-model directive.\n- In the form section - `\u003cform class=\"form\" @submit.prevent=\"addComment\"\u003e…`, notice that we have the `@submit.prevent` directive. This will prevent the form from submitting normally when the user adds a new comment. Then we call the `addComment` function to add a comment. We don’t have the `addComment` function declared anywhere yet. We’ll do this when we initialize Vue.\n\nNow, add some styles to the page. Add the below styles to the `static/style.css` file:\n\n``` css\n    body {\n        width: 100%;\n        height: 100%;\n    }\n    .grid-container {\n        display: grid;\n        grid-template-rows: 250px auto auto 1fr;\n        grid-template-columns: repeat(3, 1fr);\n        grid-gap: 20px;\n        grid-template-areas:\n            '. header .'\n            'content content content'\n            'mood mood mood'\n            'comment-section comment-section comment-section'\n            'form-section form-section form-section';\n    }\n    .content {\n        grid-area: content;\n    }\n    .comment-section {\n        grid-area: comment-section;\n    }\n    .content-text {\n       font-style: oblique;\n       font-size: 27px;\n    }\n    .mood {\n        grid-area: mood;\n    }\n    .header {\n        grid-area: header;\n    }\n    .form-section {\n        grid-area: form-section;\n    }\n    .comment {\n        border: 1px solid rgb(240, 237, 237);\n        border-radius: 4px;\n        margin: 15px 0px 5px 60px;\n        font-family: monospace;\n    }\n    .comment-text {\n        padding-top: 10px;\n        font-size: 17px;\n    }\n    .form {\n        margin-top: 50px;\n    }\n    .mood-percentage {\n       border: 1px solid gray;\n       min-height: 50px;\n       padding-top: 10px;\n       font-size: 30px;\n       font-weight: bolder;\n    }\n```\n\nNow we have all our user interface ready. If you visit the app URL again, you will see a similar page as below:\n\n![flask-comments-sentiment-interface](//images.ctfassets.net/1es3ne0caaid/5ZAOxZyWmkC440I20kGeic/59156808839dade15400693ffaa7bc8b/flask-comments-sentiment-interface.png)\n\n## Initializing Channels\n\nNow let’s initialize Channels. Since we have added the Pusher JavaScript library already, we’ll go ahead and initialize it.\n\nAdd the below code to the `static/custom.js` file:\n\n``` javascript\n    // Initiatilze Pusher JavaScript library\n    var pusher = new Pusher('\u003cPUSHER-APP-KEY\u003e', {\n        cluster: '\u003cCLUSTER\u003e',\n        forceTLS: true\n    });\n```\n\nReplace `\u003cPUSHER-APP-KEY\u003e` and `\u003cCLUSTER\u003e` with your correct Pusher app details you noted down earlier.\n\n## Creating the comment component\n\nIf you view the `/templates/index.html` file, in the `\u003csection class=\"comment-section\"\u003e` section, you will notice we are calling the `\u003ccomment\u003e` component which we have not created yet. We need to create this component. Also, notice inside the file, we are calling the v-for (`v-for=\"comment in comments\"`) directive to render the comments.\n\nLet’s create the component. Add the below code to `static/custom.js`:\n\n``` javascript\n    Vue.component('comment', {\n        props: ['comment'],\n        template: `\n            \u003cdiv class=\"row comment\"\u003e \n                \u003cdiv class=\"col-md-2\"\u003e\n                    \u003cimg \n                       src=\"https://cdn1.imggmi.com/uploads/2018/10/13/1d5cff977fd6e3aac498e581ef681a1a-full.png\" \n                       class=\"img-responsive\" \n                       width=\"90\" \n                       height=\"90\"\n                    \u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-10 comment-text text-left\" v-html=\"comment.comment\"\u003e             \u003c/div\u003e\n            \u003c/div\u003e\n        `\n    })\n```\n\n## Initialize Vue\n\nNow let’s initialize Vue to take over the DOM manipulation. \n\nAdd the below code to the `static/custom.js` file:\n\n``` javascript\n    var app = new Vue({\n        el: '#app',\n        delimiters: ['[[', ']]'],\n        data: {\n          username: '',\n          comment: '',\n          comments: [],\n          happy: 0,\n          sad: 0,\n          neutral: 0,\n          socket_id: \"\"\n        },\n        methods: {},\n        created () {},\n    })\n```\n\nIn the preceding code: \n\n- We initialize Vue using `var app = new Vue(…` passing to it a key-value object.\n- Next, we tell Vue the part on the page to watch using `el:` `'``#app'`. The `#app` is the ID we have declared in the `/templates/base.html`.\n- Next, using `delimiters: ['[[', ']]'],`, we change the default Vue delimiter from `{{ }}` to `[[ ]]` so that it does not interfere with that of Jinja2.\n- Then we defined some states using `data: {….`.\n- Finally, we have `methods: {},` and `created () {},`. We’ll add all the function we’ll declare inside the  ``methods: {}`` block and then the `created () {}` is for adding code that will execute once Vue instance is [created](https://vuejs.org/v2/guide/instance.html#Instance-Lifecycle-Hooks).\n\nNext, add a function to update the sentiment score. Add the below code to the `methods: {}` block of the `static/custom.js` file:\n\n``` javascript\n            updateSentiments () {\n                // Initialize the mood to 0\n                let [happy, neutral, sad] = [0, 0, 0];\n                \n                // loop through all comments, then get the total of each mood\n                for (comment of this.comments) {\n                   if (comment.sentiment \u003e 0.4) {\n                      happy++;\n                   } else if (comment.sentiment \u003c 0) {\n                      sad++;\n                   } else {\n                       neutral++;\n                   }\n                }\n                \n                const total_comments = this.comments.length;\n                \n                // Get the percentage of each mood\n                this.sad = ((sad/total_comments) * 100).toFixed();\n                this.happy = ((happy/total_comments) * 100).toFixed();\n                this.neutral = ((neutral/total_comments) * 100).toFixed()\n                \n                // Return an object of the mood values\n                return {happy, neutral, sad}\n            },\n```\n\nIn the code above, we created a function that will loop through all the comments to get the number of each mood that appeared. Then we get the percentage of each mood then return their corresponding values.\n\nNext, add a function to add a new comment. Add the below code to the methods: {} block right after the code you added above:\n\n``` javascript\n            addComment () {\n               \n               fetch(\"/add_comment\", {\n                    method: \"post\",\n                    headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        id: this.comments.length,\n                        username: this.username,\n                        comment: this.comment,\n                        socket_id: this.socket_id\n                    })\n                })\n                .then( response =\u003e response.json() )\n                .then( data =\u003e {\n                    // Add the new comment to the comments state data\n                    this.comments.push({\n                        id: data.id,\n                        username: data.username,\n                        comment: data.comment,\n                        sentiment: data.sentiment\n                    })\n                    \n                    // Update the sentiment score\n                    this.updateSentiments();\n                 })\n                 \n               this.username = \"\";\n               this.comment = \"\";\n            },\n```\n\nHere, we created a function that makes a [request](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) to the `/add_comment` route to get the sentiment of a comment. Once we receive a response, we add the comment to the comments state. Then we call `this.updateSentiments()` to update the sentiment percentage. This function will be called each time a user wants to add a new comment.\n\nNext, let’s make comments visible to others in realtime. Add the below code to the `created () {}` block in the static/custom.js:\n\n``` javascript\n            // Set the socket ID\n            pusher.connection.bind('connected', () =\u003e {\n                this.socket_id = pusher.connection.socket_id;\n            });\n            \n            // Subscribe to the live-comments channel\n            var channel = pusher.subscribe('live-comments');\n            \n            // Bind the subscribed channel (live-comments) to the new-comment event\n            channel.bind('new-comment', (data) =\u003e {\n               this.comments.push(data);\n               \n               // Update the sentiment score\n               this.updateSentiments();\n            });\n```\n\n## Get sentiments from comments and make comments realtime\n\nNow, let’s add a function to get the sentiment of a message and then trigger a `new-comment` event whenever a user adds a comment. Add the below code to `app.py`\n\n``` python\n    # ./api/app.py\n    \n    @app.route('/add_comment', methods=[\"POST\"])\n    def add_comment():\n        # Extract the request data\n        request_data = request.get_json()\n        id = request_data.get('id', '')\n        username = request_data.get('username', '')\n        comment = request_data.get('comment', '')\n        socket_id = request_data.get('socket_id', '')\n        \n        # Get the sentiment of a comment\n        text = TextBlob(comment)\n        sentiment =  text.polarity\n        \n        comment_data = {\n            \"id\": id,\n            \"username\": username,\n            \"comment\": comment,\n            \"sentiment\": sentiment,\n        }\n        \n        #  Trigger an event to Pusher\n        pusher.trigger(\n            \"live-comments\", 'new-comment', comment_data, socket_id\n        )\n        \n        return jsonify(comment_data)\n```\n\nThe sentiment property returns a tuple of the form (polarity, subjectivity) where polarity ranges from -1.0 to 1.0 and subjectivity ranges from 0.0 to 1.0. We will only use the polarity property.\n\nIn the `pusher.trigger(…`, method,  we are passing the `socket_id` so that the user triggering the event won't get back the data sent.\n\n## Testing the app\n\nCongrats! Now we have our live comments with sentiments. To test the app, open the app in your browser on two or more different tabs, then add comments and see them appear in realtime on other tabs.\n\nHere is some sample comment you can try out:\n\n\n- The post is terrible! - Sad (Negative)\n- I love the way this is going - Happy (Positive)\n- This is amazingly simple to use. What great fun! - Happy (Positive)\n\nIf you are getting an error or nothing is working. Stop the server (Press CTRL+C) and then restart it (`$ flask run`). \n\n\n## Conclusion\n\nIn this tutorial, we built a live comment with sentiment analysis. We used Vue for DOM manipulation, Flask for the server side and Channels for realtime functionality. We used the [TextBlob](https://textblob.readthedocs.io/en/dev/quickstart.html#sentiment-analysis) python library to detect mood from text.","metaTitle":"Build a live comment feature using Flask and Vue","metaDescription":"This tutorial will guide you through building a comments feature for a website, using Flask and Vue.js. New comments will appear in realtime, and the application includes sentiment analysis, to measure the opinion of commenters."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"7Fx73ZBiIEaEi0qImoMiS","type":"Entry","createdAt":"2018-11-09T12:54:30.074Z","updatedAt":"2019-01-02T15:41:08.578Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app in Flask and Vue with sentiment analysis - Part 1: Setting up the project","url":"chat-flask-vue-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"38Gip5IBCgiiy4AYeeyyqG","type":"Entry","createdAt":"2018-03-04T19:48:48.360Z","updatedAt":"2018-03-04T19:48:48.360Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Gideon Onwuka","url":"gideon-onwuka","email":"dongidomed@gmail.com","twitter":"https://twitter.com/gideon_onwuka","github":"https://github.com/dongido001","guestWriter":true}}],"projectRepo":"https://github.com/dongido001/pusher-chat-sentiment-analysis/tree/part-1","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-09-09","description":"This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each other in realtime, see when other users are online, and be notified of new messages. In part one, install dependencies and set up the project.","prerequisite":"You will need Node 8.9+ and Python 3.6+ installed on your machine.","content":"In this tutorial, I will walk you through building a one-to-one private chat with sentiment analysis using Pusher Channels, Vue.js and Flask. You can get the code for the complete app on [GitHub](https://github.com/dongido001/pusher-chat-sentiment-analysis/tree/part-1).\n\nMachine learning is still the rave at the moment with more and more companies using it to solve complex problems in the communication, entertainment, health sectors and so on, proving that it has come to stay. Let’s see how we can use it to analyze text and determine the mood of an individual from their chat message.\n\nVue.js is a frontend framework for building user interfaces. It handles DOM manipulations seamlessly. We’ll use it to build the app user interface while Flask handles the server side implementation.\n\nHere is a preview of the final app will be build:\n\n![flask-vue-sentiment-demo-1](//images.ctfassets.net/1es3ne0caaid/wf0SPv7ftAg4EgwESSIC8/6ab11f74eba32f9e9edc93373a68f12e/flask-vue-sentiment-demo-1.gif)\n\nThis tutorial is a four-part series:\n\n- Part one: Setting up the project\n- Part two: Create the chat interface, database design, login and registration endpoints\n- Part three: Realtime chat with sentiment analysis\n- Part four: Adding a “who’s online” feature\n\n## Prerequisites\n\nThis tutorial uses the following:\n\n- [JavaScript](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics)\n- [Vue.js](https://vuejs.org/)\n- [Python 3.6+](https://www.python.org/)\n- [Node.js](https://nodejs.org/) (version 8.9 or above)\n\nYou should have some familiarity with Python development to follow along with this tutorial. If you are not familiar with Vue but still want to follow along,  you can go through the basics of Vue in the [documentation](https://vuejs.org/v2/guide/) to get you up to speed in a couple of minutes.\n\nBefore we start, let’s get your environment ready. Check that you have the appropriate installation and setup on your machine.\n\nOpen up a terminal on your machine and execute the below code:\n\n```\n    $ python --version\n```\n\nIf you have a Python 3.6+ installed on your machine, you will have a similar text printed out as  `python 3.6.0`. If you got an output similar to “Command not found”, you need to install Python on your machine. Head over to [Python’s](https://www.python.org/downloads/) official website to download and get it installed.\n\n[Vue CLI](https://cli.vuejs.org/guide/installation.html) requires a [Node.js](https://nodejs.org/) version of 8.9 or above. To check that you have Node installed, enter the following command:\n\n```\n    $ node --version\n```\n\nIf you have Node.js installed on your machine, you will get an output showing the version of Node.js you have installed otherwise an output similar to “Command not found” will be displayed on your terminal. If the latter is the case, you need to install Node.js. Head over to [Node.js](https://nodejs.org/) and install the latest version.  \n\nIf you have gotten all that installed, let's proceed.\n\nOur Vue app will communicate to our backend via an API call which we are going to build using [Flask](http://flask.pocoo.org/).\n\n## Creating a Pusher account\n\nWe'll use Pusher Channels to handle all realtime functionalities. Before we can start using Pusher Channels, we need to get our API key. We need an account to be able to get the API key.\n\nHead over to Pusher and [log in](https://dashboard.pusher.com/accounts/sign_in) to your account or create a [new account](https://dashboard.pusher.com/accounts/sign_up) if you don’t have one already. Once you are logged in, create a new app and then copy the app API keys.\n\n## Setting up the frontend app\n\nVue provides a [CLI](https://cli.vuejs.org/guide/creating-a-project.html#installation) for scaffolding a new Vue project. First, you'll need to install the Vue CLI globally on your system (if you don't have it installed already). After that, we’ll create a new Vue project with the CLI commands.\n\nCreate a new Vue project by running the following commands in any convenient location on your system:\n\n```\n    # Install Vue CLI globally on your system\n    $ npm install -g @vue/cli\n    \n    # Create a new Vue project (In the prompt that appears, press enter to select the default preset.)\n    $ vue create pusher-chat-sentiment-analysis\n    \n    # Change your directory to the project directory\n    $ cd pusher-chat-sentiment-analysis\n    \n    # Run the app!\n    $ npm run serve\n```\n\nIf the commands were successful, you will get an output similar below:\n\n![flask-vue-sentiment-setup-commands](//images.ctfassets.net/1es3ne0caaid/572kv6davSKwusMCguqqA4/221cab40da58191cc10a8ea702d081a9/flask-vue-sentiment-setup-commands.png)\n\nAccessing the [URL](http://localhost:8080) displayed on your terminal will take you to a Vue default page.\n\n\n## Setting up the backend app\n\nNext, let’s create our back-end app that will be responsible for handling all communication to Pusher Channels and the Database operations.\n\nCreate the following files and folder in `pusher-chat-sentiment-analysis`:\n\n```\n    pusher-chat-sentiment-analysis\n      ├── api\n        ├── .env\n        ├── .flaskenv\n        ├── app.py\n        ├── database.py\n        ├── models.py\n        ├── requirements.txt\n```\n\nIf you prefer the command line, you can use the below command on Mac or Linux to create the files:\n\n```\n    # Create folders and files\n    $ mkdir api \u0026\u0026 cd api \u0026\u0026 touch .env .flaskenv app.py database.py models.py requirements.txt\n```\n\n### Creating a virtual environment\n\nIt’s a good idea to have an isolated environment when working with Python. [virtualenv](https://virtualenv.pypa.io/) is a tool to create an isolated Python environment. It creates a folder which contains all the necessary executables to use the packages that a Python project would need.\n\nFrom your command line, change your directory to the Flask project root folder - `api` - then execute the below command:\n\n```\n    $ python3 -m venv env\n```\n\nOr:\n\n```\n    $ python -m venv env\n```\n\nThe command to use depends on which associates with your Python 3 installation.\n\nThen, activate the virtual environment:\n\n```\n    $ source env/bin/activate\n```\n\nIf you are using Windows, activate the virtualenv with the below command:\n\n```\n    \u003e \\path\\to\\env\\Scripts\\activate\n```\n\nThis is meant to be a full path to the activate script. Replace `\\path\\to` with your correct path name.\n\nNext, add the Flask configuration setting to the `api/.flaskenv` file:\n\n```\n    FLASK_APP=app.py\n    FLASK_ENV=development\n```\n\nThis will instruct Flask to use `app.py` as the main entry file and start up the project in development mode.\n\nNow, add your Pusher API keys to the `.env` file:\n\n```\n    PUSHER_APP_ID=app_id\n    PUSHER_KEY=key\n    PUSHER_SECRET=secret\n    PUSHER_CLUSTER=cluster\n```\n\nMake sure to replace `app_id`, `key`, `secret` and `cluster` with your own Pusher keys which you have noted down earlier.\n\nNext, create a Flask instance by adding the below code to `api/app.py`:\n\n``` python\n    # app.py\n    \n    from flask import Flask, request, jsonify, render_template, redirect\n    import os\n    import pusher\n    \n    app = Flask(__name__)\n    \n    @app.route('/')\n    def index():\n        return jsonify(\"Pong!\")\n    \n    # run Flask app\n    if __name__ == \"__main__\":\n        app.run()\n```\n\nNow, add the following python packages to the `api/requirements.txt` file:\n\n```\n    Flask==1.0.2\n    python-dotenv==0.8.2\n    pusher==2.0.1\n    SQLAlchemy==1.2.0\n    Flask-SQLAlchemy==2.1\n    Flask-JWT-Extended==3.13.0\n```\n\nThe packages we added:\n\n- [python-dotenv](https://github.com/theskumar/python-dotenv): this library will be used by Flask to load environment configurations files\n- [pusher](https://github.com/pusher/pusher-http-python): this is the Pusher Python library that makes it easy to interact with its API\n- [Flask](http://flask.pocoo.org/): the Python framework we are using to build the app\n- [SQLALchemy](https://www.sqlalchemy.org/): a Python SQL toolkit and Object Relational Mapper that gives application developers the full power and flexibility of SQL\n- [Flask-JWT-Extended](https://flask-jwt-extended.readthedocs.io/en/latest/basic_usage.html): package for adding [JWT](https://jwt.io/) authentication\n\nNow install the library by executing the below command:\n\n```\n    $ pip install -r requirements.txt\n```\n\nOnce the packages are done installing, start-up Flask:\n\n```\n    $ flask run\n```\n\nIf there is no error, our Flask app will now be available on port 5000. If you visit http://localhost:5000, you will get a text: “Pong!”\n\n## Setting up a proxy\n\nSince we are going to run the Vue and Flask app side by side, we will set up a proxy to enable us access Flask endpoints on the Vue app as if they live in the Vue app. This way we don’t have to include the full URL of our Flask app nor the port. All we’ll do is use the endpoint for example `/api/users` without having to add full app URL as http://localhost:5050/api/users. This is done by [proxying](https://vuejs-templates.github.io/webpack/proxy.html). \n\nWe’ll set this up using the Vue config file. Create the config file in the root directory of the `pusher-chat-sentiment-analysis` root folder:\n\n```\n    $ touch vue.config.js\n```\n\nThen add the below config to the file:\n\n``` javascript\n    // vue.config.js\n    \n    module.exports = {\n      devServer: {\n        proxy: {\n          \"/api\": {\n            target: \"http://localhost:5000\",\n            ws: false,\n            changeOrigin: true\n          }\n        }\n      }\n    };\n```\n\nNow any URL we call on the Vue app that has a prefix of “/api” will be proxied for us to our Flask app which is running on http://localhost:5000.\n\n## Install the Pusher JavaScript library and axios\n\nWe’ll use the [axios](https://github.com/axios/axios) library for making HTTP requests. Add the axios library by executing the below command in the `pusher-chat-sentiment-analysis` root folder:\n\n```\n    $ vue add axios\n```\n\nAdd the [Pusher JavaScript](https://github.com/pusher/pusher-js) library:\n\n```\n    $ npm install pusher-js\n```\n\nOur project is all set up now. The Vue app lives in the `pusher-chat-sentiment-analysis` root folder while the Flask app lives in the `api` subfolder.\n\n## Set up the Vue environment config\n\nLet’s keep things in order so that we don’t have to add our Pusher key to our code directly. With Vue [environment](https://cli.vuejs.org/guide/mode-and-env.html) setup, we can set our Pusher key and easily access it. \n\nCreate a `.env` file in the root folder of the project:\n\n```\n    $ touch .env\n```\n\nThen add your Pusher key:\n\n```\n    VUE_APP_PUSHER_KEY=\u003cPUSHER_APP_KEY\u003e\n    VUE_APP_PUSHER_CLUSTER=\u003cPUSHER_APP_CLUSTER\u003e\n```\n\nMake sure to replace `\u003cPUSHER_APP_KEY\u003e` and `\u003cPUSHER_APP_CLUSTER\u003e` with your actual Pusher App credentials.\n\n## Conclusion\n\nIn this tutorial, we have been able to set up our Vue app to communicate with our Flask application. We also installed the Python and JavaScript libraries that we’ll be using in the app. \n\nIn the next part of this tutorial series, we will design the database for the chat app, build the chat interface and also implement login and registration endpoint.","metaTitle":"Build a chat app in Flask and Vue - Part 1","metaDescription":"This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each other in realtime, see when other users are online, and be notified of new messages. In part one, install dependencies and set up the project."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"ego8bPzHfqiAQEQCwEo8S","type":"Entry","createdAt":"2018-11-12T17:11:35.800Z","updatedAt":"2019-01-02T15:41:36.362Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app in Flask and Vue with sentiment analysis - Part 2: Building the chat interface","url":"chat-flask-vue-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"38Gip5IBCgiiy4AYeeyyqG","type":"Entry","createdAt":"2018-03-04T19:48:48.360Z","updatedAt":"2018-03-04T19:48:48.360Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Gideon Onwuka","url":"gideon-onwuka","email":"dongidomed@gmail.com","twitter":"https://twitter.com/gideon_onwuka","github":"https://github.com/dongido001","guestWriter":true}}],"projectRepo":"https://github.com/dongido001/pusher-chat-sentiment-analysis/tree/part-2","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-09-08","description":"This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each other in realtime, see when other users are online, and be notified of new messages. In part two, build the chat interface.","prerequisite":"You will need Node 8.9+ and Python 3.6+ installed on your machine.","content":"In this part, we are going to design/create the database, build the chat interface and also implement the login and registration endpoints. The code is available on [GitHub](https://github.com/dongido001/pusher-chat-sentiment-analysis/tree/part-2).\n\nThis is the second part of this tutorial series. In the [first part](https://pusher.com/tutorials/chat-flask-vue-part-1), we set up our working environment and also created the project. We were able to communicate with Flask from the Vue app. \n\n\n## Creating the chat interface\n\nVue enables us to build reusable components which make up our app user interface. We’ll split the app UI into smaller components so we can build them separately:\n\n![flask-vue-sentiment-ui](//images.ctfassets.net/1es3ne0caaid/1AH5nwgf0sOI86umMgYCcq/e2b418338284ffb0afd357f1f081bfdf/flask-vue-sentiment-ui.png)\n\nIn the image above we have:\n\n\n- The area with the red border is our base component which will house other components. This is the entire app component area that Vue creates by default. The file is located in  `src/App.vue`.\n- [1] - `Users` component. This component will be responsible for listing all our registered users.\n- [2] - `Messages` component. This component renders messages.\n- [3] - `MessageInput` component. This is the input form for sending messages.\n- [4] - `NavBar` component. This is the navigation bar at the top of the app.\n\nIf you go through the Vue app in the project root folder, you will see a couple of files already created.\n\nSince we are building a one-to-one private chat, we need a way to uniquely identify every user of our app. We’ll do so using their username. This means they have to log in to use the app.  Once they are logged in, they’d be able to see the chat interface above. \n\nWe’ll also create a  `Login` component which will build up the login page. \n\nBefore we start building these components, let's add Bootstrap-vue to speed up the design process. Bootstrap-vue project already structures our normal [Bootstrap](https://getbootstrap.com/) into components which will be easy for us. You can read more on the documentation [here](https://bootstrap-vue.js.org/).\n\n### Adding Bootstrap-vue\n\nAdd bootstrap-vue using Vue command from the `one-to-one` root folder:\n\n```\n    $ vue add bootstrap-vue\n```\n\n```\n    📦  Installing vue-cli-plugin-bootstrap-vue...\n    \n    + vue-cli-plugin-bootstrap-vue@0.1.0\n    added 1 package from 1 contributor and audited 13896 packages in 71.714s\n    found 0 vulnerabilities\n    \n    ✔  Successfully installed plugin: vue-cli-plugin-bootstrap-vue\n    \n    ? Use babel/polyfill? No\n    \n    🚀  Invoking generator for vue-cli-plugin-bootstrap-vue...\n    📦  Installing additional dependencies...\n```\n\nVue will handle all the configuration settings for us. If the command ran successfully, you will notice a new folder named plugins in `src` folder. In this folder,  you will also find a file named `bootstrap-vue.js` that imports the Bootstrap files.\n\n### App.vue component\n\nAs mentioned earlier, the `src/App.vue` file is the main entry components housing all other components in the app. This means we’re going to import every other component to this file.\n\nAlso, we are using the [single file component structure](https://vuejs.org/v2/guide/single-file-components.html) approach to create our components, which have three sections:\n\n- `\u003ctemplate\u003e` section. This section holds all markup, basically our HTML markup.\n- `\u003cscript\u003e` section. This is where our JavaScript code resides.\n- `\u003cstyle\u003e` section. For adding styles such as CSS.\n\nA component file looks like this:\n\n``` html\n    \u003ctemplate\u003e\n      \u003cdiv\u003e\n          Some HTML markup\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n      console.log(\"Some JavaScript code\");\n    \u003c/script\u003e\n    \n    \u003cstyle\u003e\n     /* Styles */\n    .style {\n      color: lime;\n    }\n    \u003c/style\u003e\n```\n\nNow, replace the content in the `\u003ctemplate\u003e` section of the `src/App.vue` file with the below markup:\n\n``` html\n    \u003ctemplate\u003e\n      \u003cdiv id=\"app\"\u003e\n        \u003cLogin /\u003e\n        \u003cb-container\u003e\n          \u003cNavBar :logged_user=\"logged_user_username\" /\u003e\n          \u003cb-row class=\"main-area\"\u003e\n            \u003cb-col cols=\"4\" class=\"users\"\u003e\n              \u003cUsers /\u003e\n            \u003c/b-col\u003e\n            \u003cb-col cols=\"8\" class=\"messages-area\"\u003e\n              \u003cdiv class=\"messages-main\"\u003e\n                \u003cdiv \n                  v-if=\"!current_chat_channel\" \n                  class=\"select-chat text-center\"\n                \u003e\n                  Select a user to start chatting... \n                \u003c/div\u003e\n                \u003cMessages \n                  v-else \n                  :active_chat=\"active_chat_id\" \n                  :messages=\"messages[current_chat_channel]\"\n                /\u003e \n              \u003c/div\u003e\n              \u003cMessageInput /\u003e\n            \u003c/b-col\u003e\n          \u003c/b-row\u003e\n        \u003c/b-container\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nThis is our whole chat interface we have defined with some HTML, the bootstrap-vue components and our app components, which we have broken down in the image above earlier. \n\nWe’re yet to create the files for our components, let’s do so now. Create the below files in the `src/components/` folder:\n\n- Login.vue\n- NavBar.vue\n- Users.vue\n- MessageInput.vue\n- Messages.vue\n\nNext, import and register the components. Replace the content in the `\u003cscript\u003e` section in `src/App.vue` file with the below code:\n\n``` javascript\n    \u003cscript\u003e\n    import MessageInput from \"./components/MessageInput.vue\";\n    import Messages from \"./components/Messages.vue\";\n    import NavBar from \"./components/NavBar.vue\";\n    import Login from \"./components/Login.vue\";\n    import Users from \"./components/Users.vue\";\n    import Pusher from \"pusher-js\";\n    \n    // Declare pusher variable so it's global to this file.\n    let pusher;\n    \n    export default {\n      name: \"app\",\n      components: {\n        MessageInput,\n        NavBar,\n        Messages,\n        Users,\n        Login\n      },\n      data: function() {},\n      methods: {},\n    };\n    \u003c/script\u003e\n```\n\nWhen you import a component, you need to let Vue know of the component, which is what we did in the `components: {` block. We also imported the Pusher JavaScript library, which we are going to use to communicate with Pusher from our client. \n\nNext, add some styling. Update the styles in the `\u003cstyle\u003e` section with the below code in `src/App.vue`:\n\n``` css\n    \u003cstyle\u003e\n    .messages-main {\n      overflow-y: scroll;\n      height: 90%;\n    }\n    .users {\n      padding: 0px !important;\n      border: 1px solid gray;\n    }\n    .no-margin {\n      margin: 0px;\n    }\n    .messages-area {\n      border: 1px solid gray;\n      padding: 0px !important;\n      max-height: calc(100vh - 4em) !important;\n    }\n    .input-message {\n      height: 40px;\n    }\n    .active {\n      background: #17a2b8 !important;\n      border: #17a2b8 !important;\n    }\n    .select-chat {\n      margin-top: 35vh;\n      padding: 8px;\n    }\n    .main-area {\n      margin: 0px;\n      min-height: calc(100vh - 5em) !important;\n    }\n    .logged_user {\n      color: white;\n    }\n    \u003c/style\u003e\n```\n\nNow load up the Vue app in your [browser](http://localhost:8080) again to see what we have. You should notice the page is almost empty but without any error:\n\n![flask-vue-sentiment-demo-2](//images.ctfassets.net/1es3ne0caaid/1BRximPRuMwKO6WYcs8cAe/e9f1801e42a794d440943263b73679f8/flask-vue-sentiment-demo-2.png)\n\nThat's a good sign 🙂.\n\nThe components we have created are all empty. The next thing we will do is to build up the components and then observe the chat interface come to life as we build along.\n\nYou can leave the page open on your browser and observe the changes to the page when we update the component files.\n\n### Login.vue\n\nAdd the below code to `src/components/Login.vue`:\n\n``` html\n    \u003ctemplate\u003e\n        \u003cdiv class=\"login\"\u003e\n          \u003cdiv v-if=\"proccessing\" class=\"text-center\"\u003e Please wait... \u003c/div\u003e\n          \u003cdiv v-if=\"message\" class=\"text-center\"\u003e {{message}} \u003c/div\u003e\n          \n          \u003cb-form-input\n            v-model=\"username\"\n            type=\"text\"\n            class=\"input-form\"\n            placeholder=\"Username\"\u003e\n          \u003c/b-form-input\u003e\n          \n          \u003cb-form-input\n            v-model=\"password\"\n            class=\"input-form\"\n            type=\"password\"\n            placeholder=\"Password\"\u003e\n          \u003c/b-form-input\u003e\n          \n          \u003cb-button \n            v-on:click=\"login\" \n            variant=\"primary\" \n            class=\"btn-block\"\n          \u003e\n          Log me in\n         \u003c/b-button\u003e\n         \n        \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    export default {\n      name: \"Login\",\n      data() {\n        return {\n          username: \"\",\n          password: \"\",\n          proccessing: false,\n          message: \"\"\n        };\n      },\n    };\n    \u003c/script\u003e\n    \n    \u003cstyle scoped\u003e\n    .login {\n      width: 500px;\n      border: 1px solid #cccccc;\n      background-color: #ffffff;\n      margin: auto;\n      margin-top: 200px;\n      padding: 20px;\n    }\n    .input-form {\n      margin-bottom: 9px;\n    }\n    \u003c/style\u003e\n```\n\nHere we added two input fields: **username** and **password** and a button to submit the form. Then we [bind](https://vuejs.org/v2/guide/forms.html) the input fields to our data. In the `\u003cscript\u003e` section, we exported an object defining data for the component.\n\n### NavBar.vue\n\nNext, add the content for the NavBar component to `src/components/NavBar.vue`:\n\n``` html\n    \u003ctemplate\u003e\n        \u003cb-navbar toggleable=\"md\" type=\"dark\" variant=\"info\" class=\"nav-bar\"\u003e\n            \u003cb-navbar-toggle target=\"nav_collapse\"\u003e\u003c/b-navbar-toggle\u003e\n            \u003cb-navbar-brand href=\"#\"\u003eChitChat\u003c/b-navbar-brand\u003e\n            \u003cb-collapse is-nav id=\"nav_collapse\"\u003e\n                \u003cb-navbar-nav class=\"ml-auto logged_user\" \u003e\n                    Welcome back {{logged_user}}\n                \u003c/b-navbar-nav\u003e\n            \u003c/b-collapse\u003e\n        \u003c/b-navbar\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    export default {\n      name: \"NavBar\",\n      props: {\n        logged_user: String\n      }\n    };\n    \u003c/script\u003e\n    \n    \u003cstyle scoped\u003e\n    .nav-bar {\n      border-bottom: 1px solid #17a2b8;\n    }\n    \u003c/style\u003e\n```\n\n### Users.vue\n\nAdd the below code to `src/components/Users.vue` for the Users component:\n\n``` html\n    \u003ctemplate\u003e\n      \u003cdiv style=\"margin-top: 0px;\"\u003e\n        \u003cdiv v-for=\"(user, id) in users\" v-bind:key=\"id\"\u003e\n          \u003cdiv\n            v-bind:class=\"[activeUser == user.id ? 'user active' : 'user']\"\n            v-on:click=\"chat(user.id)\"\n          \u003e\n            {{user.userName}}\n            \u003cspan v-if=\"user.has_new_message\" class=\"has_new_message\"\u003eNew message\u003c/span\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \u003cscript\u003e\n    export default {\n      name: \"Users\",\n      props: {\n        users: Array\n      },\n      data() {\n        return {\n          activeUser: null\n        };\n      },\n      methods: {\n        chat: function(id) {\n          this.activeUser = id;\n          this.$emit(\"chat\", id);\n        }\n      }\n    };\n    \u003c/script\u003e\n    \u003cstyle scoped\u003e\n    .user {\n      margin: 0px !important;\n      padding: 10px 4px 10px 8px;\n      border-bottom: 1px solid gray;\n    }\n    .active {\n      background: #17a2b8;\n      color: white;\n    }\n    .has_new_message {\n      background-color: #17a2b8;\n      border-radius: 4px;\n      display: inline-block;\n      color: white;\n      margin-bottom: -4px;\n      font-size: 10px;\n      margin: 4px;\n      padding: 3px;\n      font-weight: bolder;\n    }\n    \u003c/style\u003e\n```\n\nNotice the v-for [directive](https://vuejs.org/v2/guide/list.html) we are using to render our users. The `users` array will be passed from the `src/App.vue` component as [property](https://vuejs.org/v2/guide/components-props.html). \n\nWe are also using the `v-on` (`v-on:click=\"chat(user.id)\"`) [directive](https://vuejs.org/v2/guide/events.html) to listen for click events when a user is clicked. If a user is clicked, we then call the chat function we have defined in the methods property. \n\nAlso, in the chat function, we are [emitting](https://vuejs.org/v2/api/#vm-emit) an event to `src/App.vue` so that the chat for that user can be initialized.\n\nAlso, `\u003cspan v-if=\"user.has_new_message\" class=\"has_new_message\"` will display \nthe text: “New message” on the users tab whenever they get a message from a user they are not currently chatting with.\n\n### Messages.vue\n\nAdd the below code to `src/components/Messages.vue` for the Messages component:\n\n``` html\n    \u003ctemplate\u003e\n       \u003cdiv\u003e\n        \u003cdiv v-for=\"(message, id) in messages\" v-bind:key=\"id\"\u003e \n            \u003cdiv class=\"chat-message col-md-5\" \n              v-bind:class=\"[(message.from_user == active_chat) ? 'to-message' : 'from-message offset-md-7']\"\u003e\n              {{message.message}}\n            \u003c/div\u003e \n        \u003c/div\u003e\n       \u003c/div\u003e\n    \u003c/template\u003e\n    \u003cscript\u003e\n    export default {\n      name: \"Messages\",\n      props: {\n        messages: Array,\n        active_chat: Number\n      }\n    };\n    \u003c/script\u003e\n    \u003cstyle\u003e\n    .from-message {\n      background: #17a2b8;\n      color: white;\n      border-radius: 3px;\n      padding: 8px 2px;\n      margin-bottom: 4px;\n    }\n    .to-message {\n      background: rgb(201, 209, 209);\n      color: rgb(41, 53, 52);\n      border-radius: 3px;\n      padding: 8px 2px;\n      margin-bottom: 4px;\n    }\n    \u003c/style\u003e\n```\n\n### MessageInput.vue\n\nAdd the below code to `src/components/MessageInput.vue` for the MessageInput component:\n\n``` html\n    \u003ctemplate\u003e\n        \u003cdiv class=\"message-input\"\u003e\n            \u003cb-form-input \n              v-model=\"message_input\"\n              type=\"text\"\n              placeholder=\"Enter your message\"\n              v-on:keyup.enter.native=\"send_message\"\n            \u003e\n            \u003c/b-form-input\u003e\n        \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    export default {\n      name: \"MessageInput\",\n      data() {\n        return {\n          message_input: \"\"\n        };\n      },\n      methods: {\n        send_message() {\n          this.$emit(\"send_message\", this.message_input);\n          this.message_input = \"\";\n        }\n      }\n    };\n    \u003c/script\u003e\n    \n    \u003cstyle scoped\u003e\n    .message-input {\n      position: absolute;\n      bottom: 0px;\n      width: 100%;\n    }\n    \u003c/style\u003e\n```\n\nWe now have our chat interface. \n\n![flask-vue-sentiment-demo-3](//images.ctfassets.net/1es3ne0caaid/KOdZR8doGYyk2qcMeQm0/17c720e1fa131c92f1eaba9dc5e03394/flask-vue-sentiment-demo-3.png)\n\nDon’t worry that the login form and the chat area are together, we’ll fix it in the next part.\n\n## The database\n\nWe will use SQLite for the database. \n\nFor our chat app, we’ll create three tables:\n\n\n- **users** — This will hold all the users in the application.\n- **channels** — Once two users start a conversation, we will create a new channel for them and store the channel name to the database. So that for subsequent conversation, we don’t need to create a new channel for them.\n- **messages** — We’ll store every conversation to this table. We don’t want a situation where a user logs out and logs in again to find out their previous messages are missing.\n\n![flask-vue-sentiment-demo-4](//images.ctfassets.net/1es3ne0caaid/3lRIvf4P96C262ck2WgIIs/cf0d453aa2b479f47cb4de55d1de04af/flask-vue-sentiment-demo-4.png)\n\nAdd the below code to `api/database.py` to prepare the database connection:\n\n``` python\n    from sqlalchemy import create_engine\n    from sqlalchemy.orm import scoped_session, sessionmaker\n    from sqlalchemy.ext.declarative import declarative_base\n    engine = create_engine('sqlite:///database.db', convert_unicode=True)\n    db_session = scoped_session(sessionmaker(autocommit=False,\n                                                autoflush=False,\n                                                bind=engine))\n    Base = declarative_base()\n    Base.query = db_session.query_property()\n    def init_db():\n        import models\n        Base.metadata.create_all(bind=engine)\n```\n\nWe are using SQLAlchemy to initialize our database connection. \n\nIn the `init_db()` function, we imported our models and finally call `Base.metadata.create_all` to create all the tables specified in the model’s file.\n\n## Create the models\n\nLet’s create a model for easy CRUD operations.\n\nAdd the model definition to `api/models.py`:\n\n``` python\n    from sqlalchemy import Column, Integer, String, Text, ForeignKey\n    from database import Base\n    \n    class User(Base):\n        __tablename__ = 'users'\n        id = Column(Integer, primary_key=True)\n        username = Column(String(50), unique=True)\n        password = Column(String(128))\n        def __init__(self, username=None, password=None):\n            self.username = username\n            self.password = password\n            \n        def __repr__(self):\n            return '\u003cUser %r\u003e' % (self.username)\n            \n    class Channel(Base):\n        __tablename__ = 'channels'\n        id = Column(Integer, primary_key=True)\n        name = Column(String(60))\n        from_user = Column(Integer, ForeignKey('users.id'))\n        to_user = Column(Integer, ForeignKey('users.id'))\n    \n    class Message(Base):\n        __tablename__ = 'messages'\n        id = Column(Integer, primary_key=True)\n        message = Column(Text)\n        from_user = Column(Integer, ForeignKey('users.id'))\n        to_user = Column(Integer, ForeignKey('users.id'))\n        channel_id = Column(Integer, ForeignKey('channels.id'))\n```\n\nIn this file, we create three classes which define the structure of the tables our app will be using.\n\nNow import the files to `api/app.py`:\n\n``` python\n    # ./api/app.py\n    \n    # [...]\n    from database import db_session\n    from models import User, Channel, Message\n    # [...] \n```\n\nNext, let’s close the connection to the database once an operation is complete.  Add the following code to `api/app.py`  after `app = Flask(__name__)` line:\n\n``` python\n    @app.teardown_appcontext\n    def shutdown_session(exception=None):\n        db_session.remove()\n```\n\n### Create the database and tables\n\nNow, let’s create the database and tables. Open up a new command window and change your directory to the project’s root folder, activate your virtualenv and then run the below commands:\n\n``` \n    # Go to the Flask app\n    $ cd api\n    \n    # Activate your virtualenv\n    \n    # Enter python interactive shell\n    $ python\n    \u003e\u003e\u003e from database import init_db\n    \u003e\u003e\u003e init_db()\n```\n\nIf there is no error, a new file named `database.db` will be created in the `api` folder. \n\n\n\u003e ⚠️ You might get an error if your virtualenv is not activated. You need to activate your virtualenv before running the above command.\n\n## Authentication Route\n\nWe are almost done. We need some endpoints for adding and authenticating our users.\n\nThe [Werkzeug](http://werkzeug.pocoo.org/) is a Python utility library which Flask depends on. Since we have installed Flask, we’ll also have access to the library.\n\nImport the function for generating and checking password hash from the Werkzeug library to `api/app.py` file:\n\n``` python\n    #app.py\n    \n    #[...]\n    from werkzeug.security import generate_password_hash, check_password_hash\n    #[...]\n```\n\n### Register\n\nNext, add the route for adding new users to `api/app.py`: \n\n``` python\n    @app.route('/api/register', methods=[\"POST\"])\n    def register():\n        data = request.get_json()\n        username = data.get(\"username\")\n        password = generate_password_hash(data.get(\"password\"))\n        \n        try:\n            new_user = User(username=username, password=password)\n            db_session.add(new_user)\n            db_session.commit()\n        except:\n            return jsonify({\n                \"status\": \"error\",\n                \"message\": \"Could not add user\"\n            })\n            \n        return jsonify({\n            \"status\": \"success\",\n            \"message\": \"User added successfully\"\n        }), 201\n```\n\nHere we created a new route named `/api/register` which is only available via a POST request. It will accept JSON object containing the new user details - username and password.\n\nFinally, we added the user to the database. If an error occurred while adding, we inform the user with a JSON response:\n\n``` python\n            return jsonify({\n                \"status\": \"error\",\n                \"message\": \"Could not add user\"\n            })\n```\n\nElse we respond with a success message:\n\n``` python\n        return jsonify({\n            \"status\": \"success\",\n            \"message\": \"User added successfully\"\n        }), 201\n```\n\nUsing a REST client like [Postman](https://www.getpostman.com/), you can now register a new user:\n\n![flask-vue-sentiment-postman-1](//images.ctfassets.net/1es3ne0caaid/1mWJ749YecOeE4WWOO0Sck/e5558ad47c4f0aa72dd8b99fb084db00/flask-vue-sentiment-postman-1.png)\n\n To register users using Postman, open up the Postman app then,\n\n- Close the first pop up that appears.\n- Select **POST** as the request method.\n- Add http://localhost:5000/api/register to the request URL field.\n- Click on the **Body** tab right below the URL field.\n- Then choose **raw** in the options that appear after the **Body** tab you just selected.\n- In the same line with the **raw** option, select **JSON (application/json)** in the drop down.\n- Now, add the user’s information you want to register to the text field that appears after the option you just selected:\n\n```\n    {\n       \"username\": \"\u003cusername\u003e\",\n       \"password\": \"\u003cpassword\u003e\"\n    }\n```\n \n Make sure to replace `\u003cusername\u003e` and `\u003cpassword\u003e` placeholders with the information of the user you want to register.\n\n- Finally, click on the **Send** button to send the request to the server. \n\n \nRegister a couple of users and note down their credentials. We’ll use it to test the app later.\n \n### Login\n\nOne way of securing APIs and single page applications is by using [JWT](https://jwt.io/introduction/). It’s an encrypted token generated to securely transfer information between services. To implement JWT for our app, we will use the [Flask-JWT-extended](https://flask-jwt-extended.readthedocs.io) package. We have already installed the package so we’ll go ahead and use it.\n\nImport the package and configure it to use Flask app in `api/app.py`:\n\n``` python\n    from flask_jwt_extended import (\n        JWTManager, jwt_required, create_access_token,\n        get_jwt_identity\n    )\n```\n\nFrom the package, we imported the following functions:\n\n\n- **JWTManager** —  The Python class for configuring the package to use Flask app config.\n- **jwt_required** — A decorator for authenticating our routes.\n- **created_access_token** — A function for generating a token.\n- **get_jwt_identity** — A function for getting the identity (in our case the username) from a token.\n\nNext, let’s configure the package to use Flask app config. Add the below code to `api/app.py` immediately after `app = Flask(__name__)` line:\n\n``` python\n    app.config['JWT_SECRET_KEY'] = 'something-super-secret'  # Change this!\n    jwt = JWTManager(app)\n```\n\nNext, add the login route to `api/app.py`:\n\n``` python\n    @app.route('/api/login', methods=[\"POST\"])\n    def login():\n        data = request.get_json()\n        username = data.get(\"username\")\n        password = data.get(\"password\")\n        user = User.query.filter_by(username=username).first()\n        \n        if not user or not check_password_hash(user.password, password):\n            return jsonify({\n                \"status\": \"failed\",\n                \"message\": \"Failed getting user\"\n            }), 401\n            \n        # Generate a token\n        access_token = create_access_token(identity=username)\n        \n        return jsonify({\n            \"status\": \"success\",\n            \"message\": \"login successful\",\n            \"data\": {\n                \"id\": user.id,\n                \"token\": access_token,\n                \"username\": user.username\n            }\n        }), 200\n```\n\nWith this, we now have our login route - `/api/login` which is available via a POST requests. The route expects a expects a JSON object to be passed along that contains the details of the user.\n\n![flask-vue-sentiment-postman-2](//images.ctfassets.net/1es3ne0caaid/4uSxjMG1PO2WWoY2A8gS2q/0c82011179fc74de9f6476b863488cd8/flask-vue-sentiment-postman-2.png)\n\nTo test the login route, use the details of the user you just registered.\n\n## Conclusion\n\nIn this tutorial, we created our chat interface that was composed of Vue components. We also created the database for the chat application using SQLAlchemy.  \n\nFinally, we created a login and registration endpoint and also setup JWT for authenticating users and protecting our routes.","metaTitle":"Build a chat app in Flask and Vue - Part 2","metaDescription":"This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each other in realtime, see when other users are online, and be notified of new messages. In part two, build the chat interface."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6uyY1kfn9KQuqMOUwsyk2E","type":"Entry","createdAt":"2018-11-13T19:52:40.868Z","updatedAt":"2019-01-02T15:42:09.890Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app in Flask and Vue with sentiment analysis  - Part 3: Live chat with sentiment analysis","url":"chat-flask-vue-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"38Gip5IBCgiiy4AYeeyyqG","type":"Entry","createdAt":"2018-03-04T19:48:48.360Z","updatedAt":"2018-03-04T19:48:48.360Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Gideon Onwuka","url":"gideon-onwuka","email":"dongidomed@gmail.com","twitter":"https://twitter.com/gideon_onwuka","github":"https://github.com/dongido001","guestWriter":true}}],"projectRepo":"https://github.com/dongido001/pusher-chat-sentiment-analysis/tree/part-3","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-09-05","description":"This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each other in realtime, see when other users are online, and be notified of new messages. In part three, implement live chat and sentiment analysis.","prerequisite":"You will need Node 8.9+ and Python 3.6+ installed on your machine.","content":"In this third tutorial, we will be implementing live chat and sentiment analysis.\n\nIf you haven’t followed the previous parts, you can catch it up here:\n\n- [Part one - Setting up the project](https://pusher.com/tutorials/chat-flask-vue-part-1)\n- [Part two - Create the chat interface, database design, login and registration endpoint](https://pusher.com/tutorials/chat-flask-vue-part-2)\n\n## Chatting over channels\n\n[Pusher Channels](https://pusher.com/channels) provides us with realtime functionalities. It has a publish/subscribe model where communication happens across channels. There are different types of channel, which we can subscribe to - [public channel](https://pusher.com/docs/client_api_guide/client_public_channels), [private channel,](https://pusher.com/docs/client_api_guide/client_private_channels) [presence channel](https://pusher.com/docs/client_api_guide/client_presence_channels) and the [encrypted channel](https://pusher.com/docs/client_api_guide/client_encrypted_channels).  \n\nFor our app, we will make use of the private channel since the chat messages need to be only accessible by the two users involved. This way we can authenticate a channels’ subscription to make sure users subscribing to it are actually authorized to do so. When naming your private channel, it needs to have a prefix of “private-”.\n\n### The flow\n\nOnce a user logs in, we'll redirect the user to the chat page. Then we subscribe this user to a private channel - `private-notification-\u003cthe_user_id\u003e`, where \u003cthe_user_id\u003e is the actual ID of the logged in user. This channel will be used to send notifications to the user. So that means every logged in user will have a private notification channel where we can notify them anytime we want to.  \n\nAfter subscribing to the notifications channel (“private-notification-\u003cthe_user_id\u003e”), we will start to listen for an event we will name `new_chat`. We'll trigger this event once a user clicks on another user they want to chat with. Also, we'll send along data that looks like below when triggering this event:\n\n```\n    {\n      from_user, // ID of the user initiating the chat\n      to_user, // ID of the other user\n      from_user_notification_channel,// notificaction channel for the user intiating the chat\n      to_user_notification_channel, // notificaction channel of the other user\n      channel_name, // The channel name where both can chat\n    }\n```\n\nIn the data above, we have:\n\n\n- `from_user` — The user that triggered the event (the user starting the conversation).\n- `to_user` — The other user.\n- `from_user_notification_channel` — Notification channel for the user initiating the chat (for example private-notification-1).\n- `to_user_notification_channel` — Notification channel for the other user (for example private-notification-2).\n- `channel_name` — The channel where both can exchange messages.\n\nThe notification channels for users is unique since we are making use of their IDs. \n\nHow do we generate the `channel_name`?\n\nWe need a way to generate a channel name for the two users since they need to be on the same channel to chat. Also, the name should not be re-used by other users. To do this we’ll use a simple convention to name the channel - \"private-chat_\u003cfrom_user\u003e_\u003cto_user\u003e\" (for example \"private-chat_1_2\"). Once we get the channel we’ll store it in the channels table. So subsequently, before we generate a new channel name, we’ll query the database to check if there is an already generated channel for the users and use that instead.\n\nAfter getting the channel_name, we’ll notify the other user (`to_user_notification_channel`) by triggering the `new_chat` event.\n\nOnce a user receives the `new_chat` event, we’ll subscribe that user to the channel name we got from the event and then start to listen for another event we’ll name `new_message` on the channel we just subscribed to. The `new_message` event will be triggered when a user types and submits a message.\n\nThis way, we’ll be able to subscribe users to channels dynamically so they can receive messages from any number of users at a time. Let’s go ahead and write the code.\n\n## Coding the Server\n\nFirst, initialize Pusher’s Python library by adding the following code to the `api/app.py` file right after the `app = Flask(__name__)` line of code:\n\n``` python\n    # api/app.py\n    \n    # [...]\n    \n    pusher = pusher.Pusher(\n        app_id=os.getenv('PUSHER_APP_ID'),\n        key=os.getenv('PUSHER_KEY'),\n        secret=os.getenv('PUSHER_SECRET'),\n        cluster=os.getenv('PUSHER_CLUSTER'),\n        ssl=True)\n    \n    # [...]\n```\n\nWe already have our login and register endpoint ready from part two. We still need to create several endpoints:\n\n\n- `/api/request_chat` we will use this endpoint to generate a channel name where both users can communicate. \n- `/api/pusher/auth` the endpoint for authenticating Pusher Channels subscription\n- `/api/send_message` the endpoint to send message across users.\n- `/api/users` endpoint for getting all users from the database.\n- `/api/get_message/\u003cchannel_id\u003e` we’ll use this endpoint to get all messages in a particular channel.\n\n### Request chat\n\nWe’ll make a request to the `/api/request_chat` endpoint to generate a channel name when users want to chat.\n\nRecall, every user on our chat will have their private channel. To keep things simple, we used \"private-notification_user_\u003cuser_id\u003e\" to name the channel. Where \u003cuser_id\u003e is the ID of that user in the users table. This way every users will have a unique channel name we can use to notify them.\n\nWhen users want to chat, they need to be on the same channel. We need a way to generate a unique channel name for both of them to use. This endpoint will generate such channel as \"private-chat_\u003cfrom_user\u003e_\u003cto_user\u003e\", where from_user is the user ID of the user initiating the chat and to_user is the user ID of the other user. Once we generate the channel name, we will store it to our channels table. Now if the two users want to chat again, we don't need to generate a channel name again, we'll fetch the first generated channel name we stored in the database. \n\nAfter the first user generates the channel name, we’ll notify the other users on their private channel, sending them the channel name so they can subscribe to it. \n\nAdd the below code to `api/app.py` to create the endpoint:\n\n``` python\n    # api/app.py\n    [...]\n    @app.route('/api/request_chat', methods=[\"POST\"])\n    @jwt_required\n    def request_chat():\n        request_data = request.get_json()\n        from_user = request_data.get('from_user', '')\n        to_user = request_data.get('to_user', '')\n        to_user_channel = \"private-notification_user_%s\" %(to_user)\n        from_user_channel = \"private-notification_user_%s\" %(from_user)\n        \n        # check if there is a channel that already exists between this two user\n        channel = Channel.query.filter( Channel.from_user.in_([from_user, to_user]) ) \\\n                               .filter( Channel.to_user.in_([from_user, to_user]) ) \\\n                               .first()\n        if not channel:\n            # Generate a channel...\n            chat_channel = \"private-chat_%s_%s\" %(from_user, to_user)\n            \n            new_channel = Channel()\n            new_channel.from_user = from_user\n            new_channel.to_user = to_user\n            new_channel.name = chat_channel\n            db_session.add(new_channel)\n            db_session.commit()\n        else:\n            # Use the channel name stored on the database\n            chat_channel = channel.name\n               \n        data = {\n            \"from_user\": from_user,\n            \"to_user\": to_user,\n            \"from_user_notification_channel\": from_user_channel,\n            \"to_user_notification_channel\": to_user_channel,\n            \"channel_name\": chat_channel,\n        }\n        \n        # Trigger an event to the other user\n        pusher.trigger(to_user_channel, 'new_chat', data)\n        \n        return jsonify(data)\n    [...]\n```\n\nIn the preceding code:\n\n- First of all, we created a route named `/api/request_chat` where users can get a channel name where they can chat.\n- We also protected the route to check for JWT token using `@jwt_required`.\n- Next, we get the ID of the user initiating the chat and the ID of the other participating user.\n- Next, we check if there is already a chat channel created for the two users in the database. If the channel name already exists, we return the channel else we generate a new channel for the users then save it to the database.\n- Then using `pusher.trigger()`, we trigger an event named `new_chat` to the other user’s private channel.\n- Finally, we return a JSON object containing the details of the channel name created.\n\n### Authenticate Channel subscriptions\n\nSince we are using a private channel, we need to authenticate every user subscribing to the channel. We’ll make a request to the `/api/pusher/auth` endpoint to authenticate channels.\n\nAdd the below code to create the endpoint to authenticate channels in `api/app.py`.\n\n``` python\n    # api/app.py\n    [...]\n    @app.route(\"/api/pusher/auth\", methods=['POST'])\n    @jwt_required\n    def pusher_authentication():\n        channel_name = request.form.get('channel_name')\n        socket_id = request.form.get('socket_id')\n    \n        auth = pusher.authenticate(\n            channel=channel_name,\n            socket_id=socket_id\n        )\n        \n        return jsonify(auth)\n    [...]\n```\n\nPusher will make a request to this endpoint to authenticate channels, passing along the channel name and socket_id of the logged in user. Then, we call `pusher.authenticate()` to authenticate the channel.\n\n### Sending messages\n\nWhen a user sends a message, we’ll save the message to the database and notify the other user. We’ll make a request to the `/api/send_message` endpoint for sending messages.\n\nAdd the following code to `api/app.py`.\n\n``` python\n    # api/app.py\n    [...]\n    @app.route(\"/api/send_message\", methods=[\"POST\"])\n    @jwt_required\n    def send_message():\n        request_data = request.get_json()\n        from_user = request_data.get('from_user', '')\n        to_user = request_data.get('to_user', '')\n        message = request_data.get('message', '')\n        channel = request_data.get('channel')\n        \n        new_message = Message(message=message, channel_id=channel)\n        new_message.from_user = from_user\n        new_message.to_user = to_user\n        db_session.add(new_message)\n        db_session.commit()\n        \n        message = {\n            \"from_user\": from_user,\n            \"to_user\": to_user,\n            \"message\": message,\n            \"channel\": channel\n        }\n        \n        # Trigger an event to the other user\n        pusher.trigger(channel, 'new_message', message)\n        \n        return jsonify(message)\n    [...]\n```\n\n- We created a POST request route which expects some data to be sent along:\n  - `from_user` - The user sending the message.\n  - `to_user` - The other user on the chat receiving the message.\n  - `message` - The chat message.\n  - `channel` - The channel name where both of the users are subscribed to.\n- Next, we save the data to the database using the Message() class. \n- Then finally, we trigger an event named `new_message` to the channel name that will be sent from the request data and then return the information as JSON.\n\n### Get all users\n\nWe’ll make a request to the `/api/users` endpoint to get all users. Add the below code to `api/app.py`:\n\n``` python\n    # api/app.py\n    [...]\n    @app.route('/api/users')\n    @jwt_required\n    def users():\n        users = User.query.all()\n        return jsonify(\n            [{\"id\": user.id, \"userName\": user.username} for user in users]\n        ), 200\n    [...]\n```\n\n### Get messages from a channel\n\nWe’ll make a request to the `/api/get_message/\u003cchannel_id\u003e` endpoint to get all messages sent in a channel. Add the below code to `api/app.py`:\n\n``` python\n    # api/app.py\n    [...]\n    @app.route('/api/get_message/\u003cchannel_id\u003e')\n    @jwt_required\n    def user_messages(channel_id):\n        messages = Message.query.filter( Message.channel_id == channel_id ).all()\n    \n        return jsonify([\n            {\n                \"id\": message.id,\n                \"message\": message.message, \n                \"to_user\": message.to_user,\n                \"channel_id\": message.channel_id,  \n                \"from_user\": message.from_user, \n            } \n            for message in messages\n        ])\n    [...]\n```\n\n## Coding the Client\n\n### Authenticate users\n\nOn our current view, we have the login form and the chat interface visible at the same time. Let’s make the login form only visible when the user is not logged in.\n\nTo fix it, add a [condition](https://it.vuejs.org/v2/guide/conditional.html) to check if the user is authenticated in `src/App.vue`:\n\n``` html\n    // ./src/App.vue\n    \n    [...]\n    \u003cLogin v-if=\"!authenticated\" v-on:authenticated=\"setAuthenticated\" /\u003e\n    \u003cb-container v-else\u003e\n    [...]\n```\n\nWe are using a `v-if` directive to check if `authenticated` is false so we can render the login component only. Since `authenticated` is not defined yet, it will resolve to undefined which is false, which is ok for now. \n\nLoad up the app on your browser to confirm that only the login form is visible.\n\nNext, update the `src/components/Login.vue` component with the below code to log users in:\n\n``` javascript\n    // ./src/components/Login.vue\n    \n    [...]\n    \u003cscript\u003e\n    export default {\n      name: \"Login\",\n      data() {\n        return {\n          username: \"\",\n          password: \"\",\n          proccessing: false,\n          message: \"\"\n        };\n      },\n      methods: {\n        login: function() {\n          this.loading = true;\n          this.axios\n            .post(\"/api/login\", {\n              username: this.username,\n              password: this.password\n            })\n            .then(response =\u003e {\n              if (response.data.status == \"success\") {\n                this.proccessing = false;\n                this.$emit(\"authenticated\", true, response.data.data);\n              } else {\n                this.message = \"Login Faild, try again\";\n              }\n            })\n            .catch(error =\u003e {\n              this.message = \"Login Faild, try again\";\n              this.proccessing = false;\n            });\n        }\n      }\n    };\n    \u003c/script\u003e\n    [...]\n```\n\nIn the preceding code:\n\n- We are making a POST request to `/api/login` to authenticate our users.\n- If the login was successful, we’ll emit an event named `authenticated` so we can act on it in the `src/App.vue` file. We also passed some data in the event:\n  - true - to indicate the login was successful\n  - response.data.data - contains details of the logged in user\n  \n\nNext, add some [state](https://vuejs.org/v2/guide/state-management.html) of the `src/App.vue` file in the `\u003cscript\u003e` section:\n\n``` javascript\n    // ./src/App.vue\n    \n    [...] \n      data: function() {\n        return {\n          messages: {},\n          users: [],\n          active_chat_id: null,\n          active_chat_index: null,\n          logged_user_id: null,\n          logged_user_username: null,\n          current_chat_channel: null,\n          authenticated: false\n        };\n      },\n    [...]\n```\n\nSo that the entire `\u003cscript\u003e` section looks like below:\n\n``` javascript\n    // ./App.vue\n    \n    import MessageInput from \"./components/MessageInput.vue\";\n    import Messages from \"./components/Messages.vue\";\n    import NavBar from \"./components/NavBar.vue\";\n    import Login from \"./components/Login.vue\";\n    import Users from \"./components/Users.vue\";\n    import Pusher from \"pusher-js\";\n    \n    let pusher;\n    \n    export default {\n      name: \"app\",\n      components: {\n        MessageInput,\n        NavBar,\n        Messages,\n        Users,\n        Login\n      },\n      data: function() {\n        return {\n          authenticated: false,\n          messages: {},\n          users: [],\n          active_chat_id: null,\n          active_chat_index: null,\n          logged_user_id: null,\n          logged_user_username: null,\n          current_chat_channel: null\n        };\n      },\n      methods: {},\n    };\n```\n\nWe defined some default states of data which we will use. For example, we’ll use the `authenticated: false` state to check if a user is authenticated or not.\n\nRecall that in the Login component, we emitted an event when a user logs in successfully. Now we need to listen to that event on the `src/App.vue` component so as to update the users states.\n\nAdd a function to set authenticated users information to `src/App.vue` in the methods block:\n\n``` javascript\n    // ./src/App.vue\n    \n    [...]\n      data: function() {\n        return {\n          authenticated: false,\n          messages: {},\n          users: [],\n          active_chat_id: null,\n          active_chat_index: null,\n          logged_user_id: null,\n          logged_user_username: null,\n          current_chat_channel: null\n        };\n      },\n      methods: {\n        async setAuthenticated(login_status, user_data) {\n          \n          // Update the states\n          this.logged_user_id = user_data.id;\n          this.logged_user_username = user_data.username;\n          this.authenticated = login_status;\n          this.token = user_data.token;\n          \n          // Initialize Pusher JavaScript library\n          pusher = new Pusher(process.env.VUE_APP_PUSHER_KEY, {\n              cluster: process.env.VUE_APP_PUSHER_CLUSTER,\n              authEndpoint: \"/api/pusher/auth\",\n              auth: {\n                headers: {\n                  Authorization: \"Bearer \" + this.token\n                }\n              }\n          });\n          \n          // Get all the users from the server\n          const users = await this.axios.get(\"/api/users\", {\n            headers: { Authorization: \"Bearer \" + this.token }\n          });\n          \n          // Get all users excluding the current logged user\n          this.users = users.data.filter(\n            user =\u003e user.userName != user_data.username\n          );\n    \n        },\n      },\n    };\n    [...]\n```\n\nIn the code above:\n\n- We created a new function named `setAuthenticated` which accepts the information we passed along when emitting the `authenticated` event in the Login.vue file.\n- After updating the component state with the logged in user information, we made a request to `/api/users` to get all registered users.\n- Then we initialize Pusher JavaScript library \n- Finally, we remove the current log users from the users list we got and then update the users state.\n\nFinally, pass down the users we fetched to the `Users.vue` component. Update the Users component in `src/App.vue`:\n\n``` html\n    // ./src/App.vue\n    [...]\n    \u003cUsers :users=\"users\" v-on:chat=\"chat\" /\u003e\n    [...]\n```\n\nHere we passed the users list down to the `Users.vue` component so we can render them. Also, using the v-on directive we listen for an event `chat` which will be triggered from `Users.vue` whenever a user is clicked to start up a chat. \n\n### Subscribe the user to a channel\n\nAdd the below code to the `setAuthenticated` function in `src/App.vue` to subscribe the user to a channel when they are logged in:\n\n``` javascript\n    // ./src/App.vue\n    \n    [...]\n      methods: {\n        async setAuthenticated(login_status, user_data) {\n          [...]\n          var notifications = pusher.subscribe(\n            `private-notification_user_${this.logged_user_id}`\n          );\n          \n          notifications.bind(\"new_chat\", data =\u003e {\n            const isSubscribed = pusher.channel(data.channel_name);\n            if (!isSubscribed) {\n              const one_on_one_chat = pusher.subscribe(data.channel_name);\n              \n              this.$set(this.messages, data.channel_name, []);\n              \n              one_on_one_chat.bind(\"new_message\", data =\u003e {\n                // Check if the current chat channel is where the message is coming from\n                if (\n                  data.channel !== this.current_chat_channel \u0026\u0026\n                  data.from_user !== this.logged_user_id\n                ) {\n                  // Get the index of the user that sent the message\n                  const index = this.users.findIndex(\n                    user =\u003e user.id == data.from_user\n                  );\n                  // Set the has_new_message status of the user to true\n                  this.$set(this.users, index, {\n                    ...this.users[index],\n                    has_new_message: true\n                  });\n                }\n                  \n                this.messages[data.channel].push({\n                  message: data.message,\n                  from_user: data.from_user,\n                  to_user: data.to_user,\n                  channel: data.channel\n                });\n              });\n            }\n          });\n          \n        },\n      },\n    };\n    [...]\n```\n\n- First, we subscribe the user to their private channel using `var notifications = pusher.subscribe(…` once they log in.\n- Next, we bind that channel to an event we named `new_chat` so we can get a notification when a user is requesting for a new chat.\n- Then if there is any new chat request, we’ll subscribe that user to the channel sent along and also bind that channel to a new event named `new_message`.\n- Finally, if there is a message coming to the event - `new_message`, we append the message to the “messages” property in the data component. Also, if the user is not currently chatting on the channel where they received the message, we’ll notify them of the message.\n\n### Get all messages in a channel\n\nAdd a function to fetch all messages in a chat channel to `src/App.vue` in the methods block:\n\n``` javascript\n    // ./src/App.vue\n    [...]\n        getMessage: function(channel_name) {\n          this.axios\n            .get(`/api/get_message/${channel_name}`, {\n              headers: { Authorization: \"Bearer \" + this.token }\n            })\n            .then(response =\u003e {\n              this.$set(this.messages, channel_name, response.data);\n            });\n        },\n    [...]\n```\n\n### The chat function\n\nWe'll call the function when a user clicks on another user they want to chat with to prepare the chat channel.\n\nAdd the below code to the methods block of `src/App.vue`\n\n``` javascript\n    // ./src/App.vue\n    \n    [...]\n        chat: function(id) {\n          this.active_chat_id = id;\n          \n          // Get index of the current chatting user...\n          this.active_chat_index = this.users.findIndex(\n            user =\u003e user.id == this.active_chat_id\n          );\n          \n          // Set the has_new_message status of the user to true\n          this.$set(this.users, this.active_chat_index, {\n            ...this.users[this.active_chat_index],\n            has_new_message: false\n          });\n          \n          this.axios\n            .post(\n              \"/api/request_chat\",\n              {\n                from_user: this.logged_user_id,\n                to_user: this.active_chat_id\n              },\n              { headers: { Authorization: \"Bearer \" + this.token } }\n            )\n            .then(response =\u003e {\n              this.users[this.active_chat_index][\"channel_name\"] =\n                response.data.channel_name;\n                \n              this.current_chat_channel = response.data.channel_name;\n              \n              // Get messages on this channel\n              this.getMessage(response.data.channel_name);\n              \n              var isSubscribed = pusher.channel(response.data.channel_name);\n              \n              if (!isSubscribed) {\n                var channel = pusher.subscribe(response.data.channel_name);\n                \n                this.$set(this.messages, response.data.channel_name, []);\n                \n                channel.bind(\"new_message\", data =\u003e {\n                 //Check if the current chat channel is where the message is comming from\n                  if (\n                    data.channel !== this.current_chat_channel \u0026\u0026\n                    data.from_user !== this.logged_user_id\n                  ) {\n                    // Set the has_new_message status of the user to true\n                    this.$set(this.users, this.active_chat_index, {\n                      ...this.users[this.active_chat_index],\n                      has_new_message: true\n                    });\n                  }\n                  \n                  this.messages[response.data.channel_name].push({\n                    message: data.message,\n                    from_user: data.from_user,\n                    to_user: data.to_user,\n                    channel: data.channel\n                  });\n                });\n              }\n            })\n            .catch(function(error) {\n              console.log(error);\n            });\n        },\n    [...]\n```\n\n- We make a request to `/api/request_chat` to get the channel name for the chat session.\n- Next, we update the state of the `current_chat_channel` with the channel returned using:\n    `this.current_chat_channel = response.data.channel_name;`\n- Then we subscribe the user to the channel name returned and then bind the channel to an event we named `new_message`. Once we receive a new message, we add the message to the messages state.\n- Also, in the bound `new_message` event, we check if the message received is between the current chat channel, else we display an alert notifying the user that they have a new message from another user.\n\nWe are already passing the messages to the `Messages.vue` component so any new message will be rendered on the page dynamically. Take a look at the Messages component in `src/App.vue`:\n\n``` html\n    \u003cMessages \n      v-else \n      :active_chat=\"active_chat_id\" \n      :messages=\"messages[current_chat_channel]\"\n    /\u003e\n```\n\n## Sending messages\n\nNow add the function for sending messages to `src/App.vue`:\n\n``` javascript\n    // ./src/App.vue\n    [...]\n        send_message: function(message) {\n          this.axios.post(\n            \"/api/send_message\",\n            {\n              from_user: this.logged_user_id,\n              to_user: this.active_chat_id,\n              message: message,\n              channel: this.current_chat_channel\n            },\n            { headers: { Authorization: \"Bearer \" + this.token } }\n          );\n        },\n    [...]\n```\n\nWe’ll call this function whenever a user submits a message. \n\nTake a look at the `MessageInput.vue` component which is the component for sending messages. You will notice that after the user submits a message, we trigger an event named `send_message` passing along the message text.\n\nNow we will listen to the event and send the message to the server once we get the event. Update the `MessageInput` component in the `\u003ctemplate\u003e` section of `src/App.vue`:\n\n``` html\n    [...]\n    \u003cMessageInput v-on:send_message=\"send_message\" /\u003e\n    [...]\n```\n\nHere, we listen for the event using the `v-on` directive and then call the function we just added (send_message) once we get the event. \n\nTest out the chat by opening the app in two different tabs on your browser.\n\n## Get sentiments from messages\n\nTo get the sentiment from messages, we’ll use the [TextBlob](https://textblob.readthedocs.io/en/dev/) Python library which provides a simple API for common natural language processing (NLP).\n\n### Install TextBlob\n\nFrom your terminal, make sure you are in the `api` folder. Also, make sure your virtualenv is activated. Then execute the below function.\n\n```\n    # Install the library\n    $ pip install -U textblob\n    \n    # Download NLTK corpora\n    $ python -m textblob.download_corpora lite\n```\n\nThis will install TextBlob and download the necessary NLTK [corpora](https://textblob.readthedocs.io/en/dev/install.html) (trained models).\n\nImport TextBlob to `api/app.py`:\n\n``` python\n    from textblob import TextBlob\n```\n\nAdd a function to get the sentiment of a message to `api/app.py`\n\n``` python\n    # ./api/app.py\n    \n    def getSentiment(message):\n            text = TextBlob(message)\n            return {'polarity' : text.polarity }\n```\n\nThe sentiment property returns a tuple of the form (polarity, subjectivity) where polarity ranges from -1.0 to 1.0 and subjectivity ranges from 0.0 to 1.0. We will only use the polarity property.\n\nNext, include the sentiment on the return statement in the `user_messages` function in `api/app.py`:\n\n``` python\n    [...]\n        return jsonify([\n            {\n                \"id\": message.id,\n                \"message\": message.message,\n                \"to_user\": message.to_user,\n                \"channel_id\": message.channel_id,\n                \"from_user\": message.from_user,\n                \"sentiment\": getSentiment(message.message)\n            }\n            for message in messages\n        ])\n    [...]\n```\n\nAnd also update the data we trigger to Pusher in the `send_message` function in `api/app.py`:\n\n``` python\n    [...]\n        message = {\n            \"from_user\": from_user,\n            \"to_user\": to_user,\n            \"message\": message,\n            \"channel\": channel,\n            \"sentiment\": getSentiment(message)\n        }\n    [...]\n```\n\nNow we have the sentiment of text. Let’s display the related emoji beside messages in the view.\n\nNext update the code in `src/components/Messages.vue` to display the emoji sentiment:\n\n``` javascript\n    [...]\n    \u003ctemplate\u003e\n       \u003cdiv\u003e\n        \u003cdiv v-for=\"(message, id) in messages\" v-bind:key=\"id\"\u003e \n            \u003cdiv class=\"chat-message col-md-5\" \n              v-bind:class=\"[(message.from_user == active_chat) ? 'to-message' : 'from-message offset-md-7']\"\u003e\n              {{message.message}}\n              {{ getSentiment(message.sentiment.polarity) }}\n            \u003c/div\u003e \n        \u003c/div\u003e\n       \u003c/div\u003e\n    \u003c/template\u003e\n    \u003cscript\u003e\n    export default {\n      name: \"Messages\",\n      data() {\n        return {\n          happy: String.fromCodePoint(0x1f600),\n          neutral: String.fromCodePoint(0x1f610),\n          sad: String.fromCodePoint(0x1f61f)\n        };\n      },\n      methods: {\n        getSentiment(sentiment) {\n          if (sentiment \u003e 0.5) {\n            return this.happy;\n          } else if (sentiment \u003c 0.0) {\n            return this.sad;\n          } else {\n            return this.neutral;\n          }\n        }\n      },\n      props: {\n        messages: Array,\n        active_chat: Number\n      }\n    };\n    \u003c/script\u003e\n    [...]\n```\n\nHere, we defined the emotions for each sentiment score.\n\nThen finally update the bound event for `new_message` to include the sentiment data. Update  `src/App.vue` as below in the `setAuthenticated` function:\n\n``` javascript\n    [...]\n    channel.bind(\"new_message\", data =\u003e {\n      [...]\n      this.messages[data.channel].push({\n        message: data.message,\n        sentiment: data.sentiment,\n        from_user: data.from_user,\n        to_user: data.to_user,\n        channel: data.channel\n      });\n    });\n    [...]\n```\n\nAnd also on the bound event in `chat` function to include the sentiment data in `src/App.vue` file:\n\n``` javascript\n    [...]\n    one_on_one_chat.bind(\"new_message\", data =\u003e {\n      [...]\n      this.messages[response.data.channel_name].push({\n        message: data.message,\n        sentiment: data.sentiment,\n        from_user: data.from_user,\n        to_user: data.to_user,\n        channel: data.channel\n      });\n    });\n    [...]\n```\n\nAnd that’s it! congrats. If you test the app again, you will see the sentiments of each chat messages.\n\n![flask-vue-sentiment-demo-part-3](//images.ctfassets.net/1es3ne0caaid/3hdpldMAYoUkKWWyM6WE4O/99313fd2fc32234b505db9136b3e60c3/flask-vue-sentiment-demo-part-3.gif)\n\n\u003e **Note**: If you are having issue with displaying the emoji in your browsers, you might want to use the latest version of Chrome or Mozilla to display it.\n\n## Conclusion\n\nIn this tutorial of the series, we have successfully built a one-to-one private chat with sentiment analysis using Pusher Channels to add realtime functionality.\n\nYou can get the complete code on [GitHub](https://github.com/dongido001/pusher-chat-sentiment-analysis/tree/part-3).","metaTitle":"Build a chat app in Flask and Vue - Part 3","metaDescription":"This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each other in realtime, see when other users are online, and be notified of new messages. In part three, implement live chat and sentiment analysis."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1dAElRmwsyikCgyiGYIWyo","type":"Entry","createdAt":"2018-11-14T19:41:10.290Z","updatedAt":"2019-01-02T15:42:34.989Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app in Flask and Vue with sentiment analysis  - Part 4: Adding an online presence feature","url":"chat-flask-vue-part-4","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"38Gip5IBCgiiy4AYeeyyqG","type":"Entry","createdAt":"2018-03-04T19:48:48.360Z","updatedAt":"2018-03-04T19:48:48.360Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Gideon Onwuka","url":"gideon-onwuka","email":"dongidomed@gmail.com","twitter":"https://twitter.com/gideon_onwuka","github":"https://github.com/dongido001","guestWriter":true}}],"projectRepo":"https://github.com/dongido001/pusher-chat-sentiment-analysis/tree/part-4","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-09-04","description":"This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each other in realtime, see when other users are online, and be notified of new messages. In part four, add an online presence feature.","prerequisite":"You will need Node 8.9+ and Python 3.6+ installed on your machine.","content":"In this part, we’ll see how to add a “who’s online” feature. This feature will make our chat more lively. This way we know if the other participants are online so we know if we’ll be getting a reply soon. The code is available on [GitHub](https://github.com/dongido001/pusher-chat-sentiment-analysis/tree/part-4).\n\nYou can find the previous parts of the series here: \n[Part 1](https://pusher.com/tutorials/chat-flask-vue-part-1) \n[Part 2](https://pusher.com/tutorials/chat-flask-vue-part-2) \n[Part 3](https://pusher.com/tutorials/chat-flask-vue-part-3)\n\nIf you don't have the setup from previous parts, follow the below instructions to get it otherwise skip this.\n\n```\n    # Clone the repo\n    $ git clone https://github.com/dongido001/pusher-chat-sentiment-analysis.git -b part-3\n    \n    # Go to the project root folder\n    $ cd pusher-chat-sentiment-analysis\n    \n    # Install dependencies\n    $ npm install\n```\n\nUpdate the `.env` file in the project’s root folder with your correct Pusher App key:\n\n```\n    VUE_APP_PUSHER_KEY=\u003cPUSHER_APP_KEY\u003e\n    VUE_APP_PUSHER_CLUSTER=\u003cPUSHER_APP_CLUSTER\u003e\n```\n\nThen run the app:\n\n```\n    # Start vue app\n    $ npm run serve\n```\n\nThen from a new terminal execute the following:\n\n```\n    $ cd api\n    $ python -m venv env\n    $ pip install -r requirements.txt\n    $ source env/bin/activate\n```\n\nUpdate the `api/.env`  file with your correct Pusher API key:\n\n```\n    PUSHER_APP_ID=app_id\n    PUSHER_KEY=key\n    PUSHER_SECRET=secret\n    PUSHER_CLUSTER=cluster\n```\n \n```\n    $ flask run\n```\n\nNow you should have both apps running. Both apps should be running on a different port. Note the URL of the Vue.js app in your terminal because this is what you will use to access the chat application.\n\n## Presence channels\n\n[Presence channels](https://pusher.com/docs/client_api_guide/client_presence_channels) are similar to the private chat channel. It exposes an additional feature of an awareness of who is subscribed to a channel. This will enable us to easily implement “who’s online” functionality into our chat app. When naming a presence channel, it needs to have a prefix of “presence-”.\n\nThe flow is much related to the private channel. First, we will subscribe all users logging in to the app to a presence channel we’ll name “presence-chitchat”. Before they are subscribed, Pusher will make a request to our auth endpoint (which we have already) to authenticate the channel. \n\nAn important thing to note is that when setting up the authentication for presence channel, you must add a custom data to the authenticate function. The custom data is the information of the user you want to authenticate. The custom data will be passed back to your client’s app so we can use them.\n\n\n## Authenticating channel\n\nFirst, let’s update the endpoint so that it accommodates authentication for presence channels.\n\nWhen Pusher makes a request to this endpoint to authenticate the channel, it passes along the channel name and the connected user’s socket ID. \n\nRemember that our routes are protected with JWT. We are using the `@jwt_required` decorator to protect the route.  When Channels makes the request to the endpoint, it includes a JWT token in its request header. If the token is not valid, it results to a 403 HTTP error. Also, remember that we set the JWT token to be included in  the request header while we are initializing Pusher JavaScript client.\n\nUpdate the `pusher_authentication` function in `api/app.py` to include custom data:\n\n``` python\n    # ./api/app.py\n    \n    [...]\n    @app.route(\"/api/pusher/auth\", methods=['POST'])\n    @jwt_required\n    def pusher_authentication():\n        channel_name = request.form.get('channel_name')\n        socket_id = request.form.get('socket_id')\n        \n        username = get_jwt_identity()\n        \n        user_data = User.query.filter_by(username=username).first()\n        \n        auth = pusher.authenticate(\n            channel=channel_name,\n            socket_id=socket_id,\n            custom_data={\n                \"user_id\": user_data.id,\n                \"user_info\": {\n                   \"username\": user_data.username\n                }\n            }\n        )\n        \n        return jsonify(auth)\n    [...]\n```\n\nIn the code above,\n\n- We first fetch the channel name and socket ID from the request.\n- Then, we fetch the username from the JWT token.\n- Next, we query the database with the username to get more information about the user.\n- Finally, we call `pusher.authenticate` to authenticate the channel. We also added some custom data to the authenticate function. The `user_id` in the `custom_data` is the ID of the user while the user_info property is for additional information for that user.\n\nNow, with this, we can authenticate both our private and presence channel.\n\n\n\u003e ⚠️ If you don’t include a custom data, the channel won’t be authenticated. This means you won’t be able to subscribe to the channel. The `user_id` in the custom data is also required.\n\n\n## Subscribe the user\n\nNow, let’s subscribe our users to a common channel from the Vue app. We’ll name this channel `presence-chatchit`.\n\nAdd the following code to the `setAuthenticated` method in `src/App.vue`:\n\n``` javascript\n    var presenceChannel = pusher.subscribe(\"presence-chitchat\");\n```\n\nOnce the user logs in,  we’ll subscribe the user to the `presence-chitchat` channel.\n\nNext, update the user `is_online` status to true as they subscribe. Add the below code to the `setAuthenticated` method in `src/App.vue`:\n\n``` javascript\n    [...]\n    presenceChannel.bind(\"pusher:member_added\", data =\u003e {\n      // Get the index of user that just scubscribed\n      const index = this.users.findIndex(user =\u003e user.id == data.id);\n      \n      // Set the is_online status of the user to true\n      this.$set(this.users, index, { ...this.users[index], is_online: true });\n    });\n    [...]\n```\n\nHere,\n\n- We bind the channel to the pre-defined event called `pusher:member_added`. This event is available by default for the presence channels. In the event, we can access the custom data we added while authenticating the channel.\n- `this.users` is a state we used for storing all users available on the app.\n- the `data` is the custom data we passed while authenticating the channel.\n- Then finally, we [set](https://vuejs.org/v2/guide/reactivity.html#Change-Detection-Caveats) the `is_online` status for the user to be true.\n\nNext, update the user `is_online` status to false as they leave the channel. Add the below code to the `setAuthenticated` method in `src/App.vue`:\n\n``` javascript\n    [...]\n    presenceChannel.bind(\"pusher:member_removed\", data =\u003e {\n      // Get the index of user that just subscribed\n      const index = this.users.findIndex(user =\u003e user.id == data.id);\n      \n      // Set the is_online status of the user to false\n      this.$set(this.users, index, {\n        ...this.users[index],\n        is_online: false\n      });\n    });\n    [...]\n```\n\nHere, we bind the channel to the pre-defined event called `pusher:member_removed`. This event is available by default for the presence channels. Then finally, we [set](https://vuejs.org/v2/guide/reactivity.html#Change-Detection-Caveats) the `is_online` status for the user to be false.\n\nNext, get all users already on the channel before the user joined and set their `is_online` status to be true. Add the below code to the `setAuthenticated` method in `src/App.vue`:\n\n``` javascript\n    [...]\n    presenceChannel.bind(\"pusher:subscription_succeeded\", data =\u003e {\n      // Fetch members already on this channel, then set them to be online\n      for (let member_id of Object.keys(data.members)) {\n        const index = this.users.findIndex(user =\u003e user.id == member_id);\n        this.$set(this.users, index, {\n          ...this.users[index],\n          is_online: true\n        });\n      }\n    });\n    [...]\n```\n\nThe `pusher:subscription_succeeded` is triggered as soon as a user subscribes to the channel. As the user subscribes to the channel, it’s possible to have users already subscribed to that channel. \n\nIn the code above, when we get the event, we’ll fetch all the users already subscribed to the channel and then update their is_online property to true.\n\n## Adding an online indicator\n\nWe need an indicator that shows if a user is online or offline. We’ll use a small circle beside a user to show when the user is online, and remove it when the user is offline.\n\nIn the template section of `src/components/Users.vue`, add the below markup:\n\n``` html\n    \u003ctemplate\u003e\n      \u003cdiv style=\"margin-top: 0px;\"\u003e\n        \u003cdiv v-for=\"(user, id) in users\" v-bind:key=\"id\"\u003e\n          \u003cdiv\n            v-bind:class=\"[activeUser == user.id ? 'user active' : 'user']\"\n            @click=\"chat(user.id)\"\n          \u003e\n            {{user.userName}}\n            \u003cspan v-if=\"user.has_new_message\" class=\"has_new_message\"\u003eNew message\u003c/span\u003e\n            \u003cspan v-if=\"user.is_online\" class=\"online\"\u003e\u003c/span\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nHere, we check if the user is online so that we can show the HTML indicator.\n\nNext, add some style for the indicator in the `\u003cstyle\u003e` section of the `src/components/Users.vue` file:\n\n``` css\n    [...]\n    .online {\n      height: 15px;\n      width: 15px;\n      background-color: #17a2b8;\n      border-radius: 50%;\n      display: inline-block;\n      margin-bottom: -4px;\n      border: 1px solid white;\n    }\n    [...]\n```\n\n### Testing the app\n\nCongrats! Now we can see those online and those that are offline. \n\nNow test the app. Open the app in different tabs on your browser then log in. You will get a similar experience as below!\n\n![flask-vue-sentiment-demo-part-4](//images.ctfassets.net/1es3ne0caaid/5iuUiYUuME0qUO6CcWgqWk/f3d0cdf1ff02d41dcf640a06c5c04603/flask-vue-sentiment-demo-part-4.gif)\n\n## Conclusion\n\nIn this tutorial, we explored how to add a “who’s online” feature to chat apps using Channel’s presence channel. \n\nThe source code for the tutorial is available in [GitHub](https://github.com/dongido001/pusher-chat-sentiment-analysis/tree/part-4).","metaTitle":"Build a chat app in Flask and Vue - Part 4","metaDescription":"This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each other in realtime, see when other users are online, and be notified of new messages. In part four, add an online presence feature."}}],"defaultValue":"Python","queryType":"tag","pages":3,"route":"/tutorials","query":{"tag":"Python","page":"1"}}},"page":"/tutorials","query":{"tag":"Python","page":"1"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=Python&page=1 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:45:08 GMT -->
</html>