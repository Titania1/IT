<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Beams&tag=Android&page=2 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:32:10 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dash.pusher.com/Beams" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dash.pusher.com/authenticate/register?product=Beams" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dash.pusher.com/Beams" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dash.pusher.com/authenticate/register?product=Beams" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Beams" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dash.pusher.com/Beams" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dash.pusher.com/authenticate/register?product=Beams" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">31</span> tutorials for “<span class="css-npldjc ehwuahf2">Beams &amp; Android</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorials994f.html?tag=Android" class="css-nh0oyd e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="white"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials512c.html?product=Beams&amp;tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorialsd3fd.html?product=Beams&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorials4960.html?product=Beams&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials19f4.html?product=Beams&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorialsa345.html?product=Beams&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials1bbb.html?product=Beams" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#C223CE" xmlns="http://www.w3.org/2000/svg"><path fill="#C223CE" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#C223CE" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#C223CE" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#C223CE" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsb595.html?product=Beams&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorialsb729.html?product=Beams&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials980d.html?product=Beams&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Beams &amp; Android"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/push-notifications-dart-android-ios.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Dart<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Sending push notifications from Dart to Android and iOS</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Learn how to send push notifications from a Dart server to Android and iOS. This tutorial walks you through building the...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/lambda-java-android-push-notifications.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Amazon Web Services</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">AWS Lambda running Java and Pusher Beams for Android push notifications</h3><p class="css-k12xad e5jrto45">Learn how to send push notifications from AWS Lambda to an Android app, using Pusher Beams. Build a simple demo app and ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/lambda-go-android-push-notifications.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Amazon Web Services</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">AWS Lambda running Go and Pusher Beams for Android push notifications</h3><p class="css-k12xad e5jrto45">Learn how to send push notifications from AWS Lambda to an Android app, using Pusher Beams. Build a simple demo app and ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/lambda-node-android-push-notifications.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Amazon Web Services</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">AWS Lambda running Node.js and Pusher Beams for Android push notifications</h3><p class="css-k12xad e5jrto45">Learn how to send push notifications from AWS Lambda to an Android app, using Pusher Beams. Build a simple demo app and ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/lambda-python-android-push-notifications.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Amazon Web Services</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">AWS Lambda running Python and Pusher Beams for Android push notifications</h3><p class="css-k12xad e5jrto45">Learn how to send push notifications from AWS Lambda to an Android app, using Pusher Beams. Build a simple demo app and ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/laravel-logger-part-6.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Creating a Laravel Logger - Part 6: Creating our web application</h3><p class="css-k12xad e5jrto45">In this six-part series, build a Laravel error logging service. You will create a custom Laravel package to include in L...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/laravel-logger-part-5.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Creating a Laravel Logger - Part 5: Creating our iOS application</h3><p class="css-k12xad e5jrto45">In this six-part series, build a Laravel error logging service. You will create a custom Laravel package to include in L...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/laravel-logger-part-4.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Creating a Laravel Logger - Part 4: Creating our Android application</h3><p class="css-k12xad e5jrto45">In this six-part series, build a Laravel error logging service. You will create a custom Laravel package to include in L...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/laravel-logger-part-3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Creating a Laravel Logger - Part 3: Integrating our Pusher logger package</h3><p class="css-k12xad e5jrto45">In this six-part series, build a Laravel error logging service. You will create a custom Laravel package to include in L...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials6a11.html?product=Beams&amp;tag=Android&amp;page=1" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials6a11.html?product=Beams&amp;tag=Android&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials8f91.html?product=Beams&amp;tag=Android&amp;page=2" class="css-2wakph edg0byb1">2</a><a href="tutorialsbb34.html?product=Beams&amp;tag=Android&amp;page=3" class="css-5s6711 edg0byb1">3</a><a href="tutorialsa626.html?product=Beams&amp;tag=Android&amp;page=4" class="css-5s6711 edg0byb1">4</a><a href="tutorialsbb34.html?product=Beams&amp;tag=Android&amp;page=3" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":31,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6JZSikBfu8S34I7yVj0GlH","type":"Entry","createdAt":"2019-06-10T17:36:09.693Z","updatedAt":"2019-06-10T17:36:09.693Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Sending push notifications from Dart to Android and iOS","url":"push-notifications-dart-android-ios","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"58WBWjhcWcuAMI6qIAyiC4","type":"Entry","createdAt":"2018-12-13T20:46:00.073Z","updatedAt":"2018-12-13T20:46:36.867Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Suragch","url":"suragch","email":"studymongolian@gmail.com","twitter":"https://twitter.com/suragch","github":"https://github.com/suragch","guestWriter":true}}],"projectRepo":"https://github.com/suragch/pusher_beams_dart_server","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1st5ugwNDbvlnFFHBadh5b","type":"Entry","createdAt":"2019-03-13T18:08:14.919Z","updatedAt":"2019-03-13T18:08:14.920Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Dart","url":"dart","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}}],"reviewDate":"2019-06-10","description":"Learn how to send push notifications from a Dart server to Android and iOS. This tutorial walks you through building the backend in Dart, before creating simple demo apps for both Android and iOS. Full code samples are provided.","prerequisite":"You will need Dart, Aqueduct and either Android Studio or XCode installed on your machine.","content":"## Introduction\n\nIn today's tutorial we will learn how to send push notifications from a Dart server to Android and iOS using [Pusher Beams](https://pusher.com/beams). In order to trigger events in the server, we'll make a simple admin user app. The final result will look like this:\n\n![dart-push-notifications-mobile-demo](//images.ctfassets.net/1es3ne0caaid/7gDJqRlD9mmDfFdTsLRbTl/63725c8381d01256422169a1971d739b/dart-push-notifications-mobile-demo.gif)\n\nWhen the admin user presses a button, the admin app contacts the Dart server. The Dart server then tells Pusher to send a push notification to users. The first button notifies all users who have subscribed to a [Device Interest](https://pusher.com/docs/beams/concepts/device-interests). The second button notifies a single [authenticated user](https://pusher.com/docs/beams/concepts/authenticated-users).\n\n\n## Prerequisites\n\nI'm assuming you have some familiarity with Server Side Dart, but if not, no problem. Check out these tutorials first:\n\n\n- [Becoming a backend developer - Part 1: Foundational concepts](https://pusher.com/tutorials/backend-developer-part-1)\n- [Becoming a backend developer - Part 2: Building the server](https://pusher.com/tutorials/backend-developer-part-2) (Dart section)\n- [Becoming a backend developer Part 3: Connecting to the server from a mobile app](https://pusher.com/tutorials/backend-developer-part-3)\n- [Authentication with Server Side Dart](https://pusher.com/tutorials/authentication-server-side-dart) \n\nRequired software:\n\n\n- [Dart SDK](https://www.dartlang.org/tools/sdk)\n- [Aqueduct](https://aqueduct.io/docs/getting_started/)\n- [Android Studio](https://developer.android.com/studio)\n- [Xcode](https://developer.apple.com/xcode/)\n\nIf you don't want to make both an Android app and an iOS app at this time, you can choose just one. I’m assuming you are already familiar with mobile app development.\n\nThis tutorial was made using Dart 2.2, Android Studio 3.4, and Xcode 10.2.\n\n\n## Pusher Beams overview\n\nBeams is a service from Pusher to simplify sending push notifications to users. It allows you to send notifications to groups of users who have all subscribed to a certain topic, which Pusher calls [Device Interests](https://pusher.com/docs/beams/concepts/device-interests). You can also send private push notifications to individual users.\n\nLet me describe what we will be doing today.\n\n### Interests\n\nThe user client app (Android or iOS) tells Pusher that they are interested in some topic. Lets say it's apples. Pusher makes note of it.\n\n![dart-push-notifications-mobile-img-1](//images.ctfassets.net/1es3ne0caaid/6gfULOQhiBlf7Ndn11p9Ri/f4791874411e367b239bf3813e1dcb66/dart-push-notifications-mobile-img-1.png)\n\nThe app admin wants to tell everyone who is interested in apples that they are on sale. So the admin tells the Dart server. Dart doesn't know who is interested in apples, but Pusher does, so Dart tells Pusher. Finally, Pusher sends a push notification to every user that is interested in apples.\n\n![dart-push-notifications-mobile-img-2](//images.ctfassets.net/1es3ne0caaid/3I25LCDXu8d4M5VHiwm2PZ/10fe113facd19ec6ebe624bc81c756fe/dart-push-notifications-mobile-img-2.png)\n\n### Authenticated users\n\nSometimes a user (let's call her Mary) may want to get personalized notifications. To do that she has to prove who she is by authenticating her username and password on the Dart server. In return, the Dart server gives her a token. \n\n![dart-push-notifications-mobile-img-3](//images.ctfassets.net/1es3ne0caaid/95twwHq6NquuYH9rNYyHI/41e3a9d9c8df1f3e5202804e9bc5713c/dart-push-notifications-mobile-img-3.png)\n\nMary gives the token to Pusher, and since the token proves she really is Mary, Pusher makes a note of it.\n\n![dart-push-notifications-mobile-img-4](//images.ctfassets.net/1es3ne0caaid/1XMcu1EML3elntCDrygVJ8/d72ac3238d62b859be76bc2bea71a527/dart-push-notifications-mobile-img-4.png)\n\nNow Mary ordered some apples a couple days ago, and the company admin wants to let Mary know that they will be arriving today. The admin tells the Dart server, the server tells Pusher, and Pusher tells Mary. Pusher doesn't tell any other user, just Mary.\n\n![dart-push-notifications-mobile-img-5](//images.ctfassets.net/1es3ne0caaid/7EWgAES2jk8SdY2m5KdWGX/b589915d99d9bdb19da1ed4677618545/dart-push-notifications-mobile-img-5.png)\n\n### Implementation plan\n\nSo that is how device interests and user push notifications work. In order to implement this we have four tasks to do. We have to create an Android user app, an iOS user app, an admin app, and the Dart server. Feel free to make only one user app rather than both the Android and the iOS one, though.\n\n\n## Android user app\n\n![dart-push-notifications-mobile-img-6](//images.ctfassets.net/1es3ne0caaid/5oNwq5vNAiUrS0VUXam7Q/4de3b8ef302f0e3e81067a25f65d4d51/dart-push-notifications-mobile-img-6.png)\n\nCreate a new Android app. (I'm using Kotlin and calling my package name `com.example.beamstutorial`.) Then set it up as described in the [Pusher Beams documentation](https://pusher.com/docs/beams/getting-started/android/configure-fcm). Make sure that you can receive the basic \"Hello world\" notification. I won't repeat those directions here, but there are a couple of things to note:\n\n\n- If you notice a version conflict error with the `appcompat` support in `build.gradle`, see [this solution](https://stackoverflow.com/a/55816987). \n- Your app should be minimized in order to receive push notifications.\n\nNow you should have a Pusher Beams account, a Firebase account, and an Android app that receives push notifications.\n\n### Interest notifications\n\nLet's modify the app to tell Pusher that the user is interested in \"apples\" instead of \"hello\".\n\nIn the `MainActivity`, update the following line:\n\n```kotlin\n    PushNotifications.addDeviceInterest(\"apples\")\n```\n\nThat's all we need to do to tell Pusher that this user is interested in apples.\n\n### Authenticated user notifications\n\nIn order to receive personalized messages from Pusher we need to get a token from the Dart server (which we will be building soon).\n\nWe’re going to add an `AsyncTask` to make the request. Update the `MainActivity` to look like the following:\n\n```kotlin\n    // app/src/main/java/com/example/beamstutorial/MainActivity.kt\n    \n    package com.example.beamstutorial\n    \n    import android.os.AsyncTask\n    import android.support.v7.app.AppCompatActivity\n    import android.os.Bundle\n    import android.util.Base64\n    import android.util.Log\n    import com.pusher.pushnotifications.BeamsCallback\n    import com.pusher.pushnotifications.PushNotifications\n    import com.pusher.pushnotifications.PusherCallbackError\n    import com.pusher.pushnotifications.auth.AuthData\n    import com.pusher.pushnotifications.auth.AuthDataGetter\n    import com.pusher.pushnotifications.auth.BeamsTokenProvider\n    \n    class MainActivity : AppCompatActivity() {\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_main)\n    \n            // TODO replace this instance ID with your own\n            val instanceId = \"your_instance_id_here\"\n            PushNotifications.start(getApplicationContext(), instanceId)\n    \n            // Interests\n            PushNotifications.addDeviceInterest(\"apples\")\n    \n            // Authenticated user\n            RegisterMeWithPusher().execute()\n        }\n    \n        class RegisterMeWithPusher : AsyncTask\u003cVoid, Void, Void\u003e() {\n            override fun doInBackground(vararg params: Void): Void? {\n    \n                // hardcoding the username and password both here and on the server\n                val username = \"Mary\"\n                val password = \"mypassword\"\n                val text = \"$username:$password\"\n                val data = text.toByteArray()\n                val base64 = Base64.encodeToString(data, Base64.NO_WRAP)\n    \n                // get the token from the Dart server\n                val serverUrl = \"http://10.0.2.2:8888/token\"\n                val tokenProvider = BeamsTokenProvider(\n                    serverUrl,\n                    object: AuthDataGetter {\n                        override fun getAuthData(): AuthData {\n                            return AuthData(\n                                headers = hashMapOf(\n                                    \"Authorization\" to \"Basic $base64\"\n                                )\n                            )\n                        }\n                    }\n                )\n    \n                // send the token to Pusher\n                PushNotifications.setUserId(\n                    username,\n                    tokenProvider,\n                    object : BeamsCallback\u003cVoid, PusherCallbackError\u003e {\n                        override fun onFailure(error: PusherCallbackError) {\n                            Log.e(\"BeamsAuth\", \n                                  \"Could not login to Beams: ${error.message}\")\n                        }\n                        override fun onSuccess(vararg values: Void) {\n                            Log.i(\"BeamsAuth\", \"Beams login success\")\n                        }\n                    }\n                )\n    \n                return null\n            }\n        }\n    }\n```\n\nDon’t forget to replace the instance ID with your own (from the [Beams dashboard](https://dash.pusher.com/beams)).\n\nIn the [manifest](https://github.com/suragch/beams_dart_server_demo/blob/master/user_app_android/app/src/main/AndroidManifest.xml) add the `INTERNET` permission:\n\n```xml\n    \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n```\n\nAnd since we are using a clear text HTTP connection in this tutorial, we need to also update the manifest to include the following:\n\n```xml\n    \u003capplication\n        android:usesCleartextTraffic=\"true\"\n        ...\n        \u003e\n```\n\nYou should not include this in a production app. Instead, use an HTTPS connection (see [this tutorial](https://pusher.com/tutorials/authentication-server-side-dart) for more explanation). \n\nThat's all we can do for now until the server is running. You can skip the iOS user app section if you like and go on to the admin app section.\n\n\n## iOS user app\n\n![dart-push-notifications-mobile-img-7](//images.ctfassets.net/1es3ne0caaid/4i4XGRI1Hp3GG2lwUyYN2U/ebc0a4726674ce7d24e6c36dc3a7840b/dart-push-notifications-mobile-img-7.png)\n\nCreate a new iOS app. (I'm calling my package name `com.example.beamstutorial`.) Then set it up as described in the [Pusher Beams documentation](https://pusher.com/docs/beams/getting-started/ios/configure-apns). Make sure that you can receive the basic \"Hello world\" notification. I won't repeat those directions here, but there are a couple of things to note:\n\n\n- At the time of this writing, the Cocoa Pods installation had a deprecated API for the Beams `PushNotifications`. The Carthage installation is up-to-date, though. See [this tutorial](https://www.raywenderlich.com/416-carthage-tutorial-getting-started) for help with Carthage. \n- You need to add \"remote-notification\" to the list of your supported `UIBackgroundModes` in your `Info.plist` file. Rather than editing it directly, you can make the change in **Targets \u003e your app Capabilities \u003e Background Modes** (see [this](https://stackoverflow.com/a/45440917) for help). \n- You can't receive push notifications in the iOS simulator. You have to use a real device.\n- Your app should be minimized in order to receive the push notifications.\n\nNow you should have a Pusher Beams account, APNs configured, and an iOS app installed on a real device that receives push notifications.\n\n### Interest notifications\n\nLet's modify the app to tell Pusher that the user is interested in \"apples\" instead of \"hello\".\nIn `AppDelegate.swift`, update the following line:\n\n```swift\n    try? self.pushNotifications.addDeviceInterest(interest: \"apples\")\n```\n\nThat's all we need to do to tell Pusher that this user is interested in apples.\n\n### Authenticated user notifications\n\nIn order to receive personalized messages from Pusher, we need to get a token from the Dart server (which we will be making soon).\n\nOpen `ViewController.swift` and replace it with the following code:\n\n```swift\n    // beamstutorial/ViewController.swift\n    \n    import UIKit\n    import PushNotifications\n    \n    class ViewController: UIViewController {\n        \n        let beamsClient = PushNotifications.shared\n        \n        // hardcoding the username and password both here and on the server\n        let userId = \"Mary\"\n        let password = \"mypassword\"\n        \n        // TODO: As long as your iOS device and development machine are on the same wifi \n        // network, change the following IP to the wifi router IP address where your \n        // Dart server will be running.\n        let serverIP = \"192.168.1.3\"\n    \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            \n            // get the token from the server\n            let serverUrl = \"http://\\(serverIP):8888/token\"\n            let tokenProvider = BeamsTokenProvider(authURL: serverUrl) { () -\u003e AuthData in\n                let headers = [\"Authorization\": self.authHeaderValueForMary()]\n                let queryParams: [String: String] = [:]\n                return AuthData(headers: headers, queryParams: queryParams)\n            }\n            \n            // send the token to Pusher\n            self.beamsClient.setUserId(userId,\n                                       tokenProvider: tokenProvider,\n                                       completion:{ error in\n                guard error == nil else {\n                    print(error.debugDescription)\n                    return\n                }\n                print(\"Successfully authenticated with Pusher Beams\")\n            })\n        }\n        \n        func authHeaderValueForMary() -\u003e String {\n            guard let data = \"\\(userId):\\(password)\".data(using: String.Encoding.utf8)\n                else { return \"\" }\n            let base64 = data.base64EncodedString()\n            return \"Basic \\(base64)\"\n        }\n    }\n```\n\nSince we are using a clear text HTTP connection in this tutorial, we need to also update the `Info.plist` file to include the following:\n\n```xml\n    \u003ckey\u003eNSAppTransportSecurity\u003c/key\u003e\n    \u003cdict\u003e\n        \u003ckey\u003eNSAllowsArbitraryLoads\u003c/key\u003e\n        \u003ctrue/\u003e\n    \u003c/dict\u003e\n```\n\n![dart-push-notifications-mobile-img-8](//images.ctfassets.net/1es3ne0caaid/6RtncxGdEkfFv5An5TIZtW/8756df60b254e0bd29d5167af62254e3/dart-push-notifications-mobile-img-8.png)\n\nYou should not include this in a production app. Instead, use an HTTPS connection (see [this tutorial](https://pusher.com/tutorials/authentication-server-side-dart) for more explanation). \n\nIt's extra tricky getting a real device talking to the Dart server that will be running on our development machine. We can't just connect to localhost like we can when we use the iOS simulator. As I noted in the comments above, if your iPhone and development machine are sharing a wifi network, you can use the router IP address of your development machine. So if you haven't already, update that in the code above. For help finding the IP address, check out the following links:\n\n\n- [Mac](http://osxdaily.com/2011/10/05/find-router-ip-address-mac/) \n- [Windows and Linux](https://stackoverflow.com/a/4779992/3681880) \n\nThat's all we can do for now until the server is running.\n\n\n## Admin app\n\n![dart-push-notifications-mobile-img-9](//images.ctfassets.net/1es3ne0caaid/WrUg65z4ZSbXBZd6jPyyw/b2c60cb13bd49762d1946a96ca68803b/dart-push-notifications-mobile-img-9.png)\n\nWe need a means to trigger the Dart server to talk to Pusher and send the push notifications. I'm going to make a simple iOS app running on the simulator, but you can do it another way if you like. You could user [curl](https://curl.haxx.se/docs/httpscripting.html), [Postman](https://www.getpostman.com/downloads/), or an Android app. If you choose one of those, this is the REST API you will need to set up.\n\n```\n    // send push notification to interests\n    POST http://localhost:8888/admin/interests\n    \n    // send push notification to user\n    POST http://localhost:8888/admin/users\n```\n\nThe authorization header for both of these should be Basic with a username of `admin` and the password as `password123`. Base64 encoded, this would be:\n\n```\n    Authorization: Basic YWRtaW46cGFzc3dvcmQxMjM=\n```\n\n### iOS version of the admin app\n\nIn a new Xcode project, create a simple layout with two buttons:\n\n![dart-push-notifications-mobile-img-10](//images.ctfassets.net/1es3ne0caaid/7bdMKEnVY5lzhEUtLUfItS/f89e6923e636e7023520944c3c26adb0/dart-push-notifications-mobile-img-10.png)\n\n\n\u003e **Note:** This admin app does not send the actual device interest or username in the body of the HTTP request. The reason for that was to keep this tutorial as short as possible by avoiding the need to serialize and deserialize JSON. The push notifications are hardcoded on the server. Simply sending a POST request to the proper route will make the server send the push notifications. \n\nReplace `ViewController.swift` with the following code:\n\n```swift\n    // beams_admin_app/ViewController.swift\n    \n    import UIKit\n    \n    class ViewController: UIViewController {\n        \n        // hardcoding the username and password both here and on the Dart server\n        let username = \"admin\"\n        let password = \"password123\"\n        \n        // using localhost is ok since this app will be running on the simulator\n        let host = \"http://localhost:8888\"\n    \n        // tell server to send a notification to device interests\n        @IBAction func onInterestsButtonTapped(_ sender: UIButton) {\n            \n            // set up request\n            guard let url  = URL(string: \"\\(host)/admin/interests\") else {return}\n            var request = URLRequest(url: url)\n            request.httpMethod = \"POST\"\n            request.setValue(authHeaderValue(), forHTTPHeaderField: \"Authorization\")\n            \n            // send request\n            let task = URLSession.shared.dataTask(with: request) {\n                (data, response, error) in\n                guard let statusCode = (response as? HTTPURLResponse)?.statusCode\n                    else {return}\n                guard let body = data\n                    else {return}\n                guard let responseString = String(data: body, encoding: .utf8)\n                    else {return}\n                \n                print(\"POST result: \\(statusCode) \\(responseString)\")\n            }\n            task.resume()\n        }\n        \n        // Returns the Auth header value for Basic authentication with the username\n        // and password encoded with Base64. In a real app these values would be obtained\n        // from user input.\n        func authHeaderValue() -\u003e String {\n            guard let data = \"\\(username):\\(password)\".data(using: .utf8) else {\n                return \"\"\n            }\n            let base64 = data.base64EncodedString()\n            return \"Basic \\(base64)\" // \"Basic YWRtaW46cGFzc3dvcmQxMjM=\"\n        }\n        \n        // tell server to send notification to authenticated user\n        @IBAction func onUserButtonTapped(_ sender: UIButton) {\n            \n            // set up request\n            guard let url  = URL(string: \"\\(host)/admin/users\") else {return}\n            var request = URLRequest(url: url)\n            request.httpMethod = \"POST\"\n            request.setValue(authHeaderValue(), forHTTPHeaderField: \"Authorization\")\n            \n            // send request\n            let task = URLSession.shared.dataTask(with: request) {\n                (data, response, error) in\n                guard let statusCode = (response as? HTTPURLResponse)?.statusCode\n                    else {return}\n                guard let body = data\n                    else {return}\n                guard let responseString = String(data: body, encoding: .utf8)\n                    else {return}\n                \n                print(\"POST result: \\(statusCode) \\(responseString)\")\n            }\n            task.resume()\n        }\n    }\n```\n\nRemember to hook up the buttons to the `IBAction` methods.\n\nAs before, since we are using a clear text HTTP connection in this tutorial, we need to also update the `Info.plist` file to include the following:\n\n```xml\n    \u003ckey\u003eNSAppTransportSecurity\u003c/key\u003e\n    \u003cdict\u003e\n        \u003ckey\u003eNSAllowsArbitraryLoads\u003c/key\u003e\n        \u003ctrue/\u003e\n    \u003c/dict\u003e\n```\n\n![dart-push-notifications-mobile-img-11](//images.ctfassets.net/1es3ne0caaid/4WaE9wVZI439Jdj33u0ihS/73249a028f3000c9245e23a86e561194/dart-push-notifications-mobile-img-11.png)\n\nThat's it for now. Let's make the Dart server.\n\n\n## Dart server\n\n![dart-push-notifications-mobile-img-12](//images.ctfassets.net/1es3ne0caaid/27Yi4QWxSvuaP3KuCkbClW/63638b6e8e1d2cd4d86585bc9e3c16ef/dart-push-notifications-mobile-img-12.png)\n\nCreate a new Aqueduct server project:\n\n```\n    aqueduct create dart_server\n```\n\n### Dependencies\n\nAt the time of this writing Pusher does not officially support Dart servers, so I created a Dart server SDK based on the [API docs](https://pusher.com/docs/beams/reference/publish-api). It is available on Pub [here](https://pub.dartlang.org/packages/pusher_beams_server). In your server's `pubspec.yaml` file, add the dependency:\n\n```yaml\n    dependencies:\n      pusher_beams_server: ^0.1.4\n```\n\nWe'll set up three routes in `channel.dart`. Open that file and replace it with the following code.\n\n```dart\n    // dart_server/lib/channel.dart\n    \n    import 'package:dart_server/controllers/auth.dart';\n    import 'package:dart_server/controllers/token.dart';\n    import 'package:dart_server/controllers/interests.dart';\n    import 'package:dart_server/controllers/users.dart';\n    import 'dart_server.dart';\n    \n    class DartServerChannel extends ApplicationChannel {\n    \n      // These middleware validators will check the username \n      // and passwords before allowing them to go on. \n      BasicValidator normalUserValidator;\n      AdminValidator adminValidator;\n    \n      @override\n      Future prepare() async {\n        logger.onRecord.listen(\n            (rec) =\u003e print(\"$rec ${rec.error ?? \"\"} ${rec.stackTrace ?? \"\"}\"));\n        normalUserValidator = BasicValidator();\n        adminValidator = AdminValidator();\n      }\n    \n      @override\n      Controller get entryPoint {\n        final router = Router();\n    \n        // user app will get a Pusher auth token here\n        router\n            .route('/token')\n            .link(() =\u003e Authorizer.basic(normalUserValidator))\n            .link(() =\u003e TokenController());\n    \n        // admin app will send push notifications for device interests here\n        router\n            .route('/admin/interests')\n            .link(() =\u003e Authorizer.basic(adminValidator))\n            .link(() =\u003e InterestsController());\n    \n        // admin app will send push notifications to authenticated users here\n        router\n            .route('/admin/users')\n            .link(() =\u003e Authorizer.basic(adminValidator))\n            .link(() =\u003e UsersController());\n    \n        return router;\n      }\n    }\n```\n\nCreate a `controllers` folder in `lib`. Make a file name `auth.dart` where we will put the username and password validation middleware. Paste in the following code:\n\n```dart\n    // dart_server/lib/controllers/auth.dart\n    \n    import 'dart:async';\n    import 'package:aqueduct/aqueduct.dart';\n    \n    // Hardcoding username and passwords both here and in the client apps\n    // admin: password123\n    // Mary: mypassword\n    // hash generated with AuthUtility.generatePasswordHash()\n    // A production app would store these in a database.\n    final Map\u003cString, User\u003e adminUsers = {\n      'admin': User(\n          username: 'admin',\n          saltedPasswordHash: 'ntQLWWIu/nubfZhCEy9sXgwRijuBV+d9ZN2Id3hTLbs=',\n          salt: 'mysalt1'),\n    };\n    final Map\u003cString, User\u003e normalUsers = {\n      'Mary': User(\n          username: 'Mary',\n          saltedPasswordHash: 'JV0R5CH9mnA6rcOGnkzSvIeGkHUvtnnvUCuFBc3XD+4=',\n          salt: 'mysalt2'),\n    };\n    \n    class User {\n      User({this.username, this.saltedPasswordHash, this.salt});\n      String username;\n      String saltedPasswordHash;\n      String salt;\n    }\n    \n    class BasicValidator implements AuthValidator {\n    \n      final _requireAdminPriveleges = false;\n    \n      @override\n      FutureOr\u003cAuthorization\u003e validate\u003cT\u003e(\n          AuthorizationParser\u003cT\u003e parser, T authorizationData,\n          {List\u003cAuthScope\u003e requiredScope}) {\n    \n        // Get the parsed username and password from the basic\n        // authentication header.\n        final credentials = authorizationData as AuthBasicCredentials;\n    \n        // check if user exists\n        User user;\n        if (_requireAdminPriveleges) {\n          user = adminUsers[credentials.username];\n        } else {\n          user = normalUsers[credentials.username];\n        }\n        if (user == null) {\n          return null;\n        }\n    \n        // check if password matches\n        final hash = AuthUtility.generatePasswordHash(credentials.password, user.salt);\n        if (user.saltedPasswordHash == hash) {\n          return Authorization(null, null, this, credentials: credentials);\n        }\n    \n        // causes a 401 Unauthorized response\n        return null;\n      }\n    \n      // This is for OpenAPI documentation. Ignoring for now.\n      @override\n      List\u003cAPISecurityRequirement\u003e documentRequirementsForAuthorizer(\n          APIDocumentContext context, Authorizer authorizer,\n          {List\u003cAuthScope\u003e scopes}) {\n        return null;\n      }\n    }\n    \n    class AdminValidator extends BasicValidator {\n      @override\n      bool get _requireAdminPriveleges =\u003e true;\n    }\n```\n\nNext make a file named `tokens.dart` (in `controllers`) to handle when the user app needs to get a Pusher Beams auth token so that it can receive personalized push notifications. Paste in the following code:\n\n```dart\n    // dart_server/lib/controllers/token.dart\n    \n    import 'dart:async';\n    import 'package:aqueduct/aqueduct.dart';\n    import 'package:pusher_beams_server/pusher_beams_server.dart';\n    import 'package:dart_server/config.dart';\n    \n    class TokenController extends ResourceController {\n      PushNotifications beamsClient;\n    \n      @Operation.get()\n      Future\u003cResponse\u003e generateBeamsTokenForUser() async {\n        \n        // get the username from the already authenticated credentials\n        final username = request.authorization.credentials.username;\n        \n        // generate the token for the user\n        beamsClient ??= PushNotifications(Properties.instanceId, Properties.secretKey);\n        final token = beamsClient.generateToken(username);\n    \n        // return the token to the user\n        return Response.ok({'token':token});\n      }\n    }\n```\n\nAlso in the `controllers` folder, create a file called `interests.dart`. When requested by the admin app, it will tell Pusher to send notifications to users who have subscribed the `apples` interest. Paste in the following code:\n\n```dart\n    // dart_server/lib/controllers/interests.dart\n    \n    import 'dart:async';\n    import 'dart:io';\n    import 'package:aqueduct/aqueduct.dart';\n    import 'package:pusher_beams_server/pusher_beams_server.dart';\n    import 'package:dart_server/config.dart';\n    \n    class InterestsController extends ResourceController {\n      PushNotifications beamsClient;\n    \n      // send push notifications to users who are subscribed to the interest\n      @Operation.post()\n      Future\u003cResponse\u003e notifyInterestedUsers() async {\n        beamsClient ??= PushNotifications(Properties.instanceId, Properties.secretKey);\n    \n        const title = 'Sale';\n        const message = 'Apples are 50% off today!';\n    \n        final fcm = {\n          'notification': {\n            'title': title,\n            'body': message,\n          }\n        };\n        final apns = {\n          'aps': {\n            'alert': {\n              'title': title,\n              'body': message,\n            }\n          }\n        };\n        final response = await beamsClient.publishToInterests(\n          ['apples'],\n          apns: apns,\n          fcm: fcm,\n        );\n    \n        return Response.ok(response.body)..contentType = ContentType.text;\n      }\n    }\n```\n\nAnd again in the `controllers` folder, create a file called `users.dart`. When requested by the admin app, it will tell Pusher to send a personal notification the user `Mary`. Paste in the following code:\n\n```dart\n    // dart_server/lib/controllers/users.dart\n    \n    import 'dart:async';\n    import 'dart:io';\n    import 'package:aqueduct/aqueduct.dart';\n    import 'package:pusher_beams_server/pusher_beams_server.dart';\n    import 'package:dart_server/config.dart';\n    \n    class UsersController extends ResourceController {\n      PushNotifications beamsClient;\n    \n      // send push notification to Mary\n      @Operation.post()\n      Future\u003cResponse\u003e notifyAuthenticatedUsers() async {\n        beamsClient ??= PushNotifications(Properties.instanceId, Properties.secretKey);\n    \n        const title = 'Purchase';\n        const message = 'Hello, Mary. Your purchase of apples will be delivered shortly.';\n    \n        final apns = {\n          'aps': {\n            'alert': {\n              'title': title,\n              'body': message,\n            }\n          }\n        };\n        final fcm = {\n          'notification': {\n            'title': title,\n            'body':\n                message,\n          }\n        };\n        final response = await beamsClient.publishToUsers(\n          ['Mary'],\n          apns: apns,\n          fcm: fcm,\n        );\n        \n        return Response.ok(response.body)..contentType = ContentType.text;\n      }\n    }\n```\n\nIn order not to expose the secret key in GitHub, let’s put it in a configuration file and add that file to `.gitignore`. Create a file called `config.dart` in the `lib` folder.\n\n```dart\n    // dart_server/lib/config.dart\n    \n    // Include this file in .gitignore\n    class Properties {\n      // exchange these values with valid ones from your Beams dashboard\n      static const instanceId = 'your_instance_id_here';\n      static const secretKey = 'your_secret_key_here';\n    }\n```\n\nDon't forget to add the filename to `.gitignore` and also to replace the `instanceId` and `secretKey` with your own (from the [Beams dashboard](https://dash.pusher.com/beams)).\n\nSave all of your changes. We're finally ready to test everything out. \n\n\n## Testing\n\nSet everything up as follows:\n\n### Aqueduct Dart server\n\nStart the Aqueduct server in the terminal with the following command:\n\n```\n    aqueduct serve\n```\n\n### Admin app\n\nStart the admin app in the iOS simulator. (Or use Postman or `curl` or your own Android implementation. See the admin app section above for notes about that.)\n\n### User apps\n\nDepending on what you made, prepare the Android or iOS user app (or both):\n\n\n- Install the Android user app on an Android emulator.\n- Install the iOS user app on a real device connected to the same wifi network as your Aqueduct server. Remember to update the router IP of the server in your app.\n\nMinimize the user app so that it is in the background.\n\n### Putting it all together\n\n![dart-push-notifications-mobile-demo](//images.ctfassets.net/1es3ne0caaid/7gDJqRlD9mmDfFdTsLRbTl/63725c8381d01256422169a1971d739b/dart-push-notifications-mobile-demo.gif)\n\n\n- Press the first button on the admin app to notify users interested in \"apples\". You should see a notification pop up on the user app.\n- Press the second button on the admin app to notify the user \"Mary\". You should see a notification pop up on the user app.\n\nHopefully it worked for you. If it didn’t check the logs, and make sure you remembered to do the following tasks:\n\n\n- You are using the correct instance ID in the iOS `AppDelegate.swift`, the Android `MainActivity.kt`, and the Dart `config.dart`.\n- You hooked up the buttons to the code in the iOS admin app.\n- You iOS user app is on the same wifi network as your Dart server and has the correct router IP for the Dart server.\n\n\n## Conclusion\n\nToday we learned how to send push notifications from a Dart server to Android and iOS. \n\nIn our contrived example, we sent a message to a single user who was interested in \"apples\". If there had been a hundred or even a thousand users who were all interested in apples, the message would have gone out to all of them. Users can subscribe to different interests and you can use this to target your notification messages to appropriate groups of users.\n\nWe also sent a personalized message to an authenticated user. This ability allows us to send private updates to users for things that only apply to them.\n\nYou’ve got the technical know-how now. Now use your imagination to build something amazing! (Or at least don’t make something annoying . . . like an app that spams its users with push notifications 20 times a day. I borrowed my mom’s iPhone to make this tutorial and she was wondering why she keeps getting notifications about apples. And who’s Mary anyway? Oops.)\n\nThe source code for the projects in this tutorial are available on [GitHub](https://github.com/suragch/beams_dart_server_demo). Also check out the Pusher Beams Dart server SDK [documentation](https://github.com/suragch/pusher_beams_dart_server).","metaTitle":"Sending push notifications from Dart to Android and iOS","metaDescription":"Learn how to send push notifications from a Dart server to Android and iOS. This tutorial walks you through building the backend in Dart, before creating simple demo apps for both Android and iOS. Full code samples are provided."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"7fYYLRlh4h5Z7haxcMUTs5","type":"Entry","createdAt":"2019-06-04T19:20:39.812Z","updatedAt":"2019-06-04T19:20:39.812Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"AWS Lambda running Java and Pusher Beams for Android push notifications","url":"lambda-java-android-push-notifications","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"9VkyxkESQ0IQmyKy8wq6C","type":"Entry","createdAt":"2018-09-18T18:40:03.858Z","updatedAt":"2018-09-18T18:40:03.858Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christopher Batin","url":"christopher-batin","email":"chris@batin.me","twitter":"https://twitter.com/cjbatin","github":"https://github.com/cjbatin/","guestWriter":true}}],"projectRepo":"https://github.com/cjbatin/AWS-Lambda-running-Java-and-Pusher-Beams-for-Android-Notifications","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6x89hfueemQIu9tGMyKa0a","type":"Entry","createdAt":"2019-03-13T18:42:28.682Z","updatedAt":"2019-03-13T18:42:28.682Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Amazon Web Services","url":"amazon-web-services","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1hvzJaMiAkEQOq088wwo4O","type":"Entry","createdAt":"2018-02-12T14:50:04.128Z","updatedAt":"2018-02-26T12:31:15.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Java","url":"java","type":"language"}}],"reviewDate":"2019-06-04","description":"Learn how to send push notifications from AWS Lambda to an Android app, using Pusher Beams. Build a simple demo app and create a Lambda function using Java. Upload and test the function using Eclipse.","prerequisite":"You will need the Eclipse IDE and Android Studio 3.3.2+ installed on your machine.","content":"## Introduction\n\nPusher Beams allows you to customize push notifications you send to your devices via a server. However it can be expensive to run a server 24 hours a day 7 days a week and we may only need to send notifications every so often. This is where AWS Lambda can help. Lambda functions are serverless and work on a pay as you go model (with a generous free tier). This means that you only pay for when you use the function. We’re going to explore how we can setup Pusher Beams on an Android client using an AWS Lambda function running Java to trigger the notifications.\n\n\n## Prerequisites\n\n- A free AWS account. You can create one [here](https://aws.amazon.com).\n- A free Pusher account. You can create one [here](https://dash.pusher.com/authenticate).\n- A free Google Firebase account. You can create one [here](https://firebase.google.com).\n- Eclipse IDE for Java Developers installed on your machine. Install instructions [here](https://www.eclipse.org/downloads/).\n- AWS Toolkit for Eclipse installed and setup. Follow the instructions [here](https://docs.aws.amazon.com/toolkit-for-eclipse/v1/user-guide/getting-started.html).\n- Android Studio 3.3.2+\n- An understanding of Android development and Android Studio environment.\n\n\n## Create your Android application\n\nWe will need to have a user that has registered for notifications and signed up for an interest we will call “hello”, so we can test out our implementation. We’re going to create a very basic Android app that doesn’t actually show anything to the user except for the notification on the lock screen.\n\nCreate a new **Empty Activity** project using Android Studio and name it something like LambdaPush. Provide a **Package name** and remember this as you will need it for completing the Firebase set up. We will be using **Kotlin** as the language choice for this tutorial and supporting Android 16+ (Jelly Bean). \n\n### Firebase set up\n\nLog in to your Firebase account [here](https://firebase.google.com) and go to your console. If you do not already have a project created you will need to create one and name it anything you like, if you have a project select it. Within the **Project Overview** page select **Add App** and follow the instruction for creating a new Android application. \n\nOnce you have completed the setup for your Android app you will be returned to the dashboard. You will need to go to the project settings (found within the “settings cog” in the top left). Once in the project settings select the **Cloud Messaging** tab. Copy the **Server Key** you will need it for setting up your Pusher Beams instance.\n\n![lambda-android-firebase](//images.ctfassets.net/1es3ne0caaid/2cbkn38uhTDGt2L1MBWDfN/1ed0cf684bfe4951f2253207aec4fa1a/lambda-android-firebase.png)\n\n### Creating a Pusher Beams instance\n\nLogin or create an account to access your dashboard [here](https://dash.pusher.com). Create a new beams instance using the dashboard.\n\n![lambda-android-beams](//images.ctfassets.net/1es3ne0caaid/1hOmThI9eg88vgMj2BpI0f/0222f81070a933b7ad2a449159bbe05c/lambda-android-beams.png)\n\nComplete step one of the Android setup guide, by providing your FCM server key you copied earlier and **Continue**. We will pick up the remainder later on in this tutorial. Press the **X** to exit the setup guide and you will be returned to your dashboard for that instance. Scroll to the bottom of the page and you will find your Beams instance ID and secret key, make note of these you will need them later.\n\n\n### Adding the SDKs\n\nOpen your app level `build.gradle` file and add the following into your dependencies:\n\n```\n    // app/build.gradle\n    ...\n    dependencies {\n     ...\n     implementation 'com.google.firebase:firebase-messaging:17.1.0'\n     implementation 'com.pusher:push-notifications-android:1.4.0'\n     ...\n    }\n    ...\n```\n\nHere we are adding the Firebase messaging SDK and the Pusher Beams SDK. You should already have the Google Service SDK and `google-services.json` added to your project when setting up the Firebase app.\n\nSynchronize Gradle by pressing the **Sync Now** button.\n\n### Initialize Pusher Beams\n\nOpen your main activity and add the following import:\n\n```kotlin\n    import com.pusher.pushnotifications.PushNotifications\n```\n\nAdd the following to your `onCreate` function:\n\n```kotlin\n    PushNotifications.start(applicationContext, \"YOUR_INSTANCE_ID\")\n    PushNotifications.addDeviceInterest(\"hello\")\n```\n\nRemember to replace `YOUR_INSTANCE_ID` with the instance id from your Pusher Beams console and run the application.\n\n## Create your Lambda function\n\n### Writing our function\n\nOpen your Eclipse IDE and press **CMD + N** this will open the new project wizard. Expand the **AWS** folder (make sure you have the AWS Toolkit installed if you don’t see this) and select **AWS Lambda Java Project** and click **Next.** \n\nIn the next window provide a **Project name, Group ID, Artifact ID** and **Class Name**. You may leave these as the default if you wish. For the **Input Type,** choose **Custom,** to complete the set up select **Finish**.\n\n![lambda-android-eclipse-1](//images.ctfassets.net/1es3ne0caaid/5BMNNRI9EjP3NWNdp6hd6E/58dca3589a046575935abc84aee9cdcb/lambda-android-eclipse-1.png)\n\nOnce the project has finished setting up open the `pom.xml`. Add the following within your dependencies:\n\n```xml\n    // pom.xml\n    \u003cdependencies\u003e\n      ...\n      \u003cdependency\u003e\n          \u003cgroupId\u003ecom.pusher\u003c/groupId\u003e\n          \u003cartifactId\u003epush-notifications-server-java\u003c/artifactId\u003e\n          \u003cversion\u003e1.1.0\u003c/version\u003e\n      \u003c/dependency\u003e\n      ...\n    \u003c/dependencies\u003e\n```\n\nCreate a new file in the lambda package called `RequestClass.java`. Within this file add the following: \n\n```java\n    // src/main/java/RequestClass.java\n    package com.amazonaws.lambda.demo;\n    \n    public class RequestClass {\n            String title;\n            String message;\n            \n            public String getTitle() {\n                    return title;\n            }\n            \n            public void setTitle(String title) {\n                    this.title = title;\n            }\n            \n            public String getMessage() {\n                    return message;\n            }\n            \n            public void setMessage(String message) {\n                    this.message = message;\n            }\n             \n            public RequestClass(String title, String message) {\n                    this.title = title;\n                    this.message = message;\n            }\n            \n            public RequestClass() {\n            }\n    }\n```\n\nThis code will be used by our Lambda function in order to parse the data we will pass in to the function to create our push message. Next open your `LambdaFunctionHandler.java` and replace the contents with:\n\n```java\n    // src/main/java/RequestClass.java\n    package com.amazonaws.lambda.demo;\n    \n    import java.util.List;\n    import java.io.IOException;\n    import java.net.URISyntaxException;\n    import java.util.ArrayList;\n    import java.util.Arrays;\n    import java.util.HashMap;\n    import java.util.Map;\n    import com.amazonaws.services.lambda.runtime.Context;\n    import com.amazonaws.services.lambda.runtime.RequestHandler;\n    import com.pusher.pushnotifications.PushNotifications;\n    \n    public class LambdaFunctionHandler implements RequestHandler\u003cRequestClass, String\u003e {\n    \n        @Override\n        public String handleRequest(RequestClass request, Context context) {\n            String instanceId = \"YOUR_INSTANCE_ID\";\n            String secretKey = \"YOUR_SECRET_KEY\";\n    \n            PushNotifications beamsClient = new PushNotifications(instanceId, secretKey);\n            List\u003cString\u003e interests = Arrays.asList(\"hello\");\n    \n            Map\u003cString, Map\u003e publishRequest = new HashMap();\n            Map\u003cString, String\u003e fcmNotification = new HashMap();\n            fcmNotification.put(\"title\", request.title);\n            fcmNotification.put(\"body\", request.message);\n            Map\u003cString, Map\u003e fcm = new HashMap();\n            fcm.put(\"notification\", fcmNotification);\n            publishRequest.put(\"fcm\", fcm);\n    \n            try {\n              beamsClient.publishToInterests(interests, publishRequest);\n              return \"Push sent!\";\n            } catch (IOException e) {\n              e.printStackTrace();\n              return \"Push failed!\";\n            } catch (InterruptedException e) {\n              e.printStackTrace();\n              return \"Push failed!\";\n            } catch (URISyntaxException e) {\n              e.printStackTrace();\n              return \"Push failed!\";\n            }\n    \n        }\n    }\n```\n\nThis code will be used by our Lambda function later on to publish notifications to devices that are registered for the `hello` interest. We use the `request.title` and `request.message` to form part of the FCM notification. We’ll look at this in more detail when we come to test our integration. Remember to replace `YOUR_INSTANCE_ID` and `YOUR_SECRET_KEY` with the credentials from your Pusher Beams console.\n\n### Deploy your code\n\n**Right click** in the eclipse editor select **AWS Lambda → Upload function to AWS Lambda.**\n\n![lambda-android-eclipse-2](//images.ctfassets.net/1es3ne0caaid/UyD8yNMoB4gc1houuDXmT/86b3bcf970d0c6b2abd89c1e24bfa70f/lambda-android-eclipse-2.png)\n\nOn the next screen select a IAM role if you have one. If you don’t use the **Create** button to make a new one and call it “lambda_basic_execution”.  Next we would need to create a bucket on the AWS console [here](https://console.aws.amazon.com/s3/buckets/) if we don’t already have one. Make sure that there are permissions to the root user. And lastly but most importantly make sure that the user created initially has all of the permissions required - AmazonS3FullAcces. Leave everything else the same and click **Finish** to upload your code to AWS Lambda.\n\n\u003e **Note:** Always make sure the bucket region matches the Lambda target region.\n\n\n## Testing our implementation\n\nReturn to your Lambda function code in the Eclipse IDE. **Right-click** and select **AWS Lambda → Run function on AWS Lambda.** A dialog box will appear, make sure your lambda function is selected from the dropdown list and that the **Enter the JSON input for your function** radio button is selected. In text field provided add the following:\n\n```json\n    {\"title\": \"hello\", \"message\": \"Just a friendly hello\"}  \n```\n\nNotice how our keys in the JSON object are title and message. These are the event keys we were using in our code to provide the title and body for the push notification. \n\n![lambda-android-eclipse-3](//images.ctfassets.net/1es3ne0caaid/4GzCV0jAAMevpdd0dviJDv/373bf7aa77dcaf7cdcb714083e2d59e0/lambda-android-eclipse-3.png)\n\nIf everything has worked as expected you should receive a push to your device.\n\n![lambda-android-push-notification](//images.ctfassets.net/1es3ne0caaid/6UfD7jfn25P5RFo1lYtcGd/d2906f074e29b260b8dc900194ebb493/lambda-android-push-notification.png)\n\n## Conclusion\n\nWe’ve learnt how to create an AWS Lambda function using Java that can publish a push notification using Pusher Beams to an Android device. The source code for this tutorial can be found [here](https://github.com/cjbatin/AWS-Lambda-running-Java-and-Pusher-Beams-for-Android-Notifications).","metaTitle":"Lambda with Java and Pusher Beams for Android notifications","metaDescription":"Learn how to send push notifications from AWS Lambda to an Android app, using Pusher Beams. Build a simple demo app and create a Lambda function using Java. Upload and test the function using Eclipse."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5qK7q8goV55NQ7dSxdmqor","type":"Entry","createdAt":"2019-05-22T08:24:37.644Z","updatedAt":"2019-05-22T08:24:37.644Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"AWS Lambda running Go and Pusher Beams for Android push notifications","url":"lambda-go-android-push-notifications","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"9VkyxkESQ0IQmyKy8wq6C","type":"Entry","createdAt":"2018-09-18T18:40:03.858Z","updatedAt":"2018-09-18T18:40:03.858Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christopher Batin","url":"christopher-batin","email":"chris@batin.me","twitter":"https://twitter.com/cjbatin","github":"https://github.com/cjbatin/","guestWriter":true}}],"projectRepo":"https://github.com/cjbatin/Go-Lambda-and-Pusher-Beams-for-Android-Notifications","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6x89hfueemQIu9tGMyKa0a","type":"Entry","createdAt":"2019-03-13T18:42:28.682Z","updatedAt":"2019-03-13T18:42:28.682Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Amazon Web Services","url":"amazon-web-services","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}}],"reviewDate":"2019-05-22","description":"Learn how to send push notifications from AWS Lambda to an Android app, using Pusher Beams. Build a simple demo app and create a Lambda function using Go. Upload and test the function.","prerequisite":"You will need Go 1.1+ and Android Studio 3.3.2+ installed on your machine.","content":"## Introduction\n\nPusher Beams allows you to customize push notifications you send to your devices via a server. However it can be expensive to run a server 24 hours a day 7 days a week and we may only need to send notifications every so often. This is where AWS Lambda can help. Lambda functions are serverless and work on a pay as you go model (with a generous free tier). This means that you only pay for when you use the function. We’re going to explore how we can setup Pusher Beams on an Android client using an AWS Lambda function running Go to trigger the notifications.\n\n\n## Prerequisites\n\n- A free AWS account. You can create one [here](https://aws.amazon.com).\n- A free Pusher account. You can create one [here](https://dash.pusher.com/authenticate).\n- A free Google Firebase account. You can create one [here](https://firebase.google.com).\n- Go 1.x installed on your machine. Install instructions [here](https://golang.org/doc/install).\n- Android Studio 3.3.2+\n- An understanding of Android development and Android Studio environment.\n\n\n## Create your Android application\n\nWe will need to have a user that has registered for notifications and signed up for an interest we will call “hello”, so we can test out our implementation. We’re going to create a very basic Android app that doesn’t actually show anything to the user except for the notification on the lock screen.\n\nCreate a new **Empty Activity** project using Android Studio and name it something like LambdaPush. Provide a **Package name** and remember this as you will need it for completing the Firebase set up. We will be using **Kotlin** as the language choice for this tutorial and supporting Android 16+ (Jelly Bean). \n\n### Firebase set up\n\nLog in to your Firebase account [here](https://firebase.google.com) and go to your console. If you do not already have a project created you will need to create one and name it anything you like, if you have a project select it. Within the **Project Overview** page select **Add App** and follow the instruction for creating a new Android application. \n\nOnce you have completed the setup for your Android app you will be returned to the dashboard. You will need to go to the project settings (found within the “settings cog” in the top left). Once in the project settings select the **Cloud Messaging** tab. Copy the **Server Key** you will need it for setting up your Pusher Beams instance.\n\n![lambda-android-firebase](//images.ctfassets.net/1es3ne0caaid/2cbkn38uhTDGt2L1MBWDfN/1ed0cf684bfe4951f2253207aec4fa1a/lambda-android-firebase.png)\n\n### Creating a Pusher Beams instance\nLogin or create an account to access your dashboard [here](https://dash.pusher.com). Create a new beams instance using the dashboard.\n\n![lambda-android-beams](//images.ctfassets.net/1es3ne0caaid/1hOmThI9eg88vgMj2BpI0f/0222f81070a933b7ad2a449159bbe05c/lambda-android-beams.png)\n\nComplete step one of the Android setup guide, by providing your FCM server key you copied earlier and **Continue**. We will pick up the remainder later on in this tutorial. Press the **X** to exit the setup guide and you will be returned to your dashboard for that instance. Scroll to the bottom of the page and you will find your Beams instance ID and secret key, make note of these you will need them later.\n\n\n### Adding the SDKs\n\nOpen your app level `build.gradle` file and add the following into your dependencies:\n\n```\n    // app/build.gradle\n    ...\n    dependencies {\n     ...\n     implementation 'com.google.firebase:firebase-messaging:17.1.0'\n     implementation 'com.pusher:push-notifications-android:1.4.0'\n     ...\n    }\n    ...\n```\n\nHere we are adding the Firebase messaging SDK and the Pusher Beams SDK. You should already have the Google Service SDK and `google-services.json` added to your project when setting up the Firebase app.\n\nSynchronize Gradle by pressing the **Sync Now** button.\n\n### Initialize Pusher Beams\n\nOpen your main activity and add the following import:\n\n```kotlin\n    import com.pusher.pushnotifications.PushNotifications\n```\n\nAdd the following to your `onCreate` function:\n\n```kotlin\n    PushNotifications.start(applicationContext, \"YOUR_INSTANCE_ID\")\n    PushNotifications.addDeviceInterest(\"hello\")\n```\n\nRemember to replace `YOUR_INSTANCE_ID` with the instance id from your Pusher Beams console and run your application.\n\n## Create your Lambda function\n\n### Writing our function\n\nWe will need to install our packages and write our function on our local machine before we can upload it to a Lambda function. Create a new working directory on your local machine and within that create a file named `index.go`.  Open your `index.go` file and add the following code:\n\n```go\n    // index.go\n    package main\n    import (\n            \"fmt\"\n            \"context\"\n            \"github.com/pusher/push-notifications-go\"\n            \"github.com/aws/aws-lambda-go/lambda\"\n    )\n    \n    type MyEvent struct {\n            Title string `json:\"title\"`\n            Message string `json:\"message\"`\n    }\n    \n    const (\n      instanceId = \"YOUR_INSTANCE_ID\"\n      secretKey  = \"YOUR_SECRET_KEY\"\n    )\n    \n    func HandleRequest(ctx context.Context, event MyEvent) (string, error) {\n            beamsClient, _ := pushnotifications.New(instanceId, secretKey)\n            publishRequest := map[string]interface{}{\n              \"fcm\": map[string]interface{}{\n                \"notification\": map[string]interface{}{\n                  \"title\": event.Title,\n                  \"body\":  event.Message,\n                },\n              },\n            }\n    \n            pubId, err := beamsClient.PublishToInterests([]string{\"hello\"}, publishRequest)\n            if err != nil {\n                    fmt.Println(err)\n            } else {\n                    fmt.Println(\"Publish Id:\", pubId)\n            }\n            return fmt.Sprintf(\"Completed\"), nil\n    }\n    \n    func main() {\n      lambda.Start(HandleRequest)\n    }\n```\n\nThis code will be used by our Lambda function later on to publish notifications to devices that our registered for the `hello` interest. Note how we import both the Pusher notifications Go package and the AWS Lambda package. We use the `event.title` and `event.message` to form part of the message. We’ll look at this in more detail when we come to test our integration. Remember to replace `YOUR_INSTANCE_ID` and `YOUR_SECRET_KEY` with the credentials from your Pusher Beams console.\n\nRun the following commands to fetch packages and build your code:\n\n```\n    $ go get github.com/aws/aws-lambda-go/lambda\n    $ go get github.com/pusher/push-notifications-go\n    $ GOOS=linux go build index.go\n```\n\n\u003e **Note:** If you are running on windows you should follow the instructions [here](https://docs.aws.amazon.com/lambda/latest/dg/lambda-go-how-to-create-deployment-package.html) for building your code.\n\nNext we need to compress the directory we have been working in and make a .zip such that we can upload our code and dependencies to our function later on. Name your zip file `GoLambda.zip`.\n\n### Creating a Lambda function\n\nLog in or create an account to access your AWS console [here](https://aws.amazon.com/console/). Once you are logged in use the search bar to find Lambda and select it from the list.\n\n![lambda-android-aws-console](//images.ctfassets.net/1es3ne0caaid/18OcS1oCS83T7s9vnxCCXi/ee834ddc5f300dd9c61fcbc9e69385e4/lambda-android-aws-console.png)\n\n\u003e **Note:** Set your AWS region to N. Virginia in the top right if it is not already.\n\nYou should be redirected to the Lambda service and see an option **Create Function**, select this. Choose the **Author from Scratch** option at the top of the next page. Complete the basic setup as shown in the image below.\n\n![lambda-android-aws-new-function-go](//images.ctfassets.net/1es3ne0caaid/2cRfMkJAkgQW2ClPfW6MxC/a44f2ae4ddb406ea0ad0518c877e5e71/lambda-android-aws-new-function-go.png)\n\n- **Function name** - Name this whatever you want for example “Pusher-Beams-Go”.\n- **Runtime** - We will be using Go 1.x so select this from the drop down list.\n- **Execution role** - Select **Create a new role from AWS policy templates**. If you already have a role you would rather use you can select **Use an existing role**.\n- **Role name** - You can name this anything you like for example “lambda_basic_execution”.\n- **Policy templates** - You can leave this blank.\n\nOnce complete select the **Create function** button at the bottom of the page. You should be redirected to your Lambda function console once it has been created. We can ignore the **Designer** section of the console. This area allows us to tie together different AWS services, you may wish to use this with a production function such that it can be accessed from the wider internet. However, we will just be using the test service for the purpose of this tutorial.\n\nNow we need to upload our code. In the **Function code** section select the **Upload a .zip file** from the **Code entry type** dropdown menu. Use the **Upload** button to search your local machine for the `GoLambda.zip`  we created earlier. Finally change the **Handler** to be `GoLambda/index`, this will allow AWS Lambda to find our function within our folder. If everything looks like the below image click **Save** in the top right. \n\n![lambda-android-aws-function-code-go](//images.ctfassets.net/1es3ne0caaid/MInhoA5xe2k2MZYigK83z/d3eda9a767094fa3e3b17fc6cf98f3e5/lambda-android-aws-function-code-go.png)\n\n\u003e **Note:** Depending on how you have zipped your directory you may be able to leave the handler as the default `index`. Likewise if you have named your Go file something other than index e.g “main” your handler should be this.\n\n## Testing our implementation\n\nIn the top right of your Lambda console select the **Test** button. We need to configure a test option. Create a new test event like the below image. Notice how our keys in the JSON object are title and message. These are the event keys we were using in our code to provide the title and body for the push notification. \n\n![lambda-android-aws-test-event](//images.ctfassets.net/1es3ne0caaid/5Ev5UQmYJrFxy6Di54U5aZ/aa89cf11953ed2d8d6af1f654f4070eb/lambda-android-aws-test-event.png)\n\nOnce you are done press the **Create** button at the bottom. The dialog box will close and the test **HelloTest** should be selected in the dropdown menu by the **Test** button, Press **Test.** If everything has worked as expected you should receive a push to your device and a similar log output from your Lambda console.\n\n![lambda-android-aws-test-success](//images.ctfassets.net/1es3ne0caaid/4RRkCakfjmlwFEUbZq7ewT/ae49546e38e89bf25fbfc9bb66dd3ee4/lambda-android-aws-test-success.png)\n![lambda-android-push-notification](//images.ctfassets.net/1es3ne0caaid/6UfD7jfn25P5RFo1lYtcGd/d2906f074e29b260b8dc900194ebb493/lambda-android-push-notification.png)\n\n## Conclusion\n\nWe’ve learnt how to create an AWS Lambda function using Go that can publish a push notification using Pusher Beams to an Android device. The source code for this tutorial can be found [here](https://github.com/cjbatin/Go-Lambda-and-Pusher-Beams-for-Android-Notifications).","metaTitle":"Lambda with Go and Pusher Beams for Android notifications","metaDescription":"Learn how to send push notifications from AWS Lambda to an Android app, using Pusher Beams. Build a simple demo app and create a Lambda function using Go. Upload and test the function."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"74I7GB9PMWRkpoSUTTUecI","type":"Entry","createdAt":"2019-05-17T12:57:35.310Z","updatedAt":"2019-05-17T12:57:35.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"AWS Lambda running Node.js and Pusher Beams for Android push notifications","url":"lambda-node-android-push-notifications","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"9VkyxkESQ0IQmyKy8wq6C","type":"Entry","createdAt":"2018-09-18T18:40:03.858Z","updatedAt":"2018-09-18T18:40:03.858Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christopher Batin","url":"christopher-batin","email":"chris@batin.me","twitter":"https://twitter.com/cjbatin","github":"https://github.com/cjbatin/","guestWriter":true}}],"projectRepo":"https://github.com/cjbatin/Nodejs-Lambda-Pusher-Beams-for-Android-Notifications","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6x89hfueemQIu9tGMyKa0a","type":"Entry","createdAt":"2019-03-13T18:42:28.682Z","updatedAt":"2019-03-13T18:42:28.682Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Amazon Web Services","url":"amazon-web-services","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2019-05-17","description":"Learn how to send push notifications from AWS Lambda to an Android app, using Pusher Beams. Build a simple demo app and create a Lambda function using Node.js. Upload and test the function.","prerequisite":"You will need Node 8.10+ and Android Studio 3.3.2+ installed on your machine.","content":"## Introduction\n\nPusher Beams allows you to customize push notifications you send to your devices via a server. However it can be expensive to run a server 24 hours a day 7 days a week and we may only need to send notifications every so often. This is where AWS Lambda can help. Lambda functions are serverless and work on a pay as you go model (with a generous free tier). This means that you only pay for when you use the function. We’re going to explore how we can setup Pusher Beams on an Android client using an AWS Lambda function running NodeJS to trigger the notifications.\n\n\n## Prerequisites\n\n- A free AWS account. You can create one [here](https://aws.amazon.com).\n- A free Pusher account. You can create one [here](https://dash.pusher.com/authenticate).\n- A free Google Firebase account. You can create one [here](https://firebase.google.com).\n- NodeJS 8.10+ installed on your local machine. Download [here](https://nodejs.org/en/).\n- Android Studio 3.3.2+\n- An understanding of Android development and Android Studio environment.\n\n\n## Create your Android application\n\nWe will need to have a user that has registered for notifications and signed up for an interest we will call “hello”, so we can test out our implementation. We’re going to create a very basic Android app that doesn’t actually show anything to the user except for the notification on the lock screen.\n\nCreate a new **Empty Activity** project using Android Studio and name it something like LambdaPush. Provide a **Package name** and remember this as you will need it for completing the Firebase set up. We will be using **Kotlin** as the language choice for this tutorial and supporting Android 16+ (Jelly Bean). \n\n### Firebase set up\n\nLog in to your Firebase account [here](https://firebase.google.com) and go to your console. If you do not already have a project created you will need to create one and name it anything you like, if you have a project select it. Within the **Project Overview** page select **Add App** and follow the instruction for creating a new Android application. \n\nOnce you have completed the setup for your Android app you will be returned to the dashboard. You will need to go to the project settings (found within the “settings cog” in the top left). Once in the project settings select the **Cloud Messaging** tab. Copy the **Server Key** you will need it for setting up your Pusher Beams instance.\n\n![lambda-android-firebase](//images.ctfassets.net/1es3ne0caaid/2cbkn38uhTDGt2L1MBWDfN/1ed0cf684bfe4951f2253207aec4fa1a/lambda-android-firebase.png)\n\n### Creating a Pusher Beams instance\n\nLogin or create an account to access your dashboard [here](https://dash.pusher.com). Create a new beams instance using the dashboard.\n\n![lambda-android-beams](//images.ctfassets.net/1es3ne0caaid/1hOmThI9eg88vgMj2BpI0f/0222f81070a933b7ad2a449159bbe05c/lambda-android-beams.png)\n\nComplete step one of the Android setup guide, by providing your FCM server key you copied earlier and **Continue**. We will pick up the remainder later on in this tutorial. Press the **X** to exit the setup guide and you will be returned to your dashboard for that instance. Scroll to the bottom of the page and you will find your Beams instance ID and secret key, make note of these you will need them later.\n\n\n### Adding the SDKs\n\nOpen your app level `build.gradle` file and add the following into your dependencies:\n\n```\n    // app/build.gradle\n    ...\n    dependencies {\n     ...\n     implementation 'com.google.firebase:firebase-messaging:17.1.0'\n     implementation 'com.pusher:push-notifications-android:1.4.0'\n     ...\n    }\n    ...\n```\n\nHere we are adding the Firebase messaging SDK and the Pusher Beams SDK. You should already have the Google Service SDK and `google-services.json` added to your project when setting up the Firebase app.\n\nSynchronize Gradle by pressing the **Sync Now** button.\n\n### Initialize Pusher Beams\n\nOpen your main activity and add the following import:\n\n```kotlin\n    import com.pusher.pushnotifications.PushNotifications\n```\n\nAdd the following to your `onCreate` function:\n\n```kotlin\n    PushNotifications.start(applicationContext, \"YOUR_INSTANCE_ID\")\n    PushNotifications.addDeviceInterest(\"hello\")\n```\n\nRemember to replace `YOUR_INSTANCE_ID` with the instance id from your Pusher Beams console and run your application.\n\n\n## Create your Lambda function\n\n### Writing our function\n\nWe will need to install our packages and write our function on our local machine before we can upload it to a Lambda function. Create a new working directory on your local machine and within that create a file named `index.js`. Run the following command in your terminal working directory:\n\n```\n    $ npm init -y\n```\n\nPress the **Return** key for each of the commands and run the following commands:\n\n```\n    $ npm install async --save\n    $ npm install @pusher/push-notifications-server --save\n```\n\nOpen your `index.js` file and add the following code:\n\n```js\n    // index.js\n    exports.handler = function(event, context, callback) {\n        const PushNotifications = require('@pusher/push-notifications-server');\n        let beamsClient = new PushNotifications({\n          instanceId: 'YOUR_INSTANCE_ID',\n          secretKey: 'YOUR_SECRET_KEY'\n        });\n        beamsClient.publishToInterests(['hello'], {\n              fcm: {\n                notification: {\n                  \"title\": event.title,\n                  \"body\": event.message\n                }\n              }\n        }).then((publishResponse) =\u003e {\n           callback(null, 'Just published:' + publishResponse.publishId);\n        }).catch((error) =\u003e {\n          callback(error);\n        });\n    };\n```\n\nThis code will be used by our Lambda function later on to publish notifications to devices that our registered for the `hello` interest. We use the `event.title` and `event.message` to form part of the message. We’ll look at this in more detail when we come to test our integration. Remember to replace `YOUR_INSTANCE_ID` and `YOUR_SECRET_KEY` with the credentials from your Pusher Beams console.\n\nNext we need to compress the directory we have been working in and make a .zip such that we can upload our code and dependencies to our function later on. Name your zip file `NodeJS.zip`.\n\n### Creating a Lambda function\n\nLog in or create an account to access your AWS console [here](https://aws.amazon.com/console/). Once you are logged in use the search bar to find Lambda and select it from the list.\n\n![lambda-android-aws-console](//images.ctfassets.net/1es3ne0caaid/18OcS1oCS83T7s9vnxCCXi/ee834ddc5f300dd9c61fcbc9e69385e4/lambda-android-aws-console.png)\n\n\u003e **Note:** Set your AWS region to N. Virginia in the top right if it is not already.\n\nYou should be redirected to the Lambda service and see an option **Create Function**, select this. Choose the **Author from Scratch** option at the top of the next page. This will provide us a basic “hello world” template we can use to create our function. Complete the basic setup as shown in the image below.\n\n![lambda-android-aws-new-function-node](//images.ctfassets.net/1es3ne0caaid/7wer7FKpZ592xcpHlcM4TY/5d857bd9d33274920e997ddb1b1bdfac/lambda-android-aws-new-function-node.png)\n\n- **Function name** - Name this whatever you want for example “Pusher-Beams-NodeJS”.\n- **Runtime** - We will be using Node.js 8.10 so select this from the drop down list.\n- **Execution role** - Select **Create a new role from AWS policy templates**. If you already have a role you would rather use you can select **Use an existing role**.\n- **Role name** - You can name this anything you like for example “lambda_basic_execution”.\n- **Policy templates** - You can leave this blank.\n\nOnce complete select the **Create function** button at the bottom of the page. You should be redirected to your Lambda function console once it has been created. We can ignore the **Designer** section of the console. This area allows us to tie together different AWS services, you may wish to use this with a production function such that it can be accessed from the wider internet. However, we will just be using the test service for the purpose of this tutorial.\n\nNow we need to upload our code. In the **Function code** section select the **Upload a .zip file** from the **Code entry type** dropdown menu. Use the **Upload** button to search your local machine for the `NodeJS.zip`  we created earlier. Finally change the **Handler** to be `NodeJS/index.handler`, this will allow AWS Lambda to find our function within our folder. If everything looks like the below image click **Save** in the top right. \n\n![lambda-android-aws-function-code-node](//images.ctfassets.net/1es3ne0caaid/7aB4QyAf5guLt8YN3EUk1n/2d77f5c14d1363885d79ecbf17bb8186/lambda-android-aws-function-code-node.png)\n\n\u003e **Note:** Depending on how you have zipped your directory you may be able to leave the handler as the default `index.handler`.\n\nThe default timeout for a Lambda function is three seconds, this may not be long enough for our function to complete. Scroll down the page to **Basic Settings** and change the timeout to be ten seconds. This should be enough time for our function to send the notification. Click **Save** before continuing.\n\n![lambda-android-timeout](//images.ctfassets.net/1es3ne0caaid/2jGZpl15PMBcTAcBrB9gEI/aa7370d7c325a18d72fd6b3d3b2a4acc/lambda-android-timeout.png)\n\n\n## Testing our implementation\n\nIn the top right of your Lambda console select the **Test** button. We need to configure a test option. Create a new test event like the below image. Notice how our keys in the JSON object are title and message. These are the event keys we were using in our code to provide the title and body for the push notification. \n\n![lambda-android-aws-test-event](//images.ctfassets.net/1es3ne0caaid/5Ev5UQmYJrFxy6Di54U5aZ/aa89cf11953ed2d8d6af1f654f4070eb/lambda-android-aws-test-event.png)\n\nOnce you are done press the **Create** button at the bottom. The dialog box will close and the test **HelloTest** should be selected in the dropdown menu by the **Test** button, Press **Test.** If everything has worked as expected you should receive a push to your device and a similar log output from your Lambda console.\n\n![lambda-android-aws-test-success](//images.ctfassets.net/1es3ne0caaid/4RRkCakfjmlwFEUbZq7ewT/ae49546e38e89bf25fbfc9bb66dd3ee4/lambda-android-aws-test-success.png)\n\n![lambda-android-push-notification](//images.ctfassets.net/1es3ne0caaid/6UfD7jfn25P5RFo1lYtcGd/d2906f074e29b260b8dc900194ebb493/lambda-android-push-notification.png)\n\n## Conclusion\n\nWe’ve learnt how to create an AWS Lambda function using NodeJS that can publish a push notification using Pusher Beams to an Android device. The source code for this tutorial can be found [here](https://github.com/cjbatin/Nodejs-Lambda-Pusher-Beams-for-Android-Notifications).","metaTitle":"Lambda with Node and Pusher Beams for Android notifications","metaDescription":"Learn how to send push notifications from AWS Lambda to an Android app, using Pusher Beams. Build a simple demo app and create a Lambda function using Node.js. Upload and test the function."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4cBniVyg9tm5b1iPHHbsea","type":"Entry","createdAt":"2019-05-08T20:48:58.714Z","updatedAt":"2019-05-08T20:48:58.714Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"AWS Lambda running Python and Pusher Beams for Android push notifications","url":"lambda-python-android-push-notifications","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"9VkyxkESQ0IQmyKy8wq6C","type":"Entry","createdAt":"2018-09-18T18:40:03.858Z","updatedAt":"2018-09-18T18:40:03.858Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christopher Batin","url":"christopher-batin","email":"chris@batin.me","twitter":"https://twitter.com/cjbatin","github":"https://github.com/cjbatin/","guestWriter":true}}],"projectRepo":"https://github.com/cjbatin/Python-Lambda-Pusher-Beams-for-Android-Notifications","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6x89hfueemQIu9tGMyKa0a","type":"Entry","createdAt":"2019-03-13T18:42:28.682Z","updatedAt":"2019-03-13T18:42:28.682Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Amazon Web Services","url":"amazon-web-services","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}}],"reviewDate":"2019-05-08","description":"Learn how to send push notifications from AWS Lambda to an Android app, using Pusher Beams. Build a simple demo app and create a Lambda function using Python. Upload and test the function.","prerequisite":"You will need Python 3.7+ and Android Studio 3.3.2+ installed on your machine.","content":"## Introduction\n\nPusher Beams allows you to customize push notifications you send to your devices via a server. However it can be expensive to run a server 24 hours a day 7 days a week and we may only need to send notifications every so often. This is where AWS Lambda can help. Lambda functions are serverless and work on a pay as you go model (with a generous free tier). This means that you only pay for when you use the function. We’re going to explore how we can setup Pusher Beams on an Android client using an AWS Lambda function running Python to trigger the notifications.\n\n\n## Prerequisites\n\n- A free AWS account. You can create one [here](https://aws.amazon.com).\n- A free Pusher account. You can create one [here](https://dash.pusher.com/authenticate).\n- A free Google Firebase account. You can create one [here](https://firebase.google.com).\n- Python 3.7.x installed on your local machine. Download [here](https://www.python.org/downloads/).\n- Android Studio 3.3.2+\n- An understanding of Android development and Android Studio environment.\n- Pip installed on your local machine. Instructions [here](https://docs.python.org/3/installing/index.html).\n- Pipenv installed on your local machine. Instructions [here](https://pipenv.readthedocs.io/en/latest/install/).\n\nThis tutorial provides a Makefile for Linux and MacOS users to bundle the code. Windows 10 users should use a Linux subsystem or bundle the Lambda code using the instructions [here](https://docs.aws.amazon.com/lambda/latest/dg/lambda-python-how-to-create-deployment-package.html).\n\n## Create your Android application\n\nWe will need to have a user that has registered for notifications and signed up for an interest we will call “hello”, so we can test out our implementation. We’re going to create a very basic Android app that doesn’t actually show anything to the user except for the notification on the lock screen.\n\nCreate a new **Empty Activity** project using Android Studio and name it something like LambdaPush. Provide a **Package name** and remember this as you will need it for completing the Firebase set up. We will be using **Kotlin** as the language choice for this tutorial and supporting Android 16+ (Jelly Bean). \n\n### Firebase set up\n\nLog in to your Firebase account [here](https://firebase.google.com) and go to your console. If you do not already have a project created you will need to create one and name it anything you like, if you have a project select it. Within the **Project Overview** page select **Add App** and follow the instruction for creating a new Android application. \n\nOnce you have completed the setup for your Android app you will be returned to the dashboard. You will need to go to the project settings (found within the “settings cog” in the top left). Once in the project settings select the **Cloud Messaging** tab. Copy the **Server key** you will need it for setting up your Pusher Beams instance.\n\n![lambda-android-firebase](//images.ctfassets.net/1es3ne0caaid/2cbkn38uhTDGt2L1MBWDfN/1ed0cf684bfe4951f2253207aec4fa1a/lambda-android-firebase.png)\n\n### Creating a Pusher Beams instance\n\nLogin or create an account to access your dashboard [here](https://dash.pusher.com). Create a new beams instance using the dashboard.\n\n![lambda-android-beams](//images.ctfassets.net/1es3ne0caaid/1hOmThI9eg88vgMj2BpI0f/0222f81070a933b7ad2a449159bbe05c/lambda-android-beams.png)\n\nComplete step one of the Android setup guide, by providing your FCM server key you copied earlier and **Continue**. We will pick up the remainder later on in this tutorial. Press the **X** to exit the setup guide and you will be returned to your dashboard for that instance. Scroll to the bottom of the page and you will find your Beams instance ID and secret key, make note of these you will need them later.\n\n\n### Adding the SDKs\n\nOpen your app level `build.gradle` file and add the following into your dependencies:\n\n```\n    // app/build.gradle\n    ...\n    dependencies {\n     ...\n     implementation 'com.google.firebase:firebase-messaging:17.1.0'\n     implementation 'com.pusher:push-notifications-android:1.4.0'\n     ...\n    }\n    ...\n```\n\nHere we are adding the Firebase messaging SDK and the Pusher Beams SDK. You should already have the Google Service SDK and `google-services.json` added to your project when setting up the Firebase app.\n\nSynchronize Gradle by pressing the **Sync Now** button.\n\n### Initialize Pusher Beams\n\nOpen your main activity and add the following import:\n\n```kotlin\n    import com.pusher.pushnotifications.PushNotifications\n```\n\nAdd the following to your `onCreate` function:\n\n```kotlin\n    PushNotifications.start(applicationContext, \"YOUR_INSTANCE_ID\")\n    PushNotifications.addDeviceInterest(\"hello\")\n```\n\nRemember to replace `YOUR_INSTANCE_ID` with the instance id from your Pusher Beams console and run your application.\n\n## Create your Lambda function\n\n### Writing our function\n\nWe will need to install our packages and write our function on our local machine before we can upload it to a Lambda function. Create a new working directory on your local machine and within run the following command in your terminal working directory:\n\n```\n    $ pipenv install pusher_push_notifications\n    $ pipenv install requests\n```\n\nThese commands will install our Pusher notifications dependency within our local directory. It also sets up a virtual environment for our project. Next create a new file called `index.py` and open it in your favorite text editor and add the following code:\n\n```python\n    // index.py\n    from pusher_push_notifications import PushNotifications\n    import requests\n    \n    def lambda_handler(event, context):\n        beams_client = PushNotifications(\n                    instance_id='YOUR_INSTANCE_ID',\n                    secret_key='YOUR_SECRET_KEY',\n                    )\n    \n        response = beams_client.publish_to_interests(interests=['hello'],\n                                                 publish_body={\n                                                     'fcm': {\n                                                        'notification': {\n                                                            'title': event['title'],\n                                                            'body': event['message'],\n                                                        },\n                                                     },\n                                                 },\n                                                 )\n        print(response['publishId'])\n```\n\nThis code will be used by our Lambda function later on to publish notifications to devices that are registered for the `hello` interest. We use the `event['title']` and `event['message']` to form part of the message. We’ll look at this in more detail when we come to test our integration. Remember to replace `YOUR_INSTANCE_ID` and `YOUR_SECRET_KEY` with the credentials from your Pusher Beams console.\n\nNext we need to compress the directory we have been working in and make a .zip such that we can upload our code and dependencies to our function later on. Download the `Make` file from the source code repository [here](https://github.com/cjbatin/Python-Lambda-Pusher-Beams-for-Android-Notifications/blob/master/Python/Makefile) and put it in your working directory. Run the command:\n\n```\n    $ make build\n```\n\n\u003e **Note:** If you are using Windows 10 without a Linux subsystem you should follow the instructions [here](https://docs.aws.amazon.com/lambda/latest/dg/lambda-python-how-to-create-deployment-package.html). \n\nThis will create a zip file called `Python.zip` with all the dependencies packaged within it.\n\n### Creating a Lambda function\n\nLog in or create an account to access your AWS console [here](https://aws.amazon.com/console/). Once you are logged in use the search bar to find Lambda and select it from the list.\n\n![lambda-android-aws-console](//images.ctfassets.net/1es3ne0caaid/18OcS1oCS83T7s9vnxCCXi/ee834ddc5f300dd9c61fcbc9e69385e4/lambda-android-aws-console.png)\n\n\u003e **Note:** Set your AWS region to N. Virginia in the top right if it is not already.\n\nYou should be redirected to the Lambda service and see an option **Create Function**, select this. Choose the **Author from Scratch** option at the top of the next page. This will provide us a basic “hello world” template we can use to create our function. Complete the basic setup as shown in the image below.\n\n![lambda-android-aws-new-function-python](//images.ctfassets.net/1es3ne0caaid/6iG1Jnk583i8sBjJ6wXwmt/6defe3baa413bc688a396ed3ff0396d8/lambda-android-aws-new-function-python.png)\n\n- **Function name** - Name this whatever you want for example “Pusher-Beams-Python”.\n- **Runtime** - We will be using Python 3.7 so select this from the drop down list.\n- **Execution role** - Select **Create a new role from AWS policy templates**. If you already have a role you would rather use you can select **Use an existing role**.\n- **Role name** - You can name this anything you like for example “lambda_basic_execution”.\n- **Policy templates** - You can leave this blank.\n\nOnce complete select the **Create function** button at the bottom of the page. You should be redirected to your Lambda function console once it has been created. We can ignore the **Designer** section of the console. This area allows us to tie together different AWS services, you may wish to use this with a production function such that it can be accessed from the wider internet. However, we will just be using the test service for the purpose of this tutorial.\n\nNow we need to upload our code. In the **Function code** section select the **Upload a .zip file** from the **Code entry type** dropdown menu. Use the **Upload** button to search your local machine for the `Python.zip`  we created earlier. Finally change the **Handler** to be `index.lambda_handler`, this will allow AWS Lambda to find our function within our folder. If everything looks like the below image click **Save** in the top right. \n\n![lambda-android-aws-function-code-python](//images.ctfassets.net/1es3ne0caaid/1RZRPigPlnjLawX9YBQJzY/7f291f93bda458aca75f3841aca9b7ef/lambda-android-aws-function-code-python.png)\n\n\n## Testing our implementation\n\nIn the top right of your Lambda console select the **Test** button. We need to configure a test option. Create a new test event like the below image. Notice how our keys in the JSON object are title and message. These are the event keys we were using in our code to provide the title and body for the push notification. \n\n![lambda-android-aws-test-event](//images.ctfassets.net/1es3ne0caaid/5Ev5UQmYJrFxy6Di54U5aZ/aa89cf11953ed2d8d6af1f654f4070eb/lambda-android-aws-test-event.png)\n\nOnce you are done press the **Create** button at the bottom. The dialog box will close and the test **HelloTest** should be selected in the dropdown menu by the **Test** button, Press **Test.** If everything has worked as expected you should receive a push to your device and a similar log output from your Lambda console.\n\n![lambda-android-aws-test-success](//images.ctfassets.net/1es3ne0caaid/4RRkCakfjmlwFEUbZq7ewT/ae49546e38e89bf25fbfc9bb66dd3ee4/lambda-android-aws-test-success.png)\n![lambda-android-push-notification](//images.ctfassets.net/1es3ne0caaid/6UfD7jfn25P5RFo1lYtcGd/d2906f074e29b260b8dc900194ebb493/lambda-android-push-notification.png)\n\n## Conclusion\n\nWe’ve learnt how to create an AWS Lambda function using Python that can publish a push notification using Pusher Beams to an Android device. The source code for this tutorial can be found [here](https://github.com/cjbatin/Python-Lambda-Pusher-Beams-for-Android-Notifications).","metaTitle":"Lambda with Python and Pusher Beams for Android","metaDescription":"Learn how to send push notifications from AWS Lambda to an Android app, using Pusher Beams. Build a simple demo app and create a Lambda function using Python. Upload and test the function."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"7pcDRufncqf98wB51cNZq5","type":"Entry","createdAt":"2019-03-29T16:59:31.886Z","updatedAt":"2019-03-29T16:59:31.886Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Creating a Laravel Logger - Part 6: Creating our web application","url":"laravel-logger-part-6","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/logger","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}}],"reviewDate":"2019-03-29","description":"In this six-part series, build a Laravel error logging service. You will create a custom Laravel package to include in Laravel apps, along with web, Android and iOS frontends. Alerts will publish in realtime, featuring push notifications to mobile. In part six, build the web frontend.","prerequisite":"For this part of the series, you will need PHP 7.13+, Laravel 5.7+ and Composer installed on your machine.","content":"In this sixth and final part of our the series, we will build a simple web application to receive realtime updates when logs are pushed from the main Laravel app created in the first part. \n\nIn the [previous part](https://pusher.com/tutorials/laravel-logger-part-5) of this series, we created the iOS application that would be responsible for log monitoring on Apple devices. It also had the ability to receive push notifications from the application when the log level was an error.\n\nWe will build a web application using Vue.js and Laravel. Here is a demo of what you will build:\n\n![laravel-log-6-1](//images.ctfassets.net/1es3ne0caaid/1f2Cl5MKf8LYTTqAFX2dMH/c0492667ec8bd41fcbb4f7f0feb1032b/laravel-log-6-1.gif)\n\n\n## Requirements\n\nTo follow along with this series you need the following things:\n\n- Completed previous parts of the series.\n- Laravel installed on your local machine. [Installation guide](https://laravel.com/docs/5.7/installation).\n- Knowledge of PHP and the Laravel framework.\n- Composer installed on your local machine. [Installation guide](https://getcomposer.org/doc/00-intro.md#installation-linux-unix-macos).\n- [The latest version of Android Studio](https://developer.android.com/studio/install) installed on your machine (If you are building for Android).\n- Knowledge of Kotlin and the Android Studio IDE.\n- [The latest version of Xcode](https://developer.apple.com/xcode/) installed on your machine (If you are building for iOS).\n- Knowledge of the Swift programming language and the Xcode IDE.\n- A Pusher application. [Create one here](https://pusher.com).\n- A Pusher Beams application. [Create one here](https://dash.pusher.com).\n\n\n## Creating the project\n\nWe will start by creating a new Laravel app. Run this command in any directory of your choice:\n\n```\n    $ laravel new web_logging_client\n```\n\nThe command above will create a new Laravel project.\n\n\n## Building our user interface\n\nAfter creating and installing our Laravel application and its required dependencies, open the `resources/views` and replace the codes in the `welcome.blade.php` file with this:\n\n```php\n    \u003c!-- File: ./resources/views/index.blade.php --\u003e\n    \u003c!doctype html\u003e\n    \u003chtml\u003e\n        \u003chead\u003e\n            \u003cmeta charset=\"utf-8\"\u003e\n            \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n            \u003ctitle\u003ePush Logger\u003c/title\u003e\n            \u003c!-- Fonts --\u003e\n            \u003clink href=\"https://fonts.googleapis.com/css?family=Nunito:200,600\" rel=\"style         sheet\" type=\"text/css\"\u003e\n            \u003c!-- Styles --\u003e\n            \u003clink rel=\"stylesheet\" href=\"{{ asset('css/app.css')}}\"\u003e\n            \u003cstyle\u003e\n                html,\n                body {\n                    overflow-x: hidden; /* Prevent scroll on narrow devices */\n                }\n                .position-ref {\n                    position: relative;\n                }\n                .top-right {\n                    position: absolute;\n                    right: 10px;\n                    top: 18px;\n                }\n                .content {\n                    text-align: center;\n                }\n                .title {\n                    font-size: 84px;\n                }\n                .m-b-md {\n                    margin-bottom: 30px;\n                }\n            \u003c/style\u003e\n        \u003c/head\u003e\n        \u003cbody\u003e\n            \u003cdiv class=\"content\"\u003e\n                \u003cdiv class=\"title m-b-md\"\u003e\n                    Push Logger\n                \u003c/div\u003e\n                \u003cdiv id=\"logs\" class=\"row justify-content-md-center\"\u003e\n                    \u003cdiv class=\"col-lg-8\"\u003e\n                        \u003cdiv class=\"alert alert-success\" role=\"alert\"\u003e\n                        This is a primary alert—check it out!\n                        \u003c/div\u003e\n                        \u003cdiv class=\"alert alert-warning\" role=\"alert\"\u003e\n                        This is a secondary alert—check it out!\n                        \u003c/div\u003e\n                        \u003cdiv class=\"alert alert-info\" role=\"alert\"\u003e\n                        This is a success alert—check it out!\n                        \u003c/div\u003e   \n                    \u003c/div\u003e       \n                \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cscript src=\"js/app.js\"\u003e\u003c/script\u003e\n        \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIf you run your app using:\n\n```\n    $ php artisan serve\n```\n\nYou should see something like this:\n\n![laravel-log-6-2](//images.ctfassets.net/1es3ne0caaid/6JHxHTZP5uNqs1wVGTs7ZZ/705692b1ebdcf71622f375b22ef040d7/laravel-log-6-2.png)\n\nThis shows logs with dummy data inserted already. This gives us an idea of what our app will look like when logs are displayed on the page.\n\nWe will now use to add Vue.Js to the project. To do that, we need to create a Vue component. Add this script just before the closing `body` tag in the `welcome.blade.php` file:\n\n```javascript\n    \u003cscript\u003e\n        var logs = [];\n    \n        Vue.component('pusher-logger', {\n            data() {\n                return { logs }\n            },\n            methods: {\n                // Methods go here\n            }, \n            template: ``\n        });\n    \n        new Vue({\n          el: \"#logs\"\n        })\n    \u003c/script\u003e\n```\n\nWe put the script tags at the end of the body so that they are executed in order after the DOM is loaded. In this snippet, we have the `logs` array declared to hold our log messages. \n\nNow, we have a `pusher-logger` Vue component created. This component can be used as an HTML tag like so:\n\n```html\n    \u003cpusher-logger\u003e \u003c/pusher-logger\u003e\n```\n\nThe `pusher-logger` component has the `data` attribute that hosts the data we want Vue to render. In our own case, we return just the logs.\n\nThe `methods` object is another attribute of the Vue component. We use it to define the behaviors of a component. The `template` property holds the HTML markup for our component, we will update this part soon enough.\n\nFinally, we initialized a Vue root component on `#logs`. Notice that in the `welcome.blade.php` file, you will notice that there is a `div` with a class name - `logs`. This is the part that will show our logs to the user.\n\nNext, update the `template` object of the Vue component like so:\n\n```html\n    template: `\n      \u003cdiv class=\"col-lg-8\"\u003e\n        \u003cdiv v-for=\"log in logs\" class=\"alert\" v-bind:class= \"checkLevel(log.loglevel)\"\n         role=\"alert\"\u003e\n            @{{ log.message }}\n        \u003c/div\u003e  \n        \u003cdiv v-show=\"logs.length == 0\"\u003e\n            No Logs Dispatched\n        \u003c/div\u003e                              \n      \u003c/div\u003e\n    `\n```\n\nThe template property now returns a rendered list of the logs and if the logs array is empty at `logs.length == 0` we show **No Logs Dispatched**.\n\nThe `{{ }}` braces are used both by Vue and Laravel Blade to render data. So whenever using Vue inside a blade file append an @ character to braces `{{ }}`.\n\nNext, add this method to the `methods` object of the Vue component :\n\n```javascript\n    // [...]\n    \n    methods: {\n      checkLevel(loglevel) {\n        switch(loglevel) {\n            case 'info':\n                return 'alert-info'\n            case 'warning':\n                return 'alert-warning'\n            case 'error':\n                return 'alert-danger'\n            default:\n                return 'alert-default'\n        }\n      }\n    }\n    \n    // [...]\n```\n\nIn this function, we check the log level to return different alert types. This will change the behavior of the component based on the log level.\n\nNow, still inside the `welcome.blade.php` view file, update the `div` section with the ID `logs` with this snippet below:\n\n```html\n    \u003cdiv id=\"logs\" class=\"row justify-content-md-center\"\u003e      \n      \u003cpusher-logger\u003e \u003c/pusher-logger\u003e\n    \u003c/div\u003e \n```\n\nHere, we replaced the former logs snippet with the `pusher-logger` `HTML` tag which is a representation of the `pusher-logger` Vue component we created earlier.\n\n\n## Adding realtime functionality\n\nNow let’s enable realtime log updates using Pusher Channels. Before the closing `body` tag, just after the inclusion of the `app.js` script, add this script:\n\n```javascript\n    \u003cscript src=\"https://js.pusher.com/4.3/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n      let pusher = new Pusher('PUSHER_APP_KEY', {\n        cluster: 'PUSHER_APP_CLUSTER',\n        forceTLS: true\n      });\n    \n      // subscribe to the channel the log is broadcasted on\n      let channel = pusher.subscribe('log-channel');\n    \n      // Subscribe to pushlogger event \n      channel.bind('log-event', function (log) {\n        logs.push(log);\n      });\n    \u003c/script\u003e\n```\n\n\u003e Replace `PUSHER_APP_KEY` and `PUSHER_APP_CLUSTER` with their actual values.\n\nIn the code above, we are using the Pusher’s library to listen for log updates on the log-channel pusher channel and the `log-event` event. Whenever any of the events are triggered, we get an update of the log message and level in realtime.\n\nYou can run your app by running this command:\n\n```\n    $ php artisan serve \n```\n\nWe also need to start a development server on the previous application so we can dispatch logs. Be sure to run it on another port:\n\n```\n    $ php artisan serve --port=9000\n```\n\nHere is how our app should look like:\n\n![laravel-log-6-1](//images.ctfassets.net/1es3ne0caaid/1f2Cl5MKf8LYTTqAFX2dMH/c0492667ec8bd41fcbb4f7f0feb1032b/laravel-log-6-1.gif)\n\n## Conclusion\n\nWe have successfully built our final client app and come to the end of our six-part tutorial series. We have explored various technologies such as Laravel, Vue.js, Swift and Kotlin while using them to showcase Pusher’s realtime functions.\n\nThe source code to the code is available on [GitHub](https://github.com/neoighodaro/logger).","metaTitle":"Creating a Laravel Logger - Part 6","metaDescription":"In this six-part series, build a Laravel error logging service. You will create a custom Laravel package to include in Laravel apps, along with web, Android and iOS frontends. Alerts will publish in realtime, featuring push notifications to mobile."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"h79tj0xHwzei8P5ACqzuJ","type":"Entry","createdAt":"2019-03-28T18:44:34.246Z","updatedAt":"2019-03-28T18:44:34.246Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Creating a Laravel Logger - Part 5: Creating our iOS application","url":"laravel-logger-part-5","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/logger","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2019-03-28","description":"In this six-part series, build a Laravel error logging service. You will create a custom Laravel package to include in Laravel apps, along with web, Android and iOS frontends. Alerts will publish in realtime, featuring push notifications to mobile. In part five, build the iOS app.","prerequisite":"For this part of the series you will need the latest version of Xcode installed on your machine.","content":"In this tutorial of the series, we will build an iOS app for our logger system. Just like the Android app, it will display logs in a list and receive notifications, particularly for error logs. \n\nHere is the demo of what we will build:\n\n![laravel-log-5-1](//images.ctfassets.net/1es3ne0caaid/2kSyAkfXSWxIX0T0pj6ZO9/7433255101b5c652c731311246c0d79d/laravel-log-5-1.gif)\n\nLet’s get started.\n\n\u003e In the [previous part](https://pusher.com/tutorials/laravel-logger-part-4) of the series, we created the Android client for our log monitor. It helps us visualize logs and also displays push notifications for error messages.\n\n\n## Requirements\n\nTo follow along with this series you need the following things:\n\n- Completed previous parts of the series.\n- Laravel installed on your local machine. [Installation guide](https://laravel.com/docs/5.7/installation).\n- Knowledge of PHP and the Laravel framework.\n- Composer installed on your local machine. [Installation guide](https://getcomposer.org/doc/00-intro.md#installation-linux-unix-macos).\n- [The latest version of Android Studio](https://developer.android.com/studio/install) installed on your machine (If you are building for Android).\n- Knowledge of Kotlin and the Android Studio IDE.\n- [The latest version of Xcode](https://developer.apple.com/xcode/) installed on your machine (If you are building for iOS).\n- Knowledge of the Swift programming language and the Xcode IDE.\n- A Pusher application. [Create one here](https://pusher.com).\n- A Pusher Beams application. [Create one here](https://dash.pusher.com).\n\n\n## Creating the project\n\nOpen Xcode and create a new iOS project. Choose the **Single View App** template like this:\n\n![laravel-log-5-2](//images.ctfassets.net/1es3ne0caaid/2OmIDkIopoYaTJzv23NMoC/4bdff3d8b08e5ec2923e8cdc863497ff/laravel-log-5-2.png)\n\nAfter this, you then enter a product name - for example, `LoggerClient`, team name, and organization details. Choose Swift as the default language and select **Next**. Select the directory you want your app to be stored and wait for the project to complete its initial build.\n\nOnce the project is ready, close Xcode, and create a `Podfile` in the root directory of your app. To do this, run the following command in the root directory of your application:\n\n```\n    $ pod init\n```\n\nWe will insert the dependencies we will use in this project into this file. The Podfile should look like this:\n\n```\n    # File: ./Podfile\n    target 'LoggerClient' do\n      use_frameworks!\n    \n      pod 'PusherSwift'\n      pod 'PushNotifications'\n    end\n```\n\nHere, we added dependencies for Pusher Channels and Pusher Beams. Next, run this command still in the main app directory:\n\n```\n    $ pod install\n```\n\nThis will install the dependencies in your app. Once the installation is complete, open the `.xcworkspace` file located in the folder of your project in Xcode. This was generated after you installed the Podfile. \n\nNow, we are ready to start building.\n\n## Implementing push notifications\n\nTo enable notifications on our app, we need to set up a few things. Login to your [Apple Developer Account](https://developer.apple.com/) and create an APNs (Apple Push Notification service) key in the keys section. After creating the key, download it.\n\nNext, open the Pusher Beams instance created earlier in the series and select the iOS quick guide. Configure it with your key and Team ID from your developer account.\n\nFirst, we need to add the capability to our application. As seen below, you need to turn on the **Push Notifications** capability in the **Capabilities** tab of your target.\n\n![laravel-log-5-3](//images.ctfassets.net/1es3ne0caaid/1pVddPLjp9NZ9mT08hK2D9/8de9b9e2988473d8618bf2e25f115785/laravel-log-5-3.png)\n\nThis will create a `*.entitlements` file in your workspace. Next, open the `AppDelegate` file and replace the contents with the contents below:\n\n```swift\n    import UIKit\n    import PushNotifications\n    \n    @UIApplicationMain\n    class AppDelegate: UIResponder, UIApplicationDelegate {\n        var window: UIWindow?\n        let pushNotifications = PushNotifications.shared\n    \n        func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -\u003e Bool {\n            pushNotifications.start(instanceId: PUSHER_BEAMS_INSTACE_ID)\n            pushNotifications.registerForRemoteNotifications()\n            try? self.pushNotifications.subscribe(interest: \"log-interest\")\n            return true\n        }\n    \n        func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n            pushNotifications.registerDeviceToken(deviceToken)\n        }\n    }\n```\n\nAbove, we use the `PushNotifications` package to register the device to receive push notifications. This will trigger a one-time-only prompt for permission to allow your application to send push notifications. If the user grants this permission, your application will be able to send push notifications.\n\n\n\u003e Replace the placeholder above with the credentials on your Pusher Beams dashboard.\n\n\n## Implementing realtime logs\n\nThe next thing we will do is implement realtime logs in the app. Open the `Main.storyboard` file and delete the default `ViewController` scene. Drag a `TableViewController` element and drop on the empty light grey area. You should now have a bare `TableViewController` like this:\n\n![laravel-log-5-4](//images.ctfassets.net/1es3ne0caaid/3qvEecfosOiFW5e3M7iz5K/908cca9a9e09fc18fcdd3fc9d2ffb5df/laravel-log-5-4.png)\n\nSet the new controller as the initial controller in the attributes inspector.\n\n![laravel-log-5-5](//images.ctfassets.net/1es3ne0caaid/Bt3mIEfoZOSd1DJwdtRcg/724c31cc737db29bc77b5757dbd552b1/laravel-log-5-5.png)\n\nGo to your `ViewController` class and replace the `UIViewController` class with `UITableViewController` like this:\n\n```swift\n    class ViewController: UITableViewController {\n```\n\nGo back to your `Main.storyboard` file and choose a custom class for the view controller in the identity inspector. Select the just updated `ViewController` class.\n\nNow, we will design how each row on the table view will look like. Drag an `ImageView` and a label to the table view like this:\n\n![laravel-log-5-6](//images.ctfassets.net/1es3ne0caaid/6vDt5EyQuCltOYfdtGzzNO/7487d36d5f7aabdc23d3ef70961ba06f/laravel-log-5-6.png)\n\nNow, we will add constraints to them. Select the imageview and add the following constraints:\n\n![laravel-log-5-7](//images.ctfassets.net/1es3ne0caaid/7JSppqUn50jJAHMySt5brk/973ea2f1ae052f9f1eaa10f063011fb9/laravel-log-5-7.png)\n\nFrom the image, we added a left margin of 20, and the image is constrained to the label with a spacing of 10. We also gave the image a fixed width and height of 20. We also made sure the image is centered vertically\n\n![laravel-log-5-8](//images.ctfassets.net/1es3ne0caaid/33oOkj3q2FxY4GxeLQD6bs/b0bf7c6b4c872bfd79310da06dc845c5/laravel-log-5-8.png)\n\nNext, let us add constraints for the label. Just like you did for the imageview in the above image, add a vertical alignment to the label. Next, we add a constraint to the right of the parent view and a spacing of 10.\n\n![laravel-log-5-9](//images.ctfassets.net/1es3ne0caaid/47d4CbqGmytAe7JA3OdzkE/ec9c30b1fca5b4e73b8e7dc0fb569511/laravel-log-5-9.png)\n\nStill for the label, set the **Line Break** to word wrap and **Lines** to 0 in the attributes inspector like this:\n\n![laravel-log-5-10](//images.ctfassets.net/1es3ne0caaid/5h9gamM26igy1aslEqI3Uw/d8d94374341533e617b55cbb9a1070c5/laravel-log-5-10.png)\n\nThis is to enable our text to wrap properly in case there are excesses. Now, let us create some other helping files for our `TableView`. The first will be a model class named `LogModel`. Create a new class with the name and paste this:\n\n```swift\n    // File: ./LogModel.swift\n    import Foundation\n    import UIKit\n    \n    class LogModel {\n    \n        var logMessage: String?\n        var logLevel: String?\n    \n    }\n```\n\nThis class represents the data each row will hold which is the log message and the log level. Next, we will create a class for the table cell. Create a class called `TableCell` and paste this:\n\n```swift\n    // File: ./TableCell.swift\n    import Foundation\n    import UIKit\n    \n    class TableCell: UITableViewCell {\n    \n        @IBOutlet weak var labelLogMessage: UILabel!\n    \n        @IBOutlet weak var imageLogLevel: UIImageView!\n    \n        func setValues(item:LogModel) {\n    \n            labelLogMessage.text = item.logMessage\n            imageLogLevel.image = UIImage(named:\"LogLevel\")!.withRenderingMode(.alwaysTemplate)\n    \n            if (item.logLevel == \"warning\") {\n                imageLogLevel.tintColor = UIColor.yellow\n            } else if (item.logLevel == \"info\") {\n                imageLogLevel?.tintColor = UIColor.blue\n            } else if (item.logLevel == \"error\") {\n                imageLogLevel.tintColor = UIColor.red\n            }\n        }\n    }\n```\n\n\u003e You should link the `@IBOutlet` properties to the elements on the layout.\n\nIn this class, we created a `setValues` method that assigns the values from our model to the UI elements. We used an image asset (a rectangular object) called `LogLevel`. Depending on the log level, we change the color of the image. You can get the image from the GitHub repo for this article.\n\nNow, go to the table view in the `Main.storyboard` file and select the just created `TableCell` as its class.\n\n![laravel-log-5-11](//images.ctfassets.net/1es3ne0caaid/583XMqMe2o8B9e94TLA6CU/93416c5c6e351d768cbbc65a238dd85b/laravel-log-5-11.png)\n\nNow, open your `ViewController` class and replace this:\n\n```swift\n    // File: ./ViewController.swift\n    import UIKit\n    import PusherSwift\n    \n    class ViewController: UITableViewController {\n    \n        var logMessageList = [LogModel]() {\n            didSet {\n                self.tableView.reloadData()\n            }\n        }\n    \n        var pusher:Pusher!\n    \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return logMessageList.count\n        }\n    \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            let currentItem = logMessageList[indexPath.row]\n            let logCell = tableView.dequeueReusableCell(withIdentifier: \"logCell\") as! TableCell\n    \n            logCell.setValues(item: currentItem)\n    \n            return logCell\n        }\n    \n        override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -\u003e CGFloat {\n            return 50\n        }\n    \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            setupPusher()\n        }\n    }\n```\n\nIn the snippet above, we first declared a list named `logMessageList` for items in the table view. Whenever this list is modified, we reload the table view. Next, we declared a pusher variable which we will use shortly.\n\nWe have three methods here that affect the table view, the first one is to tell the size of the table view - here, we returned the size of the `logMessageList`. The next method maps data from the list to each cell and the last method sets the height size for each cell.\n\nNext, in our `viewDidLoad` method, we called a method `setupPusher`. Create the method inside the class like so:\n\n```swift\n    func setupPusher(){\n        let options = PusherClientOptions(\n            host: .cluster(\"PUSHER_APP_CLUSTER\")\n        )\n    \n        pusher = Pusher(\n            key: \"PUSHER_APP_KEY\",\n            options: options\n        )\n    \n        let channel = pusher.subscribe(\"log-channel\")\n    \n        let _ = channel.bind(eventName: \"log-event\", callback: { (data: Any?) -\u003e Void in\n            if let data = data as? [String : AnyObject] {\n                let logModel = LogModel()\n                logModel.logLevel = data[\"loglevel\"] as? String\n                logModel.logMessage = data[\"message\"] as? String\n                self.logMessageList.append(logModel)\n            }\n        })\n        pusher.connect()\n    }\n```\n\nThis snippet initializes Pusher and listens to the relevant channel for updates. When we get a new object, we map it to our `LogModel` class and add it to the `logMessageList`.\n\n\u003e Replace the placeholders with the credentials from your dashboard.\n\nWhen you run your app, you should see something like this:\n\n![laravel-log-5-1](//images.ctfassets.net/1es3ne0caaid/2kSyAkfXSWxIX0T0pj6ZO9/7433255101b5c652c731311246c0d79d/laravel-log-5-1.gif)\n\n## Conclusion\n\nIn this part, we have created the iOS client for our logging monitoring. In the app, we display all logs being sent through the channels and the error logs are also sent as push notifications. In the [last part](https://pusher.com/tutorials/laravel-logger-part-6) of the series, we will create the web application for the log monitor.\n\nThe source code is available on [GitHub](https://github.com/neoighodaro/logger). ","metaTitle":"Creating a Laravel Logger - Part 5","metaDescription":"In this six-part series, build a Laravel error logging service. You will create a custom Laravel package to include in Laravel apps, along with web, Android and iOS frontends. Alerts will publish in realtime, featuring push notifications to mobile. In part five, build the iOS app."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"jEaXuLdzKPH7ykXqvJCUL","type":"Entry","createdAt":"2019-03-27T17:58:43.605Z","updatedAt":"2019-03-27T17:58:43.605Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Creating a Laravel Logger - Part 4: Creating our Android application","url":"laravel-logger-part-4","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/logger","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2019-03-27","description":"In this six-part series, build a Laravel error logging service. You will create a custom Laravel package to include in Laravel apps, along with web, Android and iOS frontends. Alerts will publish in realtime, featuring push notifications to mobile. In part four, build the Android app.","prerequisite":"For this part of the series, you will need Android Studio 3+ installed on your machine.","content":"In this part, we will build an Android application for our logger. The Android app will display logs in a list and receive notifications for errors. We will combine the functionalities of Pusher Channels and Pusher Beams to achieve this. \n\nIn the previous parts of this series, we have been able to create the Laravel application that will push all the logs to Pusher. We also added the option to push the logs to Beams which will be triggered only when the log level is critical (error).\n\nHere is how your app will look:\n\n![laravel-log-4-1](//images.ctfassets.net/1es3ne0caaid/5ZZnWcYsOTtZWCfawLixjd/ca5a2a461d71bc8dd7d09e834bbbe4f3/laravel-log-4-1.gif)\n\nLet’s dig in!\n\n## Requirements\n\nTo follow along with this series you need the following things:\n\n- Completed previous parts of the series. [Part 1](https://pusher.com/tutorials/laravel-logger-part-1), [Part 2](https://pusher.com/tutorials/laravel-logger-part-2), [Part 3](https://pusher.com/tutorials/laravel-logger-part-3)\n- Laravel installed on your local machine. [Installation guide](https://laravel.com/docs/5.7/installation).\n- Knowledge of PHP and the Laravel framework.\n- Composer installed on your local machine. [Installation guide](https://getcomposer.org/doc/00-intro.md#installation-linux-unix-macos).\n- [Android Studio](https://developer.android.com/studio/install) \u003e= 3.x installed on your machine (If you are building for Android).\n- Knowledge of Kotlin and the Android Studio IDE.\n- [Xcode](https://developer.apple.com/xcode/) \u003e= 10.x installed on your machine (If you are building for iOS).\n- Knowledge of the Swift programming language and the Xcode IDE.\n- A Pusher application. [Create one here](https://pusher.com).\n- A Pusher Beams application. [Create one here](https://dash.pusher.com).\n\n\n## Creating the project\n\nOpen Android Studio and create a new application. Enter the name of your application, for example, `AndroidLoggerClient` and enter a corresponding package name. You can use `com.example.androidloggerclient` for your package name.\n\nMake sure the **Enable Kotlin Support** check box is selected as this article is written in Kotlin. Next, select a suitable minimum SDK for your app, API 19 should be fine. Next, choose the **Empty Activity** template provided, stick with the `MainActivity` naming and click **Finish**. You may have to wait a while Gradle will prepare your project.\n\n\n## Completing Pusher Beams setup\n\nSince Pusher Beams for Android relies on Firebase, we need an FCM key and a `google-services.json` file for our project. Go to your [Firebase console](https://console.firebase.google.com/u/0/) and click the **Add project** card to initialize the app creation wizard.\n\nAdd the name of the project, read and accept the terms and conditions. After this, you will be directed to the project overview screen. Choose the **Add Firebase to your Android app** option. Enter the app’s package name - `com.example.androidloggerclient` (in our case), thereafter you download the `google-services.json` file. After downloading the file, skip the rest of the quick-start guide.\n\nAdd the downloaded file to the app folder of your project - `AndroidLoggerClient/app/`.\nTo get the FCM key, go to your project settings on Firebase, under the **Cloud Messaging** tab, copy out the server key.\n\n![laravel-log-4-2](//images.ctfassets.net/1es3ne0caaid/19SyFpyzO449HwZAhH2kbI/cbb5ea698d33754a2905ba46adf0525c/laravel-log-4-2.png)\n\nOpen the Pusher Beams instance created earlier in the series, start the Android quick start and enter your FCM key. After adding it, select **Continue** and exit the guide.\n\n\n## Adding app dependencies\n\nHere, we will add dependencies to be used for the application. First, open your project `build.gradle` file and add the google services classpath like so:\n\n```\n    // File: ./build.gradle\n    // [...]\n    \n    dependencies {\n      // other claspaths\n      classpath 'com.google.gms:google-services:4.2.0'  \n    }\n    \n    // [...]\n```\n\nNext, you open the main app `build.gradle` file and add the following:\n\n```\n    // File: ./app/build.gradle\n    // [...]\n    \n    dependencies {\n        // other dependencies\n        implementation 'com.pusher:pusher-java-client:1.8.0'\n        implementation 'com.android.support:recyclerview-v7:28.0.0'\n        implementation 'com.android.support:cardview-v7:28.0.0'\n        implementation 'com.google.firebase:firebase-messaging:17.3.4'\n        implementation 'com.pusher:push-notifications-android:0.10.0'\n    \n    }\n    apply plugin: 'com.google.gms.google-services'\n    \n    // [...]\n```\n\nThis snippet adds Pusher’s dependencies for the app. We equally have some dependencies from the Android support library to help us in building our UIs. Next, sync your Gradle files.\n\n\n## Implementing realtime logs\n\nWe will now implement realtime logs for the app. These logs will be displayed on a list, so let’s start by setting up our list. Open the `activity_main.xml` file and replace it with this:\n\n```xml\n    \u003c!-- File: ./app/src/main/res/layout/activity_main.xml --\u003e\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout \n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\"com.example.androidloggerclient.MainActivity\"\u003e\n    \n        \u003candroid.support.v7.widget.RecyclerView\n            android:id=\"@+id/recyclerView\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"match_parent\"\n            android:layout_marginTop=\"10dp\"\n            android:layout_marginLeft=\"10dp\"\n            android:layout_marginRight=\"10dp\"\n            app:layout_constraintLeft_toLeftOf=\"parent\"\n            app:layout_constraintRight_toRightOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\" /\u003e\n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nThis file represents the main screen of the app. Here we added a `recyclerview`, which represents the UI element for lists. We will configure it as we proceed. The next thing we will do is design how each item will look like. Create a new layout file `log_list_row.xml` and paste this:\n\n```xml\n    \u003c!-- File: ./app/src/main/res/layout/log_list_row.xml --\u003e\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.v7.widget.CardView \n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:layout_width=\"match_parent\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        app:cardCornerRadius=\"5dp\"\n        android:layout_margin=\"10dp\"\n        android:layout_height=\"wrap_content\"\u003e\n    \n        \u003candroid.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n            android:layout_width=\"match_parent\"\n            android:layout_margin=\"10dp\"\n            android:layout_height=\"match_parent\"\u003e\n    \n            \u003cTextView\n                android:id=\"@+id/logMessage\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                tools:text=\"Hello Logger!\"\n                /\u003e\n    \n            \u003cTextView\n                android:id=\"@+id/logLevel\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                app:layout_constraintTop_toBottomOf=\"@id/logMessage\"\n                tools:text=\"Warning\"\n                android:textSize=\"12sp\"\n                /\u003e\n    \n        \u003c/android.support.constraint.ConstraintLayout\u003e\n    \n    \u003c/android.support.v7.widget.CardView\u003e\n```\n\nThis layout contains a `cardview` that wraps two texts. One text is for the log message and the other for the log level. We will now create a corresponding data model class which will hold two strings. \n\nCreate a new class named `LogModel` and paste this:\n\n```kotlin\n    // File: ./app/src/main/java/com/example/androidloggerclient/LogModel.kt\n    data class LogModel(val logMessage:String , val logLevel:String)\n```\n\nNext, we need a class to manage items in the list, also called an adapter. Create a new class named `LoggerAdapter` and paste this:\n\n```kotlin\n    // File: ./app/src/main/java/com/example/androidloggerclient/LoggerAdapter.kt\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.TextView\n    \n    class LoggerAdapter : RecyclerView.Adapter\u003cLoggerAdapter.ViewHolder\u003e() {\n    \n        private var logList  = ArrayList\u003cLogModel\u003e()\n    \n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n            return ViewHolder(LayoutInflater.from(parent.context)\n                    .inflate(R.layout.log_list_row, parent, false))\n        }\n    \n        override fun onBindViewHolder(holder: ViewHolder, position: Int) =\n                holder.bind(logList[position])\n    \n        override fun getItemCount(): Int = logList.size\n    \n        fun addItem(model: LogModel) {\n            this.logList.add(model)\n            notifyDataSetChanged()\n        }\n    \n        inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n    \n            private val logMessage = itemView.findViewById\u003cTextView\u003e(R.id.logMessage)!!\n            private val logLevel = itemView.findViewById\u003cTextView\u003e(R.id.logLevel)!!\n    \n            fun bind(item: LogModel) = with(itemView) {\n    \n                logMessage.text = item.logMessage\n                logLevel.text = item.logLevel\n    \n                when {\n                    item.logLevel.toLowerCase() == \"warning\" -\u003e {\n                        logLevel.setTextColor(ContextCompat.getColor(context, R.color.yellow))\n                    }\n                    item.logLevel.toLowerCase() == \"error\" -\u003e {\n                        logLevel.setTextColor(ContextCompat.getColor(context, android.R.color.holo_red_dark))\n                    }\n                    item.logLevel.toLowerCase() == \"info\" -\u003e {\n                        logLevel.setTextColor(ContextCompat.getColor(context, android.R.color.holo_blue_light))\n    \n                    }\n    }\n    \n            }\n    \n        }\n    \n    }\n```\n\nThe adapter manages the list through its implemented methods marked with `override` . The `onCreateViewHolder` method uses our `log_list_row` layout to inflate each row of the list using a custom `ViewHolder` class created at the bottom of the snippet. The `onBindViewHolder` binds data to each item on the list, the `getItemCount` method returns the size of the list. The `addItem` method adds data to the list and refreshes it.\n\nAlso, in the above snippet, we add color to log level text based on the type of log. We imported the yellow into our `colors.xml` file, so add the color in your `colors.xml` file like so:\n\n```xml\n    \u003c!-- File: ./app/src/main/res/values/colors.xml --\u003e\n    \u003ccolor name=\"yellow\"\u003e#FFFF00\u003c/color\u003e\n```\n\nTo finish the first part of our implementation, open your `MainActivity.Kt` file and do the following:\n\nAdd the following imports:\n\n```kotlin\n    // File: ./app/src/main/java/com/example/androidloggerclient/MainActivity.kt\n    import android.support.v7.app.AppCompatActivity\n    import android.os.Bundle\n    import android.support.v7.widget.LinearLayoutManager\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import kotlinx.android.synthetic.main.activity_main.*\n    import org.json.JSONObject\n```\n\nThis imports external classes we will make use of. Then you initialize the adapter in the class like so:\n\n```kotlin\n    // File: ./app/src/main/java/com/example/androidloggerclient/MainActivity.kt\n    // [...]\n    \n    class MainActivity : AppCompatActivity() {\n    \n      private val mAdapter = LoggerAdapter()\n    \n      // [...]\n    \n    }\n```\n\nNext, you replace the `onCreate` method with this:\n\n```kotlin\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        setupRecyclerView()\n        setupPusher()\n    }\n```\n\nThis method is one of the lifecycle methods in Android. Here, we called two other methods to help set up the `recyclerview` and Pusher. Add the methods like so:\n\n```kotlin\n    private fun setupRecyclerView() {\n        with(recyclerView){\n            layoutManager = LinearLayoutManager(this@MainActivity)\n            adapter = mAdapter\n        }\n    }\n```\n\nThis assigns a layout manager and our initialized adapter instance to the `recyclerview`.\n\n```kotlin\n    private fun setupPusher() {\n        val options = PusherOptions()\n        options.setCluster(\"PUSHER_CLUSTER\")\n        val pusher = Pusher(\"PUSHER_API_KEY\", options)\n    \n        val channel = pusher.subscribe(\"log-channel\")\n    \n        channel.bind(\"log-event\") { channelName, eventName, data -\u003e\n            println(data)\n            val jsonObject = JSONObject(data)\n            val model = LogModel(jsonObject.getString(\"message\"), jsonObject.getString(\"loglevel\"))\n            runOnUiThread {\n                mAdapter.addItem(model)\n            }\n        }\n    \n        pusher.connect()\n    }\n```\n\nThis sets up Pusher to receive logs from a Pusher channel.\n\n\n\u003e Replace the Pusher placeholders with your own keys from your dashboard.\n\nFinally, add the internet permission to the `AndroidManifest.xml` file like so:\n\n```xml\n    \u003c!-- File: ./app/src/main/AndroidManifest.xml --\u003e\n    \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n```\n\nWith this, whenever we receive a log, it is added to the list through the adapter. With this, the app can display logs as soon as events come in. Now let us go a step further to show notifications when the log is an error log.\n\n## Implementing realtime notifications\n\nFirst, we will create an Android service to listen if we receive any notification and display it accordingly. \n\nCreate a new file named `NotificationsMessagingService` and paste this:\n\n```kotlin\n    // File: ./app/src/main/java/com/example/androidloggerclient/NotificationsMessagingService.kt\n    import android.app.NotificationChannel\n    import android.app.NotificationManager\n    import android.app.PendingIntent\n    import android.content.Intent\n    import android.os.Build\n    import android.support.v4.app.NotificationCompat\n    import android.support.v4.app.NotificationManagerCompat\n    import com.google.firebase.messaging.RemoteMessage\n    import com.pusher.pushnotifications.fcm.MessagingService\n    \n    class NotificationsMessagingService : MessagingService() {\n    \n        override fun onMessageReceived(remoteMessage: RemoteMessage) {\n            val notificationId = 10\n            val channelId  = \"logs\"\n            lateinit var channel:NotificationChannel\n            val intent = Intent(this, MainActivity::class.java)\n            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK\n            val pendingIntent = PendingIntent.getActivity(this, 0, intent, 0)\n            val mBuilder = NotificationCompat.Builder(this, channelId)\n                    .setSmallIcon(R.mipmap.ic_launcher)\n                    .setContentTitle(remoteMessage.notification!!.title!!)\n                    .setContentText(remoteMessage.notification!!.body!!)\n                    .setContentIntent(pendingIntent)\n                    .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n                    .setAutoCancel(true)\n    \n            if (Build.VERSION.SDK_INT \u003e= Build.VERSION_CODES.O) {\n                val notificationManager = applicationContext.getSystemService(NotificationManager::class.java)\n                val name = getString(R.string.channel_name)\n                val description = getString(R.string.channel_description)\n                val importance = NotificationManager.IMPORTANCE_DEFAULT\n                channel = NotificationChannel(\"log-channel\", name, importance)\n                channel.description = description\n                notificationManager!!.createNotificationChannel(channel)\n                notificationManager.notify(notificationId, mBuilder.build())\n    \n            } else {\n                val notificationManager =  NotificationManagerCompat.from(this)\n                notificationManager.notify(notificationId, mBuilder.build())\n            }\n    \n        }\n    \n    }\n```\n\nThe `onMessageReceived` method in this service is alerted when a notification comes in. When the notification comes in, we display it to the user. Next, we need to register the notification service in the `AndroidManifest.xml` file. You can do it by adding this to your file:\n\n```xml\n    \u003c!-- File: ./app/src/main/AndroidManifest.xml --\u003e\n    \u003capplication\n        \u003e\n        \u003c!-- [...] --\u003e    \n        \u003cservice android:name=\".NotificationsMessagingService\"\u003e\n            \u003cintent-filter android:priority=\"1\"\u003e\n                \u003caction android:name=\"com.google.firebase.MESSAGING_EVENT\" /\u003e\n            \u003c/intent-filter\u003e\n        \u003c/service\u003e\n    \n    \u003c/application\u003e\n```\n\nNext, let us setup Pusher beams in the `MainActivity` file. Create a method like so:\n\n```kotlin\n    private fun setupPusherBeams(){\n        PushNotifications.start(applicationContext, \"PUSHER_BEAMS_INSTANCE_ID\")\n        PushNotifications.subscribe(\"log-intrest\")\n    }\n```\n\n\u003e Replace the placeholder above with the actual credentials from your dashboard.\n\nThis initializes Pusher beams and subscribes to the `error-logs` interest. Next, add the method call to your `onCreate` method in the `MainActivity` class:\n\n```kotlin\n    override fun onCreate(savedInstanceState: Bundle?) {\n        // [...]\n    \n        setupPusherBeams()\n    }\n```\n\nIf you now run your app, you should have something like this:\n\n![laravel-log-4-1](//images.ctfassets.net/1es3ne0caaid/5ZZnWcYsOTtZWCfawLixjd/ca5a2a461d71bc8dd7d09e834bbbe4f3/laravel-log-4-1.gif)\n\n## Conclusion\n\nIn this part, we have created the Android client for our logging monitoring. In the app, we display all logs being sent through the channels and the error logs are also sent as push notifications. In the [next part](https://pusher.com/tutorials/laravel-logger-part-5) of the series, we will create the iOS application for the log monitor.\n\nThe source code is available on [GitHub](https://github.com/neoighodaro/logger).","metaTitle":"Creating a Laravel Logger - Part 4","metaDescription":"In this six-part series, build a Laravel error logging service. You will create a custom Laravel package to include in Laravel apps, along with web, Android and iOS frontends. Alerts will publish in realtime, featuring push notifications to mobile. In part four, build the Android app."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2azDRsWRuXljxyJlOXSI7a","type":"Entry","createdAt":"2019-03-25T15:47:55.706Z","updatedAt":"2019-03-25T15:47:55.706Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Creating a Laravel Logger - Part 3: Integrating our Pusher logger package","url":"laravel-logger-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/logger","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}}],"reviewDate":"2019-03-25","description":"In this six-part series, build a Laravel error logging service. You will create a custom Laravel package to include in Laravel apps, along with web, Android and iOS frontends. Alerts will publish in realtime, featuring push notifications to mobile. In part three, integrate the logger package into a Laravel app.","prerequisite":"For this part of the series, you will need PHP 7.13+, Laravel 5.7+ and Composer installed on your machine.","content":"In this part, we’ll see how we can connect our app and the Laravel package so that when a log form is submitted using the dispatch button, it is triggered to Pusher Channels and if the log level is of type error, it is also published through Pusher Beams too.\n\nIn the first two parts of this series, we built a simple Laravel app with a form to collect a log message and level and we also built a Laravel package to interact with the Pusher API.\n\n## Requirements\n\nTo follow along with this series you need the following things:\n\n- Completed previous parts of the series. [Part 1](https://pusher.com/tutorials/laravel-logger-part-1), [Part 2](https://pusher.com/tutorials/laravel-logger-part-2)\n- Laravel installed on your local machine. [Installation guide](https://laravel.com/docs/5.7/installation).\n- Knowledge of PHP and the Laravel framework.\n- Composer installed on your local machine. [Installation guide](https://getcomposer.org/doc/00-intro.md#installation-linux-unix-macos).\n- [Android Studio](https://developer.android.com/studio/install) \u003e= 3.x installed on your machine (If you are building for Android).\n- Knowledge of Kotlin and the Android Studio IDE.\n- [Xcode](https://developer.apple.com/xcode/) \u003e= 10.x installed on your machine (If you are building for iOS).\n- Knowledge of the Swift programming language and the Xcode IDE.\n- A Pusher application. [Create one here](https://pusher.com).\n- A Pusher Beams application. [Create one here](https://dash.pusher.com).\n\n\n## Connecting our Laravel app with the logger package\n\nTo get started, you need the code from the first part of the article, which is available in the [GitHub repository](https://github.com/neoighodaro/logger). When you have the code, `cd` to the directory of the code and copy the `.env.example`  to your`.env` file if you don’t already have it and update the following keys:\n\n```\n    # File: ./.env\n    # [...]\n    \n    PUSHER_APP_ID=\"PUSHER_APP_ID\"\n    PUSHER_APP_KEY=\"PUSHER_APP_KEY\"\n    PUSHER_APP_SECRET=\"PUSHER_APP_SECRET\"\n    PUSHER_APP_CLUSTER=\"PUSHER_APP_CLUSTER\"\n    PUSHER_BEAMS_SECRET_KEY=\"PUSHER_BEAMS_SECRET_KEY\"\n    PUSHER_BEAMS_INSTANCE_ID=\"PUSHER_BEAMS_INSTANCE_ID\"\n```\n\n\u003e Update with the keys from your Pusher Channels and Pusher Beams dashboard.\n\nNext, open the `config/broadcasting.php` file and scroll until you see the `connections` key. In there, you’ll have the `pusher` object. Add the `beams` object to it and make sure it looks like this:\n\n```php\n    // File: ./config/broadcasting.php\n    \n    'connections' =\u003e [\n    \n        // [...]\n    \n        'pusher' =\u003e [\n            'driver' =\u003e 'pusher',\n            'key' =\u003e env('PUSHER_APP_KEY'),\n            'secret' =\u003e env('PUSHER_APP_SECRET'),\n            'app_id' =\u003e env('PUSHER_APP_ID'),\n            'options' =\u003e [\n                'cluster' =\u003e env('PUSHER_APP_CLUSTER'),\n                'encrypted' =\u003e true,\n            ],\n            'beams' =\u003e [\n                'secret_key' =\u003e env('PUSHER_BEAMS_SECRET_KEY'),\n                'instance_id' =\u003e env('PUSHER_BEAMS_INSTANCE_ID'),\n            ],\n        ],\n    \n    ],\n```\n\nYou see that this file instructs Laravel to get the keys from the `.env` file. Inside our Laravel app, we need to add a new repository definition. Open `composer.json` in the root directory of the Laravel app and add this there:\n\n```json\n    // File: ./composer.json\n    // [...]\n    \n    \"repositories\": [\n        {\n            \"type\": \"path\",\n            \"url\": \"./packages/*\",\n            \"options\": {\n                \"symlink\": true\n            }\n        }\n    ],\n    \n    // [...]\n```\n\nBy setting the `\"type\": \"path\"`, the Composer knows that you would like to reference a local repository and the `url` defines the package location which can be relative or absolute to the package code.\n\nComposer will copy the package code into the `vendor` folder of our app and anytime there is an update change on the package there is a need to run `composer update`. To prevent Composer from doing so you need to specify the `symlink` option and composer will create a symlink to the package folder.\n\nRun this in the root directory of the app to install the package:\n\n```\n    $ composer require packagename/pusher-logger\n```\n\n\u003e If you used a different package name than this in the previous part, then use that package name.\n\n![laravel-log-3-1](//images.ctfassets.net/1es3ne0caaid/3OEqt4oBzC50ee7d3sRSyh/9f693c313590e7347d99424e5dd0443d/laravel-log-3-1.png)\n\nWhen your package installation is complete you’ll see the “Package manifest generated successfully” message.\n\nNow that our package is installed, let us create the logic to use the package. Open a new terminal tab, inside the root directory of the project folder and run:\n\n```\n    $ php artisan make:controller LogController\n```\n\nThis command will create a `LogController` class inside the `LogController.php` file found at the `app/Http/Controllers` directory.\n\nOpen the `LogController.php` and add the method below:\n\n```php\n    \u003c?php // File: ./app/Http/Controllers/LogController.php\n    \n    // [...]\n    \n    use Illuminate\\Http\\Request;\n    \n    class LogController extends Controller {\n    \n      public function  __invoke(Request $request)\n      {\n          // Logic Here   \n      }   \n      \n      // [...]\n    }\n```\n\nThe `__invoke` method is a magic method in `PHP` which gets called when the object is called as a function. `$request` is an instance of the `Illuminate\\Http\\Request` class via dependency injection and it returns the current HTTP request.\n\nNow, we will introduce the Laravel package into our `LogController` class, so at the top of the class after the namespace declaration add this:\n\n```php\n    use PackageNamespace\\PusherLogger\\PusherLogger;\n```\n\n\u003e If you used a different namespace, replace the namespace above with whatever you used.\n\nRemember that when we’re building our package, we could log a message and the level with the syntax below:\n\n```php\n    PusherLogger::log('Winter is Coming', PusherLogger::LEVEL_WARNING)\n            -\u003esetEvent('log-event')\n            -\u003esetChannel('log-channel')\n            -\u003esetInterests(['log-interest'])\n            -\u003esend()\n```\n\nSo let’s update our logic in the `__invoke` method like so:\n\n```php\n    // File: ./app/Http/Controllers/LogController.php\n    // [...]\n    \n    public function __invoke(Request $request)\n    {\n        $data = $request-\u003evalidate([\n            'message' =\u003e 'required|string',\n            'level' =\u003e 'required|string'\n        ]);\n    \n        $dispatched = PusherLogger::log($data['message'], $data['level'])\n            -\u003esetChannel('log-channel')\n            -\u003esetEvent('log-event')\n            -\u003esetInterests(['log-interest'])\n            -\u003esend();\n    \n        return response()-\u003ejson(['status' =\u003e $dispatched]);\n    }\n    \n    // [...]\n```\n\nFrom this snippet above, we first validate the request to make sure the message and level values are being sent to the server. Next, we set the log message, level, channel and event name. In a case where the log is an error, we set the interests to be sent to the Pusher Beam API using the `setInterests` method which accepts an array of interests.\n\nFinally, we triggered the `send` method that dispatches the log to both the Pusher Channels and Pusher Beams.\n\nNow open `api.php` located in the `routes` folder in the app directory and declare this route like so:\n\n```php\n    Route::post('/push', 'LogController')-\u003ename('log-message');\n```\n\nThis route can be accessed as `api/push` via a `POST` request. A name log-message has been set on this route which allows us to use the Laravel URL helper function `route()` to generate the endpoint anywhere inside the Laravel app. We will use this route shortly.\n\nNext, open the `welcome.blade.php` file located at `resources/views` directory and update it as instructed below:\n\nJust before the closing `head` tag add this link:\n\n```php\n    \u003c!-- File: ./resources/views/welcome.blade.php --\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css\" /\u003e\n```\n\nJust before the end of the `body` tag add these scripts:\n\n```php\n    \u003c!-- File: ./resources/views/welcome.blade.php --\u003e\n    \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n```\n\nHere, we added [Toastr](https://github.com/CodeSeven/toastr) and [Axios](https://github.com/axios/axios) to the frontend of the application. Toastr is a simple notification library and Axios is HTTP client for the browser that makes network requests.\n\nNext, add the following code below the code we just added:\n\n```php\n    \u003c!-- File: ./resources/views/welcome.blade.php --\u003e\n    \u003cscript\u003e\n    function dispatchLog() {\n        let level = document.getElementById('level').value;\n        let message = document.getElementById('message').value;\n        let errToastr = () =\u003e toastr.error(\"Oops! An error encountered\");\n    \n        axios.post('{{ route('log-message') }}', { message, level })\n            .then(r =\u003e r.data.status ? toastr.success('Log dispatch successful') : errToastr())\n            .catch(errToastr);\n    }\n    \u003c/script\u003e\n```\n\nThe function above is to help dispatch our log inputs (message and level).\n\nAxios is used to send both variables to our earlier declared route. When we get a response, we display a notification to the user.\n\nNow let us attach the function in the script above to the dispatch button in our modal.\n\nLook for this line of code in your `./resources/views/partials/modal.blade.php` file:\n\n```php\n    \u003cbutton type=\"button\" class=\"btn btn-danger\"\u003eDispatch\u003c/button\u003e\n```\n\nThen replace it with the following:\n\n```php\n    \u003cbutton type=\"button\" class=\"btn btn-danger\" onclick=\"dispatchLog()\"\u003eDispatch\u003c/button\u003e\n```\n\nSo, whenever the dispatch button is clicked, the `dispatchLog` function is triggered.\n\nIf you run your app, it should work like this (the view on the left is the Pusher Channels debug console):\n\n![laravel-log-3-2](//images.ctfassets.net/1es3ne0caaid/6FmWYRu5QEmSd6aStNYBYW/07b057e5fe8b5f1cd912417f88591b98/laravel-log-3-2.gif)\n\n## Pushing log messages without the trigger\n\nWhen creating actual applications, you won’t have a trigger and you’ll want the logged messages to automatically get pushed to the Pusher Channel. This is why we created the Monolog handler in the previous part.\n\nTo use this handler, open the `config/logging.php` file and add a new channel to the `channels` array:\n\n```php\n    'channels' =\u003e [\n        \n        // [...]\n    \n        'pusher' =\u003e [\n            'driver' =\u003e 'monolog',\n            'level' =\u003e 'debug',\n            'handler' =\u003e PackageNamespace\\PusherLogger\\PusherLoggerHandler::class,\n        ],\n    \n        // [...]\n    \n    ],\n```\n\n\u003e If you changed your packages namespace, don’t forget to change it above.\n\nFinally, in your `stack` channel in the same `channels` array, add the `pusher` channel to the list of channels as seen below:\n\n```php\n    'channels' =\u003e [\n        'stack' =\u003e [\n            'driver' =\u003e 'stack',\n            'channels' =\u003e ['daily', 'pusher'],\n            'ignore_exceptions' =\u003e false,\n        ],\n    \n        // [...]\n    \n    ],\n```\n\nTo test, you can go to the `routes/web.php` and add this to the file:\n\n```php\n    info('Testing');\n```\n\nThis should push the message to the Pusher Channel.\n\n\n## Conclusion\n\nIn this part of the series, we have been able to set up the logic we need to be able to push logs to Pusher. In the next part of the series, we will create the Android application for our logging monitor.\n\nThe source code is available on [GitHub](https://github.com/neoighodaro/logger). ","metaTitle":"Creating a Laravel Logger - Part 3","metaDescription":"In this six-part series, build a Laravel error logging service. You will create a custom Laravel package to include in Laravel apps, along with web, Android and iOS frontends. Alerts will publish in realtime, featuring push notifications to mobile. In part three, integrate the logger package."}}],"defaultValue":"Beams \u0026 Android","queryType":"tag","pages":4,"route":"/tutorials","query":{"product":"Beams","tag":"Android","page":"2"}}},"page":"/tutorials","query":{"product":"Beams","tag":"Android","page":"2"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Beams&tag=Android&page=2 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:32:10 GMT -->
</html>