<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=PHP&page=6 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:36:02 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">72</span> tutorials for “<span class="css-npldjc ehwuahf2">PHP</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorialsa345.html?product=Beams&amp;tag=PHP" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials.html" class="css-a3lpv2 e137azhw1"><svg fill="#C223CE" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#C223CE"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#C223CE"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#C223CE"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="PHP"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/social-notifications-ios-part-1.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Send push notifications in a social network iOS app - Part 1: Build the backend</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Learn to build a social network app for iOS, featuring push notifications. In part one, create the backend for the app u...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/monitoring-laravel-background-queues.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Monitoring Laravel’s background queues in realtime</h3><p class="css-k12xad e5jrto45">This article looks at ways to monitor Laravel&#x27;s background queues. Using the example of emails queued for sending, you w...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/desktop-notifications-laravel.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Implementing desktop notifications in your Laravel app</h3><p class="css-k12xad e5jrto45">Use Laravel and Vue to build a news notification module, which will send a desktop notification to everyone on the websi...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-analytics-dashboard-laravel.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Building a realtime analytics dashboard for a Laravel application</h3><p class="css-k12xad e5jrto45">Learn to build an analytics dashboard, to observe the usage and behavior of a Laravel application in realtime.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-spreadsheets-part-4.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Online Presence<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime spreadsheets application - Part 4: Automatically cleaning up empty documents</h3><p class="css-k12xad e5jrto45">This series shows you how to build a spreadsheets application using PHP (Laravel) for the backend, and Pusher for realti...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-spreadsheets-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Online Presence</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime spreadsheets application - Part 2: Implementing realtime collaboration</h3><p class="css-k12xad e5jrto45">This series shows you how to build a spreadsheets application using PHP (Laravel) for the backend, and Pusher for realti...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-spreadsheets-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Online Presence<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime spreadsheets application - Part 1: Users and spreadsheets</h3><p class="css-k12xad e5jrto45">This series shows you how to build a spreadsheets application using PHP (Laravel) for the backend, and Pusher for realti...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/notifications-news-cms-ios-app.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Publish notifications from a news CMS to an iOS app with Pusher Beams</h3><p class="css-k12xad e5jrto45">This tutorial takes a thorough look at how to build an iOS app that consumes a news update API and provides realtime ale...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-spreadsheets-part-3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Collaboration<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime spreadsheets application - Part 3: Showing current viewers</h3><p class="css-k12xad e5jrto45">This series shows you how to build a spreadsheets application using PHP (Laravel) for the backend, and Pusher for realti...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialsb1a3.html?tag=PHP&amp;page=5" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials5cf0.html?tag=PHP&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorialsa828.html?tag=PHP&amp;page=4" class="css-za1ua3 edg0byb1">4</a><a href="tutorialsb1a3.html?tag=PHP&amp;page=5" class="css-za1ua3 edg0byb1">5</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsbc12.html?tag=PHP&amp;page=6" class="css-2wakph edg0byb1">6</a><a href="tutorialsc78e.html?tag=PHP&amp;page=7" class="css-5s6711 edg0byb1">7</a><a href="tutorialsc6e6.html?tag=PHP&amp;page=8" class="css-5s6711 edg0byb1">8</a><a href="tutorialsc78e.html?tag=PHP&amp;page=7" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":72,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3NnhBnuK4omO8SQGc4OYOE","type":"Entry","createdAt":"2018-05-31T15:35:40.916Z","updatedAt":"2020-06-19T13:25:34.154Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":8,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Send push notifications in a social network iOS app - Part 1: Build the backend","url":"social-notifications-ios-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro-articles/pusher-beams-ios-social-network","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}}],"reviewDate":"2018-05-25","description":"Learn to build a social network app for iOS, featuring push notifications. In part one, create the backend for the app using Laravel, and start the frontend in Swift.","prerequisite":"To follow this tutorial you will need a Mac with Xcode installed, and knowledge of Xcode and Swift. You'll also need basic knowledge of PHP (including the Laravel framework), a Pusher account, and Cocoapods installed on your machine.","content":"Push notifications are a great way to engage users of your application. It lets you send notifications when certain events happen on your service. This can lead to re-engagement. \n\nWhile building a social network app, you'll need to send push notifications to your users. These notifications will help users know when certain events happen in your application. For instance, you can send push notifications to a user when someone comments on their photo. \n\nAs powerful as push notifications are, they are a double-edged sword. Most users will uninstall your application if they feel like they are being spammed.\n\nOver the course of two articles, we will see how we can build a social networking iOS application. We will add push notifications to the user when someone comments on a photo they uploaded. Then we'll add settings so users can specify when they want to receive notifications.\n\n![ios-push-notifications-social-network-demo](//images.ctfassets.net/1es3ne0caaid/51GgQzYiqQEMAQWOK8AMgS/fd0d5bb1bbaa7f1f198fed340d25cd53/ios-push-notifications-social-network-demo.gif)\n\n## Prerequisites\n\nTo follow along in this tutorial you need to have the following:\n\n\n- A Mac with [Xcode](https://developer.apple.com/xcode/) installed.\n- Knowledge of using Xcode.\n- Knowledge of the [Swift](https://developer.apple.com/swift/) programming language.\n- Knowledge of PHP and [Laravel](https://laravel.com/docs/).\n- [Laravel CLI](https://laravel.com/docs/5.6/installation) installed on your machine.\n- SQLite installed on your machine. [See installation guide](http://www.sqlitetutorial.net).\n- A Pusher beams API Key. [Create one here.](https://dash.pusher.com/authenticate/register?ref=pn-landing-page)\n- Cocoapods installed on your machine. [See installation guide](https://guides.cocoapods.org/using/getting-started.html).\n\n\n## Creating our Pusher application\n\u003e ⚠️  To use push notifications, you have to [be a part of the Apple Developer program](https://developer.apple.com/programs/enroll/). Also, push notifications do not work on simulators so you will need an actual iOS device to test.\n\nPusher [Beams](https://pusher.com/beams) has first-class support for native iOS applications. Your iOS app instances subscribe to **Interests**; then your servers send push notifications to those interests. Every app instance subscribed to that interest will receive the notification, even if the app is not open on the device at the time. \n\nThis section describes how you can set up an iOS app to receive transactional push notifications about news updates through Pusher.\n\n### Configure APNs\nPusher relies on the Apple Push Notification service (APNs) to deliver push notifications to iOS application users on your behalf. When we deliver push notifications, we use your key that has APNs service enabled. This page guides you through the process of getting the key and how to provide it to Pusher.\n\nHead over to the Apple Developer dashboard by clicking [here](https://developer.apple.com/account) and then create a new key as seen below: \n\n![ios-push-notifications-social-network-create-APN](//images.ctfassets.net/1es3ne0caaid/3XWdqEhwo8AuGKIywEsC6s/b260c8ac1052beceb634e1dcbeb99c6f/ios-push-notifications-social-network-create-APN.gif)\n\nWhen you have created the key, download it. Keep it safe as we will need it in the next section.\n\n\u003e ⚠️  You have to keep the generated key safe as you cannot get it back if you lose it. \n\n### Creating your Pusher application\nThe next thing you need to do is create a new Pusher Beams application from the [Pusher dashboard](https://dash.pusher.com). \n\n![ios-push-notifications-social-network-create-beams](//images.ctfassets.net/1es3ne0caaid/2Af98mjyDGqUA8wMkgYyaU/9497179efc4643ae5c48e844b8644011/ios-push-notifications-social-network-create-beams.png)\n\nWhen you have created the application, you should be presented with a quick start that will help you set up the application.\n\nIn order to configure your Beams instance, you will need to get the key with APNs service enabled by Apple. This is the same key as the one we downloaded in the previous section. Once you’ve got the key, upload it.\n\n![ios-push-notifications-social-network-add-APN-to-beams](//images.ctfassets.net/1es3ne0caaid/1OvPaR9NrieciOQuWYuCCE/4059623254d3571bf71f5069a32904ad/ios-push-notifications-social-network-add-APN-to-beams.png)\n\nEnter your Apple Team ID. You can get the Team ID from [here](https://developer.apple.com/account/#/membership). You can then continue with the setup wizard and copy the instance ID and secret key for your Pusher application.\n\n\n## Building the backend\n\nBefore we start building the iOS application, let’s build the backend API using Laravel. To get started we need to set up our Laravel application. Run the command below using your terminal:\n\n```\n    $ Laravel new gram\n```\n\nThis will create a new Laravel application in the `gram` directory. \n\n### Configuring our database\nOur application will need to connect to a database and we will be using SQLite as our database of choice as it's the easiest to set up.\n\nTo get started, create a new `database.sqlite` file in the `database` directory. Next open the `.env` file that comes with the Laravel project and replace the following lines:\n\n```\n    DB_CONNECTION=mysql\n    DB_HOST=127.0.0.1\n    DB_PORT=3306\n    DB_DATABASE=homestead\n    DB_USERNAME=homestead\n    DB_PASSWORD=secret\n```\n\nWith:\n\n```\n    DB_CONNECTION=sqlite\n    DB_DATABASE=/full/path/to/database.sqlite\n```\n\nNow we have a connection to the database.\n\n### Creating our migrations, models, and controllers\nWhen you want to create a migration, model, and controller, you should use the command below:\n\n```\n    $ php artisan make:model ModelName -mc\n```\n\nUsing the above command as a template, create the following models, migrations, and controllers:\n\n\n- `Photo`\n- `PhotoComment`\n- `UserFollow`\n- `UserSetting`\n\nIn that order.\n\nAfter running the commands, we should have migrations in the `database/migrations` directory, models in the `app` directory, and controllers in the `app/Http/Controllers` directory.\n\nLet’s update the migrations. Open the `*_create_photos_table.php` migration and replace the `up`  method with the following:\n\n``` php\n    public function up()\n    {\n        Schema::create('photos', function (Blueprint $table) {\n            $table-\u003eincrements('id');\n            $table-\u003eunsignedInteger('user_id');\n            $table-\u003eforeign('user_id')-\u003ereferences('id')-\u003eon('users');\n            $table-\u003estring('image');\n            $table-\u003estring('image_path');\n            $table-\u003estring('caption')-\u003enullable();\n            $table-\u003etimestamps();\n        });\n    }\n```\n\nOpen the `*_create_photo_comments_table.php` migration and replace the `up`  method with the following:\n\n``` php\n    public function up()\n    {\n        Schema::create('photo_comments', function (Blueprint $table) {\n            $table-\u003eincrements('id');\n            $table-\u003eunsignedInteger('photo_id');\n            $table-\u003eforeign('photo_id')-\u003ereferences('id')-\u003eon('photos');\n            $table-\u003eunsignedInteger('user_id');\n            $table-\u003eforeign('user_id')-\u003ereferences('id')-\u003eon('users');\n            $table-\u003etext('comment');\n            $table-\u003etimestamps();\n        });\n    }\n```\n\nOpen the `*_create_user_follows_table.php` migration and replace the `up`  method with the following:\n\n``` php\n    public function up()\n    {\n        Schema::create('user_follows', function (Blueprint $table) {\n            $table-\u003eincrements('id');\n            $table-\u003eunsignedInteger('follower_id');\n            $table-\u003eforeign('follower_id')-\u003ereferences('id')-\u003eon('users');\n            $table-\u003eunsignedInteger('following_id');\n            $table-\u003eforeign('following_id')-\u003ereferences('id')-\u003eon('users');\n            $table-\u003etimestamps();\n        });\n    }\n```\n\nOpen the `*_create_user_settings_table.php` migration and replace the `up`  method with the following:\n\n``` php\n    public function up()\n    {\n        Schema::create('user_settings', function (Blueprint $table) {\n            $table-\u003eincrements('id');\n            $table-\u003eunsignedInteger('user_id');\n            $table-\u003eforeign('user_id')-\u003ereferences('id')-\u003eon('users');\n            $table-\u003eenum('notification_comments', ['Off', 'Following', 'Everyone'])\n                  -\u003edefault('Following');\n        });\n    }\n```\n\nThat’s all for the migrations. Execute the migrations  by running the command below:\n\n```\n    $ php artisan migrate\n```\n\nWhen that’s done, we can update our models. Open the `Photo` model in the `app` directory and replace the contents with the following:\n\n``` php\n    \u003c?php\n    \n    namespace App;\n    \n    use Illuminate\\Database\\Eloquent\\Model;\n    \n    class Photo extends Model\n    {\n        protected $hidden = ['image_path'];\n    \n        protected $with = ['user', 'comments'];\n    \n        protected $fillable = ['user_id', 'caption', 'image', 'image_path'];\n    \n        public function user()\n        {\n            return $this-\u003ebelongsTo(User::class);\n        }\n    \n        public function comments()\n        {\n            return $this-\u003ehasMany(PhotoComment::class)-\u003eorderBy('id', 'desc');\n        }\n    }\n```\n\nIn the model above we have the `user` and `comments` methods, which are relationships to the  `User` model and the `PhotoComment` model.\n\nOpen the `PhotoComment` class in the `app` directory and replace the content with the following:\n\n``` php\n    \u003c?php\n    \n    namespace App;\n    \n    use Illuminate\\Database\\Eloquent\\Model;\n    use Illuminate\\Notifications\\Notifiable;\n    \n    class PhotoComment extends Model\n    {\n        use Notifiable;\n    \n        protected $with = ['user'];\n        \n        protected $fillable = ['photo_id', 'user_id', 'comment'];\n        \n        protected $casts = ['photo_id' =\u003e 'int', 'user_id' =\u003e 'int'];\n    \n        public function scopeForPhoto($query, int $id)\n        {\n            return $query-\u003ewhere('photo_id', $id);\n        }\n    \n        public function user()\n        {\n            return $this-\u003ebelongsTo(User::class);\n        }\n    }\n```\n\nIn the model above we are using the `Notifiable` trait because we want to be able to send push notifications when new comments are made on photos later in the article. We also have a `scopeForPhoto` method, which is an [Eloquent query scope](https://laravel.com/docs/5.6/eloquent#query-scopes). We also have a `user` method, which is a relationship to the `User` model.\n\nOpen the `User` model in the `app` directory and replace the content with the following:\n\n``` php\n    \u003c?php\n    \n    namespace App;\n    \n    use Illuminate\\Notifications\\Notifiable;\n    use Illuminate\\Foundation\\Auth\\User as Authenticatable;\n    \n    class User extends Authenticatable\n    {\n        use Notifiable;\n    \n        protected $fillable = ['name', 'email', 'password'];\n    \n        protected $hidden = ['password', 'remember_token'];\n        \n        public function allowsCommentsNotifications(User $actor)\n        {\n            $status = strtolower($this-\u003esettings-\u003enotification_comments);\n            \n            switch ($status) {\n                case 'everyone': return true;\n                case 'following': return $this-\u003eisFollowing($actor);\n                default: return false;\n            }\n        }\n        \n        public function isFollowing(User $user): bool\n        {\n            return $this-\u003efollowing-\u003ewhere('following_id', $user-\u003eid)-\u003ecount() \u003e 0;\n        }\n        \n        public function scopeOtherUsers($query)\n        {\n            return $query-\u003ewhere('id', '!=', auth()-\u003euser()-\u003eid);\n        }\n        \n        public function following()\n        {\n            return $this-\u003ehasMany(UserFollow::class, 'follower_id');\n        }\n        \n        public function followers()\n        {\n            return $this-\u003ehasMany(UserFollow::class, 'following_id');\n        }\n        \n        public function settings()\n        {\n            return $this-\u003ehasOne(UserSetting::class);\n        }\n    }\n```\n\nIn the model above we have six methods:\n\n\n- `allowsCommentsNotifications` checks to see if the owner of the photo has settings that permit notifications to be sent to them when there is a new comment.\n- `isFollowing` checks if a user is following another user.\n- `scopeOtherUsers` is an Eloquent query scope.\n- `following`, `followers` and `settings` are methods that define relationships with other models.\n\nOpen the `UserFollow` model in the `app` directory and replace the content with the following:\n\n``` php\n    \u003c?php\n    \n    namespace App;\n    \n    use Illuminate\\Database\\Eloquent\\Model;\n    \n    class UserFollow extends Model\n    {\n        protected $fillable = ['follower_id', 'following_id'];\n    }\n```\n\nFinally, open the `UserSetting` model in the `app` directory and replace the content with the following:\n\n``` php\n    \u003c?php\n    \n    namespace App;\n    \n    use Illuminate\\Database\\Eloquent\\Model;\n    \n    class UserSetting extends Model\n    {\n        protected $fillable = ['notification_comments'];\n        \n        protected $hidden = ['id', 'user_id'];\n        \n        public $timestamps = false;\n        \n        public function scopeForCurrentUser($query)\n        {\n            return $query-\u003ewhere('user_id', auth()-\u003euser()-\u003eid);\n        }\n    }\n```\n\nAbove we have the `scopeForCurrentUser` method, which is an Eloquent query scope.\n\n\n\u003e  We set the `$timestamps` property to false to instruct Eloquent not to attempt to automatically manage the `created_at` and `updated_at` fields as we do not have them in the user settings table.\n\nOne last thing we want to do is, create a new setting automatically when a user is created. For this, we will use an [Eloquent event](https://laravel.com/docs/5.6/eloquent#events). Open the `AppServiceProvider` class in the `app/Providers` directory and replace the boot method with the following:\n\n```\n    public function boot()\n    {\n        \\App\\User::created(function ($user) {\n            $user-\u003esettings()-\u003esave(new \\App\\UserSetting);\n        });\n    }\n```\n\nAs seen above, when a new user is created, a new user setting is saved to the user.\n\nNext, let’s update the logic for the controllers. Open the `PhotoController.php` in the `app/Http/Controllers` directory and replace the contents with the following:\n\n``` php\n    \u003c?php\n    \n    namespace App\\Http\\Controllers;\n    \n    use App\\Photo;\n    use Illuminate\\Http\\Request;\n    use Illuminate\\Support\\Facades\\Storage;\n    \n    class PhotoController extends Controller\n    {\n        public function index()\n        {\n            $photos = Photo::orderBy('id', 'desc')-\u003epaginate(20);\n    \n            return response()-\u003ejson($photos-\u003etoArray());\n        }\n    \n        public function store(Request $request)\n        {\n            $data = $request-\u003evalidate([\n                'caption' =\u003e 'required|between:1,1000',\n                'image' =\u003e 'required|image|mimes:jpeg,gif,png',\n            ]);\n    \n            $path = Storage::disk('public')-\u003eputFile('photos', $request-\u003efile('image'));\n    \n            $data = array_merge($data, [\n                'user_id' =\u003e $request-\u003euser()-\u003eid,\n                'image' =\u003e asset(\"storage/{$path}\"),\n                'image_path' =\u003e storage_path('app/public') . \"/{$path}\",\n            ]);\n    \n            $photo = Photo::create($data);\n    \n            return response()-\u003ejson([\n                'status' =\u003e 'success',\n                'data' =\u003e $photo-\u003eload(['user', 'comments'])\n            ]);\n        }\n    }\n```\n\nIn the `PhotoController` above we have two methods. The `index` displays all the available photos, and the `store` saves a new photo to disk and database. \n\nFor the `photos` saved to be available to the public, we need to link the `storage`  directory to the public directory. To do so run the command below:\n\n```\n    $ php artisan storage:link\n```\n\n![ios-push-notifications-social-network-storage-dir](//images.ctfassets.net/1es3ne0caaid/6jnvC8UIg0s4EOiU6wIEWg/3323c85e9a4f733865cd0efef1e44d0e/ios-push-notifications-social-network-storage-dir.png)\n\nThe command above will create a symlink from the `public/storage` directory to the `storage/app/public` directory that our photos will be uploaded to.\n\nOpen the `PhotoCommentController.php` in the `app/Http/Controllers` directory and replace the contents with the following:\n\n``` php\n    \u003c?php\n    \n    namespace App\\Http\\Controllers;\n    \n    use App\\Photo;\n    use App\\PhotoComment;\n    use Illuminate\\Http\\Request;\n    use App\\Notifications\\UserCommented;\n    \n    class PhotoCommentController extends Controller\n    {\n        public function index(Request $request)\n        {\n            $photo = Photo::with('comments')-\u003efindOrFail($request-\u003eroute('photo'));\n    \n            return response()-\u003ejson(['data' =\u003e $photo-\u003ecomments]);\n        }\n    \n        public function store(Request $request, Photo $photo)\n        {\n            $data = $request-\u003evalidate(['comment' =\u003e 'required|string|between:2,500']);\n    \n            $comment = PhotoComment::create([\n                'photo_id' =\u003e $photo-\u003eid,\n                'comment' =\u003e $data['comment'],\n                'user_id' =\u003e $request-\u003euser()-\u003eid,\n            ]);\n    \n            if ($photo-\u003euser-\u003eallowsCommentsNotifications($request-\u003euser())) {\n                $comment-\u003enotify(new UserCommented($request-\u003euser(), $photo, $comment));\n            }\n    \n            return response()-\u003ejson([\n                'status' =\u003e 'success', \n                'data' =\u003e $comment-\u003eload('user')\n            ]);\n        }\n    }\n```\n\nIn the `PhotoCommentController` we have two methods. The `index` method displays all the comments for a single photo and the `store` creates a new comment. \n\nIn the `store` method on line 30, we have a call to a `notify` method and passes a nonexistent `UserCommented` class. This class is a [Laravel notification](https://laravel.com/docs/5.6/notifications) class. We will create this class later in the article. It’s needed to send notifications to the user when comments are made.\n\nCreate a `UserController`  by running the command below:\n\n```\n    $ php artisan make:controller UserController\n```\n\nNext open the `UserController.php` in the `app/Http/Controllers` directory and replace the contents with the following:\n\n``` php\n    \u003c?php\n    \n    namespace App\\Http\\Controllers;\n    \n    use App\\User;\n    use Illuminate\\Support\\Facades\\Hash;\n    \n    class UserController extends Controller\n    {\n        public function index()\n        {\n            $users = [];\n            \n            User::with('followers')-\u003eotherUsers()-\u003eget()-\u003eeach(function ($user, $index) use (\u0026$users) {\n                $users[$index] = $user;\n                $users[$index]['follows'] = auth()-\u003euser()-\u003eisFollowing($user);\n            });\n            \n            return response()-\u003ejson(['data' =\u003e $users]);\n        }\n        \n        public function create(Request $request)\n        {\n            $credentials = $request-\u003evalidate([\n                'name' =\u003e 'required|string|max:255',\n                'email' =\u003e 'required|string|email|max:255|unique:users',\n                'password' =\u003e 'required|string|min:6',\n            ]);\n            \n            $credentials['password'] = Hash::make($credentials['password']);\n    \n            $user = User::create($credentials);\n    \n            $token = $user-\u003ecreateToken(config('app.name'));\n    \n            $data = ['user' =\u003e $user, 'access_token' =\u003e $token-\u003eaccessToken];\n    \n            return response()-\u003ejson(['data' =\u003e $data, 'status' =\u003e 'success']);\n        }\n    }\n```\n\nThe `UserController`  has two methods, one is the `index` method that returns all the users on the service, and the second is the `create` method that registers a new user and returns an access token that will be used for making authorized requests on behalf of the user.\n\nOpen the `UserFollowController.php` in the `app/Http/Controllers` directory and replace the contents with the following:\n\n``` php\n    \u003c?php\n    \n    namespace App\\Http\\Controllers;\n    \n    use App\\User;\n    use App\\UserFollow;\n    use Illuminate\\Http\\Request;\n    \n    class UserFollowController extends Controller\n    {\n        public function follow(Request $request)\n        {\n            $user = User::findOrFail($request-\u003eget('following_id'));\n    \n            \n            if ($request-\u003euser()-\u003eisFollowing($user) == false) {\n                $request-\u003euser()-\u003efollowing()-\u003esave(\n                    new UserFollow($request-\u003eonly('following_id')\n                ));\n            }\n    \n            return response()-\u003ejson(['status' =\u003e 'success']);\n        }\n        \n        public function unfollow(Request $request)\n        {\n            $user = User::findOrFail($request-\u003eget('following_id'));\n    \n            $request-\u003euser()-\u003efollowing()-\u003ewhereFollowingId($user-\u003eid)-\u003edelete();\n    \n            return response()-\u003ejson(['status' =\u003e 'success']);\n        }\n    }\n```\n\nThe controller above simply follows or unfollows a user.\n\nOpen the `UserSettingController.php` in the `app/Http/Controllers` directory and replace the contents with the following:\n\n``` php\n    \u003c?php\n    \n    namespace App\\Http\\Controllers;\n    \n    use App\\UserSetting;\n    use Illuminate\\Http\\Request;\n    \n    class UserSettingController extends Controller\n    {\n        public function index()\n        {\n            return response()-\u003ejson(UserSetting::forCurrentUser()-\u003efirst());\n        }\n    \n        public function update(Request $request)\n        {\n            $settings = $request-\u003evalidate([\n                'notification_comments' =\u003e 'in:Off,Following,Everyone',\n            ]);\n    \n            $updated = $request-\u003euser()-\u003esettings()-\u003eupdate($settings);\n    \n            return response()-\u003ejson(['status' =\u003e $updated ? 'success' : 'error']);\n        }\n    }\n```\n\nIn the controller above we return all the settings available for a user in the `index` method and then we update the settings for the user in the `update` method.\n\n### Creating our application’s routes\n\nSince we have created our controllers, let’s create our routes that link the URL to controllers. Open the `routes/api.php` file and replace the contents with the following:\n\n``` php\n    \u003c?php\n    \n    Route::post('/register', 'UserController@create');\n    \n    Route::group(['middleware' =\u003e 'auth:api'], function () {\n        Route::get('/users/settings', 'UserSettingController@index');\n        Route::put('/users/settings', 'UserSettingController@update');\n        Route::post('/users/follow', 'UserFollowController@follow');\n        Route::post('/users/unfollow', 'UserFollowController@unfollow');\n        Route::get('/users', 'UserController@index');\n        Route::get('/photos/{photo}/comments', 'PhotoCommentController@index');\n        Route::post('/photos/{photo}/comments', 'PhotoCommentController@store');\n        Route::resource('/photos', 'PhotoController')-\u003eonly(['store', 'index']);\n    });\n```\n\nAbove we have defined routes for our application. Each route points to a controller and a method in that controller that will handle the route. The route group above has a middleware applied, `auth:api`, this will make sure that every request to a route inside the group has to be authorized.\n\nTo manage authorization, let’s install Laravel passport.\n\n### Installing Laravel Passport\nSince we have many requests that require authorization, let’s install Laravel Passport. In the root directory of your project and run the following command:\n\n```\n    $ composer require laravel/passport\n```\n\nThis will install Laravel Passport to the project. Open the `User` model in the `app` directory and `use` the `HasApiTokens` trait:\n\n``` php\n    \u003c?php\n    \n    // [...]\n    \n    use Laravel\\Passport\\HasApiTokens;\n    \n    class User extends Authenticatable\n    {\n        use HasApiTokens, Notifiable;\n        \n        // [...]\n    }\n```\n\nNext open the `AuthServiceProvider` class in the `app/Providers` directory and update it to the following:\n\n``` php\n    \u003c?php\n    \n    // [...]\n    \n    use Laravel\\Passport\\Passport;\n    \n    class AuthServiceProvider extends ServiceProvider\n    {\n        // [...]\n    \n        public function boot()\n        {\n            // [...]\n    \n            Passport::routes();\n        }\n    }\n```\n\nOpen the `config/auth.php` configuration file and set the `driver` option of the `api` authentication guard to `passport`. This will instruct your application to use Passport's `TokenGuard` when authenticating incoming API requests:\n\n``` php\n    'guards' =\u003e [\n        // [...]\n        \n        'api' =\u003e [\n            'driver' =\u003e 'passport',\n            'provider' =\u003e 'users',\n        ],\n    ],\n```\n\nTo complete the installation, run the commands below, which will perform a migration and install Laravel Passport to your application:\n\n```\n    $ php artisan migrate\n    $ php artisan passport:install\n```\n\n![ios-push-notifications-social-network-passport](//images.ctfassets.net/1es3ne0caaid/3W31pKCdfW6Y8Eg4CYWqeO/6bca50e55ca38843ac3e82e0879797e0/ios-push-notifications-social-network-passport.png)\n\nPassport is successfully installed after the commands finish execution. The `passport:install` command will create two files in the `storage` directory: `oauth-public.key` and `oauth-private.key`. These keys will be used to sign and validate access tokens.\n\n\u003e ⚠️  Copy and save the client ID and secret for the second client as you will need it later in the article.\n\n### Adding push notification support\nThe next thing we want to do is add push notification support. For this, we will be using [Pusher Beams](https://pusher.com/beams). For convenience, we will be using a PHP library that is a Laravel supported wrapper for the [Pusher Beams PHP library](https://packagist.org/packages/pusher/pusher-push-notifications).\n\nIn your terminal run the following command:\n\n```\n    $ composer require neo/pusher-beams\n```\n\nWhen the installation is completed, open the `.env` file and add the following keys to the file:\n\n```\n    PUSHER_BEAMS_SECRET_KEY=\"PUSHER_BEAMS_SECRET_KEY\"\n    PUSHER_BEAMS_INSTANCE_ID=\"PUSHER_BEAMS_INSTANCE_ID\"\n```\n\n\u003e 💡 You need to replace the `PUSHER_BEAMS_SECRET_KEY` and `PUSHER_BEAMS_INSTANCE_ID` keys with the keys gotten from your Pusher dashboard.\n\nOpen the `broadcasting.php` file in the `config` directory and add the following keys to the pusher connection array:\n\n``` php\n    'connections' =\u003e [\n        'pusher' =\u003e [\n            // [...]\n            \n            'beams' =\u003e [\n                'secret_key' =\u003e env('PUSHER_BEAMS_SECRET_KEY'),\n                'instance_id' =\u003e env('PUSHER_BEAMS_INSTANCE_ID'),\n            ],\n    \n            // [...]\n        ],\n    ],\n```\n\nNext, create a new notification class where we will add our push notification. In your terminal run the command below to create the class:\n\n```\n    $ php artisan make:notification UserCommented\n```\n\nThis will create a new `UserCommented` class in the `app/Notifications` directory. Open the file and replace the contents with the following:\n\n``` php\n    \u003c?php\n    \n    namespace App\\Notifications;\n    \n    use Illuminate\\Bus\\Queueable;\n    use Illuminate\\Notifications\\Notification;\n    use Neo\\PusherBeams\\PusherBeams;\n    use Neo\\PusherBeams\\PusherMessage;\n    use App\\User;\n    use App\\PhotoComment;\n    use App\\Photo;\n    \n    class UserCommented extends Notification\n    {\n        use Queueable;\n    \n        public $user;\n    \n        public $comment;\n    \n        public $photo;\n    \n        public function __construct(User $user, Photo $photo, PhotoComment $comment)\n        {\n            $this-\u003euser = $user;\n            $this-\u003ephoto = $photo;\n            $this-\u003ecomment = $comment;\n        }\n    \n        public function via($notifiable)\n        {\n            return [PusherBeams::class];\n        }\n    \n        public function toPushNotification($notifiable)\n        {\n            return PusherMessage::create()\n                -\u003eiOS()\n                -\u003esound('success')\n                -\u003etitle('New Comment')\n                -\u003ebody(\"{$this-\u003euser-\u003ename} commented on your photo: {$this-\u003ecomment-\u003ecomment}\")\n                -\u003esetOption('apns.aps.mutable-content', 1)\n                -\u003esetOption('apns.data.attachment-url', $this-\u003ephoto-\u003eimage);\n        }\n    \n        public function pushNotificationInterest()\n        {\n            $id = $this-\u003ephoto-\u003eid;\n            \n            $audience = strtolower($this-\u003euser-\u003esettings-\u003enotification_comments);\n    \n            return \"photo_{$id}-comment_{$audience}\";\n        }\n    }\n```\n\nIn the class above we are extending a `Notification` class and we have implemented the `toPushNotification` method, which will be used to send the push notification when required. In the `via` method, we specify what channels we want to send the notification through and in the `pushNotificationInterest` we specify the interest we want to publish the push notification to.\n\nIf you remember earlier, we invoked the notification on line 30 of the `PhotoCommentController`.\n\n\u003e 💡 Read more about [Laravel Notifications](https://laravel.com/docs/5.6/notifications) and how it works.\n\nThat’s it. The backend application is complete. To start serving the application, run the following command:\n\n```\n    $ php artisan serve\n```\n\nThis will start a PHP server running on port 8000.\n\n## Building our iOS application using Swift\n\nNow that we have a backend server that can serve us all the information we want and also send push notifications, let us create our iOS application, which will be the client application.\n\nLaunch Xcode and create a new ‘Single Page App’ project. Let's call it **Gram**. When the project is created, exit Xcode and `cd` to the root of the project using a terminal. In the root of the project create a `Podfile` and paste the following into the file:\n\n```\n    platform :ios, '11.0'\n    \n    target 'Gram' do\n      use_frameworks!\n      \n      pod 'Alamofire', '~\u003e 4.7.1'\n      pod 'PushNotifications', '~\u003e 0.10.6'\n      pod 'NotificationBannerSwift'\n    end\n```\n\nThen run the command below to start installing the dependencies we defined above:\n\n```\n    $ pod install\n```\n\nWhen the installation is complete, we will have a new `.xcworkspace` file in the root of the project. Double-click the workspace file to relaunch Xcode.\n\n### Creating our storyboard\nNext, let’s create our storyboard. Open your `Main.storyboard` file. We want to design it to look similar to this:\n\n![ios-push-notifications-social-network-main-storyboard](//images.ctfassets.net/1es3ne0caaid/3Q8zckYGGk8GaacuGWqS8a/dcb1a02957daf499b62218111bf2e12e/ios-push-notifications-social-network-main-storyboard.png)\n\n### How the storyboard scenes are connected\nThe first scene we have a launch view controller. This controller connects to the login scene, register scene or the main navigation controller depending on the login status of the user. The login and register scenes are basic and they simply authenticate the user. \n\nThe main navigation controller connects to the main controller that displays the timeline. From that scene, there are connections to the settings scene, the search scene, and the view comments scene. Each segue connection is given an identifier so we can present them from the controller code.\n\nWhen you are done creating the storyboard, let’s create the custom classes for each storyboard scene.\n\n### Creating our models\nTo help us with managing our API’s JSON responses we will be using [Codable in Swift 4](https://paper.dropbox.com/doc/Swift-4-decoding-JSON-using-Codable-o9T8RFPWqR3nhodGEt0d1). This will make it extremely easy for us to manage the responses from the API.\n\nCreate a new file named `Models.swift` and paste this in the file:\n\n``` swift\n    import Foundation\n    \n    typealias Users = [User]\n    typealias Photos = [Photo]\n    typealias PhotoComments = [PhotoComment]\n    \n    struct User: Codable {\n        var id: Int\n        var name: String\n        var email: String\n        var follows: Bool?\n    }\n    \n    struct Photo: Codable {\n        var id: Int\n        var user: User\n        var image: String\n        var caption: String\n        var comments: PhotoComments    \n    }\n    \n    struct PhotoComment: Codable {\n        var id: Int\n        var user: User\n        var photo_id: Int\n        var user_id: Int\n        var comment: String\n    }\n```\n\n### Creating our services\nOur services will contain code that we will need to make calls to the API and also other functionality that interacts with the application view.\n\nCreate a new class `SettingsService` and paste the following code into the file:\n\n``` swift\n    import Foundation\n    \n    class SettingsService: NSObject {\n    \n        static let shared = SettingsService()    \n        static let key = \"gram.settings.notifications\"\n        var settings: [String: String] = [:];\n        \n        private var allSettings: [String: String] {\n            set {\n                self.settings = newValue\n            }\n            get {\n                if let settings = loadFromDefaults(), settings[\"notification_comments\"] != nil {\n                    return settings\n                }\n                \n                return [\n                    \"notification_comments\": Setting.Notification.Comments.following.toString()\n                ];\n            }\n        }\n        \n        override private init() {\n            super.init()\n            self.settings = self.allSettings\n        }\n        \n        func loadFromDefaults() -\u003e [String: String]? {\n            return UserDefaults.standard.dictionary(forKey: SettingsService.key) as? [String: String]\n        }\n        \n        func loadFromApi() {\n            ApiService.shared.loadSettings { settings in\n                if let settings = settings {\n                    self.allSettings = settings\n                    self.saveSettings(saveRemotely: false)\n                }\n            }\n        }\n        \n        func updateCommentsNotificationSetting(_ status: Setting.Notification.Comments) {\n            self.allSettings[\"notification_comments\"] = status.toString()\n            saveSettings()\n        }\n        \n        func saveSettings(saveRemotely: Bool = true) {\n            UserDefaults.standard.set(settings, forKey: SettingsService.key)\n            \n            if saveRemotely == true {\n                ApiService.shared.saveSettings(settings: settings) { _ in }\n            }\n        }\n    }\n```\n\nIn the class above we have defined the settings service. The class is how we manage settings for our application. In the `allSettings` setter, we attempt to fetch the settings from the local store and if we cant, we return some sensible defaults. \n\nWe have the `loadFromDefaults` method that loads the settings locally from the `UserDefaults`, the `loadFromApi` class that loads settings from the API using the `ApiService`, the `updateCommentsNotificationSetting`, which updates the comment notification settings. Finally, we have the  `saveSettings` method that saves the comment locally and remotely.\n\nIn the same file, add the following `enum` to the bottom:\n\n``` swift\n    enum Setting { \n        enum Notification {            \n            enum Comments: String {\n                case off = \"Off\"\n                case everyone = \"Everyone\"\n                case following = \"Following\"\n                \n                func toString() -\u003e String {\n                    return self.rawValue\n                }\n            }\n        }    \n    }\n```\n\nThe enum is basically a representation of the available settings for our comment notifications.\n\nThe next service we want to define is the `AuthService`. This service is used to authenticate users of our service. Create a new `AuthService` class and paste the following code into it:\n\n``` swift\n    import Foundation\n    \n    class AuthService: NSObject {\n        static let key = \"gram-token\"\n        static let shared = AuthService()\n    \n        typealias AccessToken = String    \n        typealias LoginCredentials = (email: String, password: String)\n        typealias SignupCredentials = (name: String, email: String, password: String)\n        \n        override private init() {\n            super.init()\n        }\n        \n        func loggedIn() -\u003e Bool {\n            return getToken() != nil\n        }\n        \n        func logout() {\n            UserDefaults.standard.removeObject(forKey: AuthService.key)\n        }\n        \n        func getToken() -\u003e AccessToken? {\n            return UserDefaults.standard.string(forKey: AuthService.key)\n        }\n    \n        func saveToken(_ token: AccessToken) -\u003e AuthService {\n            UserDefaults.standard.set(token, forKey: AuthService.key)\n            return self\n        }\n        \n        func deleteToken() -\u003e AuthService {\n            UserDefaults.standard.removeObject(forKey: AuthService.key)\n            return self\n        }\n        \n        func then(completion: @escaping() -\u003e Void) {\n            completion()\n        }\n    }\n```\n\nThe class above is fairly straightforward and it provides methods for authentication. It has the `getToken` and `saveToken`, which essentially retrieves and saves the access token gotten after authenticating the user.\n\nNext, let’s create our final service, the `ApiService`. Create a new class `ApiService` and paste the following into the file:\n\n``` swift\n    import Foundation\n    import Alamofire\n    \n    class ApiService: NSObject {\n    \n        static let shared = ApiService()\n            \n        override private init() {\n            super.init()\n        }\n    }\n```\n\nNow that we have the base of the class, let’s start adding methods to the class. Since it is a large class, we will split adding the methods over a few paragraphs.\n\nIn the class, let’s add our first set of methods, which will handle authentication:\n\n``` swift\n    func login(credentials: AuthService.LoginCredentials, completion: @escaping(AuthService.AccessToken?, ApiError?) -\u003e Void) {\n        let params = [\n            \"username\": credentials.email,\n            \"password\": credentials.password,\n            \"grant_type\": \"password\",\n            \"client_id\": AppConstants.API_CLIENT_ID,\n            \"client_secret\": AppConstants.API_CLIENT_SECRET\n        ]\n        \n        request(.post, url: \"/oauth/token\", params: params, auth: false) { data in\n            guard let data = data else { return completion(nil, .badCredentials) }\n            guard let token = data[\"access_token\"] as? String else { return completion(nil, .badResponse) }\n            \n            completion(token, nil)\n        }\n    }\n    \n    func signup(credentials: AuthService.SignupCredentials, completion: @escaping(AuthService.AccessToken?, ApiError?) -\u003e Void) {\n        let params = [\n            \"name\": credentials.name,\n            \"email\": credentials.email,\n            \"password\": credentials.password\n        ]\n        \n        request(.post, url: \"/api/register\", params: params, auth: false) { data in\n            guard let res = data, let data = res[\"data\"] as? [String:AnyObject] else {\n                return completion(nil, .badCredentials)\n            }\n            \n            guard let token = data[\"access_token\"] as? String else {\n                return completion(nil, .badResponse)\n            }\n            \n            completion(token, nil)\n        }\n    }\n```\n\nNext let’s add the methods for loading users, loading posts, loading comments and adding comments to the `ApiService` class:\n\n``` swift\n    func fetchUsers(completion: @escaping(Users?) -\u003e Void) {\n        request(.get, url: \"/api/users\") { data in\n            if let data = self.responseToJsonStringData(response: data) {\n                if let obj = try? JSONDecoder().decode(Users.self, from: data) {\n                    return completion(obj)\n                }\n            }\n            \n            completion(nil)\n        }\n    }\n    \n    func fetchPosts(completion: @escaping(Photos?) -\u003e Void) {\n        request(.get, url: \"/api/photos\") { data in\n            if let data = self.responseToJsonStringData(response: data) {\n                if let obj = try? JSONDecoder().decode(Photos.self, from: data) {\n                    return completion(obj)\n                }\n            }\n            \n            completion(nil)\n        }\n    }\n    \n    func fetchComments(forPhoto id: Int, completion: @escaping(PhotoComments?) -\u003e Void) {\n        request(.get, url: \"/api/photos/\\(id)/comments\") { data in\n            if let data = self.responseToJsonStringData(response: data) {\n                if let obj = try? JSONDecoder().decode(PhotoComments.self, from: data) {\n                    return completion(obj)\n                }\n            }\n            \n            completion(nil)\n        }\n    }\n    \n    func leaveComment(forId id: Int, comment: String, completion: @escaping(PhotoComment?) -\u003e Void) {\n        request(.post, url: \"/api/photos/\\(id)/comments\", params: [\"comment\": comment]) { data in\n            if let res = data, let data = res[\"data\"] as? [String: AnyObject],\n                let json = try? JSONSerialization.data(withJSONObject: data, options: []),\n                let jsonString = String(data: json, encoding: .utf8),\n                let jsonData = jsonString.data(using: .utf8),\n                let obj = try? JSONDecoder().decode(PhotoComment.self, from: jsonData) {\n                    return completion(obj)\n            }\n            \n            completion(nil)\n        }\n    }\n```\n\nIn the methods above, you’ll notice we decode the JSON response from the API into the appropriate model object. This makes it easier to work with in our controllers.\n\nThe next methods we will add will be to follow or unfollow a user, load settings for a user and update settings for a user. Add the methods below to the `ApiService`:\n\n``` swift\n    func toggleFollowStatus(forUserId id: Int, following: Bool, completion: @escaping(Bool?) -\u003e Void) {\n        let status = following ? \"unfollow\" : \"follow\"\n        \n        request(.post, url: \"/api/users/\\((status))\", params: [\"following_id\": id]) { data in\n            guard let res = data as? [String: String], res[\"status\"] == \"success\" else {\n                return completion(false)\n            }\n            \n            completion(true)\n        }\n    }\n    \n    func loadSettings(completion: @escaping([String: String]?) -\u003e Void) {\n        request(.get, url: \"/api/users/settings\") { data in\n            guard let settings = data as? [String: String] else {\n                return completion(nil)\n            }\n            \n            completion(settings)\n        }\n    }\n    \n    func saveSettings(settings: [String: String], completion: @escaping(Bool) -\u003e Void) {\n        request(.put, url: \"/api/users/settings\", params: settings) { data in\n            guard let res = data as? [String: String], res[\"status\"] == \"success\" else {\n                return completion(false)\n            }\n            \n            completion(true)\n        }\n    }\n```\n\nThe next method we want to add is the `uploadImage` method. This method is responsible for taking the selected image and caption and sending it to the API for uploading. Add the method below to the `ApiService` class:\n\n``` swift\n    func uploadImage(_ image: Data, caption: String, name: String, completion: @escaping(Photo?, ApiError?) -\u003e Void) {\n        let url = self.url(appending: \"/api/photos\")\n        \n        // Handles multipart data\n        let multipartHandler: (MultipartFormData) -\u003e Void = { multipartFormData in\n            multipartFormData.append(caption.data(using: .utf8)!, withName: \"caption\")\n            multipartFormData.append(image, withName: \"image\", fileName: name, mimeType: \"image/jpeg\")\n        }\n        \n        Alamofire.upload(\n            multipartFormData: multipartHandler,\n            usingThreshold: UInt64.init(),\n            to: url,\n            method: .post,\n            headers: requestHeaders(),\n            encodingCompletion: { encodingResult in\n                let uploadedHandler: (DataResponse\u003cAny\u003e) -\u003e Void = { response in\n                    if response.result.isSuccess,\n                        let resp = response.result.value as? [String: AnyObject],\n                        let data = resp[\"data\"] as? [String: AnyObject],\n                        let json = try? JSONSerialization.data(withJSONObject: data, options: []),\n                        let jsonString = String(data: json, encoding: .utf8),\n                        let jsonData = jsonString.data(using: .utf8),\n                        let obj = try? JSONDecoder().decode(Photo.self, from: jsonData) {\n                            return completion(obj, nil)\n                    }\n                    \n                    completion(nil, .uploadError(nil))\n                }\n            \n                switch encodingResult {\n                case .failure(_): completion(nil, .uploadError(nil))\n                case .success(let upload, _, _): upload.responseJSON(completionHandler: uploadedHandler)\n                }\n            }\n        )\n    }\n```\n\nNext let’s add the class’ helper methods.\n\n``` swift\n    private func url(appending: URLConvertible) -\u003e URLConvertible {\n        return \"\\(AppConstants.API_URL)\\(appending)\"\n    }\n    \n    private func requestHeaders(auth: Bool = true) -\u003e HTTPHeaders {\n        var headers: HTTPHeaders = [\"Accept\": \"application/json\"]\n        \n        if auth \u0026\u0026 AuthService.shared.loggedIn() {\n            headers[\"Authorization\"] = \"Bearer \\(AuthService.shared.getToken()!)\"\n        }\n    \n        return headers\n    }\n    \n    private func request(_ method: HTTPMethod, url: URLConvertible, params: Parameters? = nil, auth: Bool = true, handler: @escaping ([String: AnyObject]?) -\u003e Void) {\n        let url = self.url(appending: url)\n        \n        Alamofire\n            .request(url, method: method, parameters: params, encoding: JSONEncoding.default, headers: requestHeaders(auth: auth))\n            .validate()\n            .responseJSON { resp in\n                guard resp.result.isSuccess, let data = resp.result.value as? [String: AnyObject] else {\n                    return handler(nil)\n                }\n                \n                handler(data)\n            }\n    } \n    \n    func responseToJsonStringData(response data: [String: AnyObject]?) -\u003e Data? {\n        if let res = data, let data = res[\"data\"] as? [[String: AnyObject]] {\n            if let json = try? JSONSerialization.data(withJSONObject: data, options: []) {\n                if let jsonString = String(data: json, encoding: .utf8), let data = jsonString.data(using: .utf8) {\n                    return data\n                }\n            }\n        }\n        \n        return nil\n    }\n```\n\nThe `url` method takes a URL path and appends the base API URL to it. The `requestHeaders` method attaches the appropriate headers to the request sent by Alamofire. The `request` method is a wrapper around Alamofire that sends requests to the API for us. The `responseToJsonStringData` converts the data from our JSON file into a JSON string which can then be decoded into one of our `Codable` models.\n\nOne final thing we want to add to the bottom of the `ApiService` class is the `enum` for `ApiError`s. In the same file at the bottom, add the following code:\n\n``` swift\n    enum ApiError: Error {\n        case badResponse\n        case badCredentials\n        case uploadError([String: [String]]?)\n    }\n```\n\nThat’s all for the `ApiService` and indeed all the applications services. In the next part we will continue building our iOS application.\n\n## Conclusion\n\nIn this first part of the article, we have seen how we can create an API for our social network application using Laravel. We also integrated push notifications on the server side using Pusher Beams. \n\nIn the [next part](https://pusher.com/tutorials/social-notifications-ios-part-2), we will build the client IOS application using Swift. We will also integrate push notifications to our social network application using Pusher Beams.\n\nThe source code to the application is on [GitHub](https://github.com/neoighodaro-articles/pusher-beams-ios-social-network).","metaTitle":"Social notifications on iOS app - Part 1: Build the backend","metaDescription":"This tutorial is part one of a two-part series. You will create a a social network app for iOS, featuring push notifications. In this part, you will use Laravel to create the backend, then start creating the frontend using Swift."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"28C48cbbScG2KYywEqYmEe","type":"Entry","createdAt":"2018-05-14T09:49:28.168Z","updatedAt":"2020-06-19T12:45:26.119Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Monitoring Laravel’s background queues in realtime","url":"monitoring-laravel-background-queues","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/monitoring-laravel-queues","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}}],"reviewDate":"2018-05-11","description":"This article looks at ways to monitor Laravel's background queues. Using the example of emails queued for sending, you will create a report page that displays which emails have sent and which haven't.","prerequisite":"You will need PHP 7 or above, the Laravel CLI, Composer, Node and npm installed on your machine. You should have some knowledge of PHP and Laravel.","content":"When building large applications, making it scale is usually a concern. Stats like how long it takes for the page to load is usually very important. Thus, doing things like processing large images, sending emails and SMS can be pushed to a background queue and processed at a later time. \n\nHowever, because queues work in the background, they can fail sometimes. It may then be necessary to be able to monitor background queues.\n\nIn this article, we will consider ways to monitor Laravel’s background queues in realtime. We will assume we created an application that sends emails. The emails are to be queued in the background and sent later. We will then have a report page with the emails that have been sent and those that haven’t.\n\nThis is a screen recording of what we will be building:\n\n![monitoring-laravel-background-queues-realtime-pusher-demo](//images.ctfassets.net/1es3ne0caaid/6yq9oMJsPYU20CiMi4AE4Q/d6fec0f73c3c0da9a320264f764c696a/monitoring-laravel-background-queues-realtime-pusher-demo.gif)\n\n## Tutorial requirements\n\nTo follow along in this tutorial, we would need the following things:\n\n- PHP 7.0+ installed on your machine.\n- [Laravel CLI](https://laravel.com/docs/5.5/installation) installed on your machine.\n- [Composer](https://getcomposer.org/doc/00-intro.md#installation-linux-unix-osx) installed on your machine.\n- Knowledge of PHP and Laravel.\n- [Node.js and NPM](https://docs.npmjs.com/getting-started/installing-node) installed on your machine.\n- Basic knowledge of Vue.js and JavaScript. \n- A Pusher application. Create one [here](https://pusher.com).\n- A Mailtrap account to test emails sent. Create one [here](https://mailtrap.io).\n\nOnce you have these requirements ready, let’s start.\n\n## Setting up Your Laravel application\n\nOpen the terminal and run the command below to create a Laravel application:\n\n``` php\n    $ laravel new app_name\n```\n\n### Setting up a database connection and migration\nWhen installation is complete, we can move on to setting up the database. Open the `.env` file and replace the configuration below:\n\n```\n    DB_CONNECTION=mysql\n    DB_HOST=127.0.0.1\n    DB_PORT=3306\n    DB_DATABASE=homestead\n    DB_USERNAME=homestead\n    DB_PASSWORD=secret\n```\n\nwith:\n\n```\n    DB_CONNECTION=sqlite\n```\n\nThis will set SQLite as our default database connection (you can use MySQL or any other database connection you want). \n\nIn the terminal `cd` to the root directory of your project. Run the command below to create the SQLite database file:\n\n```\n    $ touch database/database.sqlite\n```\n\nThe command above will create an empty file that will be used by SQLite. Run the command below to create a migration:\n\n``` php\n    $ php artisan make:migration create_queued_emails_table\n```\n\nOpen up the migration file that was just created by the command above and replace the `up` method with the code below:\n\n``` php\n    public function up()\n    {\n        Schema::create('queued_emails', function (Blueprint $table) {\n            $table-\u003eincrements('id');\n            $table-\u003estring('email');\n            $table-\u003estring('description');\n            $table-\u003eboolean('run')-\u003edefault(false);\n            $table-\u003etimestamps();\n        });\n    }\n```\n\nNow run the command below to migrate our database:\n\n``` php\n    $ php artisan migrate\n```\n\n### Setting up Mailtrap for email testing\nOpen your `.env`  file and enter the keys you got from the Mailtrap dashboard. The relevant keys are listed below:\n\n```\n    MAIL_DRIVER=smtp\n    MAIL_HOST=smtp.mailtrap.io\n    MAIL_PORT=2525\n    MAIL_USERNAME=null\n    MAIL_PASSWORD=null\n    MAIL_ENCRYPTION=null\n    MAIL_FROM=\"john@doe.com\"\n    MAIL_NAME=\"John Doe\"\n```\n\nNow when emails are sent, the emails will be visible in the Mailtrap inbox. \n\n### Setting up authentication\nThe next thing we need to do is set up authentication. Open your terminal and enter the command below:\n\n``` php\n    $ php artisan make:auth\n```\n\nThis will generate an authentication scaffold. That is all that you need to do regarding authentication.\n\n### Configuring Pusher\nReplace the `PUSHER_*` keys in the `.env` file with the correct keys you got from your Pusher dashboard:\n\n```\n    PUSHER_APP_ID=\"PUSHER_APP_ID\"\n    PUSHER_APP_KEY=\"PUSHER_APP_KEY\"\n    PUSHER_APP_SECRET=\"PUSHER_APP_SECRET\" \n```\n\nOpen the terminal and enter the command below to install the Pusher PHP SDK:\n\n```\n    $ composer require pusher/pusher-php-server \"~3.0\"\n```\n\nAfter installation is complete, open the `config/broadcasting.php` file and scroll to the `pusher` section. Replace the `options` key with the following:\n\n``` php\n    'options' =\u003e [\n        'encrypt' =\u003e true,\n        'cluster' =\u003e 'PUSHER_APP_CLUSTER'\n    ],\n```\n\n### Configuring other miscellaneous things\nOpen the `.env` file and change the `BROADCAST_DRIVER` to `pusher`, and the `QUEUE_DRIVER`  to `database`. To make sure we have the tables necessary to use `database` as our `QUEUE_DRIVER` run the command below to generate the database migration:\n\n``` php\n    $ php artisan queue:table\n```\nThen run the migrate command to migrate the database:\n\n``` php\n    $ php artisan migrate\n```\nThis will create the database table required to use our database as a queue driver. \n\n\u003e 💡 **In a production environment, it is better to use an in-memory storage like Redis or Memcached as the queue driver. In-memory storage is faster and thus has better performance than using a relational database.**\n\n## Building the backend of our application\n\nNow let’s create the backend of our application. Run the command below in your terminal:\n\n``` php\n    $ php artisan make:model QueuedEmails\n```\n\nThis will create a new model in the `app` directory. Open the file and replace the contents with the following:\n\n``` php\n    \u003c?php\n    \n    namespace App;\n    \n    use Illuminate\\Database\\Eloquent\\Model;\n    \n    class QueuedEmails extends Model\n    {\n        protected $fillable = ['description', 'run', 'email'];\n        protected $casts = ['run' =\u003e \"boolean\"];\n    }\n```\n\nIn the code above, we define the `fillable` property of the class. This will prevent a mass assignment exception error when we try to create a new entry to the database. We also specify a `casts` property which will instruct Eloquent to typecast attributes to data types.\n\nNext, open the `HomeController` and and replace the contents with the code below:\n\n``` php\n    \u003c?php\n    namespace App\\Http\\Controllers;\n    \n    use Mail;\n    use App\\QueuedEmails;\n    use App\\Mail\\SimulateMail;\n    use Faker\\Factory as Faker;\n    \n    class HomeController extends Controller\n    {\n        /**\n         * Create a new controller instance.\n         *\n         * @return void\n         */\n        public function __construct()\n        {\n            $this-\u003emiddleware('auth');\n    \n            $this-\u003efaker = Faker::create();\n        }\n    \n        /**\n         * Show the application dashboard.\n         *\n         * @return \\Illuminate\\Http\\Response\n         */\n        public function index()\n        {\n            return view('home', ['jobs' =\u003e $this-\u003ejobs()]);\n        }\n        \n        /**\n         * Return all the jobs.\n         *\n         * @return array\n         */\n        public function jobs()\n        {\n            return QueuedEmails::orderBy('created_at', 'DESC')-\u003eget()-\u003etoArray();\n        }\n        \n        /**\n         * Simulate sending the email.\n         *\n         * @return mixed\n         */\n        public function simulate()\n        {\n            $email = $this-\u003efaker-\u003eemail;\n            \n            Mail::to($email)-\u003esend(\n                new SimulateMail([\n                    \"email\" =\u003e $email,\n                    \"description\" =\u003e $this-\u003efaker-\u003esentence()\n                ])\n            );\n            \n            return redirect()-\u003eroute('home');\n        }\n    }\n```\n\nIn the controller above, we have 4 methods that are mostly self-explanatory. In the class we use the [Faker library](https://github.com/fzaninotto/Faker) which helps us generate random fake values. In the `simulate` method, we are using the faker library to generate a fake email address and description. We instantiate a `SimulateMail` [mailable](https://laravel.com/docs/5.5/mail#generating-mailables).\n\nOpen the terminal and enter the command below:\n\n``` php\n    $ php artisan make:mail SimulateMail\n```\n\nOpen the `SimulateMail` class and enter the code below:\n\n``` php\n    \u003c?php\n    namespace App\\Mail;\n    \n    use App\\QueuedEmails;\n    use Illuminate\\Bus\\Queueable;\n    use Illuminate\\Mail\\Mailable;\n    use Illuminate\\Queue\\SerializesModels;\n    use App\\Events\\{EmailQueued, EmailSent};\n    use Illuminate\\Contracts\\Queue\\ShouldQueue;\n    use Illuminate\\Contracts\\Queue\\Factory as Queue;\n    use Illuminate\\Contracts\\Mail\\Mailer as MailerContract;\n    \n    class SimulateMail extends Mailable implements ShouldQueue\n    {\n        use Queueable, SerializesModels;\n        \n        protected $mail;\n    \n        /**\n         * Create a new message instance.\n         *\n         * @return void\n         */\n        public function __construct(array $mail)\n        {\n            $this-\u003email = QueuedEmails::create($mail);\n        }\n        \n        /**\n         * Build the message.\n         *\n         * @return $this\n         */\n        public function build()\n        {\n            return $this-\u003esubject(\"Queuer: Welcome to queuer\")-\u003eview('email.welcome');\n        }\n    \n        /**\n         * Send the mail\n         */\n        public function send(MailerContract $mailer)\n        {\n            $this-\u003email-\u003eupdate(['run' =\u003e true]);\n            \n            event(new EmailSent($this-\u003email));\n    \n            parent::send($mailer);\n        }\n        \n        /**\n         * Queue the email\n         */\n        public function queue(Queue $queue)\n        {\n            event(new EmailQueued($this-\u003email));\n    \n            return parent::queue($queue);\n        }\n    }\n```\n\n\u003e 💡 **By implementing the `ShouldQueue` interface, we are telling Laravel that the email should be queued and not sent immediately.**\n\nIn the class above, we have a constructor that creates a new entry into the `queued_emails` table. In the `build` method, we build the mail message we are going to be sending. \n\nIn the `send` method, we  mark the `queued_emails` entry’s `run`  column to `true`. We also fire an event called `EmailSent`. In the `queue` method, we also trigger an event called `EmailQueued`.\n\nLet’s create the events we triggered in the methods above. In your terminal run the command below:\n\n``` php\n    $ php artisan make:event EmailSent\n    $ php artisan make:event EmailQueued\n```\n\nIn the `EmailSent` event class, paste the following code:\n\n``` php\n    \u003c?php\n    namespace App\\Events;\n    \n    use App\\QueuedEmails;\n    use Illuminate\\Broadcasting\\Channel;\n    use Illuminate\\Queue\\SerializesModels;\n    use Illuminate\\Foundation\\Events\\Dispatchable;\n    use Illuminate\\Broadcasting\\InteractsWithSockets;\n    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n    \n    class EmailSent implements ShouldBroadcast\n    {\n        use Dispatchable, InteractsWithSockets, SerializesModels;\n    \n        public $mail;\n    \n        public function __construct($mail)\n        {\n            $this-\u003email = $mail;\n        }\n        \n        public function broadcastOn()\n        {\n            return new Channel('email-queue');\n        }\n        \n        public function broadcastAs()\n        {\n            return 'sent';\n        }\n    }\n```\n\nIn the code above, we just use [Broadcasting](https://laravel.com/docs/5.5/broadcasting#defining-broadcast-events) in Laravel to send some data to Pusher. \n\nOpen the `EmailQueued` event class and paste the code below:\n\n``` php\n    \u003c?php\n    \n    namespace App\\Events;\n    \n    use App\\QueuedEmails;\n    use Illuminate\\Broadcasting\\Channel;\n    use Illuminate\\Queue\\SerializesModels;\n    use Illuminate\\Foundation\\Events\\Dispatchable;\n    use Illuminate\\Broadcasting\\InteractsWithSockets;\n    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n    \n    class EmailQueued implements ShouldBroadcast\n    {\n        use Dispatchable, InteractsWithSockets, SerializesModels;\n        \n        public $mail;\n    \n        public function __construct($mail)\n        {\n            $this-\u003email = $mail;\n        }\n        \n        public function broadcastOn()\n        {\n            return new Channel('email-queue');\n        }\n        \n        public function broadcastAs()\n        {\n            return 'add';\n        }\n    }\n```\n\nThis class is almost the same as the `EmailSent` event class. The minor difference is the `broadcastAs` method. It returns a different alias to broadcast the event as.\n\nFinally, open the routes file `routes/web.php` and replace the code with this:\n\n``` php\n    Auth::routes();\n    Route::name('jobs')-\u003eget('/jobs', 'HomeController@jobs');\n    Route::name('simulate')-\u003eget('/simulate', 'HomeController@simulate');\n    Route::name('home')-\u003eget('/home', 'HomeController@index');\n    Route::view('/', 'welcome');\n```\n\nGreat! Now let’s move on to the frontend of the application.\n\n## Building the frontend of our application\n\nNow that we have set up most of the backend, we will create the frontend of the application. Open the `resources/views/home.blade.php` file and replace the code with the following:\n\n``` php\n    @extends('layouts.app')\n    \n    @section('content')\n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-md-12\"\u003e\n                \u003cdiv class=\"panel panel-default\"\u003e\n                    \u003cdiv class=\"panel-heading clearfix\"\u003e\n                        \u003cspan class=\"pull-left\"\u003eQueue Reports\u003c/span\u003e\n                        \u003ca href=\"{{ route('simulate') }}\" class=\"btn btn-sm btn-primary pull-right\"\u003eSimulate\u003c/a\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"panel-body\"\u003e\n                        \u003cjobs :jobs='@json($jobs)'\u003e\u003c/jobs\u003e\u003c/jobs\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    @endsection\n```\n\nThe noteworthy aspect of the code above is the `jobs` tag. This is a reference to the Vue component we will create next. We also have a “Simulate” button that leads to a `/simulate` route. This route simulates queuing an email to be sent.\n\nOpen your terminal and type in the command below:\n\n```\n    $ npm install --save laravel-echo pusher-js\n```\n\nThis will install [Laravel Echo](https://laravel.com/docs/5.5/broadcasting#installing-laravel-echo) and the [Pusher JS SDK](https://github.com/pusher/pusher-js). When the installation is complete, run the command below to install the other NPM dependencies:\n\n```\n    $ npm install\n```\n\n### Building our Vue component\nLet’s build the `jobs` Vue component we referenced earlier. Open the `resources/assets/js/app.js` file and replace the code below:\n\n``` javascript\n    Vue.component('example', require('./components/ExampleComponent.vue'));\n```\n\nwith:\n\n``` javascript\n    Vue.component('jobs', require('./components/JobsComponent.vue'));\n```\n\nNow create a new `JobsComponent.vue` file in the `resources/assets/js/components/` directory. In the file, paste in the following code:\n\n``` javascript\n    \u003ctemplate\u003e\n        \u003ctable class=\"table\"\u003e\n            \u003ctbody\u003e\n                \u003ctr v-for=\"(job, index) in allJobs\" :key=\"index\" v-bind:class=\"{success: job.run, danger: !job.run}\"\u003e\n                    \u003ctd width=\"80%\"\u003e{{ job.description }}\u003c/td\u003e\n                    \u003ctd\u003e{{ job.created_at }}\u003c/td\u003e\n                \u003c/tr\u003e\n            \u003c/tbody\u003e\n        \u003c/table\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    export default {\n        props: ['jobs'],\n        data() {\n            return {allJobs: this.jobs}\n        },\n        created() {\n            let vm = this\n            vm.refreshAllJobs = (e) =\u003e axios.get('/jobs').then((e) =\u003e (vm.allJobs = e.data))\n            Echo.channel('email-queue')\n                .listen('.add', (e)  =\u003e vm.refreshAllJobs(e))\n                .listen('.sent', (e) =\u003e vm.refreshAllJobs(e))\n        }\n    }\n    \u003c/script\u003e\n```\n\nIn the Vue component above, we have defined a `template`. In there, we loop through the `jobs` array and list each job’s description and timestamp.\n\nIn the `created` method of the Vue component `script`, we have a `refreshAllJobs` function that uses [Axios](https://github.com/axios/axios) (a HTTP request library built-in Laravel by default) to make a request to the `/jobs` route. We then assign the response to the `allJobs` property.\n\nIn the same method, we use [Laravel Echo](https://laravel.com/docs/5.5/broadcasting#installing-laravel-echo) to listen to a Pusher channel and wait for an event to be triggered. Whenever the events `.add`  and `.sent` are triggered, we call the `refreshAllJobs`  method.\n\n\n\u003e 💡 **The event names have a dot before them because, in Laravel, whenever you use the `broadcastAs` method to define an alias you need to add the dot. Without the dot your event will not be caught by the listener. If you do not provide an alias, Laravel will use the namespace + class as the name of the broadcast event.** \n\nOpen the `resources/assets/js/bootstrap.js` file. At the bottom of the file, add the following code:\n\n``` javascript\n    import Echo from 'laravel-echo'\n    \n    window.Pusher = require('pusher-js');\n    \n    window.Echo = new Echo({\n        broadcaster: 'pusher',\n        key: 'PUSHER_APP_KEY',\n        encrypt: true,\n        cluster: 'PUSHER_APP_CLUSTER'\n    });\n```\n\n\u003e ⚠️  **Make sure you replace the `PUSHER_APP_KEY` and `PUSHER_APP_CLUSTER` with your Pusher application key and cluster.**\n\nFinally, run the command below to build your assets:\n\n```\n    $ npm run dev\n```\n\n## Testing our application \n\nAfter the build is complete, start a PHP server if you have not already by running the command below:\n\n``` php\n    $ php artisan serve\n```\n\nThis will create a PHP server so we can preview our application. The URL will be provided on the terminal but the default is http://127.0.0.1:8000. \n\nWhen you see the Laravel homepage, create a new account using the ”Register” link on the top right corner of the page. Now click the “Simulate” button and you should see a new queued email entry. \n\nNow we will manually execute the processes on our queue using the `queue:listen` artisan command. Open a new terminal window and run the command below:\n\n``` php\n    $ php artisan queue:listen\n```\n\nThis should start executing any queues it sees. As long as the terminal is open and the `queue:listen` command is running, when you click the “Simulate” button the queue will run immediately. If you kill the `queue:listen` command, the queue entries will remain there and not be triggered.\n\n\u003e 💡 **In a production environment, you cannot keep `queue:listen` running and you might need a worker running on a background proces. You can read more about how you can do that [here](https://laravel.com/docs/5.5/queues#running-the-queue-worker).**\n\n\n## Conclusion\n\nIn this article, we have been able to create a realtime Laravel queue monitor using Pusher and Vue. Having queues that you can track and quantify can be useful. Hopefully, you picked something from this article.  If you have any questions or feedback, feel free to ask in the comments section.\n\nThe source code is available on [GitHub](https://github.com/neoighodaro/monitoring-laravel-queues).","metaTitle":"Monitoring Laravel’s background queues in realtime","metaDescription":"Build a sample app and report page to monitor Laravel's background queues functionality. Queue emails for sending, and monitor which have been sent."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1msgjCo2j26csGuiUk66qe","type":"Entry","createdAt":"2018-05-14T12:39:59.711Z","updatedAt":"2018-05-14T12:39:59.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Implementing desktop notifications in your Laravel app","url":"desktop-notifications-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3sixk7zsAoQqqSsUWM8I8y","type":"Entry","createdAt":"2018-02-13T18:06:00.483Z","updatedAt":"2018-02-14T10:08:13.372Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Olayinka Omole","url":"olayinka-omole","email":"olayinka.omole@gmail.com","twitter":"https://twitter.com/olayinkaos","github":"https://github.com/olayinkaos","guestWriter":true}}],"projectRepo":"https://github.com/olayinkaos/pusher-news-talk","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-05-11","description":"Use Laravel and Vue to build a news notification module, which will send a desktop notification to everyone on the website when a new post is published.","prerequisite":"You will need PHP and Laravel (5.4 or above) installed on your machine. You should have a working knowledge of PHP and JavaScript.","content":"Realtime notifications are now very common in modern web applications, as site owners want to keep users engaged and informed of happenings on their platform. Notifications are also a great way to build addiction, and make sure users keep coming back to your platform to see \"what's new\".\n\nWith [Laravel](laravel.com) and some [Pusher](http://pusher.com) magic, I will be demonstrating how to build a realtime app, with desktop notifications, utilising the [Notification API](https://developer.mozilla.org/en/docs/Web/API/notification).\n\n## Our application\n\nWe will build a simple News notification module which will alert everyone on a website when a new post is published. Ideally, this would be part of a larger app, but we will build it in isolation here to showcase our desktop notifications.\n\nAt the end of this tutorial, you will have learned how to:\n\n1. Broadcast events in Laravel, using Pusher\n2. Listen for events on channels, using Laravel Echo and Vue.js\n3. Use the Notification API to display desktop notifications\n \nTo follow along, you will need a working knowledge of PHP and JavaScript. Basic knowledge of Laravel and Vue.js are also needed. Laravel 5.4 and Vue.js 2.3 are used.\n\n## Introduction to Pusher\n\nPusher is a service that makes it super easy to add realtime functionality to web and mobile applications. We will be using it in our application, so sign up to a free account [here](https://pusher.com/signup), create an app, and copy out the app credentials (App ID, Key and Secret) from the “App Keys” section.\n\n## Setup and configuration\n\nFor starters, let us set up our app, and do the necessary configuration. We will call the app `news-talk`.\n\nTo create a new app with the [Laravel installer](https://laravel.com/docs/5.4/installation), run this command:\n\n``` \nlaravel new news-talk\n```\nThe next set of commands should be run in the app's root directory.\n\nInstalling the [Pusher PHP library](https://github.com/pusher/pusher-http-php):\n\n``` \ncomposer require pusher/pusher-php-server\n```\nInstalling the [Laravel Frontend](https://laravel.com/docs/5.4/frontend) Dependencies (these include Bootstrap, Axios, Vue.js and a couple of other things which are nice to have):\n\n``` \nnpm install\n```\nInstalling [Laravel Echo](https://laravel.com/docs/5.4/broadcasting#installing-laravel-echo) and [Pusher-js](https://github.com/pusher/pusher-js) which we will use to listen for broadcast events:\n\n``` \nnpm install -S laravel-echo pusher-js\n```\nNext, we will do some more minor configuration to let Laravel know we will be using Pusher to manage our broadcasts.\n\nEditing the `.env`:\n\n``` \n# ./.env\n\nBROADCAST_DRIVER=pusher\n\nPUSHER_APP_ID=your_pusher_add_id\nPUSHER_APP_KEY=your_pusher_app_key\nPUSHER_APP_SECRET=your_pusher_app_secret\n```\nYou can edit some more optional configuration for Pusher in the `./config/broadcasting.php` file generated by Laravel. You can see other options [here](https://laravel.com/docs/5.4/broadcasting#driver-prerequisites).\n\n\u003e Note: If you created your app in a different cluster to the default `us-east-1`, you must configure the cluster option. It is optional if you chose the default option.\n\nFinally, we will configure Echo to use Pusher. We do that by uncommenting and editing the values at the bottom of `resources/assets/js/bootstrap.js`:\n\n``` javascript\n// ./resources/assets/js/bootstrap.js\n\nimport Echo from \"laravel-echo\"\n\n window.Echo = new Echo({\n     broadcaster: 'pusher',\n     key: 'your_pusher_key'\n});\n```\n## Building the backend\n\nLet's create a table for our posts. This is where data we create via our app will be persisted to. We will use a [Laravel migration](https://laravel.com/docs/5.4/migrations) file, and an [Eloquent model](https://laravel.com/docs/5.4/eloquent) for communication with the database.\n\nTo create a `Post` model run this command:\n\n``` \nphp artisan make:model Post -m -c\n```\nThe `-m` and `c` flags are for automatically generating the migration and controller files respectively.\n\nNext, we edit the generated migration file located in the `./database/migrations` folder. We adjust the `up` method to look like this:\n\n``` php\npublic function up() {\n  Schema::create('posts', function (Blueprint $table) {\n    $table-\u003eincrements('id');\n    $table-\u003estring('title');\n    $table-\u003etext('description');\n    $table-\u003etimestamps();\n  });\n}\n```\nThen, after editing the `.env` with your database details, you can create the table with this command:\n\n``` bash\nphp artisan migrate\n```\n\u003e Tip: You can read more on the Laravel .env file [here](https://laravel.com/docs/5.4/configuration#environment-configuration)\n\nWe should also edit the mass-assignable properties on the model:\n\n``` php\n# ./app/Post.php\n\nclass Post extends Model\n{\n\n  /**\n   * The attributes that are mass assignable.\n   *\n   * @var array\n   */\n  protected $fillable = ['title', 'description'];\n}\n```\n### Saving a post\n\nNext, we will add a route and controller method to save a new post.\n\nWe will be making an API call from the front-end to save our posts, so we can add the new route to the API routes at `./routes/api.php`. Whatever route defined here will be prefixed by `api`, and belongs to the `api` middleware group.\n\n``` php\n# ./routes/api\n\nRoute::post('/post', 'PostController@store');\n```\nAdding the corresponding controller method:\n\n``` php\n# ./app/Http/Controllers/PostController.php\n\nuse App\\Post;\n\nclass PostController extends Controller {\n\n  /**\n   * Saves a new post to the database\n   */\n  public function store(Request $request) {\n    // ...\n    // validation can be done here before saving \n    // with $this-\u003evalidate($request, $rules)\n    // ...\n\n    // get data to be saved in an associative array using $request-\u003eonly()\n    $data = $request-\u003eonly(['title', 'description']);\n\n    //  save post and assign return value of created post to $post array\n    $post = Post::create($data);\n\n    // return post as response, Laravel automatically serializes this to JSON\n    return response($post, 201);\n  }\n}\n```\n## Working with events\n\n[Events](https://laravel.com/docs/5.4/events) are a great way to separate out application logic. We can define events to be triggered in our application when an action occurs, and we can define listeners, to listen for such events and carry out other activities.\n\nLaravel allows for easy definition of events and listeners out of the box. It also includes helper functions and classes to allow us easily trigger and broadcast events.\n\nWe can create a new event with this command:\n\n``` \nphp artisan make:event PostPublished\n```\nThe event class file is created at `./app/Events`.\n\nWe can then edit it to suit our needs:\n\n``` php\n# ./app/Events/PostPublished.php\n\nclass PostPublished implements ShouldBroadcast {\n  use Dispatchable, InteractsWithSockets, SerializesModels;\n\n  public $post;\n\n  public function __construct($post) {\n    $this-\u003epost = $post;\n  }\n\n  /**\n   * Get the channels the event should broadcast on.\n   *\n   * @return Channel|array\n   */\n  public function broadcastOn() {\n    return new Channel('posts');\n  }\n\n  public function broadcastWith() {\n    return [\n      'title' =\u003e $this-\u003epost-\u003etitle,\n    ];\n  }\n}\n```\nThe `Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast` interface on the event class is used to inform Laravel that this event should be broadcast.\n\nThe `broadcastOn` method returns the channel that we want to broadcast our event on. The `Channel` class is used for broadcasting on public channels. `PrivateChannel` and `PresenceChannel` are for private channels (these require authentication for access). You can read more about the various Pusher channels [here](https://pusher.com/docs/client_api_guide/client_channels).\n\nBy default, Laravel broadcasts all of an event class’ public properties as its payload… `broadcastWith` helps us override that behaviour and choose what we want to send.\n\n### Dispatching events\n\nIn our app, we want to dispatch the `PostPublished` event after a post has been saved. In Laravel, we can dispatch events using the `Event` Facade, or the `event()` helper function.\n\nTo dispatch our `PostPublished` event, we can edit the `store` method in the `PostController`, and place the event call right after the post is saved:\n\n``` php\n# ./app/Http/Controllers/PostController.php\n\nuse App\\Events\\PostPublished;\n\n// save post and assign return value of created post to $post array\n$post = Post::create($data);\n\n// fire PostPublished event after post is successfully added to database\nevent(new PostPublished($post));\n// or\n// \\Event::fire(new PostPublished($post))\n```\nThe final `PostController` file will look like this:\n\n``` php\n# ./app/Http/Controllers/PostController.php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Events\\PostPublished;\nuse App\\Post;\n\nclass PostController extends Controller {\n\n  /**\n   * Saves a new post to the database\n   */\n  public function store(Request $request) {\n    // ...\n    // validation can be done here before saving \n    // with $this-\u003evalidate($request, $rules)\n    // ...\n\n    // get data to save in an associative array using $request-\u003eonly()\n    $data = $request-\u003eonly(['title', 'description']);\n\n    //  save post and assign return value of created post to $post array\n    $post = Post::create($data);\n\n    // fire PostPublished event after post is successfully added to database\n    event(new PostPublished($post));\n    // or\n    // \\Event::fire(new PostPublished($post))\n\n    // return post as response, Laravel automatically serializes this to JSON\n    return response($post, 201);\n  }\n}\n```\nNow that we are done with building the backend, we can proceed to create our view and event listener on the Frontend.\n\n## Building the frontend\n\nTo create a basic page view for our app, we can edit the default `welcome.blade.php` file created by Laravel. We can replace its contents with the following:\n\n``` html\n\u003c!-- ./resources/views/welcome.blade.php --\u003e\n\n\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"{{ config('app.locale') }}\"\u003e\n\u003chead\u003e\n  \u003cmeta charset=\"utf-8\"\u003e\n  \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e\n  \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n\n  \u003c!-- CSRF Token --\u003e\n  \u003cmeta name=\"csrf-token\" content=\"{{ csrf_token() }}\"\u003e\n\n  \u003ctitle\u003eNews Talk\u003c/title\u003e\n\n  \u003c!-- Styles --\u003e\n  \u003clink href=\"{{ asset('css/app.css') }}\" rel=\"stylesheet\"\u003e\n\n  \u003cstyle\u003e\n    .container {\n      padding-top: 100px;\n    }\n  \u003c/style\u003e\n\n  \u003c!-- Scripts --\u003e\n  \u003cscript\u003e\n    window.Laravel = {!! json_encode([\n      'csrfToken' =\u003e csrf_token(),\n    ]) !!};\n  \u003c/script\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n\n  \u003cdiv id=\"app\"\u003e\n    \u003c!-- home Vue component --\u003e\n    \u003chome\u003e\u003c/home\u003e\n  \u003c/div\u003e\n\n  \u003c!-- Scripts --\u003e\n  \u003cscript src=\"{{ asset('js/app.js') }}\"\u003e\u003c/script\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n```\nMost of the code above is boilerplate Laravel HTML content with relevant scripts and CSS files attached. We will generate them later on.\n\nWe also included a Vue component (`home`) which hasn't been defined yet. Let us go ahead to create and define it.\n\nCreating the `home` Vue component:\n\n``` javascript\n\u003c!-- ./resources/assets/js/components/Home.vue --\u003e\n\u003ctemplate\u003e\n  \u003cdiv class=\"container\"\u003e\n    \u003cdiv class=\"row\"\u003e\n      \u003cdiv class=\"col-sm-6 col-sm-offset-3\"\u003e\n        \u003cdiv class=\"form-group\"\u003e\n          \u003clabel for=\"title\"\u003ePost Title\u003c/label\u003e\n          \u003cinput v-model=\"newPostTitle\" id=\"title\" type=\"text\" class=\"form-control\"\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"form-group\"\u003e\n          \u003clabel for=\"description\"\u003ePost Description\u003c/label\u003e\n          \u003ctextarea v-model=\"newPostDesc\" id=\"description\" rows=\"8\" class=\"form-control\"\u003e\u003c/textarea\u003e\n        \u003c/div\u003e\n        \u003cbutton @click=\"addPost(newPostTitle, newPostDesc)\" \n          :class=\"{disabled: (!newPostTitle || !newPostDesc)}\"\n          class=\"btn btn-block btn-primary\"\u003eSubmit\u003c/button\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  \u003c/div\u003e\n\u003c/template\u003e\n\n\u003cscript\u003e\n  export default {\n    data() {\n      return {\n        newPostTitle: \"\", \n        newPostDesc: \"\" \n      }\n    },\n    created() {\n      this.listenForChanges();\n    },\n    methods: {\n      addPost(postName, postDesc) {\n        // check if entries are not empty\n        if(!postName || !postDesc)\n          return;\n\n        // make API to save post\n        axios.post('/api/post', {\n          title: postName, description: postDesc\n        }).then( response =\u003e {\n          if(response.data) { \n            this.newPostTitle = this.newPostDesc = \"\";\n          }\n        })\n      },\n      listenForChanges() {\n        Echo.channel('posts')\n          .listen('PostPublished', post =\u003e {\n            if (! ('Notification' in window)) {\n              alert('Web Notification is not supported');\n              return;\n            }\n\n            Notification.requestPermission( permission =\u003e {\n              let notification = new Notification('New post alert!', {\n                body: post.title, // content for the alert\n                icon: \"https://pusher.com/static_logos/320x320.png\" // optional image url\n              });\n\n              // link to page on clicking the notification\n              notification.onclick = () =\u003e {\n                window.open(window.location.href);\n              };\n            });\n          })\n        }\n      } \n    }\n\u003c/script\u003e\n```\nIn the above code, we define two methods. `addPost()` and `listenForChanges`. The `addPost` method makes a post request to our API with the required payload when a user adds a new post.\n\nIn the `listenForChanges` method, we use Echo to subscribe to the `posts` channel, which is the channel we are broadcasting to, from our backend. We also listen for `PostPublished` events, and define a callback that activates our desktop notification whenever an event is fired.\n\nWe are using the notifications API for desktop notifications. We first [request permission](https://developer.mozilla.org/en-US/docs/Web/API/Notification/permission) to send desktop notifications, then notify the user once permission is granted.\n\nWe can also check if a browser supports desktop notifications this way:\n\n``` javascript\nif (window.Notification) {\n    console.log('Notifications are supported!');\n} else {\n    alert('Notifications aren\\'t supported on your browser! :(');\n}\n```\nWe create an instance of the Notification object with our post title as the body. An optional `icon` parameter can also be set, as we did.\n\nFinally, we define the component as a global [component](https://vuejs.org/v2/guide/components.html) in `app.js`:\n\n``` javascript\n// ./resources/assets/js/app.js\n\nVue.component('home', require('./components/Home.vue'));\n```\n## Bringing it all together\n\nWe can compile our assets easily using Laravel Mix!:\n\n``` \nnpm run dev\n```\nNow, we can navigate to the app's homepage to see it in action. If you use [Laravel Valet](https://laravel.com/docs/5.4/valet), you can also [share the app](https://laravel.com/docs/5.4/valet#sharing-sites), and visit it via another device to test the desktop notifications.\n\n![laravel-pusher-desktop-alerts](//images.ctfassets.net/1es3ne0caaid/7GMNxTA5FeSOkCK6oGeQSi/5452f6da7bd7d9a1d55127aa9bb62483/laravel-pusher-desktop-alerts.gif)\n\n## Conclusion\n\nWe have learned how to build an event-driven basic realtime app enabled with desktop notifications, thanks to Laravel and Pusher. As a next step, you could also learn [how to build a chat application with Pusher](https://blog.pusher.com/how-to-build-a-laravel-chat-app-with-pusher/), and integrate desktop notifications whenever a user receives a message... awesome, right?\n\nIf you’ve thought of any other great ways to use Pusher and Laravel, let us know in the comments!\n\nThe entire code for this tutorial is [hosted on Github](https://github.com/olayinkaos/pusher-news-talk). You can look through and ask questions if you need more information.","metaTitle":"Implementing desktop notifications in your Laravel app","metaDescription":"This tutorial will show you how to build a news notification app using Laravel and Vue. The app focuses on implementing desktop notification functionality, which is used to alert everyone on the website when a new post is published."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"49IaypwineGooemIEqCu0I","type":"Entry","createdAt":"2018-05-02T10:29:06.479Z","updatedAt":"2018-05-02T10:29:06.479Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Building a realtime analytics dashboard for a Laravel application","url":"realtime-analytics-dashboard-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3j821hA7aMgOiUEaO4Q8y6","type":"Entry","createdAt":"2018-02-26T19:00:03.819Z","updatedAt":"2018-03-20T12:22:11.602Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Shalvah Adebayo","url":"shalvah-adebayo","email":"shalvah.adebayo@gmail.com","twitter":"https://twitter.com/theshalvah","github":"https://shalvah.me/","guestWriter":true}}],"projectRepo":"https://github.com/shalvah/laravel-realtime-analytics-dashboard","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}}],"reviewDate":"2018-05-01","description":"Learn to build an analytics dashboard, to observe the usage and behavior of a Laravel application in realtime.","prerequisite":"To follow this tutorial you will need PHP 7.2 or higher, with the MongoDB driver enabled. You will also need MongoDB and Composer installed, and a Pusher account.","content":"In today’s world, it’s important for website administrators and webmasters to have useful data regarding issues such as the performance of their sites. This helps them to be proactive in tackling issues with their sites. In this tutorial, we’ll build a middleware that logs all requests made to our application and pushes updated analytics on those in realtime to a dashboard. Here’s a preview of our app in action:\n\n![laravel-analytics-demo](//images.ctfassets.net/1es3ne0caaid/1bI7EOHAU2igG6qEU00cei/1a719d3689aa6cf41be279bd17e790a9/laravel-analytics-demo.gif)\n\n## Prerequisites\n1. PHP 7.2 or higher, with the MongoDB driver installed. You can find installation instructions [here](http://php.net/manual/en/mongodb.installation.php).\n2. Composer\n3. MongoDB (version 3.4 or higher). Get it [here](https://docs.mongodb.com/manual/installation/).\n4. A Pusher account. Create one [here](http://pusher.com/signup).\n\n## Setting up the app\n\nLaravel by default uses SQL databases as the backend for its Eloquent models, but we’re using MongoDB in this project, so we’ll start off with a Laravel installation configured to use MongoDB. Clone the repo by running:\n\n```\n    git clone https://github.com/shalvah/laravel-mongodb-starter.git\n```\n\nYou can also download the source directly from [this link.](https://github.com/shalvah/laravel-mongodb-starter/archive/master.zip)\n\nThen `cd` into the project folder and install dependencies:\n\n```\n    composer install\n```\n\nLastly, copy the `.env.example` to a new file called `.env`. Run the following command to generate an application encryption key:\n\n```\n    php artisan key:generate\n```\n\n\u003e Note: If your MongoDB server requires a username and password, add those in your `.env` file as the `DB_USERNAME` and `DB_PASSWORD` respectively.\n\n\n## Logging all requests\n\nWe’ll create a middleware that logs every request to our database. Our middleware will be an \"after” middleware, which means it will run after the request has been processed but just before sending the response. We’ll store the following details:\n\n- The relative URL (for instance, `/users`)\n- The HTTP method (for instance, “GET”)\n- The time it took to respond to the request\n- The day of the week\n- The hour of day,\n\nLet’s create our `RequestLog` model. Create the file `app/Models/RequestLog.php` with the following content:\n\n``` php\n    \u003c?php\n    \n    namespace App\\Models;\n    \n    use Jenssegers\\Mongodb\\Eloquent\\Model;\n    \n    class RequestLog extends Model\n    {\n        protected $guarded = [];\n    }\n```\n\n\nThen create the file `app/Http/Middleware/RequestLogger.php` with the following content:\n\n``` php\n    \u003c?php\n    \n    namespace App\\Http\\Middleware;\n    \n    use App\\Models\\RequestLog;\n    use Carbon\\Carbon;\n    use Closure;\n    \n    class RequestLogger\n    {\n        public function handle(\\Illuminate\\Http\\Request $request, Closure $next)\n        {\n            $response = $next($request);\n    \n            if ($request-\u003erouteIs('analytics.dashboard')) {\n                return $response;\n            }\n    \n            $requestTime = Carbon::createFromTimestamp($_SERVER['REQUEST_TIME']);\n            $request = RequestLog::create([\n                'url' =\u003e $request-\u003egetPathInfo(),\n                'method' =\u003e $request-\u003emethod(),\n                'response_time' =\u003e time() - $requestTime-\u003etimestamp,\n                'day' =\u003e date('l', $requestTime-\u003etimestamp),\n                'hour' =\u003e $requestTime-\u003ehour,\n            ]);\n    \n            return $response;\n        }\n    }\n```\n\n\nThe `if`  condition above prevents us from logging anything if the request is to view the analytics dashboard.\n\nNow, let’s attach the middleware to all our routes. In your `app/Http/Kernel.php`, add the middleware class to the `$middleware` array:\n\n\n``` php    \n    protected $middleware = [\n        // ...\n        // ...\n        \\App\\Http\\Middleware\\RequestLogger::class,\n    ];\n```\n\nWe won’t be using any authentication in our app, but we need some of the frontend scaffolding Laravel provides, so we’ll run this command:\n\n```\n    php artisan make:auth\n```\n\n## Displaying our analytics\n\nLet’s add the route for the analytics dashboard. Add the following to the end of your `routes/web.php`:\n\n``` php\n    Route::get('/analytics', 'AnalyticsController@index')-\u003ename('analytics.dashboard');\n```\n\nNext, we’ll create a class that retrieves our analytics using [MongoDB aggregations.](https://docs.mongodb.com/manual/aggregation/) Create the file `app/Services/AnalyticsService.php` with the following content:\n\n``` php\n    \u003c?php\n    \n    namespace App\\Services;\n    \n    \n    use App\\Models\\RequestLog;\n    use Jenssegers\\Mongodb\\Collection;\n    \n    class AnalyticsService\n    {\n    \n        public function getAnalytics()\n        {\n    \n            $perRoute = RequestLog::raw(function (Collection $collection) {\n                return $collection-\u003eaggregate([\n                    [\n                        '$group' =\u003e [\n                            '_id' =\u003e ['url' =\u003e '$url', 'method' =\u003e '$method'],\n                            'responseTime' =\u003e ['$avg' =\u003e '$response_time'],\n                            'numberOfRequests' =\u003e ['$sum' =\u003e 1],\n                        ]\n                    ]\n                ]);\n            });\n            $requestsPerDay = RequestLog::raw(function (Collection $collection) {\n                return $collection-\u003eaggregate([\n                    [\n                        '$group' =\u003e [\n                            '_id' =\u003e '$day',\n                            'numberOfRequests' =\u003e ['$sum' =\u003e 1]\n                        ]\n                    ],\n                    ['$sort' =\u003e ['numberOfRequests' =\u003e 1]]\n                ]);\n            });\n            $requestsPerHour = RequestLog::raw(function (Collection $collection) {\n                return $collection-\u003eaggregate([\n                    [\n                        '$group' =\u003e [\n                            '_id' =\u003e '$hour',\n                            'numberOfRequests' =\u003e ['$sum' =\u003e 1]\n                        ]\n                    ],\n                    ['$sort' =\u003e ['numberOfRequests' =\u003e 1]]\n                ]);\n            });\n            return [\n                'averageResponseTime' =\u003e RequestLog::avg('response_time'),\n                'statsPerRoute' =\u003e $perRoute,\n                'busiestDays' =\u003e $requestsPerDay,\n                'busiestHours' =\u003e $requestsPerHour,\n                'totalRequests' =\u003e RequestLog::count(),\n            ];\n        }\n    }\n```\n\n\nHere are the analytics we’re gathering:\n\n- `averageResponseTime` ****is the average time taken by our routes to return a response.\n- `statsPerRoute` contains information specific to each route, such as the average response time and number of requests.\n- `busiestDays` contains a list of all the days, ordered by the number of requests per day.\n- `busiestHours` contains a list of all the hours, ordered by the number of requests per hour.\n- `totalRequests` is the total number of requests we’ve gotten.\n\nThen create the controller, `app/Http/Controllers/AnalyticsController.php` with the following content:\n\n``` php\n    \u003c?php\n    \n    namespace App\\Http\\Controllers;\n    \n    use App\\Services\\AnalyticsService;\n    \n    class AnalyticsController extends Controller\n    {\n        public function index(AnalyticsService $analyticsService)\n        {\n            $analytics = $analyticsService-\u003egetAnalytics();\n            return view('analytics', ['analytics' =\u003e $analytics]);\n        }\n    }\n```\n\n\nNow let’s create the markup. Create the file `resources/views/analytics.blade.php` with the following content:\n\n``` php\n    @extends('layouts.app')\n    \n    @section('content')\n        \u003cdiv class=\"container\" id=\"app\"\u003e\n            \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col-md-5\"\u003e\n                    \u003cdiv class=\"card\"\u003e\n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003ch5 class=\"card-title\"\u003eTotal requests\u003c/h5\u003e\n                        \u003cdiv class=\"card-text\"\u003e\n                            \u003ch3\u003e@{{ totalRequests }}\u003c/h3\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-5\"\u003e\n                    \u003cdiv class=\"card\"\u003e\n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003ch5 class=\"card-title\"\u003eAverage response time\u003c/h5\u003e\n                        \u003cdiv class=\"card-text\"\u003e\n                            \u003ch3\u003e@{{ averageResponseTime.toFixed(4) }} seconds\u003c/h3\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n    \n            \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col-md-5\"\u003e\n                    \u003cdiv class=\"card\"\u003e\n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003ch5 class=\"card-title\"\u003eBusiest days of the week\u003c/h5\u003e\n                        \u003cdiv class=\"card-text\" style=\"width: 18rem;\" v-for=\"day in busiestDays\"\u003e\n                            \u003cul class=\"list-group list-group-flush\"\u003e\n                                \u003cli class=\"list-group-item\"\u003e\n                                    @{{ day._id }} (@{{ day.numberOfRequests }} requests)\n                                \u003c/li\u003e\n                            \u003c/ul\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-5\"\u003e\n                    \u003cdiv class=\"card\"\u003e\n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003ch5 class=\"card-title\"\u003eBusiest hours of day\u003c/h5\u003e\n                        \u003cdiv class=\"card-text\" style=\"width: 18rem;\" v-for=\"hour in busiestHours\"\u003e\n                            \u003cul class=\"list-group list-group-flush\"\u003e\n                                \u003cli class=\"list-group-item\"\u003e\n                                    @{{ hour._id }} (@{{ hour.numberOfRequests }} requests)\n                                \u003c/li\u003e\n                            \u003c/ul\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n    \n            \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col-md-5\"\u003e\n                    \u003cdiv class=\"card\"\u003e\n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003ch5 class=\"card-title\"\u003eMost visited routes\u003c/h5\u003e\n                        \u003cdiv class=\"card-text\" style=\"width: 18rem;\" v-for=\"route in statsPerRoute\"\u003e\n                            \u003cul class=\"list-group list-group-flush\"\u003e\n                                \u003cli class=\"list-group-item\"\u003e\n                                    @{{ route._id.method }} @{{ route._id.url }} (@{{ route.numberOfRequests }} requests)\n                                \u003c/li\u003e\n                            \u003c/ul\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-5\"\u003e\n                    \u003cdiv class=\"card\"\u003e\n                    \u003cdiv class=\"card-body\"\u003e\n                        \u003ch5 class=\"card-title\"\u003eSlowest routes\u003c/h5\u003e\n                        \u003cdiv class=\"card-text\" style=\"width: 18rem;\" v-for=\"route in statsPerRoute\"\u003e\n                            \u003cul class=\"list-group list-group-flush\"\u003e\n                                @{{ route._id.method }} @{{ route._id.url }} (@{{ route.responseTime || 0}} s)\n                            \u003c/ul\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    @endsection\n    \n    \u003cscript\u003e\n        window.analytics = @json($analytics);\n    \u003c/script\u003e\n```\n\nWe’ll be using Vue.js to automatically bind data on the view, so the `@{{…}}` around expressions above signify to Laravel’s templating engine that these are JavaScript, not PHP, expressions. Let’s write the Vue code. Replace the code in your `resources/assets/js/app.js` with the following:\n\n``` javascript\n    require('./bootstrap');\n    \n    window.Vue = require('vue');\n    const app = new Vue({\n        el: '#app',\n    \n        data: window.analytics\n    });\n```\n\n## Updating the dashboard in realtime\n\nNow let’s update our request logging middleware so that it broadcasts the updated analytics to the frontend whenever a new request is made. We’ll be making use of Laravel’s event broadcasting for this. \n\nFirst, we’ll create an `AnalyticsUpdated` event. Create the file `app/Events/AnalyticsUpdated.php` with the following content:\n\n``` php\n    \u003c?php\n    \n    namespace App\\Events;\n    \n    use App\\Services\\AnalyticsService;\n    use Illuminate\\Broadcasting\\Channel;\n    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcastNow;\n    use Illuminate\\Queue\\SerializesModels;\n    use Illuminate\\Foundation\\Events\\Dispatchable;\n    use Illuminate\\Broadcasting\\InteractsWithSockets;\n    \n    class AnalyticsUpdated implements ShouldBroadcastNow\n    {\n        use Dispatchable, InteractsWithSockets, SerializesModels;\n    \n        // The updated analytics\n        public $analytics;\n    \n        public function __construct()\n        {\n            $this-\u003eanalytics = (new AnalyticsService())-\u003egetAnalytics();\n        }\n        public function broadcastOn()\n        {\n            return new Channel('analytics');\n        }\n    }\n```\n\nNow, update your `app/Http/Middleware/RequestLogger.php` so it looks like this:\n\n``` php\n    \u003c?php\n    \n    namespace App\\Http\\Middleware;\n    \n    use App\\Events\\AnalyticsUpdated;\n    use App\\Models\\RequestLog;\n    use Carbon\\Carbon;\n    use Closure;\n    \n    class RequestLogger\n    {\n        public function handle(\\Illuminate\\Http\\Request $request, Closure $next)\n        {\n            $response = $next($request);\n    \n            if ($request-\u003erouteIs('analytics.dashboard')) {\n                return $response;\n            }\n    \n            $requestTime = Carbon::createFromTimestamp($_SERVER['REQUEST_TIME']);\n            $request = RequestLog::create([\n                'url' =\u003e $request-\u003egetPathInfo(),\n                'method' =\u003e $request-\u003emethod(),\n                'response_time' =\u003e time() - $requestTime-\u003etimestamp,\n                'day' =\u003e date('l', $requestTime-\u003etimestamp),\n                'hour' =\u003e $requestTime-\u003ehour,\n            ]);\n    \n            // we broadcast the event\n            broadcast(new AnalyticsUpdated());\n            return $response;\n        }\n    }\n```\n\n\nWe need to do a few things to configure event broadcasting in your app. First, to enable event broadcasting, open up your `config/app.php` and uncomment the line in the `providers` array that contains the `BroadcastServiceProvider`:\n\n``` php\n    'providers' =\u003e [\n        ...\n        // uncomment the line below\n        // App\\Providers\\BroadcastServiceProvider::class,\n        ...\n    ],\n```\n\nThen sign in to [your Pusher dashboard](http://app.pusher.com) and create a new app. Copy your app credentials from the **App Keys** section and add them to your `.env` file:\n\n```\n    PUSHER_APP_ID=your-app-id\n    PUSHER_APP_KEY=your-app-key\n    PUSHER_APP_SECRET=your-app-secret\n    PUSHER_APP_CLUSTER=your-app-cluster\n```\n\nThen change the value of `BROADCAST_DRIVER` in your `.env` file to `pusher`:\n\n```\n    BROADCAST_DRIVER=pusher\n```\n\nOpen up the file `config/broadcasting.php`. Within the `pusher` key of the the `connections` array, set the value of the `encrypted` option to false:\n\n``` php\n    return [\n        // ...\n        'connections' =\u003e [\n            'pusher' =\u003e [\n                'driver' =\u003e 'pusher',\n                'key' =\u003e env('PUSHER_APP_KEY'),\n                'secret' =\u003e env('PUSHER_APP_SECRET'),\n                'app_id' =\u003e env('PUSHER_APP_ID'),\n                'options' =\u003e [\n                    'cluster' =\u003e env('PUSHER_APP_CLUSTER'),\n                    'encrypted' =\u003e false, \n                 ],\n             ],\n        ]\n    ];\n```\n\n\n\u003e Note: Laravel sometimes caches old configuration, so for the project to see your new configuration values, you might need to run the command `php artisan config:clear`\n\nThen install the Pusher PHP library by running:\n\n```\n    composer require pusher/pusher-php-server \"~3.0\"\n```\n\nOn the frontend, we need to install Laravel Echo and the Pusher JavaScript library. Do this by running:\n\n```\n    # install existing dependencies first\n    npm install\n    npm install pusher-js laravel-echo --save\n```\n\nNext, uncomment the following lines in your `resources/assets/js/bootstrap.js`:\n\n``` javascript    \n    // import Echo from 'laravel-echo'\n    // \n    // window.Pusher = require('pusher-js');\n    //\n    // window.Echo = new Echo({\n    //     broadcaster: 'pusher',\n    //     key: process.env.MIX_PUSHER_APP_KEY,\n    //     cluster: process.env.MIX_PUSHER_APP_CLUSTER,\n    //     encrypted: true\n    // });\n```\n\n\nNow open up your `resources/assets/js/app.js` and add the following code to the end:\n\n``` javascript\n    Echo.channel('analytics')\n        .listen('AnalyticsUpdated', (event) =\u003e {\n            Object.keys(event.analytics).forEach(stat =\u003e {\n                window.analytics[stat] = event.analytics[stat];\n            })\n        });\n```\n\nHere we listen for the `AnalyticsUpdated` and update each statistic accordingly. Since we’ve bound the `data` item of the Vue instance to `window.analytics` earlier, by changing a value in `window.analytics`, we can be sure that Vue will automatically re-render with the updated values.\n\nNow run `npm run dev` to compile and build our assets.\n\nFor us to test our app, we need some routes to visit. These routes should take different amounts of time to load, so we can see the effect on our statistics. Let’s add a dummy route that waits for how many seconds we tell it to. Visiting `/wait/3` will wait for three seconds, `/wait/1` for one second and so on. Add this to the end of your `routes/web.php`:\n\n\n``` php\n    Route::get('/wait/{seconds}', function ($seconds) {\n        sleep($seconds);\n        return \"Here ya go! Waited for $seconds seconds\";\n    });\n```\n\nLet’s see the app in action. Start your MongoDB server by running `mongod`. (On Linux/macOS, you might need to run it as `sudo`).\n\nThen start your app by running:\n\n```\n    php artisan serve\n```\n\nVisit your analytics dashboard at http://localhost:8000/analytics. Then play around with the app by visiting a few pages (the `wait` URL with different values for the number of seconds) and watch the stats displayed on the dashboard change in realtime.\n\n\n## Conclusion\n\nIn this article, we’ve built a middleware that tracks every request, a service that computes analytics for us based on these tracks, and a dashboard that displays them. Thanks to Pusher, we’ve been able to make the dashboard update in realtime as requests come in. The full source code is available [on GitHub](https://github.com/shalvah/laravel-realtime-analytics-dashboard).\n\n","metaTitle":"Building an analytics dashboard for a Laravel application","metaDescription":"This short tutorial shows you how to create an realtime analytics dashboard for a Laravel application."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"23Z06JLFEAwi6MIWUmiwgM","type":"Entry","createdAt":"2018-05-01T11:48:42.247Z","updatedAt":"2018-05-01T11:53:37.266Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime spreadsheets application - Part 4: Automatically cleaning up empty documents","url":"realtime-spreadsheets-part-4","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3j821hA7aMgOiUEaO4Q8y6","type":"Entry","createdAt":"2018-02-26T19:00:03.819Z","updatedAt":"2018-03-20T12:22:11.602Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Shalvah Adebayo","url":"shalvah-adebayo","email":"shalvah.adebayo@gmail.com","twitter":"https://twitter.com/theshalvah","github":"https://shalvah.me/","guestWriter":true}}],"projectRepo":"https://github.com/shalvah/shoots","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}}],"reviewDate":"2018-04-30","description":"This series shows you how to build a spreadsheets application using PHP (Laravel) for the backend, and Pusher for realtime updates. In part four, add clean-up functionality. Unused spreadsheets are automatically deleted.","prerequisite":"To follow this tutorial you will need PHP 7.2 or higher, with the MongoDB driver enabled. You will also need Composer, MongoDB and a Pusher account.","content":"*This is part 4 of a 4-part tutorial. You can find part 1 [here](https://pusher.com/tutorials/realtime-spreadsheets-part-1), part 2 [here](hhttps://pusher.com/tutorials/realtime-spreadsheets-part-2) and part 3 [here](https://pusher.com/tutorials/realtime-spreadsheets-part-3).*\n\nWelcome to the last part of our quest to build a Google Sheets-like spreadsheets editor. In the earlier parts of this series, we’ve implemented simultaneous editing by multiple users in realtime.\n\nIn this article, we’ll expand our app functionality even more by using Pusher to automatically clean up empty documents, so we don’t leave them lying around in the user’s history (and our database).\n\n![realtime-spreadsheets-part-4-demo](//images.ctfassets.net/1es3ne0caaid/5tSgRzGYlGmycEG8aEUqME/fbad7614030cbc218b82d82cf9e45fb3/realtime-spreadsheets-part-4-demo.gif)\n\n\n## Prerequisites\n1. PHP 7.2 or higher, with the MongoDB driver installed. You can find installation instructions [here](http://php.net/manual/en/mongodb.installation.php).\n2. Composer\n3. MongoDB (version 3.4 or higher). Get it [here](https://docs.mongodb.com/manual/installation/).\n4. A Pusher account. Create one [here](http://pusher.com/signup).\n\n\n## Setting up\n\u003e Note: if you followed through with the earlier parts of this series and still have your project code, you can skip this section.\n\nClone the project from GitHub:\n\n```\n    git clone -b part-3-whos-viewing https://github.com/shalvah/shoots.git\n```\n\nOr download the source directly from [this link.](https://github.com/shalvah/shoots/archive/part-3-whos-viewing.zip)\n\nThen `cd` into the project folder and install dependencies:\n\n```\n    composer install\n```\n\nLastly, copy the `.env.example` to a new file called `.env`. Add your Pusher app credentials to the `.env` file:\n\n```\n    PUSHER_APP_ID=your-app-id\n    PUSHER_APP_KEY=your-app-key\n    PUSHER_APP_SECRET=your-app-secret\n    PUSHER_APP_CLUSTER=your-app-cluster\n```\n\nLook for these lines of JavaScript in `resources/views/spreadsheet.blade.php`:\n\n``` php    \n    let pusher = new Pusher('your-app-key', {\n        cluster: 'your-app-cluster'\n    });\n```\n\nInsert your Pusher app key and cluster in the appropriate places.\n\nRun the following command to generate an application encryption key:\n\n```\n    php artisan key:generate\n```\n\n\u003e Note: if your MongoDB server requires a username and password, add those in your `.env` file as the `DB_USERNAME` and `DB_PASSWORD` respectively.\n\n\n## The problem\n\nCurrently, here’s what happens when a user clicks the **Create New Spreadsheet** button on the dashboard:\n\n1. A new spreadsheet is created in the database.\n2. The user is redirected to the spreadsheet’s view, where they can edit the spreadsheet.\n3. As the user edits the sheet, changes are synced to the backend and saved to the database.\n\nQuestion: what happens if the user changes their mind after step two and closes the browser or leaves the page **without making any changes to the sheet**? \n\nRight now, nothing special. The document still exists, and it shows up in the user’s list of documents on the dashboard. \n\nHowever, in web applications like Gmail (when composing a new email) or Google Docs/Sheets (editing a new document), if you exit the page without making any changes, the document or draft is automatically discarded.\n\nSo, let’s do this. Rather than clog the user’s document history with empty documents, we’ll get rid of documents that the user leaves unchanged.\n\n\n## Our solution\n\nTo implement this, we’ll be making use of Pusher’s [channel existence webhooks](https://pusher.com/docs/webhooks#channel-existence), specifically the `[channel_vacated](https://pusher.com/docs/webhooks#channel_vacated)` event. This event is fired whenever all the members of a channel have left. Here’s how we’ll implement this:\n\n\n- When all users have left the document channel (by closing the document), Pusher will fire the `channel_vacated` event to our webhook.\n- Our webhook code will retrieve the corresponding sheet from the database and check if it’s still empty. If it is, we delete it.\n\nLet’s do this. First, we’ll add a utility method to our `Sheet` model (`app/Models/Sheet.php`) to determine if a sheet is empty or not:\n\n``` php\n    public function isEmpty(): bool\n    {\n        if ($this-\u003econtent == [[]]) {\n            return true;\n        }\n    \n        foreach ($this-\u003econtent as $row) {\n            foreach ($row as $cell) {\n                if (!is_null($cell)) {\n                    return false;\n                }\n            }\n        }\n    \n        return true;\n    }\n```\n\nNext, we’ll implement the webhook route in our `routes/api.php`:\n\n``` php\n    \u003c?php\n    \n    use App\\Models\\Sheet;\n    use Illuminate\\Http\\Request;\n    \n    Route::post('sheets/webhook', function (Request $request) {\n        $body = $request-\u003epost();\n        foreach ($body['events'] as $event) {\n            if ($event['name'] == 'channel_vacated') {\n                $sheetId = str_replace('presence-sheet-', '', $event['channel']);\n                $sheet = Sheet::find($sheetId);\n                if ($sheet-\u003eisEmpty()) {\n                    $sheet-\u003edelete();\n                }\n            }\n            http_response_code(200);\n        }});\n```\n\n\n\u003e Note: we’re putting this route in `routes/api.php` rather than `routes/wen.php` because the route will not be called from a browser and we don’t want the `web` middleware provided by Laravel to apply to it.\n\nLastly, we need to register this webhook with Pusher. Since the application currently lives on our local machine, we need a way of exposing it via a public URL. [Ngrok](http://ngrok.com) is an easy-to-use tool that helps with this. Sign up on http://ngrok.com and follow the instructions to install ngrok. Then expose http://localhost:8000 on your machine by running:\n\n```\n    ./ngrok http 8000\n```\n\nYou should see output like this:\n\n![realtime-spreadsheets-ngrok](//images.ctfassets.net/1es3ne0caaid/241eB3XTxScsEKmw2KIS2A/cfafd8f53d75213b1cddc95cd661a45b/realtime-spreadsheets-ngrok.png)\n\nCopy the second **Forwarding** URL (the one using HTTPS). Your webhook URL will then be `\u003cyour-ngrok-url\u003e/api/sheets/webhook` (for instance, for the screenshot above, my webhook URL is `https://fa74c4e1.ngrok.io/api/sheets/webhook`).\n\nNow you need to register the webhook on Pusher. Log into your [Pusher app dashboard](https://app.pusher.com) and select your spreadsheets app. Click on the **Webhooks** tab and select the **channel existence** radio button. In the text box, paste the URL of the webhook you obtained above, and click **Add**.\n\nNow, let’s test it out. Start your MongoDB server by running `mongod`. (On Linux/macOS, you might need to run it as `sudo`).\n\nThen start your app by running, in a new terminal window:\n\n```\n    php artisan serve\n```\n\nSign in to your app at http://localhost:8000/login (or register at http://localhost:8000/register if you haven’t signed up before) and create a new spreadsheet.  Navigate away from the page by visiting another URL. Then come back to the dashboard ([http://localhost:8000/home](http://localhost:8000/home)). You should see that the spreadsheet you just created does **not** show up.\n\n\n\u003e Note: you might need to refresh our app dashboard one or more times before the document is removed from the list. This is because, since we’re loading our dashboard from our local machine, it’s much faster than the deletion process (which has to travel over the Internet to Pusher and back). In a production server, this typically wouldn’t happen.\n\n\n## Conclusion\n\nOver the course of this four-part series, we’ve built a spreadsheets application that leverages different features of Pusher to provide some of the functionality of Google Sheets. I hope you’ve followed along and enjoyed this series as much as I have! You can check out the full source code [on GitHub](https://github.com/shalvah/shoots).","metaTitle":"Build a realtime spreadsheets app - Part 4: Auto-cleanup","metaDescription":"Over this four-part series, create a spreadsheet application with realtime updates and presence indicators. In part four, add clean-up functionality. Unused spreadsheets are automatically deleted."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2GHhezIxFuYaImq8mC6miI","type":"Entry","createdAt":"2018-05-01T11:47:10.821Z","updatedAt":"2018-06-14T09:17:07.927Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime spreadsheets application - Part 2: Implementing realtime collaboration","url":"realtime-spreadsheets-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3j821hA7aMgOiUEaO4Q8y6","type":"Entry","createdAt":"2018-02-26T19:00:03.819Z","updatedAt":"2018-03-20T12:22:11.602Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Shalvah Adebayo","url":"shalvah-adebayo","email":"shalvah.adebayo@gmail.com","twitter":"https://twitter.com/theshalvah","github":"https://shalvah.me/","guestWriter":true}}],"projectRepo":"https://github.com/shalvah/shoots/tree/part-2-realtime-collaboration)","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}}],"reviewDate":"2018-04-30","description":"This series shows you how to build a spreadsheets application using PHP (Laravel) for the backend, and Pusher for realtime updates. In part two, implement realtime collaboration functionality, allowing multiple users to work on a spreadsheet simultaneously.","prerequisite":"To follow this tutorial you will need PHP 7.2 or higher, with the MongoDB driver enabled. You will also need Composer, MongoDB and a Pusher account.","content":"*This is part 2 of a 4-part tutorial. You can find part 1 [here](https://pusher.com/tutorials/realtime-spreadsheets-part-1), part 3 [here](https://pusher.com/tutorials/realtime-spreadsheets-part-3) and part 4 [here](https://pusher.com/tutorials/realtime-spreadsheets-part-4).*\n\nIn the [first part](https://pusher.com/tutorials/realtime-spreadsheets-part-1) of this series, we created a basic spreadsheets application that allows a user to create spreadsheets. A user could also share the link to a sheet with another user, thereby giving them the ability to edit the spreadsheet.\n\nIn this article, we’ll bring our application functionality closer to that of Google Sheets by adding realtime collaboration functionality. This means that multiple users can work on the same sheet at the same time, and both of their changes show up in all other windows immediately. Here’s a glimpse of the end result:\n\n![realtime-spreadsheets-part-2-demo](//images.ctfassets.net/1es3ne0caaid/5o50jUnVGog2UmUmKuYuaq/d84518dd6c1c7123acb5cb8b57670905/realtime-spreadsheets-part-2-demo.gif)\n\n## Prerequisites\n1. PHP 7.2 or higher, with the MongoDB driver installed. You can find installation instructions [here](http://php.net/manual/en/mongodb.installation.php).\n2. Composer\n3. MongoDB (version 3.4 or higher). Get it [here](https://docs.mongodb.com/manual/installation/).\n4. A Pusher account. Create one [here](http://pusher.com/signup).\n\n\n## Setting up\n\u003e Note: if you followed through with the first part and still have your project code, you can skip this section.\n\nClone the project from GitHub:\n\n```\n    git clone -b part-1-users-spreadsheets https://github.com/shalvah/shoots.git\n```\n\nOr download the source directly from [this link.](https://github.com/shalvah/shoots/archive/part-1-users-spreadsheets.zip)\n\nThen `cd` into the project folder and install dependencies:\n\n```\n    composer install\n```\n\nLastly, copy the `.env.example` to a new file called `.env`. Run the following command to generate an application encryption key:\n\n```\n    php artisan key:generate\n```\n\n\u003e Note: if your MongoDB server requires a username and password, add those in your `.env` file as the `DB_USERNAME` and `DB_PASSWORD` respectively.\n\n\n\n## Making editing realtime\n\nOur realtime sync has two parts:\n\n- Whenever a user opens a sheet, we'll subscribe them to a specific Pusher channel, identified by the sheet’s ID.\n- When a user makes changes to the sheet ([Handsontable's](https://github.com/handsontable/handsontable) `afterChange` event), we send the update via AJAX to the server. The server will then update the sheet's content in the database and broadcasts the change on the channel above to all subscribed users so the UI can be updated accordingly\n\nLet’s do it! First, we’ll add a virtual property to our sheets, `channel_name`. This property will return the name of the Pusher channel we should subscribe to in order to be notified about changes to that sheet. Add the following method to your `Sheet` model (`app/Models/Sheet.php`):\n\n\n``` php\n    public function getChannelNameAttribute()\n    {\n        return \"presence-sheet-$this-\u003e_id\";\n    }\n```\n\nThe name of the channel starts with `presence-`, to indicate that this is a [presence channel](https://pusher.com/docs/client_api_guide/client_presence_channels). We’re using a presence channel because it provides us with additional information about **who** is subscribed to the channel, which we’ll need in the next part of this guide. \n\nNow, on to our frontend. Replace the code in your `resources/views/spreadsheet.blade.php` with the following:\n\n``` php\n    \u003chead\u003e\n        \u003ctitle\u003e{{ $sheet-\u003ename }}\u003c/title\u003e\n        \u003cmeta name=\"csrf-token\" content=\"{{ csrf_token() }}\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/handsontable/2.0.0/handsontable.min.css\" t\n        \u003c!-- Fonts --\u003e\n        \u003clink rel=\"dns-prefetch\" href=\"https://fonts.gstatic.com\"\u003e\n        \u003clink href=\"https://fonts.googleapis.com/css?family=Raleway:300,400,600\" rel=\"stylesheet\" type=\"text/css\"\u003e\n    \n        \u003c!-- Styles --\u003e\n        \u003clink href=\"{{ asset('css/app.css') }}\" rel=\"stylesheet\"\u003e\n    \u003c/head\u003e\n    \n    \u003cbr\u003e\n    \u003ch2\u003e{{ $sheet-\u003ename }}\u003c/h2\u003e\n    \u003cdiv id=\"sheet\"\u003e\u003c/div\u003e\n    \n    \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/handsontable/2.0.0/handsontable.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n        let csrfToken = document.head.querySelector('meta[name=\"csrf-token\"]').content;\n        let sheetContent = @json($sheet-\u003econtent);\n    \n        let container = document.getElementById('sheet');\n        let table = new Handsontable(container, {\n            data: sheetContent,\n            rowHeaders: true,\n            colHeaders: true,\n            minCols: 20,\n            minRows: 20,\n            afterChange: function (change, source) {\n                if (source === 'loadData') return;\n    \n                console.log(change, source);\n    \n                fetch('/sheets/{{ $sheet-\u003e_id }}', {\n                    method: 'PUT',\n                    body: JSON.stringify({ change: change[0] }),\n                    headers: {\n                        'X-CSRF-TOKEN': csrfToken,\n                        'Content-Type': 'application/json'\n                    },\n                    credentials: 'same-origin'\n                })\n            }\n        });\n    \u003c/script\u003e\n```\n\n\nLet’s take a closer look at the code. The `afterChange` event is fired by Handsontable whenever the data in the table changes, either due to loading data from the server or due to a user changing a cell. When this happens, our callback gets called with two parameters:\n\n- The **change** is an array containing the cell that was changed. The cell is represented as an array with four elements: the row index, columnindex, old value and new value.\n- The **source** is either “loadData” or “edit”, depending on which scenario mentioned above applies.\n\nFor instance, let’s suppose we have an empty sheet. When the page is loaded, the `afterChange` is fired with the `change` being an empty array and the `source` being “loadData”. Let’s suppose our table looks like this:\n\n\n      |   A   |   B   |   C \n    ---------------------------\n    1 |\n    2 |\n    3 |\n\nSupposing a user edits cell A2 to contain the value “hi”:\n\n\n      |   A   |   B   |   C \n    ---------------------------\n    1 |\n    2 | hi\n    3 |\n\nThe `afterChange` event will be fired with the `source` as “edit”. The `change` parameter will look like this:\n\n```\n    [\n      [1, 0, null, 'hi']\n    ]\n```\n\nThen, supposing the user changes their mind and switches the “hi” to “hello”, `change` will be:\n\n```\n    [\n      [1, 0, 'hi', \"hello\"]\n    ]\n```\n\nIn both these cases:\n\n- The first element is the row index (indexes start from 0, so row 2 is index 1)\n- The second element is the column index (again, zero-indexed)\n- The third element is the old value of the cell (`null` if the cell was empty)\n- The fourth element is the new value\n\nIn the callback we passed to `afterChange` above, we use [Fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) to send the new change to the server. Let’s update our controller to handle this. \n\nFirst, we need to install and configure the Pusher package, since we’ll be broadcasting the change to all connected clients. Run the following command:\n\n```\n    composer require pusher/pusher-http-laravel\n    php artisan vendor:publish --provider=\"Pusher\\Laravel\\PusherServiceProvider\"\n```\n\nSign in to [your Pusher dashboard](http://app.pusher.com) and create a new app. Copy your app credentials from the **App Keys** section and add them to your `.env` file:\n\n```\n    PUSHER_APP_ID=your-app-id\n    PUSHER_APP_KEY=your-app-key\n    PUSHER_APP_SECRET=your-app-secret\n    PUSHER_APP_CLUSTER=your-app-cluster\n```\n\n\n\u003e Note: Laravel sometimes caches old configuration, so for the project to see your new configuration values, you might need to run the command `php artisan config:clear`\n\n\nModify the `update` method of your `app/Http/Controllers/SheetsController.php` to look like this:\n\n``` php\n    public function update($id)\n    {\n        $sheet = Sheet::findOrFail($id);\n        $change = \\request('change');\n        [$rowIndex, $columnIndex, $oldValue, $newValue] = $change;\n        $sheet-\u003econtent = $this-\u003eupdateCell($rowIndex, $columnIndex, $newValue, $sheet-\u003econtent);\n        $sheet-\u003esave();\n        \\Pusher::trigger($sheet-\u003echannel_name, 'updated', ['change' =\u003e $change]);\n        return response()-\u003ejson(['sheet' =\u003e $sheet]);\n    }\n    \n    protected function updateCell($rowIndex, $columnIndex, $newValue, $sheetContent)\n    {\n        // we expand the sheet to reach the farthest cell\n        for ($row = 0; $row \u003c= $rowIndex; $row++) {\n           // create the row if it doesnt exist\n            if (!isset($sheetContent[$row])) {\n                $sheetContent[$row] = [];\n            }\n            for ($column = 0; $column \u003c= $columnIndex; $column++) {\n                if (!isset($sheetContent[$row][$column])) {\n                    // create the column if it doesnt exist\n                    $sheetContent[$row][$column] = null;\n                }\n            }\n        }\n        $sheetContent[$rowIndex][$columnIndex] = $newValue;\n        return $sheetContent;\n    }\n```\n\nHere, we update the specific cell that was changed in the sheet’s content and then trigger an `updated` event via Pusher with the change as the payload.\n\n\n\u003e Note: in our `updateCell` function, we expand the sheet to reach the farthest column, filling all empty cells with `null`. This is so our sheet doesn’t end up with missing rows and columns\n\nLet’s head back to our frontend and add the code that handles this event. Add this to the bottom of your `resources/views/spreadsheet.blade.php`:\n\n\n``` php    \n    \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n        let pusher = new Pusher('your-app-key', {\n            cluster: 'your-app-cluster',\n            authEndpoint: '/sheets/{{ $sheet-\u003e_id }}/subscription_auth',\n            auth: {\n                headers: {\n                    'X-CSRF-Token': csrfToken\n                }\n            }\n        });\n        pusher.subscribe(\"{{ $sheet-\u003echannel_name }}\")\n            .bind('updated', function (message) {\n                let [rowIndex, columnIndex, oldValue, newValue] = message.change;\n                addCellValue(rowIndex, columnIndex, newValue);\n                table.loadData(sheetContent)\n        });\n      \n        function addCellValue(rowIndex, columnIndex, newValue) {\n          // we expand the sheet to reach the farthest cell\n          for (let row = 0; row \u003c= rowIndex; row++) {\n              if (!sheetContent[row]) sheetContent[row] = [];\n              for (let column = 0; column \u003c= columnIndex; column++) {\n                  if (!sheetContent[row][column])\n                    sheetContent[row][column] = null;\n              }\n          }\n          sheetContent[rowIndex][columnIndex] = newValue;\n    }\n    \u003c/script\u003e\n```\n\nReplace `your-app-key` and `your-app-cluster` in the code above with your Pusher app key and cluster that you obtained from your dashboard earlier.\n\nIn this code:\n\n- We initialize our Pusher client and subscribe to the sheet’s channel. \n- Since presence channels require authentication, we provide an `authEndpoint` which Pusher will call to determine if the current user is permitted to subscribe to this sheet.\n- We bind to the `updated` event and update the sheet’s content similar to how we did on the server (in the `addCellValue` function), then we refresh the table UI by calling `table.loadData`.\n\nThe last piece of the puzzle we need to implement is our authentication endpoint. Let’s do that now. Add this to the end of your `routes/web.php`:\n\n\n``` php    \n    Route::post('sheets/{id}/subscription_auth', 'SheetsController@authenticateForSubscription');\n```\n\nNow, add the `authenticateForSubscription` to your `app/Http/Controllers/SheetsController.php`:\n\n\n``` php    \n    public function authenticateForSubscription($id)\n    {\n        $authSignature = \\Pusher::presence_auth(\n            \\request('channel_name'),\n            \\request('socket_id'),\n            \\Auth::user()-\u003e_id,\n            \\Auth::user()-\u003etoArray()\n        );\n        return response()-\u003ejson(json_decode($authSignature));\n    }\n```\n\nGreat. Now, let’s test our app out. Start your MongoDB server by running `mongod`. (On Linux/macOS, you might need to run it as `sudo`).\n\nThen start your app by running:\n\n```\n    php artisan serve\n```\n\nSign in to your app at http://localhost:8000/login (or http://localhost:8000/register if you didn’t sign up in the previous part) and create a new spreadsheet. Copy the spreadsheet’s url from your browser and open it in a second tab (as a different user or the same user). You should be able to make changes to the sheet in both tabs and see them show up in realtime.\n\n\n## Conclusion\n\nWell, that was fun, wasn’t it? But there’s more to come. In the [next part](https://pusher.com/tutorials/realtime-spreadsheets-pusher-part-3) of this series, we’ll replicate another nice feature of Google Sheets: showing which users are currently viewing the spreadsheet in realtime. Stay tuned. You can check out the source code of the app thus far [on GitHub.](https://github.com/shalvah/shoots/tree/part-2-realtime-collaboration)\n\n","metaTitle":"Build a realtime spreadsheets app - Part 2: Collaboration","metaDescription":"Over this four-part series, create a spreadsheet application with realtime updates and presence indicators. In part two, implement realtime collaboration functionality, allowing multiple users to work on a spreadsheet simultaneously."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2yvdEJeIG400mWG0CqUsWG","type":"Entry","createdAt":"2018-05-01T11:46:35.391Z","updatedAt":"2018-05-01T11:51:58.490Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime spreadsheets application - Part 1: Users and spreadsheets","url":"realtime-spreadsheets-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3j821hA7aMgOiUEaO4Q8y6","type":"Entry","createdAt":"2018-02-26T19:00:03.819Z","updatedAt":"2018-03-20T12:22:11.602Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Shalvah Adebayo","url":"shalvah-adebayo","email":"shalvah.adebayo@gmail.com","twitter":"https://twitter.com/theshalvah","github":"https://shalvah.me/","guestWriter":true}}],"projectRepo":"https://github.com/shalvah/shoots/tree/part-1-users-spreadsheets","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}}],"reviewDate":"2018-04-30","description":"This series shows you how to build a spreadsheets application using PHP (Laravel) for the backend, and Pusher for realtime updates. In part one, implement user accounts and basic spreadsheet functionality.","prerequisite":"To follow this tutorial you will need PHP 7.2 or higher, with the MongoDB driver enabled. You will also need Composer, MongoDB and a Pusher account.","content":"*This is part 1 of a 4-part tutorial. You can find part 2 [here](https://pusher.com/tutorials/realtime-spreadsheets-part-2), part 3 [here](hhttps://pusher.com/tutorials/realtime-spreadsheets-part-3) and part 4 [here](https://pusher.com/tutorials/realtime-spreadsheets-part-4).*\n\nApps like Google Docs and Google Sheets are very popular today, partly because they allow users to easily share documents for others to collaborate. They also enable multiple users to work on the same document simultaneously without clashes or fear of lost data. \n\nIn this four-part guide, we’ll build a spreadsheet app that works similar to Google Sheets. A user can create spreadsheets and share the link to the sheet with someone else, giving that person the ability to collaborate on the sheet in realtime without overwriting each other’s edits. Our app will also display the users who are currently viewing the sheet.\n\n## Prerequisites\n1. PHP 7.2 or higher, with the MongoDB driver installed. You can find installation instructions [here](http://php.net/manual/en/mongodb.installation.php).\n2. Composer\n3. MongoDB (version 3.4 or higher). Get it [here](https://docs.mongodb.com/manual/installation/).\n4. A Pusher account. Create one [here](http://pusher.com/signup).\n\n\n## Setting up the app\n\nLaravel by default uses SQL databases as the backend for its Eloquent models, but we’re using MongoDB in this project, so we’ll start off with a Laravel installation configured to use MongoDB. Clone the repo by running:\n\n```\n    git clone https://github.com/shalvah/laravel-mongodb-starter.git\n```\n\nYou can also download the source directly from [this link.](https://github.com/shalvah/laravel-mongodb-starter/archive/master.zip)\n\nThen `cd` into the project folder and install dependencies:\n\n```\n    composer install\n```\n\nLastly, copy the `.env.example` to a new file called `.env`. Run the following command to generate an application encryption key:\n\n```\n    php artisan key:generate\n```\n\n\u003e Note: if your MongoDB server requires a username and password, add those in your `.env` file as the `DB_USERNAME` and `DB_PASSWORD` respectively.\n## User authentication\n\nWe’ll take advantage of the inbuilt user authentication system that comes with Laravel by running:\n\n```\n    php artisan make:auth\n```\n\nWe’ll need to configure a few things. Replace the `create` method of your `app/Http/Controllers/Auth/RegisterController.php` with the following:\n\n``` php\n     protected function create()\n     {\n        return \\App\\Models\\User::create([\n            'name' =\u003e $data['name'],\n            'email' =\u003e $data['email'],\n            'password' =\u003e Hash::make($data['password']),\n            'viewed_sheets' =\u003e []\n        ]);\n    }\n```\n\nThen in your `app/Models/User.php`, add `viewed_sheets` as an entry in the `$fillable` array:\n\n\n``` php    \n    protected $fillable = [\n        'name', 'email', 'password', 'viewed_sheets'\n    ];\n```\n\nThe `viewed_sheets` property is where we’ll store the IDs of all sheets the user has opened recently, so we can display them on the user’s dashboard. \n\n\n## Building the user dashboard\n\nNow, let’s build the dashboard that a user sees when they log in. Similar to Google Sheets, we’ll display a list of spreadsheets they’ve viewed recently, along with a button to create a new spreadsheet. Replace the contents of your `resources/views/home.blade.php` with the following:\n\n``` php\n    @extends('layouts.app')\n    \n    @section('content')\n        \u003cdiv class=\"container\"\u003e\n            \u003cdiv class=\"row justify-content-center\"\u003e\n                \u003cdiv class=\"col-md-8\"\u003e\n                    \u003cdiv class=\"card\"\u003e\n                        \u003cdiv class=\"card-header\"\u003eDashboard\u003c/div\u003e\n    \n                        \u003cdiv class=\"card-body\"\u003e\n                            \u003cdiv class=\"text-center\"\u003e\n                                \u003ca class=\"btn btn-lg btn-primary\" href=\"{{ route('sheets.new') }}\"\u003eCreate new spreadsheet\u003c/a\u003e\n                            \u003c/div\u003e\n    \n                            \u003cdiv class=\"list-group\"\u003e\n                                @if($sheets = \\Auth::user()-\u003eviewedSheets())\n                                    @foreach($sheets as $sheet)\n                                            \u003ca href=\"/sheets/{{ $sheet-\u003e_id }}\" class=\"list-group-item\"\u003e\n                                                {{ $sheet-\u003ename }}\n                                            \u003c/a\u003e\n                                    @endforeach\n                                @endif\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    @endsection\n```\n\n\nWe’ll add a new method to our `User` model, `viewedSheets`. This method will search for all sheets whose IDs are in the `viewed_sheets` property and retrieve them. First, create the `Sheet` model (`app/Models/Sheet.php)` with the following content:\n\n``` php\n    \u003c?php\n    \n    namespace App\\Models;\n    \n    use Jenssegers\\Mongodb\\Eloquent\\Model;\n    \n    class Sheet extends Model\n    {\n        protected $guarded = [];\n    }\n```\n\n\nThen add the `viewedSheets` method to your `app/Models/User.php`:\n\n``` php\n    public function viewedSheets()\n    {\n        return \\App\\Models\\Sheet::whereIn('_id', $this-\u003eviewed_sheets)-\u003eget();\n    }\n```\n\n\n## Working with sheets\n\nWe have a few more things to achieve at this point:\n\n- Clicking the **Create a Spreadsheet** button should create a new, empty sheet and open it up for editing\n- Clicking on a spreadsheet in the list of recently viewed sheets should also open it up for editing\n- Our app will have autosave enabled; we’ll save changes to a sheet via AJAX as the user makes them. This means we need an endpoint for updating our sheets\n\nOur sheets will have the following properties:\n\n- An **ID.** MongoDB automatically generates this for us as `_id`\n- A **name.** (for now, sheets will be called “Untitled spreadsheet”)\n- An **owner**. We’ll store this as `_owner`. (The `_` indicates that it’s an ID.)\n- **Content** in rows and columns. We’ll store this as an array of rows. Each rowis an array with each entry being a column.\n\nFor instance, with a table like this:\n\n      | A | B | C \n    --------------\n    1 |\n    2 |\n    3 |\n    4 |\n\nThe columns and rows will be represented as:\n\n```\n    content = [\n      [\n        'A1', 'B1', 'C1'\n      ],\n      [\n        'A2', 'B2', 'C2'\n      ],\n      [\n        'A3', 'B3', 'C3',\n      ],,\n      [\n        'A4', 'B4', 'C4',\n      ],\n    ];\n```\n\nLet’s create the routes we need: one each for creating, viewing and updating a sheet. Add the following to the end of your `routes/web.php`:\n\n``` php\n    Route::get('sheets/new', 'SheetsController@newSheet')-\u003ename('sheets.new');\n    Route::get('sheets/{sheet}', 'SheetsController@view')-\u003ename('sheets.view');\n    Route::put('sheets/{id}', 'SheetsController@update');\n```\n\nNow, we’ll implement the logic for these in the controller. Create the file `app/Http/Controllers/SheetsController.php` with the following content:\n\n``` php\n    \u003c?php\n    \n    namespace App\\Http\\Controllers;\n    \n    use App\\Models\\Sheet;\n    use Illuminate\\Http\\Request;\n    use Illuminate\\Support\\Facades\\Auth;\n    \n    class SheetsController extends Controller\n    {\n    \n        public function __construct()\n        {\n            $this-\u003emiddleware('auth');\n        }\n    \n        public function newSheet()\n        {\n            $sheet = Sheet::create([\n                'name' =\u003e 'Untitled spreadsheet',\n                '_owner' =\u003e Auth::user()-\u003e_id,\n                'content' =\u003e [[]]\n            ]);\n            return redirect(route('sheets.view', ['sheet' =\u003e $sheet]));\n        }\n    \n        public function view(Sheet $sheet)\n        {\n            Auth::user()-\u003epush('viewed_sheets', $sheet-\u003e_id);\n            return view('spreadsheet', ['sheet' =\u003e $sheet]);\n        }\n    \n        public function update($id)\n        {\n            $sheet = Sheet::where('_id', $id)-\u003eupdate(['content' =\u003e \\request('content') ?: [[]]]);\n            return response()-\u003ejson(['sheet' =\u003e $sheet]);\n        }\n    }\n```\n\n\nWhat’s left now is the view. We’ll be making use of [Handsontable](https://github.com/handsontable/handsontable), a library that provides us with a spreadsheet interface. Create the file `spreadsheet.blade.php` with the following content:\n\n``` php\n    \u003chead\u003e\n        \u003ctitle\u003e{{ $sheet-\u003ename }}\u003c/title\u003e\n        \u003cmeta name=\"csrf-token\" content=\"{{ csrf_token() }}\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/handsontable/2.0.0/handsontable.min.css\" t\n        \u003c!-- Fonts --\u003e\n        \u003clink rel=\"dns-prefetch\" href=\"https://fonts.gstatic.com\"\u003e\n        \u003clink href=\"https://fonts.googleapis.com/css?family=Raleway:300,400,600\" rel=\"stylesheet\" type=\"text/css\"\u003e\n    \n        \u003c!-- Styles --\u003e\n        \u003clink href=\"{{ asset('css/app.css') }}\" rel=\"stylesheet\"\u003e\n    \u003c/head\u003e\n    \n    \u003cbr\u003e\n    \u003ch2\u003e{{ $sheet-\u003ename }}\u003c/h2\u003e\n    \u003cdiv id=\"sheet\"\u003e\u003c/div\u003e\n    \n    \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/handsontable/2.0.0/handsontable.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n        let csrfToken = document.head.querySelector('meta[name=\"csrf-token\"]').content;\n        let data = @json($sheet-\u003econtent);\n    \n        let container = document.getElementById('sheet');\n        let table = new Handsontable(container, {\n            data: data,\n            rowHeaders: true,\n            colHeaders: true,\n            minCols: 20,\n            minRows: 20,\n            afterChange: function (change, source) {\n                if (source === 'loadData') return;\n    \n                console.log(change, source);\n    \n                fetch('/sheets/{{ $sheet-\u003e_id }}', {\n                    method: 'PUT',\n                    body: JSON.stringify({content: data}),\n                    headers: {\n                        'X-CSRF-TOKEN': csrfToken,\n                        'Content-Type': 'application/json'\n                    },\n                    credentials: 'same-origin'\n                })\n            }\n        });\n    \u003c/script\u003e\n```\n\n\nHere’s what’s happening here:\n\n- We initialize our Handsontable spreadsheet containing the data in the `content` of our sheet. The `data` variable is bound as a reference. This means that whenever a user makes a change to the spreadsheet, the value of `data` is automatically updated by Handsontable to include the new changes\n- We listen for the `afterChange` event. This event is fired whenever a user finishes editing a cell (for instance, he changes a value in a cell and presses **Enter**). When this event is fired, we grab the current value of `data` and make the HTTP request (using [Fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)) to our backend to update the sheet in the database.\n\nStart your MongoDB server by running `mongod`. Note: on Linux/macOS, you might need to run it as `sudo`.\n\nThen start your app by running:\n\n```\n    php artisan serve\n```\n\nCreate a new user at http://localhost:8000/register. You should be able to create a new spreadsheet and edit it. On refreshing the page, you’ll see the changes you make are saved.\n\n## Conclusion\n\nIn the [next part](https://pusher.com/tutorials/realtime-spreadsheets-part-2), we’ll add collaboration to our app. We’ll see how we can enable realtime editing of the same document by different users using Pusher. You can check out the source code of the app thus far [here](https://github.com/shalvah/shoots/tree/part-1-users-spreadsheets).","metaTitle":"Build a realtime spreadsheets app - Part 1: Users and sheets","metaDescription":"Over this four-part series, create a spreadsheet application with realtime updates and presence indicators. In part one, implement user accounts and basic spreadsheet functionality."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"WP22pVMOw80gWOOCQqm6q","type":"Entry","createdAt":"2018-04-30T12:38:01.393Z","updatedAt":"2020-06-19T12:47:40.914Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Publish notifications from a news CMS to an iOS app with Pusher Beams","url":"notifications-news-cms-ios-app","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/ios-news-app-push-notifications-demo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}}],"reviewDate":"2018-04-30","description":"This tutorial takes a thorough look at how to build an iOS app that consumes a news update API and provides realtime alerts to its users. You will build a news publishing CMS in Laravel, with a companion iOS application that sends the latest news as a push notification.","prerequisite":"You will need the following to work through this tutorial: \nA Mac with Xcode, Laravel CLI, SQLite and CocoaPods installed\nKnowledge of Xcode, Swift and Laravel\nA Pusher account","content":"A recent piece about the New York Times tech team “[How to Push a Story](https://www.nytimes.com/2018/04/01/insider/how-to-push-a-story.html)” chronicled the lengths they go to make sure that the push notifications they send are relevant, timely, and interesting.\n\nThe publishing platform at the NYT lets editors put notifications through an approval process,  measures the tolerance for the frequency of notifications, and tracks whether users unsubscribe from them. \n\nIn this article, we will build a simple news publishing CMS and iOS mobile application that has the ability to send the latest news as a push notification. We will also show how you can use interests to segment users who receive push notifications based on specific news categories like “Business” or “Sports”.\n\nWhen we are done, we will have our application function like this:\n\n![Push-Notification-News-App](//images.ctfassets.net/1es3ne0caaid/6Lc0OPQEhOO6aGeWqsSoAw/79528dda3e9aee6629127f33119eb115/Push-Notification-News-App.gif)\n\n## Prerequisites\n- A Mac with Xcode installed. [Download Xcode here](https://developer.apple.com/xcode/).\n- Knowledge of using Xcode.\n- Knowledge of [Swift](https://developer.apple.com/swift/).\n- A Pusher account. [Create one here](https://dash.pusher.com/authenticate/register?ref=pn-food-delivery-ios).\n- Knowledge of Laravel/PHP.\n- Laravel CLI [installed on your machine](https://laravel.com/docs/5.6/installation#installation).\n- SQLite installed on your machine. Here’s an [installation guide](http://www.sqlitetutorial.net).\n- CocoaPods [installed on your machine](https://guides.cocoapods.org/using/getting-started.html).\n\nOnce you have the requirements, let’s start.\n\n\n## Creating our Pusher application\n\u003e ⚠️  You need to be [enrolled to the Apple Developer program](https://developer.apple.com/programs/enroll/) to be able to use the push notifications feature. Also push notifications do not work on simulators so you will need an actual iOS device to test.\n\nPusher [Beams](https://pusher.com/beams) has first-class support for native iOS applications. Your iOS app instances subscribe to Interests; then your servers send push notifications to those interests. Every app instance subscribed to that interest will receive the notification, even if the app is not open on the device at the time. \n\nThis section describes how you can set up an iOS app to receive transactional push notifications about news updates through Pusher.\n\n### Configure APNs\nPusher relies on the Apple Push Notification service (APNs) to deliver push notifications to iOS application users on your behalf. When we deliver push notifications, we use your key that has APNs service enabled. This page guides you through the process of getting the key and how to provide it to Pusher.\n\nHead over to the Apple Developer dashboard by clicking [here](https://developer.apple.com/account) and then create a new key as seen below: \n\n![Push-Notifications-News-App-Create-Key](//images.ctfassets.net/1es3ne0caaid/3ya9qnf47Keqy4SQSomsIE/638df338db4277f1f46c960245e42bb9/Push-Notifications-News-App-Create-Key.gif)\n\n\nWhen you have created the key, download it. Keep it safe as we will need it in the next section.\n\n\n\u003e ⚠️  You have to keep the generated key safe as you cannot get it back if you lose it. \n\n### Creating your Pusher application\nThe next thing you need to do is create a new Pusher Beams application from the [Pusher dashboard](https://dash.pusher.com). \n\n![Push-Notifications-News-App Beams](//images.ctfassets.net/1es3ne0caaid/4ghjBGm7gQWiqiW6AokmEy/6c1a99f7f05bb730b7520988c18f2479/Push-Notifications-News-App_Beams.png)\n\n\nWhen you have created the application, you should be presented with a quickstart that will help you set up the application.\n\nIn order to configure your Beams  instance you will need to get the key with APNs service enabled from Apple. This is the same key as the one we downloaded in the previous section. Once you’ve got the key, upload it.\n\n![Push-Notifications-News-App-Get-APN-key](//images.ctfassets.net/1es3ne0caaid/5FvFqMZZRemmiywauuekqi/08ba0c5a81da0db4ad723bfd093f0331/Push-Notifications-News-App-Get-APN-key.png)\n\nEnter your Apple Team ID. You can get the Team ID from [here](https://developer.apple.com/account/#/membership). You can then continue with the setup wizard and copy the instance ID and secret key for your Pusher application.\n\n\n## Building our backend using Laravel\n\nThe first thing we need to do, is build the backend application. Start a new Laravel project by running the command below in your terminal:\n\n```\n    $ laravel new project-name\n```\n\nWhen the process is complete, open your project in a code editor of your choice. Next, let’s start building out our project.\n\nOpen the `.env` file and in the file add the following to the bottom:\n\n```\n    PUSHER_PN_INSTANCE_ID=ENTER_INSTANCE_ID\n    PUSHER_PN_SECRET_KEY=ENTER_SECRET_KEY\n```\n\nin the same file, replace the following lines:\n\n```\n    DB_CONNECTION=mysql\n    DB_DATABASE=homestead\n    DB_USERNAME=username\n    DB_PASSWORD=password\n```\n\nWith\n\n```\n    DB_CONNECTION=sqlite\n    DB_DATABASE=/full/path/to/database.sqlite\n```\n\nThen create a new empty file `database.sqlite`  in the `database` directory.\n\nNext, let’s install the [Pusher Beams SDK for PHP](https://docs.pusher.com/push-notifications/reference/server-sdk-php) to our application. Run the command below to install using composer:\n\n```\n    $ composer install pusher/pusher-push-notifications\n```\n\nWhen installation is completed, let’s create our model and migration files. Run the command below to generate our model and migrations for our `stories` and `story_categories` table:\n\n```\n    $ php artisan make:model StoryCategory -m\n    $ php artisan make:model Story -m\n```\n\n\u003e 💡 Adding the `-m` flag will make artisan generate a corresponding migration file for the Model. Also, the order the command is run is important because the `stories`  table will have a foreign key relationship with the `story_categories` table so the latter needs to exist first.\n\nOpen the `app/StoryCategory.php` model and add the property below to the class:\n\n```\n    protected $fillable = ['title', 'interest']\n```\n\nNext, open the corresponding migration file in `database/migrations` directory and replace the `up`  method with the following:\n\n``` php\n    public function up()\n    {\n        Schema::create('story_categories', function (Blueprint $table) {\n            $table-\u003eincrements('id');\n            $table-\u003estring('title');\n            $table-\u003estring('interest');\n            $table-\u003etimestamps();\n        });\n    }\n```\n\nOpen the `app/Story.php` model and replace the contents with the following:\n\n``` php\n    \u003c?php\n    namespace App;\n    \n    use Illuminate\\Database\\Eloquent\\Model;\n    use Pusher\\PushNotifications\\PushNotifications;\n    \n    class Story extends Model\n    {\n        protected $with = ['category'];\n        \n        protected $fillable = [\n            'category_id', 'title', 'notification', 'content', 'featured_image'\n        ];\n        \n        public function push(): array\n        {\n            if (!$this-\u003eexists or $this-\u003enotification == null) {\n                return [];\n            }\n            \n            $pushNotifications = new PushNotifications([\n                'instanceId' =\u003e env('PUSHER_PN_INSTANCE_ID'),\n                'secretKey' =\u003e env('PUSHER_PN_SECRET_KEY'),\n            ]);\n            \n            $publishResponse = (array) $pushNotifications-\u003epublish(\n                [$this-\u003ecategory-\u003einterest],\n                [\n                    'apns' =\u003e [\n                        'aps' =\u003e [\n                            'alert' =\u003e [\n                                'title' =\u003e \"📖 {$this-\u003etitle}\",\n                                'body' =\u003e (string) $this-\u003enotification,\n                            ],\n                            'mutable-content' =\u003e 0,\n                            'category' =\u003e 'pusher',\n                            'sound' =\u003e 'default'\n                        ],\n                        'data' =\u003e array_only($this-\u003etoArray(), [\n                            'title', 'content'\n                        ]),\n                    ],\n                ]\n            );\n            return $publishResponse;\n        }\n    \n        public function category()\n        {\n            return $this-\u003ebelongsTo(StoryCategory::class);\n        }\n    }\n```\n\nIn the model above, we have a `push` method. This method is a shortcut that helps us send push notifications on the loaded story model. This way we can do something similar to:\n\n```\n    App\\Story::find(1)-\u003epush()\n```\n\nOpen the corresponding migration file for the Story model in `database/migrations` and add replace the `up` method with the following code:\n\n``` php\n    public function up()\n    {\n        Schema::create('stories', function (Blueprint $table) {\n            $table-\u003eincrements('id');\n            $table-\u003eunsignedInteger('category_id');\n            $table-\u003eforeign('category_id')-\u003ereferences('id')-\u003eon('story_categories');\n            $table-\u003estring('title');\n            $table-\u003estring('notification')-\u003enullable();\n            $table-\u003etext('content');\n            $table-\u003etimestamps();\n        });\n    }\n```\n\nNow run the command below to process the migrations:\n\n```\n    $ php artisan migrate\n```\n\nIf you have setup the database properly, you should see a ‘migration successful’ response from the terminal.\n\nNext, let’s create the routes our application will need. Open the `routes/web.php` file and replace the contents with the following code:\n\n``` php\n    \u003c?php\n    use App\\Story;\n    use Illuminate\\Http\\Request;\n    \n    Route::view('/stories/create', 'story');\n    \n    Route::post('/stories/create', function (Request $request) {\n        $data = $request-\u003evalidate([\n            'title' =\u003e 'required|string',\n            'content' =\u003e 'required|string',\n            'notification' =\u003e 'nullable|string',\n            'category_id' =\u003e 'required|exists:story_categories,id',\n        ]);\n        \n        $story = Story::create($data);\n        $story-\u003epush();\n    \n        return back()-\u003ewithMessage('Post Added Successfully.');\n    });\n    \n    Route::get('/stories/{id}', function (int $id) {\n        return Story::findOrFail($id);\n    });\n    \n    Route::get('/stories', function () {\n        return Story::orderBy('id', 'desc')-\u003etake(20)-\u003eget();\n    });\n```\n\nAbove, we have four routes:\n\n- `GET /stories/create` which just loads a view `story.blade.php`. This view will be used to display a form where we can enter new content.\n- `POST /stories/create` which processes the form data from above, adds the content and sends a push notification if appropriate.\n- `GET /stories/{id}` which loads a single story.\n- `GET /stories` which loads the 20 of the most recent stories.\n\nNext, let’s create the view file for the first route as that is the only missing piece. Create a `story.blade.php` file in the `resources/views` directory and paste the following HTML code:\n\n``` html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003ctitle\u003eCreate new post\u003c/title\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003cstyle type=\"text/css\"\u003e\n        .invalid-feedback { width: 100%; margin-top: .25rem; font-size: 80%; color: #dc3545; }\n        \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody style=\"margin-top: 120px;\"\u003e\n        \u003cnav class=\"navbar navbar-inverse bg-inverse fixed-top\"\u003e\n            \u003ca class=\"navbar-brand\" href=\"#\" style=\"font-weight: bold\"\u003eTECHTIMES\u003c/a\u003e\n        \u003c/nav\u003e\n        \u003cdiv class=\"container\"\u003e\n            @if (Session::has('message'))\n            \u003cdiv class=\"alert alert-success\" role=\"alert\"\u003e{{ session('message') }}\u003c/div\u003e\n            @endif\n            \u003cdiv class=\"starter-template\"\u003e\n                \u003cform action=\"/stories/create\" method=\"POST\"\u003e\n                    {{ csrf_field() }}\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"post-title\"\u003ePost Title\u003c/label\u003e\n                        \u003cinput name=\"title\" type=\"text\" class=\"form-control\" id=\"post-title\" placeholder=\"Enter Post Title\"\u003e\n                        @if ($errors-\u003ehas('title'))\n                        \u003cdiv class=\"invalid-feedback\"\u003e{{ $errors-\u003efirst('title') }}\u003c/div\u003e\n                        @endif\n                    \u003c/div\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"post-category\"\u003eCategory\u003c/label\u003e\n                        \u003cselect name=\"category_id\" id=\"post-category\" class=\"form-control\"\u003e\n                            \u003coption value=\"\"\u003eSelect A Category\u003c/option\u003e\n                            @foreach (App\\StoryCategory::all() as $category)\n                            \u003coption value=\"{{ $category-\u003eid}}\"\u003e{{ $category-\u003etitle }}\u003c/option\u003e\n                            @endforeach\n                        \u003c/select\u003e\n                        @if ($errors-\u003ehas('category_id'))\n                        \u003cdiv class=\"invalid-feedback\"\u003e{{ $errors-\u003efirst('category_id') }}\u003c/div\u003e\n                        @endif\n                    \u003c/div\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"post-content\"\u003ePost Content\u003c/label\u003e\n                        \u003ctextarea name=\"content\" id=\"post-content\" cols=\"30\" rows=\"10\" placeholder=\"Enter your post content\" class=\"form-control\"\u003e\u003c/textarea\u003e\n                        @if ($errors-\u003ehas('content'))\n                        \u003cdiv class=\"invalid-feedback\"\u003e{{ $errors-\u003efirst('content') }}\u003c/div\u003e\n                        @endif\n                    \u003c/div\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"post-notification\"\u003ePush Notification\u003c/label\u003e\n                        \u003cinput name=\"notification\" type=\"text\" class=\"form-control\" id=\"post-notification\" placeholder=\"Enter Push Notification Message\"\u003e\n                        @if ($errors-\u003ehas('notiifcation'))\n                        \u003cdiv class=\"invalid-feedback\"\u003e{{ $errors-\u003efirst('notiifcation') }}\u003c/div\u003e\n                        @else\n                        \u003csmall class=\"form-text text-muted\"\u003eLeave this blank if you do not want to publish a push notification for this post.\u003c/small\u003e\n                        @endif\n                    \u003c/div\u003e\n                    \u003cbutton type=\"submit\" class=\"btn btn-primary\"\u003eSave Post\u003c/button\u003e\n                \u003c/form\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThe above is just a basic bootstrap powered view that allows the user to create content as seen in the screen recording at the beginning of the article.\n\nThat’s it. The backend application is complete. To start serving the application, run the following command:\n\n```\n    $ php artisan serve\n```\n\nThis will start a PHP server running on port 8000. You can access it by going to http://127.0.0.1:8000/stories.\n\n\n## Building our iOS application using Swift\n\nNow that we have a backend server that can serve us all the information we want and also send push notifications, let us create our iOS application, which will be the client application.\n\nLaunch Xcode and create a new ‘Single Page Application’ project. We will be calling ours **TechTimes**. When the project is created, exit Xcode and `cd` to the root of the project using a terminal. In the root of the project create a `Podfile` and paste the following into the file:\n\n```\n    platform :ios, '11.0'\n    target 'techtimes' do\n      use_frameworks!\n      pod 'Alamofire', '~\u003e 4.6.0'\n      pod 'PushNotifications', '~\u003e 0.10.7'\n    end\n```\n\nThen run the command below to start installing the dependencies we defined above:\n\n```\n    $ pod install\n```\n\nWhen the installation is complete, we will have a new `.xcworkspace` file in the root of the project. Double-click the workspace file to relaunch Xcode.\n\nNext let’s create our storyboard. Open your `Main.storyboard` file. We want to design it to look similar to this:\n\n![Push-Notifications-News-App-storyboard](//images.ctfassets.net/1es3ne0caaid/7lUNA8VRBuQEMA2WIcAkEQ/7d1857613992492c05b0504df5b388e0/Push-Notifications-News-App-storyboard.png)\n\n\nThe initial view controller is a `UINavigationController`, which is connected to a `UITableViewController`. The Table View Controller has custom cells that have the class `StoryTableViewCell`, which we will use to display the data in our cell. The cells have a reuse identifier: `Story`.\n\nThe second scene has a custom class of `StoriesTableViewController`. We have designed the scene to have a button on the top right which is connected to the Controller via an `@IBAction`. When the button is clicked we want to display the bottom View Controller.\n\nThe third scene has a custom class of `StoryViewController` and it has a `UIScrollView` where we have an image, post title and post content. We have created an `@IBOutlet` for both the title and the content text to the custom class Controller so we can override the contents.\n\nWe give each controller a unique storyboard identifier which is the custom class name so we can navigate to them using their storyboard ID. \n\nWhen you are done creating the storyboard, let’s create the custom classes for each story board scene.\n\nCreate a new class `StoriesTableViewController.swift` and paste the following code into it:\n\n``` swift\n    import UIKit\n    import Alamofire\n    \n    class StoriesTableViewController: UITableViewController {\n        var stories: [Stories.Story] = []\n        \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            \n            self.tableView.rowHeight = UITableViewAutomaticDimension\n            self.tableView.estimatedRowHeight = 140\n    \n            self.fetchStories { response in\n                guard let response = response else { return }\n                self.stories = response.stories\n                self.tableView.reloadData()\n            }\n        }\n        \n        private func fetchStories(completion: @escaping(Stories.Response?) -\u003e Void) {\n            let request = Stories.Request()\n            Alamofire.request(request.URL).validate().responseJSON { response in\n                guard response.result.isSuccess,\n                let stories = response.result.value as? [[String:AnyObject]] else {\n                    self.noStoriesAlert()\n                    return completion(nil)\n                }\n                \n                completion(Stories.Response(stories: stories))\n            }\n        }\n        \n        private func noStoriesAlert() {\n            let alert = UIAlertController(\n                title: \"Error Fetching News\",\n                message: \"An error occurred while fetching the latest news.\",\n                preferredStyle: .alert\n            )\n    \n            alert.addAction(UIAlertAction(title: \"Okay\", style: .default, handler: nil))\n            self.present(alert, animated: true, completion: nil)   \n        }\n    } \n```\n\nIn `viewDidLoad` above, we call the `fetchStories` method, which fetches the stories from the remote application. When the fetch is complete, we then set the `stories`  property and reload the table view.\n\nIn the same file let’s create an extension to the controller. In this extension, we will override our Table View Controller delegate methods:\n\n``` swift\n    extension StoriesTableViewController {\n        override func numberOfSections(in tableView: UITableView) -\u003e Int {\n            return 1\n        }\n    \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return stories.count\n        }\n    \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            let cell = tableView.dequeueReusableCell(withIdentifier: \"Story\", for: indexPath) as! StoryTableViewCell\n            let story = stories[indexPath.row]\n            let randomNum = arc4random_uniform(6) + 1\n    \n            cell.imageView?.image = UIImage(named: \"image-\\(randomNum)\")\n            cell.storyTitle?.text = story.title\n            cell.storyContent?.text = story.content\n    \n            return cell\n        }\n        \n        override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n            let storyboard = UIStoryboard(name: \"Main\", bundle: nil)\n            let vc = storyboard.instantiateViewController(withIdentifier: \"StoryViewController\") as! StoryViewController\n            vc.story = stories[indexPath.row]\n            self.navigationController?.pushViewController(vc, animated: true)\n        }\n    }\n```\n\nIn the `tableView(_:cellForRowAt:)` method, we define the title and content for our cell. For our image, we are using random images we stored manually in our `Asset.xcassets` collection. In a real application you would probably want to load the `UIImage` from the URL returned by the API.\n\nIn the `tableView(_:didSelectRowAt:)` method, we instantiate the `*StoryViewController*`, set the `story` property of the controller and then navigate to the controller.\n\nLet’s define the code to the `StoryTableViewCell`. Create a new file called `StoryTableViewCell.swift` and paste in the following:\n\n``` swift\n    import UIKit\n    \n    class StoryTableViewCell: UITableViewCell {\n        @IBOutlet weak var storyTitle: UILabel!\n        @IBOutlet weak var storyContent: UILabel!\n        @IBOutlet weak var featuredImageView: UIImageView!\n        \n        override func awakeFromNib() {\n            super.awakeFromNib()\n        }\n    }\n```\n\n\u003e 💡 Make sure this is set as the custom class for our `StoryTableViewController`'s cells.\n\nNext, let’s create the `Stories` struct we references in the `stories` property of out `StoryTableViewController` class. Create a `Stories.swift` file and paste in the following:\n\n``` swift\n    import UIKit\n    \n    struct Stories {\n        struct Request {\n            let URL = \"http://127.0.0.1:8000/stories\"\n        }\n        \n        struct Response {\n            var stories: [Story]\n            \n            init(stories: [[String:AnyObject]]) {\n                self.stories = []\n                \n                for story in stories {\n                    self.stories.append(Story(story: story))\n                }\n            }\n        }\n        \n        struct Story {\n            let title: String\n            let content: String\n            let featuredImage: UIImage?\n            \n            init(story: [String:AnyObject]) {\n                self.title = story[\"title\"] as! String\n                self.content = story[\"content\"] as! String\n                self.featuredImage = nil\n            }\n        }\n    }\n```\n\nIn the `Stories` struct we have the `Request` struct which contains the URL of the API. We also have the `Response` struct and in there, in the `init` method we pass the data from the API which will then create a `Stories.Story` instance.\n\nThe `Stories.Story` struct has an `init` function that takes a dictionary and assigns it to the properties on the struct. With this we can easily map all the results from the API to the `Stories.Story` struct. This helps keep things structured and clean.\n\nNext, let’s create the `StoryViewController` class that will be the custom class for our third scene in the storyboard. Create a new `StoryViewController.swift` file and paste in the following:\n\n``` swift\n    import UIKit\n    \n    class StoryViewController: UIViewController {\n        \n        var story: Stories.Story?\n    \n        @IBOutlet weak var storyTitle: UILabel!\n        @IBOutlet weak var storyContent: UITextView!\n        \n        override func viewDidLoad() {\n            super.viewDidLoad()        \n            storyTitle.text = story?.title\n            storyContent.text = story?.content\n        }\n    }\n```\n\nIn the `viewDidLoad` method, we are simply setting the values for our `@IBOutlet`s using the `story` property. This property is set in the `tableView(_:didSelectRowAt:)` method in the `StoriesTableViewController` class.\n\nThe next class we have to create is the `AlertViewController`. This will be the custom class to our last scene. This is where the user can subscribe (or unsubscribe) to an interest. When users subscribe to an interest, they start receiving push notifications when new stories are added to that category.\n\nCreate a new class `AlertViewController` and paste in the following code:\n\n``` swift\n    import UIKit\n    \n    class AlertsTableViewController: UITableViewController {\n        \n        var categories: [[String: Any]] = []\n    \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            self.getCategories()\n            self.tableView.reloadData()\n            \n            navigationItem.title = \"Configure Alerts\"\n        }\n        \n        private func getCategories() {\n            guard let categories = UserDefaults.standard.array(forKey: \"categories\") as? [[String: Any]] else {\n                self.categories = [\n                    [\"name\": \"Breaking News\", \"interest\": \"breaking_news\", \"subscribed\": false],\n                    [\"name\": \"Sports\", \"interest\": \"sports\", \"subscribed\": false],\n                    [\"name\": \"Politics\", \"interest\": \"politics\", \"subscribed\": false],\n                    [\"name\": \"Business\", \"interest\": \"business\", \"subscribed\": false],\n                    [\"name\": \"Culture\", \"interest\": \"culture\", \"subscribed\": false],\n                ]\n                \n                return self.saveCategories()\n            }\n            \n            self.categories = categories\n        }\n        \n        private func saveCategories() {\n            UserDefaults.standard.set(self.categories, forKey: \"categories\")\n        }\n            \n        @objc func switchChanged(_ sender: UISwitch) {\n            categories[sender.tag][\"subscribed\"] = sender.isOn        \n            self.saveCategories()\n        }\n    }\n```\n\nIn the `viewDidLoad` we call the `*getCategories*` method. In the `*getCategories*` method, we load the categories from `UserDefaults`. If it does not exist, we create the default categories and save them to `UserDefaults`. We need to maintain state on the user defaults so we know when the user subscribes and unsubscribes. When the application is restarted, the settings will still be saved.\n\nIn the `saveCategories` method, we just use `UserDefaults` to save the changes to the `categories` property. The `switchChanged` is a listener for when the switch on one of the categories is changed.\n\n![Push-Notifications-News-App-configure-alerts](//images.ctfassets.net/1es3ne0caaid/2vrroEz5AQiQA88gqguMGo/042918ea927fd3561a4be69814c36748/Push-Notifications-News-App-configure-alerts.png)\n\n\nNext, in the same file, add the following extension which will conform to the `UITableViewController`:\n\n``` swift\n    extension AlertTableViewController {\n        override func numberOfSections(in tableView: UITableView) -\u003e Int {\n            return 1\n        }\n    \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return categories.count\n        }\n    \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            let cell = tableView.dequeueReusableCell(withIdentifier: \"Alert\", for: indexPath)\n    \n            let category = categories[indexPath.row]\n            \n            let switchView = UISwitch(frame: .zero)\n            switchView.tag = indexPath.row\n            switchView.setOn(category[\"subscribed\"] as! Bool, animated: true)\n            switchView.addTarget(self, action: #selector(switchChanged(_:)), for: .valueChanged)\n            \n            cell.accessoryView = switchView\n            cell.textLabel?.text = category[\"name\"] as? String\n    \n            return cell\n        }\n    }\n```\n\nIn the `tableView(_:cellForRowAt:)` method, we configure our cell and then create a `UISwitch` view and set that as the accessory view. We also use the `tag` property of the `switchView` to save the `indexPath.row`. This is so we can then tell which category’s notification switch was toggled. We then set the `switchChanged` method as the listener for when the switch is toggled.\n\nThe next thing we need to do is set up our application to receive and act on push notifications.\n\n## Adding push notifications to our iOS new application\n\nNow that we have the application working, let’s integrate push notifications to the application. The first thing we need to do is turn on push notifications from the capabilities list on Xcode. \n\nIn the project navigator, select your project, and click on the **Capabilities** tab. [Enable Push Notifications](http://help.apple.com/xcode/mac/current/#/devdfd3d04a1) by turning the switch ON.\n\n![Push-Notifications-News-App-enable-push](//images.ctfassets.net/1es3ne0caaid/5ceM7T0gaQCYm86qWkaeG0/f856b7caa91fcbe10c1b69cfc56278a1/Push-Notifications-News-App-enable-push.png)\n\n\nNext open your `AlertsTableViewController` class and in there import the `PushNotifications` library:\n\n``` swift\n    import PushNotifications\n```\n\nIn the same file, replace the `switchChanged(_:)` method with the following code:\n\n``` swift\n    @objc func switchChanged(_ sender: UISwitch) {\n        categories[sender.tag][\"subscribed\"] = sender.isOn\n        \n        let pushNotifications = PushNotifications.shared\n        let interest = categories[sender.tag][\"interest\"] as! String\n        \n        if sender.isOn {\n            try? pushNotifications.subscribe(interest: interest) {\n                self.saveCategories()\n            }\n        } else {\n            try? pushNotifications.unsubscribe(interest: interest) {\n                self.saveCategories()\n            }\n        }\n    } \n```\n\nIn the code above, when the switch is turned on or off, the user subscription to the interest gets turned on or off also.\n\nNext open the `AppDelegate` class and import the packages below:\n\n```swift\n    import PushNotifications\n    import UserNotifications\n```\n\nThen in the same file add the following lines of code:\n\n``` swift\n    let pushNotifications = PushNotifications.shared\n    \n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -\u003e Bool {\n        self.pushNotifications.start(instanceId: \"PUSHER_NOTIFICATION_INSTANCE_ID\")\n        self.pushNotifications.registerForRemoteNotifications()\n        \n        let center = UNUserNotificationCenter.current()\n        center.delegate = self\n        \n        return true\n    }\n    \n    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n        self.pushNotifications.registerDeviceToken(deviceToken)\n    }\n```\n\n\u003e ⚠️  Replace `PUSHER_NOTIFICATION_INSTANCE_ID` with the keys from your Pusher dashboard.\n\nIf you have done everything correctly, your applications should now be able to receive push notifications any time the client is subscribed to the news category and there is a new post. \n\nHowever, right now, when the push notification is clicked, the application will be launched and it’ll just list the articles and not link to the specific articles. Let’s fix that by deeplinking to the specific article when the push notification is opened.\n\n\n## Deeplinking our iOS push notifications\n\nWhen users click on our push notification, we want to direct the user to the story in the application and not just launch the app. Let’s add this feature. For this we will be implementing tips from the excellent [article here](https://medium.com/@stasost/ios-how-to-open-deep-links-notifications-and-shortcuts-253fb38e1696).\n\nCreate a new file in Xcode called `Deeplink.swift` and paste the following code into the file:\n\n``` swift\n    import UIKit\n    \n    enum DeeplinkType {\n        case story(story: Stories.Story)\n    }\n    \n    let Deeplinker = DeepLinkManager()\n    class DeepLinkManager {\n        fileprivate init() {}\n        \n        private var deeplinkType: DeeplinkType?\n        \n        func checkDeepLink() {\n            guard let deeplinkType = self.deeplinkType else {\n                return\n            }\n            \n            DeeplinkNavigator.shared.proceedToDeeplink(deeplinkType)\n    \n            self.deeplinkType = nil\n        }\n        \n        func handleRemoteNotification(_ notification: [AnyHashable: Any]) {\n            if let data = notification[\"data\"] as? [String: AnyObject] {\n                let story = Stories.Story(story: data)\n                self.deeplinkType = DeeplinkType.story(story: story)\n            } else {\n                self.deeplinkType = nil\n            }\n        }\n    }\n```\n\nIn our `DeeplinkManager` we have two methods. The first, `checkDeeplink` checks the deep link and gets the `deeplinkType` and then it calls `DeeplinkNavigator.shared.proceedToDeeplink` which then navigates the user to the deep link. We will create this method later.\n\nThe next method is the `handleRemoteNotification` method. This simply sets the `deeplinkType` on the `DeeplinkManager` class based on the `notification` received.\n\nIn the same file, add the following code to the bottom:\n\n``` swift\n    class DeeplinkNavigator {\n        static let shared = DeeplinkNavigator()\n    \n        private init() {}\n        \n        func proceedToDeeplink(_ type: DeeplinkType) {\n            switch type {\n            case .story(story: let story):\n                if let rootVc = UIApplication.shared.keyWindow?.rootViewController as? UINavigationController {\n                    let storyboard = UIStoryboard(name: \"Main\", bundle: nil)\n                    if let vc = storyboard.instantiateViewController(withIdentifier: \"StoryViewController\") as? StoryViewController {\n                        vc.story = story\n                        rootVc.show(vc, sender: rootVc)\n                    }\n                }\n            }\n        }\n    }\n```\n\nThis is the code to the `DeeplinkNavigator` we referenced in the `checkDeeplink` method earlier. In this class we have one method `proceedToDeeplink` and this method navigates the user to a controller depending on the `deeplinkType`. In our case, it will navigate to the story.\n\nNext, open the `AppDelegate` and add the following methods to the class:\n\n``` swift\n    func applicationDidBecomeActive(_ application: UIApplication) {\n        Deeplinker.checkDeepLink()\n    }\n    \n    func userNotificationCenter(_ center: UNUserNotificationCenter,  willPresent notification: UNNotification, withCompletionHandler   completionHandler: @escaping (_ options:   UNNotificationPresentationOptions) -\u003e Void) {\n        Deeplinker.handleRemoteNotification(notification.request.content.userInfo)\n        completionHandler([.alert, .sound])\n    }\n    \n    func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -\u003e Void) {\n        let notification = response.notification.request.content.userInfo\n        Deeplinker.handleRemoteNotification(notification)\n        completionHandler()\n    }\n```\n\nIn the `applicationDidBecomeActive(:)` method we call our `Deeplinker.checkDeepLink()`  method. This checks for a deeplink when the application becomes active. \n\nThe other two methods are basically listeners that get fired when there is a new push notification. In these methods, we call the `handleRemoteNotification` method so the push notification can be handled.\n\n\n## Allowing our application to connect locally\n\nIf you are going to be testing the app’s backend using a local server, then there is one last thing we need to do. Open the `info.plist` file and add an entry to the `plist` file to allow connection to our local server:\n\n![Push-Notifications-News-App-edit-plist](//images.ctfassets.net/1es3ne0caaid/2das11CqpSmoSGuCWIu48y/9af5b7e9a6ad0964e7354ed12e3aa61a/Push-Notifications-News-App-edit-plist.png)\n\n\nThat’s it now. We can run our application. However, remember that to demo the push notifications, you will need an actual iOS device.\n\nHere is the application one more time:\n\n![Push-Notification-News-App](//images.ctfassets.net/1es3ne0caaid/6Lc0OPQEhOO6aGeWqsSoAw/79528dda3e9aee6629127f33119eb115/Push-Notification-News-App.gif)\n\n\n## Conclusion\n\nIn this article, we have shown how you can use the power of interests to segment the push notifications that gets sent to your users. Hopefully, you have learnt a thing or two and you can come up with interesting ways to segment your users based on their interests.\n\nThe source code to the application is on [GitHub](https://github.com/neoighodaro/ios-news-app-push-notifications-demo). If you have any questions, do not hesitate to ask using the comment box below.\n\n","metaTitle":"Publish iOS notifications from a news CMS with Pusher Beams","metaDescription":"Learn how to build a news publishing CMS in Laravel, with a companion iOS application that sends the latest news as a push notification."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6gcua0LfSoy0gQgIGW4MKW","type":"Entry","createdAt":"2018-05-01T11:47:49.749Z","updatedAt":"2018-05-01T11:53:07.237Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime spreadsheets application - Part 3: Showing current viewers","url":"realtime-spreadsheets-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3j821hA7aMgOiUEaO4Q8y6","type":"Entry","createdAt":"2018-02-26T19:00:03.819Z","updatedAt":"2018-03-20T12:22:11.602Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Shalvah Adebayo","url":"shalvah-adebayo","email":"shalvah.adebayo@gmail.com","twitter":"https://twitter.com/theshalvah","github":"https://shalvah.me/","guestWriter":true}}],"projectRepo":"https://github.com/shalvah/shoots/tree/part-3-whos-viewing","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}}],"reviewDate":"2018-04-30","description":"This series shows you how to build a spreadsheets application using PHP (Laravel) for the backend, and Pusher for realtime updates. In part three, implement a presence feature, to see who else is editing the same spreadsheet.","prerequisite":"To follow this tutorial you will need PHP 7.2 or higher, with the MongoDB driver enabled. You will also need Composer, MongoDB and a Pusher account.","content":"*This is part 3 of a 4-part tutorial. You can find part 1 [here](https://pusher.com/tutorials/realtime-spreadsheets-part-1), part 2 [here](hhttps://pusher.com/tutorials/realtime-spreadsheets-part-2) and part 4 [here](https://pusher.com/tutorials/realtime-spreadsheets-part-4).*\n\nIn [part one](https://pusher.com/tutorials/realtime-spreadsheets-part-1) and [part two](https://pusher.com/tutorials/realtime-spreadsheets-part-2) of this series, we built a spreadsheets app that supports simultaneous editing by multiple users, syncing changes across all clients in realtime.\n\nIn this article, we’ll add another useful piece of functionality  present in Google Sheets, the ability to see who’s viewing the sheet in realtime. We’ll display avatars corresponding to each user currently viewing the sheet. Here’s how that will look in our app:\n\n![realtime-spreadsheets-part-3-demo](//images.ctfassets.net/1es3ne0caaid/5qg1a3TgjK8gmqS0muYuQO/5d193cffd0cb7f3cf1b791a21e483b02/realtime-spreadsheets-part-3-demo.gif)\n\n## Prerequisites\n1. PHP 7.2 or higher, with the MongoDB driver installed. You can find installation instructions [here](http://php.net/manual/en/mongodb.installation.php).\n2. Composer\n3. MongoDB (version 3.4 or higher). Get it [here](https://docs.mongodb.com/manual/installation/).\n4. A Pusher account. Create one [here](http://pusher.com/signup).\n\n\n## Setting up\n\u003e Note: if you followed through with the second part and still have your project code, you can skip this section.\n\nClone the project from GitHub:\n\n```\n    git clone -b part-2-realtime-collaboration https://github.com/shalvah/shoots\n```\n\nOr download the source directly from [this link.](https://github.com/shalvah/shoots/archive/part-2-realtime-collaboration.zip)\n\nThen `cd` into the project folder and install dependencies:\n\n```\n    composer install\n```\n\nLastly, copy the `.env.example` to a new file called `.env`. Add your Pusher app credentials to the `.env` file:\n\n```\n    PUSHER_APP_ID=your-app-id\n    PUSHER_APP_KEY=your-app-key\n    PUSHER_APP_SECRET=your-app-secret\n    PUSHER_APP_CLUSTER=your-app-cluster\n```\n\nLook for these lines of JavaScript in `resources/views/spreadsheet.blade.php`:\n\n``` php    \n    let pusher = new Pusher('your-app-key', {\n        cluster: 'your-app-cluster'\n    });\n```\n\nInsert your Pusher app key and cluster in the appropriate places.\n\nRun the following command to generate an application encryption key:\n\n```\n    php artisan key:generate\n```\n\n\u003e Note: if your MongoDB server requires a username and password, add those in your `.env` file as the `DB_USERNAME` and `DB_PASSWORD` respectively.\n\n\n## Implementing presence with Pusher\n\nIn the previous part of this series, we subscribe each user to a presence channel when they open a sheet. The name of this channel is tied to the sheet’s ID. This presence channel will provide the core of our “Now Viewing” functionality, because of the information presence channels provide us with about **who** is subscribed to a channel. We’ll hook into certain [presence events](https://pusher.com/docs/client_api_guide/client_presence_channels#events) fired by Pusher on the channel.\n\nHere’s how we’ll do this:\n\n- When the user successfully subscribes to the channel, the event [**pusher:subscription_succeeded**](https://pusher.com/docs/client_api_guide/client_presence_channels#pusher-subscription-succeeded) is triggered. The included payload contains a list of all the subscribed members. We’ll listen for this event and use the payload to display the avatars of everyone who was viewing the sheet when we opened it.\n- When a new user joins the channel (someone else opens the sheet), the event [**pusher:member_added**](https://pusher.com/docs/client_api_guide/client_presence_channels#pusher-member-added) is triggered. We’ll listen for this and add the avatar of the new member to our UI.\n- When a user leaves the channel (closes the browser window), the event [**pusher:member_removed**](https://pusher.com/docs/client_api_guide/client_presence_channels#pusher-member-removed) is triggered. When this happens, we’ll remove the avatar of the member who left from our UI.\n\nLet’s go!\n\n\n## Creating the markup\n\nFirst, let’s create the markup for our avatars. The avatar is essentially the user’s initials on a colored circular background (similar to Google’s default user avatars). When we hover over it, it should display a tooltip containing the name of the user.\n\nWe’ll use Bootstrap and jQuery to style our avatars and tooltips. Open up your `resources/views/spreadsheet.blade.php` and include the Bootstrap and jQuery assets before the closing `\u003c/head\u003e` tag:\n\n``` php\n    \u003chead\u003e\n      ...\n      \n      \u003clink\n        rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" \n        integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"\u003e\n      \u003cscript src=\"https://code.jquery.com/jquery-3.3.1.min.js\"\n        integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\"\n        crossorigin=\"anonymous\"\u003e\n      \u003c/script\u003e\n      \u003cscript src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"\n        integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\"\n        crossorigin=\"anonymous\"\u003e\n      \u003c/script\u003e\n    \u003c/head\u003e\n```\n\nYou should have code like this shortly after the closing `\u003c/head\u003e` tag:\n\n``` html   \n    \u003ch2\u003e{{ $sheet-\u003ename }}\u003c/h2\u003e\n    \u003cdiv id=\"sheet\"\u003e\u003c/div\u003e\n```\n\nModify it so it looks like this:\n\n``` html   \n    \u003ch2\u003e{{ $sheet-\u003ename }}\u003c/h2\u003e\n    \u003cp\u003e\n      \u003cspan style=\"float: right; margin-right: 50px; margin-bottom: 40px; font-size: 16px;\"\u003eNow viewing: \u003cspan id=\"viewers\"\u003e\u003c/span\u003e\n      \u003c/span\u003e\n    \u003c/p\u003e\n    \u003cbr\u003e \u003cbr\u003e\n    \n    \u003cdiv id=\"sheet\"\u003e\u003c/div\u003e\n```\n\nNow, add the styles for the `avatar` class just before the closing `\u003c/head\u003e` tag:\n\n``` css    \n    \u003cstyle\u003e\n        .avatar {\n            color: rgb(255, 255, 255);\n            background-color: #fc0093;\n            display: inline-block;\n            font-family: Arial, sans-serif;\n            font-size: 20px;\n            border-radius: 50%;\n            width: 36px;\n            height: 36px;\n            text-align: center;\n        }\n    \u003c/style\u003e\n```\n\n## Responding to presence events\n\nLet’s modify our Pusher subscription code to respond to the events we considered above. In your `resources/views/spreadsheet.blade.php`, you should have code like this:\n\n``` php\n    pusher.subscribe(\"{{ $sheet-\u003echannel_name }}\")\n        .bind('updated', function (message) {\n            let [rowIndex, columnIndex, oldValue, newValue] = message.change;\n            addCellValue(rowIndex, columnIndex, newValue);\n            table.loadData(sheetContent);\n        });\n```\n\nModify those lines to look like this:\n\n``` php\n    pusher.subscribe(\"{{ $sheet-\u003echannel_name }}\")\n        .bind('pusher:subscription_succeeded', (data) =\u003e {\n            Object.entries(data.members)\n                .forEach(([id, member]) =\u003e addViewer(member));\n        })\n        .bind('pusher:member_added', (member) =\u003e addViewer(member.info))\n        .bind('pusher:member_removed', (member) =\u003e removeViewer(member))\n        .bind('updated', function (message) {\n            let [rowIndex, columnIndex, oldValue, newValue] = message.change;\n            addCellValue(rowIndex, columnIndex, newValue);\n            table.loadData(sheetContent);\n        });\n```\n\nThe last thing for us to do is to implement the `addViewer` and `removeViewer` functions. Add the following code to the end of your `resources/views/spreadsheet.blade.php`:\n\n``` php\n    \u003cscript\u003e\n        function addViewer(viewer) {\n            const userInitials = viewer.name.split(' ')\n                .reduce((initials, name) =\u003e {\n                    initials.push(name[0]);\n                    return initials;\n                }, []).join('');\n            let $avatar = $('\u003cspan\u003e')\n                .addClass('avatar')\n                .attr('data-toggle', 'tooltip')\n                .attr('id', `avatar-${viewer._id}`)\n                .attr('title', viewer.name)\n                .text(userInitials);\n            $('#viewers').append($avatar);\n            // enable the tooltip\n            $avatar.tooltip();\n        }\n    \n        function removeViewer(viewer) {\n            $(`#avatar-${viewer.id}`).remove();\n        }\n    \u003c/script\u003e\n```\n\nThe `addViewer` function creates the avatar element and adds it to the DOM using jQuery, while the `removeViewer` locates the avatar corresponding to the specified viewer and removes it.\n\nAll done! Let’s test our application. Start your MongoDB server by running `mongod`. (On Linux/macOS, you might need to run it as `sudo`).\n\nThen start your app by running:\n\n```\n    php artisan serve\n```\n\nSign in to your app at http://localhost:8000 and create a new spreadsheet. In a different browser, sign up as a new user at http://localhost:8000/register. Then copy the URL of the spreadsheet you created in the first browser and open it in the second browser. You should see that the user avatars are displayed at the top right corner as they open and close the sheet.\n\n## Conclusion\n\nThus far, we’ve been able to build a spreadsheets application with realtime collaboration and a “Now viewing” feature, thanks to Pusher. In the [next part](https://pusher.com/tutorials/realtime-spreadsheets-part-4), we’ll see how we can use Pusher to add another nifty Google Sheets feature—automatically deleting empty documents when they’re closed. Stay tuned!\n\nYou can check out the source code of the app [on GitHub.](https://github.com/shalvah/shoots/tree/part-3-whos-viewing)","metaTitle":"Build a realtime spreadsheets app - Part 3: Who's editing?","metaDescription":"Over this four-part series, create a spreadsheet application with realtime updates and presence indicators. In part three, implement a presence feature, to see who else is editing the same spreadsheet."}}],"defaultValue":"PHP","queryType":"tag","pages":8,"route":"/tutorials","query":{"tag":"PHP","page":"6"}}},"page":"/tutorials","query":{"tag":"PHP","page":"6"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=PHP&page=6 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:36:07 GMT -->
</html>