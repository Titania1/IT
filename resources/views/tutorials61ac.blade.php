<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=PHP&page=3 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:30:53 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">50</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels &amp; PHP</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorials06c4.html?tag=PHP" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsa345.html?product=Beams&amp;tag=PHP" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials0e67.html?product=Channels" class="css-a3lpv2 e137azhw1"><svg fill="#C223CE" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#C223CE"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#C223CE"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#C223CE"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Channels &amp; PHP"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/live-comments-automod-laravel.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Live Comments<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live commenting system with auto moderation using Laravel</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Use Laravel to build a live comments feature with built-in auto moderation. Users can comment on a sample post. Their co...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-logs-dashboard-laravel.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a live logs dashboard for Laravel</h3><p class="css-k12xad e5jrto45">This tutorial will show you how to create a live dashboard to output Laravel logging. You will take an existing app and ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/cryptocurrency-tracking-swift-laravel-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a cryptocurrency tracking app with push notifications using Swift and Laravel - Part 1: The backend</h3><p class="css-k12xad e5jrto45">Build a cryptocurrency tracking app featuring push notifications. Use Swift to create an iOS app, powered by a Laravel b...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/cryptocurrency-tracking-swift-laravel-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a cryptocurrency tracking app with push notifications using Swift and Laravel - Part 2: The iOS app</h3><p class="css-k12xad e5jrto45">Build a cryptocurrency tracking app featuring push notifications. Use Swift to create an iOS app, powered by a Laravel b...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/carpooling-react-native-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Maps<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a carpooling app with React Native - Part 1: Setting up the server</h3><p class="css-k12xad e5jrto45">This two-part series uses React Native, Docker and several Google services (Maps, Places, Directions and Geocoding) to c...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/carpooling-react-native-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Maps<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a carpooling app with React Native - Part 2: Creating the frontend</h3><p class="css-k12xad e5jrto45">This two-part series uses React Native, Docker and several Google services (Maps, Places, Directions and Geocoding) to c...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/ios-chat-app-swift-chatkit-part-3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an iOS chat app using Swift and Chatkit - Part 3: Building the iOS app</h3><p class="css-k12xad e5jrto45">Build a chat app for iOS, with a Laravel API backend. In part three, build the iOS application. By the end of this secti...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/desktop-notifications-laravel.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Implementing desktop notifications in your Laravel app</h3><p class="css-k12xad e5jrto45">Use Laravel and Vue to build a news notification module, which will send a desktop notification to everyone on the websi...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/monitoring-laravel-background-queues.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Monitoring Laravel’s background queues in realtime</h3><p class="css-k12xad e5jrto45">This article looks at ways to monitor Laravel&#x27;s background queues. Using the example of emails queued for sending, you w...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials4a25.html?product=Channels&amp;tag=PHP&amp;page=2" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials0942.html?product=Channels&amp;tag=PHP&amp;page=1" class="css-5s6711 edg0byb1">1</a><a href="tutorials4a25.html?product=Channels&amp;tag=PHP&amp;page=2" class="css-5s6711 edg0byb1">2</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials61ac.html?product=Channels&amp;tag=PHP&amp;page=3" class="css-2wakph edg0byb1">3</a><a href="tutorialsc31c.html?product=Channels&amp;tag=PHP&amp;page=4" class="css-5s6711 edg0byb1">4</a><a href="tutorials3b2d.html?product=Channels&amp;tag=PHP&amp;page=5" class="css-5s6711 edg0byb1">5</a><a href="tutorials3fe3.html?product=Channels&amp;tag=PHP&amp;page=6" class="css-5s6711 edg0byb1">6</a><a href="tutorialsc31c.html?product=Channels&amp;tag=PHP&amp;page=4" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":50,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Bwn4NZJ84wW8q0sww6Mew","type":"Entry","createdAt":"2018-09-01T05:31:43.519Z","updatedAt":"2018-09-01T05:31:43.519Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live commenting system with auto moderation using Laravel","url":"live-comments-automod-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3j821hA7aMgOiUEaO4Q8y6","type":"Entry","createdAt":"2018-02-26T19:00:03.819Z","updatedAt":"2018-03-20T12:22:11.602Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Shalvah Adebayo","url":"shalvah-adebayo","email":"shalvah.adebayo@gmail.com","twitter":"https://twitter.com/theshalvah","github":"https://shalvah.me/","guestWriter":true}}],"projectRepo":"https://github.com/shalvah/rcam","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-08-30","description":"Use Laravel to build a live comments feature with built-in auto moderation. Users can comment on a sample post. Their comments are either displayed instantly, or rejected with a message asking them to be nicer.","prerequisite":"You will need PHP 7+ and Composer installed on your machine.","content":"It’s 2018, and a lot of conversations happen over the Internet. It’s easy for people to forget to be nice when they’re sitting behind a screen and typing, as opposed to talking face-to-face. Many site admins employ some form of moderation to keep user behavior, such as comments, in check and ensure people play by the rules.  This moderation could be manual (an admin logs in to review comments before approving) or automatic (an external service analyses comments and approves or rejects based on certain signals), or even a combination of both.\n\nIn this tutorial, we’ll build a blog which allows users to comment on posts. These comments will be sent to an external API for moderation, and comments which pass will be saved and displayed under the post in realtime, using Pusher Channels. Here’s a preview of the app in action:\n\n![laravel-automod-demo](//images.ctfassets.net/1es3ne0caaid/1YLwQjfjJeKs0e2MG6SckA/7f85620ac7c0ca89d9f6977bbfdac6ea/laravel-automod-demo.gif)\n\nYou can find the source code of the complete application [on GitHub.](https://github.com/shalvah/rcam) Let’s go!\n\n## Prerequisites\n\n1. PHP 7.1.3 or newer\n2. [Composer](http://getcompocer.org).\n3. A Pusher account. Create one [here](https://pusher.com/signup).\n\n\n## Setting up\n\nFirst, create a new Laravel project:\n\n```\n    composer create-project --prefer-dist laravel/laravel rcam\n```\n\nOpen up the generated project folder (`rcam`). Set the value of `DB_CONNECTION` in your `.env` file to `sqlite` and remove all other lines that start with `DB_`.\n\n```\n    DB_CONNECTION=sqlite\n```\n\nThen create a file called `database.sqlite` in the `database` folder of your app.\n\nRun the following command to add the `zttp` package. We’ll use it to make an API call to the moderation service:\n\n```\n    composer require kitetail/zttp\n```\n\nNow we’ll set up our `Comment` model and database migration. Run the following command:\n\n```\n    php artisan make:model -m Comment\n```\n\nLook for the comments migration file that was created in your `database/migrations` folder. Modify its contents so it looks like this:\n\n``` php\n    // 2018_xx_xx_xxxxxx_create_comments_table\n    \n    \u003c?php\n    \n    use Illuminate\\Support\\Facades\\Schema;\n    use Illuminate\\Database\\Schema\\Blueprint;\n    use Illuminate\\Database\\Migrations\\Migration;\n    \n    class CreateCommentsTable extends Migration\n    {\n        public function up()\n        {\n            Schema::create('comments', function (Blueprint $table) {\n                $table-\u003eincrements('id');\n                $table-\u003estring('username');\n                $table-\u003estring('text');\n                $table-\u003etimestamps();\n            });\n        }\n    \n        public function down()\n        {\n            Schema::dropIfExists('comments');\n        }\n    }\n```\n\nThen we run migrations:\n\n```\n    php artisan migrate\n```\n\nLet’s add our route and view for the fake post and comments. Replace the contents of your `routes/web.php` with the following:\n\n``` php\n    // routes/web.php\n    \u003c?php\n    \n    Route::get('/', 'HomeController@home');\n```\n\nCreate a file `app/Http/Controllers/HomeController.php` with the following content:\n\n``` php\n    // app/Http/Controllers/HomeController.php\n    \n    \u003c?php\n    \n    namespace App\\Http\\Controllers;\n    \n    use App\\Comment;\n    \n    class HomeController extends Controller\n    {\n        public function home()\n        {\n            // order comments from newest to oldest\n            $comments = Comment::orderBy('id desc')-\u003eget();\n            return view('home', ['comments' =\u003e $comments]);\n        }\n    }\n```    \n\nNow create the file `resources/views/home.blade.php` with the following content:\n\n``` php\n    \u003c!-- resources/views/home.blade.php --\u003e\n    \n    \u003c!doctype html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003cmeta name=\"csrf-token\" content=\"{{ csrf_token() }}\"\u003e\n    \n        \u003ctitle\u003eRcam\u003c/title\u003e\n    \n        \u003c!-- Styles --\u003e\n        \u003cstyle\u003e\n            html, body {\n                background-color: #fff;\n                color: #636b6f;\n                font-family: sans-serif;\n                padding: 20px;\n            }\n    \n            input {\n                border: 2px solid blue;\n                font-size: 16px;\n                padding: 5px;\n            }\n    \n            button {\n                font-size: 16px;\n                padding: 5px;\n            }\n        \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \u003ch2\u003ePost title\u003c/h2\u003e\n    This is a dummy post. There isn't really much to it, but it could be really fun if you're bored. Speaking of bored, did\n    you hear the joke about the blackboard that had...oh, never mind. I'm not allowed to say that. Just drop a comment and\n    be on your merry way. Wait, did I tell you this is a dummy post?\n    \n    \u003cbr\u003e\u003cbr\u003e\n    \u003cdiv\u003e\n        \u003ch3\u003eComments\u003c/h3\u003e\n        \u003cform onsubmit=\"addComment(event);\"\u003e\n            \u003cinput type=\"text\" placeholder=\"Add a comment\" name=\"text\" id=\"text\" required\u003e\n            \u003cinput type=\"text\" placeholder=\"Your name\" name=\"username\" id=\"username\" required\u003e\n            \u003cbutton id=\"addCommentBtn\"\u003eComment\u003c/button\u003e\n        \u003c/form\u003e\n        \u003cdiv class=\"alert\" id=\"alert\" style=\"display: none;\"\u003e\u003c/div\u003e\n        \u003cbr\u003e\n    \n        \u003cdiv id=\"comments\"\u003e\n            @foreach($comments as $comment)\n                \u003cdiv\u003e\n                    \u003csmall\u003e{{ $comment-\u003eusername }}\u003c/small\u003e\n                    \u003cbr\u003e\n                    {{ $comment-\u003etext }}\n                \u003c/div\u003e\n            @endforeach\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\n\n\n## Moderating comments\n\nNow let’s allow users to post comments. In the view we built above, we created a form for submitting comments. The `onsubmit` handler of that form is a function called `addComment`, so let’s implement that. Add this code to your `resources/views/home.blade.php`, just before the closing `\u003c/body\u003e` tag:\n\n``` php\n    \u003c!-- resources/views/home.blade.php --\u003e\n    \n    \u003c!-- Add jQuery --\u003e\n    \u003cscript src=\"https://code.jquery.com/jquery-3.3.1.min.js\"\n            integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\"\n            crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n        function displayComment(data) {\n            let $comment = $('\u003cdiv\u003e').text(data['text']).prepend($('\u003csmall\u003e').html(data['username'] + \"\u003cbr\u003e\"));\n            $('#comments').prepend($comment);\n        }\n            \n        function addComment(event) {\n            function showAlert(message) {\n                let $alert = $('#alert');\n                $alert.text(message).show();\n                setTimeout(() =\u003e $alert.hide(), 4000);\n            }\n    \n            event.preventDefault();\n            $('#addCommentBtn').attr('disabled', 'disabled');\n            let data = {\n                text: $('#text').val(),\n                username: $('#username').val(),\n            };\n            fetch('/comments', {\n                body: JSON.stringify(data),\n                credentials: 'same-origin',\n                headers: {\n                    'content-type': 'application/json',\n                    'x-csrf-token': $('meta[name=\"csrf-token\"]').attr('content'),\n                    'x-socket-id': window.socketId\n                },\n                method: 'POST',\n                mode: 'cors',\n            }).then(response =\u003e {\n                $('#addCommentBtn').removeAttr('disabled');\n                if (response.ok) {\n                    displayComment(data);\n                    showAlert('Comment posted!');\n                } else {\n                    showAlert('Your comment was not approved for posting. Please be nicer :)');\n                }\n            })\n        }\n    \u003c/script\u003e\n```\n\nHere, we’re using [Fetch](https://developer.mozilla.org/en/docs/Web/API/Fetch_API) to post the comment to the backend. If a `200 OK` response is received, we display the comment under the post. If not, that means the comment failed moderation, so we’ll tell the user to rephrase their comment.\n\nYou’ll notice we’re sending a couple of custom headers (`x-csrf-token` and `x-socket-id`). The first header is to satisfy Laravel’s CSRF protection, which ensures someone can’t be tricked into posting a comment to our site from a different site. You can read more about CSRF protection [here](https://laravel.com/docs/5.5/csrf). The second header is our Pusher socket ID, which tells the backend which client sent this request. It prevents the server from sending our own messages back to us. There’s more on that [here](https://pusher.com/docs/server_api_guide/server_excluding_recipients). For now, it’s always going to be `undefined`, but we’ll come back to that later.\n\nNext, add the route for making a comment to the bottom of your `routes/web.php` file:\n\n``` php\n    // routes/web.php\n    \n    Route::post('/comments', 'HomeController@addComment');\n```\n\nNext, we’ll add the method that handles this to our `HomeController`:\n\n``` php\n    // app/Http/Controllers/HomeController.php\n    \n    public function addComment()\n    {\n        $data = request()-\u003epost();\n        Comment::moderate($data['text']);\n        return Comment::create($data);\n    }\n```\n\nNow open up the `app/Comment.php` file and replace its contents with the following:\n\n``` php\n    // app/Comment.php\n    \n    \u003c?php\n    \n    namespace App;\n    \n    use Illuminate\\Database\\Eloquent\\Model;\n    use Zttp\\Zttp;\n    \n    class Comment extends Model\n    {\n        protected $guarded = [];\n    \n        public static function moderate($comment)\n        {\n            $response = Zttp::withoutVerifying()-\u003epost(\"https://commentator.now.sh\", [\n                'comment' =\u003e $comment,\n                'limit' =\u003e -3,\n            ])-\u003ejson();\n            if ($response['commentate']) {\n                abort(400, \"Comment not allowed\");\n            }\n        }\n    }\n```\n\n\nHere we’ve defined a `moderate` method. In it, we send the comment data to a comment moderation service located at https://commentator.now.sh. We’ve also specified a `limit` parameter of -3, which means that we’re willing to accept comments which have a score of -3 (mildly negative), but not any less. The response from the service contains a `commentate` parameter that is true if the comment scored below our limit. In such a case, we return a `400 Bad Request` to the frontend and prevent the comment from being saved.\n\n\n## Displaying new comments in realtime\n\nFirst, we’ll set up Pusher on the backend. Install the Pusher Laravel package and publish the config file by running the following commands:\n\n```\n    composer require pusher/pusher-http-laravel\n    php artisan vendor:publish --provider=\"Pusher\\Laravel\\PusherServiceProvider\"\n```\n\nSign in to [your Pusher dashboard](http://app.pusher.com) and create a new app. Copy your app credentials from the **App Keys** section and add them to your `.env` file:\n\n```\n    PUSHER_APP_ID=your-app-id\n    PUSHER_APP_KEY=your-app-key\n    PUSHER_APP_SECRET=your-app-secret\n    PUSHER_APP_CLUSTER=your-app-cluster\n```\n\n\u003e **Note**: Laravel sometimes caches old configuration, so for the project to see your new configuration values, you might need to run the command `php artisan config:clear`\n\nThen add the following JavaScript to your view, just before the closing `\u003c/body\u003e` tag:\n\n``` php\n    \u003c!-- resources/views/home.blade.php --\u003e\n    \n    \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n        var socket = new Pusher(\"your-app-key\", {\n            cluster: 'your-app-cluster',\n        });\n        // set the socket ID when we connect\n        socket.connection.bind('connected', function() {\n            window.socketId = socket.connection.socket_id;\n        });\n        socket.subscribe('comments')\n            .bind('new-comment',displayComment);\n    \u003c/script\u003e\n```\n\nReplace `your-app-key` and `your-app-cluster` with the respective credentials as gotten from your Pusher app dashboard.\n\nNow, let’s modify our `addComment` method on the backend so it triggers a new Pusher message when a comment is created successfully.\n\n``` php\n    // app/Http/Controllers/HomeController.php\n    \n    \n    public function addComment()\n    {\n        $data = request()-\u003epost();\n        Comment::moderate($data['text']);\n        $comment = Comment::create($data);\n        Pusher::trigger('comments', 'new-comment', $comment, request()-\u003eheader('X-Socket-Id'));\n        return $comment;\n    }\n```\n\nYou’ll need to import the `Pusher` class by adding `use Pusher\\Laravel\\Facades\\Pusher;` at the top of the file.\n\nAnd with that, we’re done. Start up your app by running `php artisan serve`, then visit http://127.0.0.1:8000. Try adding a few nice comments (“This is good”,  “I don’t agree with this” ), and a few comments with some “bad” words (“This article is full of shit”, “Damn, this article sucks”). You should see the comments get moderated and then show up in realtime.\n\n\n## Conclusion\n\nIn this tutorial, we’ve combined Pusher Channels with an external comment moderation service to improve the quality of comments on our blog and the user experience for every reader. This is just one combination of services we can make to improve our user’s experience on our site or app. I hope you’ve enjoyed this! You can check out the source code of the completed application [on GitHub.](https://github.com/shalvah/rcam)","metaTitle":"Build a live comments system with auto moderation in Laravel","metaDescription":"Create a live comments feature with auto moderation built in, using Laravel. Users can comment on a sample post. Their comments are either displayed instantly, or rejected with a message asking them to be nicer."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1n7dg6CWJagGQsgUGOIeIS","type":"Entry","createdAt":"2018-08-29T20:43:23.190Z","updatedAt":"2018-08-29T20:43:23.190Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a live logs dashboard for Laravel","url":"live-logs-dashboard-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3j821hA7aMgOiUEaO4Q8y6","type":"Entry","createdAt":"2018-02-26T19:00:03.819Z","updatedAt":"2018-03-20T12:22:11.602Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Shalvah Adebayo","url":"shalvah-adebayo","email":"shalvah.adebayo@gmail.com","twitter":"https://twitter.com/theshalvah","github":"https://shalvah.me/","guestWriter":true}}],"projectRepo":"https://github.com/shalvah/realtime-laravel-logs","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}}],"reviewDate":"2018-08-29","description":"This tutorial will show you how to create a live dashboard to output Laravel logging. You will take an existing app and extend it, modifying the logging outputs and adding new logging.","prerequisite":"You will need PHP 7.2+ and Composer installed on your machine.","content":"In this tutorial, we’ll make use of these concepts to display our Laravel logs on a dashboard in realtime using Pusher Channels.\n\nIn an earlier tutorial, we looked at [how to use the new log stacks and channels](https://blog.pusher.com/log-channels-stacks-laravel/) introduced in Laravel 5.6. \n\n\n## Prerequisites\n1. PHP 7.2 or newer.\n2. [Composer](http://getcompocer.org).\n3. A Pusher account. Create one [here](https://pusher.com/signup).\n\n\n## Setting up\n\nWe’ll start off with an existing project so we can observe how the logs work. We’ll use a small stock application I built. You can clone the project from GitHub by running:\n\n```\n    git clone https://github.com/shalvah/stockt.git realtime-laravel-logs\n```\n\nYou can also download the source directly from [this link.](https://github.com/shalvah/stockt/archive/master.zip) \n\nThen `cd` into the project folder and install dependencies:\n\n```\n    composer install\n```\n\nNext, copy the `.env.example` to a new file called `.env`. Run the following command to generate an application encryption key:\n\n```\n    php artisan key:generate\n```\n\nLastly, create a file called `database.sqlite` in the `database` directory and run the following command to set up and populate the database:\n\n```\n    php artisan migrate --seed\n```\n\n## Configuring the Pusher handler\n\nRun the following command to add the `monolog-pusher` package:\n\n```\n    composer require shalvah/monolog-pusher\n```\n\nThis package will be doing the heavy lifting. Laravel’s logging system is powered by Monolog, which uses **handlers** to define where a log gets sent to. For instance, the `FileHandler` sends logs to a file, the `EmailHandler` sends logs to a specified email address, and so forth. You can view a list of available handlers [here](https://github.com/Seldaek/monolog/blob/master/doc/02-handlers-formatters-processors.md#handlers). This package provides us with a `PusherHandler` which sends logs to a Pusher channel.\n\nWe’re going to configure Laravel’s log component to use Monolog, with the `PusherHandler` as its handler. To do this, we’ll register a new **channel** that uses the `monolog` driver. Open up your `config/logging.php` and add the following to the `channels` array:\n\n``` php\n    // config/logging.php\n    \n    \n    'realtime' =\u003e [\n        'driver' =\u003e 'monolog',\n        'handler' =\u003e \\Shalvah\\MonologPusher\\PusherHandler::class,\n        'with' =\u003e [\n            'pusher' =\u003e [\n                env('PUSHER_APP_KEY'),\n                env('PUSHER_APP_SECRET'),\n                env('PUSHER_APP_ID'),\n                [\n                    'cluster' =\u003e env('PUSHER_APP_CLUSTER')\n                ]\n            ],\n            'level' =\u003e \\Monolog\\Logger::DEBUG\n        ],\n    ],\n```\n\n\u003e **Note**: “realtime” is just an arbitrary name we chose for our log channel. We could equally use “chimichanga”.\n\nThe configuration is pretty easy to understand. We specify the `driver` as `monolog`, and the `handler` as the `PusherHandler`.  In the `with` array, we specify the parameters to be passed to the constructor of the `handler`, which in this case are our `Pusher` credentials and the minimum log level we want this handler to catch.\n\nYou’ll then need to add your Pusher app credentials to the `.env` file:\n\n```\n    PUSHER_APP_ID=your-app-id\n    PUSHER_APP_KEY=your-app-key\n    PUSHER_APP_SECRET=your-app-secret\n    PUSHER_APP_CLUSTER=your-app-cluster\n```\n\n## Viewing logs\n\nWe need to add a page to our app where we can view our logs. Let’s add a new route:\n\n``` php\n    // routes/web.php\n    \n    Route::view('logs', 'logs')-\u003emiddleware('auth');\n```    \n\nThis route will render the view `logs.blade.php` whenever we visit `/logs`. Create the file `resources/views/logs.blade.php` with the following content:\n\n``` php\n    @extends('layouts.app')\n    \n    @section('content')\n        \u003cdiv class=\"container\"\u003e\n            \u003ch2\u003eLogs\u003c/h2\u003e\n            \u003cdiv class=\"list-group\" id=\"logs\"\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \n        \u003cscript src=\"https://code.jquery.com/jquery-3.3.1.min.js\"\n                integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\"\n                crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n    \n        \u003cscript\u003e\n            function displayLog(data) {\n                let $log = $('\u003cdiv\u003e').addClass('list-group-item')\n                    .html(`\u003cpre\u003e\u003ccode\u003e${JSON.stringify(data, null, 4)}\u003c/code\u003e\u003c/pre\u003e`);\n                $('#logs').prepend($log);\n            }\n        \u003c/script\u003e\n        \u003cscript\u003e\n            var socket = new Pusher(\"your-app-key\", {\n                cluster: 'your-app-cluster',\n            });\n            socket.subscribe('{{ config('app.env') }}')\n                .bind('log', displayLog);\n        \u003c/script\u003e\n    @endsection\n```    \n\nDon’t forget to replace `your-app-key` and `your-app-cluster` with their real values.\n\nHere, we subscribe to the Pusher channel and listen for the `log` event. When there is a new log, we format it and display it on the page.\n\n\n\u003e **Note**: the name of the Laravel log channel (“realtime”) is different from the name of the Monolog log channel. Laravel uses the name of the current app environment (`config('app.env')`) as the name of the Monolog log channel. This is what also gets used as the Pusher channel.\n\n\nNow let’s test it out. We’ll add a few logging calls at random places in our app.\n\nOpen up the `ProductsController` and modify the `index` method so it looks like this:\n\n``` php\n    // app/Http/Controllers/ProductController.php\n    \n    public function index()\n    {\n        Log::channel('realtime')-\u003einfo(request()-\u003euser()-\u003ename.' is viewing all products!');\n        return view('products.index', ['products' =\u003e Product::all()]);\n    }\n\nAlso, modify the `show` method so it looks like this:\n\n\n    // app/Http/Controllers/ProductController.php\n    \n    public function show()\n    {\n        Log::channel('realtime')-\u003edebug(request()-\u003euser()-\u003ename.\" is viewing the product with ID {$product-\u003eid}!\");\n        return view('products.show', ['product' =\u003e $product]);\n    }\n```\n\nDon’t forget to import the `Log` class at the top via `use Illuminate\\Support\\Facades\\Log;`.\n\nBy calling `Log::channel('realtime')`, we’re explicitly telling Laravel to broadcast this particular log message over the `realtime` channel we created earlier.\n\nLet’s see our realtime logs in action. Start the app by running `php artisan serve`. \n\nLog in at http://localhost:8000/login with *admin@stockt.test* as email and *secret* as password. Now open up the logs page (http://localhost:8000/logs) in one tab and the products page (http://localhost:8000/products) in another. Try to navigate across a few products. You should see the logs page update similar to this:\n\n![laravel-live-logs-demo](//images.ctfassets.net/1es3ne0caaid/6oeOcE3VReyQKeeUUOsE6k/40ea963e47eda8eb489ec93ee884075b/laravel-live-logs-demo.gif)\n\n## Making Pusher our default logger\n\nYou’ll notice that every time we wanted to use the realtime logger, we had to call `Log::channel('realtime')` first. We can get rid of this step by making the `realtime` logger our default logger. To do this, set the `LOG_CHANNEL` variable in your `.env` file to `realtime`.\n\n```\n    LOG_CHANNEL=realtime\n```\n\n\u003e Laravel sometimes caches app config, so you might need to run `php artisan config:clear` after making a change to your `.env` file for the change to reflect\n\nNow, in our code snippets above we can simply write:\n\n```\n        Log::info(request()-\u003euser()-\u003ename.\" is viewing all products!\");\n```\n\nAnd logs will get sent to Pusher.\n\n## Combining loggers using a stack\n\nSupposing we want to see our logs in realtime, but we also want to persist them to a file or database. Laravel 5.6 allows us to do this by using a **stack.** A stack combines two or more channels into one.\n\nYou can create a stack dynamically by using the `stack` method:\n\n``` php\n    Log::stack(['single', 'realtime'])-\u003einfo(\"Someone is viewing all products!\");\n```\n\n\u003e ‘single’ is the name of the default Laravel channel that writes to a single file, `storage/logs/laravel.log`\n\nAlternatively, you can configure a stack in your `config/logging.php`, by adding a new entry in the `channels` array, this time using the `stack` driver:\n\n``` php\n    // config/logging.php\n    \n        'realtime-stack' =\u003e [\n            'driver' =\u003e 'stack',\n            'channels' =\u003e ['single', 'realtime'],\n        ],\n```\n\nNow, when we send log messages to this stack, they will be sent to both Pusher and the regular log file.\n\n\n## Conclusion\n\nIn this article, we’ve been able to send our application’s logs in realtime to our frontend using Pusher Channels. This is especially useful in applications where there is a need for realtime monitoring of actions. You can check out the source code of the completed application [on GitHub.](https://github.com/shalvah/realtime-laravel-logs)","metaTitle":"Create a live logs dashboard for Laravel","metaDescription":"Create a dashboard to display Laravel log outputs in realtime. Extend and modify an existing application to create custom logging, and display it live."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rJUFHakQgGc6A0WQyyMcA","type":"Entry","createdAt":"2018-07-03T09:11:14.166Z","updatedAt":"2018-07-03T09:14:45.775Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a cryptocurrency tracking app with push notifications using Swift and Laravel - Part 1: The backend","url":"cryptocurrency-tracking-swift-laravel-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/cryptocurrency-alert-ios-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}}],"reviewDate":"2018-07-02","description":"Build a cryptocurrency tracking app featuring push notifications. Use Swift to create an iOS app, powered by a Laravel backend. User will receive alerts when currency prices change. In part one, create the backend with Laravel.","prerequisite":"You will need the following installed on your machine: Xcode, the Laravel CLI, SQLite and Cocoapods. Familiarity with the Xcode IDE will be helpful.","content":"## Introduction\n\nCryptocurrency has been and is still one of the biggest trends this year. With currencies like Bitcoin reaching record highs and new companies creating tokens and offerings, it’s showing just how much potential cryptocurrencies have. However, cryptocurrency prices are erratic and can fall or climb at a moments notice, so it’s always a good idea to keep tabs on the changes.\n\nIn this article, we will be building an application that keeps tabs on changes to the crypto market. The application will focus on BTC and ETH and will allow users of the application to set minimum and maximum amounts when they would like to be notified about the coins current price. The application will be built using Swift, Laravel, Pusher Channels, and Pusher Beams.\n\n## Prerequisites\n\nTo follow along you need the following requirements:\n\n\n- [Xcode](https://developer.apple.com/xcode) installed on your machine.\n- Knowledge of the Xcode IDE.\n- Basic knowledge using the [Laravel framework](https://laravel.com/).\n- Basic knowledge of the [Swift programming language](http://developer.apple.com/swift).\n- [Laravel CLI](https://laravel.com/docs/5.6/installation) installed on your machine.\n- SQLite installed on your machine. [Installation guide](https://www.tutorialspoint.com/sqlite/sqlite_installation.htm).\n- [Cocoapods](https://guides.cocoapods.org/using/getting-started.html) installed on your machine.\n- [Pusher Beams](https://pusher.com/beams) and [Channels](https://pusher.com/channels) application.\n\n\n## What we will be building\n\nWe will start out by building the backend of the application using Laravel. Then we will build the iOS application using Swift. If you want to test the push notifications then you will need to run the application on a live device.\n\n### How the client application will work\n\nFor the client app, the iOS application, we will create a simple list that will display the available currencies and the current prices to the dollar. Whenever the price of the cryptocurrency changes, we will trigger an event using Pusher Channels so the prices are updated.\n\nFrom the application, you will be able to set a minimum and maximum price change when you want to be alerted. For instance, you can configure the application to send a push notification to the application when the price of one Etherium (ETH) goes below $500. You can also configure the application to receive a notification when the price of Bitcoin goes above $5000.\n\n### How the backend application will work\n\nFor the backend application, we will be using Laravel and we will create endpoints that allow a user update the settings and load the settings for a device. The API will be responsible for checking the current prices of the cryptocurrency and sending both a Channels update and a Beams notification when the price changes. \n\nHowever, because the prices don’t change very predictably, we will be simulating the currency changes so we can preview the application in action. We will also be using [task scheduling](https://laravel.com/docs/5.6/scheduling) in Laravel to trigger the checks for the current currency prices. \n\nIn a production environment we will set the scheduler as a cronjob, but because we are in development, we will manually run the command to trigger price changes.\n\n### How the application will look\n\nWhen we are done with the application, here's how the application will look:\n\n![ios-cryptocurrency-part-1-demo](//images.ctfassets.net/1es3ne0caaid/1K08NTSdaoIIqWQ2YAyOqo/4efdb4fa01a2ee599bf5b71561a717a4/ios-cryptocurrency-part-1-demo.gif)\n\nLet’s get started.\n\n## Setting up Pusher Beams and Channels\n\n### Setting up Pusher Channels\n\nLog in to your [Pusher dashboard](https://dashboard.pusher.com). If you don’t have an account, create one. Your dashboard should look like this:\n\n![ios-cryptocurrency-part-1-keys](//images.ctfassets.net/1es3ne0caaid/47FA7jeU0w62siO8G6iCQi/aeda1c00644c75e4d327dbe6725694d7/ios-cryptocurrency-part-1-keys.png)\n\nCreate a new Channels app. You can easily do this by clicking the big **Create new Channels app** card at the bottom right. When you create a new app, you are provided with keys. Keep them safe as you will soon need them.\n\n### Setting up Pusher Beams\n\nNext, log in to the new [Pusher dashboard](https://dash.pusher.com/), in here we will create a Pusher Beams instance. You should sign up if you don’t have an account yet. Click on the **Beams** button on the sidebar then click **Create**, this will launch a pop up to **Create a new Beams instance**. Name it `cryptoalat`.\n\n![ios-cryptocurrency-part-1-new-beams](//images.ctfassets.net/1es3ne0caaid/4xKD0goX606gGqUSQW2EcC/3dcd7757df87351ddc54cb62397ce2e7/ios-cryptocurrency-part-1-new-beams.png)\n\nAs soon as you create the instance, you will be presented with a quickstart guide. Select the **IOS** quickstart and follow through the wizard.\n\n![ios-cryptocurrency-part-1-beams-quickstart](//images.ctfassets.net/1es3ne0caaid/27fmUEHf64Qc0KcIQo0KAw/265bde6f67ea031f5d5495a10273e678/ios-cryptocurrency-part-1-beams-quickstart.png)\n\nWhen you are done creating the Beams application, you will be provided with an instance ID and a secret key, we will need these later.\n\n## Setting up your backend application\n\nIn your terminal, run the command below to create a new Laravel project:\n\n```\n    $ laravel new cryptoapi\n```\n\nThis command will create a new Laravel project and install all the required Laravel dependencies. \n\nNext, let’s install some of the project specific dependencies. Open the `composer.json` file and in the `require` property, add the following dependencies:\n\n``` json\n    // File: composer.json\n    \"require\": {\n        [...]\n        \n        \"neo/pusher-beams\": \"^1.0\",\n        \"pusher/pusher-php-server\": \"~3.0\"\n    },\n```\n\nNow run the command below to install these dependencies.\n\n```\n    $ composer update\n```\n\nWhen the installation is complete, open the project in a text editor of your choice. [Visual Studio Code](https://code.visualstudio.com/) is pretty nice. \n\n### Setting up our Pusher Beams library\n\nThe first thing we want to do is set up the [Pusher Beams library](https://github.com/neoighodaro/pusher-beams) we just pulled in using composer. To set up, open the `.env` file and add the following keys:\n\n```\n    PUSHER_BEAMS_SECRET_KEY=\"PUSHER_BEAMS_SECRET_KEY\"\n    PUSHER_BEAMS_INSTANCE_ID=\"PUSHER_BEAMS_INSTANCE_ID\"\n```\n\nYou should replace the `PUSHER_BEAMS_*` placeholders with the keys you got when setting up your Beams application.\n\nNext, open the `config/broadcasting.php` file and scroll until you see the `connections` key. In there, you’ll have the `pusher` settings, add the following to the `pusher` configuration:\n\n``` php\n    'pusher' =\u003e [\n        // [...]\n    \n        'beams' =\u003e [\n            'secret_key' =\u003e env('PUSHER_BEAMS_SECRET_KEY'),\n            'instance_id' =\u003e env('PUSHER_BEAMS_INSTANCE_ID'),\n        ],\n    ],\n```\n\n### Setting up our Pusher Channels library\n\nThe next step is to set up Pusher Channels. Laravel comes with native support for Pusher Channels so we do not need to do much to set it up.\n\nOpen the `.env` file and update the following keys below:\n\n```\n    BROADCAST_DRIVER=pusher\n    \n    // [...]\n    \n    PUSHER_APP_ID=\"PUSHER_APP_ID\"\n    PUSHER_APP_KEY=\"PUSHER_APP_KEY\"\n    PUSHER_APP_SECRET=\"PUSHER_APP_SECRET\"\n    PUSHER_APP_CLUSTER=\"PUSHER_APP_CLUSTER\"\n```\n\nAbove you set the `BROADCAST_DRIVER` to `pusher` and then for the other `PUSHER_APP_*` keys, replace the placeholders with the keys gotten from your Pusher dashboard. That’s all we need to do to set up Pusher Channels for this application.\n\n\n## Building the backend application\n\nNow that we have set up all the dependencies, we can start building the application. We will start by creating the routes. However, instead of creating controllers to hook into the routes, we will be adding the logic directly to the routes.\n\n### Setting up the database, migration, and model\n\nSince we will be working with a database, we need to set up the database we are going to be working with. To make things easy we will be using SQLite. Create an empty  `database.sqlite` file in the `database` directory.\n\nOpen the `.env` file and replace:\n\n```\n    DB_CONNECTION=mysql\n    DB_HOST=127.0.0.1\n    DB_PORT=3306\n    DB_DATABASE=homestead\n    DB_USERNAME=homestead\n    DB_PASSWORD=secret\n```\n\nWith\n\n```\n    DB_CONNECTION=sqlite\n    DB_DATABASE=/full/path/to/your/database.sqlite\n```\n\nNext, let’s create a migration for the `devices` table. We will use this table to store devices and their notification settings. This will help us know what devices to send push notifications to.\n\nRun the command below to create the migration and model:\n\n```\n    $ php artisan make:model Device -m\n```\n\n\u003e The `-m` flag will instruct artisan to create a migration alongside the model.\n\nThis command will generate two files, the migration file in the `database/migrations` and the model in the `app` directory. Let’s edit the migration file first.\n\nOpen the `*_create_devices_table.php` migration file in the `database/migrations`  directory and replace the contents with the following:\n\n``` php\n    \u003c?php\n    \n    use Illuminate\\Support\\Facades\\Schema;\n    use Illuminate\\Database\\Schema\\Blueprint;\n    use Illuminate\\Database\\Migrations\\Migration;\n    \n    class CreateDevicesTable extends Migration\n    {\n        /**\n         * Run the migrations.\n         *\n         * @return void\n         */\n        public function up()\n        {\n            Schema::create('devices', function (Blueprint $table) {\n                $table-\u003eincrements('id');\n                $table-\u003estring('uuid')-\u003eunique();\n                $table-\u003efloat('btc_min_notify')-\u003edefault(0);\n                $table-\u003efloat('btc_max_notify')-\u003edefault(0);\n                $table-\u003efloat('eth_min_notify')-\u003edefault(0);\n                $table-\u003efloat('eth_max_notify')-\u003edefault(0);\n            });\n        }\n        \n        /**\n         * Reverse the migrations.\n         *\n         * @return void\n         */\n        public function down()\n        {\n            Schema::dropIfExists('devices');\n        }\n    }\n```\n\nIn the `up` method, we have defined the structure of the `devices` table. We have the `uuid` field which will be a unique string for each device registered. We have two `btc_notify` fields which are there to save the minimum and maximum prices of BTC at which point the device should be notified. Same applies to the* `eth_*_notify`  fields.\n\nTo run the migration, run the command below:\n\n```\n    $ php artisan migrate\n```\n\nOpen the `app/Device.php` model and replace the contents with the code below:\n\n``` php\n    \u003c?php\n    namespace App;\n    \n    use Illuminate\\Database\\Eloquent\\Model;\n    use Illuminate\\Notifications\\Notifiable;\n    \n    class Device extends Model\n    {\n        use Notifiable;\n    \n        public $timestamps = false;\n        \n        protected $fillable = [\n            'uuid', \n            'btc_min_notify', \n            'btc_max_notify', \n            'eth_min_notify', \n            'eth_max_notify',\n        ];\n        \n        protected $cast = [\n            'btc_min_notify' =\u003e 'float',\n            'btc_max_notify' =\u003e 'float',\n            'eth_min_notify' =\u003e 'float',\n            'eth_max_notify' =\u003e 'float'\n        ];\n        \n        public function scopeAffected($query, string $currency, $currentPrice)\n        {\n            return $query-\u003ewhere(function ($q) use ($currency, $currentPrice) {\n                $q-\u003ewhere(\"${currency}_min_notify\", '\u003e', 0)\n                  -\u003ewhere(\"${currency}_min_notify\", '\u003e', $currentPrice);\n            })-\u003eorWhere(function ($q) use ($currency, $currentPrice) {\n                $q-\u003ewhere(\"${currency}_max_notify\", '\u003e', 0)\n                  -\u003ewhere(\"${currency}_max_notify\", '\u003c', $currentPrice);\n            });\n        }\n    }\n```\n\nIn the model above, we have set the `$timestamps` property to `false` to make sure that Eloquent does not try to update the `created_at` and `updated_at` fields, which is the normal behavior.\n\nWe also have the `scopeAffected` method which is an example of an [Eloquent scope](https://laravel.com/docs/5.6/eloquent#local-scopes). We use this to get the affected devices after a price change has occurred on a currency. So if, for instance, BTC’s price drops, this method will check the devices and the settings to see the devices that need to be notified of this change.\n\n\n\u003e Local scopes allow you to define common sets of constraints that you may easily re-use throughout your application. For example, you may need to frequently retrieve all users that are considered \"popular\". To define a scope, prefix an Eloquent model method with `scope`. - [Laravel documentation](https://laravel.com/docs/5.6/eloquent#local-scopes).\n\nWe will use this scope later in our application when we need to know what devices to send push notifications to.\n\n### Creating the routes\n\nOpen the `routes/api.php` file and replace the contents of the file with the following code:\n\n``` php\n    // File: routes/api.php\n    \u003c?php\n    \n    use App\\Device;\n    use Illuminate\\Http\\Request;\n```\n \nNext, let’s add the first route. Append the code below to the routes file:\n\n``` php\n    // File: routes/api.php\n    Route::get('/settings', function (Request $request) {\n        return Device::whereUuid($request-\u003equery('u'))-\u003efirstOrFail()['settings'];\n    });\n```\n\nIn the route above, we are returning the settings for the device supplied in the `u` query parameter. This means if a registered device hits the `/settings` endpoint and passes the device UUID through the `u` parameter, the settings for that device will be returned. \n\nNext, in the same routes file, paste the following at the bottom of the file:\n\n``` php\n    Route::post('/settings', function (Request $request) {\n        $settings = $request-\u003evalidate([\n            'btc_min_notify' =\u003e 'int|min:0',\n            'btc_max_notify' =\u003e 'int|min:0',\n            'eth_min_notify' =\u003e 'int|min:0',\n            'eth_max_notify' =\u003e 'int|min:0',\n        ]);\n    \n        $settings = array_filter($settings, function ($value) { return $value \u003e 0; });\n    \n        $device = Device::firstOrNew(['uuid' =\u003e $request-\u003equery('u')]);\n        $device-\u003efill($settings);\n        $saved = $device-\u003esave();\n        \n        return response()-\u003ejson([\n            'status' =\u003e $saved ? 'success' : 'failure'\n        ], $saved ? 200 : 400);\n    });\n```\n\nAbove, we have defined the route for the `POST /settings`  route. This route saves settings to the database. It will create a new entry if the setting does not already exist or will update the existing one if it does.\n\nThat’s all for the routes.\n\n### Creating the jobs, events, and notifiers\n\nNext, we need to create the [Laravel job](https://laravel.com/docs/5.6/queues#creating-jobs) that will run at intervals to check if there is a change in the currency price. \n\nRun the command below to create a new Laravel job:\n\n```\n    $ php artisan make:job CheckPrices\n```\n\nThis will create a new `CheckPrices` class in the `app` directory. Open that class and replace the contents with the following:\n\n``` php\n    \u003c?php\n    \n    namespace App\\Jobs;\n    \n    use App\\Device;\n    use Illuminate\\Bus\\Queueable;\n    use Illuminate\\Queue\\SerializesModels;\n    use Illuminate\\Queue\\InteractsWithQueue;\n    use Illuminate\\Contracts\\Queue\\ShouldQueue;\n    use Illuminate\\Foundation\\Bus\\Dispatchable;\n    use App\\Events\\CurrencyUpdated;\n    use App\\Notifications\\CoinPriceChanged;\n    \n    class CheckPrices implements ShouldQueue\n    {\n        use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;\n        \n        protected $supportedCurrencies = ['ETH', 'BTC'];\n    \n        /**\n         * Execute the job.\n         *\n         * @return void\n         */\n        public function handle()\n        {\n            $payload = $this-\u003egetPricesForSupportedCurrencies();\n    \n            if (!empty($payload)) {\n                $this-\u003etriggerPusherUpdate($payload);\n                $this-\u003etriggerPossiblePushNotification($payload);\n            }\n        }\n        \n        private function triggerPusherUpdate($payload)\n        {\n            event(new CurrencyUpdated($payload));\n        }\n        \n        private function triggerPossiblePushNotification($payload)\n        {\n            foreach ($this-\u003esupportedCurrencies as $currency) {\n                $currentPrice = $payload[$currency]['current'];\n                \n                $currency = strtolower($currency);\n    \n                foreach (Device::affected($currency, $currentPrice)-\u003eget() as $device) {\n                    $device-\u003enotify(new CoinPriceChanged($currency, $device, $payload));\n                }\n            }\n        }\n        \n        public function getPricesForSupportedCurrencies(): array\n        {\n            $payload = [];\n    \n            foreach ($this-\u003esupportedCurrencies as $currency) {\n                if (config('app.debug') === true) {\n                    $response = [\n                        $currency =\u003e [\n                            'USD' =\u003e (float) rand(100, 15000)\n                        ]\n                    ];\n                } else {\n                    $url = \"https://min-api.cryptocompare.com/data/pricehistorical?fsym={$currency}\u0026tsyms=USD\u0026ts={$timestamp}\";\n                    \n                    $response = json_decode(file_get_contents($url), true);\n                }\n    \n                if (json_last_error() === JSON_ERROR_NONE) {\n                    $currentPrice = $response[$currency]['USD'];\n    \n                    $previousPrice = cache()-\u003eget(\"PRICE_${currency}\", false);\n    \n                    if ($previousPrice == false or $previousPrice !== $currentPrice) {\n                        $payload[$currency] = [\n                            'current' =\u003e $currentPrice,\n                            'previous' =\u003e $previousPrice,\n                        ];\n                    }\n    \n                    cache()-\u003eput(\"PRICE_${currency}\", $currentPrice, (24 * 60 * 60));\n                }\n            }\n    \n            return $payload;\n        }\n    }\n```\n\nIn the class above, we implement the `ShouldQueue` interface. This makes it so that the job can and will be queued. In a production server, queueing jobs makes your application faster as it queues jobs that might take a while to execute for later execution. \n\nWe have four methods in this class. The first one is the `handle` method. This one is called automatically when the job is executed. In this method, we fetch the prices for the available currencies and then check if the price has changed. If it has, we publish a Pusher Channel event and then check if there are any devices that need to be notified based on the user’s settings. If there are any, we send a push notification to that device. \n\nWe have the `triggerPusherUpdate` method which triggers a `CurrencyUpdated` event. We will create this event in the next section. We also have a `triggerPossiblePushNotification` method which gets the list of devices which should be notified of the currency change and then notifies the user using the `CoinPriceChanged` class, which we will create in the next section.\n\nLastly, we have the `getPricesForSupportedCurrencies` method which just fetches the current price of a currency. In this method, we have a debug mode that simulates the current price of a currency.\n\nTo make sure this class we just created is scheduled properly, open the `app/Console/Kernel.php` file and in the `schedule` method, add the following code to the `schedule` method:\n\n``` php\n    $schedule-\u003ejob(new \\App\\Jobs\\CheckPrices)-\u003eeveryMinute();\n```\n\nNow every time we run the command `php artisan schedule:run` all the jobs in this `schedule` method will be run. Normally, in a production environment, we will need to add the schedule command as a cronjob, however, we will run this command manually.\n\nThe next thing to do will be to create the notifiers and events. In your terminal, run the following commands:\n\n```\n    $ php artisan make:event CurrencyUpdated\n    $ php artisan make:notification CoinPriceChanged\n```\n\nThis will create a class in the `Events` and `Notifications` directories.\n\n In the [event](https://laravel.com/docs/5.6/events) class, `CurrencyUpdated` paste the following code:\n\n``` php\n    \u003c?php\n    \n    namespace App\\Events;\n    \n    use Illuminate\\Broadcasting\\Channel;\n    use Illuminate\\Queue\\SerializesModels;\n    use Illuminate\\Foundation\\Events\\Dispatchable;\n    use Illuminate\\Broadcasting\\InteractsWithSockets;\n    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n    \n    class CurrencyUpdated implements ShouldBroadcast\n    {\n        use Dispatchable, InteractsWithSockets, SerializesModels;\n    \n        public $payload;\n        \n        public function __construct($payload)\n        {\n            $this-\u003epayload = $payload;\n        }\n    \n        public function broadcastOn()\n        {\n            return new Channel('currency-update');\n        }\n        \n        public function broadcastAs()\n        {\n            return 'currency.updated';\n        }\n    }\n```\n\nIn the event class above, we have the `broadcastOn` method that specifies the Pusher channel we want to broadcast an event on. We also have the `broadcastAs` method which specifies the name of the event we want to broadcast to the channel.\n\nIn the `CoinPriceChanged` [notification](https://laravel.com/docs/5.6/notifications) class, replace the contents with the following code:\n\n``` php\n    \u003c?php\n    \n    namespace App\\Notifications;\n    \n    use App\\Device;\n    use Illuminate\\Bus\\Queueable;\n    use Neo\\PusherBeams\\PusherBeams;\n    use Neo\\PusherBeams\\PusherMessage;\n    use Illuminate\\Notifications\\Notification;\n    \n    class CoinPriceChanged extends Notification\n    {\n        use Queueable;\n        \n        private $currency;\n        private $device;\n        private $payload;\n        \n        public function __construct(string $currency, Device $device, array $payload)\n        {\n            $this-\u003ecurrency = $currency;\n            $this-\u003edevice = $device;\n            $this-\u003epayload = $payload;\n        }\n        \n        public function via($notifiable)\n        {\n            return [PusherBeams::class];\n        }\n        \n        public function toPushNotification($notifiable)\n        {\n            $currentPrice = $this-\u003epayload[strtoupper($this-\u003ecurrency)]['current'];\n            \n            $previousPrice = $this-\u003epayload[strtoupper($this-\u003ecurrency)]['current'];\n    \n            $direction = $currentPrice \u003e $previousPrice ? 'climbed' : 'dropped';\n    \n            $currentPriceFormatted = number_format($currentPrice);\n    \n            return PusherMessage::create()\n                    -\u003eiOS()\n                    -\u003esound('success')\n                    -\u003etitle(\"Price of {$this-\u003ecurrency} has {$direction}\")\n                    -\u003ebody(\"The price of {$this-\u003ecurrency} has {$direction} and is now \\${$currentPriceFormatted}\");\n        }\n        \n        public function pushNotificationInterest()\n        {\n            $uuid = strtolower(str_replace('-', '_', $this-\u003edevice-\u003euuid));\n            \n            return \"{$uuid}_{$this-\u003ecurrency}_changed\";\n        }\n    } \n```\n\nIn the class above we have the `toPushNotification` class which prepares the push notification using the Pusher Beams library. We also have the `pushNotificationInterest` method which sets the name for the interest of the push notification depending on the currency and device ID.\n\nThat’s all for the backend, now just run the command below to start the server:\n\n```\n    $ php artisan serve\n```\n\nThis will start a PHP server with our application running. Also if you need to manually trigger a currency change, run the command below:\n\n```\n    $ php artisan schedule:run\n```\n\nNow that we are done with the backend, we can create the application using Swift and Xcode.\n\n## Conclusion\n\nIn this part of the article, we have created the backend for our cryptocurrency alert application. [In the next part](https://pusher.com/tutorials/cryptocurrency-tracking-swift-laravel-part-2), we will be seeing how we can create the application that will consume the API we just created in this part.\n\nThe source code to this application is available on [GitHub](https://github.com/neoighodaro/cryptocurrency-alert-ios-app).","metaTitle":"Create a cryptocurrency tracking app - Part 1: The backend","metaDescription":"Use Swift and Laravel to create an iOS app for tracking cryptocurrency price changes. Users will receive alerts as prices go beyond set limits.  In part one, create the backend with Laravel."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1DwFvg2XSM0e0KAWSkq6MQ","type":"Entry","createdAt":"2018-07-03T09:11:22.597Z","updatedAt":"2020-06-19T10:55:11.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a cryptocurrency tracking app with push notifications using Swift and Laravel - Part 2: The iOS app","url":"cryptocurrency-tracking-swift-laravel-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/cryptocurrency-alert-ios-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}}],"reviewDate":"2018-07-02","description":"Build a cryptocurrency tracking app featuring push notifications. Use Swift to create an iOS app, powered by a Laravel backend. User will receive alerts when currency prices change. In part two, create the iOS app.","prerequisite":"You will need the following installed on your machine: Xcode, the Laravel CLI, SQLite and Cocoapods. Familiarity with the Xcode IDE will be helpful. You should have completed part one of the series.","content":"In the [first part](http://http://https://pusher.com/tutorials/cryptocurrency-tracking-swift-laravel-part-1) of this article, we started developing our cryptocurrency alert application. We developed the backend of the application that will power the iOS application. As it stands, our backend application can return settings for a device based on its UUID, save the settings for a device based on its UUID and also it can figure out what devices to send push notifications to when the currencies update.\n\nIn this part, we will focus on creating the iOS application using Swift and Xcode.\n\n## Prerequisites\n\nTo follow along you need the following requirements:\n\n\n- Completed the [part one](http://#) of this article.\n- [Xcode](https://developer.apple.com/xcode) installed on your machine.\n- Knowledge of the Xcode IDE.\n- Basic knowledge using the [Laravel framework](https://laravel.com/).\n- Basic knowledge of the [Swift programming language](http://developer.apple.com/swift).\n- [Laravel CLI](https://laravel.com/docs/5.6/installation) installed on your machine.\n- SQLite installed on your machine. [Installation guide](http://www.sqlitetutorial.net).\n- [Cocoapods](https://guides.cocoapods.org/using/getting-started.html) installed on your machine.\n- [Pusher Beams](https://pusher.com/beams) and [Channels](https://pusher.com/channels) application.\n\n\n## What we will be building\n\nWe already started out by building the backend of the application using Laravel. So next, we will build the iOS application using Swift. If you want to test the push notifications then you will need to run the application on a live device.\n\n### How the client application will work\n\nFor the client app, the iOS application, we will create a simple list that will display the available currencies and the current prices to the dollar. Whenever the price of the cryptocurrency changes, we will trigger an event using Pusher Channels so the prices are updated.\n\nFrom the application, you will be able to set a minimum and maximum price change when you want to be alerted. For instance, you can configure the application to send a push notification to the application when the price of one Etherium (ETH) goes below $500. You can also configure the application to receive a notification when the price of Bitcoin goes above $5000.\n\n### How the application will look\n\nWhen we are done with the application, here's how the application will look:\n\n![ios-cryptocurrency-part-1-demo](//images.ctfassets.net/1es3ne0caaid/1K08NTSdaoIIqWQ2YAyOqo/4efdb4fa01a2ee599bf5b71561a717a4/ios-cryptocurrency-part-1-demo.gif)\n\nLet’s get started.\n\n\n## Setting up your client application\n\nLaunch Xcode and click **Create a new Xcode project**. Select **Single View App** and click **Next**. Enter your **Product Name**, we will call our project *cryptoalat*, and select **Swift** from the **Language** options. You can also change any other detail you wish to on the screen then click **Next**.\n\n### Installing dependencies\n\nNow you have your Xcode project. Close Xcode and open a terminal window. `cd` to the iOS project directory in terminal and run the command below to create a Podfile:\n\n```\n    $ pod init\n```\n\n\u003e The Podfile is a specification that describes the dependencies of the targets of one or more Xcode projects. The file should simply be named Podfile. All the examples in the guides are based on CocoaPods version 1.0 and onwards. - [Cocoapods Guides](https://guides.cocoapods.org/using/the-podfile.html)\n\nThis will generate a new file called `Podfile` in the root of your project. Open this file in any editor and update the file as seen below:\n\n```\n    // File: Podfile\n    platform :ios, '11.0'\n    \n    target 'cryptoalat' do\n      use_frameworks!\n    \n      pod 'Alamofire', '~\u003e 4.7.2'\n      pod 'PushNotifications', '~\u003e 0.10.8'\n      pod 'PusherSwift', '~\u003e 6.1.0'\n      pod 'NotificationBannerSwift', '~\u003e 1.6.3'\n    end\n```\n\n\u003e If you used a project name other than cryptoalat, then change it in the Podfile to match your project’s target name. \n\nGo to terminal and run the command below to install your dependencies:\n\n```\n    $ pod install\n```\n\nWhen the installation is complete, you will have a  `*.xcworkspace` file in the root of your project. Open this file in Xcode and let’s start developing our cryptocurrency alert application.\n\n\n## Building the iOS application\n\n### Creating our storyboard\n\nThe first thing we need to do is design our storyboard for the application. This is what we want the storyboard to look like when we are done.\n\n![ios-cryptocurrency-part-2-storyboard](//images.ctfassets.net/1es3ne0caaid/3CgFeKuZnyMkQ0Kseaw2Gk/9e4a0a12e87fe5685f30c563d9f3ea8d/ios-cryptocurrency-part-2-storyboard.png)\n\nOpen the `Main.storyboard` file and design as seen above.\n\nAbove we have three scenes. The first scene, which is the entry point, is the launch scene. We then draw a manual segue with an identifier called **Main**. Then we set the segue **Kind** to **Present Modally**. This will present the next scene which is a navigation view controller. Navigation controllers already have an attached root view controller by default.\n\nWe will use this attached view controller, which is a `TableViewController`, as the main view for our application. It’ll list the available currencies and show us a text field that allows us to change the setting for that currency when it is tapped.\n\nOn the third scene, we set the reuse identifier of the cells to **coin** and we drag two labels to the prototype cell. The first label will be for the coin name and the second label will be for the price.\n\nNow that we have the scenes, let’s create some controllers and view classes and connect them to our storyboard scenes.\n\n### Creating your controllers\n\nIn Xcode, create a new class `LaunchViewController` and paste the contents of the file below into it:\n\n``` swift\n    import UIKit\n    \n    class LaunchViewController: UIViewController {\n        \n        override func viewDidAppear(_ animated: Bool) {\n            super.viewDidAppear(animated)\n            \n            SettingsService.shared.loadSettings {\n                self.routeToMainController()\n            }\n        }\n    \n        fileprivate func routeToMainController() {\n            performSegue(withIdentifier: \"Main\", sender: self)\n        }\n    }\n```\n\n\u003e Set the controller as the custom class for the first scene in the `Main.storyboard` file.\n\nIn the code, we load the settings using a `SettingsService` class we will create later. When the settings are loaded for the device, we then call the `routeToMainController` method, which routes the application to the main controller using the **Main** segue we created earlier.\n\nThe next controller we will be creating will be the `CoinsTableViewController`. This will be the controller that will be tied to the third scene which is the main scene. \n\nCreate the `CoinsTableViewController` and replace the contents with the following code;\n\n``` swift\n    import UIKit\n    import PusherSwift\n    import NotificationBannerSwift\n    \n    struct Coin {\n        let name: String\n        let rate: Float\n    }\n    \n    class CoinsTableViewController: UITableViewController {\n    \n        var coins: [Coin] = []\n        \n        override func viewDidLoad() {\n            super.viewDidLoad()\n        }\n        \n        override func numberOfSections(in tableView: UITableView) -\u003e Int {\n            return 1\n        }\n    \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return coins.count\n        }\n    \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            let coin = coins[indexPath.row]\n            let cell = tableView.dequeueReusableCell(withIdentifier: \"coin\", for: indexPath) as! CoinTableViewCell\n    \n            cell.name.text = \"1 \\(coin.name) =\"\n            cell.amount.text = \"$\\(String(coin.rate))\"\n    \n            return cell\n        }\n    }\n```\n\n\u003e Set the controller as the custom class for the first scene in the `Main.storyboard` file.\n\nAbove we have defined the `Coin` struct and it has a `name` and `rate` property. We have the controller which we define the `coins` property as an array of `Coin`s. We then have some boilerplate code that comes with creating a table view controller.\n\nThe `numberOfSections` method specifies how many sections the table will have. In the first `tableView` method, we return the number of `coins` available and in the second `tableView` method, we define how we want each row to be handled.\n\n### Creating other supporting classes\n\nIf you noticed in the code above, we referenced a `CoinTableViewCell` as the class for each row in the last `tableView` method. Let’s create that.\n\nCreate a `CoinTableViewCell` class and paste the following code into it:\n\n``` swift\n    class CoinTableViewCell: UITableViewCell {\n        @IBOutlet weak var name: UILabel!    \n        @IBOutlet weak var amount: UILabel!\n    }\n```\n\nOpen the `Main.storyboard` file and set the class as the custom class for the prototype cell in the third scene of the `Main.storyboard` file. When you have set the class, connect the `@IBOutlet`s as specified in the cell class above.\n\nThe next class we need to create is the `SettingsService`. This class will be responsible for updating and fetching the settings for the device.\n\nCreate a new `SettingsService` class and replace the contents with the following code:\n\n``` swift\n    import Foundation\n    import Alamofire\n    import NotificationBannerSwift\n    \n    class SettingsService {\n        static let key = \"CryptoAlat\"\n        static let shared = SettingsService()\n        \n        var settings: Settings? {\n            get {\n                return self.getCachedSettings()\n            }\n            set(settings) {\n                if let settings = settings {\n                    self.updateCachedSettings(settings)\n                }\n            }\n        }\n        \n        private init() {}\n        \n        func loadSettings(completion: @escaping() -\u003e Void) {\n            fetchRemoteSettings { settings in\n                guard let settings = settings else {\n                    return self.saveSettings(self.defaultSettings()) { _ in\n                        completion()\n                    }\n                }\n                \n                self.updateCachedSettings(settings)\n                completion()\n            }\n        }\n        \n        fileprivate func defaultSettings() -\u003e Settings {\n            return Settings(\n                btc_min_notify: 0, \n                btc_max_notify: 0, \n                eth_min_notify: 0, \n                eth_max_notify: 0\n            )\n        }\n        \n        func saveSettings(_ settings: Settings, completion: @escaping(Bool) -\u003e Void) {\n            updateRemoteSettings(settings, completion: { saved in\n                if saved {\n                    self.updateCachedSettings(settings)\n                }\n                \n                completion(saved)\n            })\n        }\n        \n        fileprivate func fetchRemoteSettings(completion: @escaping (Settings?) -\u003e Void) {\n            guard let deviceID = AppConstants.deviceIDFormatted else {\n                return completion(nil)\n            }\n    \n            let url = \"\\(AppConstants.API_URL)?u=\\(deviceID)\"\n            Alamofire.request(url).validate().responseJSON { resp in\n                if let data = resp.data, resp.result.isSuccess {\n                    let decoder = JSONDecoder()\n                    if let settings = try? decoder.decode(Settings.self, from: data) {\n                        return completion(settings)\n                    }\n                }\n                \n                completion(nil)\n            }\n        }\n        \n        fileprivate func updateRemoteSettings(_ settings: Settings, completion: @escaping(Bool) -\u003e Void) {\n            guard let deviceID = AppConstants.deviceIDFormatted else {\n                return completion(false)\n            }\n            \n            let params = settings.toParams()\n            let url = \"\\(AppConstants.API_URL)?u=\\(deviceID)\"\n            Alamofire.request(url, method: .post, parameters: params).validate().responseJSON { resp in\n                guard resp.result.isSuccess, let res = resp.result.value as? [String: String] else {\n                    return StatusBarNotificationBanner(title: \"Failed to update settings.\", style: .danger).show()\n                }\n                \n                completion((res[\"status\"] == \"success\"))\n            }\n        }\n        \n        fileprivate func updateCachedSettings(_ settings: Settings) {\n            if let encodedSettings = try? JSONEncoder().encode(settings) {\n                UserDefaults.standard.set(encodedSettings, forKey: SettingsService.key)\n            }\n        }\n        \n        fileprivate func getCachedSettings() -\u003e Settings? {\n            let defaults = UserDefaults.standard\n            if let data = defaults.object(forKey: SettingsService.key) as? Data {\n                let decoder = JSONDecoder()\n                if let decodedSettings = try? decoder.decode(Settings.self, from: data) {\n                    return decodedSettings\n                }\n            }\n            \n            return nil\n        }\n    }\n```\n\nAbove we have the `SettingsService`. The first method `loadSettings` loads the settings from the API and then saves it locally. If there is no setting remotely, it calls the `defaultSettings` method and saves the response to the API.\n\nThe `saveSettings` method saves the `Settings` remotely using `updateRemoteSettings` and then locally using `updateCachedSettings`. The `fetchRemoteSettings` gets the settings from the API and decodes the response using the [Swift decodable API](https://blog.pusher.com/swift-4-decoding-json-codable/).\n\nNext, let’s define the `Settings` struct and have it extend `Codable`. In the same file for the `SettingsService`, add this above the `SettingsService` class definition:\n\n``` swift\n    struct Settings: Codable {\n        var btc_min_notify: Int?\n        var btc_max_notify: Int?\n        var eth_min_notify: Int?\n        var eth_max_notify: Int?\n        \n        func toParams() -\u003e Parameters {\n            var params: Parameters = [:]\n            \n            if let btcMin = btc_min_notify { params[\"btc_min_notify\"] = btcMin }\n            if let btcMax = btc_max_notify { params[\"btc_max_notify\"] = btcMax }\n            if let ethMin = eth_min_notify { params[\"eth_min_notify\"] = ethMin }\n            if let ethMax = eth_max_notify { params[\"eth_max_notify\"] = ethMax }\n    \n            return params\n        }\n    }\n```\n\nAbove we have a simple `Settings` struct that conforms to `Codable`. We also have a `toParams` method that converts the properties to a `Parameters` type so we can use it with [Alamofire](https://github.com/Alamofire/Alamofire) when making requests.\n\nOne last class we need to create is  `AppConstants`. We will use this class to keep all the data that we expect to remain constant and unchanged throughout the lifetime of the application.\n\nCreate a `AppConstants` file and paste the following code:\n\n``` swift\n    import UIKit\n    \n    struct AppConstants {\n        static let API_URL = \"http://127.0.0.1:8000/api/settings\"\n        static let deviceID = UIDevice.current.identifierForVendor?.uuidString\n        static let deviceIDFormatted = AppConstants.deviceID?.replacingOccurrences(of: \"-\", with: \"_\").lowercased()\n        static let PUSHER_INSTANCE_ID = \"PUSHER_BEAMS_INSTANCE_ID\"\n        static let PUSHER_APP_KEY = \"PUSHER_APP_KEY\"\n        static let PUSHER_APP_CLUSTER = \"PUSHER_APP_CLUSTER\"\n    }\n```\n\n\u003e Replace the `PUSHER_*` keys with the values gotten from the Pusher Channels and Beams dashboard.\n\n### Updating the settings for the device\n\nNow that we have defined the settings service, let’s update our controller so the user can set the minimum and maximum prices for each currency.\n\nOpen the `CoinsTableViewController` class and add the following method:\n\n``` swift\n    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n        let coin = coins[indexPath.row]\n    \n        var minTextField: UITextField?\n        var maxTextField: UITextField?\n    \n        let title = \"Manage \\(coin.name) alerts\"\n        let message = \"Notification will be sent to you when price exceeds or goes below minimum and maximum price. Set to zero to turn off notification.\"\n    \n        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    \n        alert.addTextField { textfield in\n            minTextField = textfield\n            textfield.placeholder = \"Alert when price is below\"\n        }\n    \n        alert.addTextField { textfield in\n            maxTextField = textfield\n            textfield.placeholder = \"Alert when price is above\"\n        }\n    \n        alert.addAction(UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil))\n    \n        alert.addAction(UIAlertAction(title: \"Save\", style: .default, handler: { action in\n            guard let minPrice = minTextField?.text, let maxPrice = maxTextField?.text else {\n                return StatusBarNotificationBanner(title: \"Invalid min or max price\", style: .danger).show()\n            }\n    \n            var btcMin: Int?, btcMax: Int?, ethMin: Int?, ethMax: Int?\n    \n            switch coin.name {\n            case \"BTC\":\n                btcMin = Int(minPrice)\n                btcMax = Int(maxPrice)\n            case \"ETH\":\n                ethMin = Int(minPrice)\n                ethMax = Int(maxPrice)\n            default:\n                return\n            }\n    \n            let settings = Settings(\n                btc_min_notify: btcMin,\n                btc_max_notify: btcMax,\n                eth_min_notify: ethMin,\n                eth_max_notify: ethMax\n            )\n    \n            SettingsService.shared.saveSettings(settings, completion: { saved in\n                if saved {\n                    StatusBarNotificationBanner(title: \"Saved successfully\").show()\n                }\n            })\n        }))\n    \n        present(alert, animated: true, completion: nil)\n    }\n```\n\nThe method above is automatically called when a row is selected. In this method, we display a `UIAlertController` with two text fields for the minimum price and the maximum price. When the prices are submitted, the `SettingsService`  we created earlier takes care of updating the values both locally and remotely.\n\n### Adding realtime cryptocurrency update support\n\nOpen the `CoinsTableViewController` and add the `pusher` property to the class as seen below:\n\n``` swift\n    var pusher: Pusher!\n```\n\nThen replace the `viewDidLoad` method with the following code:\n\n``` swift\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    \n        pusher = Pusher(\n            key: AppConstants.PUSHER_APP_KEY, \n            options: PusherClientOptions(host: .cluster(AppConstants.PUSHER_APP_CLUSTER))\n        )\n    \n        let channel = pusher.subscribe(\"currency-update\")\n    \n        let _ = channel.bind(eventName: \"currency.updated\") { data in\n            if let data = data as? [String: [String: [String: Float]]] {\n                guard let payload = data[\"payload\"] else { return }\n    \n                self.coins = []\n    \n                for (coin, deets) in payload {\n                    guard let currentPrice = deets[\"current\"] else { return }\n                    self.coins.append(Coin(name: coin, rate: currentPrice))\n                }\n    \n                Dispatch.main.async {\n                    self.tableView.reloadData()\n                }\n            }\n        }\n    \n        pusher.connect()\n    }\n```\n\nIn the code above, we are using the [Pusher Swift SDK](https://pusher.com/docs/ios_quick_start) to subscribe to our `currency-update` Pusher Channel. We then subscribe to the `currency.updated` event on that channel. Whenever that event is triggered, we refresh the price of the cryptocurrency in realtime.\n\n### Adding push notifications to our iOS new application\n\nTo add push notification support, open the `AppDelegate` class and replace the contents with the following:\n\n``` swift\n    import UIKit\n    import PushNotifications\n    \n    @UIApplicationMain\n    class AppDelegate: UIResponder, UIApplicationDelegate {\n    \n        var window: UIWindow?\n        \n        func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -\u003e Bool {\n            PushNotifications.shared.start(instanceId: AppConstants.PUSHER_INSTANCE_ID)\n            PushNotifications.shared.registerForRemoteNotifications()\n            return true\n        }\n    \n        func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n            PushNotifications.shared.registerDeviceToken(deviceToken) {\n                if let deviceID = AppConstants.deviceIDFormatted {\n                    try? PushNotifications.shared.subscribe(interest: \"\\(deviceID)_eth_changed\")\n                    try? PushNotifications.shared.subscribe(interest: \"\\(deviceID)_btc_changed\")\n                }\n            }\n        }\n    }\n```\n\nIn the class above, we use the [Pusher Beams Swift SDK](https://docs.pusher.com/push-notifications/reference/ios) to register the device for push notifications. We then subscribe to the `*_eth_changed` and `*_btc_changed` interests, where `*` is the device’s unique UUID.\n\nNow that we have completed the logic for the application, let’s enable push notifications on the application in Xcode. \n\nIn the project navigator, select your project, and click on the **Capabilities** tab. [Enable Push Notifications](http://help.apple.com/xcode/mac/current/#/devdfd3d04a1) by turning the switch ON.\n\n![ios-cryptocurrency-part-2-enable-push](//images.ctfassets.net/1es3ne0caaid/7wLtGQ4Y00EUWiKgw6oQoE/8eb22b60c3271e6d0e47646c6423a7ad/ios-cryptocurrency-part-2-enable-push.png)\n\nThis will create an entitlements file in the root of your project. With that, you have provisioned your application to fully receive push notifications.\n\n### Allowing our application to connect locally\n\nIf you are going to be testing the app’s backend using a local server, then there is one last thing we need to do. Open the `info.plist` file and add an entry to the `plist` file to allow connection to our local server:\n\n![ios-cryptocurrency-part-2-local-connection](//images.ctfassets.net/1es3ne0caaid/5SXadC36VOcMs22Ooayw44/a7272c2b7126b3195878e1bcfad3e57b/ios-cryptocurrency-part-2-local-connection.png)\n\nThat’s all. We can run our application. However, **remember that to demo the push notifications, you will need an actual iOS device as simulators cannot receive push notifications.** If you are using a physical device, you’ll need to expose your local API using [Ngrok](https://ngrok.com) and then change the `API_URL`  **In** `AppConstants`.\n\nAnytime you want to update the currency prices, run the command below manually in your Laravel application:\n\n```\n    $ php artisan schedule:run\n```\n\nHere is a screen recording of the application in action:\n\n![ios-cryptocurrency-part-1-demo](//images.ctfassets.net/1es3ne0caaid/1K08NTSdaoIIqWQ2YAyOqo/4efdb4fa01a2ee599bf5b71561a717a4/ios-cryptocurrency-part-1-demo.gif)\n\n\n## Conclusion\n\nIn this article, we have been able to see how easy it is to create a cryptocurrency alert website using Laravel, Swift, Pusher Channels and Pusher Beams. The source code to the application built in this article is available on [GitHub](https://github.com/neoighodaro/cryptocurrency-alert-ios-app).","metaTitle":"Create a cryptocurrency tracking app - Part 2: The iOS app","metaDescription":"Use Swift and Laravel to create an iOS app for tracking cryptocurrency price changes. Users will receive alerts as prices go beyond set limits.  In part two, create the iOS app."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"FeIJHByAhMWYaGyuIGWKO","type":"Entry","createdAt":"2018-06-07T16:31:28.809Z","updatedAt":"2018-06-11T12:43:52.478Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a carpooling app with React Native - Part 1: Setting up the server","url":"carpooling-react-native-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/Ridesharer","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-06-07","description":"This two-part series uses React Native, Docker and several Google services (Maps, Places, Directions and Geocoding) to create a carpooling app. In part one you will set up the backend.","prerequisite":"You will need a React Native development environment, Docker and Docker Compose installed on your machine. This tutorial assumes you know how to install and configure these on your own system. You will need experience with React Native and Docker.","content":"In this series, we’re going to create a carpooling app with React Native. This will be a two-part series showing you how to create a full-stack React Native app which uses PHP as the backend. The first part covers setting up the backend, while the [second part](https://pusher.com/tutorials/carpooling-react-native-part-2) will cover building the frontend and running the app.\n\nI’ve previously written a similar tutorial: [Build a ride hailing app with React Native](https://pusher.com/tutorials/ride-hailing-react-native). The main difference between the two is that the first one shows how to build an app similar to the following:\n\n- [Grab](https://www.grab.com)\n- [Uber](https://www.uber.com) \n- [Lyft](https://www.lyft.com/)\n\nThe main idea of the above apps is to provide a ride-hailing service to users. This is traditionally called “Ridesharing”.\n\nWhile this tutorial will show you how to build an app similar to these:\n\n- [Wunder Carpool](https://www.wunder.org/)\n- [Grab Share](https://www.grab.com/ph/share/)\n- [Waze Carpool](https://www.waze.com/carpool)\n\nThe main idea of the above apps is for users to share their ride with people who are going the same route as them. This is traditionally called “Carpooling”.\n\n## Prerequisites\n\nThis tutorial requires the following to be already set up on your machine:\n\n- [**React Native development environment**](https://facebook.github.io/react-native/) - the series assumes that you already have set up all the software needed to create and run React Native apps. The series will show you how to create the app for both Android and iOS devices. We will use the `react-native init`  command to create a React Native project. You can either have both Android Studio and Xcode set up on your machine or just one of them. Additionally, you can set up [Genymotion](https://www.genymotion.com/fun-zone/) so you can easily change your in-app location. Be sure to check out the [setup instructions](https://facebook.github.io/react-native/docs/getting-started.html) if you haven’t setup your machine already. \n- [**Docker**](https://www.docker.com/) and [**Docker Compose**](https://docs.docker.com/compose/) - the series assumes that you already have [Docker](https://docs.docker.com/install/) and [Docker Compose](https://docs.docker.com/compose/install/) running on your machine. We will be using those to easily setup a server with all the software that we need. This also assures that we both have the same environment. \n- [**Git**](https://git-scm.com/) - used for cloning repos.\n\nKnowing the basics of creating a React Native app is required. This means you have to know how to run the app on an emulator or your device. You should also have a good grasp of basic React concepts such as props, refs, state, and the component lifecycle.\n\nKnowledge of [Docker](https://www.docker.com/) is required. You should know how to setup Docker on your operating system and setup a containers from scratch. Note that Docker has poor support for Windows 7 and 8. So if you’re using any of those systems, you might have difficulty in following this tutorial.\n\nKnowledge of the following will be helpful, but not required. I’ll try to cover as much detail as I can, so readers with zero knowledge of the following will still be able to follow along:\n\n\n- [PHP](http://php.net/)\n- [Elasticsearch](https://www.elastic.co/) \n- [Pusher Channels](https://pusher.com/)\n\nLastly, the tutorial assumes that you know your way around the operating system that you’re using. Knowing how to install new software, execute commands in the terminal is required.\n\n\n## What we’ll be building\n\nBefore we proceed, it’s important to know what exactly we’ll be building. The app will have two modes: \n\n\n- **sharing** - this allows the user to share their ride so that others can make a request to ride with them. For the rest of the series, I’ll be referring to the users who uses this feature as the “rider”.\n- **hiking** - this allows the user to make a request to ride with someone. I’ll be referring to these users as “hikers”.\n\nBelow is the entire flow of the app. I’m using Genymotion emulator for the user that plays the rider, and iPhone for the hiker. This is so I can emulate a moving vehicle by using Genymotion’s GPS emulation tool: \n\n![carpooling-react-native-gps-emulation](//images.ctfassets.net/1es3ne0caaid/4H7d0cHWj6qC4qgqQU0moo/04c6b267d3a8582123a7b18e985fc377/carpooling-react-native-gps-emulation.png)\n\nI can simply click around the map so that React Native’s Geolocation is triggered. This then allows me to use Pusher Channels to send a message to the hiker so that they’re informed of the rider’s current location.\n\nNow, let’s proceed with the app flow:\n\n\n1. First, the rider enters their username and clicks **Share a ride**:\n\n![carpooling-react-native-share-a-ride](//images.ctfassets.net/1es3ne0caaid/6I48i2AQrmyiuoICqiyiIY/1bceeb357948e5b31dbc13299eff5ba4/carpooling-react-native-share-a-ride.png)\n\n2. Rider types in where they want to go and selects it from the drop-down. Google Places Autocomplete makes this feature work:\n\n![carpooling-react-native-rider-searches](//images.ctfassets.net/1es3ne0caaid/4iCq1toOb6eoOisOyi24CM/c1c6fa071340a13a7f390b4a5cc55264/carpooling-react-native-rider-searches.png)\n\n3. After selecting a place, the app plots the most desirable route from the origin to the destination. The red marker being the origin, and the blue one being the destination:\n\n![carpooling-react-native-route-finder](//images.ctfassets.net/1es3ne0caaid/4KNVRbBcNicEaasWa0s0yA/7d1c5d286ac1965222b50217c98e22ed/carpooling-react-native-route-finder.png)\n\nIf the rider wants to pick another place, they can click on the **Reset** button. This will empty the text field for entering the place as well as remove the markers and the route from the map.\n\n\n4. At this point, the rider clicks on the **Share Ride** button. This triggers a request to the server which then saves all the relevant data to an Elasticsearch index. This allows hikers to search for them later on. \n\n\n  To keep the route information updated, we use React Native’s Geolocation feature to watch the rider’s current location. Every time their location changes, the Elasticsearch index is also updated:\n\n![carpooling-react-native-driver-route-stored](//images.ctfassets.net/1es3ne0caaid/3nLm7Z3gik8s64IO2YgwEw/d01bb5f743921cff55786e3566d53300/carpooling-react-native-driver-route-stored.png)\n\n5. Now let’s take a look at the hiker’s side of things. First, the hiker enters their username and clicks on **Hitch a ride**:\n\n![carpooling-react-native-hitch-a-ride](//images.ctfassets.net/1es3ne0caaid/5UKI0GRYHKSIGkksQs2Uoa/8c9eb565dec00189cad36681c38a4859/carpooling-react-native-hitch-a-ride.jpeg)\n\n6. Next, the hiker searches for their destination. To keep things simple, let’s pick the same place where the rider is going:\n\n![carpooling-react-native-hitch-destination-search](//images.ctfassets.net/1es3ne0caaid/kLAUXtOhZm0Im4uy8cCUo/805ca4b280e726510d47d4ccf6a70a83/carpooling-react-native-hitch-destination-search.jpeg)\n\n7. Once again, the app plots the most desirable route from the hiker’s origin to their destination:\n\n![carpooling-react-native-hitch-route](//images.ctfassets.net/1es3ne0caaid/4F5S0WK7niumMOsoMuOqWy/4133360090d2e5727b69347511c70ac5/carpooling-react-native-hitch-route.jpeg)\n\n8. The hiker then clicks on the **Search Ride** button. At this point, the app makes a request to the server to look for riders matching the route added by the hiker. The rider should now receive the request. Pusher Channels makes this feature work:\n\n![carpooling-react-native-request-to-driver](//images.ctfassets.net/1es3ne0caaid/3Wbxnk3wLeKE06YG2McKk4/442aaa6ce3125eeb37d039efb9894238/carpooling-react-native-request-to-driver.png)\n\n9. Once the rider accepts the request, the hiker receives an alert that the rider accepted their request:\n\n![carpooling-react-native-ride-accepted](//images.ctfassets.net/1es3ne0caaid/2zBc6OM5juqIKkgS8scKe4/bcc09e370613da0900d736ca6c33d81e/carpooling-react-native-ride-accepted.jpeg)\n\n10. At this point, the hiker’s map will show rider’s current location. React Native’s Geolocation feature and Pusher Channels make this work:\n\n![carpooling-react-native-hitch-location](//images.ctfassets.net/1es3ne0caaid/6mZVzKfJ5Yq0yYOuwmSckW/0249c980ad672477b7039027ce60b4d6/carpooling-react-native-hitch-location.jpeg)\n\nAt the same time, the rider’s map will show their current location on the map. This is where you can use Genymotion’s GPS emulation tool to update the rider’s location:\n\n![carpooling-react-native-current-location](//images.ctfassets.net/1es3ne0caaid/2HtFr7jCfYC4oYcaEiWGc0/df3ec3cf2e0215cf8515b291fb29fcbd/carpooling-react-native-current-location.png)\n\n11. Once the rider is near the hiker, both users will receive a notification informing them that they’re already near each other:\n\n![carpooling-react-native-proximity](//images.ctfassets.net/1es3ne0caaid/66En3l4x3ieKC8SKM2o6Gs/d13457e68814b3820e026c1319824083/carpooling-react-native-proximity.png)\n\n12. Once they are within 20 meters of each other, the app’s UI resets and it goes back to the login screen:\n\n![carpooling-react-native-reset](//images.ctfassets.net/1es3ne0caaid/6xxnIcAg00a4gKuO222q0Q/d35e6865ad8c3078147f2c4d250353b7/carpooling-react-native-reset.png)\n\nWe will use the following technologies to build the app:\n\n- **Elasticsearch** - for saving and searching for routes.\n- **Pusher Channels** - for establishing realtime communication between the rider and the hiker so they are kept updated where each other is.\n- **PHP** - for saving and searching documents from the Elasticsearch index.\n- **Google Maps** - for showing maps inside the app.\n- **Google Places Autocomplete** - for searching for places.\n- **Google Directions API** - for getting the directions between the origin and the destination of the riders and hikers.\n- [**Geometry Library Google Maps API V3**](https://github.com/alexpechkarev/geometry-library) - for determining whether a specific coordinate lies within a set of coordinates. \n\nThe full source code of the app is available on this [Github repo](https://github.com/anchetaWern/Ridesharer). \n\n\n## Setting up a Pusher app\n\nWe’ll need to create a Pusher app to use Pusher Channels. Start by creating a [Pusher account](https://pusher.com/) if you haven’t done so already.\n\nOnce you have an account, go to your [dashboard](https://dashboard.pusher.com/) and click on **Channels apps** on the left side of the screen, then click on **Create Channels apps**. Enter the name of your app and select a desirable cluster, preferably one that’s nearest to your current location:\n\n![carpooling-react-native-create-channels-app](//images.ctfassets.net/1es3ne0caaid/4uecV7cGQokq6MAQEgWeoe/b31b3ade12a22747326d7f963c95bafd/carpooling-react-native-create-channels-app.png)\n\nOnce the app is created, click on the **App Settings** tab and enable client events:\n\n![carpooling-react-native-enable-client-events](//images.ctfassets.net/1es3ne0caaid/4t9p6MLB7aIgOGKs0W8Qys/323dbfc484d5ef2bb93d9e11e4fb31b7/carpooling-react-native-enable-client-events.png)\n\nThis will allow us to trigger events right from the app itself. That way, the only thing that we need to do on the server is to authenticate requests. Don’t forget to click on **Update** once you’re done.\n\nThe API keys which we’ll be using later are on the **App keys** tab.\n\n## Setting up a Google project\n\nWe will be using three of Google’s services to build this app:\n\n\n- Google Maps\n- Google Places\n- Google Directions\n\nThis requires us to create a Google project at [console.developers.google.com](https://console.developers.google.com) so we can use those services. \n\nOn your dashboard, click on the **Select a project** dropdown then click on **Create project**. Enter the name of the project and click **Create**:\n\n![carpooling-react-native-google-console-create-project](//images.ctfassets.net/1es3ne0caaid/5ODzOiU9EWiYy8awiSoigg/9de826dd47fc6d1fc527e2e3167ddf87/carpooling-react-native-google-console-create-project.png)\n\nOnce the project is created, click on **Library** on the left side. Look for the following APIs and enable them:\n\n- Maps SDK for Android\n- Maps SDK for iOS - note that if you don’t enable this, and followed the [installation instructions for iOS](https://github.com/react-community/react-native-maps/blob/master/docs/installation.md#if-you-want-to-use-google-maps), Apple Maps will be used instead.\n- Places SDK for Android\n- Places SDK for iOS\n- Directions API\n- Geocoding API\n\nOnce those are enabled, click on the **Credentials** menu on the left side, then click on the **Create credentials** button and select **API key**:\n\n![carpooling-react-native-google-console-credentials](//images.ctfassets.net/1es3ne0caaid/3D0rkMkRXyYeYCY2Yy6yUo/7e422484fbb0d294bfe47c2c39f810c4/carpooling-react-native-google-console-credentials.png)\n\nThat will generate an API key which allows you to use the services mentioned above. Take note of the key as we will be using it later. \n\nYou can choose to restrict access so not just anybody can use your key once they get access to it. To avoid problems while developing the app, I recommend to just leave it for now.\n\n## Setting up Laradock\n\nLaradock is a full PHP development environment for Docker. It allows us to easily set up the development server. Go through the following steps to setup Laradock.\n\n### Configuring the environment\n\n1. Clone the official repo. This will create a `laradock` directory:\n\n```\n    git clone https://github.com/laradock/laradock.git --branch v7.0.0\n```\n\nNote that in the above command we’re cloning a specific release tag ([v7.0.0](https://github.com/laradock/laradock/tree/v7.0.0)). This is to make sure we’re both using the same version of Laradock. This helps you avoid issues that has to do with different configuration and software versions installed by Laradock. You can choose to clone the most recent version, but you’ll have to handle the compatibility issues on your own.\n\n2. Navigate inside the `laradock` directory and create a copy of the sample `.env` file:\n\n```\n    cd laradock\n    cp env-example .env\n```\n\n3. Open the `.env` file on your text editor and replace the existing config with the following:\n\nThis is the directory where your projects are saved. Go ahead and create a `laradock-projects` folder outside the `laradock` folder. Then inside the `laradock-projects`, create a new folder named `ridesharer`. This is where we will add the server code:\n\n```\n    APP_CODE_PATH_HOST=../laradock-projects\n```\n\nThis is the Elasticsearch port configuration. The one below is actually the default one so in most cases, you don’t really need to change anything. But if you have a different configuration, or if you want to use a different port because an existing application is already using these ports then this is a good place to change them:\n\n```\n    ELASTICSEARCH_HOST_HTTP_PORT=9200\n    ELASTICSEARCH_HOST_TRANSPORT_PORT=9300\n```\n\nThis is the path where the Apache site configuration is located. We will be updating it at a later step. This is just to let you know that this is where it’s located:\n\n```\n    APACHE_SITES_PATH=./apache2/sites\n```\n\n### Adding a virtual host\n\n\n1. Open the `laradock/apache2/sites/default.apache.conf` file and add a new virtual host (you can also replace the existing one if you’re not using it):\n\n```\n    \u003cVirtualHost *:80\u003e\n      ServerName ridesharer.loc\n      DocumentRoot /var/www/ridesharer\n      Options Indexes FollowSymLinks\n    \n      \u003cDirectory \"/var/www/ridesharer\"\u003e\n        AllowOverride All\n        \u003cIfVersion \u003c 2.4\u003e\n          Allow from all\n        \u003c/IfVersion\u003e\n        \u003cIfVersion \u003e= 2.4\u003e\n          Require all granted\n        \u003c/IfVersion\u003e\n      \u003c/Directory\u003e\n    \n    \u003c/VirtualHost\u003e\n```\n\nThe code above tells Apache to serve the files inside the `/var/www/ridesharer` directory when `http://ridesharer.loc` is accessed on the browser. If the directory has `index.php` file in it, then it will get served by default (if the filename is not specified).\n\nThe `/var/www` directory maps to the application directory you’ve specified earlier on the `.env` file:\n\n```\n    APP_CODE_PATH_HOST=../laradock-projects\n```\n\nThis means that `/var/www/ridesharer` is equivalent to `/laradock-projects/ridesharer`.\n\nThis is why we’ve created a `ridesharer` folder inside the `laradock-projects` directory earlier. Which means that any file you create inside the `ridesharer` folder will get served.\n\n\n2. Update the operating system’s `hosts` file to point out `ridesharer.loc` to `localhost`:\n\n```\n    127.0.0.1     ridesharer.loc\n```\n\nThis tells the browser to not go looking anywhere else on the internet when `http://ridesharer.loc` is accessed. Instead, it will just look in the localhost.\n\n\n### Configuring Elasticsearch\n\nOpen the `docker-compose.yml` file and search for `ElasticSearch Container`. This will show you the Elasticsearch configuration:\n\n``` yaml\n    ### ElasticSearch ########################################\n        elasticsearch:\n          build: ./elasticsearch\n          volumes:\n            - elasticsearch:/usr/share/elasticsearch/data\n          environment:\n            - cluster.name=laradock-cluster\n            - bootstrap.memory_lock=true\n            - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n          ulimits:\n            memlock:\n              soft: -1\n              hard: -1\n          ports:\n            - \"${ELASTICSEARCH_HOST_HTTP_PORT}:9200\"\n            - \"${ELASTICSEARCH_HOST_TRANSPORT_PORT}:9300\"\n          depends_on:\n            - php-fpm\n          networks:\n            - frontend\n            - backend\n```\n\nUnder the environment, add the following:\n\n``` yaml\n    - xpack.security.enabled=false\n```\n\nSo it should look like this:\n\n``` yaml\n    environment:\n      - cluster.name=laradock-cluster\n      - bootstrap.memory_lock=true\n      - xpack.security.enabled=false\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n```\n\nThis disables the need to authenticate when connecting to Elasticsearch.\n\nYou can choose to enable it later so that not just anyone can have access to the Elasticsearch index. But to avoid problems with authentication while we’re developing, we’ll disable it for now.\n\n\n### Bringing up the container\n\nNavigate inside the `laradock` directory and bring up the container with Docker Compose:\n\n```\n    docker-compose up -d apache2 php-fpm elasticsearch workspace\n```\n\nThis will install and setup Apache, PHP, and Elasticsearch on the container. There’s also a workspace so you can log in to the container. This allows you to install packages using [Composer](https://getcomposer.org/).\n\nThis process should take a while depending on your internet connection.\n\n### Troubleshooting Laradock issues\n\nIf you’re having problems completing this step, it is most likely a port issue. That is, another process is already using the port that the containers wants to use.\n\nThe quickest way to deal with a port issue is to change the default ports that Apache and Elasticsearch are using (or whatever port is already occupied by another process). Open the `.env` file inside the `laradock` folder and make the following changes:\n\nFor Apache, replace the values for either `APACHE_HOST_HTTPS_PORT` or `APACHE_PHP_UPSTREAM_PORT` (or both):\n\n```\n    # APACHE_HOST_HTTPS_PORT=443 \n    APACHE_HOST_HTTPS_PORT=445 \n    \n    # APACHE_PHP_UPSTREAM_PORT=9000\n    APACHE_PHP_UPSTREAM_PORT=9001\n```\n\nFor Elasticsearch:\n\n```\n    # ELASTICSEARCH_HOST_HTTP_PORT=9200\n    ELASTICSEARCH_HOST_HTTP_PORT=9211\n    \n    # ELASTICSEARCH_HOST_TRANSPORT_PORT=9300\n    ELASTICSEARCH_HOST_TRANSPORT_PORT=9311\n```\n\nIt’s a good practice to comment out the default config so you know which one’s you’re replacing.\n\nIf the issue you’re having isn’t a port issue, then you can visit [Laradock’s issues page](https://github.com/laradock/laradock/issues) and search for the issue you’re having.\n\n## Creating the server component\n\n### Installing the Dependencies\n\nOnce all the software is installed in the container, Docker will automatically bring it up. This allows you to login to the container. You can do that by executing the following command while inside the `laradock` directory:\n\n```\n    docker-compose exec --user=laradock workspace bash\n```\n\nOnce you’re inside, navigate inside the `ridesharer` folder and create a `composer.json` file:\n\n``` json\n    {\n      \"require\": {\n        \"alexpechkarev/geometry-library\": \"1.0\",\n        \"elasticsearch/elasticsearch\": \"^6.0\",\n        \"pusher/pusher-php-server\": \"^3.0\",\n        \"vlucas/phpdotenv\": \"^2.4\"\n      }\n    }\n```\n\nSave the file and execute `composer install`. This will install the following packages:\n\n- `geometry-library` - as mentioned earlier, this allows us to determine whether a specific coordinate lies within a set of coordinates. We will be using this library to determine if the directions returned by the Google Directions API covers the hiker’s pick-up location (origin).  \n- `elasticsearch` - this library allows us to query the Elasticsearch index so we can add, search, update, or delete documents.\n- `pusher-php-server` - this is the official Pusher PHP library for communicating with Pusher’s server. We will be using it to authenticate requests coming from the app.\n- `vlucas/phpdotenv` - for loading environment variables from `.env` files. The `.env` file is where we put the Elasticsearch, Google, and Pusher config. \n\n### Adding environment variables\n\nInside the `laradock-projects/ridesharer` directory, create a `.env` file and add the following:\n\n```\n    PUSHER_APP_ID=\"YOUR PUSHER APP ID\"\n    PUSHER_APP_KEY=\"YOUR PUSHER APP KEY\"\n    PUSHER_APP_SECRET=\"YOUR PUSHER APP SECRET\"\n    PUSHER_APP_CLUSTER=\"YOUR PUSHER APP CLUSTER\"\n    \n    GOOGLE_API_KEY=\"YOUR GOOGLE API KEY\"\n    \n    ELASTICSEARCH_HOST=\"elasticsearch\"\n```\n\nThis file is where you will put the keys and configuration options that we will be using for the server.\n\n### Loader file\n\nSince the majority of the files we will be creating will use either the configuration from the `.env` file or connect to the Elasticsearch server, we will be using this file to do those task for us. That way, we simply need to include this file on each of the files instead of repeating the same code.\n\nStart by importing the `Elasticsearch\\ClientBuilder` class to the current scope. This allows us to use the `ClientBuilder` class without having to refer to its namespace `Elasticsearch` everytime we need to use it:\n\n``` php\n    // laradock-projects/ridesharer/loader.php\n    use Elasticsearch\\ClientBuilder;\n```\n\nInclude the vendor autoload file. This allows us to include all the packages that we installed earlier:\n\n``` php\n    require 'vendor/autoload.php';\n```\n\nLoad the `.env` file:\n\n``` php\n    $dotenv = new Dotenv\\Dotenv(__DIR__);\n    $dotenv-\u003eload();\n    \n    $elasticsearch_host = getenv('ELASTICSEARCH_HOST'); // get the elasticsearch config\n```\n\nAfter that, connect to Elasticsearch:\n\n``` php\n    $hosts = [\n      [\n        'host' =\u003e $elasticsearch_host\n      ]\n    ];\n    \n    $client = ClientBuilder::create()-\u003esetHosts($hosts)-\u003ebuild();\n```\n\n### Setting the type mapping\n\nSince we will be working with coordinates in this app, we need to tell Elasticsearch which of the fields we will be using are coordinates. That way, we can query them later using functions which are specifically created to query geo-point data. This is done through a process called [Mapping](https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-point.html). \n\nStart by including the loader file:\n\n``` php\n    \u003c?php \n    // laradock-projects/ridesharer/set-map.php\n    require 'loader.php';\n```\n\nNext, we can now proceed with specifying the actual map. Note that an error might occur (for example, the index has already been created, or one of the datatypes we specified isn’t recognized by Elasticsearch) so we’re wrapping everything in a `try..catch`. This allows us to “catch” the error and present it in a friendly manner:\n\n``` php\n    try {\n      $indexParams['index']  = 'places'; // the name of the index\n    \n      $myTypeMapping = [\n        '_source' =\u003e [\n          'enabled' =\u003e true\n        ],\n        'properties' =\u003e [\n          'from_coords' =\u003e [\n            'type' =\u003e 'geo_point'\n          ],\n          'to_coords' =\u003e [\n            'type' =\u003e 'geo_point'\n          ],\n          'current_coords' =\u003e [\n            'type' =\u003e 'geo_point'\n          ],\n          'from_bounds.top_left.coords' =\u003e [\n            'type' =\u003e 'geo_point'\n          ],\n          'from_bounds.bottom_right.coords' =\u003e [\n            'type' =\u003e 'geo_point'\n          ],\n          'to_bounds.top_left.coords' =\u003e [\n            'type' =\u003e 'geo_point'\n          ],\n          'to_bounds.bottom_right.coords' =\u003e [\n            'type' =\u003e 'geo_point'\n          ]\n        ]\n      ];\n    \n      // next: add code for adding the map\n      \n    } catch(\\Exception $e) {\n      echo 'err: ' . $e-\u003egetMessage();\n    }\n```\n\nBreaking down the code above, we first specify the name of the index we want to use. This shouldn’t already exist within Elasticsearch. If you’re coming from an RDBMS background, an index is synonymous to a database:\n\n``` php\n    $indexParams['index']  = 'places';\n```\n\nFor the actual type mapping, we only need to specify two properties: `_source` and `properties`. \n\n`_source` allows us to specify whether to enable returning of the [source](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-source-field.html) when getting documents. In Elasticsearch, the `_source` contains the fields (and their values) that we’ve indexed. \n\nIn a real-world app, you don’t really want this option to be enabled as it will affect the search performance. We’re only enabling it so that we don’t have to perform an additional step to fetch the source whenever where querying the index:\n\n``` php\n    '_source' =\u003e [\n      'enabled' =\u003e true\n    ],\n```\n\nThe other property that we need to specify is the `properties`. This accepts the array of field names whose data type we want to specify. Of course, we don’t need to specify the data type of all the fields we plan on using. This is because the data type is already implied in most cases (for example, if it’s wrapped in double or single quotes then it’s a string). But for special data types such as the [geo-point](https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-point.html), that’s the time where we need to explicitly specify it: \n\n``` php\n    'from_coords' =\u003e [\n      'type' =\u003e 'geo_point'\n    ],\n```\n\nIf the field that you want to work with is located deep within other fields, then you use the dot notation to specify the parent:\n\n``` php\n    'from_bounds.top_left.coords' =\u003e [\n      'type' =\u003e 'geo_point'\n    ]\n```\n\nLastly, add the code for creating the index with the map that we specified:\n\n``` php\n    $indexParams['body']['mappings']['location'] = $myTypeMapping; // specify the map\n    $response = $client-\u003eindices()-\u003ecreate($indexParams); // create the index\n    print_r($response); // print the response\n```\n\nAccess `http://ridesharer.loc/set-map.php` on your browser and it should print out a success response. \n\nNote that if you have another local development environment that’s currently running, it might be the one that takes priority instead of Laradock. So be sure to disable them if you can’t access the URL above.\n\n### Creating users\n\nWhen someone uses the app, they need to login first. If the username they used doesn’t already exist then it’s created.\n\nStart by getting the data passed from the app, in PHP this is commonly done by extracting the field name from the `$_POST` global variable. But in this case, we’re using the [PHP input stream](http://php.net/manual/en/wrappers.php.php) to read the raw `POST` data from the request body. This is because this is how Axios (the library that we’ll be using in the app later on) submits the data when sending requests to the server:\n\n``` php\n    \u003c?php \n    // laradock-projects/ridesharer/create-user.php\n    require 'loader.php';\n    \n    $data = json_decode(file_get_contents(\"php://input\"), true);\n    $username = $data['username']; // get the value from the username field\n```\n\nConstruct the parameters to be supplied to Elasticsearch. This includes the `index` and the `type`. You can think of the `type` as the table or collection that you want to query. \n\n``` php\n    $params = [\n      'index' =\u003e 'places', // the index \n      'type' =\u003e 'users' // the table or collection\n    ];\n```\n\nSpecify the query. In this case, we’re telling Elasticsearch to look for an exact match for the username supplied:\n\n``` php\n    $params['body']['query']['match']['username'] = $username; // look for the username specified\n```\n\nExecute the search query, if it doesn’t return any “hits” then we create a new user using the username that was supplied:\n\n``` php\n    try {\n      $search_response = $client-\u003esearch($params); // execute the search query\n     \n      if($search_response['hits']['total'] == 0){ // if the username doesn't already exist\n        // create the user\n        $index_response = $client-\u003eindex([\n          'index' =\u003e 'places',\n          'type' =\u003e 'users',\n          'id' =\u003e $username,\n          'body' =\u003e [\n            'username' =\u003e $username\n          ]\n        ]);\n      }\n    \n      echo 'ok';\n      \n    } catch(\\Exception $e) {\n      echo 'err: ' . $e-\u003egetMessage();\n    }\n```\n\n### Saving routes\n\nWhenever a rider shares a ride, the following information needs to be stored in the index:\n\n- username\n- origin\n- destination\n- origin coordinates\n- destination coordinates\n- the steps from the origin to destination\n\nStart by getting the data submitted from the app:\n\n``` php\n    \u003c?php \n    // laradock-projects/ridesharer/save-route.php\n    require 'loader.php';\n    \n    $google_api_key = getenv('GOOGLE_API_KEY');\n    \n    $data = json_decode(file_get_contents(\"php://input\"), true);\n    $start_location = $data['start_location']; // an array containing the coordinates (latitude and longitude) of the rider's origin\n    $end_location = $data['end_location']; // the coordinates of the rider's destination\n    \n    $username = $data['username']; // the rider's username\n    $from = $data['from']; // the descriptive name of the rider's origin\n    $to = $data['to']; // the descriptive name of the rider's destination\n    $id = generateRandomString(); // unique ID used for identifying the document\n```\n\nMake a request to the [Google Directions API](https://developers.google.com/maps/documentation/directions/intro) using the `file_get_contents()` function. The `directions` endpoint expects the `origin` and `destination` to be passed as a query parameter. These two contains the latitude and longitude value pairs (separated by a comma). We simply pass the values supplied from the app. \n\nThe `file_get_contents()` function returns a JSON string so we use the `json_decode()` function to convert it to an array. Specifying `true` as the second argument tells PHP to convert it to an array instead of an object (when the second argument is omitted or set to `false`):\n\n``` php\n    $steps_data = [];\n    \n    $contents = file_get_contents(\"https://maps.googleapis.com/maps/api/directions/json?origin={$start_location['latitude']},{$start_location['longitude']}\u0026destination={$end_location['latitude']},{$end_location['longitude']}\u0026key={$google_api_key}\");\n    \n    $directions_data = json_decode($contents, true);\n```\n\nLoop through the array of steps and construct an array (`$steps_data`) that only contains the data that we want to store. In this case, it’s only the latitude and longitude values for each of the steps:\n\n``` php\n    if(!empty($directions_data['routes'])){\n      $steps = $directions_data['routes'][0]['legs'][0]['steps'];\n      foreach($steps as $step){\n        $steps_data[] = [\n          'lat' =\u003e $step['start_location']['lat'],\n          'lng' =\u003e $step['start_location']['lng']\n        ];\n    \n        $steps_data[] = [\n          'lat' =\u003e $step['end_location']['lat'],\n          'lng' =\u003e $step['end_location']['lng']\n        ];\n      }\n    }\n```\n\nNext, construct the data that we’ll save to the Elasticsearch index:\n\n``` php\n    if(!empty($steps_data)){\n    \n      $params = [\n        'index' =\u003e 'places',\n        'type' =\u003e 'location',\n        'id' =\u003e $id,\n        'body' =\u003e [\n          'username' =\u003e $username, \n          'from' =\u003e $from, \n          'to' =\u003e $to,\n          'from_coords' =\u003e [ // geo-point values needs to have lat and lon\n            'lat' =\u003e $start_location['latitude'],\n            'lon' =\u003e $start_location['longitude'],\n          ],\n          'current_coords' =\u003e [\n            'lat' =\u003e $start_location['latitude'],\n            'lon' =\u003e $start_location['longitude'],\n          ],\n          'to_coords' =\u003e [\n            'lat' =\u003e $end_location['latitude'],\n            'lon' =\u003e $end_location['longitude'],\n          ],\n          'steps' =\u003e $steps_data\n        ]\n      ];\n    \n    }\n```\n\nMake the request to index the data:\n\n``` php\n    try{\n      $response = $client-\u003eindex($params);\n      $response_data = json_encode([\n        'id' =\u003e $id\n      ]);\n            \n      echo $response_data;\n    }catch(\\Exception $e){\n      echo 'err: ' . $e-\u003egetMessage();\n    }\n```\n\nHere’s the function for generating a unique ID:\n\n``` php\n    function generateRandomString($length = 10){\n      $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n      $charactersLength = strlen($characters);\n      $randomString = '';\n      for($i = 0; $i \u003c $length; $i++){\n        $randomString .= $characters[rand(0, $charactersLength - 1)];\n      }\n      return $randomString;\n    }\n```\n\n### Searching routes\n\nWhen a hiker searches for a ride, a request is made to this file. This expects the origin and destination of the hiker to be passed in the request body. That way, we can make a request to the Google Directions API with those data:\n\n``` php\n    \u003c?php \n    // /laradock-projects/ridesharer/search-routes.php\n    require 'loader.php';\n    \n    $google_api_key = getenv('GOOGLE_API_KEY');\n    \n    $params['index'] = 'places';\n    $params['type'] = 'location';\n    \n    $data = json_decode(file_get_contents(\"php://input\"), true);\n    \n    // the hiker's origin coordinates\n    $hiker_origin_lat = $data['origin']['latitude'];\n    $hiker_origin_lon = $data['origin']['longitude'];\n    \n    // the hiker's destination coordinates\n    $hiker_dest_lat = $data['dest']['latitude'];\n    $hiker_dest_lon = $data['dest']['longitude'];\n    \n    $hiker_directions_contents = file_get_contents(\"https://maps.googleapis.com/maps/api/directions/json?origin={$hiker_origin_lat},{$hiker_origin_lon}\u0026destination={$hiker_dest_lat},{$hiker_dest_lon}\u0026key={$google_api_key}\");\n    \n    $hiker_directions_data = json_decode($hiker_directions_contents, true);\n```\n\nStore the hiker’s steps into an array. We will be using it later to determine whether the hiker and the rider have the same route. Note that we’re only storing the `start_location` for the first step. This is because the `start_location` of all the succeeding steps overlaps with the `end_location` of the step that follows:\n\n``` php\n    $hikers_steps = [];\n    \n    $steps = $hiker_directions_data['routes'][0]['legs'][0]['steps']; // extract the steps\n    foreach($steps as $index =\u003e $s){\n      if($index == 0){ \n        $hikers_steps[] = [\n          'lat' =\u003e $s['start_location']['lat'],\n          'lng' =\u003e $s['start_location']['lng']\n        ];  \n      }\n    \n      $hikers_steps[] = [\n        'lat' =\u003e $s['end_location']['lat'],\n        'lng' =\u003e $s['end_location']['lng']\n      ];\n    }\n```\n\nNext, we construct the query to be sent to Elasticsearch. Here we use a `d``ecay` function called `gauss` to assign a score to each of the routes that are currently saved in the index. This score is then used to determine the order in which the results are returned, or whether they will be returned at all. \n\nSpecifying the `min_score` means all the documents which don’t meet the supplied score won’t be returned in the response. In the code below, we’re querying for documents which are up to five kilometers away from the origin. But once the documents have a `current_coords` which are not within 100 meters, the score assigned to them is halved:\n\n``` php\n    $params['body'] = [\n      \"min_score\" =\u003e 0.5, // the minimum score for the function to return the record\n      'query' =\u003e [\n        'function_score' =\u003e [\n          'gauss' =\u003e [\n            'current_coords' =\u003e [\n              \"origin\" =\u003e [\"lat\" =\u003e $hiker_origin_lat, \"lon\" =\u003e $hiker_origin_lon], // where to begin the search\n              \"offset\" =\u003e \"100m\", // only select documents that are up to 100 meters away from the origin\n              \"scale\" =\u003e \"5km\" // (offset + scale = 5,100 meters) any document which are not within the 100 meter offset but are still within 5,100 meters gets a score of 0.5\n            ]\n          ]\n        ]\n      ]\n    ];\n```\n\nIf you want to know more about how the function works, check this article out: [The Closer, The Better](https://www.elastic.co/guide/en/elasticsearch/guide/current/decay-functions.html).\n\nNext, construct the coordinates for the hiker’s origin and destination. We will use this to compute the distance between the hiker’s origin and destination, as well as the hiker’s origin and the rider’s destination. We will need these values later on to determine whether the routes returned from the query matches the hiker’s route:\n\n``` php\n    $hikers_origin = ['lat' =\u003e $hiker_origin_lat, 'lng' =\u003e $hiker_origin_lon];\n    $hikers_dest = ['lat' =\u003e $hiker_dest_lat, 'lng' =\u003e $hiker_dest_lon];\n```\n\nSend the request and loop through all the results:\n\n``` php\n    try {\n      $response = $client-\u003esearch($params);\n      \n      if(!empty($response['hits']) \u0026\u0026 $response['hits']['total'] \u003e 0){\n        foreach($response['hits']['hits'] as $hit){\n          \n          $source = $hit['_source'];\n          $riders_steps = $source['steps'];\n    \n          $current_coords = $source['current_coords'];\n          $to_coords = $source['to_coords'];\n    \n          $riders_origin = [\n            'lat' =\u003e $current_coords['lat'],\n            'lng' =\u003e $current_coords['lon']\n          ];\n    \n          $riders_dest = [\n            'lat' =\u003e $to_coords['lat'],\n            'lng' =\u003e $to_coords['lon']\n          ];\n          \n          // check whether the rider's route matches the hiker's route\n          if(isCoordsOnPath($hiker_origin_lat, $hiker_origin_lon, $riders_steps) \u0026\u0026 canDropoff($hikers_origin, $hikers_dest, $riders_origin, $riders_dest, $hikers_steps, $riders_steps)){\n            // the rider's username, origin and destination\n            $rider_details = [\n              'username' =\u003e $source['username'],\n              'from' =\u003e $source['from'],\n              'to' =\u003e $source['to']\n            ];\n    \n            echo json_encode($rider_details); // respond with the first match       \n            break; // break out from the loop\n          }\n        }\n      }\n    \n    } catch(\\Exception $e) {\n      echo 'err: ' . $e-\u003egetMessage();\n    }\n```\n\nThe `isCoordsOnPath()` function uses the `isLocationOnPath()` function from the `php-geometry` library. This accepts the following arguments:\n\n\n- An array containing the latitude and longitude of the coordinate we want to check.\n- An array of arrays containing the latitude and longitude of each of the steps.\n- The tolerance value in degrees. This is useful if the place specified isn’t near a road. Here, I’ve used a high value to cover for most cases. As long as the hiker’s origin is somewhat near to a road, then it should be fine.\n\n``` php\n    function isCoordsOnPath($lat, $lon, $path) {\n      $response = \\GeometryLibrary\\PolyUtil::isLocationOnPath(['lat' =\u003e $lat, 'lng' =\u003e $lon], $path, 350); \n      return $response;\n    }\n```\n\nThe `canDropoff()` function determines whether the rider and the hiker are both treading the same route. This accepts the following arguments:\n\n\n- `$hikers_origin` - the coordinates of the hiker’s origin.\n- `$hikers_dest` - the coordinates of the hiker’s destination.\n- `$riders_origin` - the coordinates of the rider’s origin.\n- `$riders_destination` - the coordinates of the rider’s destination.\n- `$hikers_steps` - an array containing the hiker’s steps.\n- `$riders_steps` - an array containing the rider’s steps.\n\nThe way this function works is that it first determines who leaves the vehicle last: the rider or the hiker. The app works with the assumption that the rider has to ride the vehicle first, and that they should pick up the hiker before they get to leave the vehicle. Otherwise, the hiker won’t be able to track where the vehicle is. This means that there are only two possible scenarios when it comes to the order of leaving the vehicle:\n\n- rider rides vehicle → rider picks up hiker → rider leaves the vehicle → hiker leaves the vehicle\n- rider rides vehicle → rider picks up hiker → hiker leaves the vehicle → rider leaves the vehicle\n\nThe tracking starts once the rider picks up the hiker. So we measure the distance between the hiker’s origin and their destination, as well as the hiker’s origin and the rider’s destination. This then allows us to determine who will leave the vehicle last by comparing the distance between the two.\n\nOnce we know the order in which the two users leaves the vehicle, we can now use the `isCoordsOnPath()` function to determine if the destination of the person who will leave the vehicle first is within the route of the person who will leave the vehicle last:\n\n``` php\n    function canDropoff($hikers_origin, $hikers_dest, $riders_origin, $riders_dest, $hikers_steps, $riders_steps) {\n      // get the distance from the hiker's origin to the hiker's destination\n      $hiker_origin_to_hiker_dest = \\GeometryLibrary\\SphericalUtil::computeDistanceBetween($hikers_origin, $hikers_dest);\n      \n      // get the distance from the hiker's origin to the rider's destination\n      $hiker_origin_to_rider_dest = \\GeometryLibrary\\SphericalUtil::computeDistanceBetween($hikers_origin, $riders_dest);\n    \n      $is_on_path = false; // whether the rider and hiker is on the same path or not\n    \n      if($hiker_origin_to_hiker_dest \u003e $hiker_origin_to_rider_dest){ // hiker leaves the vehicle last\n        // if the rider's destination is within the routes covered by the hiker\n        $is_on_path = isCoordsOnPath($riders_dest['lat'], $riders_dest['lng'], $hikers_steps); \n    \n      }else if($hiker_origin_to_rider_dest \u003e $hiker_origin_to_hiker_dest){ // rider leaves the vehicle last\n        // if hiker's destination is within the routes covered by the rider\n        $is_on_path = isCoordsOnPath($hikers_dest['lat'], $hikers_dest['lng'], $riders_steps);\n    \n      }else{ // if the rider and hiker are both going the same place\n        // check whether either of the conditions above returns true\n        $is_on_path = isCoordsOnPath($hikers_dest['lat'], $hikers_dest['lng'], $riders_steps) || isCoordsOnPath($riders_dest['lat'], $riders_dest['lng'], $hikers_steps);\n      }\n    \n      return $is_on_path;\n    \n    }\n```\n\n### Update route\n\nEvery time the location changes, the app makes a request to this file. The app sends the unique ID that the server responded with when the route was created. This allows us to fetch the existing document from the index. We then update the source with the new coordinates:\n\n``` php\n    \u003c?php \n    // laradock-projects/ridesharer/update-route.php\n    require 'loader.php';\n    \n    $data = json_decode(file_get_contents(\"php://input\"), true); // get the request body and convert it to an array\n    \n    $params['index'] = 'places';\n    $params['type'] = 'location';\n    $params['id'] = $data['id']; // the id submitted from the app\n    \n    // the latitude and longitude values submitted from the app\n    $lat = $data['lat']; \n    $lon = $data['lon']; \n    \n    $result = $client-\u003eget($params); // get the document based on the id used as the parameter\n    $result['_source']['current_coords'] = [ // update the current coordinates with the latitude and longitude values submitted from the app\n      'lat' =\u003e $lat,\n      'lon' =\u003e $lon\n    ];\n    \n    $params['body']['doc'] = $result['_source']; // replace the source with the updated data\n    $result = $client-\u003eupdate($params); // update the document\n    \n    echo json_encode($result);\n```\n\n### Delete route\n\nOnce the rider accepts a request from the hiker, the app makes a request to this file so that the existing route will be deleted. We need to do this because we don’t want other hikers to make another request to the same rider (remember the 1:1 ratio of the rider to hiker?). Also, note that we’re using the rider’s `username` to query the index. We haven’t really put any security measures to only allow a username to be used on a single app instance, but this tells us that a user can only save one route at a time:\n\n``` php\n    \u003c?php \n    // laradock-projects/ridesharer/delete-route.php\n    require 'loader.php';\n    \n    $data = json_decode(file_get_contents(\"php://input\"), true);\n    \n    $params['index'] = 'places';\n    $params['type'] = 'location';\n    $params['body']['query']['match']['username'] = $data['username']; // find the rider's username\n     \n    $result = $client-\u003esearch($params); // search the index\n    $id = $result['hits']['hits'][0]['_id']; // only get the first result\n    \n    unset($params['body']);\n    $params['id'] = $id;\n    $result = $client-\u003edelete($params);\n    \n    echo json_encode($result);\n```\n\n### Delete index\n\nDeleting the index (`delete-index.php` ) isn’t really required for the app to work. Though it will be useful when testing the app. This allows you to reset the Elasticsearch index so you can control the results that are returned when you search for riders:\n\n``` php\n    \u003c?php \n    // laradock-projects/ridesharer/delete-index.php\n    require 'loader.php';\n    \n    try {\n      $params = ['index' =\u003e 'places'];\n      $response = $client-\u003eindices()-\u003edelete($params);\n      print_r($response);\n    } catch(\\Exception $e) {\n      echo 'err: ' . $e-\u003egetMessage();\n    }\n```\n\n### Authenticating requests\n\nBelow is the code for authenticating requests so that Pusher will allow the user to use the Channels service. This requires the keys from the **App keys** tab earlier. Be sure to replace the placeholders with your keys:\n\n``` php\n    \u003c?php \n    // laradock-projects/ridesharer/pusher-auth.php\n    require 'vendor/autoload.php';\n    \n    // load the .env file located on the same directory as this file\n    $dotenv = new Dotenv\\Dotenv(__DIR__); \n    $dotenv-\u003eload();\n    \n    // get the individual config from the .env file. This should be the same as the one's you have on the .env file\n    $app_id = getenv('PUSHER_APP_ID');\n    $app_key = getenv('PUSHER_APP_KEY');\n    $app_secret = getenv('PUSHER_APP_SECRET');\n    $app_cluster = getenv('PUSHER_APP_CLUSTER');\n```\n\nSet the content type to `application/json` as this is what the Pusher client expects in the client side:\n\n``` php\n    header('Content-Type: application/json');\n```\n\nConnect to the Pusher app using the keys and options. The options include the cluster where the app is running from, and whether to encrypt the connection or not:\n\n``` php\n    $options = ['cluster' =\u003e $app_cluster, 'encrypted' =\u003e true]; \n    $pusher = new Pusher\\Pusher($app_key, $app_secret, $app_id, $options);\n```\n\nLastly, get the data sent by the Pusher client and use it as an argument for the `socket_auth()` method. This method returns the success token required by the Pusher client:\n\n``` php\n    $channel = $_POST['channel_name'];\n    $socket_id = $_POST['socket_id'];\n    \n    echo $pusher-\u003esocket_auth($channel, $socket_id);\n```\n\nAs you can see, we didn’t really apply any form of authentication in the code above. In a real-world scenario, you want to have some form of authentication before returning the success token. This can be a unique ID that’s only assigned to the users of your app, it can also be a key which is then decrypted to come up with a token used for authenticating the request. This unique ID or key is sent from the client side so the server can verify it. \n\nYou can test if the server is working by accessing any of the files you created earlier.\n\n## Exposing the server with ngrok\n\nSo that you can access the virtual host `http://ridesharer.loc` from the app, you need to setup ngrok. This allows you to expose your virtual host to the internet.\n\n1. [Sign up for an ngrok account](https://dashboard.ngrok.com/user/signup). \n2. Go to your [dashboard](https://dashboard.ngrok.com/get-started) and download ngrok.\n3. Unzip the archive.\n4. Authenticate ngrok using your auth token:\n\n``` \n    .\\ngrok authtoken YOUR_AUTH_TOKEN\n```\n\n5. Expose the virtual host:\n\n```\n    ngrok http -host-header=ridesharer.loc 80\n```\n\nThis will give you an output similar to the following:\n\n![carpooling-react-native-ngrok-setup](//images.ctfassets.net/1es3ne0caaid/44tTdWBLCMOsOWYYC6qaGa/2c1156e0bb1a4b588a83659e85f2b34b/carpooling-react-native-ngrok-setup.png)\n\nCopy the HTTPS URL as that’s what we’re going to use in the app later on.\n\n## Conclusion\n\nThat’s it! In this tutorial, we’ve set up the server to be used by the app. You can find the code used in this tutorial on this [Github repo](https://github.com/anchetaWern/Ridesharer). In the [second part](https://pusher.com/tutorials/carpooling-react-native-part-2) of this series, we’ll be covering how to create the frontend of the app.","metaTitle":"Create a carpooling app with React Native - Part 1","metaDescription":"Build a carpooling app using React Native, Docker and Google SDKs and APIs. In the first part, create the backend server using Docker and PHP."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"30ZzU6JKpagkAakOoK4igW","type":"Entry","createdAt":"2018-06-07T16:31:42.992Z","updatedAt":"2018-06-19T14:31:18.893Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a carpooling app with React Native - Part 2: Creating the frontend","url":"carpooling-react-native-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/Ridesharer","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2018-06-07","description":"This two-part series uses React Native, Docker and several Google services (Maps, Places, Directions and Geocoding) to create a carpooling app. In part twoyou will set up the frontend.","prerequisite":"You will need to have completed the first part of the series. For part two you need experience with React Native.","content":"This is the second part of a two-part series on creating a carpooling app with React Native. This is the part where we will be creating the actual app. I’ll be showing you how to set up the app so you can run it on an Android emulator (Genymotion) or an iOS device.\n\n## Prerequisites\n\nYou need to have completed [part one](https://pusher.com/tutorials/carpooling-react-native-part-1) before moving on to this tutorial.\n\nTo effectively follow this tutorial, you should have a good grasp of the following React concepts:\n\n- props \n- refs\n- state\n- component lifecycle\n\nAs for building the app with React Native, knowing how to do the following will be helpful:\n\n- How to use primitive React Native components such as the `View` or `Text`. \n- How to add styles to the components.\n- How to create your own components.\n\n## What we’ll be building\n\nThe complete details on what we’ll be building are available in the first part of the series. As a refresher, we’ll be building a carpooling app. This allows the user to share the vehicle they’re currently riding in so someone else can hop in the same vehicle. The app is responsible for:\n\n- Matching the users so that only the users who are going the same route can share a ride with each other.\n- After two users are matched, the app provides realtime tracking on where each other currently are.\n\nFor the rest of the tutorial, I’ll be referring to the user who is sharing the ride as the “rider”. While the user who is searching for a ride as the “hiker”.\n\n## Installing the dependencies\n\nStart by generating a new React Native project:\n\n```\n    react-native init Ridesharer\n```\n\nThis will create a `Ridesharer` directory. This will serve as the root directory that we’ll be using for the rest of the tutorial.\n\nThe app relies on the following libraries to implement specific features:\n\n- [**axios**](https://github.com/axios/axios) - for making requests to the server. Although React Native already comes with [fetch](https://facebook.github.io/react-native/docs/network.html), axios gives us a simpler API to work with.\n- [**pusher-js**](https://github.com/pusher/pusher-js) - the official Pusher JavaScript library. This allows us connect to a Pusher app and send realtime data.\n- [**react-native-geocoding**](https://github.com/marlove/react-native-geocoding) - for converting latitude and longitude pairs to the actual name of the place.\n- [**react-native-google-places-autocomplete**](https://github.com/FaridSafi/react-native-google-places-autocomplete) - for searching the user’s destination.\n- [**react-native-maps**](https://github.com/react-community/react-native-maps) - for showing a map inside the app. This is also used for showing markers on where the users are and their destinations. \n- [**react-native-maps-directions**](https://github.com/bramus/react-native-maps-directions) - for showing the route from the user’s origin to their destination. \n- [**react-native-vector-icons**](https://github.com/oblador/react-native-vector-icons) - for using icons inside the app.\n- [**react-navigation**](https://github.com/react-navigation/react-navigation) - for easily implementing navigation between screens.\n\nTo ensure that we’re both using the same package versions, open the `package.json` file and update the `dependencies` with the following:\n\n``` json\n    \"dependencies\": {\n      \"axios\": \"0.18.0\",\n      \"prop-types\": \"15.6.1\",\n      \"pusher-js\": \"4.2.2\",\n      \"react\": \"16.3.1\",\n      \"react-native\": \"0.55.4\",\n      \"react-native-geocoding\": \"0.3.0\",\n      \"react-native-google-places-autocomplete\": \"1.3.6\",\n      \"react-native-maps\": \"0.20.1\",\n      \"react-native-maps-directions\": \"1.6.0\",\n      \"react-native-vector-icons\": \"4.6.0\",\n      \"react-navigation\": \"2.0.1\"\n    },\n```\n\nOnce that’s done, save the file and execute `npm install`. \n\n## Setting up the dependencies\n\nNow that you’ve installed all the dependencies, there’s one more thing you have to do before you can start coding the app. Additional setup is required for the following dependencies:\n\n- [react-native-vector-icons](https://github.com/oblador/react-native-vector-icons)\n- [react-native-maps](https://github.com/react-community/react-native-maps)\n\nInstructions on how to set up the dependencies are available on the Github repos for each library. Here are the links to the setup instructions to the specific version we’re using:\n\n- [react-native-vector-icons v4.6.0](https://github.com/oblador/react-native-vector-icons/tree/v4.6.0#installation)\n- [react-native-maps v0.20.1](https://github.com/react-community/react-native-maps/blob/v0.20.1/docs/installation.md)\n\nNote that if you’re reading this sometime in the future, you’ll probably have to install the latest package versions and follow their latest installation instructions.\n\n## Building the app\n\nNow we’re ready to build the app. Navigate inside the `Ridesharer` directory as that’s going to be our working directory.\n\nNote that anytime you feel confused on where to add a specific code, you can always visit the [GitHub](https://github.com/anchetaWern/Ridesharer/tree/master/app) [repo](https://github.com/anchetaWern/Ridesharer/tree/master/app) and view the file.\n\n### Index\nOpen the `index.js` file and make sure you’re registering the same name that you used when you generated the project. In this case, it should be `Ridesharer`:\n\n``` javascript\n    // Ridesharer/index.js\n    import { AppRegistry } from 'react-native';\n    import App from './App';\n    \n    AppRegistry.registerComponent('Ridesharer', () =\u003e App);\n```\n\n### Root component\n\nCreate a `Root.js` file. This will serve as the Root component of the app. This is where we set up the navigation so we include the two pages of the app: Home and Map. We will be creating these pages later:\n\n``` javascript\n    // Ridesharer/Root.js\n    import React from 'react';\n    import { StackNavigator } from 'react-navigation';\n    \n    import HomePage from './app/screens/Home';\n    import MapPage from './app/screens/Map';\n    \n    const RootStack = StackNavigator(\n      {\n        Home: {\n          screen: HomePage\n        },\n        Map: {\n          screen: MapPage\n        }\n      },\n      { \n        initialRouteName: 'Home', // set the home page as the default page \n      }\n    );\n    \n    export default RootStack;\n```\n\nIn the above code, we’re using the `StackNavigator`, one of the navigators that comes with the React Navigation library. This allows us to push and pop pages to and from a stack. Navigating to a page means pushing it in front of the stack, going back means popping the page that’s currently in front of the stack.\n\n### App component\n\nOpen the `App.js` file and render the `App` component:\n\n``` javascript\n    // Ridesharer/App.js\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      View\n    } from 'react-native';\n    \n    import Root from './Root';\n    \n    export default class App extends Component {\n    \n      render() {\n        return (\n          \u003cView style={styles.container}\u003e\n            \u003cRoot /\u003e\n          \u003c/View\u003e\n        );\n      }\n    \n    }\n    \n    const styles = StyleSheet.create({\n      container: {\n        flex: 1,\n        backgroundColor: '#fff'\n      }\n    });\n```\n\n### Tapper component\n\nThe `Tapper` component is simply a button created for convenience. We can’t really apply a custom style to the built-in React Native `Button` component so we’re creating this one. This component wraps the `Button`  component in a `View` in which the styles are applied:\n\n``` javascript\n    // Ridesharer/app/components/Tapper/Tapper.js\n    import React from 'react';\n    import { View, Button } from 'react-native';\n    \n    import styles from './styles';\n    \n    const Tapper = (props) =\u003e {\n      return (\n        \u003cView style={styles.button_container}\u003e\n          \u003cButton\n            onPress={props.onPress}\n            title={props.title}\n            color={props.color}\n          /\u003e\n        \u003c/View\u003e\n      );\n    }\n    \n    export default Tapper;\n```\n\nHere’s the style declaration:\n\n``` javascript\n    // Ridesharer/app/components/Tapper/styles.js\n    import { StyleSheet } from 'react-native';\n    \n    export default StyleSheet.create({\n      button_container: {\n        margin: 10\n      },\n    });\n```\n\nLastly, we export it using an `index.js` file so that we can simply refer to the component as `Tapper` without including the `Tapper.js` file in the `import` statement later on:\n\n``` javascript\n    // Ridesharer/app/components/Tapper/index.js\n    import Tapper from './Tapper';\n    \n    export default Tapper;\n```\n\nIf you don’t want to create a separate component, you can always use the `TouchableOpacity` and `TouchableHighlight` components. Those two allow you to add a custom style.\n\n### Home page\n\nThe `Home` page is the default page the user sees when they open the app. \n\nStart by including all the React Native packages that we need:\n\n``` javascript\n    // Ridesharer/app/screens/Home.js\n    import React, { Component } from 'react';\n    import { \n      View, \n      Text, \n      StyleSheet, \n      TextInput, \n      Alert, \n      ActivityIndicator, \n      PermissionsAndroid, \n      KeyboardAvoidingView \n    } from 'react-native';\n```\n\nAmong the packages above, only these three warrants an explanation:\n\n- `PermissionsAndroid` - for asking permissions to use the device’s Geolocation feature on Android. \n- `KeyboardAvoidingView` - for automatically adjusting the View when the on-screen keyboard pops out. This allows the user to see what they’re inputting while the keyboard is open. Most of the time, especially on devices with small screen, the input is hidden when the keyboard is open. \n\nNext, include the third-party packages we installed earlier:\n\n``` javascript\n    import axios from 'axios';\n    import Icon from 'react-native-vector-icons/FontAwesome';\n    import Tapper from '../components/Tapper';\n```\n\nAdd your ngrok URL (this was created in the first part of the series):\n\n``` javascript\n    const base_url = 'YOUR NGROK URL';\n```\n\nDeclare the function that will ask for the [Geolocation](https://facebook.github.io/react-native/docs/geolocation.html) permission and then call it:\n\n``` javascript\n    async function requestGeolocationPermission() {\n      try{\n        const granted = await PermissionsAndroid.request(\n          PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,\n          {\n            'title': 'Ridesharer Geolocation Permission',\n            'message': 'Ridesharer needs access to your current location so you can share or search for a ride'\n          }\n        );\n    \n        if(granted === PermissionsAndroid.RESULTS.GRANTED){\n          console.log(\"You can use the geolocation\")\n        }else{\n          console.log(\"Geolocation permission denied\")\n        }\n      }catch(err){\n        console.warn(err)\n      }\n    }\n    \n    requestGeolocationPermission();\n```\n\nHide the header. The `Home` page doesn’t need it:\n\n``` javascript\n    export default class Home extends Component {\n      static navigationOptions = {\n        header: null,\n      };\n    }\n```\n\nSet the default state for the loader (for controlling the visibility of the `ActivityIndicator`) and username:\n\n``` javascript\n    state = {\n      is_loading: false,\n      username: ''\n    }\n```\n\nRender the `Home` page. In this page we have:\n\n- An input that asks for the user’s name\n- A button for sharing a ride\n- A button for hitching a ride\n\nNote that we’re using the `KeyboardAvoidingView` as a wrapper. This way, everything inside it will adjust accordingly when the on-screen keyboard becomes visible:\n\n``` javascript\n    render() {\n    \n      return (\n        \u003cKeyboardAvoidingView style={styles.container} behavior=\"padding\" enabled\u003e\n          \u003cView style={styles.jumbo_container}\u003e\n            \u003cIcon name=\"question-circle\" size={35} color=\"#464646\" /\u003e\n            \u003cText style={styles.jumbo_text}\u003eWhat do you want to do?\u003c/Text\u003e\n          \u003c/View\u003e\n      \n          \u003cView\u003e\n            \u003cTextInput\n              placeholder=\"Enter your username\"\n              style={styles.text_field}\n              onChangeText={(username) =\u003e this.setState({username})}\n              value={this.state.username}\n              clearButtonMode={\"always\"}\n              returnKeyType={\"done\"}\n            /\u003e\n            \u003cActivityIndicator size=\"small\" color=\"#007ff5\" style={{marginTop: 10}} animating={this.state.is_loading} /\u003e\n          \u003c/View\u003e\n    \n          \u003cView style={styles.close_container}\u003e\n            \u003cTapper\n              title=\"Share a Ride\"\n              color=\"#007ff5\"\n              onPress={() =\u003e {\n                this.enterUser('share');\n              }}\n            /\u003e\n         \n            \u003cTapper \n              title=\"Hitch a Ride\" \n              color=\"#00bcf5\" \n              onPress={() =\u003e {\n                this.enterUser('hike');\n              }} \n            /\u003e\n          \u003c/View\u003e\n        \n        \u003c/KeyboardAvoidingView\u003e\n      );\n    }\n```\n\nWhen either of the buttons is pressed, the function below gets executed. All it does is create the user if they don’t already exist:\n\n``` javascript\n    enterUser = (action) =\u003e {\n      if(this.state.username){ // user should enter a username before they can enter\n    \n        this.setState({\n          is_loading: true\n        });\n        \n        // make a POST request to the server for creating the user\n        axios.post(`${base_url}/save-user.php`, {\n          username: this.state.username // the username entered in the text field\n        })\n        .then((response) =\u003e {\n          \n          if(response.data == 'ok'){\n            // hide the ActivityIndicator\n            this.setState({\n              is_loading: false\n            });\n            \n            // navigate to the Map page, submitting the user's action (ride or hike) and their username as a navigation param (so it becomes available on the Map page)\n            this.props.navigation.navigate('Map', {\n              action: action,\n              username: this.state.username\n            });\n          }\n          \n        });\n    \n      }else{\n        Alert.alert(\n          'Username required',\n          'Please enter a username'\n        );\n      }\n    }\n```\n\nAdd the styles for the Home page:\n\n``` javascript\n    const styles = StyleSheet.create({\n      container: {\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'space-around'\n      },\n      jumbo_container: {\n        padding: 50,\n        alignItems: 'center'\n      },\n      jumbo_text: {\n        marginTop: 20,\n        textAlign: 'center',\n        fontSize: 25,\n        fontWeight: 'bold'\n      },\n      text_field: {\n        width: 200,\n        height: 50,\n        padding: 10,\n        backgroundColor: '#FFF', \n        borderColor: 'gray', \n        borderWidth: 1\n      }\n    });\n```\n\n### Map page\n\nThe Map page contains the main meat of the app. This allows the user to share or search for a ride. The tracking of location is implemented via Google Maps, Pusher Channels, and React Native’s Geolocation feature. \n\nStart by including all the React Native packages that we need:\n\n``` javascript\n    // Ridesharer/app/screens/Map.js\n    import React, { Component } from 'react';\n    import { \n      View, \n      Text, \n      StyleSheet, \n      Alert, \n      Dimensions, \n      ActivityIndicator\n    } from 'react-native';\n```\n\nNext, include the packages that we installed earlier:\n\n``` javascript\n    import { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';\n    import MapView, { Marker, Callout } from 'react-native-maps';\n    import MapViewDirections from 'react-native-maps-directions';\n    import Icon from 'react-native-vector-icons/FontAwesome';\n    import Pusher from 'pusher-js/react-native'; \n    import Geocoder from 'react-native-geocoding';\n    import axios from 'axios';\n```\n\nInclude the location library. We will be creating this later, but for now, know that these functions are used to center the map correctly (`regionFrom()`) and getting the difference of two coordinates in meters (`getLatLonDiffInMeters()`):\n\n``` javascript\n    import { regionFrom, getLatLonDiffInMeters } from '../lib/location';\n    import Tapper from '../components/Tapper';\n```\n\nInitialize your API keys and ngrok base URL:\n\n``` javascript\n    const google_api_key = 'YOUR GOOGLE PROJECT API KEY';\n    const base_url = 'YOUR NGROK BASE URL';\n    const pusher_app_key = 'YOUR PUSHER APP KEY';\n    const pusher_app_cluster = 'YOUR PUSHER APP CLUSTER';\n    \n    Geocoder.init(google_api_key); // initialize the geocoder\n```\n\nNext, also declare the timeouts for searching and sharing a ride. We will be using these values later to reset the app’s UI if it couldn’t match two users within these timeouts:\n\n``` javascript\n    const search_timeout = 1000 * 60 * 10; // 10 minutes\n    const share_timeout = 1000 * 60 * 5; // 5 minutes\n```\n\nSetup a default region that the map will display:\n\n``` javascript\n    const default_region = {\n      latitude: 37.78825,\n      longitude: -122.4324,\n      latitudeDelta: 0.0922,\n      longitudeDelta: 0.0421,\n    };\n```\n\nGet the device width. We will be using this later to set the width of the auto-complete text field for searching places:\n\n``` javascript\n    var device_width = Dimensions.get('window').width; \n```\n\nNext, create the `Map`  component and set the `navigationOptions`. Unlike the `Home` page earlier, we need to set a few options for the navigation. This includes the header title and the styles applied to it. Putting these navigation options will automatically add a back button to the header to allow the user to go back to the `Home` page:\n\n``` javascript\n    export default class Map extends Component {\n    \n      static navigationOptions = ({navigation}) =\u003e ({\n        headerTitle: 'Map',\n        headerStyle: {\n          backgroundColor: '#007ff5'\n        },\n        headerTitleStyle: {\n          color: '#FFF'\n        }\n      });\n    \n      // next: add the code for initializing the state\n    }\n```\n\nNext, initialize the state:\n\n``` javascript\n    state = {\n      start_location: null, // the coordinates (latitude and longitude values) of the user's origin\n      end_location: null, // the coordinates of the user's destination\n      region: default_region, // the region displayed in the map\n      from: '', // the name of the place where the user is from (origin)\n      to: '', // the name of the place where the user is going (destination)\n      rider_location: null, // the coordinates of the rider's current location\n      hiker_location: null, // the coordinates of the hiker's origin\n      is_loading: false, // for controlling the visibility of the ActivityIndicator\n      has_journey: false // whether the rider has accepted a hiker's request or a hiker's request has been accepted by a rider \n    }\n    \n    // next: add the constructor\n```\n\nNext, add the constructor:\n\n``` javascript\n    constructor(props) {\n      super(props);\n      this.from_region = null;\n      this.watchId = null; // unique ID for the geolocation watcher. Storing it in a variable allows us to stop it at a later time (for example: when the user is done using the app)\n      this.pusher = null; // variable for storing the Pusher instance\n      this.user_channel = null; // the Pusher channel for the current user\n      this.journey_id = null; // the hiker's route ID\n      this.riders_channel = []; // if current user is a hiker, the value of this will be the riders channel\n      this.users_channel = null; // the current user's channel\n      this.hiker = null // for storing the hiker's origin coordinates; primarily used for getting the distance between the rider and the hiker\n    }\n```\n\nOnce the component is mounted, you want to get the `username` that was passed from the Home page earlier. This `username` is used later on as the unique key for identifying each user that connects to Pusher Channels:\n\n``` javascript\n    componentDidMount() {\n      const { navigation } = this.props;\n      const username = navigation.getParam('username');\n    \n      this.pusher = new Pusher(pusher_app_key, {\n        authEndpoint: `${base_url}/pusher-auth.php`,\n        cluster: pusher_app_cluster,\n        encrypted: true\n      });  \n      \n      // next: add the code for subscribing to the current user's own channel\n    }  \n```\n\nNext, add the code for subscribing to the current user's own channel. This allows the user to send and receive data in realtime through this channel. In the hiker’s case, they use it to make a request to the matching rider. In the rider’s case, they use it to receive requests coming from hikers as well as sending an acceptance and their current location to the hiker:\n\n``` javascript\n    this.users_channel = this.pusher.subscribe(`private-user-${username}`); // note that the private-* is required when using private channels \n```\n\nWhen a rider receives a request, the code below is executed. This alerts the rider that someone wants to ride with them. They can either accept or decline it:\n\n``` javascript\n    this.users_channel.bind('client-rider-request', (hiker) =\u003e {\n    \n      Alert.alert(\n        `${hiker.username} wants to ride with you`,\n        `Pickup: ${hiker.origin} \\nDrop off: ${hiker.dest}`,\n        [\n          {\n            text: \"Decline\",\n            onPress: () =\u003e {\n              // do nothing\n            },\n            style: \"cancel\"\n          },\n          {\n            text: \"Accept\", \n            onPress: () =\u003e {\n              this.acceptRide(hiker);\n            }\n          },\n        ],\n        { cancelable: false } // no cancel button\n      );\n    \n    });\n    \n    // next: add code for getting the user's origin\n```\n\nNote that in the code above, we’re not really handling declines. This is to keep the focus on the key feature of the app.\n\nNext, get the user’s current location via the Geolocation API. At this point, we can already use the API without problems (unless the user didn’t approve the permission). We’ll just focus our attention on the “happy path” to keep things simple so we’ll assume that the user approved the permission request:\n\n``` javascript\n    navigator.geolocation.getCurrentPosition(\n      (position) =\u003e {\n        // get the region (this return the latitude and longitude delta values to be used by React Native Maps)\n        var region = regionFrom(\n          position.coords.latitude, \n          position.coords.longitude, \n          position.coords.accuracy\n        );\n        \n        // convert the coordinates to the descriptive name of the place\n        Geocoder.from({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        })\n        .then((response) =\u003e {\n          // the response object is the same as what's returned in the HTTP API: https://developers.google.com/maps/documentation/geocoding/intro\n          \n          this.from_region = region; // for storing the region in case the user presses the \"reset\" button\n          \n          // update the state to indicate the user's origin on the map (using a marker)\n          this.setState({\n            start_location: {\n              latitude: position.coords.latitude,\n              longitude: position.coords.longitude\n            },\n            region: region, // the region displayed on the map\n            from: response.results[0].formatted_address // the descriptive name of the place\n          });\n    \n        });\n    \n      }\n    );\n```\n\nNext, add the `acceptRide()` function. This function is executed when the rider accepts a hiker’s ride request:\n\n``` javascript\n    acceptRide = (hiker) =\u003e {\n      \n      const username = this.props.navigation.getParam('username');\n      \n      let rider_data = {\n        username: username,\n        origin: this.state.from, // descriptive name of the rider's origin\n        dest: this.state.to, // descriptive name of the rider's destination\n        coords: this.state.start_location // the rider's origin coordinates\n      };\n    \n      this.users_channel.trigger('client-rider-accepted', rider_data); // inform hiker that the rider accepted their request; send along the rider's info\n      \n      // make a request to delete the route so other hikers can no longer search for it (remember the 1:1 ratio for a rider to hiker?)\n      axios.post(`${base_url}/delete-route.php`, {\n        username: username\n      })\n      .then((response) =\u003e {\n        console.log(response.data);\n      })\n      .catch((err) =\u003e {\n        console.log('error excluding rider: ', err);\n      });\n    \n      this.hiker = hiker; // store the hiker's info\n      \n      // update the state to stop the loading animation and show the hiker's location\n      this.setState({\n        is_loading: false,\n        has_journey: true,\n        hiker_location: hiker.origin_coords\n      });\n      \n    }\n```\n\nNext, add the function for rendering the UI:\n\n``` javascript\n    render() {\n      const { navigation } = this.props;\n      // get the navigation params passed from the Home page earlier\n      const action = navigation.getParam('action'); // action is either \"ride\" or \"hike\"\n      const username = navigation.getParam('username');\n    \n      let action_button_label = (action == 'share') ? 'Share Ride' : 'Search Ride';\n    \n      // next: add code for rendering the UI\n    }\n```\n\nThe map UI contains the following:\n\n- `MapView` component for rendering the map. Inside it are the following: \n  - `Marker` component for showing the origin and destination of the user, as well as for showing the location of the rider (if the user is a hiker), or the hiker (if the user is a rider).\n  - `MapViewDirections` component for showing the route from the origin to the destination of the current user.\n- `GooglePlacesAutocomplete` component for rendering an auto-complete text field for searching and selecting a destination.\n- `ActivityIndicator` for showing a loading animation while the rider waits for someone to request a ride, or when the hiker waits for the app to find a matching rider.\n- `Tapper` component for sharing a ride or searching a ride.\n- `Tapper` component for resetting the selection (auto-complete text field and marker).\n\n``` javascript\n    return (\n      \u003cView style={styles.container}\u003e\n    \n        \u003cMapView\n          style={styles.map}\n          region={this.state.region}\n          zoomEnabled={true}\n          zoomControlEnabled={true}\n        \u003e\n          {\n            this.state.start_location \u0026\u0026\n            \u003cMarker coordinate={this.state.start_location}\u003e\n              \u003cCallout\u003e\n                \u003cText\u003eYou are here\u003c/Text\u003e\n              \u003c/Callout\u003e\n            \u003c/Marker\u003e\n          }\n    \n          {\n            this.state.end_location \u0026\u0026\n            \u003cMarker\n              pinColor=\"#4196ea\"\n              coordinate={this.state.end_location}\n              draggable={true}\n              onDragEnd={this.tweakDestination}\n            /\u003e\n          }\n    \n          {\n            this.state.rider_location \u0026\u0026\n            \u003cMarker \n              pinColor=\"#25a25a\"\n              coordinate={this.state.rider_location}\n            \u003e\n              \u003cCallout\u003e\n                \u003cText\u003eRider is here\u003c/Text\u003e\n              \u003c/Callout\u003e\n            \u003c/Marker\u003e\n          }\n    \n          {\n            this.state.hiker_location \u0026\u0026\n            \u003cMarker \n              pinColor=\"#25a25a\"\n              coordinate={this.state.hiker_location}\n            \u003e\n              \u003cCallout\u003e\n                \u003cText\u003eHiker is here\u003c/Text\u003e\n              \u003c/Callout\u003e\n            \u003c/Marker\u003e\n          }\n          \n          {\n            this.state.start_location \u0026\u0026 this.state.end_location \u0026\u0026\n            \u003cMapViewDirections\n              origin={{\n                'latitude': this.state.start_location.latitude,\n                'longitude': this.state.start_location.longitude\n              }}\n              destination={{\n                'latitude': this.state.end_location.latitude,\n                'longitude': this.state.end_location.longitude\n              }}\n              strokeWidth={5}\n              strokeColor={\"#2d8cea\"}\n              apikey={google_api_key}\n            /\u003e\n          }\n          \n        \u003c/MapView\u003e\n    \n        \u003cView style={styles.search_field_container}\u003e\n        \n          \u003cGooglePlacesAutocomplete\n            ref=\"endlocation\"\n            placeholder='Where do you want to go?'\n            minLength={5} \n            returnKeyType={'search'} \n            listViewDisplayed='auto' \n            fetchDetails={true}            \n            onPress={this.selectDestination}\n          \n            query={{\n              key: google_api_key,\n              language: 'en', \n            }}\n            \n            styles={{\n              textInputContainer: {\n                width: '100%',\n                backgroundColor: '#FFF'\n              },\n              listView: {\n                backgroundColor: '#FFF'\n              }\n            }}\n            debounce={200} \n          /\u003e\n        \u003c/View\u003e\n    \n        \u003cActivityIndicator size=\"small\" color=\"#007ff5\" style={{marginBottom: 10}} animating={this.state.is_loading} /\u003e\n        \n        {\n          !this.state.is_loading \u0026\u0026 !this.state.has_journey \u0026\u0026\n          \u003cView style={styles.input_container}\u003e\n    \n            \u003cTapper \n              title={action_button_label}\n              color={\"#007ff5\"}\n              onPress={() =\u003e {\n                this.onPressActionButton();\n              }} /\u003e\n           \n            \u003cTapper\n              title={\"Reset\"}\n              color={\"#555\"}\n              onPress={this.resetSelection} \n            /\u003e\n            \n          \u003c/View\u003e\n        }\n    \n      \u003c/View\u003e\n    );\n```\n\nThe code above should be pretty self-explanatory. If you’re unsure what a specific prop does, how the component works, or what children is it expecting, you can always check the Github repo of the package we’re using.\n\nNext, let’s move on to the functions used in the UI. The `resetSelection()` is executed when the reset button is pressed by the user. This empties the auto-complete text field for searching for places, it also updates the state so the UI reverts back to its previous state before the destination was selected. This effectively removes the marker showing the user’s destination, as well as the route going to it:\n\n``` javascript\n    resetSelection = () =\u003e {\n      this.refs.endlocation.setAddressText('');\n      this.setState({\n        end_location: null,\n        region: this.from_region,\n        to: ''\n      });\n    }\n```\n\nThe `tweakDestination()` function is executed when the user drops the destination marker somewhere else:\n\n``` javascript\n    tweakDestination = () =\u003e {\n      // get the name of the place\n      Geocoder.from({\n        latitude: evt.nativeEvent.coordinate.latitude,\n        longitude: evt.nativeEvent.coordinate.longitude\n      })\n      .then((response) =\u003e {\n        this.setState({\n          to: response.results[0].formatted_address\n        });\n      });\n      \n      this.setState({\n        end_location: evt.nativeEvent.coordinate\n      });\n    }\n```\n\nThe `selectDestination()` function is executed when the user selects their destination. This function will update the state so it shows the user’s destination in the map:\n\n``` javascript\n    selectDestination = (data, details = null) =\u003e {\n    \n      const latDelta = Number(details.geometry.viewport.northeast.lat) - Number(details.geometry.viewport.southwest.lat)\n      const lngDelta = Number(details.geometry.viewport.northeast.lng) - Number(details.geometry.viewport.southwest.lng)\n    \n      let region = {\n        latitude: details.geometry.location.lat,\n        longitude: details.geometry.location.lng,\n        latitudeDelta: latDelta,\n        longitudeDelta: lngDelta\n      };\n    \n      this.setState({\n        end_location: {\n          latitude: details.geometry.location.lat,\n          longitude: details.geometry.location.lng,\n        },\n        region: region,\n        to: this.refs.endlocation.getAddressText() // get the full address of the user's destination\n      });\n    \n    }\n```\n\nWhen the user presses the **Share a Ride** or **Search a Ride** button, the `onPressActionButton()` function is executed. This executes either the `shareRide()` function or the `hikeRide()` function depending on the action selected from the Home page earlier:\n\n``` javascript\n    onPressActionButton = () =\u003e {\n    \n      const action = this.props.navigation.getParam('action');\n      const username = this.props.navigation.getParam('username');\n    \n      this.setState({\n        is_loading: true\n      });\n    \n      if(action == 'share'){\n        this.shareRide(username);\n      }else if(action == 'hike'){\n        this.hikeRide(username);      \n      }\n    \n    }\n```\n\nThe `shareRide()` function is executed when a rider shares their ride after selecting a destination. This makes a request to the server to save the route. The response contains the unique ID assigned to the rider’s route. This ID is assigned as the value of `this.journey_id`. This will be used later to:\n\n- Make a request to the server to update the route record stored in the Elasticsearch index. \n- Know when to start doing something with the current location data. This is because the current position begins to be watched right after the user presses on the **Share a Ride** button as you’ll see on the code block after this:\n\n``` javascript\n    shareRide = (username) =\u003e {\n    \n      axios.post(`${base_url}/save-route.php`, {\n        username: username,\n        from: this.state.from, \n        to: this.state.to, \n        start_location: this.state.start_location,\n        end_location: this.state.end_location\n      })\n      .then((response) =\u003e {\n        this.journey_id = response.data.id;\n        Alert.alert(\n          'Ride was shared!',\n          'Wait until someone makes a request.'\n        );\n      })\n      .catch((error) =\u003e {\n        console.log('error occurred while saving route: ', error);\n      });\n      \n      // next: add code for watching the rider's current location\n    \n    }\n```\n\nNext, start watching the user’s current location. Note that we won’t actually do anything with the location data unless the rider has already shared their ride and that they have already approved a hiker to ride with them. Once both conditions are met, we make a request to the server to update the previously saved route with the rider’s current location. This way, when a hiker searches for a ride, the results will be biased based on the rider’s current location and not their origin:\n\n``` javascript\n    this.watchId = navigator.geolocation.watchPosition(\n      (position) =\u003e {\n      \n        let latitude = position.coords.latitude;\n        let longitude = position.coords.longitude;\n        let accuracy = position.coords.accuracy;\n    \n        if(this.journey_id \u0026\u0026 this.hiker){ // needs to have a destination and a hiker\n          // update the route with the rider's current location\n          axios.post(`${base_url}/update-route.php`, {\n            id: this.journey_id,\n            lat: latitude,\n            lon: longitude\n          })\n          .then((response) =\u003e {\n            console.log(response);\n          });\n    \n          // next: add code for sending rider's current location to the hiker\n        \n        }\n    \n      },\n      (error) =\u003e {\n        console.log('error occured while watching position: ', error);\n      },\n      { \n        enableHighAccuracy: true, // get more accurate location\n        timeout: 20000, // timeout after 20 seconds of not being able to get location\n        maximumAge: 2000, // location has to be atleast 2 seconds old for it to be relevant\n        distanceFilter: 10 // allow up to 10-meter difference from the previous location before executing the callback function again\n      }\n    );\n    \n    // last: add code for resetting the UI after 5 minutes of sharing a ride \n```\n\nNext, we send a `client-rider-location` event to the rider’s own channel. Later, we’ll have the hiker subscribe to the rider’s channel (the one they matched with) so that they’ll receive the location updates:\n\n``` javascript\n    let location_data = {\n      username: username,\n      lat: latitude,\n      lon: longitude,\n      accy: accuracy \n    };\n    \n    this.users_channel.trigger('client-rider-locationchange', location_data); // note: client-* is required when sending client events through Pusher\n    \n    // update the state so that the rider’s current location is displayed on the map and indicated with a marker\n    this.setState({\n      region: regionFrom(latitude, longitude, accuracy),\n      start_location: {\n        latitude: latitude,\n        longitude: longitude\n      }\n    });\n    \n    // next: add code for updating the app based on how near the rider and hiker are from each other\n```\n\nNext, we need to get the difference (in meters) between the rider’s coordinates and the hiker’s origin:\n\n``` javascript\n    let diff_in_meters = getLatLonDiffInMeters(latitude, longitude, this.hiker.origin_coords.latitude, this.hiker.origin_coords.longitude);\n    \n    if(diff_in_meters \u003c= 20){\n      this.resetUI();\n    }else if(diff_in_meters \u003c= 50){\n      Alert.alert(\n        'Hiker is near',\n        'Hiker is around 50 meters from your current location'\n      );\n    }\n```\n\nNext, add the code for resetting the UI after five minutes without anyone requesting to share a ride with the rider:\n\n``` javascript\n    setTimeout(() =\u003e {\n      this.resetUI();\n    }, share_timeout);\n```\n\nHere’s the code for resetting the UI:\n\n``` javascript\n    resetUI = () =\u003e {\n    \n      this.from_region = null;\n      this.watchId = null; \n      this.pusher = null; \n      this.user_channel = null; \n      this.journey_id = null;\n      this.riders_channel = []; \n      this.users_channel = null; \n      this.hiker = null;\n    \n      this.setState({\n        start_location: null,\n        end_location: null,\n        region: default_region,\n        from: '',\n        to: '',\n        rider_location: null, \n        hiker_location: null,\n        is_loading: false,\n        has_journey: false\n      });\n      \n      this.props.navigation.goBack(); // go back to the Home page\n    \n      Alert.alert('Awesome!', 'Thanks for using the app!');\n    \n    }\n```\n\nNow let’s move on to the hiker’s side of things. When the hiker presses the **Search a Ride** button, the `hikeRide()` function is executed. This function is executed every five seconds until it finds a rider which matches the hiker’s route. If a rider cannot be found within ten minutes, the function stops. Once the server returns a suitable rider, it responds with the rider’s information (username, origin, destination, coordinates). This is then used to subscribe to the rider’s channel so the hiker can request for a ride and receive location updates. Note that this is done automatically, so the hiker doesn’t have control over who they share a ride with:\n\n``` javascript\n    hikeRide = (username) =\u003e {\n    \n      var interval = setInterval(() =\u003e {\n        // make a request to the server to get riders that matches the hiker's route\n        axios.post(`${base_url}/search-routes.php`, {\n          origin: this.state.start_location,\n          dest: this.state.end_location\n        })\n        .then((response) =\u003e {\n          \n          if(response.data){\n    \n            clearInterval(interval); // assumes the rider will accept the request\n            \n            let rider = response.data; // the rider's info\n            \n            // subscribe to the rider's channel so the hiker can make a request and receive updates from the rider\n            this.riders_channel = this.pusher.subscribe(`private-user-${rider.username}`);\n            \n            this.riders_channel.bind('pusher:subscription_succeeded', () =\u003e {\n              // when subscription succeeds, make a request to the rider to share the ride with them\n              this.riders_channel.trigger('client-rider-request', {\n                username: username, // username of the hiker\n                origin: this.state.from, // descriptive name of the hiker's origin\n                dest: this.state.to, // descriptive name of the hiker's destination\n                origin_coords: this.state.start_location // coordinates of the hiker's origin\n              });\n            });\n    \n            // next: add code for listening for when the rider accepts their request\n          }      \n        })\n        .catch((error) =\u003e {\n          console.log('error occurred while searching routes: ', error);\n        });\n    \n      }, 5000);\n    \n      setTimeout(() =\u003e {\n        clearInterval(interval);\n        this.resetUI();\n      }, ten_minutes);\n    \n    }\n```\n\nOnce the rider accepts the ride request, the function below is executed:\n\n``` javascript\n    this.riders_channel.bind('client-rider-accepted', (rider_data) =\u003e {\n      Alert.alert(\n        `${rider_data.username} accepted your request`,\n        `You will now receive updates of their current location`\n      );\n      \n      // update the map to show the rider's origin\n      this.setState({\n        is_loading: false,\n        has_journey: true,\n        rider_location: rider_data.coords\n      });\n    \n      // next: add code for subscribing to the rider's location change\n    });\n```\n\nAs you’ve seen earlier, when the rider’s location changes, it triggers an event called `client-rider-location-change`. Any user who is subscribed to the rider’s channel and is listening for that event will get the location data in realtime:\n\n``` javascript\n    this.riders_channel.bind('client-rider-locationchange', (data) =\u003e {\n      // update the map with the rider's current location\n      this.setState({\n        region: regionFrom(data.lat, data.lon, data.accy),\n        rider_location: {\n          latitude: data.lat,\n          longitude: data.lon\n        }\n      });\n      \n      let hikers_origin = this.state.start_location;\n      let diff_in_meters = getLatLonDiffInMeters(data.lat, data.lon, hikers_origin.latitude, hikers_origin.longitude);\n        \n      if(diff_in_meters \u003c= 20){\n        this.resetUI();\n      }else if(diff_in_meters \u003c= 50){\n        Alert.alert(\n          'Rider is near',\n          'Rider is around 50 meters from your location'\n        );\n      }\n    });\n```\n\nAdd the styles for the `Map` page:\n\n``` javascript\n    const styles = StyleSheet.create({\n      container: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        justifyContent: 'flex-end',\n        alignItems: 'center',\n      },\n      map: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n      },\n      search_field_container: {\n        height: 150, \n        width: device_width, \n        position: 'absolute', \n        top: 10\n      },\n      input_container: {\n        alignSelf: 'center',\n        backgroundColor: '#FFF',\n        opacity: 0.80,\n        marginBottom: 25\n      }\n    });\n```\n\n### Location library\n\nHere’s the code for getting the latitude and longitude delta values. As you have seen from the code earlier, this function is mainly used to get the region displayed on the map:\n\n``` javascript\n    // Ridesharer/app/lib/location.js\n    export function regionFrom(lat, lon, accuracy) {\n      const oneDegreeOfLongitudeInMeters = 111.32 * 1000;\n      const circumference = (40075 / 360) * 1000;\n    \n      const latDelta = accuracy * (1 / (Math.cos(lat) * circumference));\n      const lonDelta = (accuracy / oneDegreeOfLongitudeInMeters);\n    \n      return {\n        latitude: lat,\n        longitude: lon,\n        latitudeDelta: Math.max(0, latDelta),\n        longitudeDelta: Math.max(0, lonDelta)\n      };\n    }\n```\n\nAnd here’s the function for getting the difference (in meters) between two coordinates. This is mainly used for notifying the users when they’re already near each other, and to reset the app UI when they’re already very near each other:\n\n``` javascript\n    export function getLatLonDiffInMeters(lat1, lon1, lat2, lon2) {\n      var R = 6371; // radius of the earth in km\n      var dLat = deg2rad(lat2-lat1);  // deg2rad below\n      var dLon = deg2rad(lon2-lon1); \n      var a = \n        Math.sin(dLat/2) * Math.sin(dLat/2) +\n        Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * \n        Math.sin(dLon/2) * Math.sin(dLon/2)\n        ; \n      var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \n      var d = R * c; // distance in km\n      return d * 1000;\n    }\n```\n\nThe `deg2rad()` function used above converts the degrees value to radians:\n\n``` javascript\n    function deg2rad(deg) {\n      return deg * (Math.PI/180)\n    }\n```\n\n## Running the app\n\nBefore you can run the app on Android, you need to make sure you have the following Android SDK packages installed, you can find these under SDK Tools on the SDK manager:\n\n- Google Play services\n- Android Support Repository\n- Google Repository\n\nIf you’re going to test the app on Genymotion, you need to install Google Play services first. Since the app is using Google Maps, you need Google Play services for the feature to work. If you have version 2.10 or above, they provide an easy way to install it. Just click on **Open GAPPS** on a running emulator instance and go through the installation wizard. After that, restart the device and you should be good to go:\n\n![carpooling-react-native-install-google-play-on-genymotion](//images.ctfassets.net/1es3ne0caaid/7cjYmvjaRG4UQQImAquy4S/67f48d96692b5bbfbedcda652e964f97/carpooling-react-native-install-google-play-on-genymotion.png)\n\nTo run the app on Android, execute the following command. This will run the app either on an opened emulator instance (for example: Genymotion) or an Android device (if you have connected one):\n\n```\n    react-native run-android\n```\n\nIf you’re having problems with getting the app to run on Android, be sure to check my article on Debugging common React Native issues on Android.\n\nFor iOS, you just have to make sure you have the latest version of Xcode installed. Note that if you want to run the app on a device, you can only do it via Xcode by opening the `.xcworkspace` file. \n\nTo run the app on an iOS device, select your device on Xcode and click the big play button.\n\nTo run the app in the iOS simulator, you can also do it via Xcode using the method above. But if you want to run it from the terminal, you can execute the following command from the root directory of your project:\n\n```\n    react-native run-ios\n```\n\nIf you want to run the app on a specific simulator, you first have to list which devices are available:\n\n```\n    xcrun simctl list devicetypes\n```\n\nThis will return the list of devices:\n\n![carpooling-react-native-device-list](//images.ctfassets.net/1es3ne0caaid/4joEh2Gg80Y2KsQMuCOuWe/114b76551af9ee51f19f96edf39f6e2f/carpooling-react-native-device-list.png)\n\nYou can then copy the device name (for example: iPhone 5s) and specify it as a value for the `--simulator` option:\n\n```\n    react-native run-ios --simulator=\"iPhone 5s\"\n```\n\nIf you’re having problems with running the app on an iOS simulator or device, be sure to check my article on Debugging common React Native issues on iOS.\n\n## Conclusion\n\nThat’s it! In this series, you’ve learned how to create a carpooling app with React Native. Along the way, you also learned the following:\n\n- How to use axios to make requests to the server.\n- How to use React Native’s Geolocation feature.\n- How to add Google Play Services to Genymotion.\n- How to use Genymotion’s GPS emulation tool.\n- How to use Pusher Channels.\n- How to use Google’s Geocoding API.\n\nYou can find all the codes used in this series on this [GitHub repo](https://github.com/anchetaWern/Ridesharer).","metaTitle":"Create a carpooling app with React Native - Part 2","metaDescription":"Build a carpooling app using React Native, Docker and Google SDKs and APIs. In the second part, create the frontend using React Native and demo it with Genymotion."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5aeEXGAZZeeAQGmMc4mggo","type":"Entry","createdAt":"2018-06-05T12:52:45.191Z","updatedAt":"2020-06-19T14:25:43.622Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an iOS chat app using Swift and Chatkit - Part 3: Building the iOS app","url":"ios-chat-app-swift-chatkit-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/pusher/sample-chatroom-ios-chatkit","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}}],"reviewDate":"2018-06-05","description":"Build a chat app for iOS, with a Laravel API backend. In part three, build the iOS application. By the end of this section you will have a working app with instant chat functionality.","prerequisite":"To follow this series you will need Xcode, Cocoapods, PHP and Laravel installed on your machine. Some knowledge of Xcode and Swift will be helpful.","content":"We previously created the API backend we need our iOS application to connect to. In this part, we will create the application itself using Xcode and Swift. We will be building out the application based on the prototypes we created in the first part of the series.\n\nHere are the prototypes we made using our prototyping tool:\n\n![Create-iOS-Chat-App-Using-Chatkit-prototype](//images.ctfassets.net/1es3ne0caaid/2OGOxROMGsikAgIMAksa66/810bd07140a87a274ee6f983235342c4/Create-iOS-Chat-App-Using-Chatkit-prototype.png)\n\n Let’s go through some requirements you need to have to follow this part of the article.\n\n## Creating our app’s storyboard in Xcode\n\nWe previously created the scenes of our application in Xcode using the Clean Swift templates. Now we are going to work on creating our storyboards and linking them to the view controllers we created.\n\n### Creating the launch scene\n\nFirst add a Navigation View Controller and a View Controller to the storyboard as seen below. The Navigation Controller will be the entry point to our application. Set the custom class for the second View Controller as the `LaunchViewController` we created in the first part of the article.\n\n![Create-iOS-Chat-App-Using-Chatkit-launch-scene-controller](//images.ctfassets.net/1es3ne0caaid/xgFRNtuy3YGiiSUMWsAYW/3e22912c68e4bcd6f09012d0c38d7ee0/Create-iOS-Chat-App-Using-Chatkit-launch-scene-controller.png)\n\nWe will use the `LaunchViewController` to determine which initial screen to present to the user when the app is launched. If the user is logged in we’ll present the contacts list, if not, we’ll present the Welcome scene so the user can log in or sign up.\n\n### Creating the welcome scene\nThe next scene we will create is the welcome scene. When a user is not logged in, they will be redirected to this scene. From here they can sign up or log in to their account. In the `Main.storyboard` add the View Controller and create a “Present Modally” manual segue from the launch controller to the controller you just created.\n\n![Create-iOS-Chat-App-Using-Chatkit-welcome-scene](//images.ctfassets.net/1es3ne0caaid/P1C4QxlOgKmQOwEkckUqs/31f6d0f2a15493825d2d33af23caaabe/Create-iOS-Chat-App-Using-Chatkit-welcome-scene.png)\n\nAfter creating the welcome view controller, you can start designing it to look like the prototype using a combination of `UILabel`s, `UIButton`s, and `UIView`s. Then set the name of the manual segue to **Welcome**. Finally, set the custom class for the view controller to `WelcomeViewController`\n\n### Creating the signup and login scene\n\nNext create two new View Controllers. The first will be for login and the second will be for sign up. Set theView Controller for the Signup controller to `SignupViewController` and the custom class for the login View Controller to `LoginViewController`.\n\nCreate a “Present Modally” segue from the **Sign In** button to the `LoginViewController` and from the **Don’t have an account? Sign up here** button to the `SignupViewController`. Name the segues **Login** and **Signup**.\n\n![Create-iOS-Chat-App-Using-Chatkit-signup-login-scene](//images.ctfassets.net/1es3ne0caaid/3Yp5Dp0gNaEG24i0aAWKcE/bddb6f073a6c86d080affba594de08be/Create-iOS-Chat-App-Using-Chatkit-signup-login-scene.png)\n\nIn the Signup view create three input fields and create an `@IBOutlet` for them in the `SignupViewController`, we named ours `emailTextField`, `nameTextField` and `passwordTextField`. Create an `@IBAction` called `cancelButtonWasPressed` for the cancel button and `signupButtonWasPressed`  for the sign up button.\n\nIn the login view, we will follow almost the same steps as the sign up controller, but, this time the  `@IBAction` will be named `loginButtonWasPressed` and there will be no `nameTextField`.\n\n### Creating the ListContacts and Chatroom scenes\n\nNext, create a Navigation controller and make sure the root controller for it is a `UITableViewController`. Create a manual segue named **ListMessages** from the `LaunchViewController` to the navigation controller and set the custom class of the `UITableViewController` to `ListContactsViewController`.\n\nCreate a “Present Modally” manual segue named **MainNavigator** between the navigation controller and the Login and Signup scenes. \n\nLastly, create a new `UIViewController` and create a segue named **Chatroom** from the Prototype Cells to the new View Controller, then set the custom class of the View Controller to `ChatroomViewController`.\n\nHere is a screenshot of our entire storyboard:\n\n![Create-iOS-Chat-App-Using-Chatkit-storyboard](//images.ctfassets.net/1es3ne0caaid/4bUz80F2Io4CSKSWA60mY0/131de2d7b16dd933cedd7b68eff1fd26/Create-iOS-Chat-App-Using-Chatkit-storyboard.png)\n\n## Adding functionality to our scenes\n\nNow that we have our scenes in place and hooked up to our View Controllers, let’s start adding the functionality to them. We will start at the very first piece of code that gets called when the application is launched: `AppDelegate`.\n\nIn the `AppDelegate` file, right below the `import` statement add the code block below:\n\n``` swift\n    struct AppConstants {\n        static let ENDPOINT: String = \"http://127.0.0.1:8000\"\n        static let CLIENT_ID: Int = API_CLIENT_ID\n        static let CLIENT_SECRET: String = \"API_CLIENT_SECRET\"\n        static let CHATKIT_INSTANCE_LOCATOR: String = \"CHATKIT_INSTANCE_LOCATOR\"\n    }\n```\n\nIn the `struct` above, we define some constants for our application. We will use this as some configuration value handler for our application. Replace the values for the `API_CLIENT_ID`, `API_CLIENT_SECRET` and `CHATKIT_INSTANCE_``LOCATOR` with the actual values.\n\n\n\u003e 💡  You can get the `API_CLIENT_*` key values from when you were setting up Passport in the previous part of the tutorial, and you can get the `CHATKIT_INSTANCE_``LOCATOR` from the Chatkit dashboard.\n\n### Launch scene\n\nOpen the `Scenes/Launch/LaunchSceneController` file and let us start adding some functionality to the class.\n\nIn the file, replace the code with [this](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Launch/LaunchViewController.swift)\n\nWe have simplified most of the code that comes with the Clean Swift template. In the `viewDidLoad` method, we check to see if the user is logged in using an `Authenticator` class, which we will create later. If the user is logged in then we route the user to the list messages page else we go to the welcome page.\n\nNext, open the `LaunchRouter` class and in the file paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Launch/LaunchRouter.swift)\n\nIn the router we have defined the `routeToWelcome` and `routeToListContacts` methods. Both methods do what is necessary to route the user to either the **Welcome** or **MainNavigator** segue.\n\nThis is all we need to do for the Launch scene. You can delete the other template files in the `Scenes/Launch` directory as we will not be using them.\n\n### Welcome scene\n\nFor our Welcome scene we do not need to do anything actually as the scene has no logic. In the `WelcomeViewController` you can just paste the code below:\n\n``` swift\n    import UIKit\n    \n    class WelcomeViewController: UIViewController {\n    }\n```\n\nYou can delete the other template files in the Welcome scene as we will not be needing them and they serve no purpose.\n\n### Login scene\n\nFor our Login scene we will start by adding the logic to our `LoginModels` class. The models will help us format the response from the API to what our application will be able to consume.\n\nIn the `LoginModels` file paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Login/LoginModels.swift). \n\nIn the code above we have defined a series of `struct`s and in them we have `Request` and `Response`. The `Request` standardises the parameters required for the request to the login endpoint while the `Response` takes the raw response from the API and saves them as either a  `ChatkitToken` or `UserToken` object. We will define the `ChatToken` and the `UserToken` object later in the article\n\nNext open the `LoginInteractor` and paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Login/LoginInteractor.swift) into the file.\n\nIn this class we have a `login` method that just calls a `login` method on the `UsersWorker` class. Depending on the response from that call, we either show a login error or we route to the contacts list.\n\nNext, open the `LoginRouter` class and in the file paste the following code:\n\n``` swift\n    import UIKit\n    \n    @objc protocol LoginRoutingLogic {\n        func routeToListContacts()\n    }\n    \n    class LoginRouter: NSObject, LoginRoutingLogic {\n        weak var viewController: LoginViewController?\n    \n        func routeToListContacts() {\n            let storyboard = UIStoryboard(name: \"Main\", bundle: nil)\n            let destinationVC = storyboard.instantiateViewController(withIdentifier: \"MainNavigator\") as! UINavigationController\n            \n            viewController!.show(destinationVC, sender: nil)\n        }\n    }\n```\n\nThe router above has just one method. This method routes the app to the list contacts page when called.\n\nThe last class we want to edit for this scene is the `LoginViewController`. This is the class that pieces the other classes above. Open the file and paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Login/LoginViewController.swift) into the file.\n\nIn the view controller we have the usual set up methods used by Clean Swift but we also have the `@IBAction`s and `@IBOutlet`s we created when we were creating our storyboards. \n\nIn the `cancelButtonPressed` method we just dismiss the login screen modal, in the `loginButtonPressed` method we call the `login` method on the interactor, and in the `showValidationError` method we show an alert with an error message.\n\n### Signup scene\n\nFor the Login scene functionality we will start with the models. Open the `SignupModels` file in the `Scene/Signup` directory and paste the code below into it:\n\n``` swift\n    import Foundation\n    \n    enum Signup {    \n        struct Request {\n            var name: String\n            var email: String\n            var password: String\n        }\n    \n        struct Response {\n            var user: User?\n            \n            init(data: [String:Any]) {\n                self.user = User(\n                    id: data[\"id\"] as! Int,\n                    name: data[\"name\"] as! String,\n                    email: data[\"email\"] as! String,\n                    chatkit_id: data[\"chatkit_id\"] as! String\n                )\n            }\n        }\n    }\n```\n\nIn the models we have Request and Response structs. Their functionality was described above.\n\nNext, paste the code below into the `SignupInteractor` class in the same directory:\n\n``` swift\n    import Foundation\n    \n    protocol SignupBusinessLogic {\n        func createAccount(request: Signup.Request)\n    }\n    \n    class SignupInteractor: SignupBusinessLogic {\n        var viewController: SignupFormErrorLogic?\n        var router: (NSObjectProtocol \u0026 SignupRoutingLogic)?\n        var worker = UsersWorker()\n    \n        func createAccount(request: Signup.Request) -\u003e Void {\n            self.worker.signup(request: request) { user, error in\n                guard error == nil else {\n                    self.viewController?.showValidationError(\"Error creating account!\")\n                    return\n                }\n                \n                self.router?.routeToListContacts()\n            }\n        }\n    }\n```\n\nIn the `createAccount` method, we call the `signup` method on the `UsersWorker` and then depending on the response we either route to the contacts list or show an error.\n\nNext, open the router class `SignupRouter` and paste the code below into it:\n\n``` swift\n    import UIKit\n    \n    @objc protocol SignupRoutingLogic {\n        func routeToListContacts()\n    }\n    \n    class SignupRouter: NSObject, SignupRoutingLogic {\n        weak var viewController: SignupViewController?\n        \n        func routeToListContacts() {\n            let storyboard = UIStoryboard(name: \"Main\", bundle: nil)\n            let destinationVC = storyboard.instantiateViewController(withIdentifier: \"MainNavigator\") as! UINavigationController\n            \n            viewController!.show(destinationVC, sender: nil)\n        }\n    }\n```\n\nAs in the login router, this method just routes the user to the contacts screen using the `MainNavigator` segue.\n\nFor the `SignupViewController`, use [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Signup/SignupViewController.swift).\n\nIn this view controller, we set up the Clean Swift components then in the `cancelButtonPressed` method we dismiss the signup modal and in the `signupButtonPressed` method we create the account using the interactor. The `showValidationError` shows an alert when it is called, usually when there is an error signing up.\n\n### ListContacts scene\n\nThe ListContacts scene is supposed to show a list of the contacts available to chat with. Open the `ListContactsModels` file and paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/ListContacts/ListContactsModels.swift) into the file.\n\nIn the code above we have the usual `Request` and `Response` (explained above). We also have a `ParseContact` struct that takes the raw data and an array of `rooms`. It parses it into a `Contact` model object with `User` and `PCRoom` object. We reference this in the `Response`s above so as to avoid duplication.\n\nWe also have a `ViewModel` struct that we use to format the data in a way the presenter needs to display the data to the user.\n\nNext open the `ListContactsInteractor` class and paste the code below into it: https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/ListContacts/ListContactsInteractor.swift\n\nIn the method above, we have `fetchContacts`, which uses the `UsersWorker` class to fetch the contacts from the API and also the `addContact` class, which also uses the same worker to add contacts.\n\nAfter a successful call, in both methods we call the presenter, which formats the data and makes a call to the View Controller and displays the content. \n\nLet’s update the code for the `ListContactsPresenter`. Open the file and paste the code below into the file:\n\n``` swift\n    import Foundation\n    \n    protocol ListContactsPresentationLogic {\n        func presentContacts(_ contacts: [Contact])\n        func presentAddedContact(_ contact: Contact)\n    }\n    \n    class ListContactsPresenter: ListContactsPresentationLogic {\n        weak var viewController: ListContactsDisplayLogic?\n        var displayedContacts: [ListContacts.Fetch.ViewModel.DisplayedContact] = []\n    \n        func presentContacts(_ contacts: [Contact]) {\n            displayedContacts = []        \n            for contact in contacts {\n                displayedContacts.append(ListContacts.Fetch.ViewModel.DisplayedContact(\n                    id: contact.user.chatkit_id,\n                    name: contact.user.name, \n                    isOnline: false\n                ))\n            }\n            displayContacts()\n        }\n        \n        func presentAddedContact(_ contact: Contact) {\n            displayedContacts.append(ListContacts.Fetch.ViewModel.DisplayedContact(\n                id: contact.user.chatkit_id,\n                name: contact.user.name, \n                isOnline: false\n            ))\n            displayContacts()\n        }\n        \n        private func displayContacts() {\n            let vm = ListContacts.Fetch.ViewModel(displayedContacts: displayedContacts)\n            viewController?.displayFetchedContacts(viewModel: vm)\n        }\n    }\n```\n\nThe code above has three methods. `presentContacts` and `presentAddedContact` do pretty much the same thing: format the contacts, append it to the `displayedContacts` array, and call the `displayContacts` method. The `displayContacts` method just calls `displayFetchedContacts` on the View Controller.\n\nLet us update the code for the `ListContactsViewController`. Paste the following into the controller:\n\n``` swift\n    import UIKit\n    import PusherChatkit\n    \n    protocol ListContactsDisplayLogic: class {\n        func displayFetchedContacts(viewModel: ListContacts.Fetch.ViewModel)\n    }\n    \n    class ListContactsViewController: UITableViewController, ListContactsDisplayLogic {\n        var interactor: ListContactsBusinessLogic?\n        var displayedContacts: [ListContacts.Fetch.ViewModel.DisplayedContact] = []\n        var router: (NSObjectProtocol \u0026 ListContactsRoutingLogic \u0026 ListContactsDataPassing)?\n      \n        override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {\n            super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)\n            setup()\n        }\n      \n        required init?(coder aDecoder: NSCoder) {\n            super.init(coder: aDecoder)\n            setup()\n        }\n      \n        private func setup() {\n            let viewController = self\n            let interactor = ListContactsInteractor()\n            let presenter = ListContactsPresenter()\n            let router = ListContactsRouter()        \n            viewController.interactor = interactor\n            viewController.router = router\n            interactor.presenter = presenter\n            presenter.viewController = viewController\n            router.viewController = viewController\n            router.dataStore = interactor\n        }\n          \n        override func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n            if let scene = segue.identifier {\n                let selector = NSSelectorFromString(\"routeTo\\(scene)WithSegue:\")\n                if let router = router, router.responds(to: selector) {\n                    router.perform(selector, with: segue)\n                }\n            }\n        }\n    }\n```\n\nThis is the basic set up that comes with the Clean Swift templates. It just sets up the connections between all the **ListContacts** scene classes. Next, let’s add the methods below to the class. These are specific to our implementation:\n\n``` swift\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        navigationItem.title = \"Contacts\"\n        navigationController?.navigationBar.prefersLargeTitles = true\n        navigationItem.rightBarButtonItem = UIBarButtonItem(\n            title: \"Add\", \n            style: .plain, \n            target: self, \n            action: #selector(showAddContactPopup)\n        )\n                \n        initialiseChatkit()\n    }\n        \n    private func initialiseChatkit() {\n        let userId = CurrentUserIDDataStore().getID()\n    \n        let chatManager = ChatManager(\n            instanceLocator: AppConstants.CHATKIT_INSTANCE_LOCATOR,\n            tokenProvider: ChatkitTokenDataStore(),\n            userID: userId.id!\n        )\n        \n        chatManager.connect(delegate: self) { user, error in\n            guard error == nil else { return }\n            self.interactor?.currentUser = user\n            self.fetchContacts()\n        }\n    }\n    \n    var emailTextField: UITextField?\n    \n    @objc func showAddContactPopup(_ sender: Any) {\n        let alert = UIAlertController(\n            title: \"Add\",\n            message: \"Enter the users email address\",\n            preferredStyle: .alert\n        )\n    \n        alert.addTextField { emailTextField in\n            emailTextField.placeholder = \"Enter email address\"\n            self.emailTextField = emailTextField\n        }\n        \n        alert.addAction(UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil))\n        alert.addAction(UIAlertAction(title: \"Add Contact\", style: .default) { action in\n            let request = ListContacts.Create.Request(user_id: self.emailTextField!.text!)\n            self.interactor?.addContact(request: request)\n        })\n        \n        present(alert, animated: true, completion: nil)\n    }\n    \n    private func fetchContacts() {\n        interactor?.fetchContacts(request: ListContacts.Fetch.Request())\n    }\n    \n    func displayFetchedContacts(viewModel: ListContacts.Fetch.ViewModel) {\n        displayedContacts = viewModel.displayedContacts\n        tableView.reloadData()\n    }\n```\n\nIn the `viewDidLoad` method, we configure the navigation bar and add an “Add” button to it. We also set the title to “Contacts”. The `showAddContactPopup` method shows an alert controller with a text field for the contact you want to add. When you click add, the contact will be added. \n\nThe `initialiseChatkit` method connects to Chatkit and stores the `currentUser` in the interactor while the `fetchContacts` method gets all the contacts from the API while the `displayFetchedContacts` method simply displays them.\n\nNext we will add the class extension of `ListContactsViewController` that implements the `UITableViewDelegate` protocol. At the bottom of the `ListContactsViewController` paste the following:\n\n``` swift\n    extension ListContactsViewController {    \n        override func numberOfSections(in tableView: UITableView) -\u003e Int {\n            return 1\n        }\n        \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return displayedContacts.count\n        }\n        \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            var cell = tableView.dequeueReusableCell(withIdentifier: \"ContactTableViewCell\")        \n            if cell == nil {\n                cell = UITableViewCell(style: .subtitle, reuseIdentifier: \"ContactTableViewCell\")\n            }\n    \n            let contact = displayedContacts[indexPath.row]\n            cell?.textLabel?.text = contact.name\n            cell?.detailTextLabel?.text = contact.isOnline ? \"online\" : \"Seen recently\"\n    \n            return cell!\n        }\n    }\n```\n\nThe method should be familiar to you as it just helps us feed data to the `UITableView` so our contacts display properly on the table.\n\nThe last bit of code for the ListContacts scene is the `ListContactsRouter`. This will manage the routing to the Chatroom scene. Open the `ListContactsRouter` class and add the following code:\n\n``` swift\n    import UIKit\n    \n    @objc protocol ListContactsRoutingLogic {\n        func routeToChatroom(segue: UIStoryboardSegue)\n    }\n    \n    protocol ListContactsDataPassing {\n        var dataStore: ListContactsDataStore? { get }\n    }\n    \n    class ListContactsRouter: NSObject, ListContactsRoutingLogic, ListContactsDataPassing {\n        var dataStore: ListContactsDataStore?\n        weak var viewController: ListContactsViewController?\n    \n        func routeToChatroom(segue: UIStoryboardSegue) {\n            let destinationVC = segue.destination as! ChatroomViewController\n            var destinationDS = destinationVC.router!.dataStore!\n            passDataToChatroom(source: dataStore!, destination: \u0026destinationDS)\n        }\n        \n        func passDataToChatroom(source: ListContactsDataStore, destination: inout ChatroomDataStore) {\n            let selectedRow = viewController?.tableView.indexPathForSelectedRow?.row\n            destination.contact = source.contacts?[selectedRow!]\n            destination.currentUser = source.currentUser\n        }\n    } \n```\n\nIn the `routeToChatroom` method we call `passDataToChatroom` which passes data (the `Contact` object and the current user) to the `ListContactsViewController` for usage.\n\n### Chatroom scene\nIn the Chatroom scene we will start with the `ChatroomModels`. Open the file and paste the following code:\n\n``` swift\n    import Foundation\n    import MessageKit\n    import PusherChatkit\n    \n    enum Chatroom {\n        struct Messages {        \n            struct Fetch {\n                struct Request {\n                    var room: PCRoom\n                }\n                \n                struct Response {\n                    var messages: [Message] = []                \n                    init(messages: [PCMessage]) {\n                        for message in messages {\n                            let res = Chatroom.Messages.Create.Response(message: message)\n                            self.messages.append(res.message)\n                        }\n                    }\n                }\n            }\n            \n            struct Create {\n                struct Request {\n                    var text: String\n                    var sender: Sender\n                    var room: PCRoom\n                }\n                \n                struct Response {\n                    var message: Message                \n                    init(message: PCMessage) {\n                        self.message = Message(\n                            text: message.text,\n                            sender: Sender(id: message.sender.id, displayName: message.sender.displayName),\n                            messageId: String(describing: message.id),\n                            date: ISO8601DateFormatter().date(from: message.createdAt)!\n                        )\n                    }\n                }\n            }\n        }\n    }\n```\n\nLike the other methods, we have the usual `Request` and `Response` struct (explained above).\n\nIn the `ChatroomInteractor.swift` file paste [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Scenes/Chatroom/ChatroomInteractor.swift).\n\n\n\nIn the `subscribeToRoom` method, we subscribe the `currentUser` to a room. We also set the `PCRoomDelegate` to the interactor which means we can implement methods that handle events on the interactor.\n\nIn the `addChatMessage` method we add a new message to the room as the `currentUser`. When the user is added we pass the `messageId` to the completion handler.\n\nIn the extension class, we implement the `newMessage` method of the `PCRoomDelegate`. The method is fired automatically anytime there is a new message in the room. So we handle the new message by presenting it to the controller using the `ChatroomPresenter`s `presentMessages` method.\n\nNext, open the `ChatPresenter.swift` file and paste the code below into it:\n\n``` swift\n    import Foundation\n    \n    protocol ChatroomPresentationLogic {\n        func presentMessages(response: Chatroom.Messages.Fetch.Response)\n    }\n    \n    class ChatroomPresenter: ChatroomPresentationLogic {\n        weak var viewController: ChatroomDisplayLogic?\n        \n        func presentMessages(response: Chatroom.Messages.Fetch.Response) {\n            viewController?.displayChatMessages(response: response)\n        }\n    }\n```\n\nThe only method there is the `presentMessages` method. It just calls the `displayChatMessages` method on the view controller.\n\nNext, in the `ChatroomRouter` just paste in the following code:\n\n``` swift\n    import Foundation\n    \n    protocol ChatroomDataPassing {\n        var dataStore: ChatroomDataStore? { get }\n    }\n    \n    class ChatroomRouter: NSObject, ChatroomDataPassing {\n        weak var viewController: ChatroomViewController?\n        var dataStore: ChatroomDataStore?\n    }\n```\n\nThen in the `ChatroomViewController` we are going to split the controller into extensions as the code is lengthy. First paste the Clean Swift set up code into the file:\n\n``` swift\n    import UIKit\n    import MessageKit\n    import PusherChatkit\n    import MessageInputBar\n    \n    protocol ChatroomDisplayLogic: class {\n        func displayChatMessages(response: Chatroom.Messages.Fetch.Response)\n    }\n    \n    class ChatroomViewController: MessagesViewController, ChatroomDisplayLogic {\n        var messages: [Message] = []\n        var interactor: ChatroomBusinessLogic?\n        var router: (NSObjectProtocol \u0026 ChatroomDataPassing)?\n      \n        override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {\n            super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)\n            setup()\n        }\n      \n        required init?(coder aDecoder: NSCoder) {\n            super.init(coder: aDecoder)\n            setup()\n        }\n      \n        private func setup() {\n            let viewController = self\n            let interactor = ChatroomInteractor()\n            let presenter = ChatroomPresenter()\n            let router = ChatroomRouter()\n      \n            viewController.interactor = interactor\n            viewController.router = router\n            interactor.presenter = presenter\n            presenter.viewController = viewController\n            router.viewController = viewController\n            router.dataStore = interactor\n        }\n    }\n```\n\nNext, we will paste the class extension that handles the loading of the chat messages, and configures [MessageKit](https://messagekit.github.io/) and [Chatkit](https://pusher.com/chatkit) as the view is loaded:\n\n``` swift\n    extension ChatroomViewController {\n        override func viewDidLoad() {\n            super.viewDidLoad()\n            self.initialiseChatkit()\n            self.configureMessageKit()\n            self.navigationItem.title = router?.dataStore?.contact?.user.name\n        }\n        \n        private func initialiseChatkit() {\n            guard let room = router?.dataStore?.contact?.room else { return }\n            guard let currentUser = router?.dataStore?.currentUser else { return }\n            self.interactor?.currentUser = currentUser\n            self.interactor?.subscribeToRoom(room: room)\n        }\n        \n        private func configureMessageKit() {\n            messageInputBar.delegate = self\n            messagesCollectionView.messagesDataSource = self\n            messagesCollectionView.messagesLayoutDelegate = self\n            messagesCollectionView.messagesDisplayDelegate = self\n            scrollsToBottomOnKeyboardBeginsEditing = true\n            maintainPositionOnKeyboardFrameChanged = true\n        }\n        \n        func displayChatMessages(response: Chatroom.Messages.Fetch.Response) {\n            self.messages = response.messages\n            self.messagesCollectionView.reloadData()\n            self.messagesCollectionView.scrollToBottom()\n        }\n    }\n```\n\nIn the extension above we have the `initialiseChatkit` method. It takes the current user passed on from the ListContacts scene and saves it to the interactor. Then the next method is the `configureMessageKit` where we configure MessageKit. Lastly, we have the `displayChatMessages` method that displays the messages.\n\nNext, paste the extension below the previous class:\n\n``` swift\n    extension ChatroomViewController: MessagesDataSource {    \n        func isFromCurrentSender(message: MessageType) -\u003e Bool {\n            return message.sender == currentSender()\n        }\n    \n        func currentSender() -\u003e Sender {\n            return Sender(id: (interactor?.currentUser?.id)!, displayName: (interactor?.currentUser?.name)!)\n        }\n    \n        func numberOfSections(in messagesCollectionView: MessagesCollectionView) -\u003e Int {\n            return self.messages.count\n        }\n        \n        func messageForItem(at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e MessageType {\n            return self.messages[indexPath.section]\n        }\n    \n        func configureAvatarView(_ avatarView: AvatarView, for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) {\n            avatarView.initials = self.initials(fromName: message.sender.displayName)\n        }\n    \n        func messageTopLabelAttributedText(for message: MessageType, at indexPath: IndexPath) -\u003e NSAttributedString? {\n    \n            return NSAttributedString(\n                string: message.sender.displayName,\n                attributes: [NSAttributedString.Key.font: UIFont.preferredFont(forTextStyle: .caption1)]\n            )\n        }\n    \n        func messageBottomLabelAttributedText(for message: MessageType, at indexPath: IndexPath) -\u003e NSAttributedString? {\n    \n            struct ConversationDateFormatter {\n                static let formatter: DateFormatter = {\n                    let formatter = DateFormatter()\n                    formatter.dateStyle = .medium\n                    return formatter\n                }()\n            }\n    \n            return NSAttributedString(\n                string: ConversationDateFormatter.formatter.string(from: message.sentDate),\n                attributes: [NSAttributedStringKey.font: UIFont.preferredFont(forTextStyle: .caption2)]\n            )\n        }\n    }\n    \n    extension ChatroomViewController: MessagesLayoutDelegate {\n        func messageBottomLabelHeight(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e CGFloat {\n            return 16\n        }\n    \n        func messageTopLabelHeight(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e CGFloat {\n            return 16\n        }\n    \n        func avatarPosition(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e AvatarPosition {\n            return AvatarPosition(horizontal: .natural, vertical: .messageBottom)\n        }\n    \n        func messagePadding(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e UIEdgeInsets {\n            return isFromCurrentSender(message: message)\n                ? UIEdgeInsets(top: 0, left: 30, bottom: 0, right: 4)\n                : UIEdgeInsets(top: 0, left: 4, bottom: 0, right: 30)\n        }\n    \n        func footerViewSize(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -\u003e CGSize {\n            return CGSize(width: messagesCollectionView.bounds.width, height: 10)\n        }\n    \n        func heightForLocation(message: MessageType, at indexPath: IndexPath, with maxWidth: CGFloat, in messagesCollectionView: MessagesCollectionView) -\u003e CGFloat {\n            return 200\n        }\n    }\n    \n    extension ChatroomViewController: MessagesDisplayDelegate {\n    }\n    \n    extension ChatroomViewController: MessageInputBarDelegate {\n        func messageInputBar(_ inputBar: MessageInputBar, didPressSendButtonWith text: String) {\n            guard interactor?.currentUser != nil else { return }\n            guard let room = router?.dataStore?.contact?.room else { return }\n     \n            let request = Chatroom.Messages.Create.Request(text: text, sender: currentSender(), room: room)\n    \n            self.interactor?.addChatMessage(request: request) { id, error in\n                guard error == nil else { return }\n                inputBar.inputTextView.text = String()\n            }\n        }\n    }\n```\n\nThe first extension above extends the `[MessagesDataSource](https://messagekit.github.io/Protocols/MessagesDataSource.html)` protocol and has to conform to some of its methods. Here we implement `currentSender`, `numberOfMessages` and `messageForItem`, all self explanatory.\n\nThe next extension on the list is for the `[MessagesLayoutDelegate](https://messagekit.github.io/Protocols/MessagesLayoutDelegate.html)` protocol and it implements some of the methods but there are other methods you can implement to change the layouts display. There is also the implementation of `[MessagesDisplayDelegate](https://messagekit.github.io/Protocols/MessagesDisplayDelegate.html)`, which is empty but you can look through the documentation to see methods you can implement.\n\nLastly, we implement  `[MessageInputBarDelegate](https://messagekit.github.io/Protocols/MessageInputBarDelegate.html)` and in there we have the `messageInputBar` method, which is called after the send button is clicked on the chat screen. In this method we send the message using the interactor and then empty the input.\n\nWith this we are done with our scenes. Next, we will add the code for our supporting classes used in the scenes.\n\n\n## Implementing supporting classes for our application\n\nThe first set of supporting classes we will implement are the models. The models we want to implement are `User`, `Message`, `Contact`, `Room`, `UserToken`, and `ChatToken`. Here are the class contents:\n\n### Implementing the models\n\nTo implement the models, create a new folder/group in the root directory called **Models** and start creating the model files below in them. Get the code from the GitHub links.\n\n[The code for the `Message.swift` model](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/Message.swift)\n\n[The code for the `Contact.swift` model](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/Contact.swift) \n\n[The code for the `User.swift` model](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/User.swift)\n\n[The code for `UserToken` model](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/UserToken.swift)\n\nIn the `UserToken` class above we implement the `NSCoding` protocol, we need this so we can save the `UserToken` object to UserDefaults.\n\n[The code to the `ChatToken.swift` model]( https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/ChatkitToken.swift)\n\nLike the `UserToken` model, the `ChatToken` does the same thing with the `NSCoding` protocol.\n\nWhen we have received a `chatkit_id` back from the server we want to store that in `UserDefaults` so that we can use it to connect to Chatkit.\n\n[The code to the `CurrentUserID.swift` model](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/6e71367043a99fb4a9a5a20399b209d1e7c3ba7a/words/Models/CurrentUserID.swift)\n\n### Implementing the services\nCreate a new folder/group in the root directory for the project on Xcode and name it **Services** and in there add the following files:\n\n`Authenticator.swift` class:\n\n``` swift\n    import Foundation\n    \n    class Authenticator {\n        func isLoggedIn() -\u003e Bool {\n            return getAccessToken().count \u003e 0\n        }\n    \n        private func getAccessToken() -\u003e String {\n            guard let token = ChatkitTokenDataStore().getToken().access_token, token.count \u003e 0 else {\n                return \"\"\n            }\n    \n            return token\n        }\n    } \n```\n\nThis `Authenticator` class checks if the user is logged in. It does this by checking if the token from the API is saved in UserDefaults.\n\n`UserTokenDataStore.swift` class:\n\n``` swift\n    import Foundation\n    \n    class UserTokenDataStore {\n        static var DATA_KEY = \"WORDS_API_TOKEN\"\n        \n        func getToken() -\u003e UserToken {\n            if let token = UserDefaults.standard.object(forKey: type(of: self).DATA_KEY) as! Data? {\n                return NSKeyedUnarchiver.unarchiveObject(with: token) as! UserToken\n            }\n    \n            return UserToken(token_type: nil, access_token: nil, expires_in: nil)\n        }\n        \n        func setToken(_ token: UserToken) {\n            let encodedData = NSKeyedArchiver.archivedData(withRootObject: token)\n            UserDefaults.standard.set(encodedData, forKey: type(of: self).DATA_KEY)\n        }\n    }\n```\n\nThe `UserDataTokenStore` class saves and fetches the token required to make calls to our backend API.\n\nAdd the `ChatTokenDataStore.swift` class with [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Services/ChatkitTokenDataStore.swift)\n\nThe class above does the same as the `UserTokenDataStore`, however it checks for the token required to make calls to the Chatkit API. It also extends the `[PCTokenProvider](https://github.com/pusher/chatkit-swift/blob/master/Source/PCTokenProvider.swift)` and thus we have the `fetchToken` method that fetches the token from the UserDefaults.\n\nAdd the `CurrentUserIDDataStore.swift` class with [this code](https://github.com/pusher/sample-chatroom-ios-chatkit/blob/master/words/Services/CurrentUserIDDataStore.swift)\n\nThe class above does the same as the two token data stores. It takes some information, in this case the user’s Chatkit ID, and fetches and stores it in `UserDefaults`.\n\n### Implementing the global worker\nThe last class we want to implement is the `UsersWorker`. Create a `UsersWorker` class and paste the following into the file:\n\n``` swift\n    import UIKit\n    import Alamofire\n    \n    class UsersWorker {\n    }\n    \n    // MARK: Errors\n    \n    enum ContactsError: Error {\n        case CannotAdd\n        case CannotFetch\n    }\n    \n    enum UsersStoreError: Error {\n        case CannotLogin\n        case CannotSignup\n        case CannotFetchChatkitToken\n    }\n```\n\nNow we will start adding methods to the `UsersWorker` class. The first method is the `fetchContacts` method, which calls the API, using [Alamofire](https://github.com/Alamofire/Alamofire), to get a list of contacts for display:\n\n``` swift\n    func fetchContacts(currentUser: PCCurrentUser, completionHandler: @escaping ([Contact]?, ContactsError?) -\u003e Void){\n        let enc = JSONEncoding.default\n        let url = AppConstants.ENDPOINT + \"/api/contacts\"\n        let headers = authorizationHeader(token: nil)\n        \n        Alamofire\n            .request(url, method: .get, parameters: nil, encoding: enc, headers: headers)\n            .validate()\n            .responseJSON { response in\n                switch (response.result) {\n                case .success(let data):                \n                    DispatchQueue.main.async {\n                        let data = data as! [[String:Any]?]\n                        let res = ListContacts.Fetch.Response(for: currentUser, data:data)\n                        completionHandler(res.contacts, nil)\n                    }\n                case .failure(_):\n                    completionHandler(nil, ContactsError.CannotFetch)\n            }\n        }\n    }\n```\n\nThe next method to add to the class is the `addContact` method. The method makes the call to the API to add a contact:\n\n``` swift\n    func addContact(currentUser: PCCurrentUser, request: ListContacts.Create.Request, completionHandler: @escaping (Contact?, ContactsError?) -\u003e Void) {\n        let params = [\"user_id\": request.user_id]\n        let headers = authorizationHeader(token: nil)\n        \n        postRequest(\"/api/contacts\", params: params, headers: headers) { data in\n            guard data != nil else {\n                return completionHandler(nil, ContactsError.CannotAdd)\n            }\n            \n            DispatchQueue.main.async {\n                let response = ListContacts.Create.Response(for: currentUser, data: data!)\n                completionHandler(response.contact, nil)\n            }\n        }\n    }\n```\n\nThe next method to add to the class is the `login` method. The method makes a call to the API to login. The API returns the token for the API as the response. We make an additional call to the API to get the Chatkit token for the user so we can make calls to the Chatkit API on behalf of the user:\n\n``` swift\n    func login(request: Login.Account.Request, completionHandler: @escaping (UserToken?, UsersStoreError?) -\u003e Void) {\n        let params: Parameters = [\n            \"grant_type\": \"password\",\n            \"username\": request.email,\n            \"password\": request.password,\n            \"client_id\": AppConstants.CLIENT_ID,\n            \"client_secret\": AppConstants.CLIENT_SECRET,\n        ]\n        \n        postRequest(\"/oauth/token\", params: params, headers: nil) { data in\n            guard data != nil else {\n                return completionHandler(nil, UsersStoreError.CannotLogin)\n            }\n            \n            let response = Login.Account.Response(data: data!)\n            \n            let request = Login.Chatkit.Request(\n                username: request.email, \n                password: request.password, \n                token: response.userToken\n            )\n            \n            self.fetchChatkitToken(request: request) { token, error in\n                guard error == nil else {\n                    return completionHandler(nil, UsersStoreError.CannotFetchChatkitToken)\n                }\n                \n                ChatkitTokenDataStore().setToken(token!)\n                UserTokenDataStore().setToken(response.userToken)\n                \n                DispatchQueue.main.async {\n                    completionHandler(response.userToken, nil)\n                }\n            }\n        }\n    }\n```\n\nNext we will add the `signup` method, this will call the API to create a user and then it will log the user in and fetch the Chatkit token for that user:\n\n``` swift\n    func signup(request: Signup.Request, completionHandler: @escaping (User?, UsersStoreError?) -\u003e Void) {\n        let params: Parameters = [\n            \"name\": request.name,\n            \"email\": request.email,\n            \"password\": request.password\n        ]\n        \n        postRequest(\"/api/users/signup\", params: params, headers: nil) { data in\n            guard data != nil else {\n                return completionHandler(nil, UsersStoreError.CannotSignup)\n            }\n            \n            let response = Signup.Response(data: data!)\n            CurrentUserIDDataStore().setID(CurrentUserID(id: response.user?.chatkit_id))\n            \n            let request = Login.Account.Request(\n                email: request.email, \n                password: request.password\n            )\n            \n            self.login(request: request) { token, error in\n                guard error == nil else {\n                    return completionHandler(nil, UsersStoreError.CannotLogin)\n                }\n                \n                DispatchQueue.main.async {\n                    completionHandler(response.user, nil)\n                }\n            }\n        }\n    }\n```\n\nThe next method to add is the `fetchChatkitToken`. It fetches the Chatkit token from the API:\n\n``` swift\n    func fetchChatkitToken(request: Login.Chatkit.Request, completionHandler: @escaping (ChatkitToken?, UsersStoreError?) -\u003e Void) {\n        let headers = authorizationHeader(token: request.token.access_token!)\n        \n        postRequest(\"/api/chatkit/token\", params: nil, headers: headers) { data in\n            guard data != nil else {\n                return completionHandler(nil, UsersStoreError.CannotFetchChatkitToken)\n            }\n            \n            DispatchQueue.main.async {\n                let response = Login.Chatkit.Response(data: data!)\n                completionHandler(response.token, nil)\n            }\n        }\n    }\n```\n\nThe last two methods to add will be helpers, the `postRequest` and `authorizationHeader` methods:\n\n``` swift\n    private func postRequest(_ url: String, params: Parameters?, headers: HTTPHeaders?, completion: @escaping([String:Any]?) -\u003e Void) {\n        let enc = JSONEncoding.default\n        let url = AppConstants.ENDPOINT + url\n        \n        Alamofire\n            .request(url, method: .post, parameters:params, encoding:enc, headers:headers)\n            .validate()\n            .responseJSON { response in\n                switch (response.result) {\n                case .success(let data): completion((data as! [String:Any]))\n                case .failure(_): completion(nil)\n            }\n        }\n    }\n    \n    private func authorizationHeader(token: String?) -\u003e HTTPHeaders {\n        let accessToken = (token == nil) \n            ? UserTokenDataStore().getToken().access_token \n            : token\n        \n        return [\"Authorization\": \"Bearer \\(accessToken!)\"]\n    }\n```\n\nThe first method is a wrapper around Alamofire and the second method generates a HTTPHeaders array where we specify the token to send along with requests to the API.\n\nNow you can run the application in the emulator and it should work.\n\nIf you are running the API server locally XCode might not allow you to make requests to the local server. You can get around this by adding `App Transport Security Settings` to your `Info.plist` file and set `Allow Artibrary Loads` to `YES`.\n\n![Create-iOS-Chat-App-Using-Chatkit-allow-arbitrary-loads](//images.ctfassets.net/1es3ne0caaid/4ZHA4yRh4ss2SEY4GeMKSm/0d2667e4f46fb35c26aff64b96aab1a8/Create-iOS-Chat-App-Using-Chatkit-allow-arbitrary-loads.png)\n\n## Conclusion\n\nIn this part we were able to create the iOS application. \n\nThe source code to the application built in this series is available on [GitHub](https://github.com/neoighodaro/sample-chatroom-ios-chatkit).","metaTitle":"Build an iOS chat app using Swift and Chatkit - Part 3","metaDescription":"This tutorial series provides a detailed walkthrough of how to create a chat app for iOS, with a Laravel API backend. In this article you will create the iOS app. By the end of this section you will have a working chat app."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1msgjCo2j26csGuiUk66qe","type":"Entry","createdAt":"2018-05-14T12:39:59.711Z","updatedAt":"2018-05-14T12:39:59.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Implementing desktop notifications in your Laravel app","url":"desktop-notifications-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3sixk7zsAoQqqSsUWM8I8y","type":"Entry","createdAt":"2018-02-13T18:06:00.483Z","updatedAt":"2018-02-14T10:08:13.372Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Olayinka Omole","url":"olayinka-omole","email":"olayinka.omole@gmail.com","twitter":"https://twitter.com/olayinkaos","github":"https://github.com/olayinkaos","guestWriter":true}}],"projectRepo":"https://github.com/olayinkaos/pusher-news-talk","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-05-11","description":"Use Laravel and Vue to build a news notification module, which will send a desktop notification to everyone on the website when a new post is published.","prerequisite":"You will need PHP and Laravel (5.4 or above) installed on your machine. You should have a working knowledge of PHP and JavaScript.","content":"Realtime notifications are now very common in modern web applications, as site owners want to keep users engaged and informed of happenings on their platform. Notifications are also a great way to build addiction, and make sure users keep coming back to your platform to see \"what's new\".\n\nWith [Laravel](laravel.com) and some [Pusher](http://pusher.com) magic, I will be demonstrating how to build a realtime app, with desktop notifications, utilising the [Notification API](https://developer.mozilla.org/en/docs/Web/API/notification).\n\n## Our application\n\nWe will build a simple News notification module which will alert everyone on a website when a new post is published. Ideally, this would be part of a larger app, but we will build it in isolation here to showcase our desktop notifications.\n\nAt the end of this tutorial, you will have learned how to:\n\n1. Broadcast events in Laravel, using Pusher\n2. Listen for events on channels, using Laravel Echo and Vue.js\n3. Use the Notification API to display desktop notifications\n \nTo follow along, you will need a working knowledge of PHP and JavaScript. Basic knowledge of Laravel and Vue.js are also needed. Laravel 5.4 and Vue.js 2.3 are used.\n\n## Introduction to Pusher\n\nPusher is a service that makes it super easy to add realtime functionality to web and mobile applications. We will be using it in our application, so sign up to a free account [here](https://pusher.com/signup), create an app, and copy out the app credentials (App ID, Key and Secret) from the “App Keys” section.\n\n## Setup and configuration\n\nFor starters, let us set up our app, and do the necessary configuration. We will call the app `news-talk`.\n\nTo create a new app with the [Laravel installer](https://laravel.com/docs/5.4/installation), run this command:\n\n``` \nlaravel new news-talk\n```\nThe next set of commands should be run in the app's root directory.\n\nInstalling the [Pusher PHP library](https://github.com/pusher/pusher-http-php):\n\n``` \ncomposer require pusher/pusher-php-server\n```\nInstalling the [Laravel Frontend](https://laravel.com/docs/5.4/frontend) Dependencies (these include Bootstrap, Axios, Vue.js and a couple of other things which are nice to have):\n\n``` \nnpm install\n```\nInstalling [Laravel Echo](https://laravel.com/docs/5.4/broadcasting#installing-laravel-echo) and [Pusher-js](https://github.com/pusher/pusher-js) which we will use to listen for broadcast events:\n\n``` \nnpm install -S laravel-echo pusher-js\n```\nNext, we will do some more minor configuration to let Laravel know we will be using Pusher to manage our broadcasts.\n\nEditing the `.env`:\n\n``` \n# ./.env\n\nBROADCAST_DRIVER=pusher\n\nPUSHER_APP_ID=your_pusher_add_id\nPUSHER_APP_KEY=your_pusher_app_key\nPUSHER_APP_SECRET=your_pusher_app_secret\n```\nYou can edit some more optional configuration for Pusher in the `./config/broadcasting.php` file generated by Laravel. You can see other options [here](https://laravel.com/docs/5.4/broadcasting#driver-prerequisites).\n\n\u003e Note: If you created your app in a different cluster to the default `us-east-1`, you must configure the cluster option. It is optional if you chose the default option.\n\nFinally, we will configure Echo to use Pusher. We do that by uncommenting and editing the values at the bottom of `resources/assets/js/bootstrap.js`:\n\n``` javascript\n// ./resources/assets/js/bootstrap.js\n\nimport Echo from \"laravel-echo\"\n\n window.Echo = new Echo({\n     broadcaster: 'pusher',\n     key: 'your_pusher_key'\n});\n```\n## Building the backend\n\nLet's create a table for our posts. This is where data we create via our app will be persisted to. We will use a [Laravel migration](https://laravel.com/docs/5.4/migrations) file, and an [Eloquent model](https://laravel.com/docs/5.4/eloquent) for communication with the database.\n\nTo create a `Post` model run this command:\n\n``` \nphp artisan make:model Post -m -c\n```\nThe `-m` and `c` flags are for automatically generating the migration and controller files respectively.\n\nNext, we edit the generated migration file located in the `./database/migrations` folder. We adjust the `up` method to look like this:\n\n``` php\npublic function up() {\n  Schema::create('posts', function (Blueprint $table) {\n    $table-\u003eincrements('id');\n    $table-\u003estring('title');\n    $table-\u003etext('description');\n    $table-\u003etimestamps();\n  });\n}\n```\nThen, after editing the `.env` with your database details, you can create the table with this command:\n\n``` bash\nphp artisan migrate\n```\n\u003e Tip: You can read more on the Laravel .env file [here](https://laravel.com/docs/5.4/configuration#environment-configuration)\n\nWe should also edit the mass-assignable properties on the model:\n\n``` php\n# ./app/Post.php\n\nclass Post extends Model\n{\n\n  /**\n   * The attributes that are mass assignable.\n   *\n   * @var array\n   */\n  protected $fillable = ['title', 'description'];\n}\n```\n### Saving a post\n\nNext, we will add a route and controller method to save a new post.\n\nWe will be making an API call from the front-end to save our posts, so we can add the new route to the API routes at `./routes/api.php`. Whatever route defined here will be prefixed by `api`, and belongs to the `api` middleware group.\n\n``` php\n# ./routes/api\n\nRoute::post('/post', 'PostController@store');\n```\nAdding the corresponding controller method:\n\n``` php\n# ./app/Http/Controllers/PostController.php\n\nuse App\\Post;\n\nclass PostController extends Controller {\n\n  /**\n   * Saves a new post to the database\n   */\n  public function store(Request $request) {\n    // ...\n    // validation can be done here before saving \n    // with $this-\u003evalidate($request, $rules)\n    // ...\n\n    // get data to be saved in an associative array using $request-\u003eonly()\n    $data = $request-\u003eonly(['title', 'description']);\n\n    //  save post and assign return value of created post to $post array\n    $post = Post::create($data);\n\n    // return post as response, Laravel automatically serializes this to JSON\n    return response($post, 201);\n  }\n}\n```\n## Working with events\n\n[Events](https://laravel.com/docs/5.4/events) are a great way to separate out application logic. We can define events to be triggered in our application when an action occurs, and we can define listeners, to listen for such events and carry out other activities.\n\nLaravel allows for easy definition of events and listeners out of the box. It also includes helper functions and classes to allow us easily trigger and broadcast events.\n\nWe can create a new event with this command:\n\n``` \nphp artisan make:event PostPublished\n```\nThe event class file is created at `./app/Events`.\n\nWe can then edit it to suit our needs:\n\n``` php\n# ./app/Events/PostPublished.php\n\nclass PostPublished implements ShouldBroadcast {\n  use Dispatchable, InteractsWithSockets, SerializesModels;\n\n  public $post;\n\n  public function __construct($post) {\n    $this-\u003epost = $post;\n  }\n\n  /**\n   * Get the channels the event should broadcast on.\n   *\n   * @return Channel|array\n   */\n  public function broadcastOn() {\n    return new Channel('posts');\n  }\n\n  public function broadcastWith() {\n    return [\n      'title' =\u003e $this-\u003epost-\u003etitle,\n    ];\n  }\n}\n```\nThe `Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast` interface on the event class is used to inform Laravel that this event should be broadcast.\n\nThe `broadcastOn` method returns the channel that we want to broadcast our event on. The `Channel` class is used for broadcasting on public channels. `PrivateChannel` and `PresenceChannel` are for private channels (these require authentication for access). You can read more about the various Pusher channels [here](https://pusher.com/docs/client_api_guide/client_channels).\n\nBy default, Laravel broadcasts all of an event class’ public properties as its payload… `broadcastWith` helps us override that behaviour and choose what we want to send.\n\n### Dispatching events\n\nIn our app, we want to dispatch the `PostPublished` event after a post has been saved. In Laravel, we can dispatch events using the `Event` Facade, or the `event()` helper function.\n\nTo dispatch our `PostPublished` event, we can edit the `store` method in the `PostController`, and place the event call right after the post is saved:\n\n``` php\n# ./app/Http/Controllers/PostController.php\n\nuse App\\Events\\PostPublished;\n\n// save post and assign return value of created post to $post array\n$post = Post::create($data);\n\n// fire PostPublished event after post is successfully added to database\nevent(new PostPublished($post));\n// or\n// \\Event::fire(new PostPublished($post))\n```\nThe final `PostController` file will look like this:\n\n``` php\n# ./app/Http/Controllers/PostController.php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Events\\PostPublished;\nuse App\\Post;\n\nclass PostController extends Controller {\n\n  /**\n   * Saves a new post to the database\n   */\n  public function store(Request $request) {\n    // ...\n    // validation can be done here before saving \n    // with $this-\u003evalidate($request, $rules)\n    // ...\n\n    // get data to save in an associative array using $request-\u003eonly()\n    $data = $request-\u003eonly(['title', 'description']);\n\n    //  save post and assign return value of created post to $post array\n    $post = Post::create($data);\n\n    // fire PostPublished event after post is successfully added to database\n    event(new PostPublished($post));\n    // or\n    // \\Event::fire(new PostPublished($post))\n\n    // return post as response, Laravel automatically serializes this to JSON\n    return response($post, 201);\n  }\n}\n```\nNow that we are done with building the backend, we can proceed to create our view and event listener on the Frontend.\n\n## Building the frontend\n\nTo create a basic page view for our app, we can edit the default `welcome.blade.php` file created by Laravel. We can replace its contents with the following:\n\n``` html\n\u003c!-- ./resources/views/welcome.blade.php --\u003e\n\n\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"{{ config('app.locale') }}\"\u003e\n\u003chead\u003e\n  \u003cmeta charset=\"utf-8\"\u003e\n  \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e\n  \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n\n  \u003c!-- CSRF Token --\u003e\n  \u003cmeta name=\"csrf-token\" content=\"{{ csrf_token() }}\"\u003e\n\n  \u003ctitle\u003eNews Talk\u003c/title\u003e\n\n  \u003c!-- Styles --\u003e\n  \u003clink href=\"{{ asset('css/app.css') }}\" rel=\"stylesheet\"\u003e\n\n  \u003cstyle\u003e\n    .container {\n      padding-top: 100px;\n    }\n  \u003c/style\u003e\n\n  \u003c!-- Scripts --\u003e\n  \u003cscript\u003e\n    window.Laravel = {!! json_encode([\n      'csrfToken' =\u003e csrf_token(),\n    ]) !!};\n  \u003c/script\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n\n  \u003cdiv id=\"app\"\u003e\n    \u003c!-- home Vue component --\u003e\n    \u003chome\u003e\u003c/home\u003e\n  \u003c/div\u003e\n\n  \u003c!-- Scripts --\u003e\n  \u003cscript src=\"{{ asset('js/app.js') }}\"\u003e\u003c/script\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n```\nMost of the code above is boilerplate Laravel HTML content with relevant scripts and CSS files attached. We will generate them later on.\n\nWe also included a Vue component (`home`) which hasn't been defined yet. Let us go ahead to create and define it.\n\nCreating the `home` Vue component:\n\n``` javascript\n\u003c!-- ./resources/assets/js/components/Home.vue --\u003e\n\u003ctemplate\u003e\n  \u003cdiv class=\"container\"\u003e\n    \u003cdiv class=\"row\"\u003e\n      \u003cdiv class=\"col-sm-6 col-sm-offset-3\"\u003e\n        \u003cdiv class=\"form-group\"\u003e\n          \u003clabel for=\"title\"\u003ePost Title\u003c/label\u003e\n          \u003cinput v-model=\"newPostTitle\" id=\"title\" type=\"text\" class=\"form-control\"\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"form-group\"\u003e\n          \u003clabel for=\"description\"\u003ePost Description\u003c/label\u003e\n          \u003ctextarea v-model=\"newPostDesc\" id=\"description\" rows=\"8\" class=\"form-control\"\u003e\u003c/textarea\u003e\n        \u003c/div\u003e\n        \u003cbutton @click=\"addPost(newPostTitle, newPostDesc)\" \n          :class=\"{disabled: (!newPostTitle || !newPostDesc)}\"\n          class=\"btn btn-block btn-primary\"\u003eSubmit\u003c/button\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  \u003c/div\u003e\n\u003c/template\u003e\n\n\u003cscript\u003e\n  export default {\n    data() {\n      return {\n        newPostTitle: \"\", \n        newPostDesc: \"\" \n      }\n    },\n    created() {\n      this.listenForChanges();\n    },\n    methods: {\n      addPost(postName, postDesc) {\n        // check if entries are not empty\n        if(!postName || !postDesc)\n          return;\n\n        // make API to save post\n        axios.post('/api/post', {\n          title: postName, description: postDesc\n        }).then( response =\u003e {\n          if(response.data) { \n            this.newPostTitle = this.newPostDesc = \"\";\n          }\n        })\n      },\n      listenForChanges() {\n        Echo.channel('posts')\n          .listen('PostPublished', post =\u003e {\n            if (! ('Notification' in window)) {\n              alert('Web Notification is not supported');\n              return;\n            }\n\n            Notification.requestPermission( permission =\u003e {\n              let notification = new Notification('New post alert!', {\n                body: post.title, // content for the alert\n                icon: \"https://pusher.com/static_logos/320x320.png\" // optional image url\n              });\n\n              // link to page on clicking the notification\n              notification.onclick = () =\u003e {\n                window.open(window.location.href);\n              };\n            });\n          })\n        }\n      } \n    }\n\u003c/script\u003e\n```\nIn the above code, we define two methods. `addPost()` and `listenForChanges`. The `addPost` method makes a post request to our API with the required payload when a user adds a new post.\n\nIn the `listenForChanges` method, we use Echo to subscribe to the `posts` channel, which is the channel we are broadcasting to, from our backend. We also listen for `PostPublished` events, and define a callback that activates our desktop notification whenever an event is fired.\n\nWe are using the notifications API for desktop notifications. We first [request permission](https://developer.mozilla.org/en-US/docs/Web/API/Notification/permission) to send desktop notifications, then notify the user once permission is granted.\n\nWe can also check if a browser supports desktop notifications this way:\n\n``` javascript\nif (window.Notification) {\n    console.log('Notifications are supported!');\n} else {\n    alert('Notifications aren\\'t supported on your browser! :(');\n}\n```\nWe create an instance of the Notification object with our post title as the body. An optional `icon` parameter can also be set, as we did.\n\nFinally, we define the component as a global [component](https://vuejs.org/v2/guide/components.html) in `app.js`:\n\n``` javascript\n// ./resources/assets/js/app.js\n\nVue.component('home', require('./components/Home.vue'));\n```\n## Bringing it all together\n\nWe can compile our assets easily using Laravel Mix!:\n\n``` \nnpm run dev\n```\nNow, we can navigate to the app's homepage to see it in action. If you use [Laravel Valet](https://laravel.com/docs/5.4/valet), you can also [share the app](https://laravel.com/docs/5.4/valet#sharing-sites), and visit it via another device to test the desktop notifications.\n\n![laravel-pusher-desktop-alerts](//images.ctfassets.net/1es3ne0caaid/7GMNxTA5FeSOkCK6oGeQSi/5452f6da7bd7d9a1d55127aa9bb62483/laravel-pusher-desktop-alerts.gif)\n\n## Conclusion\n\nWe have learned how to build an event-driven basic realtime app enabled with desktop notifications, thanks to Laravel and Pusher. As a next step, you could also learn [how to build a chat application with Pusher](https://blog.pusher.com/how-to-build-a-laravel-chat-app-with-pusher/), and integrate desktop notifications whenever a user receives a message... awesome, right?\n\nIf you’ve thought of any other great ways to use Pusher and Laravel, let us know in the comments!\n\nThe entire code for this tutorial is [hosted on Github](https://github.com/olayinkaos/pusher-news-talk). You can look through and ask questions if you need more information.","metaTitle":"Implementing desktop notifications in your Laravel app","metaDescription":"This tutorial will show you how to build a news notification app using Laravel and Vue. The app focuses on implementing desktop notification functionality, which is used to alert everyone on the website when a new post is published."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"28C48cbbScG2KYywEqYmEe","type":"Entry","createdAt":"2018-05-14T09:49:28.168Z","updatedAt":"2020-06-19T12:45:26.119Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Monitoring Laravel’s background queues in realtime","url":"monitoring-laravel-background-queues","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/monitoring-laravel-queues","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}}],"reviewDate":"2018-05-11","description":"This article looks at ways to monitor Laravel's background queues. Using the example of emails queued for sending, you will create a report page that displays which emails have sent and which haven't.","prerequisite":"You will need PHP 7 or above, the Laravel CLI, Composer, Node and npm installed on your machine. You should have some knowledge of PHP and Laravel.","content":"When building large applications, making it scale is usually a concern. Stats like how long it takes for the page to load is usually very important. Thus, doing things like processing large images, sending emails and SMS can be pushed to a background queue and processed at a later time. \n\nHowever, because queues work in the background, they can fail sometimes. It may then be necessary to be able to monitor background queues.\n\nIn this article, we will consider ways to monitor Laravel’s background queues in realtime. We will assume we created an application that sends emails. The emails are to be queued in the background and sent later. We will then have a report page with the emails that have been sent and those that haven’t.\n\nThis is a screen recording of what we will be building:\n\n![monitoring-laravel-background-queues-realtime-pusher-demo](//images.ctfassets.net/1es3ne0caaid/6yq9oMJsPYU20CiMi4AE4Q/d6fec0f73c3c0da9a320264f764c696a/monitoring-laravel-background-queues-realtime-pusher-demo.gif)\n\n## Tutorial requirements\n\nTo follow along in this tutorial, we would need the following things:\n\n- PHP 7.0+ installed on your machine.\n- [Laravel CLI](https://laravel.com/docs/5.5/installation) installed on your machine.\n- [Composer](https://getcomposer.org/doc/00-intro.md#installation-linux-unix-osx) installed on your machine.\n- Knowledge of PHP and Laravel.\n- [Node.js and NPM](https://docs.npmjs.com/getting-started/installing-node) installed on your machine.\n- Basic knowledge of Vue.js and JavaScript. \n- A Pusher application. Create one [here](https://pusher.com).\n- A Mailtrap account to test emails sent. Create one [here](https://mailtrap.io).\n\nOnce you have these requirements ready, let’s start.\n\n## Setting up Your Laravel application\n\nOpen the terminal and run the command below to create a Laravel application:\n\n``` php\n    $ laravel new app_name\n```\n\n### Setting up a database connection and migration\nWhen installation is complete, we can move on to setting up the database. Open the `.env` file and replace the configuration below:\n\n```\n    DB_CONNECTION=mysql\n    DB_HOST=127.0.0.1\n    DB_PORT=3306\n    DB_DATABASE=homestead\n    DB_USERNAME=homestead\n    DB_PASSWORD=secret\n```\n\nwith:\n\n```\n    DB_CONNECTION=sqlite\n```\n\nThis will set SQLite as our default database connection (you can use MySQL or any other database connection you want). \n\nIn the terminal `cd` to the root directory of your project. Run the command below to create the SQLite database file:\n\n```\n    $ touch database/database.sqlite\n```\n\nThe command above will create an empty file that will be used by SQLite. Run the command below to create a migration:\n\n``` php\n    $ php artisan make:migration create_queued_emails_table\n```\n\nOpen up the migration file that was just created by the command above and replace the `up` method with the code below:\n\n``` php\n    public function up()\n    {\n        Schema::create('queued_emails', function (Blueprint $table) {\n            $table-\u003eincrements('id');\n            $table-\u003estring('email');\n            $table-\u003estring('description');\n            $table-\u003eboolean('run')-\u003edefault(false);\n            $table-\u003etimestamps();\n        });\n    }\n```\n\nNow run the command below to migrate our database:\n\n``` php\n    $ php artisan migrate\n```\n\n### Setting up Mailtrap for email testing\nOpen your `.env`  file and enter the keys you got from the Mailtrap dashboard. The relevant keys are listed below:\n\n```\n    MAIL_DRIVER=smtp\n    MAIL_HOST=smtp.mailtrap.io\n    MAIL_PORT=2525\n    MAIL_USERNAME=null\n    MAIL_PASSWORD=null\n    MAIL_ENCRYPTION=null\n    MAIL_FROM=\"john@doe.com\"\n    MAIL_NAME=\"John Doe\"\n```\n\nNow when emails are sent, the emails will be visible in the Mailtrap inbox. \n\n### Setting up authentication\nThe next thing we need to do is set up authentication. Open your terminal and enter the command below:\n\n``` php\n    $ php artisan make:auth\n```\n\nThis will generate an authentication scaffold. That is all that you need to do regarding authentication.\n\n### Configuring Pusher\nReplace the `PUSHER_*` keys in the `.env` file with the correct keys you got from your Pusher dashboard:\n\n```\n    PUSHER_APP_ID=\"PUSHER_APP_ID\"\n    PUSHER_APP_KEY=\"PUSHER_APP_KEY\"\n    PUSHER_APP_SECRET=\"PUSHER_APP_SECRET\" \n```\n\nOpen the terminal and enter the command below to install the Pusher PHP SDK:\n\n```\n    $ composer require pusher/pusher-php-server \"~3.0\"\n```\n\nAfter installation is complete, open the `config/broadcasting.php` file and scroll to the `pusher` section. Replace the `options` key with the following:\n\n``` php\n    'options' =\u003e [\n        'encrypt' =\u003e true,\n        'cluster' =\u003e 'PUSHER_APP_CLUSTER'\n    ],\n```\n\n### Configuring other miscellaneous things\nOpen the `.env` file and change the `BROADCAST_DRIVER` to `pusher`, and the `QUEUE_DRIVER`  to `database`. To make sure we have the tables necessary to use `database` as our `QUEUE_DRIVER` run the command below to generate the database migration:\n\n``` php\n    $ php artisan queue:table\n```\nThen run the migrate command to migrate the database:\n\n``` php\n    $ php artisan migrate\n```\nThis will create the database table required to use our database as a queue driver. \n\n\u003e 💡 **In a production environment, it is better to use an in-memory storage like Redis or Memcached as the queue driver. In-memory storage is faster and thus has better performance than using a relational database.**\n\n## Building the backend of our application\n\nNow let’s create the backend of our application. Run the command below in your terminal:\n\n``` php\n    $ php artisan make:model QueuedEmails\n```\n\nThis will create a new model in the `app` directory. Open the file and replace the contents with the following:\n\n``` php\n    \u003c?php\n    \n    namespace App;\n    \n    use Illuminate\\Database\\Eloquent\\Model;\n    \n    class QueuedEmails extends Model\n    {\n        protected $fillable = ['description', 'run', 'email'];\n        protected $casts = ['run' =\u003e \"boolean\"];\n    }\n```\n\nIn the code above, we define the `fillable` property of the class. This will prevent a mass assignment exception error when we try to create a new entry to the database. We also specify a `casts` property which will instruct Eloquent to typecast attributes to data types.\n\nNext, open the `HomeController` and and replace the contents with the code below:\n\n``` php\n    \u003c?php\n    namespace App\\Http\\Controllers;\n    \n    use Mail;\n    use App\\QueuedEmails;\n    use App\\Mail\\SimulateMail;\n    use Faker\\Factory as Faker;\n    \n    class HomeController extends Controller\n    {\n        /**\n         * Create a new controller instance.\n         *\n         * @return void\n         */\n        public function __construct()\n        {\n            $this-\u003emiddleware('auth');\n    \n            $this-\u003efaker = Faker::create();\n        }\n    \n        /**\n         * Show the application dashboard.\n         *\n         * @return \\Illuminate\\Http\\Response\n         */\n        public function index()\n        {\n            return view('home', ['jobs' =\u003e $this-\u003ejobs()]);\n        }\n        \n        /**\n         * Return all the jobs.\n         *\n         * @return array\n         */\n        public function jobs()\n        {\n            return QueuedEmails::orderBy('created_at', 'DESC')-\u003eget()-\u003etoArray();\n        }\n        \n        /**\n         * Simulate sending the email.\n         *\n         * @return mixed\n         */\n        public function simulate()\n        {\n            $email = $this-\u003efaker-\u003eemail;\n            \n            Mail::to($email)-\u003esend(\n                new SimulateMail([\n                    \"email\" =\u003e $email,\n                    \"description\" =\u003e $this-\u003efaker-\u003esentence()\n                ])\n            );\n            \n            return redirect()-\u003eroute('home');\n        }\n    }\n```\n\nIn the controller above, we have 4 methods that are mostly self-explanatory. In the class we use the [Faker library](https://github.com/fzaninotto/Faker) which helps us generate random fake values. In the `simulate` method, we are using the faker library to generate a fake email address and description. We instantiate a `SimulateMail` [mailable](https://laravel.com/docs/5.5/mail#generating-mailables).\n\nOpen the terminal and enter the command below:\n\n``` php\n    $ php artisan make:mail SimulateMail\n```\n\nOpen the `SimulateMail` class and enter the code below:\n\n``` php\n    \u003c?php\n    namespace App\\Mail;\n    \n    use App\\QueuedEmails;\n    use Illuminate\\Bus\\Queueable;\n    use Illuminate\\Mail\\Mailable;\n    use Illuminate\\Queue\\SerializesModels;\n    use App\\Events\\{EmailQueued, EmailSent};\n    use Illuminate\\Contracts\\Queue\\ShouldQueue;\n    use Illuminate\\Contracts\\Queue\\Factory as Queue;\n    use Illuminate\\Contracts\\Mail\\Mailer as MailerContract;\n    \n    class SimulateMail extends Mailable implements ShouldQueue\n    {\n        use Queueable, SerializesModels;\n        \n        protected $mail;\n    \n        /**\n         * Create a new message instance.\n         *\n         * @return void\n         */\n        public function __construct(array $mail)\n        {\n            $this-\u003email = QueuedEmails::create($mail);\n        }\n        \n        /**\n         * Build the message.\n         *\n         * @return $this\n         */\n        public function build()\n        {\n            return $this-\u003esubject(\"Queuer: Welcome to queuer\")-\u003eview('email.welcome');\n        }\n    \n        /**\n         * Send the mail\n         */\n        public function send(MailerContract $mailer)\n        {\n            $this-\u003email-\u003eupdate(['run' =\u003e true]);\n            \n            event(new EmailSent($this-\u003email));\n    \n            parent::send($mailer);\n        }\n        \n        /**\n         * Queue the email\n         */\n        public function queue(Queue $queue)\n        {\n            event(new EmailQueued($this-\u003email));\n    \n            return parent::queue($queue);\n        }\n    }\n```\n\n\u003e 💡 **By implementing the `ShouldQueue` interface, we are telling Laravel that the email should be queued and not sent immediately.**\n\nIn the class above, we have a constructor that creates a new entry into the `queued_emails` table. In the `build` method, we build the mail message we are going to be sending. \n\nIn the `send` method, we  mark the `queued_emails` entry’s `run`  column to `true`. We also fire an event called `EmailSent`. In the `queue` method, we also trigger an event called `EmailQueued`.\n\nLet’s create the events we triggered in the methods above. In your terminal run the command below:\n\n``` php\n    $ php artisan make:event EmailSent\n    $ php artisan make:event EmailQueued\n```\n\nIn the `EmailSent` event class, paste the following code:\n\n``` php\n    \u003c?php\n    namespace App\\Events;\n    \n    use App\\QueuedEmails;\n    use Illuminate\\Broadcasting\\Channel;\n    use Illuminate\\Queue\\SerializesModels;\n    use Illuminate\\Foundation\\Events\\Dispatchable;\n    use Illuminate\\Broadcasting\\InteractsWithSockets;\n    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n    \n    class EmailSent implements ShouldBroadcast\n    {\n        use Dispatchable, InteractsWithSockets, SerializesModels;\n    \n        public $mail;\n    \n        public function __construct($mail)\n        {\n            $this-\u003email = $mail;\n        }\n        \n        public function broadcastOn()\n        {\n            return new Channel('email-queue');\n        }\n        \n        public function broadcastAs()\n        {\n            return 'sent';\n        }\n    }\n```\n\nIn the code above, we just use [Broadcasting](https://laravel.com/docs/5.5/broadcasting#defining-broadcast-events) in Laravel to send some data to Pusher. \n\nOpen the `EmailQueued` event class and paste the code below:\n\n``` php\n    \u003c?php\n    \n    namespace App\\Events;\n    \n    use App\\QueuedEmails;\n    use Illuminate\\Broadcasting\\Channel;\n    use Illuminate\\Queue\\SerializesModels;\n    use Illuminate\\Foundation\\Events\\Dispatchable;\n    use Illuminate\\Broadcasting\\InteractsWithSockets;\n    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n    \n    class EmailQueued implements ShouldBroadcast\n    {\n        use Dispatchable, InteractsWithSockets, SerializesModels;\n        \n        public $mail;\n    \n        public function __construct($mail)\n        {\n            $this-\u003email = $mail;\n        }\n        \n        public function broadcastOn()\n        {\n            return new Channel('email-queue');\n        }\n        \n        public function broadcastAs()\n        {\n            return 'add';\n        }\n    }\n```\n\nThis class is almost the same as the `EmailSent` event class. The minor difference is the `broadcastAs` method. It returns a different alias to broadcast the event as.\n\nFinally, open the routes file `routes/web.php` and replace the code with this:\n\n``` php\n    Auth::routes();\n    Route::name('jobs')-\u003eget('/jobs', 'HomeController@jobs');\n    Route::name('simulate')-\u003eget('/simulate', 'HomeController@simulate');\n    Route::name('home')-\u003eget('/home', 'HomeController@index');\n    Route::view('/', 'welcome');\n```\n\nGreat! Now let’s move on to the frontend of the application.\n\n## Building the frontend of our application\n\nNow that we have set up most of the backend, we will create the frontend of the application. Open the `resources/views/home.blade.php` file and replace the code with the following:\n\n``` php\n    @extends('layouts.app')\n    \n    @section('content')\n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-md-12\"\u003e\n                \u003cdiv class=\"panel panel-default\"\u003e\n                    \u003cdiv class=\"panel-heading clearfix\"\u003e\n                        \u003cspan class=\"pull-left\"\u003eQueue Reports\u003c/span\u003e\n                        \u003ca href=\"{{ route('simulate') }}\" class=\"btn btn-sm btn-primary pull-right\"\u003eSimulate\u003c/a\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"panel-body\"\u003e\n                        \u003cjobs :jobs='@json($jobs)'\u003e\u003c/jobs\u003e\u003c/jobs\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    @endsection\n```\n\nThe noteworthy aspect of the code above is the `jobs` tag. This is a reference to the Vue component we will create next. We also have a “Simulate” button that leads to a `/simulate` route. This route simulates queuing an email to be sent.\n\nOpen your terminal and type in the command below:\n\n```\n    $ npm install --save laravel-echo pusher-js\n```\n\nThis will install [Laravel Echo](https://laravel.com/docs/5.5/broadcasting#installing-laravel-echo) and the [Pusher JS SDK](https://github.com/pusher/pusher-js). When the installation is complete, run the command below to install the other NPM dependencies:\n\n```\n    $ npm install\n```\n\n### Building our Vue component\nLet’s build the `jobs` Vue component we referenced earlier. Open the `resources/assets/js/app.js` file and replace the code below:\n\n``` javascript\n    Vue.component('example', require('./components/ExampleComponent.vue'));\n```\n\nwith:\n\n``` javascript\n    Vue.component('jobs', require('./components/JobsComponent.vue'));\n```\n\nNow create a new `JobsComponent.vue` file in the `resources/assets/js/components/` directory. In the file, paste in the following code:\n\n``` javascript\n    \u003ctemplate\u003e\n        \u003ctable class=\"table\"\u003e\n            \u003ctbody\u003e\n                \u003ctr v-for=\"(job, index) in allJobs\" :key=\"index\" v-bind:class=\"{success: job.run, danger: !job.run}\"\u003e\n                    \u003ctd width=\"80%\"\u003e{{ job.description }}\u003c/td\u003e\n                    \u003ctd\u003e{{ job.created_at }}\u003c/td\u003e\n                \u003c/tr\u003e\n            \u003c/tbody\u003e\n        \u003c/table\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    export default {\n        props: ['jobs'],\n        data() {\n            return {allJobs: this.jobs}\n        },\n        created() {\n            let vm = this\n            vm.refreshAllJobs = (e) =\u003e axios.get('/jobs').then((e) =\u003e (vm.allJobs = e.data))\n            Echo.channel('email-queue')\n                .listen('.add', (e)  =\u003e vm.refreshAllJobs(e))\n                .listen('.sent', (e) =\u003e vm.refreshAllJobs(e))\n        }\n    }\n    \u003c/script\u003e\n```\n\nIn the Vue component above, we have defined a `template`. In there, we loop through the `jobs` array and list each job’s description and timestamp.\n\nIn the `created` method of the Vue component `script`, we have a `refreshAllJobs` function that uses [Axios](https://github.com/axios/axios) (a HTTP request library built-in Laravel by default) to make a request to the `/jobs` route. We then assign the response to the `allJobs` property.\n\nIn the same method, we use [Laravel Echo](https://laravel.com/docs/5.5/broadcasting#installing-laravel-echo) to listen to a Pusher channel and wait for an event to be triggered. Whenever the events `.add`  and `.sent` are triggered, we call the `refreshAllJobs`  method.\n\n\n\u003e 💡 **The event names have a dot before them because, in Laravel, whenever you use the `broadcastAs` method to define an alias you need to add the dot. Without the dot your event will not be caught by the listener. If you do not provide an alias, Laravel will use the namespace + class as the name of the broadcast event.** \n\nOpen the `resources/assets/js/bootstrap.js` file. At the bottom of the file, add the following code:\n\n``` javascript\n    import Echo from 'laravel-echo'\n    \n    window.Pusher = require('pusher-js');\n    \n    window.Echo = new Echo({\n        broadcaster: 'pusher',\n        key: 'PUSHER_APP_KEY',\n        encrypt: true,\n        cluster: 'PUSHER_APP_CLUSTER'\n    });\n```\n\n\u003e ⚠️  **Make sure you replace the `PUSHER_APP_KEY` and `PUSHER_APP_CLUSTER` with your Pusher application key and cluster.**\n\nFinally, run the command below to build your assets:\n\n```\n    $ npm run dev\n```\n\n## Testing our application \n\nAfter the build is complete, start a PHP server if you have not already by running the command below:\n\n``` php\n    $ php artisan serve\n```\n\nThis will create a PHP server so we can preview our application. The URL will be provided on the terminal but the default is http://127.0.0.1:8000. \n\nWhen you see the Laravel homepage, create a new account using the ”Register” link on the top right corner of the page. Now click the “Simulate” button and you should see a new queued email entry. \n\nNow we will manually execute the processes on our queue using the `queue:listen` artisan command. Open a new terminal window and run the command below:\n\n``` php\n    $ php artisan queue:listen\n```\n\nThis should start executing any queues it sees. As long as the terminal is open and the `queue:listen` command is running, when you click the “Simulate” button the queue will run immediately. If you kill the `queue:listen` command, the queue entries will remain there and not be triggered.\n\n\u003e 💡 **In a production environment, you cannot keep `queue:listen` running and you might need a worker running on a background proces. You can read more about how you can do that [here](https://laravel.com/docs/5.5/queues#running-the-queue-worker).**\n\n\n## Conclusion\n\nIn this article, we have been able to create a realtime Laravel queue monitor using Pusher and Vue. Having queues that you can track and quantify can be useful. Hopefully, you picked something from this article.  If you have any questions or feedback, feel free to ask in the comments section.\n\nThe source code is available on [GitHub](https://github.com/neoighodaro/monitoring-laravel-queues).","metaTitle":"Monitoring Laravel’s background queues in realtime","metaDescription":"Build a sample app and report page to monitor Laravel's background queues functionality. Queue emails for sending, and monitor which have been sent."}}],"defaultValue":"Channels \u0026 PHP","queryType":"tag","pages":6,"route":"/tutorials","query":{"product":"Channels","tag":"PHP","page":"3"}}},"page":"/tutorials","query":{"product":"Channels","tag":"PHP","page":"3"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=PHP&page=3 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:31:03 GMT -->
</html>