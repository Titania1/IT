<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=Online%20Presence by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:42:28 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">16</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels &amp; Online Presence</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorials80f9.html?tag=Online%20Presence" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials29b8.html?product=Beams&amp;tag=Online%20Presence" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Channels &amp; Online Presence"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/live-map-react.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Maps</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live map application with React</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">In this tutorial, you will build a web application using React, Node.js and Google Maps. Users will be able to see their...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/ios-user-presence-node-swift.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Online Presence</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Creating an iOS app with user presence using Node.js and Swift</h3><p class="css-k12xad e5jrto45">This tutorial demonstrates how to add an online presence feature to an iOS app. You will use Node for the backend, and b...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/presence-channels-laravel.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Implement online presence in a Laravel application</h3><p class="css-k12xad e5jrto45">This tutorial shows how to implement online presence and realtime updates in a Laravel application. You will use Laravel...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/online-presence-counter-symfony.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Online Presence<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Building an online presence counter with Symfony</h3><p class="css-k12xad e5jrto45">This tutorial shows how to build a simple online presence counter using Symfony. You will create a basic web page with a...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/game-python-vue.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Gaming<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a two-player game with Python and Vue</h3><p class="css-k12xad e5jrto45">Build a simple two-player game featuring online presence and realtime interactions. Use Python for the backend, and Vue ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/go-vue-online-presence.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a Go application with online presence</h3><p class="css-k12xad e5jrto45">In this tutorial you&#x27;ll build a simple Go application, using Vue.js for the frontend. Users will be able to sign in and ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/android-messenger-presence-kotlin.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an Android messenger app with online presence using Kotlin</h3><p class="css-k12xad e5jrto45">This tutorial shows how to build an Android messaging app featuring online presence functionality. Use Node and MongoDB ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/online-presence-ruby-rails.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Online Presence<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Ruby</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Track online presence in a Ruby on Rails app</h3><p class="css-k12xad e5jrto45">Build a Ruby app that tracks which users are online. You will create a simple app, with signup and login functionality. ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-sentiment-analysis-nextjs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Online Presence</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app with sentiment analysis using Next.js</h3><p class="css-k12xad e5jrto45">Use Next.js to build a chat app featuring sentiment analysis to track users&#x27; moods. </p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="69ho49">.css-69ho49{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#eeeeff;color:#8f87e6;cursor:not-allowed;}.css-69ho49:hover{background:#5c29db;color:white;}.css-69ho49:active{background:#5c29db;}@media all and (min-width:760px){.css-69ho49{font-size:1rem;}}.css-69ho49:hover,.css-69ho49:active{cursor:not-allowed;background:#ebeaef;color:#fffc;}</style><a href="#" disabled="" class="css-69ho49 edg0byb1">Prev</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials8198.html?product=Channels&amp;tag=Online%20Presence&amp;page=1" class="css-2wakph edg0byb1">1</a><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials5376.html?product=Channels&amp;tag=Online%20Presence&amp;page=2" class="css-5s6711 edg0byb1">2</a><a href="tutorials5376.html?product=Channels&amp;tag=Online%20Presence&amp;page=2" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":16,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5tG74hhJvigGccusoAU4iK","type":"Entry","createdAt":"2019-02-11T23:17:22.717Z","updatedAt":"2019-02-11T23:17:22.717Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live map application with React","url":"live-map-react","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2qeLNtkOw0ImAS2QcUcKcG","type":"Entry","createdAt":"2018-06-15T10:54:43.491Z","updatedAt":"2019-05-17T10:50:18.109Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Oreoluwa Ogundipe","url":"oreoluwa-ogundipe","email":"oreogundipe@gmail.com","twitter":"https://twitter.com/ogundipeore","github":"https://github.com/orehga","guestWriter":true}}],"projectRepo":"https://github.com/oreHGA/pusher-react-location","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2019-02-11","description":"In this tutorial, you will build a web application using React, Node.js and Google Maps. Users will be able to see their friends' locations updating in realtime.","prerequisite":"You will need Node 6+ and npx installed on your machine.","content":"Today, almost all of us rely on map applications for directions, distances and local information.. Now, we even have the ability to share our live location with friends, but imagine a scenario where a group of three friends are trying to meet at a particular location, each one of the friends needs to send a link to the others for them to know where they are. \n\nIn this article, we are going to use [Pusher Channels](https://pusher.com/channels) to create a React application that allows you to see the location of your friends in realtime when they are online on the app. By the end of this article, you should have an application that looks like this: \n\n![react-map-online-presence-1](//images.ctfassets.net/1es3ne0caaid/55tpnAYkmkKsqIyuQIE2OM/b76ac13e57c1c7705e49b53ce7846831/react-map-online-presence-1.gif)\n\n## Prerequisites\n\nTo follow through this tutorial, you’ll need the following:\n\n- Node \u003e= 6 installed on your machine\n- npm \u003e= 5.2 installed on your machine\n- npx installed on your machine\n\n\n## Getting started\n\nTo get started, create a new React application by running this command:\n\n```\n    npx create-react-app pusher-react-location\n```\n\nThis creates a starter React project in a folder titled `pusher-react-location`. To see the demo application at work, go to your terminal and run the command:\n\n```\n    cd pusher-react-location\n    npm start\n```\n\nThis serves the React application. Navigate your browser to `http://locahost:3000` and you should get a view that looks like this:\n\n![react-map-online-presence-2](//images.ctfassets.net/1es3ne0caaid/DAmOpFQ1J6OIEIIwkm8yy/01bab1b5fffeeae571915891c6d8a6ba/react-map-online-presence-2.png)\n\n## Building the backend server\n\nThe backend server of our application will have the following functionality:\n\n- Sharing users’ locations\n- Authenticating new users on the presence channel\n\nCreate a `/server` folder in your project:\n\n```\n    mkdir server\n    cd server\n```\n\nInstall the Node modules that we will need to power the backend server:\n\n```\n    npm init -y\n    npm install express body-parser pusher\n```\n\n- `express` will power the web server\n- `body-parser` to handle incoming requests\n- `pusher` to add realtime functionality and online presence\n\nAfterwards, create a `server.js` file in the `server/` directory:\n\n```\n    touch server.js\n```\n\nEdit the `server.js` file to look as follows:\n\n``` javascript\n    // server/server.js\n    \n    const express = require('express')\n    const bodyParser = require('body-parser')\n    const Pusher = require('pusher');\n    \n    // create a express application\n    const app = express();\n    \n    // initialize pusher\n    let pusher = new Pusher({\n        appId: 'PUSHER_APP_ID',\n        key: 'PUSHER_APP_KEY',\n        secret: 'PUSHER_APP_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n        encrypted: true\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    // to Allow CORS\n    app.use((req, res, next) =\u003e {\n        res.header('Access-Control-Allow-Origin', '*');\n        res.header(\n            'Access-Control-Allow-Headers',\n            'Origin, X-Requested-With, Content-Type, Accept'\n        );\n        next();\n    });\n    \n    [...]\n```\n\nWe include the necessary JavaScript libraries and then create a new Pusher object using your \nPusher application credentials.\n\n\u003e To obtain your Pusher credentials, create a new account [here](https://dashboard.pusher.com/accounts/sign_up). Afterwards, you’ll be redirected to your [Pusher dashboard](https://dashboard.pusher.com/). Go ahead and create a new project, obtain your `PUSHER_APP_ID`, `PUSHER_APP_KEY`, `PUSHER_APP_SECRET`, `PUSHER_APP_CLUSTER` and add them to your `server.js` file.\n\nAfterwards, we specify some application middleware to handle incoming requests. The backend server will have two routes:\n\n- `/pusher/auth` - handles requests to authenticate users joining the presence channel\n- `/update-location` - handles requests to trigger an event when a user updates their location.\n\nWith Pusher, when a new client tries to join a presence channel, a `POST` request is first made to authenticate the new client. In this case, we create a random string to identify the client and this makes up the `presenceData`object. The `presenceData` , `channel` and `socketId` are then passed to Pusher to authenticate the client.\n\nThe `/update-location` route accepts the incoming data and then triggers a `location-update` event to the `presence-channel`.\n\n\u003e In later parts of the article, we will see how the channel is created in our React application\n\nAdd the code below to your `server/server.js` file:\n\n``` javascript\n    // server/server.js\n    [...]\n    \n    app.post('/pusher/auth', (req, res) =\u003e {\n        let socketId = req.body.socket_id;\n        let channel = req.body.channel_name;\n        random_string = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);\n        let presenceData = {\n            user_id: random_string,\n            user_info: {\n                username: '@' + random_string,\n            }\n        };\n        let auth = pusher.authenticate(socketId, channel, presenceData);\n        res.send(auth);\n    });\n    \n    app.post('/update-location', (req, res) =\u003e {\n        // trigger a new post event via pusher\n        pusher.trigger('presence-channel', 'location-update', {\n            'username': req.body.username,\n            'location': req.body.location\n        })\n        res.json({ 'status': 200 });\n    });\n    \n    let port = 3128;\n    app.listen(port);\n    console.log('listening');\n```\n\nNow that the backend server is created, you can run it by entering the command:\n\n```\n    node server.js\n```\n\nNow, let’s look at how to build the rest of the application.\n\n\n## Creating the interface\n\n![react-map-online-presence-3](//images.ctfassets.net/1es3ne0caaid/1WKJXXB9pOkMqe6u6mGQAw/4728cc1883d44043a60cd84ff142ce22/react-map-online-presence-3.png)\n\nFirst of all,  we need to get a simple map interface for the application and to do this, let’s use [Google Maps JavaScript API](https://developers.google.com/maps/documentation/javascript/tutorial). Follow this [guide](https://developers.google.com/maps/documentation/javascript/get-api-key) to obtain your Google Maps API key which we will use later in this application.\n\n### Installing necessary packages\n\nTo add all functionality to our application, we’ll need to install the following packages:\n\n- google-map-react - to use the Google Maps JavaScript API with react\n- pusher-js - to enable realtime functionality with Pusher\n- axios - to make POST requests to our backend server\n- react-toastify - to notify users when new users are online or go offline\n\n To install, go to the root folder of your react application and run the following in your terminal:\n\n```\n    npm install google-map-react pusher-js axios react-toastify\n```\n\n### Displaying the map\n\nTo see it at work in your application, edit your `src/App.js` file to look like this:\n\n``` javascript\n    // src/App.js\n    import React, { Component } from 'react';\n    import GoogleMap from 'google-map-react';\n    \n    const mapStyles = {\n      width: '100%',\n      height: '100%'\n    }\n    \n    const markerStyle = {\n      height: '50px',\n      width: '50px',\n      marginTop: '-50px'\n    }\n    \n    const imgStyle = {\n      height: '100%'\n    }\n    \n    \n    const Marker = ({ title }) =\u003e (\n      \u003cdiv style={markerStyle}\u003e\n        \u003cimg style={imgStyle} src=\"https://res.cloudinary.com/og-tech/image/upload/s--OpSJXuvZ--/v1545236805/map-marker_hfipes.png\" alt={title} /\u003e\n        \u003ch3\u003e{title}\u003c/h3\u003e\n      \u003c/div\u003e\n    );\n    \n    class App extends Component {\n      render() {\n        return (\n          \u003cdiv \u003e\n            \u003cGoogleMap\n              style={mapStyles}\n              bootstrapURLKeys={{ key: 'GOOGLE_MAPS_API_KEY' }}\n              center={{ lat: 5.6219868, lng: -0.1733074 }}\n              zoom={14}\n            \u003e\n              \u003cMarker\n              title={'Current Location'}\n              lat={5.6219868}\n              lng={-0.1733074}\n            \u003e\n              \u003c/Marker\u003e\n            \u003c/GoogleMap\u003e\n          \u003c/div\u003e\n        )\n      }\n    }\n    \n    export default App;\n```\n\nIn the `App.js` file, we defined the `center` of the map and a single marker which will represent the location of the user when they open the application.\n\n\n\u003e **Note**: Remember to add your `GOOGLE_MAPS_API_KEY` which you can obtain [here](https://developers.google.com/maps/documentation/javascript/get-api-key).\n\nNow, when you run the application and navigate to `localhost:3000` in your browser you get the view below:\n\n![react-map-online-presence-4](//images.ctfassets.net/1es3ne0caaid/2n87URwYfGkcIOGOmau0iu/04d5ffd56771d249dc333bca2752da86/react-map-online-presence-4.png)\n\nCurrently, the center of the map and the user’s pin are hard-coded into the application. Let’s look at how to make these dynamic and display the user’s location and the location of other users signed in to the application.\n\n\n## Displaying online friends locations in realtime with Pusher\n\nNow let’s update the `App.js` to include the functionality. First, we need to add states to our component that will track:\n\n- The map center\n- Users online\n- Username of the current user\n- Location for other online users\n\nUpdate the `App.js` file so that your constructor will look like this:\n\n``` javascript\n    // src/App.js\n    [...]\n    import axios from 'axios';\n    import Pusher from 'pusher-js';\n    import { ToastContainer, toast } from 'react-toastify';\n    import 'react-toastify/dist/ReactToastify.css';\n    \n    class App extends Component {\n    \n      constructor(props) {\n        super(props)\n        this.state = {\n          center: { lat: 5.6219868, lng: -0.23223 },\n          locations: {},\n          users_online: [],\n          current_user: ''\n        }\n      }\n    \n      [...]  \n    }\n```\n\nWe then create a new Pusher object in the `componentDidMount()` lifecycle method by specifying the `PUSHER_APP_KEY`, `PUSHER_APP_CLUSTER` and the `authEndpoint` created on our backend server earlier in the article. Afterwards, we subscribe to the `presence-channel` and then bind the channel to listen for four events:\n\n\n-  `pusher:subscription_succeeded` event that is triggered from the backend server when a user successfully subscribes to a presence channel .\n- `location-update` event which is triggered when another user’s location is updated.\n- `pusher:member_removed` event that is triggered when another user goes offline.\n- `pusher:member_added` event that is triggered when a new user comes online.\n\n\n``` javascript\n    // src/App.js\n    [...]\n    \n    class App extends Component {\n      [...]\n      \n      componentDidMount() {\n          let pusher = new Pusher('PUSHER_APP_KEY', {\n            authEndpoint: \"http://localhost:3128/pusher/auth\",\n            cluster: \"mt1\"\n          })\n          this.presenceChannel = pusher.subscribe('presence-channel');\n          \n          this.presenceChannel.bind('pusher:subscription_succeeded', members =\u003e {\n            this.setState({\n              users_online: members.members,\n              current_user: members.myID\n            });\n            this.getLocation();\n            this.notify();\n          })\n          \n          this.presenceChannel.bind('location-update', body =\u003e {\n            this.setState((prevState, props) =\u003e {\n              const newState = { ...prevState }\n              newState.locations[`${body.username}`] = body.location;\n              return newState;\n            });\n          });\n          \n          this.presenceChannel.bind('pusher:member_removed', member =\u003e {\n            this.setState((prevState, props) =\u003e {\n              const newState = { ...prevState };\n              // remove member location once they go offline\n              delete newState.locations[`${member.id}`];\n              // delete member from the list of online users\n              delete newState.users_online[`${member.id}`];\n              return newState;\n            })\n            this.notify()\n          })\n          \n          this.presenceChannel.bind('pusher:member_added', member =\u003e {\n            this.notify();\n          })\n        }\n        \n        [...]\n    }\n```\n\nNotice that we called a `notify()` method on our Pusher events. Add the function to your `App.js` file like below:\n\n``` javascript\n    // src/App.js\n    \n    class App extends Component {\n      [...]\n      \n      \n      notify = () =\u003e toast(`Users online : ${Object.keys(this.state.users_online).length}`, {\n        position: \"top-right\",\n        autoClose: 3000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        type: 'info'\n      });\n      \n      [...]\n    \n    }\n```\n\nWe also called a `getLocation()` method in the `componentDidMount()`. This function is responsible for fetching the location of the user from the browser. Let’s take a look at how this works. Add the `getLocation()` function to your `App.js` file:\n\n``` javascript\n    // src/App.js\n    \n    class App extends Component {\n      \n      [...]\n      \n      getLocation = () =\u003e {\n        if (\"geolocation\" in navigator) {\n          navigator.geolocation.watchPosition(position =\u003e {\n            let location = { lat: position.coords.latitude, lng: position.coords.longitude };\n            this.setState((prevState, props) =\u003e {\n              let newState = { ...prevState };\n              newState.center = location;\n              newState.locations[`${prevState.current_user}`] = location;\n              return newState;\n            });\n            axios.post(\"http://localhost:3128/update-location\", {\n              username: this.state.current_user,\n              location: location\n            }).then(res =\u003e {\n              if (res.status === 200) {\n                console.log(\"new location updated successfully\");\n              }\n            });\n          })\n       } else {\n          alert(\"Sorry, geolocation is not available on your device. You need that to use this app\");\n        }\n      }\n      \n      [...]\n    \n    }\n```\n\nThe `getLocation()` method first checks if the application can access the geolocation property of the browser and alerts the user if it can’t. The `navigator.geolocation.watchPosition()` method gets the users’ location as the user moves and then updates the component states with the most up to date location of the user. Afterwards, a request is made to the backend server to trigger a `location-update` event so that other signed in users can be notified with the latest location.\n\nFinally, to show all locations of online users, let’s update the `render()` function of the component to look like this:\n\n``` javascript\n    // src/App.js\n    [...]\n    \n    class App extends Component {\n      [...]\n      \n      render() {\n        let locationMarkers = Object.keys(this.state.locations).map((username, id) =\u003e {\n          return (\n            \u003cMarker\n              key={id}\n              title={`${username === this.state.current_user ? 'My location' : username + \"'s location\"}`}\n              lat={this.state.locations[`${username}`].lat}\n              lng={this.state.locations[`${username}`].lng}\n            \u003e\n            \u003c/Marker\u003e\n          );\n        });\n    \n        return (\n          \u003cdiv \u003e\n            \u003cGoogleMap\n              style={mapStyles}\n              bootstrapURLKeys={{ key: 'GOOGLE_MAPS_API_KEY' }}\n              center={this.state.center}\n              zoom={14}\n            \u003e\n              {locationMarkers}\n            \u003c/GoogleMap\u003e\n          \u003c/div\u003e\n        )\n      }\n      \n      [...]\n      \n    }\n```\n\n`locationMarkers` creates a list of `Marker`'s for each of the online users. This will give the user a perspective of where his other online friends are.\n\nNow, reload the application and navigate to `localhost:3000` . Your application should work like this when multiple users are online:\n\n![react-map-online-presence-5](//images.ctfassets.net/1es3ne0caaid/eEFWTDl5DM6QmAeygW20I/48dd617efdbec4a14fef7e0dee1e4a5f/react-map-online-presence-5.gif)\n\n## Conclusion\n\nIn this tutorial, we saw how to use Pusher Channels, Google Maps and React to build a live map with online presence that lets you know where your friends online are. This tutorial is one of the many ways you can use Pusher Channels in the product you build. Feel free to use the concepts shared here in your own application. Here’s a link to the [GitHub](https://github.com/oreHGA/pusher-react-location) repository.","metaTitle":"Build a live map application with React","metaDescription":"In this tutorial, you will build a web application using React, Node.js and Google Maps. Users will be able to see their friends' locations updating in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4umqdaDyzCCKAIAYIO0gEC","type":"Entry","createdAt":"2018-12-10T19:39:58.351Z","updatedAt":"2020-06-19T14:26:28.893Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Creating an iOS app with user presence using Node.js and Swift","url":"ios-user-presence-node-swift","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/ios-presence-channel-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-12-10","description":"This tutorial demonstrates how to add an online presence feature to an iOS app. You will use Node for the backend, and build a basic example app using Swift.","prerequisite":"You will need Xcode, Cocoapods and Node installed on your machine. Basic knowledge of iOS development will be helpful.","content":"In this tutorial, we are going to see how you can add user presence to an iOS application using Pusher Channels, Node.js, and Swift. We will create a sample chat application to demonstrate this feature. However, because we are focusing on just user presence, we will not implement the actual chat feature.\n\nIf you are building an application that has a user base, you might need to show your users when their friends are currently online. This comes in handy especially in messenger applications where the current user would like to know which of their friends are available for instant messaging.\n\nHere is a screen recording on how we want the application to work:\n\n![swift-presence-demo-1](//images.ctfassets.net/1es3ne0caaid/1ckGs7NjtccOWCoScc6qKg/c17f54d7165a66443b7e021ecd055e56/swift-presence-demo-1.gif)\n\n## Prerequisites\n\nTo follow along you need the following requirements:\n\n\n1. Xcode installed on your machine. Download [here](https://developer.apple.com/xcode).\n2. Knowledge of the Swift programming language.\n3. Knowledge of the Xcode IDE.\n4. A Pusher Channels app. Create one [here](https://pusher.com).\n5. Cocoapods installed on your machine. [Installation guide](https://guides.cocoapods.org/using/getting-started.html).\n6. Node.js and npm installed on your machine. [Installation guide](https://nodejs.org/en/download/).\n7. Basic knowledge of JavaScript and Node.js.\n\nLet’s get started.\n\n\n## Creating the backend of the application\n\nBefore creating the iOS application, let’s create the backend application in Node.js. This application will have the necessary endpoints the application will need to function properly. To get started, create a new directory for the project. \n\n### Installing the dependencies\n\nIn the root of the project, create a new `package.json` file and paste the following contents into it:\n\n``` json\n    {\n      \"name\": \"presensesample\",\n      \"version\": \"1.0.0\",\n      \"main\": \"index.js\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.18.3\",\n        \"express\": \"^4.16.4\",\n        \"pusher\": \"^2.1.3\"\n      }\n    }\n```\n\nAbove, we have defined some npm dependencies that the backend application will need to function. Amongst the dependencies, we can see the `pusher` library. This is the Pusher JavaScript server SDK.\n\nNext, open your terminal application and `cd` to the root of the project you just created and run the following command:\n\n```\n    $ npm install\n```\n\nThis command will install all the dependencies we defined above in the `package.json` file.\n\n### Creating the main application\n\nNext, create a new file called `index.js` and paste the following code into the file:\n\n``` javascript\n    // File: ./index.js\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const Pusher = require('pusher');\n    const app = express();\n    \n    let users = {};\n    let currentUser = {};\n    \n    let pusher = new Pusher({\n      appId: 'PUSHER_APP_ID',\n      key: 'PUSHER_APP_KEY',\n      secret: 'PUSHER_APP_SECRET',\n      cluster: 'PUSHER_APP_CLUSTER'\n    });\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // TODO: Add routes here\n    \n    app.listen(process.env.PORT || 5000);\n```\n\n\u003e Replace the `PUSHER_APP_*` placeholders with your Pusher application credentials.\n\nIn the code above, we imported the libraries we need for the backend application. We then instantiated two new variables: `users` and `currentUser`. We will be using these variables as a temporary in-memory store for the data since we are not using a database. \n\nNext, we instantiated the Pusher library using the credentials for our application. We will be using this instance to communicate with the Pusher API. Next, we add the `listen` method which instructs the Express application to start the application on port 5000.\n\nNext, let’s add some routes to the application. In the code above, we added a comment to signify where we will be adding the route definitions. Replace the comment with the following code:\n\n``` javascript\n    // File: ./index.js\n    \n    // [...]\n    \n    app.post('/users', (req, res) =\u003e {\n      const name = req.body.name;\n      const matchedUsers = Object.keys(users).filter(id =\u003e users[id].name === name);\n      \n      if (matchedUsers.length === 0) {\n        const id = generate_random_id();\n        users[id] = currentUser = { id, name };\n      } else {\n        currentUser = users[matchedUsers[0]];\n      }\n      \n      res.json({ currentUser, users });\n    });\n    \n    // [...]\n```\n\nAbove, we have the first route. The route is a `POST` route that creates a new user. It first checks the `users` object to see if a user already exists with the specified name. If a user does not exist, it generates a new user ID using the `generate_random_id`  method (we will create this later) and adds it to the `users`  object. If a user exists, it skips all of that logic. \n\nRegardless of the outcome of the user check, it sets the `currentUser` as the user that was created or matched and then returns the `currentUser` and `users` object as a response.\n\nNext, let’s define the second route. Because we are using presence channels, and presence channels are private channels, we need an endpoint that will authenticate the current user. Below the route above, add the following code:\n\n``` javascript\n    // File: ./index.js\n    \n    // [...]\n    \n    app.post('/pusher/auth/presence', (req, res) =\u003e {\n      let socketId = req.body.socket_id;\n      let channel = req.body.channel_name;\n      \n      let presenceData = {\n        user_id: currentUser.id,\n        user_info: { name: currentUser.name }\n      };\n    \n      let auth = pusher.authenticate(socketId, channel, presenceData);\n      \n      res.send(auth);\n    });\n    \n    // [...]\n```\n\nAbove, we have the Pusher authentication route.  This route gets the expected `socket_id` and `channel_name` and uses that to generate an authentication token. We also supply a `presenceData` object that contains all the information about the user we are authenticating. We then return the token as a response to the client.\n\nFinally, in the first route, we referenced a function `generate_random_id`. Below the route we just defined, paste the following code:\n\n``` javascript\n    // File: ./index.js\n    \n    // [...]\n    \n    function generate_random_id() {\n      let s4 = () =\u003e (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n      return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n    }\n    \n    // [...] \n```\n\nThe function above just generates a random ID that we can then use as the user ID when creating new users.\n\nLet’s add a final default route. This will catch visits to the backend home. In the same file, add the following:\n\n``` javascript\n    // [...]\n    \n    app.get('/', (req, res) =\u003e res.send('It works!'));\n    \n    // [...]\n```\n\nWith this, we are done with the Node.js backend. You can run your application using the command below:\n\n```\n    $ node index.js\n```\n\nYour app will be available here: http://localhost:5000. \n\n\n## Building the iOS application\n\nLaunch Xcode and create a new sample **Single View App** project. We will call ours `presensesample`. \n\n![swift-presence-xcode-create-project](//images.ctfassets.net/1es3ne0caaid/5laF5rUEzmc4gMCcaUcqqE/41ddeca478eb5805b04fc8d8ce6a5109/swift-presence-xcode-create-project.png)\n\nWhen you are done creating the application, close Xcode. Open your terminal application and `cd` to the root directory of the iOS application and run the following command:\n\n```\n    $ pod init\n```\n\nThis will create a new `Podfile` file in the root directory of your application. Open the file and replace the contents with the following:\n\n```\n    # File: ./Podfile\n    target 'presensesample' do\n      platform :ios, '12.0'\n        \n      use_frameworks!\n      \n      pod 'Alamofire', '~\u003e 4.7.3'\n      pod 'PusherSwift', '~\u003e 5.0'\n      pod 'NotificationBannerSwift', '~\u003e 1.7.3'\n    end\n```\n\nAbove, we have defined the application’s dependencies. To install the dependencies, run the following command:\n\n```\n    $ pod install\n```\n\nThe command above will install all the dependencies in the `Podfile` and also create a new `.xcworkspace` file in the root of the project. Open this file in Xcode to launch the project and not the `.xcodeproj` file.\n\n### Creating the scenes\n\nThe first thing we will do is create the storyboard scenes we need for the application to work. We want the storyboard to look like this:\n\n![swift-presence-storyboard](//images.ctfassets.net/1es3ne0caaid/8giPZenseAOU8OYqsmIUk/f73107482e257a499275a825ac0a724d/swift-presence-storyboard.png)\n\nOpen the main storyboard file and delete all the scenes in the file so it is empty. Next, add a view controller to the scene. \n\n\n\u003e **TIP:** You can use the **command + shift + L** shortcut to bring the objects library.\n\nWith the view controller selected, click on **Editor \u003e Embed In \u003e Navigation Controller**. This will embed the current view controller in a navigation controller. Next, with the navigation view controller selected, open the attributes inspector and select the **Is Initial View Controller** option to set the navigation view controller as the entry point for the storyboard.\n\n![swift-presence-nav-controller](//images.ctfassets.net/1es3ne0caaid/2icSp2cXUky8wyqGKGaGQI/b81ac58e733e6c0b1c6e2b2fed333739/swift-presence-nav-controller.png)\n\nNext, design the view controller as seen in the screenshot below. Later on in the article, we will be connecting the text field and button to the code using an `@IBOutlet` and an `@IBAction`.\n\n![swift-presence-start-chatting-button](//images.ctfassets.net/1es3ne0caaid/6dLkdEmXh6cqgy0sSe0kuo/c9310c02fd5451b4ebcd899991db49c6/swift-presence-start-chatting-button.png)\n\nNext, add the tab bar controller and connect it to the view controller using a manual segue. Since tab bar controllers come with two regular view controllers, delete them and add two table view controllers instead as seen below:\n\n![swift-presence-storyboard-table-view](//images.ctfassets.net/1es3ne0caaid/1C7rwWdvssIA28u66oCk4y/eb31cc12822c9c2246f2c69e18cb801c/swift-presence-storyboard-table-view.png)\n\nWhen you are done creating the scenes, let’s start adding the necessary code. \n\n### Adding code to the created scenes\n\nCreate a new controller class called `LoginViewController` and set it as the custom class for the first view controller attached to the navigation controller. Paste the following code into the file:\n\n``` swift\n    // File: ./presensesample/LoginViewController.swift\n    import UIKit\n    import Alamofire\n    import PusherSwift\n    import NotificationBannerSwift\n    \n    class LoginViewController: UIViewController {\n        var user: User? = nil\n        var users: [User] = []\n    \n        @IBOutlet weak var nameTextField: UITextField!\n        \n        override func viewWillAppear(_ animated: Bool) {\n            super.viewWillAppear(animated)\n            \n            user = nil\n            users = []\n            \n            navigationController?.isNavigationBarHidden = true\n        }\n        \n        @IBAction func startChattingButtonPressed(_ sender: Any) {\n            if nameTextField.text?.isEmpty == false, let name = nameTextField.text {\n                registerUser([\"name\": name.lowercased()]) { successful in\n                    guard successful else {\n                        return StatusBarNotificationBanner(title: \"Failed to login.\", style: .danger).show()\n                    }\n    \n                    self.performSegue(withIdentifier: \"showmain\", sender: self)\n                }\n            }\n        }\n        \n        func registerUser(_ params: [String : String], handler: @escaping(Bool) -\u003e Void) {\n            let url = \"http://127.0.0.1:5000/users\"\n            \n            Alamofire.request(url, method: .post, parameters: params)\n                .validate()\n                .responseJSON { resp in\n                    if resp.result.isSuccess,\n                        let data = resp.result.value as? [String: Any],\n                        let user = data[\"currentUser\"] as? [String: String],\n                        let users = data[\"users\"] as? [String: [String: String]],\n                        let id = user[\"id\"], let name = user[\"name\"]\n                    {\n                        for (uid, user) in users {\n                            if let name = user[\"name\"], id != uid {\n                                self.users.append(User(id: uid, name: name))\n                            }\n                        }\n                        \n                        self.user = User(id: id, name: name)\n                        self.nameTextField.text = nil\n                        \n                        return handler(true)\n                    }\n                    \n                    handler(false)\n            }\n        }\n    \n        override func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n            if let vc = segue.destination as? MainViewController {\n                vc.viewControllers?.forEach {\n                    if let onlineVc = $0 as? OnlineTableViewController {\n                        onlineVc.users = self.users\n                        onlineVc.user = self.user\n                    }\n                }\n            }\n        }\n    }\n```\n\nIn the controller above, we have defined the `users` and `user` properties which will hold the available users and the current user when the user is logged in. We also have the `nameTextField` which is an `@IBOutlet` to the text field in the storyboard view controller, so make sure you connect the outlet if you hadn’t previously done so.\n\nIn the same controller, we have the `startChattingButtonPressed` method which is an `@IBAction` so make sure you connect it to the submit button in the storyboard view controller if you have not already done so. In this method, we call the `registerUser` method to register the user using the API. If the registration is successful, we direct the user to the `showmain` segue.\n\n\u003e The segue between the login view controller and the tab bar controller should be set with an identifier of `showmain`. \n\nIn the `registerUser` method, we send the name to the API and receive a JSON response. We parse it to see if the registration was successful or not.\n\nThe final method in the class is the `prepare` method. This method is automatically called by iOS when a new segue is being loaded. We use this to preset some data to the view controller we are about to load.\n\nNext, create a new file called `MainViewController` and set this as the custom class for the tab bar view controller. In the file, paste the following code:\n\n``` swift\n    // File: ./presensesample/MainViewController.swift\n    import UIKit\n    \n    class MainViewController: UITabBarController {\n    \n        override func viewDidLoad() {\n            super.viewDidLoad()\n            \n            navigationItem.title = \"Who's Online\"\n            navigationItem.hidesBackButton = true\n            navigationController?.isNavigationBarHidden = false\n            \n            // Logout button\n            navigationItem.rightBarButtonItem = UIBarButtonItem(\n                title: \"Logout\",\n                style: .plain,\n                target: self,\n                action: #selector(logoutButtonPressed)\n            )\n        }\n        \n        override func tabBar(_ tabBar: UITabBar, didSelect item: UITabBarItem) {\n            navigationItem.title = item.title\n        }\n        \n        @objc fileprivate func logoutButtonPressed() {\n            viewControllers?.forEach {\n                if let vc = $0 as? OnlineTableViewController {\n                    vc.users = []\n                    vc.pusher.disconnect()\n                }\n            }\n            \n            navigationController?.popViewController(animated: true)\n        }\n    }\n```\n\nIn the controller above, we have a few methods defined. The `viewDidLoad` method sets the title of the controller and other navigation controller specific things. We also define a **Logout** button in this method. The button will trigger the `logoutButtonPressed`  method.\n\nIn the `logoutButtonPressed` method, we try to log the user out by resetting the `users` property in the view controller and also we disconnect the user from the Pusher connection.\n\nNext, create a new controller class named `ChatTableViewController`. Set this class as the custom class for one of the tab bar controllers child controllers. Paste the following code into the file:\n\n``` swift\n    // File: ./presensesample/ChatTableViewController.swift\n    import UIKit\n    \n    class ChatTableViewController: UITableViewController {\n        override func viewDidLoad() {\n            super.viewDidLoad()\n        }\n    \n        override func numberOfSections(in tableView: UITableView) -\u003e Int {\n            return 0\n        }\n    \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return 0\n        }\n    }\n```\n\nThe controller above is just a base controller and we do not intend to add any chat logic to this controller.\n\nCreate a new controller class called `OnlineTableViewController`. Set this controller as the custom class for the second tab bar controller child controller. Paste the following code to the controller class:\n\n``` swift\n    // File: ./presensesample/OnlineTableViewController.swift\n    import UIKit\n    import PusherSwift\n    \n    struct User {\n        let id: String\n        var name: String\n        var online: Bool = false\n        \n        init(id: String, name: String, online: Bool? = false) {\n            self.id = id\n            self.name = name\n            self.online = online!\n        }\n    }\n    \n    class OnlineTableViewController: UITableViewController {\n    \n        var pusher: Pusher!\n        var user: User? = nil\n        var users: [User] = []\n    \n        override func numberOfSections(in tableView: UITableView) -\u003e Int {\n            return 1\n        }\n    \n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -\u003e Int {\n            return users.count\n        }\n    \n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n            let cell = tableView.dequeueReusableCell(withIdentifier: \"onlineuser\", for: indexPath)\n            let user = users[indexPath.row]\n    \n            cell.textLabel?.text = \"\\(user.name) \\(user.online ? \"[Online]\" : \"\")\"\n    \n            return cell\n        }\n    }\n```\n\nIn the code above, we first defined a `User` struct. We will use this to represent the user resource. We have already referenced this struct in previous controllers we created earlier.\n\nNext, we defined the `OnlineTableViewController` class which is extends the `UITableViewController` class. In this class, we override the usual table view controller methods to provide the table with data. \n\n\u003e You have to set the cell reuse identifier of this table to `onlineuser` in the storyboard. \n\nAbove we also defined some properties:\n\n- `pusher` - this will hold the Pusher SDK instance that we will use to subscribe to Pusher Channels.\n- `users` - this will hold an array of `User` structs.\n- `user` - this is the user struct of the current user.\n\nNext, in the same class, add the following method:\n\n``` swift\n    // File: ./presensesample/OnlineTableViewController.swift\n    \n    // [...]\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        tableView.allowsSelection = false\n        \n        // Create the Pusher instance...\n        pusher = Pusher(\n            key: \"PUSHER_APP_KEY\",\n            options: PusherClientOptions(\n                authMethod: .endpoint(authEndpoint: \"http://127.0.0.1:5000/pusher/auth/presence\"),\n                host: .cluster(\"PUSHER_APP_CLUSTER\")\n            )\n        )\n        \n        // Subscribe to a presence channel...\n        let channel = pusher.subscribeToPresenceChannel(\n            channelName: \"presence-chat\",\n            onMemberAdded: { member in\n                if let info = member.userInfo as? [String: String], let name = info[\"name\"] {\n                    if let index = self.users.firstIndex(where: { $0.id == member.userId }) {\n                        let userModel = self.users[index]\n                        self.users[index] = User(id: userModel.id, name: userModel.name, online: true)\n                    } else {\n                        self.users.append(User(id: member.userId, name: name, online: true))\n                    }\n                    \n                    self.tableView.reloadData()\n                }\n            },\n            onMemberRemoved: { member in\n                if let index = self.users.firstIndex(where: { $0.id == member.userId }) {\n                    let userModel = self.users[index]\n                    self.users[index] = User(id: userModel.id, name: userModel.name, online: false)\n                    self.tableView.reloadData()\n                }\n            }\n        )\n        \n        // Bind to the subscription succeeded event...\n        channel.bind(eventName: \"pusher:subscription_succeeded\") { data in\n            guard let deets = data as? [String: AnyObject],\n                let presence = deets[\"presence\"] as? [String: AnyObject],\n                let ids = presence[\"ids\"] as? NSArray else { return }\n            \n            for userid in ids {\n                guard let uid = userid as? String else { return }\n                \n                if let index = self.users.firstIndex(where: { $0.id == uid }) {\n                    let userModel = self.users[index]\n                    self.users[index] = User(id: uid, name: userModel.name, online: true)\n                }\n            }\n            \n            self.tableView.reloadData()\n        }\n        \n        // Connect to Pusher\n        pusher.connect()\n    }\n    \n    // [...]\n```\n\nIn the `viewDidLoad` method above, we are doing several things. First, we instantiate the Pusher instance. In the options, we specify the authorize endpoint. We use the same URL as the backend we created earlier.\n\nThe next thing we do is subscribe to a presence channel called `presence-chat`. When working with presence channels, the channel name must be prefixed with `presence-`. The `subscribeToPresenceChannel` method has two callbacks that we can add logic to:\n\n- `onMemberAdded` - this [event](https://pusher.com/docs/client_api_guide/client_presence_channels#pusher-member-added) is called when a new user joins the `presence-chat` channel. In this callback, we check for the user that was added and mark them as online in the `users` array.\n- `onMemberRemoved` - this [event](https://pusher.com/docs/client_api_guide/client_presence_channels#pusher-member-removed) is called when a user leaves the `presence-chat` channel. In this callback, we check for the user that left the channel and mark them as offline.\n\nNext, we bind to the `pusher:subscription_succeeded` [event](https://pusher.com/docs/client_api_guide/client_presence_channels#pusher-subscription-succeeded). This event is called when a user successfully subscribes to updates on a channel. The callback on this event returns all the currently subscribed users. In the callback, we use this list of subscribed users to mark them online in the application.\n\nFinally, we use the `connect` method on the `pusher` instance to connect to Pusher. \n\n### Allowing local connections on the iOS app\n\nOne last thing we need to do before we are done with the iOS application is allowing the application load data from arbitrary URLs. By default, iOS does not allow this, and it should not. However, since we are going to be testing locally, we need this turned on temporarily. Open the `info.plist` file and update it as seen below:\n\n![swift-presence-allow-local](//images.ctfassets.net/1es3ne0caaid/383KxDAOo0cyucauWI8osQ/854e200980ad355df6948115bcdf6893/swift-presence-allow-local.png)\n\nNow, our app is ready. You can run the application and you should see the online presence status of other users when they log in.\n\n## Conclusion\n\nIn this tutorial, we learned how to use presence channels in your iOS application using Pusher Channels. \n\nThe source code for the application created in this tutorial is available on [GitHub](https://github.com/neoighodaro/ios-presence-channel-pusher). ","metaTitle":"Creating an iOS app with user presence","metaDescription":"This tutorial demonstrates how to add an online presence feature to an iOS app. You will use Node for the backend, and build a basic example app using Swift."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"Yl4xroGZkAMWEOMOe6CI2","type":"Entry","createdAt":"2018-10-09T20:43:19.141Z","updatedAt":"2020-06-19T12:52:41.321Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Implement online presence in a Laravel application","url":"presence-channels-laravel","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/laravel-pusher-presence","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}}],"reviewDate":"2018-10-09","description":"This tutorial shows how to implement online presence and realtime updates in a Laravel application. You will use Laravel, Vue, and SQLite to build a simple app where users can log in and post statuses. Posts will appear in realtime, and users' online presence will be reported.","prerequisite":"You will need the Laravel CLI installed on your machine. This tutorial uses Laravel 5.7. You will also need SQLite, and a basic knowledge of Laravel and PHP.","content":"When using certain applications, it is usually expected that the current user is able to see all other users currently using the service alongside them. For instance, [Dropbox Paper](/) shows all the users that are currently viewing a document. This is very useful and it helps stop users feeling like they are alone on your application.\n\nIn this tutorial, we are going to see how you can add online presence reporting to a Laravel application. To showcase this, we will be building an application where users can log in and leave quick updates on anything they want. Each online user will be able to see the list of logged in users.\n\nHere is the finished application in action:\n\n![laravel-presence-demo](//images.ctfassets.net/1es3ne0caaid/4YFICDIELmeYmuY066gQa6/6d5b3c2a5d73fc0fae587573c0ada351/laravel-presence-demo.gif)\n\n## Prerequisites\n\nBefore we get started, you need to have the following prerequisites:\n\n\n- Laravel CLI installed on your machine. [Installation guide](https://laravel.com/docs/5.7/installation#installation).\n- Node.js installed on your machine. Download the latest stable version [here](https://nodejs.org/en/download/).\n- SQLite (v3.x or later) installed on your machine. \n- A Pusher account. [Create one here](https://pusher.com).\n- Basic PHP/Laravel knowledge.\n- Basic CLI knowledge.\n\nIf you have the listed requirements, we can continue.\n\n\n## Setting up your Laravel project\n\nThe first thing we want to do is create a new Laravel project. To create a new Laravel project, run the following command in your terminal:\n\n```\n    $ laravel new updaytes # where \"updaytes\" is the name of the project\n```\n\nThis will create a new Laravel project that we can start working with. When the installation is complete, we will start installing the JavaScript dependencies using NPM.\n\n### Installing JavaScript dependencies\n\nOpen the `package.json` file that comes with your Laravel installation and replace the contents with the following code:\n\n``` json\n    {\n        \"private\": true,\n        \"scripts\": {\n            \"dev\": \"npm run development\",\n            \"development\": \"cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\",\n            \"watch\": \"npm run development -- --watch\",\n            \"watch-poll\": \"npm run watch -- --watch-poll\",\n            \"hot\": \"cross-env NODE_ENV=development node_modules/webpack-dev-server/bin/webpack-dev-server.js --inline --hot --config=node_modules/laravel-mix/setup/webpack.config.js\",\n            \"prod\": \"npm run production\",\n            \"production\": \"cross-env NODE_ENV=production node_modules/webpack/bin/webpack.js --no-progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\"\n        },\n        \"devDependencies\": {\n            \"axios\": \"^0.18.0\",\n            \"bootstrap\": \"^4.0.0\",\n            \"cross-env\": \"^5.1\",\n            \"jquery\": \"^3.2\",\n            \"laravel-mix\": \"^2.0\",\n            \"lodash\": \"^4.17.5\",\n            \"popper.js\": \"^1.12\",\n            \"vue\": \"^2.5.7\"\n        },\n        \"dependencies\": {\n            \"laravel-echo\": \"^1.4.0\",\n            \"pusher-js\": \"^4.3.1\"\n        }\n    }\n```\n\nIn your terminal, `cd`  to the root of your project and run the following command to install the JavaScript dependencies:\n\n```\n    $ npm install\n```\n\nAfter installation is complete, open the `webpack.mix.js` file and replace the contents with the following:\n\n``` javascript\n    const mix = require('laravel-mix');\n    \n    mix.js('resources/js/app.js', 'public/js')\n        .sass('resources/sass/signin.scss', 'public/css')\n        .sass('resources/sass/app.scss', 'public/css')\n        .sass('resources/sass/updates.scss', 'public/css');\n```\n\nAbove, we have added two new Sass files, `signin.scss` and `updates.scss`. In these files, we will be adding specific CSS for the sign in page and the updates page. Create these files in the `resources/sass` directory and leave them empty.\n\nNext, run the command below to build the assets:\n\n```\n    $ npm run watch\n```\n\n\u003e The `watch` script keeps the command line occupied. It automatically watches for changes to your assets and builds automatically when it detects changes. This is better than running the `build` script every time you make changes.\n\n### Setting up the database\n\nFor this tutorial, we will be using an SQLite database. It is easy to set up and is a good database engine for small projects. If you are building bigger projects though, you should use MySQL.\n\nCreate a new file named `database.sqlite` in the `database` directory and leave it empty. Next,  open the `.env` file in the root of your project and replace the following keys:\n\n```\n    DB_CONNECTION=mysql\n    DB_HOST=127.0.0.1\n    DB_PORT=3306\n    DB_DATABASE=homestead\n    DB_USERNAME=homestead\n    DB_PASSWORD=secret\n```\n\nWith\n\n```\n    DB_CONNECTION=sqlite\n    DB_DATABASE=/full/path/to/database.sqlite\n```\n\nNext, let’s add some classes that will help us manage our database and also seed the table with sample data. In your terminal, run the following command:\n\n```\n    $ php artisan make:model Update -mc\n```\n\n![laravel-presence-create-controller](//images.ctfassets.net/1es3ne0caaid/1gTQxCymwCqk6ao2AQy2Ss/b3c60de92fb159ede0ecdceba42ff754/laravel-presence-create-controller.png)\n\nAs seen from the screenshot, this command generates a model, migration, and a controller. Before we start updating any of those, let’s also generate a [model factory](https://laravel.com/docs/5.7/seeding#using-model-factories). Run the command below to generate a model factory:\n\n```\n    $ php artisan make:factory UpdateFactory\n```\n\nFinally, let’s generate a database seeder. Seeders are used to add dummy data to the database and should not be used in production. Run the command below to generate a database seeder:\n\n```\n    $ php artisan make:seed UsersTableSeeder\n```\n\nNow, let’s start updating the classes generated by the commands above. First, we will start with the migrations. Open the `*_create_users_table.php` migration in the `database/migrations` directory and replace the `up` method with the following:\n\n``` php\n    // File: database/migrations/*_create_users_table.php\n    // [...]\n    \n    public function up()\n    {\n        Schema::create('users', function (Blueprint $table) {\n            $table-\u003eincrements('id');\n            $table-\u003estring('name');\n            $table-\u003estring('email')-\u003eunique();\n            $table-\u003etimestamp('email_verified_at')-\u003enullable();\n            $table-\u003estring('password');\n            $table-\u003estring('avatar')-\u003enullable();\n            $table-\u003erememberToken();\n            $table-\u003etimestamps();\n        });\n    }\n    \n    // [...]\n```\n\nThe actual change we have from the previous code is the introduction of the `avatar` field. We will use this field to store URL to the avatar of the user.\n\nNext, open the `*_create_updates_table.php` file in the `database/migrations` directory and replace the `up` method with the following:\n\n``` php\n    // File: database/migrations/*_create_updates_table.php\n    // [...]\n    \n    public function up()\n    {\n        Schema::create('updates', function (Blueprint $table) {\n            $table-\u003eincrements('id');\n            $table-\u003eunsignedInteger('user_id');\n            $table-\u003estring('text', 280);\n            $table-\u003etimestamps();\n        });\n    }\n    \n    // [...]\n```\n\nAbove, we have the migration for the `updates` table. It has the `user_id` field which it’ll store the user ID of the user that made the update, and the `text` field that stores the update made.\n\nNow that we have defined the table structure using our migration files, let’s update the model for our tables.\n\nOpen the `User.php` file in the `app` directory and replace the class definition with the following code:\n\n``` php\n    // File: ./app/User.php\n    // [...]\n    \n    class User extends Authenticatable\n    {\n        use Notifiable;\n    \n        /**\n         * The attributes that are mass assignable.\n         *\n         * @var array\n         */\n        protected $fillable = [\n            'name', 'email', 'password', 'avatar',\n        ];\n    \n        /**\n         * The attributes that should be hidden for arrays.\n         *\n         * @var array\n         */\n        protected $hidden = [\n            'password', 'remember_token',\n        ];\n        \n        /**\n         * Update model relationship\n         *\n         * @return \\Illuminate\\Database\\Eloquent\\Relations\\HasMany\n         */\n        public function updates()\n        {\n            return $this-\u003ehasMany(Update::class);\n        }\n    }\n```\n\nThe changes above are:\n\n\n- We added the `avatar` field to the `fillable` array.\n- We added the `updates` method, which is for the relationship between the `User` and the `Update`. In this case, a user can have many updates, but an update can only belong to a user.\n\nNext, open the `Update.php` file in the `app` directory and replace the class definition with the following:\n\n``` php\n    // File: ./app/Update.php\n    // [...]\n    \n    class Update extends Model\n    {\n        /**\n         * The attributes that are mass assignable.\n         *\n         * @var array\n         */\n        protected $fillable = [\n            'user_id', 'text'\n        ];\n        \n        /**\n         * User model relationship\n         *\n         * @return \\Illuminate\\Database\\Eloquent\\Relations\\BelongsTo\n         */\n        public function user()\n        {\n            return $this-\u003ebelongsTo(User::class);\n        }\n    }\n```\n\nAbove, we have a typical Laravel model. The `user` method is the relationship link from the `Update` model to the `User` model.\n\nNow that we have the models, let’s update the model factories. Open the `UserFactory.php` file in the `database/factories` directory and replace it with the following code:\n\n``` php\n    // File: ./database/factories/UserFactory.php\n    \u003c?php\n    \n    use Faker\\Generator as Faker;\n    \n    $factory-\u003edefine(App\\User::class, function (Faker $faker) {\n        $number = rand(10, 46);\n        $gender = rand(0, 1) ? 'men' : 'women';\n    \n        return [\n            'name' =\u003e $faker-\u003ename,\n            'email' =\u003e $faker-\u003eunique()-\u003esafeEmail,\n            'password' =\u003e '$2y$10$TKh8H1.PfQx37YgCzwiKb.KjNyWgaHb9cbcoQgdIVFlYg7B77UdFm', // secret\n            'avatar' =\u003e \"https://randomuser.me/api/portraits/${gender}/{$number}.jpg\",\n            'remember_token' =\u003e str_random(10),\n        ];\n    });\n```\n\nAbove, we have a model factory. When the factory is called to generate a user, the callback above is called and it returns a unique array of fields to be used when creating the sample user. The factory uses the [Faker library](https://github.com/fzaninotto/Faker) for this. For the avatar, we are using a photo from the [randomuser.me](https://randomuser.me) website.\n\nNext, open the `UpdateFactory.php` file in the `database/factories` directory and replace the contents with the following code:\n\n``` php\n    // File: ./database/factories/UpdateFactory.php\n    \u003c?php\n    \n    use Faker\\Generator as Faker;\n    \n    $factory-\u003edefine(App\\Update::class, function (Faker $faker) {\n        return [\n            'text' =\u003e $faker-\u003esentence()\n        ];\n    });\n```\n\nThe factory essentially does the same as the previous factory, only for the `Update` model.\n\nNext, open the `UsersTableSeeder.php` file in the `database/seeds` directory and replace the `run` method with the following:\n\n``` php\n    // File: ./database/seeds/UsersTableSeeder.php\n    // [...]\n    \n    public function run()\n    {\n        factory(App\\User::class, 10)-\u003ecreate()-\u003eeach(function ($user) {\n            $user-\u003eupdates()-\u003esave(factory(App\\Update::class)-\u003emake());\n        });\n    }\n    \n    // [...]\n```\n\nAbove, we have added the logic for the seeder. It will generate ten users using the `UserFactory`, and for each of the users, it will generate an update using the `UpdateFactory`. So basically, when the seeder is run, we will have ten dummy users with ten dummy posts.\n\nOpen the `DatabaseSeeder.php` file in the `database/seeds` directory and uncomment the line below:\n\n``` php\n    $this-\u003ecall(UsersTableSeeder::class);\n```\n\nWith this, we are ready to run our migration and seed the database with sample data. Run the command below to do this:\n\n```\n    $ php artisan migrate:fresh --seed\n```\n\n\u003e You can always run the command above to clear changes to the database. It will delete all the tables and run the migration and seed command from scratch.\n\n![laravel-presence-database-seeding](//images.ctfassets.net/1es3ne0caaid/oSz4wTtPOgeimuAAoSmWU/55ad04f6ee815657c89ea794aeba7653/laravel-presence-database-seeding.png)\n\n\n## Building our application\n\nNow we are done with the database set up. Let’s start building the application.\n\n### Creating the login page\n\nFirst, let’s add a login page. We will be using the `/` route as the login page and we will not need the `artisan make:auth` command that comes default with Laravel.\n\nFirst, open the `web.php` file in the `routes` directory and replace the contents with the following code:\n\n``` php\n    // File: ./routes/web.php\n    \u003c?php\n    \n    Route::post('logout', 'Auth\\LoginController@logout')-\u003ename('logout');\n    Route::post('/', 'Auth\\LoginController@login');\n    Route::view('/', 'signin')-\u003emiddleware('guest')-\u003ename('login');\n```\n\nAbove, we have defined three routes:\n\n\n1. `GET /logout` - this will log a user out of the application. It uses the `LoginController` that comes default with Laravel. We don’t need to do anything more.\n2. `POST /` - this will handle logging in. It also uses the `LoginController` and we do not need to do anything but send a `POST` request to it with the `email` and `password` field.\n3. `GET /` - this will display the login page. It uses a `guest` middleware that comes with Laravel by default. This will redirect all logged in users away from the page to the dashboard.\n\nNext, let’s create the signin page. In the `resources/views` directory, create a new file named `signin.blade.php` and paste the following code:\n\n``` php\n    \u003c!-- File: ./resources/views/signin.blade.php --\u003e\n    \u003c!doctype html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \n    \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003ctitle\u003eUpdaytes | Sign in\u003c/title\u003e\n        \u003cmeta content=\"{{ csrf_token() }}\" name=\"csrf-token\"\u003e\n        \u003clink href=\"{{ asset('css/app.css') }}\" rel=\"stylesheet\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"{{ asset('css/signin.css') }}\"\u003e\n    \u003c/head\u003e\n    \n    \u003cbody class=\"text-center\"\u003e\n        \u003cform class=\"form-signin\" method=\"POST\" action=\"{{ route('login') }}\"\u003e\n            @csrf\n            \u003ch3 class=\"h3 mb-3 font-weight-normal\"\u003ePlease sign in\u003c/h3\u003e\n            \u003clabel for=\"inputEmail\" class=\"sr-only\"\u003eEmail address\u003c/label\u003e\n            \u003cinput type=\"email\" name=\"email\" class=\"form-control\" placeholder=\"Email address\" value=\"{{ old('email') }}\" required\u003e\n            \u003clabel for=\"inputPassword\" class=\"sr-only\"\u003ePassword\u003c/label\u003e\n            \u003cinput type=\"password\" name=\"password\" id=\"inputPassword\" class=\"form-control\" placeholder=\"Password\" required\u003e\n            \u003cbutton class=\"btn btn-lg btn-primary btn-block signin-btn\" type=\"submit\"\u003e\n                Sign in\n            \u003c/button\u003e\n        \u003c/form\u003e\n    \u003c/body\u003e\n    \n    \u003c/html\u003e\n```\n\nAbove, we have the HTML for the sign in page. In the `head` it is referencing the `signin.css` file, which at this point is empty. So let’s add the style for this page.\n\nOpen the `resources/sass/signin.scss` file and paste the following code:\n\n``` css\n    // File: ./resources/sass/signin.scss\n    html, body {\n        height: 100%;\n    }\n    body {\n        display: -ms-flexbox;\n        display: flex;\n        -ms-flex-align: center;\n        align-items: center;\n        padding-top: 40px;\n        padding-bottom: 40px;\n        background-color: #f5f5f5;\n    }\n    .form-signin {\n        width: 100%;\n        max-width: 330px;\n        padding: 15px;\n        margin: auto;\n    }\n    .form-signin .checkbox {\n        font-weight: 400;\n    }\n    .form-signin .form-control {\n        position: relative;\n        box-sizing: border-box;\n        height: auto;\n        padding: 10px;\n        font-size: 16px;\n    }\n    .form-signin .form-control:focus {\n        z-index: 2;\n    }\n    .form-signin input[type='email'] {\n        margin-bottom: -1px;\n        border-bottom-right-radius: 0;\n        border-bottom-left-radius: 0;\n    }\n    .form-signin input[type='password'] {\n        border-radius: 0;\n    }\n    .form-signin .signin-btn {\n        font-weight: bold;\n        font-size: 15px;\n        border-top-left-radius: 0;\n        border-top-right-radius: 0;\n    }\n```\n\nAbove, we have the style for the sign in page. Because we have the `npm run watch` command still running, the Sass file will be automatically compiled.\n\nRun the command below in a terminal window to start the Artisan server:\n\n```\n    $ php artisan serve\n```\n\nIn your browser, visit the URL http://localhost:8000/ and you should see the login screen. Great.\n\n![laravel-presence-login](//images.ctfassets.net/1es3ne0caaid/58JCDnTvuwGEIaGuSkGSm4/1eb433ab8dd4d057214be7c3f4078c47/laravel-presence-login.png)\n\nNow quit the serve command by pressing **ctrl + c** on your keyboard. Let’s create the updates page.\n\n### Creating the updates page\n\nBefore we start creating the pages for the updates view, let’s add some routes. Open the `web.php` file in the `routes` directory and add the following code:\n\n``` php\n    // [...]\n    \n    Route::get('home', 'UpdateController@index')-\u003ename('home');\n    Route::get('/updates', 'UpdateController@list');\n    Route::post('/updates', 'UpdateController@create');\n    Route::get('/updates/suggestions', 'UpdateController@userSuggestions');\n    \n    // [...]\n```\n\nAbove, we have four routes:\n\n\n1. `GET /home` - this will be the page where all the updates will be displayed.\n2. `GET /updates` - this will be an API endpoint that we will load from the `/home` route. It will return a JSON response of all the updates.\n3. `POST /updates` - this will be an API endpoint that we will use to add new updates. It will return a JSON response of the new update.\n4. `GET /updates/suggestions` - this will be an API endpoint that will return a JSON response of random users. Not really important, it’s just for aesthetics.\n\nNow that we have the routes, let’s update the `UpdateController`. Open the `UpdateController.php` file in the `app/Http/Controllers` directory and replace the contents with the following:\n\n``` php\n    \u003c?php\n    namespace App\\Http\\Controllers;\n    \n    use App\\User;\n    use App\\Update;\n    use Illuminate\\Http\\Request;\n    use App\\Events\\UpdateCreated;\n    \n    class UpdateController extends Controller\n    {\n        public function __construct()\n        {\n            $this-\u003emiddleware('auth');\n        }\n        \n        public function index()\n        {\n            return view('updates');\n        }\n        \n        public function create(Request $request)\n        {\n            $data = $request-\u003evalidate(['text' =\u003e 'required|min:1|max:280|string']);\n            \n            $update = auth()-\u003euser()-\u003eupdates()-\u003esave(new Update($data))-\u003eload('user');\n            \n            broadcast(new UpdateCreated($update))-\u003etoOthers();\n            \n            return response()-\u003ejson($update);\n        }\n        \n        public function list()\n        {\n            return response()-\u003ejson(Update::latest()-\u003ewith('user')-\u003elimit(15)-\u003eget());\n        }\n        \n        public function userSuggestions()\n        {\n            $user = auth()-\u003euser();\n            \n            return response()-\u003ejson(\n                User::where('id', '!=', $user-\u003eid)-\u003einRandomOrder()-\u003elimit(5)-\u003eget()\n            );\n        }\n    }\n```\n\nAbove, we have a few methods defined:\n\n\n- `__construct` - in here we add the `auth` middleware so that only authenticated users can visit any of the pages in this controller.\n- `index` - the updates page.\n- `create` - creates a new update, sends a broadcast to Pusher, and returns a JSON response.\n- `list` - returns a JSON response with the latest updates.\n- `userSuggestions` - returns a JSON response with random users.\n\nTo create the event we are broadcasting in the `create` method, run the following command below:\n\n```\n    $ php artisan make:event UpdateCreated\n```\n\nFor now, we will leave the generated class and move on.\n\nLet’s add the HTML and style for the updates page. Create a new `updates.blade.php` file in the `resources/views` directory and paste the following:\n\n``` php\n    \u003c!-- File: ./resources/views/updates.blade.php --\u003e\n    \u003c!doctype html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \n    \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003ctitle\u003eUpdytes | Home\u003c/title\u003e\n        \u003cmeta content=\"{{ csrf_token() }}\" name=\"csrf-token\"\u003e\n        \u003clink href=\"{{ asset('css/app.css') }}\" rel=\"stylesheet\"\u003e\n        \u003clink href=\"{{ asset('css/updates.css') }}\" rel=\"stylesheet\"\u003e\n    \u003c/head\u003e\n    \n    \u003cbody class=\"bg-light updates\"\u003e\n        \u003cnav class=\"navbar navbar-expand-lg navbar-dark bg-dark\"\u003e\n            \u003ca class=\"navbar-brand mr-auto mr-lg-0\" href=\"#\"\u003eUPDAYTES\u003c/a\u003e\n            \u003cdiv class=\"navbar-collapse offcanvas-collapse\" id=\"navbarsExampleDefault\"\u003e\n                \u003cul class=\"navbar-nav mr-auto\"\u003e\n                    \u003cli class=\"nav-item\"\u003e\n                        \u003ca class=\"nav-link\" href=\"{{ route('logout') }}\" onclick=\"event.preventDefault();\n                                            document.getElementById('logout-form').submit();\"\u003e\n                            {{ __('Logout') }}\n                        \u003c/a\u003e\n                        \u003cform id=\"logout-form\" action=\"{{ route('logout') }}\" method=\"POST\" style=\"display: none;\"\u003e\n                            @csrf\n                        \u003c/form\u003e\n                    \u003c/li\u003e\n                \u003c/ul\u003e\n                \u003cform class=\"form-inline my-2 my-lg-0\"\u003e\n                    \u003cinput class=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\"\u003e\n                    \u003cbutton class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\"\u003eSearch\u003c/button\u003e\n                \u003c/form\u003e\n            \u003c/div\u003e\n        \u003c/nav\u003e\n        \n        \u003cdiv id=\"app\"\u003e\n            \u003cdiv class=\"nav-scroller bg-white shadow-sm clearfix\"\u003e\n                \u003cOnlineList :me='@json(auth()-\u003euser()-\u003etoArray())'\u003e\u003c/OnlineList\u003e\n            \u003c/div\u003e\n            \n            \u003cmain role=\"main\" class=\"container\"\u003e\n                \u003cdiv class=\"d-flex align-items-center p-3 my-3 text-white-50 bg-purple rounded shadow-sm\"\u003e\n                    \u003cdiv class=\"lh-100\"\u003e\n                        \u003ch6 class=\"mb-0 text-white lh-100\"\u003eBootstrap Forum\u003c/h6\u003e\n                        \u003csmall\u003eUpdates on the development of the community\u003c/small\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cUpdates\u003e\u003c/Updates\u003e\n                \u003cSuggestions\u003e\u003c/Suggestions\u003e\n            \u003c/main\u003e\n        \u003c/div\u003e\n        \n        \u003cscript src=\"{{ asset('js/app.js') }}\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nAbove, we have the HTML for the updates page. There are a few things to note in the markup above:\n\n\n- It references the `updates.css` style, which we have not yet created.\n- It has three Vue components referenced, `OnlineList`, `Updates`, and `Suggestions`, which we have not created.\n- It includes the `js/app.js` file which will contain our bundled JavaScript.\n\nLet’s add some styling to the page. Open the `updates.scss` file in the `resources/sass` directory and paste the following:\n\n``` css\n    // File: ./resources/sass/updates.scss\n    .updates {\n        .bg-purple {\n            background-color: #6f42c1;\n        }\n        .size-32 {\n            width: 32px;\n            height: 32px;\n        }\n        .nav-scroller .nav-link {\n            line-height: 32px;\n            display: inline-block;\n            margin-right: -9px;\n            float: right;\n        }\n        .squished {\n            padding-left: 0;\n            padding-right: 0;\n            \u0026:first-child,\n            \u0026:last-child {\n                margin-right: 15px;\n            }\n        }\n        .avatar {\n            border-radius: 50%;\n            text-indent: 1000px;\n            border-radius: 50%;\n            height: 34px;\n            line-height: 34px;\n            width: 34px;\n            border: 2px solid #fff;\n        }\n    }\n```\n\nAbove, we have the style for the updates page. Because we have the `npm run watch` command still running, the Sass file will be automatically compiled.\n\nNext, let’s create the Vue components referenced in the updates page. Create the following files in the `resources/js/components` directory:\n\n\n- `Updates.vue`\n- `Suggestions.vue`\n- `OnlineList.vue`\n\nNext, open the `resources/js/app.js` file and replace the contents with the following:\n\n``` javascript\n    require('./bootstrap');\n    require('axios');\n    \n    window.Vue = require('vue');\n    \n    Vue.component('updates', require('./components/Updates.vue'));\n    Vue.component('onlinelist', require('./components/OnlineList.vue'));\n    Vue.component('suggestions', require('./components/Suggestions.vue'));\n    \n    const app = new Vue({\n        el: '#app'\n    });\n```\n\nAbove, we imported [Axios](https://github.com/axios/axios), which we will use for HTTP requests, we also registered the Vue components we created earlier.\n\nLet’s update the contents of the Vue components. Open the `Updates.vue` file and paste the following code into it:\n\n``` html\n    \u003c!-- File: ./resources/js/components/Updates.vue --\u003e\n    \u003ctemplate\u003e\n        \u003cdiv class=\"my-3 p-3 bg-white rounded shadow-sm\"\u003e\n            \u003ch6 class=\"border-bottom border-gray pb-2 mb-0\"\u003eRecent updates\u003c/h6\u003e\n            \u003cdiv class=\"media text-muted pt-3\" v-if=\"updates.length == 0\"\u003e\n                Loading updates...\n            \u003c/div\u003e\n            \u003cdiv class=\"media text-muted pt-3 pb-3 border-bottom border-grey\" v-else\u003e\n                \u003cform class=\"form-inline\" v-on:submit.prevent=\"addUpdate\"\u003e\n                    \u003cdiv class=\"form-group mr-2\"\u003e\n                        \u003cinput type=\"text\" class=\"form-control\" v-model=\"update\" placeholder=\"What's happening?\"\u003e\n                    \u003c/div\u003e\n                    \u003cbutton type=\"submit\" class=\"btn btn-primary\"\u003eUpdate\u003c/button\u003e\n                \u003c/form\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"media text-muted pt-3\" v-for=\"update in updates\" :key=\"update.id\"\u003e\n                \u003cimg :src=\"update.user.avatar\" class=\"size-32 mr-2 rounded\"\u003e\n                \u003cp class=\"media-body pb-3 mb-0 small lh-125 border-bottom border-gray\"\u003e\n                    \u003cstrong class=\"d-block text-gray-dark\"\u003e\n                        {{ update.user.name }}\n                    \u003c/strong\u003e\n                    {{ update.text }}\n                \u003c/p\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    export default {\n        name: 'Updates',\n        data() {\n            return {\n                update: '',\n                updates: [],\n            }\n        },\n        mounted () {\n            axios.get('/updates').then(res =\u003e (this.updates = res.data))\n        },\n        methods: {\n            addUpdate () {\n                if (this.update.trim() !== '') {\n                    axios.post('/updates', {text: this.update}).then(res =\u003e {\n                        this.update = ''\n                        this.updates.unshift(res.data)\n                    })\n                }\n            }\n        }\n    }\n    \u003c/script\u003e\n```\n\nAbove, the component is divided into `template` and `script`. The `template` contains the HTML for the component and the `script` contains the JavaScript.\n\nIn the `script` we load the updates in the `mounted` method. In the `template` we loop through all the `updates` and display each. We also have a form that we can use to post a new update. When submitted, this form calls the `addUpdate` function in the `methods` property.\n\nNext, open the `resources/js/components/Suggestions.vue` and paste the following code:\n\n``` html\n    \u003c!-- File: ./resources/js/components/Suggestions.vue --\u003e\n    \u003ctemplate\u003e\n        \u003cdiv class=\"my-3 p-3 bg-white rounded shadow-sm\"\u003e\n            \u003ch6 class=\"border-bottom border-gray pb-2 mb-0\"\u003eSuggestions\u003c/h6\u003e\n            \u003cdiv class=\"media text-muted pt-3\" v-if=\"users.length == 0\"\u003e\n                Loading users...\n            \u003c/div\u003e\n            \u003cdiv class=\"media text-muted pt-3\" v-for=\"user in users\" :key=\"user.id\"\u003e\n                \u003cimg :src=\"user.avatar\" :alt=\"user.name\" class=\"size-32 mr-2 rounded\"\u003e\n                \u003cdiv class=\"media-body pb-3 mb-0 small lh-125 border-bottom border-gray\"\u003e\n                    \u003cdiv class=\"d-flex justify-content-between align-items-center w-100\"\u003e\n                        \u003cstrong class=\"text-gray-dark\"\u003e{{ user.name }}\u003c/strong\u003e\n                        \u003ca href=\"#\"\u003eFollow\u003c/a\u003e\n                    \u003c/div\u003e\n                    \u003cspan class=\"d-block\"\u003eFollow my updates\u003c/span\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    export default {\n        name: 'Suggestions',\n        data() {\n            return {\n                users: []\n            }\n        },\n        mounted () {\n            axios.get('/updates/suggestions').then(res =\u003e (this.users = res.data))\n        }\n    }\n    \u003c/script\u003e\n```\n\nJust like the `Updates` component, we have the `template` and `script` tag. The `script` loads the suggested users and the `template` loops over the `users` and displays them.\n\nFinally, open the file `resources/js/components/OnlineList.vue` and paste the following code:\n\n``` html\n    \u003c!-- File: ./resources/js/components/OnlineList.vue --\u003e\n    \u003ctemplate\u003e\n        \u003cul class=\"nav float-right\"\u003e\n            \u003cli class=\"nav-link squished\"\u003eOnline Users\u003c/li\u003e\n            \u003cli class=\"nav-link squished\" href=\"#\" v-for=\"user in users\" :key=\"user.id\"\u003e\n                \u003cimg class=\"avatar\" :src=\"user.avatar\" :alt=\"user.name\"\u003e\n            \u003c/li\u003e\n        \u003c/ul\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    export default {\n        name: 'OnlineList',\n        props: ['me'],\n        data () {\n            return {\n                users: []\n            }\n        },\n        mounted () {\n            this.users.push(this.me)\n        }\n    }\n    \u003c/script\u003e\n```\n\nLike the components before it, the `OnlineList` component has the `template` that loops through the data and the `script` that loads the data. \n\nWe have not yet implemented the who’s online feature so, in the `mounted` method, we just add the current user as the only online user. We will add the presence and realtime feature in the next section.\n\n### Adding the realtime and presence feature\n\nLet’s start from the Laravel PHP side. We will first activate the broadcasting feature, then we will update the configuration in our `.env` file, after which we will update the event file we created earlier.\n\nOpen the `config/app.php` file and uncomment the `BroadcastServiceProvider` line:\n\n``` php\n    App\\Providers\\BroadcastServiceProvider::class,\n```\n\nNext, open the `.env` file and change the `BROADCAST_DRIVER` from `log` to `pusher`. Finally, in the same file, update the keys below with the keys from your Pusher dashboard.\n\n```\n    PUSHER_APP_ID=\n    PUSHER_APP_KEY=\n    PUSHER_APP_SECRET=\n    PUSHER_APP_CLUSTER=\n```\n\nNext, open the `app/Events/UpdateCreated.php` file and replace the contents with the following:\n\n``` php\n    // File: app/Events/UpdateCreated.php\n    \u003c?php\n    namespace App\\Events;\n    \n    use App\\Update;\n    use Illuminate\\Queue\\SerializesModels;\n    use Illuminate\\Broadcasting\\PrivateChannel;\n    use Illuminate\\Foundation\\Events\\Dispatchable;\n    use Illuminate\\Broadcasting\\InteractsWithSockets;\n    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n    \n    class UpdateCreated implements ShouldBroadcast\n    {\n        use Dispatchable, InteractsWithSockets, SerializesModels;\n        \n        public $update;\n        \n        /**\n         * Create a new event instance.\n         *\n         * @return void\n         */\n        public function __construct(Update $update)\n        {\n            $this-\u003eupdate = $update;\n        }\n        \n        /**\n         * Get the channels the event should broadcast on.\n         *\n         * @return \\Illuminate\\Broadcasting\\Channel|array\n         */\n        public function broadcastOn()\n        {\n            return new PrivateChannel('updates');\n        }\n    }\n```\n\nAbove, we have a [Laravel event](https://laravel.com/docs/5.7/events) class. Notably, we have the `broadcastsOn`  method which defines the channel we want to broadcast this event on. In this case, we are using a private channel called `updates`.\n\n\n\u003e Note that we are implementing the `ShouldBroadcast` interface. If we don’t, the event will not be broadcasted to our Pusher instance.\n\nNext, open the `routes/channels.php` file and replace the contents with the following code:\n\n``` php\n    // File: ./routes/channel.php\n    \u003c?php\n    \n    Broadcast::channel('updates', function ($user) {\n        return auth()-\u003echeck();\n    });\n    \n    Broadcast::channel('online', function ($user) {\n        if (auth()-\u003echeck()) {\n            return $user-\u003etoArray();\n        }\n    });\n```\n\nBecause our channels are private, presence is private by default, we have to define the authentication logic. The first one checks if the current user is logged in. Only logged in users can listen in on the `updates` channel. \n\nThe second checks to see if the user can listen on the `online` presence channel. Unlike the first, the presence channel does not return a boolean. It returns details of the user if the user is authorized.\n\nOne last thing we need to do is pull in the Pusher PHP SDK. Run the following command in your terminal to do this:\n\n```\n    $ composer require pusher/pusher-php-server\n```\n\nNow, let’s go over to the JavaScript side. Open the `resources/js/bootstrap.js` file and uncomment the following lines at the bottom of the file:\n\n``` javascript\n    import Echo from 'laravel-echo'\n    \n    window.Pusher = require('pusher-js');\n    \n    window.Echo = new Echo({\n        broadcaster: 'pusher',\n        key: process.env.MIX_PUSHER_APP_KEY,\n        cluster: process.env.MIX_PUSHER_APP_CLUSTER,\n        encrypted: true\n    });\n```\n\nThis will make [Laravel Echo](https://laravel.com/docs/5.7/broadcasting#installing-laravel-echo) available to us. We will use this library to interact with Pusher. \n\nNext, open the `Updates.vue` file and update the `mounted` method as seen below:\n\n``` javascript\n    // [...]\n    \n    mounted () {\n        axios.get('/updates').then(res =\u003e (this.updates = res.data)) \n        Echo.private('updates')\n            .listen('UpdateCreated', data =\u003e this.updates.unshift(data.update))\n    }\n    \n    // [...]\n```\n\nAbove, we are using Laravel Echo to listen for the `UpdateCreated` event on the `updates` channel. Every time a new update is added, the event above will be triggered and the callback inside the `listen` method will be invoked.\n\nIn the callback, we add the `update` to the top of the `updates` array. Because Vue is reactive, the data will be updated instantly on the UI.\n\nNext, open the `OnlineList.vue` file and update the `mounted` method as seen below:\n\n``` javascript\n    // [...]\n    \n    mounted () {\n        // [...]\n        \n        Echo.join('online')\n            .here(users =\u003e (this.users = users))\n            .joining(user =\u003e this.users.push(user))\n            .leaving(user =\u003e (this.users = this.users.filter(u =\u003e (u.id !== user.id))))\n    }\n    \n    // [...]\n```\n\nAbove we have the magic that handles online presence. We use Echo to `join` the `online` presence channel. Then the methods chained are:\n\n\n- `here` - this returns all the users currently in this presence channel. In the callback, we set the `users` array to the response.\n- `joining` - this is called when a new user comes online. In the callback, we simply `push` the new user to the `users` array.\n- `leaving` - this is called when a user disconnects or goes offline. In the callback, we filter out the user that disconnected from the `users` array.\n\nThat’s all. Now let’s test our application to see it in action.\n\n\n## Testing the application\n\nTo test the application, we need two accounts that we can log into. You can check the `users` table in the SQLite database but there is an easier way to get the users.\n\nIn your terminal, run the command below:\n\n```\n    $ php artisan tinker\n```\n\n\u003e Laravel Artisan's tinker is a [repl (read-eval-print loop)](https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop). A repl translates to `read-eval-print-loop`, and it is an interactive language shell. It takes in a single user input, evaluates it, and returns the result to the user. - [Scotch.io](https://scotch.io/tutorials/tinker-with-the-data-in-your-laravel-apps-with-php-artisan-tinker)\n\nIn the interactive shell, run the following command:\n\n```\n    \u003e\u003e\u003e App\\User::inRandomOrder()-\u003elimit(2)-\u003eget()-\u003eimplode('email', \"  \")\n```\n\nThis will give us the emails of two random users.\n\n![laravel-presence-tinker](//images.ctfassets.net/1es3ne0caaid/7zEgaNBxSwQqYiAMMawKq0/84e7316b309e25e13e09f6b08a80be64/laravel-presence-tinker.png)\n\nWe can use these email addresses to log in as the demo users. The password is **secret** for all the demo users.\n\nRun the command below to exit `tinker` (you can also press **ctrl + c** on your keyboard):\n\n```\n    \u003e\u003e\u003e exit\n```\n\nNow run the command below to start your PHP server:\n\n```\n    $ php artisan serve\n```\n\nNow, open two different browsers. In both, visit the URL http://localhost:8000 and log in as both users on the different browsers. You should see the application in action like this:\n\n![laravel-presence-demo](//images.ctfassets.net/1es3ne0caaid/4YFICDIELmeYmuY066gQa6/6d5b3c2a5d73fc0fae587573c0ada351/laravel-presence-demo.gif)\n\n## Conclusion\n\nIn this tutorial, we have seen how easy it is to work with presence channels on a Laravel application. \n\nThe source code is available on [GitHub](https://github.com/neoighodaro/laravel-pusher-presence).","metaTitle":"Working with presence channels in a Laravel application","metaDescription":"Use Laravel, Vue and SQLite to create a simple app that reports online presence and shows status updates in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"485KPCyGx2EeGMGayS4GyK","type":"Entry","createdAt":"2018-09-13T19:05:30.730Z","updatedAt":"2018-09-13T19:05:30.730Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Building an online presence counter with Symfony","url":"online-presence-counter-symfony","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3j821hA7aMgOiUEaO4Q8y6","type":"Entry","createdAt":"2018-02-26T19:00:03.819Z","updatedAt":"2018-03-20T12:22:11.602Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Shalvah Adebayo","url":"shalvah-adebayo","email":"shalvah.adebayo@gmail.com","twitter":"https://twitter.com/theshalvah","github":"https://shalvah.me/","guestWriter":true}}],"projectRepo":"https://github.com/shalvah/countess","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}}],"reviewDate":"2018-09-12","description":"This tutorial shows how to build a simple online presence counter using Symfony. You will create a basic web page with a counter that updates in realtime as users navigate to and from the page.","prerequisite":"You will need PHP 7.1 and Composer installed on your machine.","content":"[Symfony](http://symfony.com) is a popular PHP framework. It’s built in a component form that allows users to pick and choose the components they need. In this article, we’ll build a Symfony app that uses Pusher Channels to display the current number of visitors to a particular page in realtime. Here’s a preview of our app in action:\n\n![symfony-online-presence-demo](//images.ctfassets.net/1es3ne0caaid/UuWR46les8qiigsCOIUom/b74ae87010fc81de43b44cd19ca66eaa/symfony-online-presence-demo.gif)\n\n## Prerequisites\n1. PHP 7.1 or newer.\n2. [Composer](http://getcompocer.org).\n3. A Pusher account. Create one [here](https://pusher.com/signup).\n\n\n## Setting up\n\nCreate a new Symfony project called “countess” by running the following command:\n\n```\n    composer create-project symfony/website-skeleton countess\n```\n\nWe’re ready to start building. Let’s create the route for the lone page in our app. Open up the file `config/routes.yaml` and replace its contents with the following:\n\n``` yaml\n    # config/routes.yaml\n    \n    index:\n        path: /home\n        controller: App\\Controller\\HomeController::index\n```\n\n\n\u003e **Note:** We’re going to be working with YAML files quite a bit in this article. In YAML, indentation matters, so be careful to stick to what is shown!\n\nNext, we’ll create the controller. Create the file `src/Controller/HomeController.php` with the following contents:\n\n``` php\n    // src/Controller/HomeController.php\n    \n    \u003c?php\n    \n    namespace App\\Controller;\n    \n    use Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\n    \n    class HomeController extends AbstractController\n    {\n        public function index()\n        {\n            $visitorCount = $this-\u003egetVisitorCount();\n            return $this-\u003erender('index.html.twig', [\n                'visitorCount' =\u003e $visitorCount,\n            ]);\n        }\n    }\n```\n\nYou’ll notice we’re calling the non-existent method `getVisitorCount()` to get the current visitor count before rendering the page. We’ll come back to that in a bit.\n\nLet’s create the view that shows the visitor count. Create the file `templates/index.html.twig` with the following content:\n\n``` twig\n    {# templates/index.html.twig #}\n    \n    {% extends 'base.html.twig' %}\n    \n    {% block body %}\n    \u003cstyle\u003e\n        body {\n            font-family: \"Lucida Console\", monospace, sans-serif;\n            padding: 30px;\n        }\n    \u003c/style\u003e\n        \u003ch2 align=\"center\" id=\"visitorCount\"\u003e{{ visitorCount }}\u003c/h2\u003e\n        \u003cp align=\"center\"\u003eperson(s) currently viewing this page\u003c/p\u003e\n    {% endblock %}\n```\n\nNow let’s make the visitor count live. We have two tasks to achieve here:\n\n- Retrieve the number of people viewing the page\n- Update this number when someone loads the page or leaves it\n\nHere’s how we’ll do this:\n\n1. Whenever the page is rendered on a browser, it subscribes to two public Pusher channels:\n  1. An existing channel (let’s call this `visitor-updates`). This is the channel where it will receive updates on the number of visitors.\n  2. A new channel with a randomly generated name.  The purpose of this channel is to trigger a Pusher event called `channel_occupied`, which will be sent via a webhook to our backend. Also, when the user leaves the page, the Pusher connection will be terminated, resulting in a `channel_vacated` notification.\n2. When the backend receives the `channel_occupied` or `channel_vacated` notifications, it re-calculates the visitor count and does two things:\n  1. It broadcasts the new value on the `visitor-updates` channel. Pages subscribed to this channel can then update their UI to reflect the new value.\n  2. It records this new value in a cache so that when rendering a new page, it can retrieve the number from the cache (in the `getVisitorCount` method).\n\nOkay, let’s do this!\n\nFirst, we’ll write the frontend code that implements item (2). Add the following to the bottom of your view:\n\n``` twig\n    {# templates/index.html.twig #}\n    \n    {% block javascripts %}\n        \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003cscript\u003e\n    \n        let pusher = new Pusher(\"{{ pusherKey }}\", {\n            cluster: \"{{ pusherCluster }}\",\n        });\n        let channelName = Date.now() + Math.random().toString(36).replace(/\\W+/g, '');\n        pusher.subscribe(channelName);\n        pusher.subscribe(\"visitor-updates\")\n            .bind('update', function (data) {\n                console.log(data)\n                let newCount = data.newCount;\n                document.getElementById('visitorCount').textContent = newCount;\n            });\n        \u003c/script\u003e\n    {% endblock %}\n```\n\nWe’re referencing a few variables here in the view (`pusherKey`, `pusherCluster`) which we haven’t defined in the controller. We’ll get to that in a moment. First, let’s configure Pusher on our backend. \n\n\n## Configuring Pusher\n\nRun the following command to install the Pusher bundle for Symfony:\n\n```\n    composer require laupifrpar/pusher-bundle\n```\n\n\u003e **Note**: When installing this, Symfony Flex will ask you if you want to execute the recipe. Choose ‘yes’. You can read more about Symfony Flex [here](https://symfony.com/doc/current/setup/flex.html).\n\nYou’ll notice some new lines have been added to your `.env` file:\n\n\n```\n    ###\u003e pusher/pusher-php-server ###\n    PUSHER_APP_ID=\n    PUSHER_KEY=\n    PUSHER_SECRET=\n    ###\u003c pusher/pusher-php-server ###\n```\n\nAdd an extra line to these:\n\n```\n    PUSHER_CLUSTER=\n```\n\nThen provide all the `PUSHER_*` variables with your credentials from your Pusher app dashboard:\n\n```\n    ###\u003e pusher/pusher-php-server ###\n    PUSHER_APP_ID=your-app-id\n    PUSHER_KEY=your-app-key\n    PUSHER_SECRET=your-app-secret\n    PUSHER_CLUSTER=your-app-cluster\n    ###\u003c pusher/pusher-php-server ###\n```\n\nAfter installing the Pusher bundle, you should have a file called `pusher_php_server.yaml` in the `config/packages` directory. Replace its contents with the following:\n\n``` yaml\n    # config/packages/pusher_php_server.yaml\n    \n    services:\n        Pusher\\Pusher:\n            public: true\n            arguments:\n                - '%env(PUSHER_KEY)%'\n                - '%env(PUSHER_SECRET)%'\n                - '%env(PUSHER_APP_ID)%'\n                - { cluster: '%env(PUSHER_CLUSTER)%' }\n                \n    lopi_pusher:\n        key: '%env(PUSHER_KEY)%'\n        secret: '%env(PUSHER_SECRET)%'\n        app_id: '%env(PUSHER_APP_ID)%'\n        cluster: '%env(PUSHER_CLUSTER)%'\n```\n\nNow, let’s add the Pusher credentials for our frontend. Open up the file `config/services.yaml` and replace the `parameters` section near the top with this:\n\n``` yaml\n    $ config/services.yaml\n    \n    parameters:\n        locale: 'en'\n        pusherKey: '%env(PUSHER_KEY)%'\n        pusherCluster: '%env(PUSHER_CLUSTER)%'\n```\n\nHere, we’re using [parameters](https://symfony.com/doc/current/service_container/parameters.html) in our service container to reference the needed credentials, so we can easily access them from anywhere in our app. Now update the `HomeController` ‘s `index` method so it looks like this:\n\n``` php\n    // src/Controller/HomeController.php\n    \n        public function index()\n        {\n            $visitorCount = $this-\u003egetVisitorCount();\n            return $this-\u003erender('index.html.twig', [\n                'pusherKey' =\u003e $this-\u003egetParameter('pusherKey'),\n                'pusherCluster' =\u003e $this-\u003egetParameter('pusherCluster'),\n                'visitorCount' =\u003e $visitorCount,\n            ]);\n        }\n```\n\n\n## Broadcasting changes\n\nWe’ll create a new route to handle webhook calls from Pusher. Add a new entry to your `config/routes.yaml`):\n\n``` yaml\n    # config/routes.yaml\n    \n    webhook:\n        path: /webhook\n        methods:\n        - post\n        controller: App\\Controller\\HomeController::webhook\n```\n\nThen create the corresponding method in your controller:\n\n``` php\n    // src/Controller/HomeController.php\n     \n    public function webhook(Request $request, Pusher $pusher)\n    {\n        $events = json_decode($request-\u003egetContent(), true)['events'];\n        $visitorCount = $this-\u003egetVisitorCount();\n        foreach ($events as $event) {\n            // ignore any events from our public channel--it's only for broadcasting\n            if ($event['channel'] === 'visitor-updates') {\n                continue;\n            }\n            $visitorCount += ($event['name'] === 'channel_occupied') ? 1 : -1;\n        }\n            // save new figure and notify all clients\n            $this-\u003esaveVisitorCount($visitorCount);\n            $pusher-\u003etrigger('visitor-updates', 'update', [\n                'newCount' =\u003e $visitorCount,\n            ]);\n        return new Response();\n    }\n```\n\nThe `saveVisitorCount` method is where we store the new visitor count in the cache. We’ll implement that now.\n\n\n## Using a cache\n\nWe’re using a cache to store the current visitor count so we can track it across sessions. To keep this demo simple, we’ll use a file on our machine as our cache. Let’s do this.\n\nFortunately, since we’re using the Symfony framework bundle, the filesystem cache is already set up for us. We only need to add it in as a parameter to our controller’s constructor. Let’s update our controller and add the `getVisitorCount` and `updateVisitorCount` methods to make use of the cache:\n\n``` php\n    // src/Controller/HomeController.php\n    \n    \u003c?php\n    \n    namespace App\\Controller;\n    \n    use Psr\\SimpleCache\\CacheInterface;\n    use Pusher\\Pusher;\n    use Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\n    use Symfony\\Component\\HttpFoundation\\Request;\n    use Symfony\\Component\\HttpFoundation\\Response;\n    \n    class HomeController extends AbstractController\n    {\n        public function __construct(CacheInterface $cache)\n        {\n            $this-\u003ecache = $cache;\n        }\n    \n        public function index()\n        {\n            $visitorCount = $this-\u003egetVisitorCount();\n            return $this-\u003erender('index.html.twig', [\n                'pusherKey' =\u003e $this-\u003egetParameter('pusherKey'),\n                'pusherCluster' =\u003e $this-\u003egetParameter('pusherCluster'),\n                'visitorCount' =\u003e $visitorCount,\n            ]);\n        }\n    \n        public function webhook(Request $request, Pusher $pusher)\n        {\n            $events = json_decode($request-\u003egetContent(), true)['events'];\n            $visitorCount = $this-\u003egetVisitorCount();\n            foreach ($events as $event) {\n                // ignore any events from our public channel--it's only for broadcasting\n                if ($event['channel'] === 'visitor-updates') {\n                    continue;\n                }\n                $visitorCount += ($event['name'] === 'channel_occupied') ? 1 : -1;\n            }\n                // save new figure and notify all clients\n                $this-\u003esaveVisitorCount($visitorCount);\n                $pusher-\u003etrigger('visitor-updates', 'update', [\n                    'newCount' =\u003e $visitorCount,\n                ]);\n            return new Response();\n        }\n    \n        private function getVisitorCount()\n        {\n            return $this-\u003ecache-\u003eget('visitorCount') ?: 0;\n        }\n    \n        private function saveVisitorCount($visitorCount)\n        {\n            $this-\u003ecache-\u003eset('visitorCount', $visitorCount);\n        }\n    \n    }\n```    \n\n\n## Publishing the webhook\n\nWe need to do a few things before our webhook is ready for use. \n\nSince the application currently lives on our local machine, we need a way of exposing it via a public URL. [Ngrok](http://ngrok.com) is an easy-to-use tool that helps with this. If you don’t already have it installed, sign up on http://ngrok.com and follow the instructions to install ngrok. Then expose http://localhost:8000 on your machine by running:\n\n```\n    ./ngrok http 8000\n```\n\nYou should see output like this:\n\n![symfony-online-presence-ngrok](//images.ctfassets.net/1es3ne0caaid/3VJ5EMzDf2ec4qaQ6G8Cw8/074fe2af9704e087bc658d937ce1e9a9/symfony-online-presence-ngrok.png)\n\nCopy the second **Forwarding** URL (the one using HTTPS). Your webhook URL will then be `\u003cyour-ngrok-url\u003e/webhook` (for instance, for the screenshot above, my webhook URL is `https://fa74c4e1.ngrok.io/webhook`).\n\nNext, you’ll need to enable channel existence webhooks for our Pusher app. On your Pusher app dashboard, click on the **Webhooks** tab and select the **Channel existence** radio button. In the text box, paste the URL of the webhook you obtained above, and click **Add**. Good to go!\n\nStart the app by running:\n\n```\n    php bin/console server:run\n```\n\nNow visit http://localhost:8000/home in a browser. Open it in multiple tabs and you should see the number of visitors go up or down as you open and close tabs.\n\n\n\u003e **Tip:** If you made a mistake earlier in this tutorial, you might find that the page updates in a weird manner. This is because the cache is in an inconsistent state. To fix this, you’ll need to clear the cache. An easy way to fix this is by opening up the `config/packages/framework.yaml` file and changing the value of `prefix_seed` (under the `cache` key) to some random value:\n    \n```    cache:\n        prefix_seed: hahalol\n```\n\u003e \n\u003e This has the same effect as telling the app to use a new cache folder.\n\n## Conclusion\n\nIn this article, we’ve built a simple demo showing how we can add realtime capabilities to a Symfony app. We could go on to display the number of actual users by filtering by factors such as their IP address. If our app involved signing in, we could even use [presence channels](https://pusher.com/docs/client_api_guide/client_presence_channels) to know **who** exactly was viewing the page. I hope you enjoyed this tutorial. You can check out the source code of the completed application [on GitHub.](https://github.com/shalvah/countess)","metaTitle":"Building an online presence counter with Symfony","metaDescription":"Use Symfony to create a realtime online presence counter, tracking users as they navigate to and from the page."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"yJv9gYc9dmUAeyIMAQEw2","type":"Entry","createdAt":"2018-08-16T22:01:51.811Z","updatedAt":"2018-08-16T22:01:51.811Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a two-player game with Python and Vue","url":"game-python-vue","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/python-pusher-multiplayer-game","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6nDfV1cd5C6464wgCoOQii","type":"Entry","createdAt":"2018-02-12T15:08:13.901Z","updatedAt":"2018-02-26T12:31:12.764Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Gaming","url":"gaming","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4IiTE4WzzyQkoeAoaOqgcu","type":"Entry","createdAt":"2018-02-12T15:10:28.101Z","updatedAt":"2018-02-26T12:31:12.455Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Multiplayer Game","url":"multiplayer-game","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-08-13","description":"Build a simple two-player game featuring online presence and realtime interactions. Use Python for the backend, and Vue for the frontend. Users will be able to see when another player logs on, challenge them to a game, and interact instantly.","prerequisite":"You will need Python 3+, virtualenv and Flask installed on your machine.","content":"The advent of the PC and the internet has redefined the term “entertainment” and the means by which it can be obtained. While a console or some special hardware would have been required to play games in the past, games are only a click away in today's world of technology.\n\nIn this tutorial, we will create a realtime tic-tac-toe game using Python and Pusher channels. Here’s a demo of how the game will look and behave upon creation:\n\n![python-vue-game-demo](//images.ctfassets.net/1es3ne0caaid/1RGRfjXfgQgYWYy2kqImOs/0c1db39f9371dbb773638ffe57bfd385/python-vue-game-demo.gif)\n\nThis multiplayer game will allow a player to connect using their preferred username (or generate a random username where a player doesn’t connect with a username) and choose to play with another player from a list of other online players.\n\nThe game itself follows the conventional principles of the popular [tic-tac-toe](https://en.wikipedia.org/wiki/Tic-tac-toe) game. The “online player(s)” feature is powered by [Pusher presence channels](https://pusher.com/docs/client_api_guide/client_presence_channels) and the realtime updates of a player’s move across multiple windows is powered by [Pusher private channels.](https://pusher.com/docs/client_api_guide/client_private_channels) The source code for this tutorial is available here [GitHub](https://github.com/neoighodaro/python-pusher-multiplayer-game). \n\nLet’s get started.\n\n\n## Prerequisites\n\nTo follow along, a basic knowledge of Python, Flask, JavaScript (ES6 syntax) and Vue is required. You will also need the following installed on your machine:\n\n\n1. [Python (v3.x)](https://www.python.org/)\n2. [Virtualenv](https://virtualenv.pypa.io/en/stable/)\n3. [Flask](http://flask.pocoo.org/)\n\nVirtualenv is great for creating isolated Python environments, so we can install dependencies in an isolated environment without polluting our global packages directory.\n\n\n## Setting up the app environment\n\nWe will create the project folder and activate a virtual environment within it:\n\n```\n    $ mkdir python-pusher-mutiplayer-game\n    $ cd python-pusher-mutiplayer-game\n    $ virtualenv .venv\n    $ source .venv/bin/activate # Linux based systems\n    $ \\path\\to\\env\\Scripts\\activate # Windows users\n```\n\nWe will install [Flask](http://flask.pocoo.org/) using this command:\n\n```\n    $ pip install flask\n```\n\n## Setting up Pusher\n\nTo integrate Pusher into the multiplayer game, we need to create a Pusher channels application from the Pusher dashboard. If you don’t already have a Pusher account, head over to the [Pusher website](https://pusher.com/) and create one.\n\nAfter creating an account, create a new channels application and enable client events from the application dashboard. To enable client events, click on **App settings** and scroll to the bottom of the page then select the option that says **Enable client events,** and update the **App settings.**\n\n## Building the backend server\n\nBack in the project directory, let’s install the [Python Pusher library](https://github.com/pusher/pusher-http-python) with this command:\n\n```\n    $ pip install pusher\n```\n\nWe will create a new file and call it `app.py`, this is where we will write all the code for the Flask backend server. We will also create a folder and call it `templates`, this folder will hold the markup files for this application.\n\nLet’s write some code to register the endpoints for the game and serve the view, open the `app.py` file and paste the following code:\n\n``` python\n    // File: ./app.py\n    from flask import Flask, render_template, request, jsonify, make_response, json\n    from pusher import pusher\n    \n    app = Flask(__name__)\n    \n    pusher = pusher_client = pusher.Pusher(\n      app_id='PUSHER_APP_ID',\n      key='PUSHER_APP_KEY',\n      secret='PUSHER_APP_SECRET',\n      cluster='PUSHER_APP_CLUSTER',\n      ssl=True\n    )\n    \n    name = ''\n    \n    @app.route('/')\n    def index():\n      return render_template('index.html')\n      \n    @app.route('/play')\n    def play():\n      global name\n      name = request.args.get('username')\n      return render_template('play.html')\n      \n    @app.route(\"/pusher/auth\", methods=['POST'])\n    def pusher_authentication():\n      auth = pusher.authenticate(\n        channel=request.form['channel_name'],\n        socket_id=request.form['socket_id'],\n        custom_data={\n          u'user_id': name,\n          u'user_info': {\n            u'role': u'player'\n          }\n        }\n      )\n      return json.dumps(auth)\n      \n    if __name__ == '__main__':\n        app.run(host='0.0.0.0', port=5000, debug=True)\n    \n    name = ''\n```\n\n\u003e Replace the `PUSHER_APP_*` keys with the values on your Pusher dashboard.\n\nIn the code above, we defined three endpoints, here’s what they do:\n\n\n- `/` - renders the front page that asks a player to connect with a username.\n- `/play` - renders the game view.\n- `/pusher/auth` - authenticates Pusher’s presence and private channels for connected players.\n\n\n## Building the frontend\n\nIn the `templates` folder, we will create two files:\n\n\n1. `index.html`\n2. `play.html`\n\nThe `index.html` file will render the connection page, so open the `templates/index.html` file and paste the following code:\n\n``` html\n    \u003c!-- File: ./templates/index.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n        \u003chead\u003e\n            \u003cmeta charset=\"utf-8\"\u003e\n            \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n            \u003cmeta name=\"description\" content=\"\"\u003e\n            \u003cmeta name=\"author\" content=\"Neo Ighodaro\"\u003e\n            \u003ctitle\u003eTIC-TAC-TOE\u003c/title\u003e\n            \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\"\u003e\n            \u003cstyle\u003e\n                  :root {\n                    --input-padding-x: .75rem;\n                    --input-padding-y: .75rem;\n                  }\n                  html,\n                  body, body \u003e div {\n                    height: 100%;\n                  }\n                  body \u003e div {\n                    display: -ms-flexbox;\n                    display: flex;\n                    -ms-flex-align: center;\n                    align-items: center;\n                    padding-top: 40px;\n                    padding-bottom: 40px;\n                    background-color: #f5f5f5;\n                  }\n                  .form-signin {\n                    width: 100%;\n                    max-width: 420px;\n                    padding: 15px;\n                    margin: auto;\n                  }\n                  .form-label-group {\n                    position: relative;\n                    margin-bottom: 1rem;\n                  }\n                  .form-label-group \u003e input,\n                  .form-label-group \u003e label {\n                    padding: var(--input-padding-y) var(--input-padding-x);\n                  }\n                  .form-label-group \u003e label {\n                    position: absolute;\n                    top: 0;\n                    left: 0;\n                    display: block;\n                    width: 100%;\n                    margin-bottom: 0; /* Override default `\u003clabel\u003e` margin */\n                    line-height: 1.5;\n                    color: #495057;\n                    cursor: text; /* Match the input under the label */\n                    border: 1px solid transparent;\n                    border-radius: .25rem;\n                    transition: all .1s ease-in-out;\n                  }\n                  .form-label-group input::-webkit-input-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input:-ms-input-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input::-ms-input-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input::-moz-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input::placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input:not(:placeholder-shown) {\n                    padding-top: calc(var(--input-padding-y) + var(--input-padding-y) * (2 / 3));\n                    padding-bottom: calc(var(--input-padding-y) / 3);\n                  }\n                  .form-label-group input:not(:placeholder-shown) ~ label {\n                    padding-top: calc(var(--input-padding-y) / 3);\n                    padding-bottom: calc(var(--input-padding-y) / 3);\n                    font-size: 12px;\n                    color: #777;\n                  }\n            \u003c/style\u003e\n          \u003c/head\u003e\n          \u003cbody\u003e\n            \u003cdiv id=\"app\"\u003e\n              \u003cform class=\"form-signin\"\u003e\n                \u003cdiv class=\"text-center mb-4\"\u003e\n                  \u003cimg class=\"mb-4\" src=\"https://thestore.gameops.com/v/vspfiles/photos/Tic-Tac-Go-14.gif\" alt=\"\" width=\"72\" height=\"72\"\u003e\n                  \u003ch1 class=\"h3 mb-3 font-weight-normal\"\u003eTIC-TAC-TOE\u003c/h1\u003e\n                  \u003cp\u003ePUT IN YOUR DETAILS TO PLAY\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"form-label-group\"\u003e\n                    \u003cinput type=\"name\" id=\"inputUsername\" ref=\"username\" class=\"form-control\" placeholder=\"Username\" required=\"\" autofocus=\"\"\u003e\n                      \u003clabel for=\"inputUsername\"\u003eUsername\u003c/label\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"form-label-group\"\u003e\n                  \u003cinput type=\"email\" id=\"inputEmail\" ref=\"email\" class=\"form-control\" placeholder=\"Email address\" autofocus=\"\" required\u003e\n                    \u003clabel for=\"inputEmail\"\u003eEmail address\u003c/label\u003e\n                \u003c/div\u003e\n                \u003cbutton class=\"btn btn-lg btn-primary btn-block\" type=\"submit\" @click.prevent=\"login\"\u003eConnect\u003c/button\u003e\n                \u003cp class=\"mt-5 mb-3 text-muted text-center\"\u003e© 2017-2018\u003c/p\u003e\n              \u003c/form\u003e\n            \u003c/div\u003e\n            \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e\n            \u003cscript\u003e\n            var app = new Vue({\n              el: '#app',\n              methods: {\n                login: function () {\n                  let username = this.$refs.username.value\n                  let email = this.$refs.email.value\n                  window.location.replace(`/play?username=${username}\u0026email=${email}`);\n                }\n              }\n            })\n            \u003c/script\u003e\n        \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nWhen a player visits the connection page and puts in a username and email, the browser window will be redirected to the game view. \n\nLet’s write the markup for the game view. Open the `play.html` file and paste the following code:\n\n``` html\n    \u003c!-- file: ./templates/play.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"utf-8\"\u003e\n      \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n      \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\"\u003e\n      \u003ctitle\u003eTIC-TAC-TOE\u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003cdiv id=\"app\" class=\"container-fluid\"\u003e\n        \u003cdiv class=\"container-fluid clearfix mb-3 shadow\"\u003e\n          \u003cimg class=\"float-left my-3\" src=\"https://thestore.gameops.com/v/vspfiles/photos/Tic-Tac-Go-14.gif\" height=\"62px\" width=\"62px\"\n          /\u003e\n          \u003cdiv class=\"float-right w-25 py-3\"\u003e\n            \u003cimg class=\"my-3 mx-3 rounded-circle border\" src=\"http://dfsanonymous.club/wp-content/uploads/2017/11/DFSAnonymous-NewLogo.png\"\n              height=\"62px\" width=\"62px\" /\u003e\n            \u003cp class=\"d-inline\"\u003e {% raw %} {{ username }} {% endraw %} \u003c/p\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"row mx-5\" style=\"height: 50vh\"\u003e\n          \u003cdiv class=\"col-8 h-50 align-self-center\"\u003e\n            \u003cdiv class=\"row border rounded invisible h-50 w-75 m-auto\" style=\"font-size: 3.6rem\" ref=\"gameboard\" @click=\"playerAction\"\u003e\n              \u003cdiv class=\"h-100 pr-2 col border border-dark\" data-id=\"1\" ref=\"1\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"col pr-2 border border-dark\" data-id=\"2\" ref=\"2\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"col pr-2 border border-dark\" data-id=\"3\" ref=\"3\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"w-100\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"h-100 pr-2 col border border-dark\" data-id=\"4\" ref=\"4\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"col pr-2 border border-dark\" data-id=\"5\" ref=\"5\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"col pr-2 border border-dark\" data-id=\"6\" ref=\"6\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"w-100\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"h-100 pr-2 col border border-dark\" data-id=\"7\" ref=\"7\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"col pr-2 border border-dark\" data-id=\"8\" ref=\"8\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"col pr-2 border border-dark\" data-id=\"9\" ref=\"9\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"col-4 pl-3\"\u003e\n            \u003cdiv class=\"row h-100\"\u003e\n              \u003cdiv class=\"col border h-75 text-center\" style=\"background: rgb(114, 230, 147);\"\u003e\n                \u003cp class=\"my-3\"\u003e {% raw %} {{ players }} {% endraw %} online player(s) \u003c/p\u003e\n                \u003chr/\u003e\n                \u003cli class=\"m-auto py-3 text-dark\" style=\"cursor: pointer;\" v-for=\"member in connectedPlayers\" @click=\"choosePlayer\"\u003e\n                  {% raw %} {{ member }} {% endraw %}\n                \u003c/li\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"w-100\"\u003e\u003c/div\u003e\n              \u003cdiv class=\"col text-center py-3 border h-25\" style=\"background: #b6c0ca; font-size: 1em; font-weight: bold\"\u003e\n                {% raw %} {{ status }} {% endraw %}\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n      \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003cscript\u003e\n      \n      \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThe code above defines the layout of the game view but does not contain any interactivity or realtime features. In the scripts section, before the closing `body` tag, we included the Vue and Pusher libraries because they are required for the game to work. \n\nLet’s include the JavaScript code that will drive the entire game process and define its logic.\n\nIn the same file, add the code below in between the `script` tag that is just before the closing `body` tag:\n\n``` javascript\n    var app = new Vue({\n      el: '#app',\n      \n      data: {\n        username: '',\n        players: 0,\n        connectedPlayers: [],\n        status: '',\n        pusher: new Pusher('PUSHER_APP_KEY', {\n          authEndpoint: '/pusher/auth',\n          cluster: 'PUSHER_APP_CLUSTER',\n          encrypted: true\n        }),\n        otherPlayerName: '',\n        mychannel: {},\n        otherPlayerChannel: {},\n        firstPlayer: 0,\n        turn: 0,\n        boxes: [0, 0, 0, 0, 0, 0, 0, 0, 0]\n      },\n      \n      created () {\n        let url = new URL(window.location.href);\n        let name = url.searchParams.get(\"username\");\n        \n        if (name) {\n          this.username = name\n          this.subscribe();\n          this.listeners();\n        } else {\n          this.username = this.generateRandomName();\n          location.assign(\"/play?username=\" + this.username);\n        }\n      },\n      \n      methods: {\n        // We will add methods here\n      }\n    });\n```\n\n\u003e Replace the `PUSHER_APP_*` keys with the keys on your Pusher dashboard.\n\nAbove, we create a new instance of Vue and we target the `#app` selector. We define all the defaults in the `data` object and then in the `create()` function which is called automatically when the Vue component is created, we check for a user and assign the user to the username if one was supplied.\n\nWe also make calls to the `subscribe` and `listeners` methods. Let’s define those inside the `methods` object. Inside the `methods` object, paste the following functions:\n\n``` javascript\n    // [...]\n    \n    subscribe: function () {\n      let channel = this.pusher.subscribe('presence-channel');\n      this.myChannel = this.pusher.subscribe('private-' + this.username)\n    \n      channel.bind('pusher:subscription_succeeded', (player) =\u003e {\n        this.players = player.count - 1\n        player.each((player) =\u003e {\n          if (player.id != this.username)\n            this.connectedPlayers.push(player.id)\n        });\n      });\n      \n      channel.bind('pusher:member_added', (player) =\u003e {\n        this.players++;\n        this.connectedPlayers.push(player.id)\n      });\n      \n      channel.bind('pusher:member_removed', (player) =\u003e {\n        this.players--;\n        var index = this.connectedPlayers.indexOf(player.id);\n        if (index \u003e -1) {\n          this.connectedPlayers.splice(index, 1)\n        }\n      });\n    },\n    \n    listeners: function () {\n      this.pusher.bind('client-' + this.username, (message) =\u003e {\n        if (confirm('Do you want to start a game of Tic Tac Toe with ' + message)) {\n          this.otherPlayerName = message\n          this.otherPlayerChannel = this.pusher.subscribe('private-' + this.otherPlayerName)\n          this.otherPlayerChannel.bind('pusher:subscription_succeeded', () =\u003e {\n            this.otherPlayerChannel.trigger('client-game-started', this.username)\n          })\n          this.startGame(message)\n        } else {\n          this.otherPlayerChannel = this.pusher.subscribe('private-' + message)\n          this.otherPlayerChannel.bind('pusher:subscription_succeeded', () =\u003e {\n            this.otherPlayerChannel.trigger('client-game-declined', \"\")\n          })\n          this.gameDeclined()\n        }\n      }),\n      \n      this.myChannel.bind('client-game-started', (message) =\u003e {\n        this.status = \"Game started with \" + message\n        this.$refs.gameboard.classList.remove('invisible');\n        this.firstPlayer = 1;\n        this.turn = 1;\n      })\n      \n      this.myChannel.bind('client-game-declined', () =\u003e {\n        this.status = \"Game declined\"\n      })\n      \n      this.myChannel.bind('client-new-move', (position) =\u003e {\n        this.$refs[position].innerText = this.firstPlayer ? 'O' : 'X'\n      })\n    \n      this.myChannel.bind('client-your-turn', () =\u003e {\n        this.turn = 1;\n      })\n    \n      this.myChannel.bind('client-box-update', (update) =\u003e {\n        this.boxes = update;\n      })\n      \n      this.myChannel.bind('client-you-lost', () =\u003e {\n        this.gameLost();\n      })\n    },\n    \n    // [...]\n```\n\nIn the `subscribe` method, we subscribe to our Pusher presence channel, and then subscribe to the private channel for the current user. In the `listeners` method we register the listeners for all the events we are expecting to be triggered on the private channel we subscribed to.\n\nNext, we will add other helper methods to our methods class. Inside the methods class, add the following functions to the bottom after the `listeners` method:\n\n``` javascript\n    // Generates a random string we use as a name for a guest user\n    generateRandomName: function () {\n      let text = '';\n      let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n      for (var i = 0; i \u003c 6; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n      }\n      return text;\n    },\n    \n    // Lets you choose a player to play as.\n    choosePlayer: function (e) {\n      this.otherPlayerName = e.target.innerText\n      this.otherPlayerChannel = this.pusher.subscribe('private-' + this.otherPlayerName)\n      this.otherPlayerChannel.bind('pusher:subscription_succeeded', () =\u003e {\n        this.otherPlayerChannel.trigger('client-' + this.otherPlayerName, this.username)\n      });\n    },\n    \n    // Begins the game\n    startGame: function (name) {\n      this.status = \"Game started with \" + name\n      this.$refs.gameboard.classList.remove('invisible');\n    },\n    \n    // User declined to play\n    gameDeclined: function () {\n      this.status = \"Game declined\"\n    },\n    \n    // Game has ended with current user winning\n    gameWon: function () {\n      this.status = \"You WON!\"\n      this.$refs.gameboard.classList.add('invisible');\n      this.restartGame()\n    },\n    \n    // Game has ended with current user losing\n    gameLost: function () {\n      this.turn = 1;\n      this.boxes = [0, 0, 0, 0, 0, 0, 0, 0, 0]\n      this.status = \"You LOST!\"\n      this.$refs.gameboard.classList.add('invisible');\n      this.restartGame()\n    },\n    \n    // Restarts a game\n    restartGame: function () {\n      for (i = 1; i \u003c 10; i++) {\n        this.$refs[i].innerText = \"\"\n      }\n      this.$refs.gameboard.classList.remove('invisible');\n    },\n    \n    // Checks tiles to see if the tiles passed are a match\n    compare: function () {\n      for (var i = 1; i \u003c arguments.length; i++) {\n        if (arguments[i] === 0 || arguments[i] !== arguments[i - 1]) {\n          return false\n        }\n      }\n    \n      return true;\n    },\n    \n    // Checks the tiles and returns true if theres a winning play\n    theresAMatch: function () {\n      return this.compare(this.boxes[0], this.boxes[1], this.boxes[2]) ||\n        this.compare(this.boxes[3], this.boxes[4], this.boxes[5]) ||\n        this.compare(this.boxes[6], this.boxes[7], this.boxes[8]) ||\n        this.compare(this.boxes[0], this.boxes[3], this.boxes[6]) ||\n        this.compare(this.boxes[1], this.boxes[4], this.boxes[7]) ||\n        this.compare(this.boxes[2], this.boxes[5], this.boxes[8]) ||\n        this.compare(this.boxes[2], this.boxes[4], this.boxes[6]) ||\n        this.compare(this.boxes[0], this.boxes[4], this.boxes[8])\n    },\n    \n    // Checks to see if the play was a winning play\n    playerAction: function (e) {\n      let index = e.target.dataset.id - 1\n      let tile = this.firstPlayer ? 'X' : 'O'\n      \n      if (this.turn \u0026\u0026 this.boxes[index] == 0) {\n        this.turn = 0\n        this.boxes[index] = tile\n        e.target.innerText = tile\n        \n        this.otherPlayerChannel.trigger('client-your-turn', \"\")\n        this.otherPlayerChannel.trigger('client-box-update', this.boxes)\n        this.otherPlayerChannel.trigger('client-new-move', e.target.dataset.id)\n        \n        if (this.theresAMatch()) {\n          this.gameWon()\n          this.boxes = [0, 0, 0, 0, 0, 0, 0, 0, 0]\n          this.otherPlayerChannel.trigger('client-you-lost', '')\n        }\n      }\n    },\n```\n\nAbove, we have added several helper methods that the game needs to function properly and before each method, we have added a comment to show what the method does.\n\nLet’s test the game now.\n\n## Testing the game\n\nWe can test the game by running this command:\n\n```\n    $ flask run\n```\n\nNow if we visit [localhost:5000](http://localhost:5000), we should see the connection page and test the game:\n\n![python-vue-game-demo](//images.ctfassets.net/1es3ne0caaid/1RGRfjXfgQgYWYy2kqImOs/0c1db39f9371dbb773638ffe57bfd385/python-vue-game-demo.gif)\n\n\n## Conclusion\n\nIn this tutorial, we have learned how to leverage the Pusher SDK in creating an online multiplayer game powered by a Python backend server.\n\nThe source code for this tutorial is available on [GitHub](https://github.com/neoighodaro/python-pusher-multiplayer-game)","metaTitle":"Create a two-player game with Python and Vue","metaDescription":"Use Python and Vue to create a realtime two-player game featuring online presence and instant UI updates."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1ixvYc9KQOOcYecWgqi0QU","type":"Entry","createdAt":"2018-08-13T22:46:15.628Z","updatedAt":"2018-08-13T22:46:15.628Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a Go application with online presence","url":"go-vue-online-presence","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/go-pusher-presence-app","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-08-08","description":"In this tutorial you'll build a simple Go application, using Vue.js for the frontend. Users will be able to sign in and view a video, and see who else is watching.","prerequisite":"You will need Go 0.10+ installed on your machine.","content":"When building applications that allow multiple users to interact with one another, it is essential to display their online presence so that each user gets an idea of how many other users are online.\n\nIn this article, we will build a live streaming application that displays the online presence of the users currently streaming a video. We will use [Go](https://golang.org/doc/install), JavaScript (Vue) and [Pusher](http://pusher.com/) for the development.\n \nHere’s a demo of the final application:\n\n![go-online-presence-demo](//images.ctfassets.net/1es3ne0caaid/1ITW3IU0Vm8wkMS2gMqaGe/fdc44d0a06f09561bb282297f721a7e4/go-online-presence-demo.gif)\n\nThe source code for this tutorial is available on [GitHub](https://github.com/neoighodaro/go-pusher-presence-app).\n\n## Prerequisites\n\nTo follow along with this article, you will need the following:\n\n\n- A code editor like Visual Studio Code.\n- Basic knowledge of the Go programming language.\n- Go (version \u003e= 0.10.x) installed on your computer. [Installation guide.](https://golang.org/doc/install)\n- Basic knowledge of JavaScript (Vue).\n- A Pusher application. Create one [here](https://dashboard.pusher.com/).\n\nOnce you have all the above requirements, we can proceed.\n\n## Building the backend server\n\nWe will build the backend server in Go. Create a new project directory in the `src` directory that is located in the `$GOPATH`, let’s call this directory `go-pusher-presence-app`.\n\n```\n    $ cd $GOPATH/src\n    $ mkdir go-pusher-presence-app\n    $ cd go-pusher-presence-app\n```\n\nNext, create a new Go file and call it `presence.go`, this file will be where our entire backend server logic will be. Now, let’s pull in the official Go Pusher package with this command:\n\n```\n    $ go get github.com/pusher/pusher-http-go\n```\n\nOpen the `presence.go` file and paste the following code:\n\n``` go\n    // File: ./presence.go\n    package main\n    \n    import (\n        \"encoding/json\"\n        \"fmt\"\n        \"io/ioutil\"\n        \"log\"\n        \"net/http\"\n        pusher \"github.com/pusher/pusher-http-go\"\n    )\n    \n    var client = pusher.Client{\n        AppId:   \"PUSHER_APP_ID\",\n        Key:     \"PUSHER_APP_KEY\",\n        Secret:  \"PUSHER_APP_SECRET\",\n        Cluster: \"PUSHER_APP_CLUSTER\",\n        Secure:  true,\n    }\n    \n    type user struct {\n        Username  string `json:\"username\" xml:\"username\" form:\"username\" query:\"username\"`\n        Email string `json:\"email\" xml:\"email\" form:\"email\" query:\"email\"`\n    }\n    \n    var loggedInUser user\n    \n    func main() {\n        // Define our routes\n        http.Handle(\"/\", http.FileServer(http.Dir(\"./static\")))\n        http.HandleFunc(\"/isLoggedIn\", isUserLoggedIn)\n        http.HandleFunc(\"/new/user\", NewUser)\n        http.HandleFunc(\"/pusher/auth\", pusherAuth)\n    \n        // Start executing the application on port 8090\n        log.Fatal(http.ListenAndServe(\":8090\", nil))\n    }\n```\n\n\u003e Replace the `PUSHER_APP_*` keys with the keys on your Pusher dashboard.\n\nHere’s a breakdown of what we’ve done in the code above:\n\n\n- We imported all the packages that are required for the application to work, including Pusher.\n- We instantiated the Pusher client that we will use to authenticate users from the client-side.\n- We defined a user struct and gave it two the properties — username and email — so that Go knows how to handle incoming payloads and correctly bind it to a user instance.\n- We created a global instance of the user struct so that we can use it to store a user’s name and email. This instance is going to somewhat serve the purpose of a session on a server, we will check that it is set before allowing a user to access the dashboard of this application.\n\nIn the main function, we registered four endpoints:\n\n\n1. `/` - loads all the static files from the static directory.\n2. `/isLoggedIn` - checks if a user is logged in or not and returns a fitting message.\n3. `/new/user` - allows a new user to connect and initializes the global user instance.\n4. `/pusher/auth` — authorizes users from the client-side.\n\nIn the same file, above the `main` function, add the code for the handler function of the `/isLoggedIn` endpoint:\n\n``` go\n    // File: ./presence.go\n    \n    // [...]\n    \n    func isUserLoggedIn(rw http.ResponseWriter, req *http.Request){\n        if loggedInUser.Username != \"\" \u0026\u0026 loggedInUser.Email != \"\" {\n            json.NewEncoder(rw).Encode(loggedInUser)\n        } else {\n            json.NewEncoder(rw).Encode(\"false\")\n        }\n    }\n    \n    // [...]\n```\n\nAfter the function above, let’s add the handler function for the `/new/user` endpoint:\n\n``` go\n    // File: ./presence.go\n    \n    // [...]\n    \n    func NewUser(rw http.ResponseWriter, req *http.Request) {\n        body, err := ioutil.ReadAll(req.Body)\n        if err != nil {\n            panic(err)\n        }\n        err = json.Unmarshal(body, \u0026loggedInUser)\n        if err != nil {\n            panic(err)\n        }\n        json.NewEncoder(rw).Encode(loggedInUser)\n    }\n    \n    // [...]\n```\n\nAbove, we receive a new user's details in a `POST` request and bind it to an instance of the user struct. We further use this user instance to check if a user is logged in or not\n\nLastly, after the function above, let’s add the code for the `/pusher/auth` endpoint:\n\n``` go\n    // File: ./presence.go\n    \n    // [...]\n    \n    // -------------------------------------------------------\n    // Here, we authorize users so that they can subscribe to \n    // the presence channel\n    // -------------------------------------------------------\n    \n    func pusherAuth(res http.ResponseWriter, req *http.Request) {\n        params, _ := ioutil.ReadAll(req.Body)\n        \n        data := pusher.MemberData{\n            UserId: loggedInUser.Username,\n            UserInfo: map[string]string{\n                \"email\": loggedInUser.Email,\n            },\n        }\n    \n        response, err := client.AuthenticatePresenceChannel(params, data)\n        if err != nil {\n            panic(err)\n        }\n    \n        fmt.Fprintf(res, string(response))\n    }\n    \n    // [...]\n```\n\nTo ensure that every connected user has a unique presence, we used the properties of the global `loggedInUser` variable in setting the `pusher.MemberData` instance.\n \n The syntax for authenticating a Pusher presence channel is:\n \n```\n    client.AuthenticatePresenceChannel(params, presenceData)\n```\n\n## Building the frontend\n\nNext, in the root of the project, create a `static` folder. Create two files the directory named `index.html` and `dashboard.html`. In the `index.html` file, we will write the HTML code that allows users to connect to the live streaming application using their name and email.\n\n### Setting up the connection page\n\nOpen the `index.html` file and update it with the following code:\n\n``` html\n    \u003c!-- File: ./static/index.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n        \u003chead\u003e\n            \u003cmeta charset=\"utf-8\"\u003e\n            \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n            \u003ctitle\u003eLive streamer\u003c/title\u003e\n            \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\"\u003e\n            \u003cstyle\u003e\n                  :root {\n                    --input-padding-x: .75rem;\n                    --input-padding-y: .75rem;\n                  }\n                  html,\n                  body, body \u003e div {\n                    height: 100%;\n                  }\n                  body \u003e div {\n                    display: -ms-flexbox;\n                    display: flex;\n                    -ms-flex-align: center;\n                    align-items: center;\n                    padding-top: 40px;\n                    padding-bottom: 40px;\n                    background-color: #f5f5f5;\n                  }\n                  .form-signin {\n                    width: 100%;\n                    max-width: 420px;\n                    padding: 15px;\n                    margin: auto;\n                  }\n                  .form-label-group {\n                    position: relative;\n                    margin-bottom: 1rem;\n                  }\n                  .form-label-group \u003e input,\n                  .form-label-group \u003e label {\n                    padding: var(--input-padding-y) var(--input-padding-x);\n                  }\n                  .form-label-group \u003e label {\n                    position: absolute;\n                    top: 0;\n                    left: 0;\n                    display: block;\n                    width: 100%;\n                    margin-bottom: 0; /* Override default `\u003clabel\u003e` margin */\n                    line-height: 1.5;\n                    color: #495057;\n                    cursor: text; /* Match the input under the label */\n                    border: 1px solid transparent;\n                    border-radius: .25rem;\n                    transition: all .1s ease-in-out;\n                  }\n                  .form-label-group input::-webkit-input-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input:-ms-input-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input::-ms-input-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input::-moz-placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input::placeholder {\n                    color: transparent;\n                  }\n                  .form-label-group input:not(:placeholder-shown) {\n                    padding-top: calc(var(--input-padding-y) + var(--input-padding-y) * (2 / 3));\n                    padding-bottom: calc(var(--input-padding-y) / 3);\n                  }\n                  .form-label-group input:not(:placeholder-shown) ~ label {\n                    padding-top: calc(var(--input-padding-y) / 3);\n                    padding-bottom: calc(var(--input-padding-y) / 3);\n                    font-size: 12px;\n                    color: #777;\n                  }\n            \u003c/style\u003e\n          \u003c/head\u003e\n    \n          \u003cbody\u003e\n            \u003cdiv id=\"app\"\u003e\n              \u003cform class=\"form-signin\"\u003e\n                \u003cdiv class=\"text-center mb-4\"\u003e\n                  \u003cimg class=\"mb-4\" src=\"https://www.onlinelogomaker.com/blog/wp-content/uploads/2017/07/Fotolia_117855281_Subscription_Monthly_M.jpg\" alt=\"\" width=\"72\" height=\"72\"\u003e\n                  \u003ch1 class=\"h3 mb-3 font-weight-normal\"\u003eLive streamer\u003c/h1\u003e\n                  \u003cp\u003eSTREAM YOUR FAVOURITE VIDEOS FOR FREE\u003c/p\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"form-label-group\"\u003e\n                    \u003cinput type=\"name\" id=\"inputUsername\" ref=\"username\" class=\"form-control\" placeholder=\"Username\" required=\"\" autofocus=\"\"\u003e\n                      \u003clabel for=\"inputUsername\"\u003eUsername\u003c/label\u003e\n                  \u003c/div\u003e\n    \n                \u003cdiv class=\"form-label-group\"\u003e\n                  \u003cinput type=\"email\" id=\"inputEmail\" ref=\"email\" class=\"form-control\" placeholder=\"Email address\" autofocus=\"\" required\u003e\n                    \u003clabel for=\"inputEmail\"\u003eEmail address\u003c/label\u003e\n                \u003c/div\u003e\n    \n                \u003cbutton class=\"btn btn-lg btn-primary btn-block\" type=\"submit\" @click.prevent=\"login\"\u003eConnect\u003c/button\u003e\n                \u003cp class=\"mt-5 mb-3 text-muted text-center\"\u003e© 2017-2018\u003c/p\u003e\n              \u003c/form\u003e\n              \u003c/div\u003e\n    \n              \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e\n        \u003c/body\u003e\n    \u003c/html\u003e\n```\nOn line 106, we added Vue using a CDN. Let’s add the Vue script for the page.\n\nBefore the closing `body` tag add the following code:\n\n``` javascript\n    \u003cscript\u003e\n      var app = new Vue({\n        el: '#app',\n        methods: {\n          login: function () {\n            let username = this.$refs.username.value\n            let email = this.$refs.email.value\n    \n            fetch('new/user', {\n              method: 'POST',\n              headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({username, email})\n            })\n            .then(res =\u003e res.json())\n            .then(data =\u003e window.location.replace('/dashboard.html'))\n          }\n        }\n      })\n    \u003c/script\u003e\n```\n\nThis script above submits user data to the backend Go server and navigates the browser’s location to the dashboard’s URL. \n\nNext, let’s build the dashboard.\n\n### Setting up the dashboard\n\nOpen the `dashboard.html` file and update it with the following code:\n\n``` html\n    \u003c!-- File: ./static/dashboard.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\"\u003e\n        \u003ctitle\u003eLive streamer | Dashboard\u003c/title\u003e\n      \u003c/head\u003e\n      \u003cbody\u003e\n        \u003cdiv id=\"app\"\u003e\n          \u003cdiv class=\"container-fluid row shadow p-1 mb-3\"\u003e\n            \u003cdiv class=\"col-3\"\u003e\n              \u003cimg class=\"ml-3\" src=\"https://www.onlinelogomaker.com/blog/wp-content/uploads/2017/07/Fotolia_117855281_Subscription_Monthly_M.jpg\" height=\"72px\" width=\"72px\"/\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-6 ml-auto mt-3\"\u003e\n              \u003cdiv class=\"input-group\"\u003e\n                \u003cinput type=\"text\" class=\"form-control\" aria-label=\"Text input with dropdown button\"\u003e\n                \u003cdiv class=\"input-group-append\"\u003e\n                  \u003cbutton class=\"btn btn-outline-secondary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"\u003eSearch\u003c/button\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"col-3 float-right\"\u003e\n              \u003cimg src=\"https://www.seoclerk.com/pics/319222-1IvI0s1421931178.png\"  height=\"72px\" width=\"72px\" class=\"rounded-circle border\"/\u003e\n              \u003cp class=\"mr-auto mt-3 d-inline\"\u003e {{ username }} \u003c/p\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"container-fluid\"\u003e\n            \u003cdiv class=\"row\"\u003e\n              \u003cdiv class=\"col-8\"\u003e\n                \u003cdiv class=\"embed-responsive embed-responsive-16by9\"\u003e\n                  \u003ciframe width=\"854\" height=\"480\" class=\"embed-responsive-item\" src=\"https://www.youtube.com/embed/VYOjWnS4cMY\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen\u003e\u003c/iframe\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"text-center mt-3 p-3 text-muted font-weight-bold border\"\u003e\n                  {{ member }} person(s) is/are currently viewing this video \n                  \u003chr\u003e\n                  \u003cli class=\"m-auto text-success\" v-for=\"member in connectedMembers\"\u003e\n                    {{ member }}\n                  \u003c/li\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"col-4 border text-justify\" style=\"background: #e0e0e0; height: 30em; overflow-y: scroll; position: relative;\"\u003e\n                \u003cdiv class=\"border invisible h-50 w-75 text-center\" ref=\"added\" style=\"font-size: 2rem; position: absolute; right: 0; background: #48cbe0\"\u003e{{ addedMember }} just started watching.\u003c/div\u003e\n                \u003cdiv class=\"border invisible h-50 w-75 text-center\" ref=\"removed\" style=\"font-size: 2rem; position: absolute; right: 0; background: #ff8325\"\u003e{{ removedMember }} just stopped watching.\u003c/div\u003e\n                \u003cdiv class=\"h-75 text-center\"\u003e\n                  \u003ch2 class=\"text-center my-3\"\u003e Lyrics \u003c/h2\u003e\n                  \u003cp class=\"w-75 m-auto\" style=\"font-size: 1.5rem\"\u003e\n                    We just wanna party\u003cbr\u003e\n                    Party just for you\u003cbr\u003e\n                    We just want the money\u003cbr\u003e\n                    Money just for you\u003cbr\u003e\n                    I know you wanna party\u003cbr\u003e\n                    Party just for me\u003cbr\u003e\n                    Girl, you got me dancin' (yeah, girl, you got me dancin')\u003cbr\u003e\n                    Dance and shake the frame\u003cbr\u003e\n                    We just wanna party (yeah)\u003cbr\u003e\n                    Party just for you (yeah)\u003cbr\u003e\n                    We just want the money (yeah)\u003cbr\u003e\n                    Money just for you (you)\u003cbr\u003e\n                    I know you wanna party (yeah)\u003cbr\u003e\n                    Party just for me (yeah)\u003cbr\u003e\n                    Girl, you got me dancin' (yeah, girl, you got me dancin')\u003cbr\u003e\n                    Dance and shake the frame (you)\u003cbr\u003e\n                    This is America\u003cbr\u003e\n                    Don't catch you slippin' up\u003cbr\u003e\n                    Don't catch you slippin' up\u003cbr\u003e\n                    Look what I'm whippin' up\u003cbr\u003e\n                    This is America (woo)\u003cbr\u003e\n                    Don't catch you slippin' up\u003cbr\u003e\n                    Don't catch you slippin' up\u003cbr\u003e\n                    Look what I'm whippin' up\u003cbr\u003e\n                  \u003c/p\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://js.pusher.com/4.2/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\n\u003e ⚠️  Video is an embed from YouTube and may not play depending on your region.\n\nOn line 80 we imported the JavaScript Pusher library so let’s add some code to utilize it. Before the closing `body` tag, add the following code:\n\n``` javascript\n    \u003cscript\u003e\n    var app = new Vue({\n        el: '#app',\n        data: {\n            username: '',\n            member: 0,\n            addedMember: '',\n            removedMember: '',\n            connectedMembers: []\n        },\n    \n        created() {\n            fetch('/isLoggedIn', {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                }\n            })\n            .then(res =\u003e res.json())\n            .then(data =\u003e {\n                if (data != 'false') {\n                    this.username = data.username\n                } else {\n                    window.location.replace('/')\n                }\n            })\n    \n            this.subscribe()\n        },\n    \n        methods: {\n            subscribe: function () {\n                const pusher = new Pusher('PUSHER_APP_KEY', {\n                    authEndpoint: '/pusher/auth',\n                    cluster: 'PUSHER_APP_CLUSTER',\n                    encrypted: true\n                });\n    \n                let channel = pusher.subscribe('presence-channel')\n    \n                channel.bind('pusher:subscription_succeeded', data =\u003e {\n                    this.member = data.count\n                    data.each(member =\u003e this.connectedMembers.push(member.id))\n                })\n    \n                // Display a notification when a member comes online\n                channel.bind('pusher:member_added', data =\u003e {\n                    this.member++\n                    this.connectedMembers.push(data.id)\n                    this.addedMember = data.id\n    \n                    this.$refs.added.classList.add('visible')\n                    this.$refs.added.classList.remove('invisible')\n    \n                    window.setTimeout(() =\u003e {\n                        this.$refs.added.classList.remove('visible');\n                        this.$refs.added.classList.add('invisible');\n                    }, 3000)\n                });\n    \n                // Display a notification when a member goes offline\n                channel.bind('pusher:member_removed', data =\u003e {\n                    this.member--\n                    let index = this.connectedMembers.indexOf(data.id)\n    \n                    if (index \u003e -1) {\n                        this.connectedMembers.splice(index, 1)\n                    }\n    \n                    this.removedMember = data.id\n                    this.$refs.removed.classList.add('visible')\n                    this.$refs.removed.classList.remove('invisible')\n    \n                    window.setTimeout(() =\u003e {\n                        this.$refs.removed.classList.remove('visible')\n                        this.$refs.removed.classList.add('invisible')\n                    }, 3000)\n                })\n            }\n        }\n    })\n    \u003c/script\u003e\n```\n\nIn the snippet above, we created some Vue data variables to display reactive updates on different parts of the DOM. We also registered a `created()` lifecycle hook that checks if a user is connected on the backend server and eligible to view the dashboard before calling the `subscribe()` method.\n\nThe `subscribe()` method first configures a Pusher instance using the keys provided on the dashboard then subscribes to a presence channel. Next, it binds to several events that are available on the returned object of a presence channel subscription.\n\nIn the callback function of these bindings, we are able to update the state of the data variables, this is how we display the visual updates on user presence in this application.\n\n\n## Testing the application\n\nWe can test the application by compiling down the Go source code and running it with this command:\n\n```\n    $ go run presence.go\n```\n\nThe application will be available for testing on this address http://127.0.0.1:8090, here’s a display of how the application should look:\n\n![go-online-presence-demo](//images.ctfassets.net/1es3ne0caaid/1ITW3IU0Vm8wkMS2gMqaGe/fdc44d0a06f09561bb282297f721a7e4/go-online-presence-demo.gif)\n\n## Conclusion\n\nIn this tutorial, we have learned how to leverage the Pusher SDK in creating a live streaming application powered by a Go backend server.\n\nThe source code for this tutorial is available on [GitHub.](https://github.com/neoighodaro/go-pusher-presence-app)","metaTitle":"Create a Go application with online presence","metaDescription":"Use Go and Vue.js to create a simple web app with online presence functionality. Users will be able to sign in, view a video and see who else is viewing the same video."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2R3OOdRWOcK8gi8mkcom8i","type":"Entry","createdAt":"2018-07-29T20:22:52.067Z","updatedAt":"2018-07-29T20:22:52.067Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an Android messenger app with online presence using Kotlin","url":"android-messenger-presence-kotlin","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/kotlin-messenger-app-with-online-presence-status","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}}],"reviewDate":"2018-07-25","description":"This tutorial shows how to build an Android messaging app featuring online presence functionality. Use Node and MongoDB to create a simple backend, and Kotlin to program the app. Users will be able to log in and see who is online.","prerequisite":"You will need Android Studio 3+, Node, npm and MongoDB installed on your machine. Some familiarity with Android development is required.","content":"When building a chat application, it is essential to have an online presence feature. It is essential because your users will like to know when their friends are online and are more likely to respond to their messages.\n\nIn this article, we will be building a messenger app with online presence using Pusher Channels, Kotlin and Node.js. \n\nHere is a demo of what we will build:\n\n![android-messenger-presence-demo](//images.ctfassets.net/1es3ne0caaid/mmdMFfq7WoYsk26cIKocs/486ce2b458e45a41cfeb01ab4441f3b4/android-messenger-presence-demo.gif)\n\n# Prerequisites\n\nTo follow along you need the following requirements:\n\n\n- A Pusher Channel app. You can create one [here](https://pusher.com/channels).\n- Android Studio installed on your machine. You can check [here](https://developer.android.com/studio/index.html) for the latest stable version. A minimum of version 3.0 is recommended.\n- Basic knowledge of Android development and the Android Studio IDE.\n- Basic knowledge of Kotlin. Here are the [official docs](https://kotlinlang.org/docs/reference/).\n- Node.js and NPM (Node Package Manager) installed on your machine. Download [here](https://nodejs.org/en/).\n- Mongo DB installed on your machine. You can install it following the instructions [here](https://docs.mongodb.com/manual/installation/).\n\n\n## Building the backend server\n\nOur server will be built using Node.js. To start, create a new project directory:\n\n```\n    $ mkdir backend-server\n```\n\nNext, create a new `index.js` file inside the project directory and paste the following code:\n\n``` javascript\n    // File: ./index.js\n    var express = require('express');\n    var bodyParser = require('body-parser');\n    const mongoose = require('mongoose');\n    var Pusher = require('pusher');\n    \n    var app = express();\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    var pusher = new Pusher({\n      appId: 'PUSHER_APP_ID',\n      key: 'PUSHER_APP_KEY',\n      secret: 'PUSHER_APP_SECRET',\n      cluster: 'PUSHER_APP_CLUSTER'\n    });\n    \n    mongoose.connect('mongodb://127.0.0.1/db');\n    \n    const Schema = mongoose.Schema;\n    const userSchema = new Schema({\n        name: { type: String, required: true, },\n        count: {type: Number}\n    });\n    \n    var User = mongoose.model('User', userSchema);\n    userSchema.pre('save', function(next) {\n        if (this.isNew) {\n            User.count().then(res =\u003e {\n              this.count = res; // Increment count\n              next();\n            });\n          } else {\n            next();\n          }\n    });\n    \n    module.exports = User;\n    \n    var currentUser;\n    \n    /* \n    =================================\n    We will add our endpoints here!!!\n    =================================\n    */\n    \n    var port = process.env.PORT || 5000;\n    \n    app.listen(port);\n```\n\nIn the snippet above, we initialized Pusher, Express, and MongoDB. We are using [Moongose](http://mongoosejs.com/) to connect to our MongoDB instance.\n\n\n\u003e Replace the `PUSHER_APP_*` keys with the ones on your Pusher dashboard.\n  \n\nNow let’s add our endpoints. The first endpoint we will add will be to log a user in. Paste the code below in your `index.js` file below the `currentUser` declaration:\n\n``` javascript\n    // File: ./index.js\n    \n    // [...]\n    \n    app.post('/login', (req,res) =\u003e {\n        User.findOne({name: req.body.name}, (err, user) =\u003e {\n            if (err) {\n                res.send(\"Error connecting to database\");\n            }\n            \n            // User exists\n            if (user) {\n                currentUser = user;\n                return res.status(200).send(user)\n            }\n            \n            let newuser = new User({name: req.body.name});\n    \n            newuser.save(function(err) {\n                if (err) throw err;\n            });\n            \n            currentUser = newuser;\n            res.status(200).send(newuser)\n        });\n    })\n    \n    // [...]\n```\n\nThis endpoint receives a `username` with the request, and either create a new user or returns the data of the existing user. \n\nLet’s add the next endpoint below the one above:\n\n``` javascript\n    // File: ./index.js\n    \n    // [...]\n    \n    app.get('/users', (req,res) =\u003e {\n        User.find({}, (err, users) =\u003e {\n            if (err) throw err;\n            res.send(users);\n        });\n    })\n    \n    // [...]\n```\n\nThis endpoint above fetches all the users from the database and returns them. \n\nSince we will be using a Pusher presence channel, we need an endpoint to authenticate the user. In the same file, paste this code below the endpoint above:\n\n``` javascript\n    // File: ./index.js\n    \n    // [...]\n    \n    app.post('/pusher/auth/presence', (req, res) =\u003e {\n        let socketId = req.body.socket_id;\n        let channel = req.body.channel_name;\n      \n        let presenceData = {\n            user_id: currentUser._id,\n            user_info: {count: currentUser.count, name: currentUser.name}\n        };\n      \n        let auth = pusher.authenticate(socketId, channel, presenceData);\n    \n        res.send(auth);\n    });\n    \n    // [...]\n```\n\nSince we are going to be using private channels, we need an endpoint for authentication. Add the following endpoint below the endpoint above:\n\n``` javascript\n    // File: ./index.js\n    \n    // [...]\n    \n    app.post('/pusher/auth/private', (req, res) =\u003e {\n        res.send(pusher.authenticate(req.body.socket_id, req.body.channel_name));\n    });\n    \n    // [...]\n\nFinally, the last endpoint will be to trigger an event `new-message` to a channel. Add the endpoint below the last one:\n\n\n    // File: ./index.js\n    \n    // [...]\n    \n    app.post('/send-message', (req, res) =\u003e {\n        let payload = {message: req.body.message, sender_id: req.body.sender_id}\n        pusher.trigger(req.body.channel_name, 'new-message', payload);\n        res.send(200);\n    });\n    \n    // [...]\n```\n\nAfter adding all the endpoints, install the necessary NPM packages by running this command:\n\n```\n    $ npm install express body-parser mongoose pusher\n```\n\nBefore you run your application, make sure MongoDB is running already using this command:\n\n```\n    $ mongod --dbpath C:\\MongoDB\\data\\db # Windows\n    $ mongod --dbpath=/path/to/db/directory # Mac or Linux\n```\n\nNow you can run your application using the command below:\n\n```\n    $ node index.js\n```\n\nYour app will be available here: http://localhost:5000.\n\n\n## Building our Android application\n\nCreate your Android project. In the wizard, enter your project name, let’s say **MessengerApp.**  Next, enter your package name. You can use a minimum SDK of 19 then choose an **Empty Activity**. On the next page, change the **Activity Name** to `LoginActivity`. After this, Android Studio will build your project for you.\n\nNow that we have the project, let’s add the required dependencies for our app. Open your app module `build.gradle` file and add these:\n\n```\n    // File ../app/build.gradle\n    dependencies {\n      // [...]\n      \n      implementation 'com.android.support:design:28+'\n      implementation 'com.pusher:pusher-java-client:1.6.0'\n      implementation \"com.squareup.retrofit2:retrofit:2.4.0\"\n      implementation \"com.squareup.retrofit2:converter-scalars:2.4.0\"\n      implementation 'com.squareup.retrofit2:converter-gson:2.3.0'\n    }\n```\n\nNotably, we added the dependencies for [Retrofit](http://square.github.io/retrofit/) and Pusher. Retrofit is an HTTP client library used for network calls. We added the design library dependency too as we want to use some classes from it. Sync your gradle files to pull in the dependencies.\n\nNext, let’s prepare our app to make network calls. Retrofit requires an interface to know the endpoints to be accessed. \n\nCreate a new interface named `ApiService` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/ApiService.kt\n    import okhttp3.RequestBody\n    import retrofit2.Call\n    import retrofit2.http.Body\n    import retrofit2.http.GET\n    import retrofit2.http.POST\n    \n    interface ApiService {\n    \n      @POST(\"/login\")\n      fun login(@Body body:RequestBody): Call\u003cUserModel\u003e\n    \n      @POST(\"/send-message\")\n      fun sendMessage(@Body body:RequestBody): Call\u003cString\u003e\n    \n      @GET(\"/users\")\n      fun getUsers(): Call\u003cList\u003cUserModel\u003e\u003e\n    }\n```\n\nHere, we have declared three endpoints. They are for logging in, sending messages and fetching users. Notice that in some of our responses, we return `Call\u003cUserModel\u003e`. Let’s create the `UserModel`. Create a new class called `UserModel` and paste the following:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/UserModel.kt\n    import com.google.gson.annotations.Expose\n    import com.google.gson.annotations.SerializedName\n    \n    data class UserModel(@SerializedName(\"_id\") @Expose var id: String,\n                         @SerializedName(\"name\") @Expose var name: String,\n                         @SerializedName(\"count\") @Expose var count: Int,\n                         var online:Boolean = false)\n```\n\nAbove, we used a data class so that some other functions required for model classes such as `toString`, `hashCode` are added to the class by default. \n\nWe are expecting only the values for the `id` and `name` from the server. We added the `online` property so we can update later on. \n\nNext, create a new class named `RetrofitInstance` and paste the following code:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/RetrofitInstance.kt\n    import okhttp3.OkHttpClient\n    import retrofit2.Retrofit\n    import retrofit2.converter.gson.GsonConverterFactory\n    import retrofit2.converter.scalars.ScalarsConverterFactory\n    \n    class RetrofitInstance {\n    \n      companion object {\n        val retrofit: ApiService by lazy {\n          val httpClient = OkHttpClient.Builder()\n          val builder = Retrofit.Builder()\n              .baseUrl(\"http://10.0.2.2:5000/\")\n              .addConverterFactory(ScalarsConverterFactory.create())\n              .addConverterFactory(GsonConverterFactory.create())\n    \n          val retrofit = builder\n              .client(httpClient.build())\n              .build()\n          retrofit.create(ApiService::class.java)\n        }\n      }\n    }\n```\n\nThis class contains a class variable called `retrofit`. It provides us with an instance for Retrofit that we will reference in more than one class.\n\nFinally, to request for the internet access permission update the `AndroidManifest.xml` file like so:\n\n``` kotlin\n    // File: ./app/src/main/ApiService.kt\n    \u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      package=\"com.example.messengerapp\"\u003e\n    \n      \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n      [...]\n    \n    \u003c/manifest\u003e\n```\n\nNow we can make requests using Retrofit. \n\nThe next feature we will implement is login. Open the already created `LoginActivity` layout file `activity_login.xml` file and paste this:\n\n``` xml\n    // File: ./app/src/main/res/layout/activity_login.xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      android:layout_margin=\"20dp\"\n      tools:context=\".LoginActivity\"\u003e\n    \n      \u003cEditText\n        android:id=\"@+id/editTextUsername\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" /\u003e\n    \n      \u003cButton\n        android:id=\"@+id/loginButton\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Login\"\n        app:layout_constraintTop_toBottomOf=\"@+id/editTextUsername\" /\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nThis layout contains an input field to take the username and a button to make a login request. \n\nNext, open the `LoginActivity.Kt` file and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/LoginActivity.kt\n    import android.content.Intent\n    import android.os.Bundle\n    import android.support.v7.app.AppCompatActivity\n    import android.util.Log\n    import kotlinx.android.synthetic.main.activity_login.*\n    import okhttp3.MediaType\n    import okhttp3.RequestBody\n    import org.json.JSONObject\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    \n    class LoginActivity : AppCompatActivity() {\n    \n      override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_login)\n        loginButton.setOnClickListener {\n          if (editTextUsername.text.isNotEmpty()) {\n            loginFunction(editTextUsername.text.toString())\n          }\n        }\n      }\n    \n      private fun loginFunction(name:String) {\n        val jsonObject = JSONObject()\n        jsonObject.put(\"name\", name)\n        \n        val jsonBody = RequestBody.create(\n            MediaType.parse(\"application/json; charset=utf-8\"), \n            jsonObject.toString()\n        )\n    \n        RetrofitInstance.retrofit.login(jsonBody).enqueue(object:Callback\u003cUserModel\u003e {\n          override fun onFailure(call: Call\u003cUserModel\u003e?, t: Throwable?) {\n            Log.i(\"LoginActivity\",t!!.localizedMessage)\n          }\n    \n          override fun onResponse(call: Call\u003cUserModel\u003e?, response: Response\u003cUserModel\u003e?) {\n            if (response!!.code() == 200) {\n              Singleton.getInstance().currentUser = response.body()!!\n              startActivity(Intent(this@LoginActivity,ContactListActivity::class.java))\n              finish()\n            }\n          }\n        })\n      }\n    }\n```\n\nIn the file, we set up a listener for our login button so that when it is clicked, we can send the text to the server for authentication. We also stored the logged in user in a singleton class so that we can access the user’s details later. \n\nCreate a new class called `Singleton` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/RetrofitInstance.kt\n    class Singleton {\n      companion object {\n        private val ourInstance = Singleton()\n        fun getInstance(): Singleton {\n          return ourInstance\n        }\n      }\n      lateinit var currentUser: UserModel\n    }\n```\n\n\nWith this class, we will have access to the `currentUser`, which is the logged in user.\n\nNext, let’s create a new activity named `ContactListActivity`. For now, leave the class empty and open the corresponding layout file named `activity_contact_list` and paste the following:\n\n``` xml\n    // File: ./app/src/main/res/layout/activity_contact_list.xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      tools:context=\".ContactListActivity\"\u003e\n    \n      \u003candroid.support.v7.widget.RecyclerView\n        android:layout_width=\"match_parent\"\n        android:id=\"@+id/recyclerViewUserList\"\n        android:layout_height=\"match_parent\"/\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\n\nThe layout contains a recycler view, which will give us all the list of our contacts fetched from the database. Since we are displaying items in a list, we will need an adapter class to manage how items are inflated to the layout. \n\nCreate a new class named `ContactRecyclerAdapter` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/ContactRecyclerAdapter.kt\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.ImageView\n    import android.widget.TextView\n    import java.util.*\n    \n    class ContactRecyclerAdapter(private var list: ArrayList\u003cUserModel\u003e, private var listener: UserClickListener)\n      : RecyclerView.Adapter\u003cContactRecyclerAdapter.ViewHolder\u003e() {\n      \n      override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        return ViewHolder(LayoutInflater.from(parent.context)\n            .inflate(R.layout.user_list_row, parent, false))\n      }\n    \n      override fun onBindViewHolder(holder: ViewHolder, position: Int) = holder.bind(list[position])\n    \n      override fun getItemCount(): Int = list.size\n    \n      fun showUserOnline(updatedUser: UserModel) {\n        list.forEachIndexed { index, element -\u003e\n          if (updatedUser.id == element.id) {\n            updatedUser.online = true\n            list[index] = updatedUser\n            notifyItemChanged(index)\n          }\n    \n        }\n      }\n    \n      fun showUserOffline(updatedUser: UserModel) {\n        list.forEachIndexed { index, element -\u003e\n          if (updatedUser.id == element.id) {\n            updatedUser.online = false\n            list[index] = updatedUser\n            notifyItemChanged(index)\n          }\n        }\n      }\n    \n      fun add(user: UserModel) {\n        list.add(user)\n        notifyDataSetChanged()\n      }\n    \n      inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        private val nameTextView: TextView = itemView.findViewById(R.id.usernameTextView)\n        private val presenceImageView: ImageView = itemView.findViewById(R.id.presenceImageView)\n    \n        fun bind(currentValue: UserModel) = with(itemView) {\n          this.setOnClickListener {\n            listener.onUserClicked(currentValue)\n          }\n          nameTextView.text = currentValue.name\n          if (currentValue.online){\n            presenceImageView.setImageDrawable(this.context.resources.getDrawable(R.drawable.presence_icon_online))\n          } else {\n            presenceImageView.setImageDrawable(this.context.resources.getDrawable(R.drawable.presence_icon))\n    \n          }\n    \n        }\n      }\n    \n      interface UserClickListener {\n        fun onUserClicked(user: UserModel)\n      }\n    }\n```\n\nThis adapter has some overridden methods and some custom methods. \n\nThe `onCreateViewHolder` inflates how each row will look like. `onBindViewHolder` binds the data to each item by calling the `bind` method in the inner `ViewHolder` class. The `getItemCount` gives the size of the list. \n\nFor our custom methods, `showUserOffline` updates the user and shows when they are offline. While `showUserOnline` does the opposite. Finally, we have the `add` method, which adds a new contact to the list and refreshes it.\n\nIn the adapter class above, we used a new layout named `user_list_row`. Create a new layout `user_list_row` and paste this:\n\n``` xml\n    // File: ./app/src/main/res/layout/user_list_row.xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout\n      android:orientation=\"horizontal\"\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\"\n      android:layout_margin=\"20dp\"\n      android:gravity=\"center\"\n      tools:context=\".LoginActivity\"\u003e\n    \n      \u003cImageView\n        android:id=\"@+id/presenceImageView\"\n        android:layout_width=\"15dp\"\n        android:layout_height=\"15dp\"\n        app:srcCompat=\"@drawable/presence_icon\" /\u003e\n    \n      \u003cTextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        tools:text=\"Neo\"\n        android:textSize=\"20sp\"\n        android:layout_marginStart=\"10dp\"\n        android:id=\"@+id/usernameTextView\"\n        app:layout_constraintTop_toBottomOf=\"@+id/editTextUsername\"\n        /\u003e\n    \n    \u003c/LinearLayout\u003e\n```\n\nThis layout is the visual representation of how each item on the layout will look like. The layout has an image view that shows the users online status. The layout also has a textview that shows the name of the contact beside the icon. The icons are vector drawables. Let’s create the files. \n\nCreate a new drawable named `presence_icon_online` and paste this:\n\n``` xml\n    // File: ./app/src/main/res/drawable/presence_icon_online.xml\n    \u003cvector android:height=\"24dp\" android:tint=\"#3FFC3C\"\n        android:viewportHeight=\"24.0\" android:viewportWidth=\"24.0\"\n        android:width=\"24dp\" xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003e\n        \u003cpath android:fillColor=\"#FF000000\" android:pathData=\"M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2z\"/\u003e\n    \u003c/vector\u003e\n```\n\n\nCreate another drawable named `presence_icon` and paste this:\n\n``` xml\n    // File: ./app/src/main/res/drawable/presence_icon.xml\n    \u003cvector android:height=\"24dp\" android:tint=\"#C0C0C6\"\n        android:viewportHeight=\"24.0\" android:viewportWidth=\"24.0\"\n        android:width=\"24dp\" xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003e\n        \u003cpath android:fillColor=\"#FF000000\" android:pathData=\"M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2z\"/\u003e\n    \u003c/vector\u003e\n```\n\nNext, open the `ContactListActivity` class and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/ContactListActivity.kt\n    import android.content.Intent\n    import android.os.Bundle\n    import android.support.v7.app.AppCompatActivity\n    import android.support.v7.widget.LinearLayoutManager\n    import android.util.Log\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import com.pusher.client.channel.PresenceChannelEventListener\n    import com.pusher.client.channel.User\n    import com.pusher.client.util.HttpAuthorizer\n    import kotlinx.android.synthetic.main.activity_contact_list.*\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    \n    class ContactListActivity : AppCompatActivity(),\n        ContactRecyclerAdapter.UserClickListener {\n    \n      private val mAdapter = ContactRecyclerAdapter(ArrayList(), this)\n      \n      override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_contact_list)\n        setupRecyclerView()\n        fetchUsers()\n        subscribeToChannel()\n      }\n    \n    }\n```\n\nIn this class, we initialized the `ContactRecyclerAdapter`, then called three functions in the `onCreate` method. Let’s create these new functions. \n\nIn the same class, add the following methods:\n\n``` kotlin\n    private fun setupRecyclerView() {\n      with(recyclerViewUserList) {\n        layoutManager = LinearLayoutManager(this@ContactListActivity)\n        adapter = mAdapter\n      }\n    }\n    \n    private fun fetchUsers() {\n      RetrofitInstance.retrofit.getUsers().enqueue(object : Callback\u003cList\u003cUserModel\u003e\u003e {\n        override fun onFailure(call: Call\u003cList\u003cUserModel\u003e\u003e?, t: Throwable?) {}\n        override fun onResponse(call: Call\u003cList\u003cUserModel\u003e\u003e?, response: Response\u003cList\u003cUserModel\u003e\u003e?) {\n          for (user in response!!.body()!!) {\n            if (user.id != Singleton.getInstance().currentUser.id) {\n              mAdapter.add(user)\n            }\n          }\n        }\n      })\n    }\n    \n    private fun subscribeToChannel() {\n    \n      val authorizer = HttpAuthorizer(\"http://10.0.2.2:5000/pusher/auth/presence\")\n      val options = PusherOptions().setAuthorizer(authorizer)\n      options.setCluster(\"PUSHER_APP_CLUSTER\")\n    \n      val pusher = Pusher(\"PUSHER_APP_KEY\", options)\n      pusher.connect()\n    \n      pusher.subscribePresence(\"presence-channel\", object : PresenceChannelEventListener {\n        override fun onUsersInformationReceived(p0: String?, users: MutableSet\u003cUser\u003e?) {\n          for (user in users!!) {\n            if (user.id!=Singleton.getInstance().currentUser.id){\n              runOnUiThread {\n                mAdapter.showUserOnline(user.toUserModel())\n              }\n            }\n          }\n        }\n    \n        override fun onEvent(p0: String?, p1: String?, p2: String?) {}\n        override fun onAuthenticationFailure(p0: String?, p1: Exception?) {}\n        override fun onSubscriptionSucceeded(p0: String?) {}\n    \n        override fun userSubscribed(channelName: String, user: User) {\n          runOnUiThread {\n            mAdapter.showUserOnline(user.toUserModel())\n          }\n        }\n    \n        override fun userUnsubscribed(channelName: String, user: User) {\n          runOnUiThread {\n            mAdapter.showUserOffline(user.toUserModel())\n          }\n        }\n      })\n    }\n    \n    override fun onUserClicked(user: UserModel) {\n      val intent = Intent(this, ChatRoom::class.java)\n      intent.putExtra(ChatRoom.EXTRA_ID,user.id)\n      intent.putExtra(ChatRoom.EXTRA_NAME,user.name)\n      intent.putExtra(ChatRoom.EXTRA_COUNT,user.count)\n      startActivity(intent)\n    }\n```\n\n\u003e Replace the `PUSHER_APP_*`  keys with the values on your dashboard.\n\n\n- `setupRecyclerView` assigns a layout manager and an adapter to the recycler view. For a recycler view to work, you need these two things. \n- `fetchUsers` fetches all the users from the server and displays on the list. It exempts the current user logged in.\n- `subcribeToChannel` subscribes to a presence channel. When you subscribe to one, the `onUsersInformationReceived` gives you all the users subscribed to the channel including the current user. So, in that callback, we call the `showUserOnline` method in the adapter class so that the icon beside the user can be changed to signify that the user is online.\n- `onUserClicked` is called when a contact is selected. We pass the details of the user to the next activity called `ChatRoom`.\n\nIn the previous snippet, we used an extension function to transform the `User` object we receive from Pusher to our own `UserModel` object. Let’s define this extension.\n\nCreate a new class called `Utils` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/Utils.kt\n    import com.pusher.client.channel.User\n    import org.json.JSONObject\n    \n    fun User.toUserModel():UserModel{\n      val jsonObject = JSONObject(this.info)\n      val name = jsonObject.getString(\"name\")\n      val numb = jsonObject.getInt(\"count\")\n      return UserModel(this.id, name, numb)\n    }\n```\n\nNow, since we referenced a `ChatRoom` activity earlier in the `onUserClicked` method, let’s create it. \n\nCreate a new activity called `ChatRoom`. The activity comes with a layout file `activity_chat_room`, paste this in the layout file:\n\n``` xml\n    // File: ./app/src/main/res/layout/activity_chat_room.xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      tools:context=\".ChatRoom\"\u003e\n    \n      \u003candroid.support.v7.widget.RecyclerView\n        android:id=\"@+id/recyclerViewChat\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" /\u003e\n    \n      \u003cEditText\n        android:id=\"@+id/editText\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:layout_margin=\"16dp\"\n        android:hint=\"Enter a message\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toStartOf=\"@+id/sendButton\"\n        app:layout_constraintStart_toStartOf=\"parent\" /\u003e\n    \n      \u003candroid.support.design.widget.FloatingActionButton\n        android:id=\"@+id/sendButton\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"end|bottom\"\n        android:layout_margin=\"16dp\"\n        android:src=\"@android:drawable/ic_menu_send\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintBottom_toBottomOf=\"parent\" /\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nThe layout above contains a recycler view for the chat messages, an edit text to collect new messages, and a floating action button to send the message. \n\nNext, create a new class called `ChatRoomAdapter` and paste the following:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/ChatRoomAdapter.kt\n    import android.support.v7.widget.CardView\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.RelativeLayout\n    import android.widget.TextView\n    import java.util.*\n    \n    class ChatRoomAdapter (private var list: ArrayList\u003cMessageModel\u003e)\n      : RecyclerView.Adapter\u003cChatRoomAdapter.ViewHolder\u003e() {\n    \n      override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        return ViewHolder(LayoutInflater.from(parent.context)\n            .inflate(R.layout.chat_item, parent, false))\n      }\n    \n      override fun onBindViewHolder(holder: ViewHolder, position: Int) = holder.bind(list[position])\n    \n      override fun getItemCount(): Int = list.size\n    \n      fun add(message: MessageModel) {\n        list.add(message)\n        notifyDataSetChanged()\n      }\n    \n      inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        private val messageTextView: TextView = itemView.findViewById(R.id.text)\n        private val cardView: CardView = itemView.findViewById(R.id.cardView)\n    \n        fun bind(message: MessageModel) = with(itemView) {\n          messageTextView.text = message.message\n          val params = cardView.layoutParams as RelativeLayout.LayoutParams\n          if (message.senderId==Singleton.getInstance().currentUser.id) {\n            params.addRule(RelativeLayout.ALIGN_PARENT_RIGHT)\n          }\n        }\n      }\n    }\n```\n\nThis adapter works in a similar fashion as the one we created earlier. One difference though is that the show online and offline methods are not needed here.\n\nNext, create another class named `MessageModel` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/MessageModel.kt\n    data class MessageModel(val message: String, val senderId: String)\n```\n\nThe `chat_item` layout used in the `onCreateViewHolder` method of the adapter class represents how each layout will look like. Create a new layout called `chat_item` and paste this:\n\n``` xml\n    // File: ./app/src/main/res/layout/chat_item.xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cRelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      android:layout_width=\"wrap_content\"\n      android:layout_height=\"wrap_content\"\n      android:layout_margin=\"16dp\"\n      android:orientation=\"vertical\"\u003e\n    \n      \u003candroid.support.v7.widget.CardView\n        android:id=\"@+id/cardView\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"start\"\n        app:cardCornerRadius=\"8dp\"\n        app:cardUseCompatPadding=\"true\"\u003e\n    \n        \u003cLinearLayout\n          android:layout_width=\"wrap_content\"\n          android:layout_height=\"wrap_content\"\n          android:gravity=\"start\"\n          android:orientation=\"vertical\"\n          android:padding=\"8dp\"\u003e\n    \n          \u003cTextView\n            android:id=\"@+id/text\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center_vertical|start\"\n            android:layout_marginBottom=\"4dp\"\n            android:textStyle=\"bold\" /\u003e\n    \n        \u003c/LinearLayout\u003e\n    \n      \u003c/android.support.v7.widget.CardView\u003e\n    \n    \u003c/RelativeLayout\u003e\n```\n\nFinally, open the `ChatRoom` activity class and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/ChatRoom.kt\n    import android.app.Activity\n    import android.os.Bundle\n    import android.support.v7.app.AppCompatActivity\n    import android.support.v7.widget.LinearLayoutManager\n    import android.util.Log\n    import android.view.View\n    import android.view.inputmethod.InputMethodManager\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import com.pusher.client.channel.PrivateChannelEventListener\n    import com.pusher.client.util.HttpAuthorizer\n    import kotlinx.android.synthetic.main.activity_chat_room.*\n    import okhttp3.MediaType\n    import okhttp3.RequestBody\n    import org.json.JSONObject\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    import java.lang.Exception\n    import java.util.*\n    \n    class ChatRoom : AppCompatActivity() {\n    \n      companion object {\n        const val EXTRA_ID = \"id\"\n        const val EXTRA_NAME = \"name\"\n        const val EXTRA_COUNT = \"numb\"\n      }\n    \n      private lateinit var contactName: String\n      private lateinit var contactId: String\n      private var contactNumb: Int = -1\n      lateinit var nameOfChannel: String\n      val mAdapter = ChatRoomAdapter(ArrayList())\n    \n      override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_chat_room)\n        fetchExtras()\n        setupRecyclerView()\n        subscribeToChannel()\n        setupClickListener()\n      }\n    }\n```\n\nIn this file, we declared constants used to send data to the activity through intents. We also initialized variables we will use later like the adapter the contact details. We then called some additional methods in the `onCreate` method. Let’s add them to the class.\n\nAdd the `fetchExtras` method defined below to the class. The method gets the extras sent from the chatroom activity.\n\n``` kotlin\n    private fun fetchExtras() {\n      contactName = intent.extras.getString(ChatRoom.EXTRA_NAME)\n      contactId = intent.extras.getString(ChatRoom.EXTRA_ID)\n      contactNumb = intent.extras.getInt(ChatRoom.EXTRA_COUNT)\n    }\n```\n\nThe next method is the `setupRecyclerView` method. This initializes the recycler view with an adapter and a layout manager. Paste the function in the same class as before:\n\n``` kotlin\n    private fun setupRecyclerView() {\n      with(recyclerViewChat) {\n        layoutManager = LinearLayoutManager(this@ChatRoom)\n        adapter = mAdapter\n      }\n    }\n```\n\nThe next method is the `subscribeToChannel` method. This method subscribes the user to a private channel with the selected contact. Paste the following code to the same class as before:\n\n``` kotlin\n    private fun subscribeToChannel() {\n      val authorizer = HttpAuthorizer(\"http://10.0.2.2:5000/pusher/auth/private\")\n      val options = PusherOptions().setAuthorizer(authorizer)\n      options.setCluster(\"PUSHER_APP_CLUSTER\")\n    \n      val pusher = Pusher(\"PUSHER_APP_KEY\", options)\n      pusher.connect()\n    \n      nameOfChannel = if (Singleton.getInstance().currentUser.count \u003e contactNumb) {\n        \"private-\" + Singleton.getInstance().currentUser.id + \"-\" + contactId\n      } else {\n        \"private-\" + contactId + \"-\" + Singleton.getInstance().currentUser.id\n      }\n    \n      Log.i(\"ChatRoom\", nameOfChannel)\n    \n      pusher.subscribePrivate(nameOfChannel, object : PrivateChannelEventListener {\n        override fun onEvent(channelName: String?, eventName: String?, data: String?) {\n          val obj = JSONObject(data)\n          val messageModel = MessageModel(obj.getString(\"message\"), obj.getString(\"sender_id\"))\n    \n          runOnUiThread {\n            mAdapter.add(messageModel)\n          }\n        }\n    \n        override fun onAuthenticationFailure(p0: String?, p1: Exception?) {}\n        override fun onSubscriptionSucceeded(p0: String?) {}\n      }, \"new-message\")\n    }\n```\n\n\u003e Replace the `PUSHER_APP_*`  keys with the values on your dashboard.\n\nThe code above allows a user to subscribe to a private channel. A private channel requires authorization like the presence channel. However, it does not expose a callback that is triggered when other users subscribe. \n\nNext method to be added is the `setupClickListener`. Paste the method to the same class as before:\n\n``` kotlin\n    private fun setupClickListener() {\n      sendButton.setOnClickListener{\n        if (editText.text.isNotEmpty()) {\n          val jsonObject = JSONObject()\n          jsonObject.put(\"message\",editText.text.toString())\n          jsonObject.put(\"channel_name\",nameOfChannel)\n          jsonObject.put(\"sender_id\",Singleton.getInstance().currentUser.id)\n          \n          val jsonBody = RequestBody.create(\n              MediaType.parse(\"application/json; charset=utf-8\"), \n              jsonObject.toString()\n          )\n    \n          RetrofitInstance.retrofit.sendMessage(jsonBody).enqueue(object: Callback\u003cString\u003e{\n            override fun onFailure(call: Call\u003cString\u003e?, t: Throwable?) {}\n            override fun onResponse(call: Call\u003cString\u003e?, response: Response\u003cString\u003e?) {}\n          })\n          \n          editText.text.clear()\n          hideKeyBoard()\n        }\n    \n      }\n    }\n```\n\nThe method above assigns a click listener to the floating action button to send the message to the server.  After the message is sent, we clear the text view and hide the keyboard. \n\nAdd a method to the same class for hiding the keyboard like this:\n\n``` kotlin\n    private fun hideKeyBoard() {\n      val imm = getSystemService(Activity.INPUT_METHOD_SERVICE) as InputMethodManager\n      var view = currentFocus\n      \n      if (view == null) {\n        view = View(this)\n      }\n      \n      imm.hideSoftInputFromWindow(view.windowToken, 0)\n    }\n```\n\nThat’s all for the application. Now you can run your application in Android Studio and you should see the application in action.\n\n\n\u003e Make sure the Node.js API we built earlier is running before running the Android application.\n\n\n![android-messenger-presence-demo](//images.ctfassets.net/1es3ne0caaid/mmdMFfq7WoYsk26cIKocs/486ce2b458e45a41cfeb01ab4441f3b4/android-messenger-presence-demo.gif)\n\n\n## Conclusion\n\nIn this article, you have been introduced yet again to some Pusher’s capabilities such as the private and presence channel. We learned how to authenticate our users for the various channels. We used these channels to implement a private chat between two persons and an online notification for a contact. \n\nThe source code to the application built in this article is available on [GitHub](https://github.com/neoighodaro/kotlin-messenger-app-with-online-presence-status).","metaTitle":"Build an Android messenger app with online presence","metaDescription":"Use Kotlin, Node.js and MongoDB to build an Android messaging app, featuring online presence. Users are able to log in and see who else is online."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4fZ7gsiu4w0sMCAwqisKaC","type":"Entry","createdAt":"2018-05-28T11:21:02.494Z","updatedAt":"2018-05-28T11:21:02.494Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Track online presence in a Ruby on Rails app","url":"online-presence-ruby-rails","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/9jaswag/pusher-online-presence","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6S5luSjtlYk4i8eM8AyO4I","type":"Entry","createdAt":"2018-02-02T13:39:48.331Z","updatedAt":"2018-02-12T14:41:19.307Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby","url":"ruby","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"hPWAADkjVmomS68E6seqQ","type":"Entry","createdAt":"2018-02-12T14:48:52.613Z","updatedAt":"2018-02-12T14:48:52.613Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby on Rails","url":"ruby-on-rails","type":"framework"}}],"reviewDate":"2018-05-27","description":"Build a Ruby app that tracks which users are online. You will create a simple app, with signup and login functionality. Users will be able to view a dashboard that updates automatically when new users log in.","prerequisite":"To follow this tutorial, you will need Ruby and Rails installed on your machine. A basic understanding of Ruby, PostgreSQL and CoffeeScript will help you get the most out of this tutorial.","content":"## Introduction\n\nWe live in a social age, an age where people meet and form relationships online. On whatever online platform people meet, one important feature to have is the ability for users to know when their friends are online or offline.\nIn this post we’ll build a simple app where we can monitor the online presence of users in realtime. When we’re done, we’d have built something that looks like this:\n\n![online-presence-ruby-demo](//images.ctfassets.net/1es3ne0caaid/7F57ekAVZCmEAM6SucgmOK/46cd89ce88a696f2f0a7dae2c91bba37/online-presence-ruby-demo.gif)\n\n## Prerequisites\n\nA basic understanding of Ruby, CoffeeScript and PostgreSQL will help you get the best out of this tutorial. You can check the [PostgreSQL](https://www.postgresql.org/download/), [Ruby](https://www.ruby-lang.org/en/downloads/) and [Rails](http://guides.rubyonrails.org/getting_started.html) documentation for installation steps.\n\nBefore we start building our app, let’s ensure we have Ruby and Rails installed. Run the following command in your terminal to confirm you have both Ruby and Rails installed:\n\n```\n    $ ruby -v      // 2.1 or above\n    $ rails -v   // 4.2 or above\n```\n\n## Setting up the application\n\nOpen your terminal and run the following Rails commands to create our demo application:\n\n```\n    # create a new Rails application\n    $ rails new pusher-online-presence -T --database=postgresql\n```\n\nGo ahead and change directory into the newly created `pusher-online-presence` folder:\n\n```\n    # change directory\n    $ cd pusher-online-presence\n```\n\nIn the root of your `pusher-online-presence` directory, open your `Gemfile` and add the following gems:\n\n```\n    # Gemfile\n    \n    gem 'bootstrap', '~\u003e 4.1.0'\n    gem 'jquery-rails'\n    gem 'pusher'\n    gem 'figaro'\n    gem 'devise'\n```\n\nIn your terminal, ensure you are in the `pusher-online-presence` project directory and install the gems by running:\n\n```\n    $ bundle install\n```\n\n## Database setup\n\nTo get our app up and running, we’ll create a database for it to work with. You can check out this [article](https://www.digitalocean.com/community/tutorials/how-to-setup-ruby-on-rails-with-postgres) on how to create a Postgres database and an associated user and password.\n\nOnce you have your database details, in your `database.yml` file, under the `development` key, add the following code:\n\n``` yaml\n    # config/database.yml\n    \n    ...\n    development:\n      \u003c\u003c: *default\n      database: pusher-online-presence_development // add this line if it isn't already there\n      username: database_user // add this line\n      password: user_password // add this line\n    ...\n```\n\nEnsure that the username and password entered in the code above has access to the `pusher-online-presence_development database`. After that, run the following code to setup the database:\n\n```\n    # setup database\n    $ rails db:setup\n```\n\n## Bootstrap the application\n\nWith our database all set up, first thing we’ll do is to set up [Devise](https://github.com/plataformatec/devise). Devise is a flexible authentication solution for Ruby on Rails. It helps you set up user authentication in seconds. In your terminal, run the following command:\n\n```\n    # run the devise generator\n    $ rails generate devise:install\n```\n\nAt this point, a number of instructions will appear in the console, one of which involves adding some code to your `application.html.erb` file. We’ll also add our Pusher script while we’re at it.\n\n``` html\n    # app/views/layouts/application.html.erb\n    \n      \u003chead\u003e\n        .....\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\"\u003e\n        \u003c%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %\u003e\n        \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e # add Pusher script\n        \u003c%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %\u003e\n      \u003c/head\u003e\n      \u003cbody\u003e\n        \u003cdiv class=\"container\"\u003e # add this block of code\n          \u003c% if notice %\u003e\n            \u003cdiv class=\"alert alert-info alert-dismissible fade show\" role=\"alert\"\u003e\n              \u003cp class=\"notice m-0\"\u003e\u003c%= notice %\u003e\u003c/p\u003e\n              \u003cbutton type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"\u003e\n                \u003cspan aria-hidden=\"true\"\u003e\u0026times;\u003c/span\u003e\n              \u003c/button\u003e\n            \u003c/div\u003e\n          \u003c% end %\u003e\n          \u003c% if alert %\u003e\n            \u003cdiv class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\"\u003e\n              \u003cp class=\"m-0\"\u003e\u003c%= alert %\u003e\u003c/p\u003e\n              \u003cbutton type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"\u003e\n                \u003cspan aria-hidden=\"true\"\u003e\u0026times;\u003c/span\u003e\n              \u003c/button\u003e\n            \u003c/div\u003e\n          \u003c% end %\u003e\n        \u003c/div\u003e # code block ends here\n        \u003c%= yield %\u003e\n      \u003c/body\u003e\n```\n\nNext, we’ll generate our authentication view pages and user model using Devise. In your terminal, run the following command:\n\n```\n    # generate Devise view pages\n    $ rails generate devise:views\n    \n    # generate user model\n    $ rails generate devise user\n    \n    # generate migration to add extra columns to the user model\n    $ rails generate migration add_username_to_users username:string:uniq is_signed_in:boolean\n```\n\nNow that we have our migration files generated, we’ll make some modifications to some files and then run our migrations.\n\nIn your migrate folder, open the `add_username_to_users` migration file and add the following:\n\n``` ruby\n    # db/migrate/20180524154037_add_username_to_users.rb\n    \n    class AddUsernameToUsers \u003c ActiveRecord::Migration[5.1]\n      def change\n        add_column :users, :username, :string\n        add_index :users, :username, unique: true\n        add_column :users, :is_signed_in, :boolean, default: true # update this line\n      end\n    end\n```\n\nNote that your `add_username_to_users` file may have a different name from what is above, based on when you ran the migration commands.\nNow, let’s add some validation to our user model:\n\n``` ruby\n    # app/models/user.rb\n    \n    class User \u003c ApplicationRecord\n      # Include default devise modules. Others available are:\n      # :confirmable, :lockable, :timeoutable and :omniauthable\n      validates :username, presence: :true, uniqueness: { case_sensitive: false } # add this line\n      validates :is_signed_in, inclusion: [true, false] # add this line\n      devise :database_authenticatable, :registerable,\n             :recoverable, :rememberable, :trackable, :validatable\n    end\n```\n\nUpdate the code in your application controller with the following:\n\n``` ruby\n    # app/controllers/application_controller.rb\n    \n    class ApplicationController \u003c ActionController::Base\n      protect_from_forgery with: :exception\n      before_action :configure_permitted_parameters, if: :devise_controller?\n      before_action :authenticate_user!\n      \n      protected\n      \n      def configure_permitted_parameters\n        added_attrs = [:username, :email, :password, :password_confirmation, :remember_me]\n        devise_parameter_sanitizer.permit :sign_up, keys: added_attrs\n        devise_parameter_sanitizer.permit :account_update, keys: added_attrs\n      end\n    end\n```\n\nNow, we’re ready to run our migration and see our app. In your terminal, run the following:\n\n```\n    # run database migrations\n    $ rails db:migrate\n```\n\nAfter running migrations, start the development server on your terminal by running `rails s`. Visit [http://localhost:3000](http://localhost:3000/) in your browser to see your brand new application:\n\n![youre-on-rails](//images.ctfassets.net/1es3ne0caaid/3sOsgC4S80gOKM8Waqkgui/87c5c9e64375cbb2f8f2516223f4e515/youre-on-rails.png)\n\n## Pusher account setup\n\nNow that our application is up and running, it’s time for us to create our app on Pusher. Head over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up).\n\n![ruby-create-pusher-account](//images.ctfassets.net/1es3ne0caaid/6uDbn5kOyIOiKyeSeOKqeS/6136b86bc4d9b6ceff7fcf8458375a19/ruby-create-pusher-account.png)\n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![ruby-channels-dashboard](//images.ctfassets.net/1es3ne0caaid/5IDtPf0HhC4aKg66gguYq8/183e0b23ec44fdfc23a38921e11fe9e3/ruby-channels-dashboard.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate with Pusher, to be provided with some boilerplate setup code:\n\n![ruby-new-pusher-app](//images.ctfassets.net/1es3ne0caaid/3qnLmThfu8ue2ImYKKSw8a/2e4f39b15b8787e0f6d3b4f2ea022d95/ruby-new-pusher-app.png)\n\nClick the **App Keys** tab to retrieve your keys\n\n![ruby-app-keys](//images.ctfassets.net/1es3ne0caaid/1XHWE3GCeoCeqsMCO8uM2q/52523148497d08f6e9ba4f52fe0750f6/ruby-app-keys.png)\n\n## Styling the authentication pages\n\nWhile bootstrapping the application, we generated some views courtesy of Devise. Those pages amongst others include our sign up and login pages. We’ll add some styling to the login and signup pages.\nReplace the code in the following files with the ones below:\n\n``` html\n    # app/views/devise/registrations/new.html.erb\n    \n    \u003cdiv class=\"container col-11 col-md-7 col-lg-5 bg-info login-container p-4 mt-5\"\u003e\n      \u003ch2\u003eSign up\u003c/h2\u003e\n      \u003c%= form_for(resource, as: resource_name, url: registration_path(resource_name)) do |f| %\u003e\n        \u003c%= devise_error_messages! %\u003e\n        \u003cdiv class=\"field\"\u003e\n          \u003c%= f.label :email %\u003e\u003cbr /\u003e\n          \u003c%= f.email_field :email, autofocus: true, autocomplete: \"email\", class: 'form-control' %\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"field\"\u003e\n          \u003c%= f.label :username %\u003e\u003cbr /\u003e\n          \u003c%= f.text_field :username, autofocus: true, autocomplete: \"username\", class: 'form-control' %\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"field\"\u003e\n          \u003c%= f.label :password %\u003e\n          \u003c% if @minimum_password_length %\u003e\n          \u003cem\u003e(\u003c%= @minimum_password_length %\u003e characters minimum)\u003c/em\u003e\n          \u003c% end %\u003e\u003cbr /\u003e\n          \u003c%= f.password_field :password, autocomplete: \"off\", class: 'form-control' %\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"field\"\u003e\n          \u003c%= f.label :password_confirmation %\u003e\u003cbr /\u003e\n          \u003c%= f.password_field :password_confirmation, autocomplete: \"off\", class: 'form-control' %\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"actions\"\u003e\n          \u003c%= f.submit \"Sign up\", class: 'btn btn-primary my-2' %\u003e\n        \u003c/div\u003e\n      \u003c% end %\u003e\n      \u003c%= render \"devise/shared/links\" %\u003e\n    \u003c/div\u003e\n```\n\n``` html\n    # app/views/devise/sessions/new.html.erb\n    \n    \u003cdiv class=\"container col-11 col-md-7 col-lg-5 bg-info login-container p-4 mt-5\"\u003e\n      \u003ch2\u003eLog in\u003c/h2\u003e\n      \u003c%= form_for(resource, as: resource_name, url: session_path(resource_name)) do |f| %\u003e\n        \u003cdiv class=\"field\"\u003e\n          \u003c%= f.label :email %\u003e\u003cbr /\u003e\n          \u003c%= f.email_field :email, autofocus: true, autocomplete: \"email\", class: 'form-control' %\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"field\"\u003e\n          \u003c%= f.label :password %\u003e\u003cbr /\u003e\n          \u003c%= f.password_field :password, autocomplete: \"off\", class: 'form-control' %\u003e\n        \u003c/div\u003e\n        \u003c% if devise_mapping.rememberable? -%\u003e\n          \u003cdiv class=\"field\"\u003e\n            \u003c%= f.check_box :remember_me %\u003e\n            \u003c%= f.label :remember_me %\u003e\n          \u003c/div\u003e\n        \u003c% end -%\u003e\n        \u003cdiv class=\"actions\"\u003e\n          \u003c%= f.submit \"Log in\", class: 'btn btn-primary my-2' %\u003e\n        \u003c/div\u003e\n      \u003c% end %\u003e\n      \u003c%= render \"devise/shared/links\" %\u003e\n    \u003c/div\u003e\n```\n\nIf you visit http://localhost:3000/users/sign_in or http://localhost:3000/users/sign_up, you’ll see our forms are still not looking pretty. Let’s change that with Bootstrap.\n\nAdd the following code to your `application.js` file, all before the last line:\n\n``` javascript\n    # app/assets/javascripts/application.js\n    \n    .....\n    //= require jquery3 # add this line\n    //= require popper # add this line\n    //= require bootstrap # add this line\n    //= require_tree .\n```\n\nRename your `application.css` file to `application.scss` and add the following styles:\n\n``` scss\n    # app/assets/stylesheets/application.scss\n    \n     @import \"bootstrap\";\n     @import url('https://fonts.googleapis.com/css?family=Dosis');\n     body {\n      font-family: 'Dosis', sans-serif;\n     }\n     .login-container {\n       border-radius: 3px;\n     }\n     .full-page {\n       height: 100vh;\n     }\n     .left {\n       overflow-y: scroll;\n       height: 86vh;\n     }\n     .active-user {\n       border-radius: 3px;\n       padding-left: 0.5rem;\n       font-weight: 900;\n       margin-right: 0.5rem;\n       .online-icon {\n         border-radius: 50%;\n         width: 0.5rem;\n         height: 0.5rem;\n       }\n     }\n     .left::-webkit-scrollbar {\n      width: 0.3rem;\n    }\n    .left::-webkit-scrollbar-thumb {\n      background: #fff3; \n    }\n```\n\nIf we reload our authentication pages now, we should be greeted with a pretty sight.\n\nIf you encounter any error related to `application.html.erb`, in `config/boot.rb`, change the ExecJS runtime from Duktape to Node.\n\n``` ruby\n    # config/boot.rb\n    ENV['EXECJS_RUNTIME'] ='Node'\n```\n\n## Building the homepage\n\nWith our authentication pages set up, let’s design our homepage. We’ll set our root page to our index file and add some HTML markup and styling to it.\n\n``` ruby\n    # config/routes.rb\n    \n    Rails.application.routes.draw do\n      get 'users/index'\n      devise_for :users\n      root 'users#index'\n      # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html\n    end\n```\n\nNext, we’ll generate our users controller and add some markup to our index page.\n\n```\n    # generate a users controller with an index view\n    $ rails g controller users index\n```\n\nIn your `index.html.erb` file, add the following code:\n\n``` html\n    # app/views/users/index.html.erb\n    \n    \u003cdiv class=\"container-fluid full-page\"\u003e\n      \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-6 col-md-3 col-lg-2 bg-dark full-page\"\u003e\n          \u003c% if user_signed_in? %\u003e\n            \u003cp class=\"text-white mt-3\"\u003eSigned in as \u003c%= current_user.username %\u003e\u003c/p\u003e\n          \u003c% end %\u003e\n          \u003ch6 class=\"text-white my-3\"\u003eOnline Users\u003c/h6\u003e\n          \u003cdiv class=\"left\"\u003e\n            \u003c% @users.each do |user| %\u003e\n              \u003c% if user.username != current_user.username and user.is_signed_in %\u003e\n                \u003cp class=\"active-user bg-white\" data-id=\"\u003c%= user.id %\u003e\"\u003e\n                  \u003cspan class=\"online-icon d-inline-block bg-success\"\u003e\u003c/span\u003e\n                  \u003cspan class=\"username\"\u003e@\u003c%= user.username %\u003e\u003c/span\u003e\n                \u003c/p\u003e\n              \u003c% end %\u003e\n            \u003c% end %\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"col-6 col-md-9 col-lg-10 bg-light full-page right py-3\"\u003e\n          \u003c%= link_to 'Log out', destroy_user_session_path, method: :delete, class: 'btn btn-warning d-inline-block float-right' %\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nLastly, we’ll add the following code to our users controller:\n\n``` ruby\n    # app/controllers/users_controller.rb\n    \n    class UsersController \u003c ApplicationController\n      def index\n        @users = User.all\n      end\n    end\n```\n\nNow you can go ahead and visit http://localhost:3000/ in the browser to see our new homepage; after you create an account.\n\n## Realtime service with Pusher\n\nDevise controls our users’ sessions via its sessions controller. For us to know when a user logs in or logs out, all we need to do is publish the events via Pusher. This way, we can subscribe to them and update the client side of our application.\n\nFirst, let’s initialize our Pusher client. In the `config/initializers` folder, create a `pusher.rb` file and add the following code:\n\n``` ruby\n    # config/initializers/pusher.rb\n    \n    require 'pusher'\n    Pusher.app_id = ENV[\"PUSHER_APP_ID\"]\n    Pusher.key = ENV[\"PUSHER_KEY\"]\n    Pusher.secret = ENV[\"PUSHER_SECRET\"]\n    Pusher.cluster = ENV[\"PUSHER_CLUSTER\"]\n    Pusher.logger = Rails.logger\n    Pusher.encrypted = true\n```\n\nNext, run `figaro install` in your terminal. It will generate an `application.yml` file. In the `application.yml` file add your Pusher keys:\n\n``` yamls\n    # config/application.yml\n    \n    PUSHER_APP_ID: 'xxxxxx'\n    PUSHER_KEY: 'xxxxxxxxxxxxxxxxx'\n    PUSHER_SECRET: 'xxxxxxxxxxxxxx'\n    PUSHER_CLUSTER: 'xx'\n```\n\nWith our Pusher client set up, let’s create a sessions controller that extends the Devise session controller. In your terminal, run the following command:\n\n```\n    # generate a sessions controller\n    $ rails generate controller sessions\n```\n\nIn the sessions controller, add the following code:\n\n``` ruby\n    # app/controllers/sessions_controller.rb\n    \n    class SessionsController \u003c Devise::SessionsController\n      after_action :notify_pusher_login, only: :create\n      before_action :notify_pusher_logout, only: :destroy\n      \n      def notify_pusher_login\n        user = User.find(current_user.id)\n        user.update(is_signed_in: true)\n        notify_pusher 'login'\n      end\n      \n      def notify_pusher_logout\n        user = User.find(current_user.id)\n        user.update(is_signed_in: false)\n        notify_pusher 'logout'\n      end\n      \n      def notify_pusher(activity_type)\n        Pusher.trigger('activity', activity_type, current_user.as_json)\n      end\n    end\n```\n\nIn the code above, we have two callbacks;  an `after_action` for after a user logs in and a `before_action`  for before a user logs out. In both callbacks, we update the user’s `is_signed_in` status and notify Pusher.\n\nNow, let’s inform Devise of our new sessions controller. In your routes file, add the following code:\n\n``` ruby\n    # config/routes.rb\n    \n    Rails.application.routes.draw do\n      get 'users/index'\n      devise_for :users, :controllers =\u003e { :sessions =\u003e \"sessions\" } # update this line\n      root 'users#index'\n    end\n```\n\nLastly, in our app, after a new user signup, users are automatically logged in. So we need to also publish login events whenever a there is a new signup. Let’s update our user model to achieve this:\n\n``` ruby\n    # app/models/user.rb\n    \n    class User \u003c ApplicationRecord\n      # Include default devise modules. Others available are:\n      # :confirmable, :lockable, :timeoutable and :omniauthable\n      validates :username, presence: :true, uniqueness: { case_sensitive: false }\n      validates :is_signed_in, inclusion: [true, false]\n      devise :database_authenticatable, :registerable,\n             :recoverable, :rememberable, :trackable, :validatable\n      after_create :notify_pusher # add this line\n      \n      def notify_pusher # add this method\n        Pusher.trigger('activity', 'login', self.as_json)\n      end\n      \n      def as_json(options={}) # add this method\n        super(\n          only: [:id, :email, :username]\n        )\n      end\n    end\n```\n\n## Updating the UI\n\nNow that Pusher is aware of users’ log in and log out, all we need to do is to subscribe to the event and make the necessary changes to the DOM.\nRename your `users.coffee` file to `users.coffee.erb` and add the following code:\n\n``` ruby\n    # app/assets/javascripts/users.coffee.erb\n    \n    $(document).ready =\u003e\n      \u003c%# function for adding a user to the DOM when they log in %\u003e\n      addLoggenInUser = (user) -\u003e\n        $('.left').append \"\"\"\n          \u003cp class=\"active-user bg-white\" data-id=\"#{user.id}\"\u003e\n            \u003cspan class=\"online-icon d-inline-block bg-success\"\u003e\u003c/span\u003e\n            \u003cspan class=\"username\"\u003e@#{user.username}\u003c/span\u003e\n          \u003c/p\u003e\n        \"\"\"\n        return\n      \u003c%# function for removing a user from the DOM when they log out %\u003e\n      removeLoggedOutUser = (user) -\u003e\n        user = $ 'p[data-id=\\'' + user.id + '\\']'\n        $(user).remove()\n        return\n      \n      \u003c%# subscribe our Pusher client to the activity channel and if there's a login or logout event, call the necessary function %\u003e\n      pusher = new Pusher('\u003c%= ENV[\"PUSHER_KEY\"] %\u003e',\n        cluster: '\u003c%= ENV[\"PUSHER_CLUSTER\"] %\u003e'\n        encrypted: true)\n      channel = pusher.subscribe('activity')\n      channel.bind 'login', (data) -\u003e\n        addLoggenInUser data\n      channel.bind 'logout', (data) -\u003e\n        removeLoggedOutUser data\n        return\n      return\n```\n\nIn the code above, we subscribed our Pusher client to the `activity` channel and listened to the `login` and `logout` event. Whenever those events are broadcast, we call the appropriate function to manipulate the DOM.\n\n\n## Bringing it all together\n\nRestart the development server if it is currently running. Visit http://localhost:3000 in two separate incognito browser tabs to test the app. You should see users appear and disappear from the sidebar in realtime as they log in and logout.\n\n\n## Conclusion\n\nIn this post, we have successfully created an app to monitor the online presence of users. I hope you found this tutorial helpful and would love to apply the knowledge gained here to easily set up your own application using Pusher.\nYou can find the source code for the demo app on [GitHub](https://github.com/9jaswag/pusher-online-presence).","metaTitle":"Track online presence in a Ruby on Rails app","metaDescription":"This tutorial uses Ruby on Rails and PostgreSQL to create a simple Ruby app featuring: user signup and login, and a dashboard where users are alerted when a new user logs in."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1t5xDkQoFKSEcG6K0ea8Me","type":"Entry","createdAt":"2018-05-03T10:23:02.317Z","updatedAt":"2019-01-02T15:31:47.504Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app with sentiment analysis using Next.js","url":"chat-sentiment-analysis-nextjs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/realtime-chat-with-sentiment","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-05-02","description":"Use Next.js to build a chat app featuring sentiment analysis to track users' moods. ","prerequisite":"To follow this tutorial you will need Node and either npm or Yarn installed on your machine.","content":"Realtime applications have been around for quite a long time as we can see in contexts such as multi-player games, realtime collaboration services, instant messaging services, realtime data analytics tools, to mention a few. As a result, several technologies have been developed over the years to tackle and simplify some of the most challenging aspects of building apps that are sensitive to changes in realtime.\n\nIn this tutorial, we’ll build a very simple realtime chat application with sentiments. With sentiment analysis, we will be able to detect the mood of a person based on the words they use in their chat messages.\n\n\n## Prerequisites\n\nBefore you begin, ensure that you have Node and npm or Yarn installed on your machine. Here is a run-down of the core technologies we will be using.\n\n\n1. [**Next.js**](https://learnnextjs.com/) - A framework for building server-side rendered(SSR) React applications with ease. It handles most of the challenges that come with building SSR React apps.\n\n\n2. [**Pusher**](https://pusher.com/) - Pusher is a technology for building apps with varying realtime needs like push notifications and pub/sub messaging. It is the engine behind the realtime ability of our comments widget.\n\n\n3. [**Sentiment**](https://github.com/thisandagain/sentiment) - Sentiment is a module that uses the [AFINN-165](http://www2.imm.dtu.dk/pubdb/views/publication_details.php?id=6010) wordlist and [Emoji Sentiment Ranking](http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0144296) to perform [sentiment analysis](http://en.wikipedia.org/wiki/Sentiment_analysis) on arbitrary blocks of input text.\n\n\n4. [**React**](https://reactjs.org/) - A very popular JavaScript DOM rendering framework for building scalable web applications using a component-based architecture.\n\nA few other libraries will be used as we will see in a moment. Also ensure that you have [Node](https://nodejs.org/) installed on your machine.\n\n\n### Installing dependencies\n\nCreate a new directory for the application and run the following command to install the required dependencies for the app.\n\n```\n    # Create a new directory\n    mkdir realtime-chat-app\n    \n    # cd into the new directory\n    cd realtime-chat-app\n    \n    # Initiate a new package and install app dependencies\n    npm init -y\n    \n    npm install react react-dom next pusher pusher-js sentiment\n    npm install express body-parser cors dotenv axios\n```\n\n### Setting environment variables\n\nCreate a new application on your [Pusher Dashboard](https://dashboard.pusher.com/) to get your application credentials. Create a `.env` file in the root directory of your application and add your application credentials as follows.\n\n```\n    PUSHER_APP_ID=YOUR_APP_ID\n    PUSHER_APP_KEY=YOUR_APP_KEY\n    PUSHER_APP_SECRET=YOUR_APP_SECRET\n    PUSHER_APP_CLUSTER=YOUR_APP_CLUSTER\n```\n\nEnsure that you use the same variable names as specified in the above snippet. We will make reference to them at several points in our code.\n\nNext create a Next.js configuration file named `next.config.js` in the root directory of your application with the following content:\n\n``` javascript\n    /* next.config.js */\n    \n    const webpack = require('webpack');\n    require('dotenv').config();\n    \n    module.exports = {\n      webpack: config =\u003e {\n        const env = Object.keys(process.env).reduce((acc, curr) =\u003e {\n          acc[`process.env.${curr}`] = JSON.stringify(process.env[curr]);\n          return acc;\n        }, {});\n        \n        config.plugins.push(new webpack.DefinePlugin(env));\n        \n        return config;\n      }\n    };\n```\n\nSince Next.js uses [Webpack](https://webpack.js.org/) in the background for module loading and bundling, we are simply configuring Webpack to be able to provide the environment variables we have defined and make them available to our React components by accessing the `process.env` object.\n\n\n## Getting started\n\n### Setting up the server\n\nWe will go ahead to set up a simple server using Next.js to wrap an [Express](https://expressjs.com/) application server. We will also load the necessary middlewares for the Express server and then we will configure Pusher using the credentials we added to our environment variables.\n\nCreate a `server.js` file in the root directory of your application and add the following code snippet to it to set up the server:\n\n``` javascript\n    /* server.js */\n    \n    const cors = require('cors');\n    const next = require('next');\n    const Pusher = require('pusher');\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const dotenv = require('dotenv').config();\n    const Sentiment = require('sentiment');\n    \n    const dev = process.env.NODE_ENV !== 'production';\n    const port = process.env.PORT || 3000;\n    \n    const app = next({ dev });\n    const handler = app.getRequestHandler();\n    const sentiment = new Sentiment();\n    \n    // Ensure that your pusher credentials are properly set in the .env file\n    // Using the specified variables\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      encrypted: true\n    });\n    \n    app.prepare()\n      .then(() =\u003e {\n      \n        const server = express();\n        \n        server.use(cors());\n        server.use(bodyParser.json());\n        server.use(bodyParser.urlencoded({ extended: true }));\n        \n        server.get('*', (req, res) =\u003e {\n          return handler(req, res);\n        });\n        \n        server.listen(port, err =\u003e {\n          if (err) throw err;\n          console.log(`\u003e Ready on http://localhost:${port}`);\n        });\n        \n      })\n      .catch(ex =\u003e {\n        console.error(ex.stack);\n        process.exit(1);\n      });\n```\n\n### Modify npm scripts\n\nFinally, we will modify the `\"scripts\"` section of the `package.json` file to look like the following snippet:\n\n``` json\n    /* package.json */\n    \n    \"scripts\": {\n      \"dev\": \"node server.js\",\n      \"build\": \"next build\",\n      \"start\": \"NODE_ENV=production node server.js\"\n    }\n```\n\nWe have gotten all we need to start building our app components. If you run the command `npm run dev` on your terminal now, it will start up the application server on port `3000` if it is available. However, nothing happens on the browser yet, because we have not built any index page component. Let’s start building the app components.\n\n\n## Building the index page\n\nNext.js requires that you create the page components of your app in a `pages` directory. We will go ahead and create a `pages` directory in our app root directory and create a new `index.js` file inside it for the index page of our application.\n\nBefore we add content to the index page, we will build a `Layout` component that can be used in our app pages as a kind of template. Go ahead and create a `components` directory in your app root. Create a new `Layout.js` file inside the just created `components`  directory with the following content:\n\n``` javascript\n    /* components/Layout.js */\n    \n    import React, { Fragment } from 'react';\n    import Head from 'next/head';\n    \n    const Layout = props =\u003e (\n      \u003cFragment\u003e\n        \u003cHead\u003e\n          \u003cmeta charSet=\"utf-8\" /\u003e\n          \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" /\u003e\n          \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossOrigin=\"anonymous\" /\u003e\n          \u003ctitle\u003e{props.pageTitle || 'Realtime Chat'}\u003c/title\u003e\n        \u003c/Head\u003e\n        {props.children}\n      \u003c/Fragment\u003e\n    );\n    \n    export default Layout;\n```\n\nHere, we try not to do so much. We are simply using the `next/head` component to add meta information to the `\u003chead\u003e` of our pages. We have also added a link to the Bootstrap CDN file to add some default styling to our app. We are also setting the page title dynamically from props and rendering the page contents using `{props.children}`.\n\nNow let's go ahead and add content to the `index.js` file we created earlier:\n\n``` javascript\n    /* pages/index.js */\n    \n    import React, { Component } from 'react';\n    import Layout from '../components/Layout';\n    \n    class IndexPage extends Component {\n    \n      state = { user: null }\n      \n      handleKeyUp = evt =\u003e {\n        if (evt.keyCode === 13) {\n          const user =  evt.target.value;\n          this.setState({ user });\n        }\n      }\n      \n      render() {\n        const { user } = this.state;\n        \n        const nameInputStyles = {\n          background: 'transparent',\n          color: '#999',\n          border: 0,\n          borderBottom: '1px solid #666',\n          borderRadius: 0,\n          fontSize: '3rem',\n          fontWeight: 500,\n          boxShadow: 'none !important'\n        };\n        \n        return (\n          \u003cLayout pageTitle=\"Realtime Chat\"\u003e\n          \n            \u003cmain className=\"container-fluid position-absolute h-100 bg-dark\"\u003e\n            \n              \u003cdiv className=\"row position-absolute w-100 h-100\"\u003e\n              \n                \u003csection className=\"col-md-8 d-flex flex-row flex-wrap align-items-center align-content-center px-5\"\u003e\n                  \u003cdiv className=\"px-5 mx-5\"\u003e\n                  \n                    \u003cspan className=\"d-block w-100 h1 text-light\" style={{marginTop: -50}}\u003e\n                      {\n                        user\n                          ? (\u003cspan\u003e\n                              \u003cspan style={{color: '#999'}}\u003eHello!\u003c/span\u003e {user}\n                            \u003c/span\u003e)\n                          : `What is your name?`\n                      }\n                    \u003c/span\u003e\n                    \n                    { !user \u0026\u0026 \u003cinput type=\"text\" className=\"form-control mt-3 px-3 py-2\" onKeyUp={this.handleKeyUp} autoComplete=\"off\" style={nameInputStyles} /\u003e }\n                    \n                  \u003c/div\u003e\n                \u003c/section\u003e\n                \n                \u003csection className=\"col-md-4 position-relative d-flex flex-wrap h-100 align-items-start align-content-between bg-white px-0\"\u003e\u003c/section\u003e\n                \n              \u003c/div\u003e\n              \n            \u003c/main\u003e\n            \n          \u003c/Layout\u003e\n        );\n      }\n      \n    }\n    \n    export default () =\u003e (\n      \u003cIndexPage /\u003e\n    );\n```\n\nWe created a component `IndexPage` for the index page of our app. We initialized the state of the component with an empty `name` property. The `name` property is meant to contain the name of the currently active user.\n\nWe also added an input field to receive the name of the user, if no user is currently active. Once the input field is filled and the `enter` or `return` key is pressed, the name supplied is stored in state.\n\nIf we test the app on our browser now, we should see a screen that looks like the following screenshot.\n\n![chat-app-next-sentiments-demo-1](//images.ctfassets.net/1es3ne0caaid/2SRn4engGQ8OIEGyeYiSY6/a7d2a8c46437edb1b0950479689d61df/chat-app-next-sentiments-demo-1.png)\n\n## Building the Chat component\n\nWe will go ahead and build the chat component. Create a new `Chat.js` file inside the `components` directory and add the following content:\n\n``` javascript\n    /* components/Chat.js */\n    \n    import React, { Component, Fragment } from 'react';\n    import axios from 'axios';\n    import Pusher from 'pusher-js';\n    \n    class Chat extends Component {\n    \n      state = { chats: [] }\n      \n      componentDidMount() {\n      \n        this.pusher = new Pusher(process.env.PUSHER_APP_KEY, {\n          cluster: process.env.PUSHER_APP_CLUSTER,\n          encrypted: true\n        });\n        \n        this.channel = this.pusher.subscribe('chat-room');\n        \n        this.channel.bind('new-message', ({ chat = null }) =\u003e {\n          const { chats } = this.state;\n          chat \u0026\u0026 chats.push(chat);\n          this.setState({ chats });\n        });\n        \n        this.pusher.connection.bind('connected', () =\u003e {\n          axios.post('/messages')\n            .then(response =\u003e {\n              const chats = response.data.messages;\n              this.setState({ chats });\n            });\n        });\n        \n      }\n      \n      componentWillUnmount() {\n        this.pusher.disconnect();\n      }\n      \n    }\n    \n    export default Chat;\n```\n\nHere is a simple break down of what we've done:\n\n\n1. We first initialized the state to contain an empty `chats` array property. This `chats` property will be populated with chat messages as they keep coming. When the component mounts, we set up a Pusher connection and `channel` subscription inside the `componentDidMount()` lifecycle method.\n\n2. You can see that we are subscribing to a Pusher channel called `chat-room` for our chat application. We are then binding to the `new-message` event on the channel, which is triggered when a new chat message comes in. Next, we simply populate the state `chats` property by appending the new chat.\n\n3. Also, on the `componentDidMount()` method, we are binding to the `connected` event on the Pusher client, when it is freshly connected, to fetch all the chat messages from history by making a `POST /messages` HTTP request using the `axios` library. Afterwards, we populate the state `chats` property with the chat messages received in the response.\n\nThe `Chat` component is not completed yet. We still need to add a `render()` method. Let’s do that quickly. Add the following snippet to the `Chat` component class.\n\n``` javascript\n    /* components/Chat.js */\n      \n    handleKeyUp = evt =\u003e {\n      const value = evt.target.value;\n      \n      if (evt.keyCode === 13 \u0026\u0026 !evt.shiftKey) {\n        const { activeUser: user } = this.props;\n        const chat = { user, message: value, timestamp: +new Date };\n        \n        evt.target.value = '';\n        axios.post('/message', chat);\n      }\n    }\n    \n    render() {\n      return (this.props.activeUser \u0026\u0026 \u003cFragment\u003e\n      \n        \u003cdiv className=\"border-bottom border-gray w-100 d-flex align-items-center bg-white\" style={{ height: 90 }}\u003e\n          \u003ch2 className=\"text-dark mb-0 mx-4 px-2\"\u003e{this.props.activeUser}\u003c/h2\u003e\n        \u003c/div\u003e\n        \n        \u003cdiv className=\"border-top border-gray w-100 px-4 d-flex align-items-center bg-light\" style={{ minHeight: 90 }}\u003e\n          \u003ctextarea className=\"form-control px-3 py-2\" onKeyUp={this.handleKeyUp} placeholder=\"Enter a chat message\" style={{ resize: 'none' }}\u003e\u003c/textarea\u003e\n        \u003c/div\u003e\n        \n      \u003c/Fragment\u003e )\n    }\n```\n\nAs seen in the `render()` method, we require an `activeUser` prop to identify the currently active user. We also rendered a `\u003ctextarea\u003e` element for entering a chat message. We added an `onKeyUp` event handler to the `\u003ctextarea\u003e` to send the chat message when you press the `enter` or `return` button.\n\nOn the `handleKeyUp()` event handler, we construct a `chat` object containing the `user` sending the message (currently active user), the `message` itself, and then the `timestamp` for when the message was sent. We clean up the `\u003ctextarea\u003e` and then make a `POST /message` HTTP request, passing the `chat` object we created as payload.\n\nLet's add the `Chat` component to our index page. First, add the following line to the `import` statements in the `pages/index.js` file.\n\n``` javascript\n    /* pages/index.js */\n    \n    // other import statements here ...\n    import Chat from '../components/Chat';\n```\n\nNext, locate the `render()` method of the `IndexPage` component. Render the `Chat` component in the empty `\u003csection\u003e` element. It should look like the following snippet:\n\n``` javascript\n    /* pages/index.js */\n    \n    \u003csection className=\"col-md-4 position-relative d-flex flex-wrap h-100 align-items-start align-content-between bg-white px-0\"\u003e\n      { user \u0026\u0026 \u003cChat activeUser={user} /\u003e }\n    \u003c/section\u003e\n```\n\nYou can reload the app now in your browser to see the changes.\n\n\n## Defining the messaging routes\n\nFor now, nothing really happens when you try to send a chat message. You don't see any message or any chat history. This is because we have not implemented the two routes we are making requests to.\n\nWe will go ahead and create the `/message` and `/messages` routes. Modify the `server.js` file and add the following just before the call to `server.listen()` inside the `then()` callback function.\n\n``` javascript\n    /* server.js */\n    \n    // server.get('*') is here ...\n    \n    const chatHistory = { messages: [] };\n    \n    server.post('/message', (req, res, next) =\u003e {\n      const { user = null, message = '', timestamp = +new Date } = req.body;\n      const sentimentScore = sentiment.analyze(message).score;\n      \n      const chat = { user, message, timestamp, sentiment: sentimentScore };\n      \n      chatHistory.messages.push(chat);\n      pusher.trigger('chat-room', 'new-message', { chat });\n    });\n    \n    server.post('/messages', (req, res, next) =\u003e {\n      res.json({ ...chatHistory, status: 'success' });\n    });\n    \n    // server.listen() is here ...\n```\n\nFirst, we created a kind of in-memory store for our chat history, to store chat messages in an array. This is useful for new clients that join the chat room to see previous messages. Whenever the Pusher client makes a `POST` request to the `/messages` endpoint on connection, it gets all the messages in the chat history in the returned response.\n\nOn the `POST /message` route, we are fetching the chat payload from `req.body` through the help of the `body-parser` middleware we added earlier. We then use the `sentiment` module to calculate the overall sentiment score of the chat message. Next, we reconstruct the `chat` object, adding the `sentiment` property containing the sentiment score.\n\nFinally, we add the chat to the chat history `messages`, and then trigger a `new-message` event on the `chat-room` Pusher channel, passing the `chat` object in the event data. **This does the real time magic**.\n\nWe are just a few steps away from completing our chat application. If you load the app on your browser now and try sending a chat message, you don't see any feedback yet. That's not because our app is not working. **It is working perfectly**. It's simply because we are not yet rendering the chat messages on the view. Let's head on to that and finish this up.\n\n\n## Displaying the chat messages\n\nCreate a new `ChatMessage.js` file inside the `components` directory and add the following content to it.\n\n``` javascript\n    /* components/ChatMessage.js */\n    \n    import React, { Component } from 'react';\n    \n    class ChatMessage extends Component {\n    \n      render() {\n        const { position = 'left', message } = this.props;\n        const isRight = position.toLowerCase() === 'right';\n        \n        const align = isRight ? 'text-right' : 'text-left';\n        const justify = isRight ? 'justify-content-end' : 'justify-content-start';\n        \n        const messageBoxStyles = {\n          maxWidth: '70%',\n          flexGrow: 0\n        };\n        \n        const messageStyles = {\n          fontWeight: 500,\n          lineHeight: 1.4,\n          whiteSpace: 'pre-wrap'\n        };\n        \n        return \u003cdiv className={`w-100 my-1 d-flex ${justify}`}\u003e\n          \u003cdiv className=\"bg-light rounded border border-gray p-2\" style={messageBoxStyles}\u003e\n            \u003cspan className={`d-block text-secondary ${align}`} style={messageStyles}\u003e\n              {message}\n            \u003c/span\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      }\n      \n    }\n    \n    export default ChatMessage;\n```\n\nThe `ChatMessage` component is a very simple component requiring two props: `message` for the chat message and `position` for the positioning of the message - either `right` or `left`. This is useful for positioning the messages of the active user on one side and then the messages of other users on the other side as we would do in a moment.\n\nFinally, we will modify the `components/Chat.js` file to render the chat messages from the state. Make the following changes to the `Chat` component.\n\nFirst add the following constants before the class definition of the `Chat` component. Each constant is an array of the code points required for a particular sentiment emoji. **Also ensure to import the** `ChatMessage` **component**.\n\n``` javascript\n    /* components/Chat.js */\n    \n    // Module imports here ...\n    import ChatMessage from './ChatMessage';\n    \n    const SAD_EMOJI = [55357, 56864];\n    const HAPPY_EMOJI = [55357, 56832];\n    const NEUTRAL_EMOJI = [55357, 56848];\n    \n    // Chat component class here ...\n```\n\nThen, add the following snippet between the chat header `\u003cdiv\u003e` and the chat message box `\u003cdiv\u003e` we created earlier in the `Chat` component.\n\n``` javascript\n    /* components/Chat.js */\n    \n    {/** CHAT HEADER HERE **/}\n    \n    \u003cdiv className=\"px-4 pb-4 w-100 d-flex flex-row flex-wrap align-items-start align-content-start position-relative\" style={{ height: 'calc(100% - 180px)', overflowY: 'scroll' }}\u003e\n    \n      {this.state.chats.map((chat, index) =\u003e {\n      \n        const previous = Math.max(0, index - 1);\n        const previousChat = this.state.chats[previous];\n        const position = chat.user === this.props.activeUser ? \"right\" : \"left\";\n        \n        const isFirst = previous === index;\n        const inSequence = chat.user === previousChat.user;\n        const hasDelay = Math.ceil((chat.timestamp - previousChat.timestamp) / (1000 * 60)) \u003e 1;\n        \n        const mood = chat.sentiment \u003e 0 ? HAPPY_EMOJI : (chat.sentiment === 0 ? NEUTRAL_EMOJI : SAD_EMOJI);\n        \n        return (\n          \u003cFragment key={index}\u003e\n          \n            { (isFirst || !inSequence || hasDelay) \u0026\u0026 (\n              \u003cdiv className={`d-block w-100 font-weight-bold text-dark mt-4 pb-1 px-1 text-${position}`} style={{ fontSize: '0.9rem' }}\u003e\n                \u003cspan className=\"d-block\" style={{ fontSize: '1.6rem' }}\u003e\n                  {String.fromCodePoint(...mood)}\n                \u003c/span\u003e\n                \u003cspan\u003e{chat.user || 'Anonymous'}\u003c/span\u003e\n              \u003c/div\u003e\n            ) }\n            \n            \u003cChatMessage message={chat.message} position={position} /\u003e\n            \n          \u003c/Fragment\u003e\n        );\n        \n      })}\n      \n    \u003c/div\u003e\n    \n    {/** CHAT MESSAGE BOX HERE **/}\n```\n\nLet's try to understand what this code snippet is doing. First, we are going through each `chat` object in the state `chats` array property. We check if the sender of the message is the same as the currently active user and use that to determine the position of the displayed chat message. As you can see, the active user's messages will appear on the right.\n\nWe also use the `sentiment` score in the chat object to set the mood of the user while typing the message to either `happy`, `sad` or `neutral` using the earlier defined constants.\n\nWe conditionally render the `name` of the user before the chat message based on one of the following conditions being met.\n\n\n1.  `isFirst` - the current chat message is the first in the list\n\n\n2.  `!inSequence` - the current chat message directly follows a message from another user\n\n\n3.  `hasDelay` - the current chat message has a delay of over `1 minute` from the previous message of the same user\n\nAlso notice how we are using the `[String.fromCodePoint()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)` method added in ES6 to get the emoji from the code points we defined in our constants earlier.\n\nWe are finally done with our chat app. You can go ahead to test what you have built on your browser. Here are some screenshots showing a chat between **9lad**, **Steve** and **Bob**.\n\n**9lad**\n\n![chat-app-next-sentiments-demo-2](//images.ctfassets.net/1es3ne0caaid/7evikt0WTCGmASaugyOA8G/cb5a71576ccb35609b7c4afdff2acc15/chat-app-next-sentiments-demo-2.png)\n\n**Steve**\n\n![chat-app-next-sentiments-demo-3](//images.ctfassets.net/1es3ne0caaid/54OWU9Ji2QUYSiACukiyKQ/2f74370afbfee6f9860467627657d5e0/chat-app-next-sentiments-demo-3.png)\n\n**Bob**\n\n![chat-app-next-sentiments-demo-4](//images.ctfassets.net/1es3ne0caaid/4t5dgOUOuIQ8GWc6SQWs8u/0e1464d99713409f0083210dc108b8e5/chat-app-next-sentiments-demo-4.png)\n\n\n## Conclusion\n\nIn this tutorial, we have been able to build a very simple chat application with chat sentiment using [Next.js](https://learnnextjs.com/)([React](https://reactjs.org/)), [Pusher](https://pusher.com/) and [Sentiment Node](https://github.com/thisandagain/sentiment) module. While this tutorial focuses on just the basics, there are a lot of advanced stuffs you can do to make a better chat app. You can check the source code of this tutorial on [GitHub](https://github.com/christiannwamba/realtime-chat-with-sentiment).\n\nDo check the documentation for each technology we used in this project to learn more about other ways of using them. I hope that this tutorial is of help to you.","metaTitle":"Build a chat app with sentiment analysis using Next.js","metaDescription":"This brief tutorial shows you how to build a chat app with Next.js, featuring sentiment analysis that gauges and signals users' moods."}}],"defaultValue":"Channels \u0026 Online Presence","queryType":"tag","pages":2,"route":"/tutorials","query":{"product":"Channels","tag":"Online Presence"}}},"page":"/tutorials","query":{"product":"Channels","tag":"Online Presence"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=Online%20Presence by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:42:30 GMT -->
</html>