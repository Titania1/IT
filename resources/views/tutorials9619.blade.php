<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=Beams&page=3 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:43:49 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">22</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels &amp; Beams</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorials4646.html?tag=Beams" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsf471.html?product=Beams&amp;tag=Beams" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Channels &amp; Beams"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/live-blog-kotlin-push-notifications.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams</li></ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live blog in Kotlin with push notifications</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Build an Android app with Kotlin. The app connects to a Node.js server, and provides push notifications to alert users w...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/kotlin-ride-sharing-push-notifications.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Maps</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a Kotlin ride sharing app with push notifications</h3><p class="css-k12xad e5jrto45">Build a full ridesharing platform featuring realtime updates and push notifications. Use Kotlin for both the apps, and t...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-notifications.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Ruby<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">HTML<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build realtime notifications for HTML5 apps using Ruby</h3><p class="css-k12xad e5jrto45">In this tutorial, we will show you how simple it is to add realtime notifications to your web or mobiles apps with Pushe...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/updates-native-push-notifications-cordova.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Cordova<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build realtime updates and native push notifications using Cordova</h3><p class="css-k12xad e5jrto45">Build a cross-platform application with a single HTML/CSS/JS code-base with Cordova and use Pusher to implement iOS Push...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialscd46.html?product=Channels&amp;tag=Beams&amp;page=2" class="css-5s6711 edg0byb1">Prev</a><a href="tutorialsf37f.html?product=Channels&amp;tag=Beams&amp;page=1" class="css-5s6711 edg0byb1">1</a><a href="tutorialscd46.html?product=Channels&amp;tag=Beams&amp;page=2" class="css-5s6711 edg0byb1">2</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials9619.html?product=Channels&amp;tag=Beams&amp;page=3" class="css-2wakph edg0byb1">3</a><style data-emotion-css="69ho49">.css-69ho49{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#eeeeff;color:#8f87e6;cursor:not-allowed;}.css-69ho49:hover{background:#5c29db;color:white;}.css-69ho49:active{background:#5c29db;}@media all and (min-width:760px){.css-69ho49{font-size:1rem;}}.css-69ho49:hover,.css-69ho49:active{cursor:not-allowed;background:#ebeaef;color:#fffc;}</style><a href="#" disabled="" class="css-69ho49 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":22,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1DkONuEWcYoEGSisSO8ig","type":"Entry","createdAt":"2018-07-03T09:04:25.648Z","updatedAt":"2018-07-03T09:04:25.648Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live blog in Kotlin with push notifications","url":"live-blog-kotlin-push-notifications","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/kotlin-live-blog-with-push-notifications","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}}],"reviewDate":"2018-07-01","description":"Build an Android app with Kotlin. The app connects to a Node.js server, and provides push notifications to alert users when a football blog is updated.","prerequisite":"You will need Android Studio 3+, Node and npm installed on your machine. A basic knowledge of Android development, and familiarity with Android Studio, is required.","content":"## Introduction\n\nWe are definitely in the era of realtime everything. We demand that all our tools and apps we use daily should be able to update in realtime. With a lot of realtime applications springing up, the football scene is not an exception. You see popular soccer reporting bodies adopting this strategy. \n\nIn this article, you will learn how to build a live soccer blog mobile app. Here is what your app will look like after this post:\n\n![kotlin-liveblog-beams-demo](//images.ctfassets.net/1es3ne0caaid/5wqd3IR1ccukOkkekgQmu6/960adda8c7e513af7c89f33fde0b0cfa/kotlin-liveblog-beams-demo.gif)\n\n## Prerequisites\n\nFor you to move on smoothly with this tutorial, it is expected that you have the following:\n\n\n- Android Studio (\u003e= v3.0) installed on your machine. Download [here](https://developer.android.com/studio/index.html).\n- A basic knowledge of Android development and an ability to use Android Studio.\n- A basic knowledge of Kotlin programming language. [See the official docs](https://kotlinlang.org/docs/reference/).\n- Node.js and NPM installed on your machine. Check [here](https://nodejs.org/en/) for the latest releases.\n\n\n## Building your live blog app\n\n### Creating your Android app\n\nTo get started, open Android Studio and create a new basic activity project. Android Studio provides a wizard for this to guide you. While creating your app, be sure to enable Kotlin support since that is what you will use. \n\n![kotlin-liveblog-beams-create-project](//images.ctfassets.net/1es3ne0caaid/4al226nIqIoMO0Ocq82Oii/c3c5a0f0eed39dee19c30a0ba1eae1aa/kotlin-liveblog-beams-create-project.png)\n\nSelect **Phone and Tablet** using **API 19: Android 4.4 (Kitkat)**. Select the **EmptyActivity** template and create the project. After this process is complete, you should have an activity named `MainActivity` and its layout `activity_main.xml`.\n\n### Setting up Pusher Channels\n\nLog in to your [Pusher dashboard](https://dashboard.pusher.com). If you don’t have an account, create one. Your dashboard should look like this:\n\n![kotlin-liveblog-beams-create-pusher-app](//images.ctfassets.net/1es3ne0caaid/7nPd10h1x62OK8eA6YSakQ/98ce36a55d015163f626f2169441c966/kotlin-liveblog-beams-create-pusher-app.png)\n\nCreate a new Channels app. You can easily do this by clicking the big **Create new Channels app** card at the bottom right. When you create a new app, you are provided with keys. Keep them safe as you will soon need them.\n\n### Getting your FCM key\n\nBefore you can start using Beams, you need an FCM key and a google-services file because Beams relies on Firebase. Go to your [Firebase console](https://console.firebase.google.com/u/0/) and create a new project.\n\nWhen you get to the console, click the **Add project** card to initialize the app creation wizard. Add the name of the project, for example, `soccer-blog`. Read and accept the terms of conditions. After this, you will be directed to the project overview screen. Choose the **Add Firebase to your Android app** option. The next screen will require the package name of your app.\n\nAn easy way to get the package name of your app is from your `AndroidManifest.xml` file. Check the `\u003cmanifest\u003e` tag and copy the value of the `package` attribute. Another place you can find this is your app-module `build.gradle` file. Look out for the `applicationId` value. When you enter the package name and click **Register app.** Next download your `google-services.json` file. After you have downloaded the file, you can skip the rest of the process. Add the downloaded file to the app folder of your app - `name-of-project/app`.\n\nNext, go to your Firebase project settings, under the Cloud messaging tab, copy your server key.\n\n### Setting up Pusher Beams\n\nNext, log in to the new [Pusher dashboard](https://dash.pusher.com/), in here we will create a Pusher Beams instance. You should sign up if you don’t have an account yet. Click on the **Beams** button on the sidebar then click **Create**, this will launch a pop up to **Create a new Beams instance**. Name it `soccer-blog`.\n\n![kotlin-liveblog-beams-new-beams](//images.ctfassets.net/1es3ne0caaid/jvRWHnL0VqCUkqMa26ImA/9de75f79e56ba99fa0897231dcd638f5/kotlin-liveblog-beams-new-beams.png)\n\nAs soon as you create the instance, you will be presented with a quickstart guide. Select the **ANDROID** quickstart\n\n![kotlin-liveblog-beams-quickstart](//images.ctfassets.net/1es3ne0caaid/5Ef7TiLPGMy4oAs2OQOMW4/676cc584e256fca1be76de3380d80016/kotlin-liveblog-beams-quickstart.png)\n\nThe next screen requires the FCM key you copied earlier. After you add the FCM key, you can exit the quickstart guide.\n\n### Adding dependencies\n\nYou will make use of Beams for notifications and the Channels libraries for live events. Add the following to the project’s `build-gradle` file:\n\n``` gradle\n    // File: ./blog-app/build.gradle\n    buildscript {\n        // [...]\n    \n        dependencies {\n            classpath 'com.google.gms:google-services:4.0.0'\n        }\n    }\n```\n\nAnd these other dependencies to the app-module `build.gradle` file:\n\n``` gradle\n    // File: ./blog-app/app/build.gradle\n    dependencies {\n        implementation 'com.android.support:recyclerview-v7:27.1.1'\n        implementation 'com.android.support:cardview-v7:27.1.1'\n        implementation 'com.pusher:pusher-java-client:1.5.0'\n        implementation 'com.google.firebase:firebase-messaging:17.0.0'\n        implementation 'com.pusher:push-notifications-android:0.10.0'\n    }\n    \n    // Add this line to the end of the file\n    apply plugin: 'com.google.gms.google-services'\n```\n\n### Writing your app\n\nYour app is expected to display a list of posts in realtime and this means you will need a list. Each list row will contain the time of action and current action happening. Since you can’t use the default Android layouts meant for lists as it doesn’t have what you require in the customized fashion you want it, we have to create a custom list row layout. This layout will determine how each item in the list will look like. \n\nCreate a new layout file, name it `list_row.xml` and paste this:\n\n``` xml\n    \u003c!-- File: /blog-app/app/src/main/res/layout/list_row.xml --\u003e\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.v7.widget.CardView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        app:cardCornerRadius=\"10dp\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_margin=\"15dp\"\u003e\n    \n        \u003cLinearLayout\n            android:layout_width=\"match_parent\"\n            android:orientation=\"horizontal\"\n            android:padding=\"10dp\"\n            android:layout_height=\"match_parent\"\u003e\n    \n            \u003cTextView\n                android:textColor=\"@android:color/black\"\n                android:layout_gravity=\"center\"\n                android:id=\"@+id/time\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:textSize=\"18sp\"/\u003e\n    \n            \u003cTextView\n                android:id=\"@+id/currentActivity\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginStart=\"10dp\"\n                android:textSize=\"18sp\" /\u003e\n    \n        \u003c/LinearLayout\u003e\n    \u003c/android.support.v7.widget.CardView\u003e\n```\n\nA `CardView` is here used for easy customization of the borders. The `CardView` contains a horizontal linear layout, which in turn contains two `TextView`s. The first `TextView` will show the minute during the match when an event is happening and the second one will show the event happening.\n\nNext, you need a class to mock the kind of data you want to send to each row. Create a data class named `BlogPostModel` and paste this:\n\n``` kotlin\n    // File: /blog-app/app/src/main/java/com/example/soccerliveblog/BlogPostModel.kt\n    data class BlogPostModel(var time:String, var currentActivity:String)\n```\n\nNext, you will need a recycler view adapter to manage items in the recycler view. Create a class `BlogListAdapter` and set it up like this:\n\n``` kotlin\n    // File: /blog-app/app/src/main/java/com/example/soccerliveblog/BlogListAdapter.kt\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.TextView\n    \n    class BlogListAdapter : RecyclerView.Adapter\u003cBlogListAdapter.ViewHolder\u003e() {\n    \n        private var blogList = ArrayList\u003cBlogPostModel\u003e()\n    \n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n            return ViewHolder(LayoutInflater.from(parent.context)\n                    .inflate(R.layout.list_row, parent, false))\n        }\n    \n        override fun onBindViewHolder(holder: ViewHolder, position: Int) = holder.bind(blogList[position])\n    \n        override fun getItemCount(): Int = blogList.size\n    \n        fun addItem(blogItem:BlogPostModel){\n            blogList.add(0,blogItem)\n            notifyDataSetChanged()\n        }\n    \n        inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n    \n            private val time: TextView = itemView.findViewById(R.id.time)\n            private val currentActivity: TextView = itemView.findViewById(R.id.currentActivity)\n    \n            fun bind(currentValue: BlogPostModel) = with(itemView) {\n                time.text = currentValue.time\n                currentActivity.text = currentValue.currentActivity\n            }\n        }\n    }\n```\n\nThis class contains the usual `RecyclerView.Adapter` methods. There are two custom functions created here, `addItem` to add a new blog post item to the top of the list and `bind` inside the `ViewHolder` class to make binding easier.\n\nNext thing you would consider is how you will receive and display notifications in the app. You will create a service for that. Services are one of the key components in Android development. A service is a component that runs in the background to perform long-running operations without needing to interact with the user and it works even if application is destroyed. Create a new class named `NotificationsMessagingService` and paste this:\n\n``` kotlin\n    // File: /blog-app/app/src/main/java/com/example/soccerliveblog/NotificationsMessagingService.kt\n    import android.app.NotificationChannel\n    import android.app.NotificationManager\n    import android.app.PendingIntent\n    import android.content.Intent\n    import android.os.Build\n    import android.support.v4.app.NotificationCompat\n    import com.google.firebase.messaging.RemoteMessage\n    import com.pusher.pushnotifications.fcm.MessagingService\n    \n    class NotificationsMessagingService : MessagingService() {\n    \n        override fun onMessageReceived(remoteMessage: RemoteMessage) {\n            val notificationId = 10\n            val channelId  = \"soccer-channel\"\n            val notificationManager = applicationContext.getSystemService(NotificationManager::class.java)\n            \n            lateinit var channel:NotificationChannel\n    \n            if (Build.VERSION.SDK_INT \u003e= Build.VERSION_CODES.O) {\n                val name = getString(R.string.channel_name)\n                val description = getString(R.string.channel_description)\n                val importance = NotificationManager.IMPORTANCE_DEFAULT\n                channel = NotificationChannel(\"world-cup\", name, importance)\n                channel.description = description\n                notificationManager!!.createNotificationChannel(channel)\n            }\n    \n            val intent = Intent(this, MainActivity::class.java)\n            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK\n            val pendingIntent = PendingIntent.getActivity(this, 0, intent, 0)\n    \n            val mBuilder = NotificationCompat.Builder(this, channelId)\n                    .setSmallIcon(R.mipmap.ic_launcher)\n                    .setContentTitle(remoteMessage.notification!!.title!!)\n                    .setContentText(remoteMessage.notification!!.body!!)\n                    .setContentIntent(pendingIntent)\n                    .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n                    .setAutoCancel(true)\n    \n            notificationManager.notify(notificationId, mBuilder.build())\n    \n        }\n    }\n```\n\nThis class implements the `MessagingService` abstract class. This mandates the implementation of the method `onMessageReceived`, which is called when a message is pushed remotely. From the snippet, when a message is received, a notification is prepared and sent to the user. \n\nNote that if the user is on the app already, this notification will not come up. API versions 26 and above require creating notification channels and that is exactly what is done above. The title and body of the notification are inline with what is received remotely. An intent is added so that the `MainActivity` will be opened when the notification is selected.\n\nAdd these strings to your `strings.xml` file as they were referenced in the previous snippet:\n\n``` xml\n    \u003cstring name=\"channel_name\"\u003esoccer\u003c/string\u003e\n    \u003cstring name=\"channel_description\"\u003eListen to soccer notifications\u003c/string\u003e\n```\n\nNext, you add the service in your `AndroidManifest.xml` file under the `\u003capplication\u003e` tag like this:\n\n``` xml\n    \u003c!-- /blog-app/app/src/main/AndroidManifest.xml --\u003e\n    \u003capplication\n      \n      [...]\n      \n      \u003cservice android:name=\".NotificationsMessagingService\"\u003e\n          \u003cintent-filter android:priority=\"1\"\u003e\n              \u003caction android:name=\"com.google.firebase.MESSAGING_EVENT\" /\u003e\n          \u003c/intent-filter\u003e\n      \u003c/service\u003e\n      \n      [...]\n      \n    \u003c/application\u003e\n```\n\nWith this, you are ready to receive notifications remotely to your app. Next replace the contents of the `activity_main.xml` file with the following:\n\n``` xml\n    \u003c!-- File: /blog-app/app/src/main/res/layout/activity_main.xml --\u003e\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\".MainActivity\"\u003e\n    \n        \u003candroid.support.v7.widget.RecyclerView\n            android:id=\"@+id/recyclerViewBlogPosts\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintLeft_toLeftOf=\"parent\"\n            app:layout_constraintRight_toRightOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\" /\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nNow, go the `MainActivity` class and make sure you have these imports in the class:\n\n``` kotlin\n    // File: /blog-app/app/src/main/java/com/example/soccerliveblog/MainActivity.kt\n    import android.os.Bundle\n    import android.support.v7.app.AppCompatActivity\n    import android.support.v7.widget.LinearLayoutManager\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import com.pusher.pushnotifications.PushNotifications\n    import kotlinx.android.synthetic.main.activity_main.*\n    import org.json.JSONObject\n```\n\nThe rest of the class should then look like this:\n\n``` kotlin\n    class MainActivity : AppCompatActivity() {\n    \n        private lateinit var pusher: Pusher\n        private val blogListAdapter = BlogListAdapter()\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_main)\n            PushNotifications.start(applicationContext,\n                    PUSHER_BEAMS_INSTANCEID)\n            PushNotifications.subscribe(\"world-cup\")\n            with(recyclerViewBlogPosts){\n                layoutManager = LinearLayoutManager(this@MainActivity)\n                adapter = blogListAdapter\n            }\n            setupPusher()\n        }\n    }\n```\n\n\u003e You are expected to replace the `PUSHER_BEAMS_INSTANCEID` with your instance ID found on your Pusher Beams dashboard.\n\nIn the above snippet, the `pusher` and `blogListAdapter` instance are first declared. In the `onCreate` method, push notifications is initialized and you are particularly listening to the world-cup stream for updates. \n\nNext, you have initialized the recycler view with a linear layout manager and an adapter. Finally, a `setupPusher` function is called. Add the function below to the class:\n\n``` kotlin\n    private fun setupPusher() {\n        val options = PusherOptions()\n        options.setCluster(PUSHER_CLUSTER)\n        pusher = Pusher(PUSHER_API_KEY, options)\n    \n        val channel = pusher.subscribe(\"soccer\")\n    \n        channel.bind(\"world-cup\") { channelName, eventName, data -\u003e\n            val jsonObject = JSONObject(data)\n            val time = jsonObject.getString(\"currentTime\")\n            val currentActivity = jsonObject.getString(\"currentPost\")\n            val model = BlogPostModel(time,currentActivity)\n            runOnUiThread {\n                blogListAdapter.addItem(model)\n            }\n        }\n        \n        pusher.connect()\n    }\n```\n\n\u003e Replace the `PUSHER_CLUSTER` and `PUSHER_API_KEY` with their equivalent values from your dashboard\n\nIn the above snippet, there is a listener to the soccer channel and the world-cup event. When a post is received, it is bound to a new model instance before it being added to the adapter.\n\nFinally, give the activity a `singleInstance` launch mode so that when you open the `MainActivity` from the notification, it won’t restart the activity. To do this, open the `AndroidManifest.xml`  file and add the `android:launchMode` attribute to the `activity` tag and set it to `singleInstance`:\n\n``` xml\n    \u003cactivity android:name=\".MainActivity\"\n        android:launchMode=\"singleInstance\"\n        ...\n    \u003c/activity\u003e\n```\n\n## Building the backend\n\nLet’s build a simple Node.js server to power our app. Create a new folder say `beams-backend`. Open the folder. Create a new `config.js` file like this:\n\n``` javascript\n    module.exports = {\n        appId: 'PUSHER_APP_ID',\n        key: 'PUSHER_APP_KEY',\n        secret: 'PUSHER_APP_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n        secretKey: 'PUSHER_BEAMS_SECRET',\n        instanceId: 'PUSHER_BEAMS_INSTANCEID'\n    };\n```\n\n\u003e Replace the first four items with the keys on you Pusher Channel dashboard while the last two keys will be replaced with the keys on your Pusher Beams dashboard\n\nThis file holds the keys you will access. It is good practice to keep them all in one file. Next up, create a another file named `index.js` and paste this:\n\n``` javascript\n    // Load the required libraries\n    let Pusher = require('pusher');\n    let express = require('express');\n    let bodyParser = require('body-parser');\n    const PushNotifications = require('@pusher/push-notifications-server');\n    \n    // initialize express and pusher and pusher beams\n    let app = express();\n    let pusher = new Pusher(require('./config.js'));\n    let pushNotifications = new PushNotifications(require('./config.js'))\n    \n    // Middlewares\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    app.get('/posts', (req, res) =\u003e {\n    \n      var arrayEvents = [\n          \"Russia (4-2-3-1): Igor Akinfeev; Mario Fernandes, Ilya Kutepov, Sergey Ignashevich, Yury Zhirkov; Yuri Gazinskiy, Roman Zobnin; Aleksandr Samedov, Alan Dzagoev, Aleksandr Golovin; Fedor Smolov.\",\n        \"Finally, the festival of football is here. We've got 64 games, 32 teams...but there can be only one winner. And the action starts today!!\",\n          \"Hello and welcome to live text commentary of the Group A match between Russia and Saudi Arabia at the 2018 World Cup in Russia. The scene is set for the tournament opener!\"\n      ];\n    \n      var arrayTime = [\"15'\", \"10'\", \"5'\"];\n    \n      let sendPushNotification = () =\u003e {\n        var currentPost = arrayEvents.pop()\n        var currentTime = arrayTime.pop()\n      \n        pushNotifications.publish(\n          ['world-cup'],{\n          fcm: {\n            notification: {\n              title: 'New post',\n              body: currentPost\n            }\n          }\n        }).then((publishResponse) =\u003e {\n          console.log('Just published:', publishResponse.publishId);\n        });\n      \n        pusher.trigger('soccer', 'world-cup', {currentTime, currentPost});\n      }\n      \n      sendPushNotification()\n    \n      let sendToPusher = setInterval(() =\u003e {\n        sendPushNotification()\n      \n        if (arrayEvents.length == 0) {\n          clearInterval(sendToPusher)\n        }\n      }, 5000);\n    \n      res.json({success: 200})\n    });\n    \n    // index\n    app.get('/', (req, res) =\u003e res.json(\"It works!\"));\n    \n    // serve app\n    app.listen(4000, _ =\u003e console.log('App listening on port 4000!'));\n```\n\n\u003e These commentaries were gotten manually from Goal.com’s commentary blog for the opening match at the FIFA World Cup 2018 (Russia vs Saudi Arabia)\n  \n\nIn this snippet, there is one endpoint, the `/posts` endpoint, which sends data to the Pusher channel and a notification channel every twenty seconds. The data is gotten from an array initialized locally. The app is then served on port `4000`. In the `beams-backend` directory, run the following commands:\n\n```\n    npm install pusher\n    npm install body-parser\n    npm install @pusher/push-notifications-server express --save\n```\n\nThis installs the three dependencies you need for your app. Now, your server is ready, run this command in the `beams-backend` directory:\n\n```\n    node index.js\n```\n\nNext, run the application from Android Studio, then open the URL `http://localhost:4000/posts` in your browser and you should start receiving live updates in your app.\n\n## Conclusion\n\nIn this post, you have learned how to build a blog app using Kotlin, Pusher Beams, and Pusher Channels. Feel free to fall back to the [GitHub repository](https://github.com/neoighodaro/kotlin-live-blog-with-push-notifications) if you get stuck at any point. I can’t wait to see what you will build with your knowledge of a realtime service like Pusher.","metaTitle":"Build a live blog in Kotlin with push notifications","metaDescription":"Use push notifications to create a live blog app. Create an Android app using Kotlin, with a Node.js server."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1Uu3pPdHlSYmsksQ6WSowE","type":"Entry","createdAt":"2018-07-02T13:19:07.613Z","updatedAt":"2018-07-02T13:19:07.613Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a Kotlin ride sharing app with push notifications","url":"kotlin-ride-sharing-push-notifications","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5XNUJSocQo6scKsiMs2Iko","type":"Entry","createdAt":"2018-02-14T13:34:52.032Z","updatedAt":"2018-02-14T13:34:52.032Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Graham Cox","url":"graham-cox","email":"graham@grahamcox.co.uk","twitter":"https://twitter.com/grahamcox82","github":"https://github.com/sazzer","guestWriter":true}}],"projectRepo":"https://github.com/sazzer/pusher-ridesharing","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}}],"reviewDate":"2018-06-29","description":"Build a full ridesharing platform featuring realtime updates and push notifications. Use Kotlin for both the apps, and the backed, along with Spring Boot.","prerequisite":"You need suitable IDEs, including Android Studio. The tutorial assumes you have some experience with Android development.","content":"## Introduction\n\nMany user facing applications can be greatly improved by introducing realtime notifications for the user. This is especially important when the user is actively waiting for a service to arrive. \n\nIn this article we are going to build a ride sharing app. There are two parts to this app, both of which will take advantage of the Pusher Beams functionality. \n\nOn the Driver side, we will have an Android application that receives a notification when a new job comes up, when the job is no longer available and when the job has finished with the rating from the rider.\n\nOn the Rider side, we will also have an Android application that allows the user to request a car from their current location to a target location, gives regular notifications when the car is en-route to pick up and gives the ability to rate the driver when the ride is finished.\n\n![kotlin-ridesharing-demo](//images.ctfassets.net/1es3ne0caaid/6RBtbLD3JCimAcaw48UMqq/2da3756854a334305b1c4bc8786e8d03/kotlin-ridesharing-demo.gif)\n\n## Prerequisites\n\nIn order to follow along, you will need some experience with the Kotlin programming language, which we are going to use for both the backend and frontend of our application. \n\nYou will also need appropriate IDEs. We suggest [IntelliJ IDEA](https://www.jetbrains.com/idea/) and [Android Studio](https://developer.android.com/studio/index.html). Finally, you will need a free [Pusher Account](https://dash.pusher.com/authenticate/register?ref=pn-landing-page). Sign up now if you haven’t already done so.\n\nIt is also assumed that you know how to use the IDEs that you are working with, including interacting with either an emulated or physical mobile device for running the applications.\n\n## Setting up your Pusher account\n\nIn order to use the Beams API and SDKs from Pusher, you need to create a new Beams instance in the [Pusher Beta Dashboard](https://dash.pusher.com/authenticate/register?ref=pn-social-network-android).\n\nNext, on your **Overview** for your Beams instance, click **Open Quickstart** to add your Firebase Cloud Messaging (FCM) Server Key to the Beams Instance. \n\nAfter saving your FCM key, you can finish the Quickstart wizard by yourself to send your first push notification, or just continue as we’ll cover this below.\n\nIt’s important to make sure that you download and keep the `google-services.json` file from the Firebase Console as we are going to need this later on. \n\nOnce you have created your Beams instance, you will also need to note down your **Instance Id** and **Secret Key** from the Pusher Dashboard, found under the **CREDENTIALS** section of your Instance settings.\n\n## Overall architecture\n\nOur overall application will have two Android applications, and a backend application that orchestrates between them. The Rider application will send a message to the backend in order to request a ride. This will contain the start location. The backend will then broadcast out to all of the drivers that a new job is available. Once one of the drivers accepts the job, the rider is then notified of this fact and is kept informed of the car’s location until it turns up. At the same time, the other drivers are all notified that the job is no longer available.\n\nAt the other end of the journey, the driver will indicate that the job is finished. At this point, they will be able to collect a new job if they wish.\n\n## Backend application\n\nWe are going to build our backend application using Spring Boot and the Kotlin programming language, since this gives us a very simple way to get going whilst still working in the same language as the Android applications will be built.\n\nHead over to https://start.spring.io/ to create our project structure. We need to specify that we are building a **Gradle** project with **Kotlin** and Spring Boot **2.0.1** (or newer if available at the time of reading), and we need to include the “Web” component:\n\n![kotling-ridesharing-spring-initializer](//images.ctfassets.net/1es3ne0caaid/6AKZhv4Ns482MAi0WwGQa2/8cea4b3bac5645ccf5fde687f215540a/kotling-ridesharing-spring-initializer.png)\n\nThe **Generate Project** button will give you a zip file containing our application structure. Unpack this somewhere. At any time, you can execute `./gradlew bootRun` to build and start your backend server running.\n\nFirstly though, we need to add some dependencies. Open up the `build.gradle` file and add the following to the `dependencies` section:\n\n```\n    compile 'com.pusher:push-notifications-server-java:0.9.0'\n    runtime 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.2'\n```\n\nThe first of these is the Pusher library needed for triggering push notifications. The second is the Jackson module needed for serializing and deserializing Kotlin classes into JSON.\n\nNow, build the project. This will ensure that all of the dependencies are downloaded and made available and that everything compiles and builds correctly:\n\n```\n    $ ./gradlew build\n    Starting a Gradle Daemon (subsequent builds will be faster)\n    \n    \u003e Task :test\n    2018-04-27 07:34:27.548  INFO 43169 --- [       Thread-5] o.s.w.c.s.GenericWebApplicationContext   :   \n    Closing org.springframework.web.context.support.GenericWebApplicationContext@c1cf60f: startup date [Fri \n    Apr   27 07:34:25 BST 2018]; root of context hierarchy\n    \n    \n    BUILD SUCCESSFUL in 17s\n    5 actionable tasks: 5 executed\n```\n\n### Broadcasting events\n\nThe sole point of the backend application is to broadcast push notifications via the Pusher Beams service in response to incoming HTTP calls.\n\nWe have a few different endpoints that we want to handle, each of which will broadcast their own particular events:\n\n\n- POST /request-ride\n- POST /accept-job/{job}\n- POST /update-location/{job}\n- POST /pickup/{job}\n- POST /dropoff/{job}\n\nOut of these, the first one is used by the riders application whilst the others are all used by the drivers application. There is also a strict workflow between these. The very first one will generate a new job, with a unique ID that will be passed between all of the other requests and which will be used as the intent of the push notification to ensure that only the correct rider gets the messages.\n\nThe workflow is going to be:\n\n\n- Rider makes a call to `/request-ride` supplying their current location, and gets a Job ID back.\n- All currently active drivers are sent a push notification informing them of the job.\n- Driver makes a call to `/accept-job/{job}`, supplying their current location. This causes the rider to be notified that a driver has accepted the job, and where the driver is, and also causes all the other drivers to remove the job from their list.\n- Driver makes frequent calls to `/update-location/{job}` with their current location. This causes the rider to be notified of where the driver is now.\n- Driver makes a call to `/pickup/{job}` with their current location. This informs the rider that their ride is waiting for them.\n- Driver makes frequent calls to `/update-location/{job}` with their current location. This causes the rider to be notified of where the driver is now.\n- Driver makes a call to `/dropoff/{job}` with their current location. This informs the rider that their ride is over.\n\nThe first thing we need is some way to represent a location in the world. All of our endpoints will use this as their payload. Create a new class called `Location`:\n\n``` kotlin\n    data class Location(\n            val latitude: Double,\n            val longitude: Double\n    )\n```\n\nWe also need an enumeration of the actions that can be performed. Create a new class called `Actions`:\n\n``` kotlin\n    enum class Actions {\n        NEW_JOB,\n        ACCEPT_JOB,\n        ACCEPTED_JOB,\n        UPDATE_LOCATION,\n        PICKUP,\n        DROPOFF\n    }\n```\n\nNow we can create our mechanism to send out Pusher Beams notifications to the relevant clients. There are two different kinda of notification to send - one with a location and one with a rating. Create a new class called `JobNotifier`:\n\n``` kotlin\n    @Component\n    class JobNotifier(\n            @Value(\"\\${pusher.instanceId}\") private val instanceId: String,\n            @Value(\"\\${pusher.secretKey}\") private val secretKey: String\n    ) {\n        private val pusher = PushNotifications(instanceId, secretKey)\n    \n        fun notify(job: String, action: Actions, location: Location) {\n            val interests = when (action) {\n                Actions.NEW_JOB -\u003e listOf(\"driver_broadcast\")\n                Actions.ACCEPTED_JOB -\u003e listOf(\"driver_broadcast\")\n                else -\u003e listOf(\"rider_$job\")\n            }\n    \n            pusher.publish(\n                    interests,\n                    mapOf(\n                            \"fcm\" to mapOf(\n                                    \"data\" to mapOf(\n                                            \"action\" to action.name,\n                                            \"job\" to job,\n                                            \"latitude\" to location.latitude.toString(),\n                                            \"longitude\" to location.longitude.toString()\n                                    )\n                            )\n                    )\n            )\n        }\n    }\n```\n\n\u003e **Note:** If the data sent in a notification contains anything that is not a string then the Android client will silently fail to receive the notification.\n\nThis will send notifications with one of two interest sets. `driver_broadcast` will be received by all drivers that are not currently on a job, and `driver_$job` will be received by the driver currently on that job.\n\nYou will also need to add to the `application.properties` file the credentials needed to access the Pusher Beams API:\n\n```\n    pusher.instanceId=\u003cPUSHER_INSTANCE_ID\u003e\n    pusher.secretKey=\u003cPUSHER_SECRET_KEY\u003e\n```\n\nFinally we need a controller to actually handle the incoming HTTP Requests and trigger the notifications. Create a new class called `RideController`:\n\n``` kotlin\n    @RestController\n    class RideController(\n            private val jobNotifier: JobNotifier\n    ) {\n        @RequestMapping(value = [\"/request-ride\"], method = [RequestMethod.POST])\n        @ResponseStatus(HttpStatus.CREATED)\n        fun requestRide(@RequestBody location: Location): String {\n            val job = UUID.randomUUID().toString()\n            jobNotifier.notify(job, Actions.NEW_JOB, location)\n            return job\n        }\n    \n        @RequestMapping(value = [\"/accept-job/{job}\"], method = [RequestMethod.POST])\n        @ResponseStatus(HttpStatus.NO_CONTENT)\n        fun acceptJob(@PathVariable(\"job\") job: String, @RequestBody location: Location) {\n            jobNotifier.notify(job, Actions.ACCEPT_JOB, location)\n            jobNotifier.notify(job, Actions.ACCEPTED_JOB, location)\n        }\n    \n        @RequestMapping(value = [\"/update-location/{job}\"], method = [RequestMethod.POST])\n        @ResponseStatus(HttpStatus.NO_CONTENT)\n        fun updateLocation(@PathVariable(\"job\") job: String, @RequestBody location: Location) {\n            jobNotifier.notify(job, Actions.UPDATE_LOCATION, location)\n        }\n    \n        @RequestMapping(value = [\"/pickup/{job}\"], method = [RequestMethod.POST])\n        @ResponseStatus(HttpStatus.NO_CONTENT)\n        fun pickup(@PathVariable(\"job\") job: String, @RequestBody location: Location) {\n            jobNotifier.notify(job, Actions.PICKUP, location)\n        }\n    \n        @RequestMapping(value = [\"/dropoff/{job}\"], method = [RequestMethod.POST])\n        @ResponseStatus(HttpStatus.NO_CONTENT)\n        fun dropoff(@PathVariable(\"job\") job: String, @RequestBody location: Location) {\n            jobNotifier.notify(job, Actions.DROPOFF, location)\n        }\n    }\n```\n\nEvery method simply triggers one notification and returns. The handler for `/request-ride` will generate a new UUID as the job ID and will return it to the rider - the drivers will get the job ID in the appropriate push notification if they receive it.\n\n\n## Building the Riders application\n\nThe Rider Android application will also be built in Kotlin, using Android Studio. To start, open up Android Studio and create a new project, entering some appropriate details and ensuring that you select the **Include Kotlin support** option. Note that the **Package name** must match that specified when you set up the FCM Server Key earlier.\n\n![kotlin-ridesharing-create-android-1](//images.ctfassets.net/1es3ne0caaid/FFEGiryVUISEmkKyOw42m/a6bdd550b0fb08242777615db2fca334/kotlin-ridesharing-create-android-1.png)\n\nThen on the next screen, ensure that you select support for **Phone and Tablet** using at least API 23:\n\n![kotlin-ridesharing-create-android-2](//images.ctfassets.net/1es3ne0caaid/24ia023ilW2Y6mOWWq2UOi/dafa778be6315f117728af82a859773c/kotlin-ridesharing-create-android-2.png)\n\nEnsure that an **Google Maps Activity** is selected:\n\n![kotlin-ridesharing-create-android-3](//images.ctfassets.net/1es3ne0caaid/5SFxdcyCZOQUGQAwqsq2CO/bf06d5cbc06603b59ff1ec90265b893c/kotlin-ridesharing-create-android-3.png)\n\nAnd set the **Activity Name** to “MainActivity” and **Layout Name** to “activity_main”:\n\n![kotlin-ridesharing-create-android-4](//images.ctfassets.net/1es3ne0caaid/75OUKAuKmAWAGA0Os0syKw/ad6ee82a18d0230b55e5b1466c632c6d/kotlin-ridesharing-create-android-4.png)\n\nOnce the project opens, you will be presented with the file `google_maps_api.xml` with instructions on how to get a Google Maps API key. Follow these instructions to get a key to use in the application.\n\nNext we need to add some dependencies to our project to support Pusher. Add the following to the project level `build.gradle`, in the existing `dependencies` section:\n\n``` gradle\n    classpath 'com.google.gms:google-services:3.2.1'\n```\n\nThen add the following to the `dependencies` section of the app level `build.gradle`:\n\n``` gradle\n    implementation 'com.google.firebase:firebase-messaging:15.0.0'\n    implementation 'com.pusher:push-notifications-android:0.10.0'\n    \n    compile 'com.loopj.android:android-async-http:1.4.9'\n    compile 'com.google.code.gson:gson:2.2.4'\n```\n\nAnd this to bottom of the app level `build.gradle`:\n\n``` gradle\n    apply plugin: 'com.google.gms.google-services'\n```\n\nNext, copy the `google-services.json` file we downloaded earlier into the `app` directory under your project. We are now ready to actually develop our specific application using these dependencies.\n\nFinally, we need to add some permissions to our application. Open up the `AndroidManifest.xml` file and add the following immediately before the `\u003capplication\u003e` tag:\n\n``` xml\n    \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n```\n\nAt this point we can run the application and it will display a map.\n\n\n\u003e **Note:** If you are running this on an emulator then you need to ensure that the emulator is correctly capable of working with the Google Maps API. The “Nexus 5X” with “API 28” works correctly.\n\n\n\u003e **Note:** if you get a grey screen instead of a map it likely means that the Google Maps API key is not valid or not present. Follow the instructions in `google_maps_api.xml` to set this up.\n\n### Displaying the current location\n\nThe first thing we want to be able to do is display our current location on the map. This involves requesting permission from the user to determine their location - which we need to know where our ride should pick us up - and then updating the map to display this. All of this is added to the existing MainActivity.\n\nFirstly, update the `onMapReady` function as follows:\n\n``` kotlin\n    override fun onMapReady(googleMap: GoogleMap) {\n        mMap = googleMap\n        mMap.isMyLocationEnabled = true\n        mMap.isTrafficEnabled = true\n    }\n```\n\nThis simply updates the map to show the **My Location** and **Traffic** layers. \n\nNext, add a new method called `setupMap` as follows:\n\n``` kotlin\n    private fun setupMap() {\n        val mapFragment = supportFragmentManager\n                .findFragmentById(R.id.map) as SupportMapFragment\n        mapFragment.getMapAsync(this)\n    }\n```\n\nThis is the code that is currently in `onCreate`, but which we will be removing soon.\n\nNext, add a new top-level field to the class called `REQUEST_LOCATION_PERMISSIONS`:\n\n``` kotlin\n    private val REQUEST_LOCATION_PERMISSIONS = 1001\n```\n\nThis is used so that we know in the callback from requesting permissions which call it was - so that an appropriate response can happen.\n\nNext, another new method called `onRequestPermissionsResult`:\n\n``` kotlin\n    override fun onRequestPermissionsResult(requestCode: Int,\n                                            permissions: Array\u003cout String\u003e,\n                                            grantResults: IntArray) {\n        if (requestCode == REQUEST_LOCATION_PERMISSIONS) {\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                setupMap()\n            } else {\n                Toast.makeText(this, \"Location Permission Denied\", Toast.LENGTH_SHORT)\n                        .show();\n            }\n        } else {\n            super.onRequestPermissionsResult(requestCode, permissions, grantResults)\n        }\n    }\n```\n\nThis is a standard method defined in the `FragmentActivity` base class that we are extending for our specific case. If the user grants us permission then we move on to our `setupMap` method we’ve just defined, and if they deny us then we show a message and stop there.\n\nNext, a new method called `checkLocationPermissions` to actually check if we’ve got permission for accessing the users location already, and if not to request them:\n\n``` kotlin\n    private fun checkLocationPermissions() {\n        if (checkSelfPermission(android.Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\n            requestPermissions(arrayOf(android.Manifest.permission.ACCESS_FINE_LOCATION), REQUEST_LOCATION_PERMISSIONS)\n            return\n        }\n        setupMap()\n    }\n```\n\nFinally we update the `onCreate` method as follows:\n\n``` kotlin\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n    \n        checkLocationPermissions()\n    }\n```\n\nThis starts the whole chain off. When the main activity is first created, we check if we have permission to access the users location. If not we request permission. Then, once permission is granted, we use this fact to allow the user to see where they are on the map.\n\n### Requesting a ride\n\nOnce we know where the user is, we can allow them to request a ride. This will be done by adding a button to the map that they can click on in order to request their ride, which will then send their current location to our backend.\n\nFirstly, lets add our button to the map. Find and update `activity_main.xml` as follows:\n\n``` xml\n    \u003cfragment xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:map=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:id=\"@+id/map\"\n        android:name=\"com.google.android.gms.maps.SupportMapFragment\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\"com.pusher.pushnotify.ride.MainActivity\"\u003e\n    \n        \u003cButton\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"right|bottom\"\n            android:id=\"@+id/request_ride\"\n            android:text=\"Request Ride\"\n            android:padding=\"10dp\"\n            android:layout_marginTop=\"20dp\"\n            android:paddingRight=\"10dp\"\n            android:enabled=\"false\"\n            android:onClick=\"requestRide\" /\u003e\n    \n    \u003c/fragment\u003e\n```\n\n\u003e **Note:** the value for “tools:context” should match the class name of your main activity class.\n\nMost of this was already present. We are adding the `Button` element inside the `fragment` that was already there.\n\nNext we want to only have this button enabled when we have the location of the user. For this we are going to rely on the Map component telling us when it has got the users location. Update the `onMapReady` method of `MainActivity`  and add this in to the bottom:\n\n``` kotlin\n    mMap.setOnMyLocationChangeListener {\n        findViewById\u003cButton\u003e(R.id.request_ride).isEnabled = true\n    }\n```\n\nWe’re also going to create a new helper method to display a Toast message to the user:\n\n``` kotlin\n    private fun displayMessage(message: String) {\n        Toast.makeText(\n                this,\n                message,\n                Toast.LENGTH_SHORT).show();\n    \n    }\n```\n\nFinally, we will add the `requestRide` method that is triggered when the button is clicked. For now this is as follows:\n\n``` kotlin\n    fun requestRide(view: View) {\n        val location = mMap.myLocation\n    \n        val request = JSONObject(mapOf(\n                \"latitude\" to location.latitude,\n                \"longitude\" to location.longitude\n        ))\n        mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(LatLng(location.latitude, location.longitude), 15.0f))\n    \n        val client = AsyncHttpClient()\n        client.post(applicationContext, \"http://10.0.2.2:8080/request-ride\", StringEntity(request.toString()),\n                \"application/json\", object : TextHttpResponseHandler() {\n    \n            override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String) {\n                runOnUiThread {\n                    displayMessage(\"Your ride has been requested\")\n                    findViewById\u003cButton\u003e(R.id.request_ride).visibility = View.INVISIBLE\n                }\n            }\n    \n            override fun onFailure(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String, throwable: Throwable) {\n                runOnUiThread {\n                    displayMessage(\"An error occurred requesting your ride\")\n                }\n            }\n        });\n    }\n```\n\n\u003e **Note:** The import for `Header` may be ambiguous. Ensure that you select `cz.msebera.android.httpclient.Header`\n\n\n\u003e **Note:** The IP Address “10.0.2.2” is what the Android emulator sees the host machine as. You will want to change this to the real address of the server if you are running this for real.\n\nThis builds our JSON message and sends it to the */request-ride* endpoint that we built earlier. That in turn will broadcast out to all potential drivers that there is a new job. We then display a message to the rider that their ride has been requested, or else an error if we failed to request the ride. We also hide the **Request Ride** button when we have successfully requested a ride, so that we can’t request more than one at a time.\n\n### Receiving push notifications\n\nThe other major feature we need in the riders app is to be able to receive updates from the driver. This includes when a driver has accepted the job, where he is, and when he is ready to pick up or drop off the rider.\n\nAll of these notifications work in very similar manner, containing the location of the driver and the action to perform. We want to always update our map to show the position of the driver, and in many cases to display a message to the rider informing them as to what is going on.\n\nFirstly, we need to register with the Pusher Beams service to be able to receive push notifications. Add the following to the `onCreate` method of `MainActivity`:\n\n``` kotlin\n    PushNotifications.start(getApplicationContext(), \"YOUR_INSTANCE_ID\");\n```\n\nWhere “YOUR_INSTANCE_ID” is replaced with the value received from the Pusher Beams registration process, and must match the value used in the backend application.\n\nNext we want to actually register to receive notifications from the backend. This is done by updating the `o``nSuccess` method inside the `requestRide` method of `MainActivity` as follows:\n\n``` kotlin\n    override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String) {\n        PushNotifications.subscribe(\"rider_$responseString\")\n        runOnUiThread {\n            displayMessage(\"Your ride has been requested\")\n            findViewById\u003cButton\u003e(R.id.request_ride).visibility = INVISIBLE\n        }\n    }\n```\n\nThis builds an interest string that contains the job ID that we were provided, meaning that we will now receive all rider-focused notifications for this job.\n\nThe only thing remaining is to actually handle the notifications. This involves displaying where on the map the driver currently is, and potentially displaying an update message to the rider.\n\nFirstly, add a new field to the `MainAction` class to store the marker for the drivers location:\n\n``` kotlin\n    private var driverMarker: Marker? = null\n```\n\nThis defaults to `null` until we actually first get a location.\n\nNext, add a new method called update`DriverLocation`  in the `MainActivity` class to set the location of the driver, creating the marker if needed:\n\n``` kotlin\n    private fun updateDriverLocation(latitude: Double, longitude: Double) {\n        val location = LatLng(latitude, longitude)\n    \n        if (driverMarker == null) {\n            driverMarker = mMap.addMarker(MarkerOptions()\n                    .title(\"Driver Location\")\n                    .position(location)\n            )\n        } else {\n            driverMarker?.position = location\n        }\n    \n        mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(location, 17.0f))\n    }\n```\n\nFinally, add the necessary handler to receive the push notifications and react accordingly. For this, create a new method called `onResume` in the `MainActivity` class as follows:\n\n``` kotlin\n    override fun onResume() {\n        super.onResume()\n    \n        PushNotifications.setOnMessageReceivedListenerForVisibleActivity(this, object : PushNotificationReceivedListener {\n            override fun onMessageReceived(remoteMessage: RemoteMessage) {\n                val action = remoteMessage.data[\"action\"]\n    \n                runOnUiThread {\n                    updateDriverLocation(remoteMessage.data[\"latitude\"]!!.toDouble(), remoteMessage.data[\"longitude\"]!!.toDouble())\n    \n                    if (action == \"ACCEPT_JOB\") {\n                        displayMessage(\"Your ride request has been accepted. Your driver is on their way.\")\n                    } else if (action == \"PICKUP\") {\n                        displayMessage(\"Your driver has arrived and is waiting for you.\")\n                    } else if (action == \"DROPOFF\") {\n                        displayMessage(\"You are at your destination\")\n                        findViewById\u003cButton\u003e(R.id.request_ride).visibility = View.VISIBLE\n                    }\n                }\n            }\n        })\n    }\n```\n\nThis will call our new method to update the location of the driver on the map, and for selected actions will display a message informing the rider of what is happening. We also re-display the **Request Ride** button when the drop-off action occurs, so that the rider can use the app again if needed.\n\nThis completes the riders side of the application, allowing them to do everything they need to for the ride:\n\n![kotlin-ridesharing-rider-app-demo](//images.ctfassets.net/1es3ne0caaid/SOL4YBv2ACiYYsiIcqmmq/18f4c3ab3ed6ba4a38e7fbb2adbce3ce/kotlin-ridesharing-rider-app-demo.gif)\n\n## Building the drivers application\n\nThe driver Android application will also be built in Kotlin, using Android Studio. To start, open up Android Studio and create a new project, entering some appropriate details and ensuring that you select the **Include Kotlin support** option. Note that the **Package name** must match that specified when you set up the FCM Server Key earlier.\n\n\n\u003e **Note:** these instructions are almost exactly the same as for the riders app, but are repeated here for ease of following along.\n\n![kotlin-ridesharing-create-android-5](//images.ctfassets.net/1es3ne0caaid/4ENZLhc0gEEk4o6oMiOAu4/3889f9e1f12b21c658e43ba1c4ca23b9/kotlin-ridesharing-create-android-5.png)\n\nThen on the next screen, ensure that you select support for **Phone and Tablet** using at least API 23:\n\n![kotlin-ridesharing-create-android-6](//images.ctfassets.net/1es3ne0caaid/6qL0f20xtCmmeWgGoWyMuU/e312d878f160a17ebc9a652fd518a23d/kotlin-ridesharing-create-android-6.png)\n\nEnsure that an **Google Maps Activity** is selected:\n\n![kotlin-ridesharing-create-android-7](//images.ctfassets.net/1es3ne0caaid/6f2xDO0sTu6AOoguysgYG6/0df9b3e7bf31f00431f60e70f353db1f/kotlin-ridesharing-create-android-7.png)\n\nAnd set the **Activity Name** to “MainActivity” and **Layout Name** to “activity_main”:\n\n![kotlin-ridesharing-create-android-8](//images.ctfassets.net/1es3ne0caaid/5S47nZ7IB2MgMgKOGISOSG/d161c98f9106daa326bff0d8f56e7815/kotlin-ridesharing-create-android-8.png)\n\nOnce the project opens, you will be presented with the file `google_maps_api.xml` with instructions on how to get a Google Maps API key. Follow these instructions to get a key to use in the application. This can not be the same key as for the rider application since they are tied to the actual Android application that is using it. It should belong to the same Google project however.\n\nNext we need to add some dependencies to our project to support Pusher. Add the following to the project level `build.gradle`, in the existing `dependencies` section:\n\n``` gradle\n    classpath 'com.google.gms:google-services:3.2.1'\n```\n\nThen add the following to the `dependencies` section of the app level `build.gradle`:\n\n``` gradle\n    implementation 'com.google.firebase:firebase-messaging:15.0.0'\n    implementation 'com.pusher:push-notifications-android:0.10.0'\n    \n    compile 'com.loopj.android:android-async-http:1.4.9'\n    compile 'com.google.code.gson:gson:2.2.4'\n```\n\nAnd this to bottom of the app level `build.gradle`:\n\n``` gradle\n    apply plugin: 'com.google.gms.google-services'\n```\n\nNext, copy the `google-services.json` file we downloaded earlier into the `app` directory under your project. We are now ready to actually develop our specific application using these dependencies.\n\nFinally, we need to add some permissions to our application. Open up the `AndroidManifest.xml` file and add the following immediately before the `\u003capplication\u003e` tag:\n\n``` xml\n    \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n```\n\nAt this point we can run the application and it will display a map.\n\n\n\u003e **Note:** If you are running this on an emulator then you need to ensure that the emulator is correctly capable of working with the Google Maps API. The “Nexus 5X” with “API 28” works correctly.\n\n\n\u003e **Note:** if you get a grey screen instead of a map it likely means that the Google Maps API key is not valid or not present. Follow the instructions in `google_maps_api.xml` to set this up.\n\n### Displaying the current location\n\nThe first thing we want to be able to do is display our current location on the map. This involves requesting permission from the user to determine their location - which we need to know where our ride should pick us up - and then updating the map to display this. All of this is added to the existing MainActivity.\n\n\n\u003e **Note:** this is all exactly the same as for the riders application, but is repeated here for ease of following along.\n\nFirstly, update the `onMapReady` function as follows:\n\n``` kotlin\n    override fun onMapReady(googleMap: GoogleMap) {\n        mMap = googleMap\n        mMap.isMyLocationEnabled = true\n        mMap.isTrafficEnabled = true\n    }\n```\n\nThis simply updates the map to show the **My Location** and **Traffic** layers. \n\nNext, add a new method called `setupMap` as follows:\n\n``` kotlin\n    private fun setupMap() {\n        val mapFragment = supportFragmentManager\n                .findFragmentById(R.id.map) as SupportMapFragment\n        mapFragment.getMapAsync(this)\n    }\n```\n\nThis is the code that is currently in `onCreate`, but which we will be removing soon.\n\nNext, add a new top-level field to the class called `REQUEST_LOCATION_PERMISSIONS`:\n\n``` kotlin\n    private val REQUEST_LOCATION_PERMISSIONS = 1001\n```\n\nThis is used so that we know in the callback from requesting permissions which call it was - so that an appropriate response can happen.\n\nNext, another new method called `onRequestPermissionsResult`:\n\n``` kotlin\n    override fun onRequestPermissionsResult(requestCode: Int,\n                                            permissions: Array\u003cout String\u003e,\n                                            grantResults: IntArray) {\n        if (requestCode == REQUEST_LOCATION_PERMISSIONS) {\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n                setupMap()\n            } else {\n                Toast.makeText(this, \"Location Permission Denied\", Toast.LENGTH_SHORT)\n                        .show();\n            }\n        } else {\n            super.onRequestPermissionsResult(requestCode, permissions, grantResults)\n        }\n    }\n```\n\nThis is a standard method defined in the `FragmentActivity` base class that we are extending for our specific case. If the user grants us permission then we move on to our `setupMap` method we’ve just defined, and if they deny us then we show a message and stop there.\n\nNext, a new method called `checkLocationPermissions` to actually check if we’ve got permission for accessing the users location already, and if not to request them:\n\n``` kotlin\n    private fun checkLocationPermissions() {\n        if (checkSelfPermission(android.Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\n            requestPermissions(arrayOf(android.Manifest.permission.ACCESS_FINE_LOCATION), REQUEST_LOCATION_PERMISSIONS)\n            return\n        }\n        setupMap()\n    }\n```\n\nFinally we update the `onCreate` method as follows:\n\n``` kotlin\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n    \n        checkLocationPermissions()\n    }\n```\n\nThis starts the whole chain off. When the main activity is first created, we check if we have permission to access the users location. If not we request permission. Then, once permission is granted, we use this fact to allow the user to see where they are on the map.\n\n### Receive notifications of new jobs\n\nNow that we can show the driver where they are on the map, we want to show them where the potential riders are and allow them to accept a job.\n\nFirstly, we need to register with the Pusher Beams service to be able to receive push notifications, and then subscribe to the `driver_broadcast` interest to be told about the jobs. Add the following to the `onCreate` method of `MainActivity`:\n\n``` kotlin\n    PushNotifications.start(getApplicationContext(), \"YOUR_INSTANCE_ID\");\n    PushNotifications.subscribe(\"driver_broadcast\")\n```\n\nWhere “YOUR_INSTANCE_ID” is replaced with the value received from the Pusher Beams registration process, and must match the value used in the backend application.\n\nNext, add a method to display a message to the user when we need to inform them of something. Create the method `displayMessage` in the `MainActivity` class as follows:\n\n``` kotlin\n    private fun displayMessage(message: String) {\n        Toast.makeText(\n                this,\n                message,\n                Toast.LENGTH_SHORT).show();\n    }\n```\n\nNext, add a new top level field into the `MainActivity` class to store the markers that we are placing:\n\n``` kotlin\n    private val markers = mutableMapOf\u003cString, Marker\u003e()\n```\n\nNext, we add a listener so that when we are notified about a job we can place a pin on the map showing where the rider is. For this, add a new `onResume` method to the `MainActivity` class as follows:\n\n``` kotlin\n    override fun onResume() {\n        super.onResume()\n    \n        PushNotifications.setOnMessageReceivedListenerForVisibleActivity(this, object : PushNotificationReceivedListener {\n            override fun onMessageReceived(remoteMessage: RemoteMessage) {\n                val action = remoteMessage.data[\"action\"]\n    \n                runOnUiThread {\n                    if (action == \"NEW_JOB\") {\n                        val jobId = remoteMessage.data[\"job\"]!!\n                        val location = LatLng(remoteMessage.data[\"latitude\"]!!.toDouble(), remoteMessage.data[\"longitude\"]!!.toDouble())\n    \n                        val marker = mMap.addMarker(MarkerOptions()\n                                .position(location)\n                                .title(\"New job\"))\n                        marker.tag = jobId\n                        markers[jobId] = marker\n    \n                        displayMessage(\"A new job is available\")\n                    }\n                }\n            }\n        })\n    }\n```\n\nWe are setting the `tag` on the marker to the ID of the job that has turned up. This will be used next to allow the driver to accept the job. We are also storing the marker in a map so that we can look it up later by ID.\n\n### Accepting a job\n\nAccepting a job is going to be done by clicking on a marker. Once done, the app will send a message to the backend to accept the job, and will start sending regular messages with the drivers location. It will also allow for a **Pickup** and **Dropoff** button to be displayed for the driver to click as appropriate.\n\nFirstly, add a new top-level field to the `MainActivity` class to store the ID of the current job:\n\n``` kotlin\n    private var currentJob: String? = null\n```\n\nNext, update the `onMapReady` method to add a handler for clicking on a marker. This will send the HTTP request to our backend to accept the job, and record the fact in the application that this is now the current job.\n\n``` kotlin\n    mMap.setOnMarkerClickListener { marker -\u003e\n        if (currentJob != null) {\n            runOnUiThread {\n                displayMessage(\"You are already on a job!\")\n            }\n        } else {\n    \n            val jobId = marker.tag\n    \n            val location = mMap.myLocation\n    \n            val request = JSONObject(mapOf(\n                    \"latitude\" to location.latitude,\n                    \"longitude\" to location.longitude\n            ))\n    \n            val client = AsyncHttpClient()\n            client.post(applicationContext, \"http://10.0.2.2:8080/accept-job/$jobId\", StringEntity(request.toString()),\n                    \"application/json\", object : TextHttpResponseHandler() {\n    \n                override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String) {\n                    runOnUiThread {\n                        displayMessage(\"You have accepted this job\")\n                        currentJob = jobId as String\n                    }\n                }\n    \n                override fun onFailure(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String, throwable: Throwable) {\n                    runOnUiThread {\n                        displayMessage(\"An error occurred accepting this job\")\n                    }\n                }\n            });\n        }\n        \n        true\n    }\n```\n\n\u003e **Note:** The import for `Header` may be ambiguous. Ensure that you select `cz.msebera.android.httpclient.Header`\n\n### Removing old jobs from the map\n\nWe also want to tidy up the map when a job is accepted, removing markers from every drivers map - including the driver that accepted the job - but adding a new one in a different colour back to the local drivers map.\n\nFirstly, add another new field to the `MainActivity` class for the marker of the job we are currently on: \n\n``` kotlin\n    private var currentJobMarker: Marker? = null\n```\n\nNext, update the `onMessageReceived` callback inside the `onResume` method of `MainActivity` as follows:\n\n``` kotlin\n    override fun onMessageReceived(remoteMessage: RemoteMessage) {\n        val action = remoteMessage.data[\"action\"]\n    \n        runOnUiThread {\n            if (action == \"NEW_JOB\") {\n                val jobId = remoteMessage.data[\"job\"]!!\n                val location = LatLng(remoteMessage.data[\"latitude\"]!!.toDouble(), remoteMessage.data[\"longitude\"]!!.toDouble())\n    \n                val marker = mMap.addMarker(MarkerOptions()\n                        .position(location)\n                        .title(\"New job\"))\n                marker.tag = jobId\n                markers[jobId] = marker\n    \n                displayMessage(\"A new job is available\")\n            } else if (action == \"ACCEPTED_JOB\") {\n                val jobId = remoteMessage.data[\"job\"]!!\n                val location = LatLng(remoteMessage.data[\"latitude\"]!!.toDouble(), remoteMessage.data[\"longitude\"]!!.toDouble())\n    \n                markers[jobId]?.remove()\n                markers.remove(jobId)\n            }\n        }\n    }\n```\n\nHere we are adding the block to handle the `ACCEPTED_JOB` event alongside the `NEW_JOB` event. This is broadcast out to every driver when any driver accepts a job, and is used to remove the markers indicating a job is waiting for pickup.\n\nFinally, add the following in to the `onSuccess` handler in the `onMapReady` method of `MainActivity`:\n\n``` kotlin\n    val selectedJobMarker = markers[jobId]!!\n    val marker = mMap.addMarker(MarkerOptions()\n            .position(selectedJobMarker.position)\n            .icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_AZURE))\n            .title(\"Current job\"))\n    marker.tag = jobId\n    \n    currentJobMarker = marker\n```\n\nThis adds a new marker to the map, coloured blue instead of the default red, to indicate the job that we are actively on.\n\n### Picking up and dropping off\n\nIn order to pick up and drop off the rider, we need to add UI controls to support this. We are going to add buttons that appear on the map at appropriate times to allow the driver to indicate that he’s ready for pickup and for dropoff.\n\nFirstly, update `activity_main.xml` as follows to add the buttons:\n\n``` xml\n    \u003cfragment xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:map=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:id=\"@+id/map\"\n        android:name=\"com.google.android.gms.maps.SupportMapFragment\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\"com.pusher.pushnotify.ride.MainActivity\"\u003e\n    \n        \u003cButton\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"right|bottom\"\n            android:id=\"@+id/pickup_ride\"\n            android:text=\"Pickup\"\n            android:padding=\"10dp\"\n            android:layout_marginTop=\"20dp\"\n            android:paddingRight=\"10dp\"\n            android:visibility=\"invisible\"\n            android:onClick=\"pickupRide\" /\u003e\n    \n        \u003cButton\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"right|bottom\"\n            android:id=\"@+id/dropoff_ride\"\n            android:text=\"Dropoff\"\n            android:padding=\"10dp\"\n            android:layout_marginTop=\"20dp\"\n            android:paddingRight=\"10dp\"\n            android:visibility=\"invisible\"\n            android:onClick=\"dropoffRide\" /\u003e\n    \n    \u003c/fragment\u003e\n```\n\nThese buttons are initially invisible, but we will display them as necessary in the application.\n\nNext, update the `onSuccess` method inside of `onMapReady` to ensure the correct buttons are displayed. This should now look like:\n\n``` kotlin\n    override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String) {\n        runOnUiThread {\n            displayMessage(\"You have accepted this job\")\n            currentJob = jobId as String\n            findViewById\u003cButton\u003e(R.id.dropoff_ride).visibility = View.INVISIBLE\n            findViewById\u003cButton\u003e(R.id.pickup_ride).visibility = View.VISIBLE\n        }\n    }\n```\n\nFinally, we add the handlers for these buttons. First the one to pick up the rider. Add a new method called `pickupRide` as follows:\n\n``` kotlin\n    fun pickupRide(view: View) {\n        val location = mMap.myLocation\n    \n        val request = JSONObject(mapOf(\n                \"latitude\" to location.latitude,\n                \"longitude\" to location.longitude\n        ))\n    \n        val client = AsyncHttpClient()\n        client.post(applicationContext, \"http://10.0.2.2:8080/pickup/$currentJob\", StringEntity(request.toString()),\n                \"application/json\", object : TextHttpResponseHandler() {\n    \n            override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String?) {\n                runOnUiThread {\n                    findViewById\u003cButton\u003e(R.id.dropoff_ride).visibility = View.VISIBLE\n                    findViewById\u003cButton\u003e(R.id.pickup_ride).visibility = View.INVISIBLE\n                    currentJobMarker?.remove()\n                    currentJobMarker = null\n                }\n            }\n    \n            override fun onFailure(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String, throwable: Throwable) {\n                runOnUiThread {\n                    displayMessage(\"An error occurred picking up your ride\")\n                }\n            }\n        });\n    }\n```\n\nThis will make the call to the backend, and on success will cause the **Pickup** button to be hidden and the **Dropoff** button to be displayed. It also removes the blue marker for the current job, since we have just picked them up.\n\nNext the handler for dropping off the rider. Add another new method called `dropoffRide` as follows:\n\n``` kotlin\n    fun dropoffRide(view: View) {\n        val location = mMap.myLocation\n    \n        val request = JSONObject(mapOf(\n                \"latitude\" to location.latitude,\n                \"longitude\" to location.longitude\n        ))\n    \n        val client = AsyncHttpClient()\n        client.post(applicationContext, \"http://10.0.2.2:8080/dropoff/$currentJob\", StringEntity(request.toString()),\n                \"application/json\", object : TextHttpResponseHandler() {\n    \n            override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String?) {\n                runOnUiThread {\n                    findViewById\u003cButton\u003e(R.id.dropoff_ride).visibility = View.INVISIBLE\n                    findViewById\u003cButton\u003e(R.id.pickup_ride).visibility = View.INVISIBLE\n                    currentJob = null\n                }\n            }\n    \n            override fun onFailure(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String, throwable: Throwable) {\n                runOnUiThread {\n                    displayMessage(\"An error occurred dropping off your ride\")\n                }\n            }\n        });\n    }\n```\n\n### Sending location updates\n\nThe final thing that we need to do is have the driver application send updates about its location so that the rider can be updated.\n\nThis involves using the phones GPS to get updates every time the phone moves, and sending these updates to the backend - but only if we are currently on a job.\n\nIn order to do this, add the following to the bottom of the `setupMap` method in `MainActivity`. This is used because it’s called already once we know we have permission to get the devices location.\n\n``` kotlin\n    val locationManager = applicationContext.getSystemService(LocationManager::class.java)\n    locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 100, 0.0f, object : LocationListener {\n        override fun onLocationChanged(location: Location) {\n            if (currentJob != null) {\n                val request = JSONObject(mapOf(\n                        \"latitude\" to location.latitude,\n                        \"longitude\" to location.longitude\n                ))\n    \n                val client = AsyncHttpClient()\n                client.post(applicationContext, \"http://10.0.2.2:8080/update-location/$currentJob\", StringEntity(request.toString()),\n                        \"application/json\", object : TextHttpResponseHandler() {\n    \n                    override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String?) {\n                    }\n    \n                    override fun onFailure(statusCode: Int, headers: Array\u003cout Header\u003e, responseString: String, throwable: Throwable) {\n                    }\n                });\n    \n            }\n        }\n    \n        override fun onStatusChanged(provider: String?, status: Int, extras: Bundle?) {\n    \n        }\n    \n        override fun onProviderEnabled(provider: String?) {\n    \n        }\n    \n        override fun onProviderDisabled(provider: String?) {\n    \n        }\n    }, null)\n```\n\n\u003e **Note:** it’s likely that Android Studio will complain about having not performed the correct permissions checks. This error is actually wrong, except that Android Studio can’t tell that because of the way the methods are structured.\n\n\n\u003e **Note:** we have a number of empty methods here. They are required to be defined by the calling class, but we don’t actually have any need for them.\n\nAt this point, we have a fully working application suite that allows riders to request rides, and drivers to pick them up and drop them off. Remember to run your backend application before you launch the Android apps, and then we can test them out working together.\n\n![kotlin-ridesharing-demo](//images.ctfassets.net/1es3ne0caaid/6RBtbLD3JCimAcaw48UMqq/2da3756854a334305b1c4bc8786e8d03/kotlin-ridesharing-demo.gif)\n\n## Conclusion\n\nThis article shows how to use Pusher Beams along with the location and maps functionality of your phone to give a truly interactive experience of requesting a ride. We have painlessly implemented the sending of appropriate details from one device to another, keeping both parties updated to the current job.\n\nThe full source code for this application is available on [GitHub](https://github.com/sazzer/pusher-ridesharing). Why not try extending it yourself. There are many additional things that can be added very easily using Pusher technology to improve the application even further.","metaTitle":"Build a Kotlin ride sharing app with push notifications","metaDescription":"Use Kotlin, Gradle and Spring Boot to build a full ridesharing application, featuring apps for both the driver and rider. Use Google Maps to track rides."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5WwY2B6GQMA4a00iS4Aqye","type":"Entry","createdAt":"2018-03-06T10:31:48.691Z","updatedAt":"2020-06-19T14:38:00.024Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build realtime notifications for HTML5 apps using Ruby","url":"realtime-notifications","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4j1ezB9yPmUYsSoSUG6eKK","type":"Entry","createdAt":"2018-03-05T16:21:11.688Z","updatedAt":"2018-11-16T09:41:40.564Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Pusher team","url":"pusher-team","email":"team@pusher.com","twitter":"https://twitter.com/pusher","github":"https://github.com/pusher","guestWriter":false}}],"products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6S5luSjtlYk4i8eM8AyO4I","type":"Entry","createdAt":"2018-02-02T13:39:48.331Z","updatedAt":"2018-02-12T14:41:19.307Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Ruby","url":"ruby","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-07-18","description":"In this tutorial, we will show you how simple it is to add realtime notifications to your web or mobiles apps with Pusher.","prerequisite":"A basic understanding of Ruby and JavaScript is needed to follow this tutorial.","content":"## Why use HTML5 notifications?\n\nThere are few apps nowadays for which realtime notifications are not a core feature. From friend requests to pull requests, keeping users updated is key to their experience. Users want to be in the know about the content that interests them, and receive current information without the need for a browser refresh. It improves peer interactions between friends and colleagues, increases social reach, and triggers important conversations that could be invaluable to your app experience.\n\n## What we'll cover\n\n* A user will perform an action that will create a notification, and send it to the server.\n* When the server receives the notification data, it will broadcast it to other users using the server language's Pusher HTTP library.\n* All users running the web app will receive the notification via the Javascript Pusher WebSockets library. It will be shown in the application views.\n* We will use a third party library to enhance the notification experience.\n\n## Pusher terminology\n\nThe realtime web is sometimes referred to as “the evented web”. This is because our applications are full of events: events when data changes within your apps, events when users interact with an application and events when systems interact with each other.\n\nEvents take place on something: on a table in a database as a new record is created, updated or deleted; on a particular part of the user interface. Anything that results in a change in the underlying application state.\n\nFor this reason Pusher uses the terms channel for identifying and partitioning data and events for indicating actions upon that data.\n\n\u003e ### Channels\n\u003e *In Pusher, channels are a way to organize your data. In this tutorial, we will use a channel called `notifications`, but for other things you might wish to add, such as `chat-messages` or `user-activity`, you will want to use new channels to appropriately categorize the data you send.*\n\u003e To transmit notifications, we will be using [public channels](https://pusher.com/docs/client_api_guide/client_public_channels). Information on public channels is potentially accessible to anybody. \n\n\n\u003e ### Events\n\u003e *Events are triggered on channels resulting in the event being distributed to all clients that are subscribed to that channel. They have a name, such as `new_notification`, and a JSON data payload, such as `{message: 'hello world'}`.*\n\n## The tutorial\n\nNow that you've grasped channels and events, let's get started with creating your own realtime notifications app!\n\n### Step 0: Setting up your FREE account\n\n[Sign up](https://pusher.com/signup) for a free account.\n\nMake sure you have a server capable of running Ruby, PHP, Python or Node. With Ruby, we will be running Sinatra; Python with Flask; and Node with Express.\n\nInstall the Pusher library for your given language\n\n```\n  gem install pusher\n```\n\n\nCreate an application, and name it whatever you wish, e.g. 'Notifications Tutorial'. On the page for your application, you’ll find your application credentials.\n\nCreate a directory called `notifications` with a structure that looks like this:\n\n``` ruby\n.\n├── app.rb\n└── views\n    └── index.erb\n```\n\n\nIf at any point you are stuck, [feel free to browse the source code](https://github.com/pusher/realtime-notifications-tutorial) (the different languages can be found in different branches).\n\n### Step 1: Triggering an event\n\nTo start with, we'll just trigger an event on a channel, and view it in the [Pusher debug console](https://pusher.com/docs/debugging).\n\nFirst off, import the Pusher package or library. And then we initialise our Pusher instance with our app credentials: our app_id, app_key, and app_secret.\n\nNow, for testing purposes we’ll trigger an event called `my-event` on a channel called `my-channel`. We'll give this event an arbitrary payload, such as `{message: 'hello world'}`.\n\n\n``` ruby\nrequire 'pusher'\n\npusher = Pusher::Client.new app_id: 'YOUR APP ID', key: 'YOUR APP KEY', secret: 'YOUR APP SECRET'\n\n# trigger on 'my-channel' an event called 'my-event' with this payload:\n\npusher.trigger('my-channel', 'my-event', {\n    message: 'hello world'\n})\n```\n\nYou should see the event pop up in the Pusher debug console. Pretty nifty, huh?\n\n![realtime-notifications-html5-ruby-debug-console](//images.contentful.com/1es3ne0caaid/n1fWgOdCjmgsu46mKc68I/3da426d45e47cfd3ecc29e385aa85c1e/realtime-notifications-html5-ruby-debug-console.jpg)\n\n### Step 2: Creating a very basic app\n\n#### On your client\n\nLet's jump in and see what we do on the client-side when using Pusher.\n\nInclude the [Pusher JavaScript library](https://github.com/pusher/pusher-js) in your `index.html` file. We’ll also include jQuery for rendering notifications in the UI:\n\n```\n\u003cscript src=\"//js.pusher.com/3.1/pusher.min.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"//code.jquery.com/jquery-2.1.3.min.js\"\u003e\u003c/script\u003e\n```\n\nTo get things started, let's initialize our Pusher instance in a HTML script tag:\n\n``` javascript\n\u003cscript\u003e\n    var pusher = new Pusher('YOUR_APP_KEY');\n\u003c/script\u003e\n```\n\nEssentially, we wish to bind to an event on a channel, and pass a callback to be called any time the event takes place, such as this:\n\n``` javascript\nmyChannel.bind('my-event', function(data){\n    // do something with our `data`\n});\n```\n\nLet's bind to an event called `new_notification` on the `notifications` channel and show it in a `\u003cdiv\u003e`:\n\n``` javascript\n//subscribe to our notifications channel\nvar notificationsChannel = pusher.subscribe('notifications');\n\n//do something with our new information\nnotificationsChannel.bind('new_notification', function(notification){\n    // assign the notification's message to a \u003cdiv\u003e\u003c/div\u003e\n    var message = notification.message;\n    $('div.notification').text(message);\n});\n```\n\nNow, within your HTML, create a div, with class 'notification', such as `\u003cdiv class=\"notification\"\u003e\u003c/div\u003e`. Your HTML should look like this:\n\n``` javascript\n\u003chtml\u003e\n\u003chead\u003e\n    \u003ctitle\u003eRealtime Notifications\u003c/title\u003e\n    \u003cscript src=\"//js.pusher.com/3.1/pusher.min.js\" type=\"text/javascript\"\u003e\u003c/script\u003e\n    \u003cscript src=\"//code.jquery.com/jquery-2.1.3.min.js\" type=\"text/javascript\"\u003e\u003c/script\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n\n    \u003cdiv class=\"notification\"\u003e\u003c/div\u003e\n\n    \u003cscript\u003e\n\n        var pusher = new Pusher('YOUR_APP_KEY');\n\n        var notificationsChannel = pusher.subscribe('notifications');\n\n        notificationsChannel.bind('new_notification', function(notification){\n            var message = notification.message;\n            $('div.notification').text(message);\n        });\n\n    \u003c/script\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e\n```\n\n#### On your server\n\n\nWe’ll slightly modify our existing code so that whenever somebody makes a GET request to the `/notification` endpoint, this code will be executed and a `new_notification` event will be triggered on the `notifications` channel.\n\n``` ruby\nrequire 'sinatra' # requires `gem install sinatra`\n\nget '/notification' do\n    pusher.trigger('notifications', 'new_notification', {\n        message: 'hello world'\n    })\n    \"Notification triggered!\"\nend\n\n# don't forget to render your index.html page\n\nget '/' do\n    erb :index\nend\n{:/code}\n{::code lang=\"python\" id=\"endpoint\"}\nfrom flask import Flask # requires `pip install flask`\nfrom flask import render_template\nfrom flask import request\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef show_index():\n    return render_template('index.html')\n\n@app.route(\"/notification\")\ndef trigger_notification():\n    p.trigger('notifications', 'new_notification', {'message': 'hello world'})\n    return \"Notification triggered!\"\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\n``` javascript\nrouter.get('/', function(req, res){\n\n    pusher.trigger('notifications', 'new_notification', {\n        message: \"hello world\"\n    });\n\n    res.send(\"Notification triggered!\")\n});\n```\n\nRun your server and open '/', showing `index.html`, on one browser window.\n\nThen, open the `/notification` URL in another browser window and you will see 'hello world' appear on the first window.\n\n\n### Step 3: Make it interactive\n\n#### On your client\n{:.no_toc}\n\nThat's all well and good - but what if we want to create notifications that say something other than 'hello world'? Let's make it so that we create a notification to all users whenever we submit some text to the UI.\n\nLet's create our input:\n\n``` html\n\u003cinput class=\"create-notification\" placeholder=\"Send a notification :)\"\u003e\u003c/input\u003e\n\u003cbutton class=\"submit-notification\"\u003eGo!\u003c/button\u003e\n```\n\nNow, whenever clicks 'Go!', we want to POST to our `/notification` endpoint with the message to broadcast.\n\n``` javascript\nvar sendNotification = function(){\n\n    // get the contents of the input\n    var text = $('input.create-notification').val();\n\n    // POST to our server\n    $.post('/notification', {message: text}).success(function(){\n        console.log('Notification sent!');\n    });\n};\n\n$('button.submit-notification').on('click', sendNotification);\n```\n\n#### On your server\n\nServer-side, we'll just want to replace our hard-coded 'hello world' message with whatever was posted to that endpoint. Furthermore, we'll want to make sure our code handles a POST request. This is so that we can POST messages to this endpoint to the client to create a notification.\n\n``` ruby\npost '/notification' do\n    message = params[:message]\n\n    pusher.trigger('notifications', 'new_notification', {\n        message: message\n    })\nend\n```\n\nNow, open up a second browser to show the `index.html` file. If you type a piece of text into your input box and click ‘Go!’, you'll see that all browsers receive your new notification.\n\n### Step 4: Improve the notification experience\n\n[Toastr](https://github.com/CodeSeven/toastr) is a fairly popular and easy-to-use library for nice, non-blocking in-app notifications. In showing you how to further extend your notifications app, let's use it to display new notifications in the UI.\n\nLink in the Toastr CSS and Javascript in your between your `\u003chead\u003e` tags in `index.html`:\n\n```html\n\u003clink rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css\"\u003e\n\u003cscript src=\"//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js\"\u003e\u003c/script\u003e\n```\n\nRemove our `\u003cdiv class=\"notification\"\u003e\u003c/div\u003e` as we won't need it any more.\n\nAt the time of writing, toastr does not have HTML escaping built in. So at this point, to encourage security and best practices, we should escape our HTML before rendering it to the DOM. Otherwise, our app would be vulnerable to HTML script injection attacks. This should be straightforward; at our notification where we receive new notification POSTs from the client, let's sanitize the message.\n\n```ruby\nrequire 'cgi'\n\npost '/notification' do\n    message = CGI.escape_html params[:message]\n\n    pusher.trigger('notifications', 'new_notification', {\n        message: message\n    })\nend\n```\n\nNow, on the client, let's call `toastr.success` in our `new_notification` Pusher callback.\n\n``` javascript\nnotificationsChannel.bind('new_notification', function(notification){\n    var message = notification.message;\n    toastr.success(message)\n});\n```\n\nSo, test it out! You can open up a new browser window to check it works.\n\n\n## What Now?\n\nTry out our (only slightly) [prettier demo](https://pusher.com/demos/notify) in multiple browser windows or in your browser and on your phone / tablet.\n\nHave a look at [our documentation](https://pusher.com/docs) to other ways in your can integrate Pusher into your application.\n\nTo extend what you've built, you might want to have a look at the [other types of notification](http://codeseven.github.io/toastr/demo.html) Toastr can provide.\n\nAlternatively, you could exclude the sender of the notification from receiving the alert, by using `socket_id`s to [filter recipients](https://pusher.com/docs/server_api_guide/server_excluding_recipients).\n\nHere are links to other Javascript notification libraries you can use:\n\n* [Notify.js](http://notifyjs.com/)\n* [Noty](http://ned.im/noty/)\n* [Alertify.js](http://fabien-d.github.io/alertify.js/)\n* [Humane.js](http://wavded.github.io/humane-js/)\n* [jGrowl](https://github.com/stanlemon/jGrowl)\n","metaTitle":"Build realtime notifications for HTML5 apps using Ruby","metaDescription":"Discover how you can add realtime notifications to HTML5 apps with Ruby and Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5hWqvSe97Goim0YE4agS8y","type":"Entry","createdAt":"2018-02-27T10:49:06.540Z","updatedAt":"2020-06-19T13:28:01.771Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build realtime updates and native push notifications using Cordova","url":"updates-native-push-notifications-cordova","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3hD9fyGZ7ySCAMcMSWCAk","type":"Entry","createdAt":"2018-02-20T11:23:17.901Z","updatedAt":"2018-02-20T11:23:17.901Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Nick Farrant","url":"nick-farrant","email":"nick@pusher.com","twitter":"https://twitter.com/nickjf89","github":"https://github.com/nickjf89","guestWriter":false}}],"products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2ogfivX0dSCcEuKkCOwAKe","type":"Entry","createdAt":"2018-02-12T14:50:39.667Z","updatedAt":"2018-02-26T12:31:15.529Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Cordova","url":"cordova","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}}],"reviewDate":"2016-12-06","description":"Build a cross-platform application with a single HTML/CSS/JS code-base with Cordova and use Pusher to implement iOS Push Notifications.","prerequisite":"A good knowledge of JavaScript is needed to follow this tutorial.","content":"## Objectives\n\n- To build a cross-platform application with a single HTML/CSS/JS code-base with Cordova\n- To use Pusher to update the UI across platforms\n- To implement native iOS Push Notifications with Pusher's API\n- To implement **_unified messages_** to send arbitrary messages which abstracts realtime messages and Push Notifications for a seamless UX\n\n## What is Cordova?\n\n\u003ePhoneGap proper was created around 2009 by a startup called Nitobi as an open source way to access the “native” environment through an embedded Web View in a native app. The goal of the project was to make it possible to build the bulk of a mobile app experience with pure web technologies like HTML5, CSS, and Javascript, but still be able to call into native code when necessary.\n\u003e\n\u003eIn 2011 Adobe purchased Nitobi and with it the rights to the PhoneGap brand, and the open source core was donated to the Apache Software Foundation under the name Cordova.\n\n[Read more here.](http://blog.ionic.io/what-is-cordova-phonegap/)\n\n## Getting started with Cordova\n\n### Install Cordova CLI\n\n`sudo npm install -g cordova`\n\n### Create new app\n\n`cd` to where you want to create your app, and run:\n\n`cordova create pusher-cordova com.domain.pusher-cordova PusherCordova`\n\nThis will create an app in the folder `./pusher-cordova` with id `com.domain.pusher-cordova` and the app name in the `config.xml` will be `PusherCordova`.\n\nThe id `com.domain.pusher-cordova` is important here, as this will determine the `bundle_id` in your iOS application, which must match the `bundle_id` in your APNs certificate for push notifications to work.\n\n### Platforms\n\n#### Add browser platform\n\n`cd pusher-cordova`\n\n`cordova platforms add browser`\n\nYou'll likely see an error, but you can ignore this as it doesn't affect the application.\n\nBuild and run the browser to start a local server and view your app.\n\n`cordova build browser`\n\n`cordova run browser`\n\n![updates-native-push-notifications-cordova-confirmation](//images.contentful.com/1es3ne0caaid/3m4Pq2Auh2MMsqOiqM0IyY/cdee651b531d0e51a7fe580ed43ecc94/updates-native-push-notifications-cordova-confirmation.png)\n\n#### Add iOS platform\n\nOpen up another terminal window (as you need to keep the browser server running), `cd` to your app and run:\n\n`cordova platforms add ios`\n\nRun `cordova requirements` to check the dependancies for your platforms. You'll probably see a bunch of warnings and errors (you can ignore the browser error again). \n\nFollow the instructions to install anything missing for iOS.\n\nRun `cordova build ios` to compile the iOS project for the first time, which will create a `.app` file in `./platforms/ios/build/emulator`.\n\nAt this point you'll get a codesign error. This is normal. Go to `./platforms/ios/` and open `PusherCordova.xcodeproj`. Codesign the application using your Apple Developer account with the correct provisioning profile and `bundle_id` (details above in _Prerequisites_).\n\nYou'll also see a couple of warnings in Xcode that recommend updating some settings. Go ahead and fix these so that your project is nice and clean.\n\nRun `cordova build ios` again.\n\nWatch this build succeed, then run:\n\n`cordova emulate ios`\n\nThis will deploy to iPhone SE simulator by default, and you'll see the app load and look identical to the browser's UI.\n\n![updates-native-push-notifications-cordova-mobile-confirmation](//images.contentful.com/1es3ne0caaid/47XEuw6AOImw2Q8oegIiUS/407a64e756f35138d6ad6c9d2d9a96d6/updates-native-push-notifications-cordova-mobile-confirmation.png)\n\nLet's now get the app running on an iOS device. Make sure you've got a device connected via USB and run:\n\n`cordova run ios --device`, watch the build succeed and see the app load on your device.\n\n![updates-native-push-notifications-cordova-device-ready](//images.contentful.com/1es3ne0caaid/19bcSPzYxu6eIu2WIGwgOo/77f8ea6f37497090c4b2a7f7d024596c/updates-native-push-notifications-cordova-device-ready.png)\n\n### Update HTML and see changes across platforms\n\nSo, we can see that a single HTML/CSS/JS code-base runs cross-platform, now let's see how easy it is to make changes to this code and update the UI.\n\nOpen up `./www/index.html` in an editor, and change the line of code:\n\n`\u003ch1\u003eApache Cordova\u003c/h1\u003e`\n\nto this:\n\n`\u003ch1\u003eCool, it works!\u003c/h1\u003e`\n\nStop and restart the browser server (`CTRL+C` then `cordova run browser`), and re-run `cordova emulate ios` and you'll see the text across both platforms is now updated. Pretty cool!\n\n![updates-native-push-notifications-cordova-mobile-web-confirmation](//images.contentful.com/1es3ne0caaid/5Jik8I37sAqsU4GWKMyqkg/f984877f981a4679fd782dcec2295c5a/updates-native-push-notifications-cordova-mobile-web-confirmation.png)\n\n## Realtime updates with Pusher\n\nRight, so the _real_ reason we're here; Pusher!\n\nEven though we're building a cross-platform application for both web and iOS, we'll only need to use [Pusher-JS](https://github.com/pusher/pusher-js), our JavaScript client library to get realtime updates.\n\nSo, let's start by adding some code to `./www/index.html` in `\u003chead\u003e`:\n\n\n```\n\u003c!-- PUSHER --\u003e\n\n\u003ctitle\u003ePusher Cordova\u003c/title\u003e\n\u003cscript src=\"https://js.pusher.com/3.2/pusher.min.js\"\u003e\u003c/script\u003e\n\u003cscript\u003e\n\n// Initialise a new Pusher object\nvar pusher = new Pusher('APP_KEY', {\n    encrypted: true\n});\n\n// Bind to the connection's state-change event\n// So we can update the UI based on the changes\npusher.connection.bind('state_change', function(states) {\n    document.getElementById(\"pusher-event\").innerHTML = states.current;\n    var state = pusher.connection.state;\n    console.log(\"connection state: \" + state);\n});\n\n// Also subscribe to a channel and bind to an event\n// Update the UI when a new message is received\nvar channel = pusher.subscribe('cordova');\nchannel.bind('cordova-event', function(data) {\n    document.getElementById(\"pusher-event\").innerHTML = data.message;\n});\n\n\u003c/script\u003e\n```\n\nYou'll need to remove the **Content Security Header** in the `\u003chead\u003e`, as this will block the connection to Pusher.\n\n```\n\u003cmeta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self' data: gap: https://ssl.gstatic.com 'unsafe-eval'; style-src 'self' 'unsafe-inline'; media-src *; img-src 'self' data: content:;\"\u003e\n```\n\nChange the following line of code:\n\n`\u003ch1\u003eCool, it works!\u003c/h1\u003e`\n\nto:\n\n`\u003ch1 id=\"pusher-event\"\u003eCool, it works!\u003c/h1\u003e`\n\nThis HTML element is where all our realtime UI updates will happen.\n\nNow, we're all set. Run `cordova run browser`, `cordova emulate ios` and `cordova run ios --device` again to compile these changes.\n\n![updates-native-push-notifications-cordova-connected-device](//images.contentful.com/1es3ne0caaid/1DXfNKR5a4QkCoYsqaMCoo/9b510ba4cb9f902fd62b49895c409400/updates-native-push-notifications-cordova-connected-device.png)\n\nThe first thing you'll notice is that the UI is updating based on Pusher's `connection-state`.\n\nNow head on over the the [Pusher Dashboard](http://dashboard.pusher.com), go to your app's debug console, and use the event creator to trigger a message to channel `cordova` and event `cordova-event`.\n\nYou should now see the UI update with the `message` value of the event data you just triggered.\n\n![updates-native-push-notifications-cordova-send-event](//images.contentful.com/1es3ne0caaid/5JDmApLJYWsiqgAo4uG4q2/e24802b01fec423a09e92af7cadcf343/updates-native-push-notifications-cordova-send-event.gif)\n\nIf you do, then it works! Otherwise, have another read over the stuff above and try again - you may have missed a small detail.\n\n_**Your Pusher application now works on the web and on iOS, and you only had to update your HTML and rebuild!**_\n\n## Native Push Notifications in Cordova\n\nReceiving push notifications on an iOS app built with Cordova very easy. In fact, it's no different to implementing this feature in a native iOS application, as everything is still handled through Xcode.\n\nThere are Cordova plugins available that allow you to handle APNs in HTML and Javascript and therefore keep all your code in one place, but Pusher's Beams API doesn't have a Javascript client SDK, so we won't be doing this. Instead, we'll be adding a small amount of code to the Xcode project you opened earlier. \n\n### PusherSwift\n\n[PusherSwift](http://www.github.com/pusher/pusher-websocket-swift) is our official iOS library. Magically, it also works with Objective-C! This is very good news, as Cordova doesn't support Swift yet in the sense that the Xcode project it creates for your iOS platform is written in Objective-C. Again, there are plugins and Cocoapods available and you could always build your own project from scratch rather than use Cordova's template, but thanks to PusherSwift being so clever we don't need to do that!\n\n### Cocoapods\n\nIf you've ever used PusherSwift before, the chances are you installed it with [Cocoapods](http://www.cocoapods.org).\n\nAnnoyingly, Cordova doesn't work so well with Cocoapods. Why? I'm not really sure, but after running into error after error, hitting brick wall after brick wall, some searches on Stack Overflow confirmed my suspicions that Cocoapods just don't work so well in Cordova - especially ones that use bridging headers, like PusherSwift.\n\nFear not. This _actually_ makes everything that little bit simpler, as Cocoapods can be quite a difficult beast when it doesn't get it's own way, and we can just import PusherSwift as a framework instead.\n\nThis isn't ideal in all cases, as Cocoapods does make it easy to keep dependancies up to date, but we just need the one framework for this project so that's what we'll do.\n\n### Importing the PusherSwift Framework\n\nHead over to the [releases page](https://github.com/pusher/pusher-websocket-swift/releases) for PusherSwift and download the file `PusherSwift.framework.zip` from the latest release (`4.0.1` at the time of writing this).\n\nLocate and unzip the downloaded `PusherSwift.framework.zip`, and you'll find `PusherSwift.framework` at the path `./Carthage/Build/iOS`. Drag and drop the file into the Xcode project that you opened earlier.\n\nYou should add the framework file to **Embedded Binaries** in the target's General settings. This also adds a duplicate to **Linked Frameworks and Libraries**, so you need to remove one of them.\n\n![updates-native-push-notifications-cordova-import-pusherswift](//images.contentful.com/1es3ne0caaid/4uV0T9KrLGG60wOMY6ou6E/5fde7e8836b92655739e93e215abd117/updates-native-push-notifications-cordova-import-pusherswift.png)\n\nLastly, go to the target's Build Settings and find the **Always Embed Swift Standard Libraries** setting, and change the value to `Yes`.\n\n![updates-native-push-notifications-cordova-embed-standard-libraries](//images.contentful.com/1es3ne0caaid/3FedTeC6YgWo4QiymWWKck/3d79eea43fbd0e5232e24e2e0668cc3c/updates-native-push-notifications-cordova-embed-standard-libraries.png)\n\nBuild the project in Xcode, and you should see it succeed with no errors or warnings. Bosh!\n\n### Registering your Application for Push Notifications\n\nIf you've set up an iOS application for Push Notifications before, you'll be familiar with this next part. If you've set up Push Notifications with Pusher's API before, then you'll be _very_ familiar with it.\n\nOpen up `AppDelegate.m`, and add the following:\n\n```\n@import UserNotifications;\n#import \u003cPusherSwift/PusherSwift-Swift.h\u003e\n\n@interface AppDelegate ()\n\n@property (nonatomic, retain, readwrite) Pusher *pusher;\n\n@end\n```\n\nYou can see that we are importing the bridging header for PusherSwift which will allow us to use the library in Objective-C. We are also creating a new Pusher object.\n\nIn `applicationDidFinishLaunchingWithOptions`, the code will look slightly different to how it usually would, due to some changes made by Cordova.\n\nYou'll see:\n\n```\nself.viewController = [[MainViewController alloc] init];\n\nreturn [super application:application didFinishLaunchingWithOptions:launchOptions];\n```\n\nNow we need to initialise the Pusher object we created, so change the method to look like this:\n\n```\nself.viewController = [[MainViewController alloc] init];\n\nself.pusher = [[Pusher alloc] initWithKey:@\"APP_KEY\"];\n\nreturn [super application:application didFinishLaunchingWithOptions:launchOptions];\n```\n\nUnfortunately, this does mean we are initialising 2 Pusher objects; one here and another in our Javascript code. This is unavoidable, however if you were building separate native application this would also be the case.\n\nAdd this code to the same method to register the app for Push Notifications:\n\n```\nUNUserNotificationCenter *center = [UNUserNotificationCenter currentNotificationCenter];\n\n[center requestAuthorizationWithOptions:(UNAuthorizationOptionBadge | UNAuthorizationOptionAlert | UNAuthorizationOptionSound) completionHandler:^(BOOL granted, NSError * _Nullable error) {\n    // Enable or disable features based on authorisation.\n}];\n    \n[application registerForRemoteNotifications];\n```\n\nThis will prompt the app to ask the user to let you send them Push Notifications when they first launch it, so run:\n\n`cordova run ios --device`\n\n![updates-native-push-notifications-cordova-request](//images.contentful.com/1es3ne0caaid/coZON89AWIuccwCQeKgEo/4c1c9c270b978ffd03843411fee35f78/updates-native-push-notifications-cordova-request.png)\n\nNow we want to register the individual device to APNs using it's `deviceToken`, and also subscribe it to a Pusher `interest`.\n\n```\n- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n    NSLog(@\"Registered for remote notifications; received device token\");\n    [[[self pusher] nativePusher] registerWithDeviceToken:deviceToken];\n    [[[self pusher] nativePusher] subscribeWithInterestName:@\"cordova\"];\n}\n```\n\nHead over to app target's capabilities and switch the Push Notifications capability on, otherwise `didFailToRegisterForRemotePushNotifications` will be called, and that's not what we want!\n\n![updates-native-push-notifications-cordova-on-slide](//images.contentful.com/1es3ne0caaid/43g5VteZfG4WokmMwuc2Q/d37bfdfd4e5de06bd6ed1f72569567da/updates-native-push-notifications-cordova-on-slide.png)\n\nNext, add the handler for when the device receives a Push Notification:\n\n```\n- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo {\n    NSLog(@\"Received remote notification: %@\", userInfo);\n}\n```\n\nThis method simply prints the notification payload.\n\nThat's it! That's all the Objective-C code we need to write in order for our application to receive Push Notifications.\n\n### Triggering Push Notifications\n\nNow we want to see the fruits of our labour, so we want to trigger a Push Notification. We can't do that from the debug console like realtime messages so we need to write a server application.\n\nFor this example, our server will be written in Node JS.\n\nStart by installing Pusher globally with npm if you haven't already.\n\n`npm install pusher`\n\nChange directory to the project root, and do:\n\n`touch server.js`\n\n`open server.js`\n\nCreate and initialise a Pusher object:\n\n```\nvar Pusher = require(\"pusher\");\n\nvar pusher = new Pusher({\n  appId: \"APP_ID\",\n  key: \"APP_KEY\",\n  secret: \"APP_SECRET\"\n});\n```\n\nTrigger a realtime message for good measure to be sure that you've used right keys. Add this code:\n\n`pusher.trigger('cordova', 'cordova-event', { message: 'Wow! I am triggering a real-time message from my server!' });`\n\nand from your Terminal, run:\n\n`node server`\n\nYou should see the message in your app's updated UI.\n\n![updates-native-push-notifications-cordova-trigger-confirmation](//images.contentful.com/1es3ne0caaid/4MweeUlW64Ky8OQ8W4IsKM/4b7ac85ce0f4c5e40ad69b763b4c5d67/updates-native-push-notifications-cordova-trigger-confirmation.png)\n\nNow comment out the realtime trigger code and add the following code to trigger a Push Notification:\n\n```\npusher.notify(['cordova'], {\n\tapns: {\n\t  aps: { \n\t    alert: { \n\t      title: 'Update from Pusher',\n\t      body: 'Wow! I am triggering a Push Notification from my server!'\n\t    }\n\t  }\n\t},\n\twebhook_url: \"https://example.com/endpoint\",\n\twebhook_level: \"INFO\"\n});\n```\n\nClose the app on your iOS device, and run `node server`. You should see the Push Notification on your device.\n\n![updates-native-push-notifications-cordova-example](//images.contentful.com/1es3ne0caaid/2vl9aJu55Cs0Mwe4SuMOgq/4c527222aa65f3afb4a32a19ebe0a59f/updates-native-push-notifications-cordova-example.png)\n\nSo we can use the server to send realtime messages, which shows on our web apps and mobile apps with just a little bit of JavaScript and html, that's pretty cool! We can also use Pusher's API to send a Push Notification from our server to our iOS application. That's cool too!\n\nWhat would be really cool, though, is to send an arbitrary \"message\" and abstract whether or not it is a realtime message or a Push Notification. So, the web app will get the realtime message as normal,  and the iOS will get it if the app is open. But if the app isn't open, it will receive a Push Notification instead and the user experience then becomes fairly seamless.\n\n### Unified Messages\n\nThe approach we will take for this is a bit hacky, and isn't something you'd really want to do in a production app, but it's a nice example of how you can set up realtime events in javascript, Push Notifications natively in iOS and bring the two together. For the purposes of this example, I'm calling these **unified messages**.\n\nSo, to get this done we need to define a few functions and variables.\n\nFirst, let's define an enum-esque variable (I'm not entirely sure how enums really work, or if they even _technically_ exist, in Javascript; but this works a treat anyway) to identify whether the messages we're sending is intended to be a _unified_ message, or simply just a realtime message or a Push Notification independently. \n\nAdd this code under where you initialised your Pusher object:\n\n```\nvar messageType = {\n  unified: 0,\n  realtime: 1,\n  push: 2\n};\n```\n\nOur main function, the function that will be called to send these arbitrary messages, will simply be `sendMessage()`, and will be defined like so:\n\n`sendMessage(type, topic, message)`\n\nSo `sendMessage()` takes 3 parameters; `type` which is of type _messageType_ (too many _types_ there...), `topic` which equates to either a realtime message _channel_, or a Push Notification _interest_ and is of type _string_, and lastly `message` which is another _string_ and is simply the message you want to send.\n\nSo, add this:\n\n```\nfunction sendMessage(type, topic, message) {\n  switch (type)\n  {\n    case messageType.unified:\n      sendRealtimeMessage(topic, message);\n      sendPushNotification(topic, message);\n      break;\n    case messageType.realtime:\n      sendRealtimeMessage(topic, message);\n      break;\n    case messageType.push:\n      sendPushNotification(topic, message);\n      break;\n    default:\n      console.log('Message type not defined correctly. Please use: messageType.unified, .realtime or .push');\n      break;\n  }\n};\n```\n\nFrom this, you'll be able to see that we need to define a couple more functions, `sendRealtimeMessage()` and `sendPushNotification()`. The code for these is already written as we used it earlier. Result!\n\nSo, add this function below `sendMessage()`:\n\n```\nfunction sendRealtimeMessage(channel, message) {\n  console.log('Sending Realtime Message');\n  pusher.trigger(channel, 'cordova-event', { message: message });\n}\n```\n\nThe function takes a `channel` parameter, which is the `topic` string from our `sendMessage()` function, and a `message` parameter, which (yes, you guessed it!) is the `message` parameter from our `sendMessage()` function.\n\nSo, onto the `sendPushNotification` function. Add this:\n\n```\nfunction sendPushNotification(interest, message) {\n  console.log('Sending Push Notification');\n  \n  // APNs\n  pusher.notify([interest], {\n    apns: {\n      aps: { \n        alert: { \n          title: 'Update from Pusher',\n          body: message\n        }\n      }\n    },\n    \n    // GCM\n    \n    webhook_url: \"https://example.com/endpoint\",\n    webhook_level: \"INFO\"\n  });\n};\n```\n\nJust like `sendRealtimeMessage`, this function takes an `interest` parameter from `sendPushNotification()`'s `topic`, and a `message` parameter, which...well, you know what that is!\n\nYou'll notice the `// GCM` comment, which indicates that you can add the payload for a GCM Push Notification in this function later on, and calling the arbitrary `sendMessage()` function will just work across all platforms like **magic** without changing anything else on the server-side.\n\nSo we're done. The last thing to do before testing that everything works is to call our `sendMessage()` function!\n\nSo add this above where we defined the function itself:\n\n```\nvar message = \"Wow! It works!\";\nvar topic = \"cordova\";\n\nsendMessage(messageType.unified, topic, message);\n```\n\nRun `cordova run ios --device`, `cordova emulate ios` and `cordova run browser`, then run `node server`.\n\nThe first thing you'll notice is that the `pusher-event` HTML element changes on the browser and on iOS as it did before. Great, that's a good sign!\n\nNow, press the home button on your iOS device to send the app to the background.\n\nRun `node server` again.\n\nAnd there it is. The magic. You should see that the browser updates the HTML element as normal, but your iOS device received a Push Notification!\n\n![updates-native-push-notifications-cordova-example-2](//images.contentful.com/1es3ne0caaid/12uhyu0WdGMY64wOyWKySU/73421c78f721ceac38901ddf768673a5/updates-native-push-notifications-cordova-example-2.png)\n\n![updates-native-push-notifications-cordova-confirmation-desktop](//images.contentful.com/1es3ne0caaid/4c1UCGO6g0cuCkkQwkIK82/96b15c7941eec4d3214752a2b16c03af/updates-native-push-notifications-cordova-confirmation-desktop.png)\n\n![updates-native-push-notifications-cordova-confirmation-ios](//images.contentful.com/1es3ne0caaid/4phydaHj04Keggq8mmAS66/c862b55a7ba1cf3b0899142b05d97158/updates-native-push-notifications-cordova-confirmation-ios.png)\n\nConveniently, iOS by default doesn't handle Push Notifications when the app is in the foreground. The notification is still being received, but the app isn't doing anything with it. It's easy to add this handling, but for this example we don't want or need it.\n\nWhat's also really cool is that tapping on the notification to bring the app into the foreground again shows that the HTML element has updated there too (though this doesn't work if the app wasn't in the background in the first place ?).\n\nSo there you have it - a cross-platform application that receives realtime updates and native Push Notifications seamlessly.\n\n## Related Reading\n\n- [Get started with Apache Cordova](https://cordova.apache.org/#getstarted)\n- [Get started with PhoneGap](http://phonegap.com/getstarted/)\n- [Send iOS 10 Push Notifications with Pusher's API](https://blog.pusher.com/how-to-send-ios-10-notifications-using-the-push-notifications-api/)","metaTitle":"Build realtime updates and native Push Notifications","metaDescription":"Build a cross-platform application with a single HTML/CSS/JS code-base with Cordova and use Pusher to implement iOS Push Notifications."}}],"defaultValue":"Channels \u0026 Beams","queryType":"tag","pages":3,"route":"/tutorials","query":{"product":"Channels","tag":"Beams","page":"3"}}},"page":"/tutorials","query":{"product":"Channels","tag":"Beams","page":"3"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=Beams&page=3 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:43:49 GMT -->
</html>