<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&page=24 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:47:07 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">296</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorials.html" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorials1bbb.html?product=Beams" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials043b.html?product=Channels&amp;tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value=""/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:none;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/geolocation-sharing-react-native.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Location<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li></ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a geolocation sharing app with React Native</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Discover how to build a location sharing app with React Native, Google Maps and Facebook.</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/monitor-api-go.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">jQuery<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Feeds</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Monitor APIs in realtime using Go</h3><p class="css-k12xad e5jrto45">In this article, you will learn how to realtime monitoring of a small API built using Go and jQuery.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-map-kotlin.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Maps<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Android</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime map using Kotlin</h3><p class="css-k12xad e5jrto45">In this tutorial, you will learn how to build a realtime map using Kotlin, Node.js and Google Maps API.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/cryptocurrency-tracker-vue.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Trading<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a cryptocurrency tracker using Vue.js</h3><p class="css-k12xad e5jrto45">In this tutorial, learn how to build a live cryptocurrency tracking view with Progressive Web Apps, Vue.js and Node.js.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-map-aspnet.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Maps<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Location<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">ASP.NET</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime map using ASP.NET</h3><p class="css-k12xad e5jrto45">Build a realtime map using ASP.NET and Pusher. </p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/activity-feed-flask.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flask<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Python<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">HTML</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an activity feed with Flask</h3><p class="css-k12xad e5jrto45">In this tutorial, we will cover how to build a live blog feed using Flask and HTML.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-comments-nestjs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Live Comments<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">TypeScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime comments feature with Nest.js</h3><p class="css-k12xad e5jrto45">Leverage from the power of Next.js and TypeScript and build a live comments feature into your application.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/realtime-table-android.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Java<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a realtime table with Android </h3><p class="css-k12xad e5jrto45">In this tutorial, build a simple live table for Android devices with Java.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/react-websockets.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">React<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Making React realtime with websockets</h3><p class="css-k12xad e5jrto45">Build a chat application using React and Pusher. </p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialse657.html?product=Channels&amp;page=23" class="css-5s6711 edg0byb1">Prev</a><a href="tutorialse35b.html?product=Channels&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorials81f8.html?product=Channels&amp;page=22" class="css-za1ua3 edg0byb1">22</a><a href="tutorialse657.html?product=Channels&amp;page=23" class="css-za1ua3 edg0byb1">23</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials3b09.html?product=Channels&amp;page=24" class="css-2wakph edg0byb1">24</a><a href="tutorialsd0f0-2.html?product=Channels&amp;page=25" class="css-za1ua3 edg0byb1">25</a><a href="tutorials9d36.html?product=Channels&amp;page=26" class="css-za1ua3 edg0byb1">26</a><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials20e0.html?product=Channels&amp;page=33" class="css-5s6711 edg0byb1">33</a><a href="tutorialsd0f0-2.html?product=Channels&amp;page=25" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":296,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6opHW5cgXmocGsG8OICKui","type":"Entry","createdAt":"2018-02-28T12:31:41.382Z","updatedAt":"2020-06-19T11:12:25.627Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a geolocation sharing app with React Native","url":"geolocation-sharing-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/locSharer","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2018-02-13","description":"Discover how to build a location sharing app with React Native, Google Maps and Facebook.","prerequisite":"A basic understanding of React is needed to follow this tutorial.","content":"In this tutorial we'll be building a location-sharing app with React Native and Pusher. By reading this tutorial, you will learn how to use the geolocation functionality in React Native, and broadcast the geolocation data with Pusher. You will also learn how to integrate Facebook login into the app.\n\n## Prerequisites\n\nYou will need the following in order to follow the tutorial:\n\n- **React Native development environment** - if you don’t have a machine setup for React Native development, be sure to check out the [official docs on how to get started](https://facebook.github.io/react-native/docs/getting-started.html). \n- **Genymotion Emulator** - this is used for testing the app later on. You can actually use your Android smartphone as well, but Genymotion really makes it easy to test geolocation using their GPS emulator.\n- **Pusher app** - you’ll need to create a [Pusher account](https://pusher.com/) in order to use Pusher’s services. A Pusher account is free to create and it even provides you with ample resources for testing the service. Once you have an account, create an app which will be used for connecting to Pusher.\n- **Facebook app** - this is required because we’ll be using Facebook login for the app.\n- **Google project** - this is required because Google Maps is used for the map display. \n\nIn the following sections, I’ll be showing you how to create the Pusher, Facebook, and Google project.\n\n## Creating the Pusher app\n\nOnce you’re logged in to your Pusher account, go to your Dashboard and look for the menu for creating a new app. Set the name of the app to “locSharer”, and select the cluster nearest to your location. Click on the **Create my app** button to create the app. Once the app is created, click on the **App Settings** tab and enable **Client Events**. We need this because we’ll be sending events directly from the app. After that, click on the **App Keys** tab and copy the credentials somewhere where you can easily access it later on. We’ll be needing it later once we start configuring the app.\n\n## Creating the Facebook app\n\nThe minimum requirement for creating a Facebook app is for you to have a [Facebook account](https://www.facebook.com/). Once you’re logged in to your account, go to the [Facebook developers website](https://developers.facebook.com/) and create a new app. Set the **Display Name** to “locSharer”. Once the app is created, add Android as a platform then set the following details:\n- **Google Play Package Name:** com.locsharer\n- **Class Name:** com.locsharer.MainActivity\n\nNext, generate a key hash to be used for development:\n\n```\n    keytool -exportcert -alias androiddebugkey -keystore ~/.android/debug.keystore | openssl sha1 -binary | openssl base64\n```\n\nThe command above generates a 28-character key hash. Paste the value under the **Key Hashes** field and save the changes. This step ensures the authenticity of the interactions between your app and Facebook, thus it’s a required step even for the development environment. You can find more information about this on the [Facebook login documentation for Android](https://developers.facebook.com/docs/facebook-login/android).\n\n## Creating the Google project\n\nJust like Facebook, you need to have a [Google account](https://accounts.google.com/) in order to create a Google project. Once you’re logged in to your Google account, go to the [Google Developer Console](https://console.developers.google.com) and create a project. Set the project name to “locSharer”. Once the project is created, click on **Enable APIs and Services** button. From there, look for **Google Maps Android API** and enable it. Next, click on the **Credentials** tab and create an API key. Once the key is created, it will ask you to restrict access. Set the key restriction to Android. Then you can use the same keystore you used for Facebook:\n\n```\n    keytool -list -v -keystore ~/.android/debug.keystore\n```\n\nThe command above allows you to get the sha1 hash. Look for it, copy the corresponding value and paste it under the **SHA-1 certificate fingerprint** field. Also enter the package name of the app (com.locsharer) then save the changes.\n\n## App overview\n\nAs mentioned earlier, we will be creating a location-sharing app. First the user has to login with their Facebook account:\n\n![geolocation-sharing-react-native-facebook-login](//images.contentful.com/1es3ne0caaid/5dif372kqQoCYuaecSuwOO/81102259c3abfad218e86f1c9f756b07/geolocation-sharing-react-native-facebook-login.png)\n\nOnce logged in, the user can enable location-sharing so that their friends can see their current location when they view them:\n\n![geolocation-sharing-react-native-share-location-request](//images.contentful.com/1es3ne0caaid/37GTp0ialyCyGEiA2WcsgW/6c662f6de2fefc07d62babf76cfdd636/geolocation-sharing-react-native-share-location-app.png)\n\nIf the user has friends who are also using the app, they will be listed below the user’s details. Tapping on a friend will display a map which gets updated based on their current location (but only if they have enabled location sharing). The current location is indicated by a marker: \n\n![geolocation-sharing-react-native-demo](//images.contentful.com/1es3ne0caaid/6C3kc9JER2UkwgkIueuiE4/db32f985e8a0c9125ddbbba360257c50/geolocation-sharing-react-native-demo.png)\n\n## Creating the server\n\nJust like every other Pusher app integration, this app needs a server component as well. The server’s job is to authenticate the requests coming from the app. This allows us to make sure that the request is indeed coming from the app and not anywhere else.\n\nStart by creating a new folder for the server-related files. Inside the folder, run `npm init` to initialize a new project. Simply press enter until it asks you to confirm the project details. Once you get to that, just respond with yes.\n\nNext, install the packages that we’ll be needing:\n\n```\n    npm install --save express body-parser pusher\n```\n\nOnce the packages are installed, create a `server.js` file. Start by including the packages we just installed:\n\n```\n    var express = require('express');\n    var bodyParser = require('body-parser');\n    var Pusher = require('pusher');\n    \n    var app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n```\n\nNext, add the code for connecting to Pusher. The Pusher app credentials are being loaded as environment variables. As you have seen from the code below, we’re not really using a module for loading environment variables from a `.env` file. Later I’ll show you how the values are being supplied.\n\n```\n    var pusher = new Pusher({ \n      appId: process.env.APP_ID, \n      key: process.env.APP_KEY, \n      secret:  process.env.APP_SECRET,\n      cluster: process.env.APP_CLUSTER, \n    });\n```\n\nAdd a route for verifying if the server is really working:\n\n```\n    app.get('/', function(req, res){ \n      res.send('server is running');\n    });\n```\n\nAdd the code for authenticating users that are connecting to your Pusher app. This contains the unique key that we will use later on to check whether the request has indeed come from the app.\n\n```\n    app.post('/pusher/auth', function(req, res) {\n      var socketId = req.body.socket_id;\n      var channel = req.body.channel_name;\n      var auth = pusher.authenticate(socketId, channel);  \n      var app_key = req.body.app_key;\n      if(app_key == process.env.UNIQUE_KEY){\n        var auth = pusher.authenticate(socketId, channel);\n        res.send(auth);\n      }\n      \n      res.send(auth);\n    });\n```\n\nInitiate the server on the port set in the environment variables. Normally this would be served on port 80:\n\n```\n    var port = process.env.PORT || 5000;\n    app.listen(port);\n```\n\n## Deploying the server\n\nThe server needs to be accessible via the internet. One service that allows us to do this for free is [Now](https://zeit.co/now)*.* **You can install Now **globally with the following command:\n\n```\n     npm install -g now\n```\n\nOnce installed, you can now add your Pusher app credentials as a secret. One caveat of Now is that all the files for the deployed projects are available publicly. This means that the values in the `.env` files are publicly available as well. Adding those values as a secret means that it won’t be accessible anywhere.\n\n```\n    now secret add locshare_app_id YOUR_PUSHER_APP_ID\n    now secret add locshare_app_key YOUR_PUSHER_APP_KEY\n    now secret add locshare_app_secret YOUR_PUSHER_APP_SECRET\n    now secret add locshare_app_cluster YOUR_PUSHER_APP_CLUSTER\n    now secret add locshare_unique_key YOUR_UNIQUE_KEY\n```\n\nDon’t forget to replace the values with your actual Pusher app credentials.\n\nOnce that’s done, you can deploy the server:\n\n```\n    now -e APP_ID=@locshare_app_id -e APP_KEY=@locshare_app_key -e APP_SECRET=@locshare_app_secret APP_CLUSTER=@locshare_app_cluster -e UNIQUE_KEY=@locshare_unique_key\n```\n\nWhat the command above does is deploy the server, as well as setting the environment variables using the `-e` option. The secret values that you’ve added earlier are accessed by using the `@` sign. When the process is completed, it should return a URL pointing to the server. Access that in the browser to check whether the server is running or not.\n\n## Creating the App\n\nIt’s now time to create the actual app. Start by generating a new React Native project:\n\n```\n    react-native init LocSharer\n```\n\n### Installing and configuring the dependencies\n\nNext install the dependencies of the app:\n\n```\n    npm install --save prop-types pusher-js react-native-facebook-login react-native-maps react-navigation\n```\n\nHere’s a brief overview of what each package does:\n- **prop-types** - for specifying the intended types of properties passed to components.\n- **pusher-js** - for interacting with Pusher.\n- **react-native-facebook-login** - for implementing Facebook login.\n- **react-native-maps** - for displaying Google Maps and markers.\n- **react-navigation** - for implementing Stack navigation within the app. \n\nAdditional steps are required in order for Facebook login and Google Maps to work. We’ll look at how to do that in the sections to follow.\n\n#### Configuring Facebook login\n\nThe following steps assumes that you have already created a Facebook app. So create one, if you haven’t done so already.\n\nOnce you’ve created a Facebook app, open the `android/settings.gradle` file and add the following to the bottom of the file:\n\n```\n    include ':react-native-facebook-login'\n    project(':react-native-facebook-login').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-facebook-login/android')\n```\n\nNext, open the  `android/app/build.gradle` file and add the following inside the `dependencies`:\n\n```\n    dependencies {\n      ...\n      compile project(':react-native-facebook-login')\n    }\n```\n\nNext, register the React package by opening the `android/app/src/main/java/com/{YOUR PACKAGE NAME}/MainApplication.java` file, and adding the following:\n\n```\n    // top of the file\n    import com.magus.fblogin.FacebookLoginPackage; // \u003c--- add this\n    \n    public class MainApplication extends Application implements ReactApplication {\n    \n      ...\n    \n      @Override\n      protected List\u003cReactPackage\u003e getPackages() {\n          return Arrays.\u003cReactPackage\u003easList(\n              new MainReactPackage(),\n              new FacebookLoginPackage() // \u003c--- add this\n          );\n      }\n    \n      ...\n    }\n```\n\nNext, open the `android/app/src/main/res/values/strings.xml` file and add the details of the Facebook app you created earlier:\n\n```\n    \u003cresources\u003e\n      \u003cstring name=\"app_name\"\u003e{YOUR FACEBOOK APP NAME}\u003c/string\u003e\n      \u003cstring name=\"fb_app_id\"\u003e{YOUR FACEBOOK APP ID}\u003c/string\u003e\n      \u003cstring name=\"fb_login_protocol_scheme\"\u003efb{YOUR FACEBOOK APP ID}\u003c/string\u003e\n    \u003c/resources\u003e\n```\n\nLastly, open the `android/app/src/main/AndroidManifest.xml`  file and add the following:\n\n```\n    \u003cmanifest \n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:tools=\"http://schemas.android.com/tools\" \u003c-- add this\n      package=\"com.your.app.namespace\"\u003e\n    \n      \u003capplication\n        ...\n        \n        \u003c!--add FacebookActivity--\u003e\n        \u003cactivity \n          tools:replace=\"android:theme\"\n          android:name=\"com.facebook.FacebookActivity\"\n          android:configChanges=\"keyboard|keyboardHidden|screenLayout|screenSize|orientation\"\n          android:label=\"@string/app_name\"\n          android:theme=\"@android:style/Theme.Translucent.NoTitleBar\"/\u003e\n      \n        \u003c!--add CustomTabActivity--\u003e\n        \u003cactivity\n          android:name=\"com.facebook.CustomTabActivity\"\n          android:exported=\"true\"\u003e\n          \u003cintent-filter\u003e\n            \u003caction android:name=\"android.intent.action.VIEW\" /\u003e\n            \u003ccategory android:name=\"android.intent.category.DEFAULT\" /\u003e\n            \u003ccategory android:name=\"android.intent.category.BROWSABLE\" /\u003e\n            \u003cdata android:scheme=\"@string/fb_login_protocol_scheme\" /\u003e\n          \u003c/intent-filter\u003e\n        \u003c/activity\u003e\n        \n        \u003c!--add reference to Facebook App ID--\u003e\n        \u003cmeta-data\n          android:name=\"com.facebook.sdk.ApplicationId\"\n          android:value=\"@string/fb_app_id\"/\u003e\n      \n      \u003c/application\u003e\n    \u003c/manifest\u003e\n```\n\n### Configuring React Native maps\n\nThe following steps assumes that you have already created a Google project, and generated an API key.\n\nStart by linking the package resources to your app:\n\n```\n    react-native link react-native-maps\n```\n\nOpen the `android\\app\\src\\main\\AndroidManifest.xml` file and add a reference to your Google project’s API key:\n\n```\n    \u003capplication\u003e\n      ...\n      \u003cmeta-data\n        android:name=\"com.google.android.geo.API_KEY\"\n        android:value=\"YOUR GOOGLE PROJECT'S ANDROID API KEY\"/\u003e\n    \u003c/application\u003e\n```\n\nAlso add the following below the default permissions:\n\n```\n    \u003cuses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/\u003e\n    \u003cuses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" /\u003e\n```\n\n### Coding the app\n\nNow we’re ready to actually code the app. Start by opening the `index.js` file and replace the default contents with the following:\n\n```\n    import { AppRegistry } from 'react-native';\n    import App from './App';\n    \n    AppRegistry.registerComponent('LocSharer', () =\u003e App);\n```\n\nThe entry-point of the app will be the `App` component. So create an `App.js` file and add the following:\n\n```\n    import React, { Component } from 'react';\n    import { StackNavigator } from 'react-navigation';\n    \n    import IndexPage from './src/components/index';\n    import MapPage from './src/components/map_page';\n    \n    const Page = StackNavigator({\n      Home: { screen: IndexPage },\n      MapPage: { screen: MapPage },\n    });\n    \n    export default class App extends Component\u003c{}\u003e {\n    \n      render() {\n        return \u003cPage /\u003e\n      }\n    }\n```\n\nThe code above uses the React Navigation library to create a StackNavigator. This allows the app to transition from one screen to another by placing the new screen on top of the stack. This allows us to easily implement the back functionality since all it has to do is to “pop” the current screen out of the stack in order to go back to the previous screen. To use the StackNavigator, pass in the components to be used as the individual pages. The first one is the initial screen of the app.\n\n### Index page\n\nNext, create a `src` directory and inside create an `index.js` file. This will serve as the initial page of the app. First, import the modules and components that we need:\n\n```\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      Text,\n      View,\n      Switch, // for toggling location sharing on and off\n      DeviceEventEmitter // for emitting/listening custom events\n    } from 'react-native';\n    \n    var { FBLogin } = require('react-native-facebook-login'); // for implementing Facebook login\n    \n    import Pusher from 'pusher-js/react-native'; // for interacting with Pusher\n    \n    import Profile from './profile'; // component for displaying the user's profile\n    import Friends from './friends'; // component for displaying the user's friends\n    \n    import { regionFrom } from '../helpers'; // helper function for constructing the data needed by React Native Maps\n```\n\nCreate the actual component:\n\n```\n    export default class Index extends Component\u003c{}\u003e {\n      // set the title of the screen\n      static navigationOptions = {\n        title: 'LocSharer',\n      };\n    }\n```\n\nIn the constructor, we bind the functions to be used throughout the class as well as setting the default state:\n\n```\n    constructor() {\n    \n      super();\n    \n      this.watchId = null; // unique ID for the geolocation watcher\n      this.pusher = null; // variable for storing the Pusher instance\n      this.user_channel = null; // the Pusher channel for the current user\n      \n      // bind the functions to the class\n      this.onLogin = this.onLogin.bind(this);\n      this.onLoginFound = this.onLoginFound.bind(this);\n      this.onLogout = this.onLogout.bind(this);\n      this.setUser = this.setUser.bind(this);\n      this.setFriends = this.setFriends.bind(this);\n      this.toggleLocationSharing = this.toggleLocationSharing.bind(this);\n      this.onViewLocation = this.onViewLocation.bind(this);\n    \n      this.state = {\n        is_loggedin: false, // whether the user is currently logged in or not\n        is_location_shared: false, // whether the user is currently sharing their location or not\n        user: null, // data for the currently logged in user\n        friends: null, // data for the user's friends\n        subscribed_to: null, // the Facbook user ID of the user's friend whose location is currently being viewed\n        subscribed_friends_count: 0 // number of friends currently subscribed to the user\n      };\n    \n    }\n```\n\nThe `onLogin()` function is executed when the user has logged in with Facebook. Some of the user’s data such as the ID, access token and name are passed in as an argument to this function. It is then used to set the user’s and friends’ data on the state using two functions: \n\n```\n    onLogin(login_data) {\n      this.setUser(login_data);\n      this.setFriends(login_data.credentials.token);\n    }\n```\n\nThe `onLoginFound()` function is executed if an existing Facebook session is already present. The arguments passed in to this function are limited so we have to make a separate API request to get the user’s name:\n\n```\n    onLoginFound(data) {\n    \n      let token = data.credentials.token;\n    \n      fetch(`https://graph.facebook.com/me?access_token=${token}`)\n        .then((response) =\u003e response.json())\n        .then((responseJson) =\u003e {\n        \n          let login_data = {\n            profile: {\n              id: responseJson.id,\n              name: responseJson.name\n            },\n            credentials: {\n              token: token\n            }\n          };\n      \n          this.setUser(login_data);\n        })\n        .catch((error) =\u003e {\n          console.log('something went wrong', error);\n        });\n    \n      this.setFriends(token);\n    \n    }\n```\n\nHere’s the function for setting the data for the current user. All it does is format the login data returned by the Facebook API and set it on the state:\n\n```\n    setUser(login_data) {\n    \n      let user_id = login_data.profile.id;\n      this.setState({\n        is_loggedin: true,\n        user: {\n          id: user_id,\n          access_token: login_data.credentials.token,\n          name: login_data.profile.name,\n          photo: `https://graph.facebook.com/${user_id}/picture?width=100` // the user's profile picture\n        }\n      });\n    \n    }\n```\n\nThe `setFriends()` function makes a request to the Facebook API to get the array of the user’s friends:\n\n```\n    setFriends(token) {\n      fetch(`https://graph.facebook.com/me/friends?access_token=${token}`)\n        .then((response) =\u003e response.json())\n        .then((responseJson) =\u003e {\n          this.setState({\n            friends: responseJson.data\n          });\n        })\n        .catch((error) =\u003e {\n          console.log('something went wrong', error);\n        });\n    }\n```\n\nOnce the user logs out, destroying the session data is already taken care of by the Facebook login package. So all we have to do is unset all the user data that we’ve set earlier:\n\n```\n    onLogout() {\n      this.setState({\n        is_loggedin: false,\n        user: null, \n        friends: null,\n        is_subscribed_to: null\n      });\n    }\n```\n\nNext, initialize Pusher. Be sure to replace the placeholder values with your Pusher app details. We’re also passing in an auth paramater. This is the request data that we were checking earlier in the server code. Simply pass in the same unique string that you’ve used earlier when you added the secret:\n\n```\n    componentWillMount() {\n      this.pusher = new Pusher('YOUR PUSHER APP ID', {\n        authEndpoint: 'YOUR AUTH SERVER AUTH ENDPOINT',\n        cluster: 'YOUR APP CLUSTER',\n        encrypted: true,\n        auth: {\n          params: {\n            app_key: 'YOUR UNIQUE KEY', // \u003c-- should be the same as the unique key you added as a secret using now\n          }\n        }\n      });\n      \n      // add code for listening for the unsubscribe event\n    \n    }\n```\n\nNext, we need a way to unsubscribe from a friend’s channel when the current user is no longer viewing their location on a map. That happens when the user goes back from the map page to the index page. The React Navigation library doesn’t really provide a way to listen for the event when the back button is tapped. That’s why we need a way to emulate that behavior. I’ll let you figure out your own solution. So feel free to skip the following paragraph if you want.\n\nThe solution I came up with is to use the `DeviceEventEmitter` module. Add a listener for the `unsubscribe` event, and once this is triggered, unsubscribe from the friend’s channel. The event is triggered from the map page when the user goes back to the index page:\n\n```\n    DeviceEventEmitter.addListener('unsubscribe', (e) =\u003e {\n      let friend_id = this.state.subscribed_to;\n      this.pusher.unsubscribe(`private-friend-${friend_id}`);\n    });\n```\n\nThe `toggleLocationSharing()` function is executed every time the user toggles the switch for sharing their location. If location sharing is enabled, we subscribe the user to their own channel. This allows them to listen for when one of their friends subscribes to their channel. When this happens, we begin watching the user’s current location and publish the data using Pusher. If the user decides to disable location sharing, we unsubscribe the user from their own channel and stop watching the location. This effectively stops the updating of location from their friends screens:\n\n```\n    toggleLocationSharing() {\n    \n      let is_location_shared = !this.state.is_location_shared;\n    \n      this.setState({\n        is_location_shared: is_location_shared\n      });\n      \n      let user_id = this.state.user.id;\n      if(!is_location_shared){\n        this.pusher.unsubscribe(`private-friend-${user_id}`); // disconnect from their own channel\n        if(this.watchId){\n          navigator.geolocation.clearWatch(this.watchId);\n        }\n      }else{\n        this.user_channel = this.pusher.subscribe(`private-friend-${user_id}`);\n        this.user_channel.bind('client-friend-subscribed', (friend_data) =\u003e {\n      \n          let friends_count = this.state.subscribed_friends_count + 1;\n          this.setState({\n            subscribed_friends_count: friends_count\n          });\n      \n          if(friends_count == 1){ // only begin monitoring the location when the first subscriber subscribes\n            this.watchId = navigator.geolocation.watchPosition(\n              (position) =\u003e {\n                var region = regionFrom(\n                  position.coords.latitude,\n                  position.coords.longitude,\n                  position.coords.accuracy\n                );\n                this.user_channel.trigger('client-location-changed', region); // push the data to subscribers\n              }\n            );\n          }\n        });  \n      \n      }\n    }\n```\n\nThe `onViewLocation()` function is executed when the user taps on any friend on their friend list. This is where we subscribe to the friend’s channel so we can get updates whenever their location changes:\n\n```\n    onViewLocation(friend) {\n    \n      this.friend_channel = this.pusher.subscribe(`private-friend-${friend.id}`);\n      this.friend_channel.bind('pusher:subscription_succeeded', () =\u003e {\n        let username = this.state.user.name;\n        this.friend_channel.trigger('client-friend-subscribed', {\n          name: username\n        });\n      });\n    \n      this.setState({\n        subscribed_to: friend.id\n      });\n      \n      // add code for navigating to the map page\n    }\n```\n\nNext, add the code for navigating to the map page. Pass in the name of the friend and the reference to the friend’s channel as navigation props. This allows those values to be accessed from the map page later on:\n\n```\n    const { navigate } = this.props.navigation;\n    \n    navigate('MapPage', {\n      name: friend.name,\n      friend_channel: this.friend_channel // pass the reference to the friend's channel\n    });\n```\n\nRender the index page. This consists of the user’s profile, their friends list and the Facebook login or logout button:\n\n```\n    render() {\n    \n      return (\n        \u003cView style={styles.page_container}\u003e\n        {\n          this.state.is_loggedin \u0026\u0026\n          \u003cView style={styles.container}\u003e\n          {\n            this.state.user \u0026\u0026\n            \u003cView style={styles.profile_container}\u003e\n              \u003cProfile\n                profile_picture={this.state.user.photo}\n                profile_name={this.state.user.name}\n              /\u003e\n    \n              \u003cText\u003eShare Location\u003c/Text\u003e\n              \u003cSwitch\n                value={this.state.is_location_shared}\n                onValueChange={this.toggleLocationSharing} /\u003e\n            \u003c/View\u003e\n          }\n    \n          {\n            this.state.friends \u0026\u0026\n            \u003cFriends\n              friends={this.state.friends}\n              onViewLocation={this.onViewLocation} /\u003e\n          }\n          \u003c/View\u003e\n        }\n    \n          \u003cFBLogin\n            permissions={[\"email\", \"user_friends\"]}\n            onLogin={this.onLogin}\n            onLoginFound={this.onLoginFound}\n            onLogout={this.onLogout}\n            style={styles.button}\n          /\u003e\n        \u003c/View\u003e\n      );\n    \n    }\n    \n    // add the styles\n    const styles = StyleSheet.create({\n      page_container: {\n        ...StyleSheet.absoluteFillObject,\n        justifyContent: 'flex-end'\n      },\n      container: {\n        flex: 1,\n        padding: 20\n      },\n      profile_container: {\n        flex: 1,\n        alignItems: 'center',\n        marginBottom: 50\n      },\n      button: {\n        paddingBottom: 30,\n        marginBottom: 20,\n        alignSelf: 'center'\n      }\n    });\n```\n\nThe code above is pretty self-explanatory so I won’t go into details what each line does.\n\n### Profile component\n\nThe Profile component is used for displaying the user’s profile picture and name:\n\n```\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      Text,\n      View,\n      Image\n    } from 'react-native';\n    \n    import PropTypes from 'prop-types';\n    \n    class Profile extends Component\u003c{}\u003e {\n    \n      render() {\n    \n        return (\n          \u003cView style={styles.profile_container}\u003e\n            \u003cImage\n              resizeMode={\"contain\"}\n              source={{uri: this.props.profile_picture}}\n              style={styles.profile_photo}\n            /\u003e\n            \u003cText style={styles.profile_name}\u003e{this.props.profile_name}\u003c/Text\u003e\n          \u003c/View\u003e\n        );\n    \n      }\n    \n    }\n    \n    const styles = StyleSheet.create({\n      profile_container: {\n        alignItems: 'center'\n      },\n      profile_photo: {\n        height: 100,\n        width: 100\n      },\n      profile_name: {\n        fontWeight: 'bold',\n        fontSize: 18\n      }\n    });\n    \n    // specify the required props\n    Profile.propTypes = {\n      profile_picture: PropTypes.string.isRequired,\n      profile_name: PropTypes.string.isRequired\n    };\n    \n    export default Profile;\n```\n\n### Friends component\n\nThe Friends component is used for rendering the list of friends:\n\n```\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      Text,\n      View,\n      Image,\n      TouchableHighlight\n    } from 'react-native';\n    \n    import PropTypes from 'prop-types';\n    \n    class Friends extends Component\u003c{}\u003e {\n    \n      renderFriends() {\n        return this.props.friends.map((friend, index) =\u003e {\n        \n          let profile_picture = `https://graph.facebook.com/${friend.id}/picture?width=50`;\n          return (\n            \u003cTouchableHighlight\n              key={index}\n              onPress={this.props.onViewLocation.bind(this, friend)}\n              underlayColor={\"#CCC\"}\u003e\n    \n                \u003cView style={styles.friend_row}\u003e\n                  \u003cImage\n                    resizeMode={\"contain\"}\n                    source={{uri: profile_picture}}\n                    style={styles.profile_photo}\n                  /\u003e\n                  \u003cText style={styles.friend_name}\u003e{friend.name}\u003c/Text\u003e\n                \u003c/View\u003e\n    \n            \u003c/TouchableHighlight\u003e\n          );\n        });\n      }\n      \n      render() {\n      \n        return (\n          \u003cView style={styles.friends_container}\u003e\n            \u003cText style={styles.friends_header_text}\u003eView Friend Location\u003c/Text\u003e\n            {this.renderFriends.call(this)}\n          \u003c/View\u003e\n        );\n      \n      }\n    }\n    \n    // add the styles\n    const styles = StyleSheet.create({\n      friends_container: {\n        flex: 2\n      },\n      friends_header_text: {\n        fontSize: 18,\n        fontWeight: 'bold'\n      },\n      friend_row: {\n        flexDirection: 'row',\n        alignItems: 'center',\n        padding: 10\n      },\n      profile_photo: {\n        width: 50,\n        height: 50,\n        marginRight: 20\n      },\n      friend_name: {\n        fontSize: 15\n      }\n    });\n    \n    // specify the required props\n    Friends.propTypes = {\n      friends: PropTypes.arrayOf(\n        PropTypes.shape({\n          id: PropTypes.string.isRequired,\n          name: PropTypes.string.isRequired\n        })\n      ),\n      onViewLocation: PropTypes.func.isRequired\n    };\n    \n    export default Friends;\n```\n\n### Region helper\n\nEarlier, we’ve used a function called `regionFrom` but we haven’t really created it yet. So go ahead and create a `src/helpers.js` file and add the following:\n\n```\n    export function regionFrom(lat, lon, accuracy) {\n      const oneDegreeOfLongitudeInMeters = 111.32 * 1000;\n      const circumference = (40075 / 360) * 1000;\n    \n      const latDelta = accuracy * (1 / (Math.cos(lat) * circumference));\n      const lonDelta = (accuracy / oneDegreeOfLongitudeInMeters);\n    \n      return {\n        latitude: lat,\n        longitude: lon,\n        latitudeDelta: Math.max(0, latDelta),\n        longitudeDelta: Math.max(0, lonDelta)\n      };\n    } \n```\n\nThis function is used for getting the latitude and longitude delta values needed by the React Native Maps library to display a map.\n\n### Map page\n\nNow we move over to the map page. Create a `src/map_page.js` file and add the following:\n\n```\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      Text,\n      View,\n      DeviceEventEmitter\n    } from 'react-native';\n    \n    import Map from './map';\n    \n    import { regionFrom } from '../helpers';\n    \n    // add code for creating the component\n```\n\nCreate the component, and set the page title based on the parameters passed from the index page:\n\n```\n    export default class MapPage extends Component\u003c{}\u003e {\n    \n      static navigationOptions = ({navigation}) =\u003e ({\n        title: `${navigation.state.params.name}'s Location`,\n      });\n     \n     // add constructor code \n    }\n```\n\nSet a default location in the constructor so that a map is still displayed even if the user is not sharing their location:\n\n```\n    constructor() {\n      super();\n    \n      // set default location\n      let region = {\n        \"latitude\": 35.4625901,\n        \"longitude\": 138.65437569999995,\n        \"latitudeDelta\": 0,\n        \"longitudeDelta\": 0\n      };\n    \n      this.state = {\n        region\n      }\n    }\n```\n\nWhen the user taps on the back button, `componentWillUnmount()` is triggered as the component goes out of view. So this is the perfect time to trigger the `unsubscribe` event to let the index page know that the user has stopped viewing their friends location.\n\n```\n    componentWillUnmount() {\n      DeviceEventEmitter.emit('unsubscribe',  {\n        unsubscribe: true\n      });\n    }\n```\n\nWhen the component is mounted, we want to start listening for when the location changes so we can update the map accordingly:\n\n```\n    componentDidMount() {\n    \n      const { state } = this.props.navigation;\n      state.params.friend_channel.bind('client-location-changed', (data) =\u003e {\n        this.setState({\n          region: data\n        });\n      });\n    \n    }\n```\n\nThe `render()` method simply outputs the Map component:\n\n```\n    render() {\n    \n      return (\n        \u003cView style={styles.map_container}\u003e\n        {\n          this.state.region \u0026\u0026\n          \u003cMap region={this.state.region} /\u003e\n        }\n        \u003c/View\u003e\n      );\n    \n    }\n```\n\nAdd the styles:\n\n```\n    const styles = StyleSheet.create({\n      map_container: {\n        ...StyleSheet.absoluteFillObject,\n        justifyContent: 'flex-end'\n      }\n    });\n```\n\n### Map component\n\nLastly, there’s the Map component which is used to actually render the Google Map. This uses the React Native Maps package that we installed earlier. There are only two components that you need in order to make it work: `MapView` and `MapView.Marker`. `MapView` is used to render the map, and `MapView.Marker` is used to render the marker: \n\n```\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      View\n    } from 'react-native';\n    \n    import MapView from 'react-native-maps';\n    import PropTypes from 'prop-types';\n    \n    class Map extends Component\u003c{}\u003e {\n    \n      render() {\n    \n        return (\n          \u003cView style={styles.map_container}\u003e\n            {\n            this.props.region \u0026\u0026\n              \u003cMapView\n                style={styles.map}\n                region={this.props.region}\n              \u003e\n                \u003cMapView.Marker\n                  coordinate={{\n                    latitude: this.props.region.latitude,\n                    longitude: this.props.region.longitude}}\n                /\u003e\n              \u003c/MapView\u003e\n            }\n          \u003c/View\u003e\n        );\n    \n      }\n    \n    }\n    \n    // add the styles\n    const styles = StyleSheet.create({\n      map_container: {\n        ...StyleSheet.absoluteFillObject,\n        justifyContent: 'flex-end'\n      },\n      map: {\n        ...StyleSheet.absoluteFillObject,\n      },\n    });\n    \n    // specify the required props\n    Map.propTypes = {\n      region: PropTypes.shape({\n        latitude: PropTypes.number.isRequired,\n        longitude: PropTypes.number.isRequired,\n        latitudeDelta: PropTypes.number.isRequired,\n        longitudeDelta: PropTypes.number.isRequired\n      })\n    };\n    \n    export default Map;\n```\n\n## Running the app\n\nYou only need one device and one emulator in order to test the app. First, run the app on your device by executing `react-native run-android`. Once the app is running, disconnect the device and open a Genymotion virtual device. Execute the same command again to run the app on the virtual device. Don’t forget to add another Facebook user, aside from your own Facebook account as a tester or developer under the Facebook app settings. You can do that by clicking on the **Roles** tab and searching for the user in there. Only Facebook users that are added in the app settings can login. This is because the Facebook app is still unpublished. \n\nGenymotion has a built-in functionality for spoofing the GPS coordinates. This will trigger the geolocation functionality in the app everytime the location changes (either by pointing the marker on a different location on the map or searching for another place). That’s why it’s best to use Genymotion for testing the user who is broadcasting their location.\n\nIf you don’t have any device to test on, you can use Genymotion and the Pusher debug console to test the app. All you have to do is figure out the Facebook user ID’s of the two users you’re using for testing. You can do that by using [this tool](https://findmyfbid.in/). Login with your Facebook account on Genymotion then click on one of the other accounts. You can then emulate the location update by manually entering the coordinates on the debug console. You can access the debug console from your Pusher app’s dashboard:\n\n![geolocation-sharing-react-native-debug-console](//images.contentful.com/1es3ne0caaid/6kX3gefojuW4oIKWmgKyWs/72a71d7cf5c4e62e9e500b70e9754772/geolocation-sharing-react-native-debug-console.png)\n\nYou can use the following as initial values:\n- **channel name:** `private-friend-YOUR-ACCOUNTS-FB-ID`\n- **event:** `client-location-changed`\n- **data:** you can use the following data for testing:\n\n```\n    {\n      \"latitude\": 16.6105538,\n      \"longitude\": 120.31429539999999,\n      \"latitudeDelta\": 0,\n      \"longitudeDelta\": 0\n    }\n```\n\nSend the event once that’s done. Sending the event should update the map on the app. You can use a service such as [latlong.net](https://www.latlong.net/) to come up with the coordinates of different places.\n\n\n## Suggestions for improvement\n\nIf you want to improve the app, here are some ideas on what you can add:\n- The number of friends that are currently viewing the user’s location doesn’t actually get updated when someone disconnects from the user’s channel. You can add a listener for when someone disconnects, so that you can update the value as well. \n- The current user doesn’t actually know who are the people that are currently subscribed to their location. For this you can use an alert dialog everytime someone subscribes to the channel. The `client-friend-subscribed` event has already been laid out for this purpose. You can even take the idea further by making use of [Presence channels](https://pusher.com/docs/client_api_guide/client_presence_channels). This comes with an additional feature that allows you to keep track of the people that are subscribed to a specific channel.\n- Add notifications to inform the subscribed users for when the user they’re subscribed to disables location sharing. \n\n\n## Conclusion\nThat’s it! In this tutorial you’ve learned how to create a location-sharing app which uses React Native’s built-in Geolocation library and Pusher to broadcast the data to the user’s friends.","metaTitle":"Build a geolocation sharing app with React Native","metaDescription":"In this tutorial, we will be building a location-sharing app using React Native and you will learn how to use the realtime geolocation functionality."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3k2gChNFTackmekCUGAmWA","type":"Entry","createdAt":"2018-02-28T12:27:48.206Z","updatedAt":"2018-02-28T12:27:48.206Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Monitor APIs in realtime using Go","url":"monitor-api-go","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/go-pusher-api-monitor","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1NUYHyE9AsKICMGiIyCA4y","type":"Entry","createdAt":"2018-02-12T14:53:47.651Z","updatedAt":"2018-02-26T12:31:14.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"jQuery","url":"jquery","type":"library"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}}],"reviewDate":"2018-02-10","description":"In this article, you will learn how to realtime monitoring of a small API built using Go and jQuery.","prerequisite":"A basic understanding of Go and JavaScript is needed to follow this tutorial.","content":"REST is a popular architectural style for providing standards between computer systems on the web, making it easier for systems to communicate with each other. It is mostly used by APIs to provide data to other systems requiring them.\n\nSometimes, the providers of APIs would like to monitor its use. Monitoring APIs helps provide useful information, such as which endpoints are called most frequently, or what regions are the largest audience using request IP Addresses. This information can then be used to optimize the API.\n\nIn this article, we will implement realtime monitoring of a small API built with GoLang, using Pusher. Here’s a preview of what it should look like at the end:\n\n![monitor-api-go-demo](//images.contentful.com/1es3ne0caaid/5neldRoqw86YwmkUAWOCK6/62eaee0a825b4e1bb511a3c22ed07133/monitor-api-go-demo.gif)\n\n## Requirements\n\nTo follow along with this article, you will need the following:\n- An IDE of your choice e.g. [Visual Studio Code](https://code.visualstudio.com/).\n- [Go](https://golang.org/doc/install) installed on your computer.\n- Basic knowledge of GoLang.\n- Basic knowledge of JavaScript (ES6 syntax) and jQuery.\n- Basic knowledge of using a CLI tool or terminal.\n\nOnce you have all the above requirements, let’s proceed.\n\n\n## Setting up our codebase\n\nTo keep things simple, we’ll be using an already written GoLang CRUD API, which is available on [GitHub](https://github.com/neoighodaro/go-pusher-api-monitor/tree/master/api-goggles). We will fork the repository and set it up following the **README.md** guidelines on installation.\n\nNext, we will set up Pusher in the API project. Pusher is a service that provides a simple implementation of realtime functionality for our web and mobile applications. We will use it in this article, to provide realtime updates to our API monitor dashboard.\n\nLet’s head over to Pusher.com, you can [create a free account](https://pusher.com/signup?plan=sandbox) if you don’t already have one. On the [dashboard](https://dashboard.pusher.com/), create a new app and copy out the app credentials (App ID, Key, Secret, and Cluster). We will use these credentials in our API.\n\nNow that we have our Pusher app, we will install the Pusher Go library by running:\n\n```\n    $ go get github.com/pusher/pusher-http-go\n```\n\n## Monitoring our API\n\nWe have so far set up a functional CRUD API, and we will now implement monitoring calls to it. In this article, we will monitor:\n- The endpoints called with details like name, request type (GET, POST, etc) and URL.\n- For each call to an endpoint, we will also take note of:\n  - The requesting IP address remove,\n  - The response status code for the particular call.\n\nNow that we have defined what to monitor, we will begin by creating models to keep track of the data we acquire.\n\n### Creating models for monitoring\n\nBased on our specifications above, we will create two new model files `EndPoints.go` and `EndPointCalls.go`. As was used in the base API, we will use the [GORM](http://jinzhu.me/gorm/) (the GoLang ORM) for managing data storage.\n\n\u003e 💡 Our new model files will exist in the models directory and belong to the models package.\n\nIn `EndPoints.go`, we will define the `EndPoints` object and a method to save endpoints:\n\n```\n    package models\n    \n    import (\n        \"github.com/jinzhu/gorm\"\n    )\n    \n    // EndPoints - endpoint model\n    type EndPoints struct {\n        gorm.Model\n        Name, URL string\n        Type      string          `gorm:\"DEFAULT:'GET'\"`\n        Calls     []EndPointCalls `gorm:\"ForeignKey:EndPointID\"`\n    }\n    \n    // SaveOrCreate - save endpoint called\n    func (ep EndPoints) SaveOrCreate() EndPoints {\n        db.FirstOrCreate(\u0026ep, ep)\n        return ep\n    }\n```\n\nIn the code block above, our model did not re-initialize the GORM instance `db`, yet it was used. This is because the instance defined in the `Movies.go` file was global to all members of the package, and so it can be referenced and used by all members of `package models`.\n\n\n\u003e 💡 Our EndPoints model has an attribute `Calls` which is an array of `EndPointCalls` objects. This attribute signifies the [one to many](http://jinzhu.me/gorm/associations.html#has-many) relationship between `EndPoints` and `EndPointCalls`. For more information on model associations and relationships see the GORM [documentation](http://jinzhu.me/gorm/associations.html).\n\nNext, we’ll fill in the model definitions and methods for our `EndPointCalls` model in the `EndPointCalls.go` file:\n\n```\n    package models\n    \n    import (\n        \"github.com/jinzhu/gorm\"\n        \"github.com/kataras/iris\"\n    )\n    \n    // EndPointCalls - Object for storing endpoints call details\n    type EndPointCalls struct {\n        gorm.Model\n        EndPointID   uint `gorm:\"index;not null\"`\n        RequestIP    string\n        ResponseCode int\n    }\n    \n    // SaveCall - Save the call details of an endpoint\n    func (ep EndPoints) SaveCall(context iris.Context) EndPointCalls {\n        epCall := EndPointCalls{\n            EndPointID:   ep.ID,\n            RequestIP:    context.RemoteAddr(),\n            ResponseCode: context.GetStatusCode(),\n        }\n    \n        db.Create(\u0026epCall)\n        return epCall\n    }\n```\n\nAs shown above, our `EndPointCalls` model defines a `SaveCall` method, which stores the requesting IP address and the response code of an existing `EndPoint` object.\n\nFinally, we will update the model migration in the `index.go` file to include our new models:\n\n```\n    // index.go\n    // ...\n    \n    func main() {\n        // ...\n    \n        // Initialize ORM and auto migrate models\n        db, _ := gorm.Open(\"sqlite3\", \"./db/gorm.db\")\n        db.AutoMigrate(\u0026models.Movies{}, \u0026models.EndPoints{}, \u0026models.EndPointCalls{})\n    \n        // ...\n    }\n```\n\n### Saving endpoint data for monitoring\nUsing our newly created models, we will edit the `MoviesController.go` file to save relevant data when an endpoint is called.\n\nTo do this, we will add a private helper method to `MoviesController.go`, which will save endpoint data with our models. See how below:\n\n```\n    // MoviesController.go\n    // ...\n    \n    func (m MoviesController) saveEndpointCall(name string) {\n        endpoint := models.EndPoints{\n            Name: name,\n            URL:  m.Cntx.Path(),\n            Type: m.Cntx.Request().Method,\n        }\n    \n        endpoint = endpoint.SaveOrCreate()\n        endpointCall := endpoint.SaveCall(m.Cntx)\n    }\n```\n\nThe `saveEndpointCall` method takes the name of the endpoint as a parameter. Using the controller’s `iris.Context` instance, it reads and saves the endpoint path and request method.\n\nNow that this helper method is available, we will call it in each of the endpoint methods in the `MoviesController.go` file:\n\n```\n    // MoviesController.go\n    // ...\n    \n    // Get - get a list of all available movies\n    func (m MoviesController) Get() {\n        movie := models.Movies{}\n        movies := movie.Get()\n    \n        go m.saveEndpointCall(\"Movies List\")\n        m.Cntx.JSON(iris.Map{\"status\": \"success\", \"data\": movies})\n    }\n    \n    // GetByID - Get movie by ID\n    func (m MoviesController) GetByID(ID int64) {\n        movie := models.Movies{}\n        movie = movie.GetByID(ID)\n        if !movie.Validate() {\n            msg := fmt.Sprintf(\"Movie with ID: %v not found\", ID)\n            m.Cntx.StatusCode(iris.StatusNotFound)\n            m.Cntx.JSON(iris.Map{\"status\": \"error\", \"message\": msg})\n        } else {\n            m.Cntx.JSON(iris.Map{\"status\": \"success\", \"data\": movie})\n        }\n    \n        name := fmt.Sprintf(\"Single Movie with ID: %v Retrieval\", ID)\n        go m.saveEndpointCall(name)\n    }\n    \n    // ...\n```\n\nAs shown in the snippet above, the `saveEndpointCall` helper method will be called in each CRUD method.\n\n\u003e 💡 The `saveEndpointCall` method is called as a [Goroutine](https://golangbot.com/goroutines/). Calling it this way calls it concurrently with the execution of the endpoint’s method, and allows our monitoring code to not delay or inhibit the response of the API.\n\n\n## Creating the endpoint monitor dashboard\n\nNow that we have implemented monitoring our API’s calls, we will display the data we have accrued on a dashboard.\n\n### Registering our template engine\n\nThe GoLang framework, Iris, has the ability to implement a range of template engines, which we will take advantage of.\n\nIn this section, we will implement the **Handlebars** template engine, and in our `index.go` file, we will register it to the app instance:\n\n```\n    // index.go\n    package main\n    \n    import (\n        \"goggles/controllers\"\n        \"goggles/models\"\n        \"github.com/jinzhu/gorm\"\n        \"github.com/kataras/iris\"\n    )\n    \n    func main() {\n        app := iris.New()\n    \n        tmpl := iris.Handlebars(\"./templates\", \".html\")  \n        app.RegisterView(tmpl)\n    \n        // ...\n    \n        app.Run(iris.Addr(\"127.0.0.1:1234\"))\n    }\n```\n\n\u003e 💡 We have defined our template engine (Handlebars), to render `.html` files contained in the `templates` directory.\n\n### Creating the dashboard's route and controller\nNow that we have registered our template engine to the application, we will add a route in `index.go` to render our API monitor dashboard:\n\n```\n    // index.go\n    // ...\n    \n    func main() {\n        app := iris.New()\n    \n        // ...\n    \n        app.Get(\"/admin/endpoints\", func(ctx iris.Context) {\n            dashBoard := controllers.DashBoardController{Cntx: ctx}\n            dashBoard.ShowEndpoints()\n        })\n    \n        app.Run(iris.Addr(\"127.0.0.1:1234\"))\n    }\n```\n\nAbove, we have added definitions for the path `/admin/endpoints`, where we intend to render details of our API endpoints and its calls. We have also specified that the route should be handled by the `ShowEndpoints` method of `DashBoardController`.\n\nTo create `DashBoardController`, we will create a `DashBoardController.go` file in the controllers directory. And in our `DashBoardController.go` file, we will define the `DashBoardController` object and its `ShowEndpoints` method:\n\n```\n    // DashBoardController.go\n    package controllers\n    \n    import (\n        \"goggles/models\"\n        \"github.com/kataras/iris\"\n        \"github.com/kataras/iris/mvc\"\n    )\n    \n    // DashBoardController - Controller object for Endpoints dashboard\n    type DashBoardController struct {\n        mvc.BaseController\n        Cntx iris.Context\n    }\n    \n    // ShowEndpoints - show list of endpoints\n    func (d DashBoardController) ShowEndpoints() {\n        endpoints := (models.EndPoints{}).GetWithCallSummary()\n        d.Cntx.ViewData(\"endpoints\", endpoints)\n        d.Cntx.View(\"endpoints.html\")\n    }\n```\n\nIn `ShowEndpoints()`, we retrieve our endpoints and a summary of their calls for display. Then we pass this data to our view using `d.Cntx.ViewData(\"endpoints\", endpoints)`, and finally we render our view file `templates/endpoints.html` using `d.Cntx.View(\"endpoints.html\")`.\n\n### Retrieving endpoints and call summaries\nTo retrieve our list of endpoints and a summary of their calls, we will create a method in the `EndPoints.go` file called `GetWithCallSummary`.\n\nOur `GetWithCallSummary` method should return the endpoints and their call summaries ready for display. For this, we will define a collection object `EndPointWithCallSummary` with the attributes we need for our display in the `EndPoints.go` file:\n\n```\n    // EndPoints.go\n    package models\n    \n    import (\n        \"github.com/jinzhu/gorm\"\n    )\n    \n    // EndPoints - endpoint model\n    type EndPoints struct {\n        gorm.Model\n        Name, URL string\n        Type      string          `gorm:\"DEFAULT:'GET'\"`\n        Calls     []EndPointCalls `gorm:\"ForeignKey:EndPointID\"`\n    }\n    \n    // EndPointWithCallSummary - Endpoint with last call summary\n    type EndPointWithCallSummary struct {\n        ID            uint\n        Name, URL     string\n        Type          string\n        LastStatus    int\n        NumRequests   int\n        LastRequester string\n    }\n```\n\nAnd then define `GetWithCallSummary` method to use it as follows:\n\n```\n    // EndPoints.go\n    \n    // ...\n    \n    // GetWithCallSummary - get all endpoints with call summary details\n    func (ep EndPoints) GetWithCallSummary() []EndPointWithCallSummary {\n        var eps []EndPoints\n        var epsWithDets []EndPointWithCallSummary\n    \n        db.Preload(\"Calls\").Find(\u0026eps)\n    \n        for _, elem := range eps {\n            calls := elem.Calls\n            lastCall := calls[len(calls)-1:][0]\n            newElem := EndPointWithCallSummary{\n                elem.ID,\n                elem.Name,\n                elem.URL,\n                elem.Type,\n                lastCall.ResponseCode,\n                len(calls),\n                lastCall.RequestIP,\n            }\n            epsWithDets = append(epsWithDets, newElem)\n        }\n    \n        return epsWithDets\n    }\n    \n    // ...\n```\n\nAbove, the `GetWithCallSummary` method leverages the `Calls` attribute of `EndPoints`, which defines its relationship with `EndPointCalls`. When retrieving our list of endpoints from the database, we eager load its `EndPointCalls` data using `db.Preload(\"Calls\").Find(\u0026eps)`.\n\nFor more information on eager loading in GORM, see the [documentation](http://jinzhu.me/gorm/crud.html#preloading-eager-loading).\n\n`GetWithCallSummary` initializes an array of `EndPointWithCallSummary`, and loops through the `EndPoints` objects returned from our database to create `EndPointWithCallSummary` objects. \n\nThese `EndPointWithCallSummary` objects are appended to the initialized array and returned.\n\n\u003e 💡 The `EndPointWithCallSummary` is not a model. It is a collection object and does not need to have a table in our database. This is why it does not have its own file and is not passed to `index.go` for migration.\n\n### Implementing the dashboard and displaying data\n\nNow that we have the dashboard’s route, controller and data for display, we will implement the dashboard view to achieve a simple list display of endpoints and their summary data. \n\nLet’s update `templates/endpoints.html` to have the following code:\n\n```\n    \u003c!-- templates/endpoints.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003eEndpoints Monitor Dashboard\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0-beta.3/css/bootstrap.min.css\" /\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv\u003e\n            \u003cnav class=\"navbar navbar-default navbar-static-top\"\u003e\n                \u003cdiv class=\"container\"\u003e\n                    \u003cdiv class=\"navbar-header\"\u003e\n                        \u003ca class=\"navbar-brand\" href=\"http://127.0.0.1:1234/\"\u003e\n                            Goggles - A Real-Time API Monitor\n                        \u003c/a\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/nav\u003e\n            \u003cdiv class=\"container\"\u003e\n                \u003cdiv class=\"row\"\u003e\n                    \u003cdiv class=\"col-xs-12 col-lg-12\"\u003e\n                        \u003cdiv class=\"endpoints list-group\"\u003e\n                            {{#each endpoints}}\n                                \u003ca id=\"endpoint-{{ID}}\" href=\"#\" class=\"list-group-item \n                                list-group-item-{{status_class LastStatus}}\"\u003e\n                                    \u003cstrong\u003e{{name}}\u003c/strong\u003e\n                                    \u003cspan class=\"stats\"\u003e\n                                        {{type}}: \u003cstrong\u003e{{url}}\u003c/strong\u003e |\n                                        Last Status: \u003cspan class=\"last_status\"\u003e\n                                        {{LastStatus}}\u003c/span\u003e |\n                                        Times Called: \u003cspan class=\"times_called\"\u003e\n                                        {{NumRequests}}\u003c/span\u003e |\n                                        Last Request IP: \u003cspan class=\"request_ip\"\u003e\n                                        {{LastRequester}}\u003c/span\u003e\n                                    \u003c/span\u003e\n                                \u003c/a\u003e\n                            {{/each}}\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0-beta.3/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nAbove, we render our endpoints list using [Bootstrap](https://getbootstrap.com/) and our Handlebars template engine. We have also created and used a template function `status_class`, to colour code our list based on their last call status `LastStatus`.\n\nWe define the `status_class` template function in `index.go` after initialising our template engine:\n\n```\n    // index.go\n    \n    // ...\n    \n    func main() {\n        app := iris.New()\n    \n        tmpl := iris.Handlebars(\"./templates\", \".html\")\n    \n        tmpl.AddFunc(\"status_class\", func(status int) string {\n            if status \u003e= 200 \u0026\u0026 status \u003c 300 {\n                return \"success\"\n            } else if status \u003e= 300 \u0026\u0026 status \u003c 400 {\n                return \"warning\"\n            } else if status \u003e= 400 {\n                return \"danger\"\n            }\n            return \"success\"\n        })\n    \n        app.RegisterView(tmpl)\n    }\n```\n\nThen in our view file we call the function as:\n\n``` language-go\n    class=\"list-group-item list-group-item-{{status_class LastStatus}}\"\n```\n\u003e 💡 In the above **LastStatus** is the function’s parameter.\n\n\n## Adding realtime updates to our dashboard\n\nSo far in this article, we have monitored the calls to an API and displayed the data via a dashboard. We will now use [Pusher](http://pusher.com/) to provide realtime data updates to our dashboard.\n\n### Sending realtime data from the backend\nEarlier, we installed the [Pusher Go library](https://github.com/pusher/pusher-http-go), which we will use to trigger an event when an endpoint is called. In the `MoviesController.go` file, where the API requests are handled, we will initialize the Pusher client:\n\n```\n    // MoviesController.go\n    \n    package controllers\n    \n    import (\n        // ...\n        \"github.com/pusher/pusher-http-go\"\n    )\n    \n    // MoviesController - controller object to serve movie data\n    type MoviesController struct {\n        mvc.BaseController\n        Cntx iris.Context\n    }\n    \n    var client = pusher.Client{\n        AppId:   \"app_id\",\n        Key:     \"app_key\",\n        Secret:  \"app_secret\",\n        Cluster: \"app_cluster\",\n    }\n    \n    // ...\n```\nHere, we have initialized the Pusher client using the credentials from our earlier created app.\n\n\u003e ⚠️ Replace `app_id, app_key, app_secret and app_cluster` with your app credentials.\n\nNext, we will use our Pusher client to trigger an event, which would include the endpoint’s data to be displayed in our view. We will do this in the `saveEndpointCall` method, which logs an endpoint and its call:\n\n```\n    // MoviesController.go\n    \n    // ...\n    \n    func (m MoviesController) saveEndpointCall(name string) {\n        endpoint := models.EndPoints{\n            Name: name,\n            URL:  m.Cntx.Path(),\n            Type: m.Cntx.Request().Method,\n        }\n        endpoint = endpoint.SaveOrCreate()\n        endpointCall := endpoint.SaveCall(m.Cntx)\n        endpointWithCallSummary := models.EndPointWithCallSummary{\n            ID:            endpoint.ID,\n            Name:          endpoint.Name,\n            URL:           endpoint.URL,\n            Type:          endpoint.Type,\n            LastStatus:    endpointCall.ResponseCode,\n            NumRequests:   1,\n            LastRequester: endpointCall.RequestIP,\n        }\n        \n        client.Trigger(\"goggles_channel\", \"new_endpoint_request\", endpointWithCallSummary)\n    }\n```\n\nAbove, we create an `EndPointWithCallSummary` object from `EndPoints` (the endpoint) and `EndPointCalls`. This `EndPointWithCallSummary` object has all the data required for display on the dashboard, so will be passed to Pusher for transmission.\n\n### Displaying data in realtime on the dashboard\n\nTo display the realtime updates of our endpoints, we will use the Pusher JavaScript client and jQuery libraries.\n\nIn our view file, `templates/endpoints.html`, we will first import and initialize a Pusher instance using our app’s credentials:\n\n```\n    \u003c!-- endpoints.html --\u003e\n    \u003cscript src=\"//cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0-beta.3/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"//js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n      const pusher = new Pusher('app_id', {cluster: \"app_cluster\"});\n    \u003c/script\u003e\n```\n\n\u003e ⚠️ Replace `app_id and app_cluster` with values from your app’s credentials.\n\nNext, we will define the following:\n- The template for adding new endpoints to our view.\n- The functions to append a new endpoint and get the status class of the endpoint.\n\nFinally, we will subscribe to the `goggles_channel` and listen to the `new_endpoint_request` event, where our endpoint updates will be transmitted:\n\n```\n    \u003c!-- endpoints.html --\u003e\n    \u003cscript\u003e\n    // ...\n    \n    const channel = pusher.subscribe(\"goggles_channel\");\n    \n    channel.bind('new_endpoint_request', function(data) {\n        let end_point_id = data.ID;\n        if ( $('#endpoint-' + end_point_id).length \u003e 0 ) {\n            let status_class = getItemStatusClass(data['LastStatus']),\n                endpoint     = $('#endpoint-' + end_point_id);\n            let calls = 1 * endpoint.find('span.times_called').text()\n            endpoint.find('span.last_status').text(data['LastStatus']);\n            endpoint.find('span.times_called').text( (calls + 1) )\n            endpoint.removeClass('list-group-item-success');\n            endpoint.removeClass('list-group-item-danger');\n            endpoint.removeClass('list-group-item-warning');\n            endpoint.addClass('list-group-item-' + status_class);\n        } else {\n            addNewEndPoint(data);\n        }\n    });\n    \n    // ...\n```\n\nIn the `new_endpoint_request` event handler, the endpoint data is categorized into either an update scenario (where the endpoint already exists on the dashboard) or a create scenario (where a new list item is created and appended).\n\nFinally, you can build your application and when you run it you should see something similar to what we have in the preview:\n\n![monitor-api-go-demo](//images.contentful.com/1es3ne0caaid/5neldRoqw86YwmkUAWOCK6/62eaee0a825b4e1bb511a3c22ed07133/monitor-api-go-demo.gif)\n\n## Conclusion\n\nIn this article, we were able to monitor the realtime requests to a REST API and demonstrate how Pusher works with GoLang applications.","metaTitle":"Monitor APIs in realtime using Go","metaDescription":"Discover how you can build your own realtime API monitor using Go and jQuery."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1W0o3xrMZWMK4SuGQUAIo","type":"Entry","createdAt":"2018-02-28T11:57:19.883Z","updatedAt":"2018-02-28T11:57:19.883Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime map using Kotlin","url":"realtime-map-kotlin","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/realtime-map-example-kotlin","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-02-09","description":"In this tutorial, you will learn how to build a realtime map using Kotlin, Node.js and Google Maps API.","prerequisite":"A basic understanding of Kotlin and Node.js is needed to follow this tutorial.","content":"Just as the name implies, the aim of this article is to show the realtime movement of a marker on a map. This feature is common in location tracking applications. We see taxi apps and food ordering apps making use of features like this. Google provides an extremely easy map API, which we will take advantage of, while the realtime functionalities will be taken care of by Pusher. \n\n## What we will build\n\nWe will build an application that will receive coordinates from the server based on the initial coordinates we inject into it. When these coordinates are received, we update the map on our app.\n\n![realtime-map-kotlin-demo](//images.contentful.com/1es3ne0caaid/5u93CRuILe084MwgCgwym6/e3ad9d2c35219aa3f3c2820d3f8fae3d/realtime-map-kotlin-demo.gif)\n\n## Requirements\n\nFor this tutorial, we need the following:\n- [Android studio](https://developer.android.com/studio/archive.html) - version 3.0.1 or higher is recommended.\n- [Node JS](https://nodejs.org/) and npm installed on your machine.\n- A [Pusher](https://dashboard.pusher.com) application.\n- [Google Maps API key](https://developers.google.com/maps/documentation/android-api/signup).\n- An Android device with Google Play Services installed.\n\n## Building our server\n\nWe will build our server using Node JS. The server will generate random coordinates for us. To start with, create a new folder. Inside it, create a new file named `package.json` and paste this:\n\n```\n    {\n        \"main\": \"index.js\",\n        \"dependencies\": {\n            \"body-parser\": \"^1.16.0\",\n            \"express\": \"^4.14.1\",\n            \"pusher\": \"^1.5.1\"\n        }\n    }\n```\n\nNext, create file called `index.js` in the root directory and paste this:\n\n```\n    // Load the required libraries\n    let Pusher = require('pusher');\n    let express = require('express');\n    let bodyParser = require('body-parser');\n    \n    // initialize express and pusher\n    let app = express();\n    let pusher = new Pusher(require('./config.js'));\n    \n    // Middlewares\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // Generates 20 simulated GPS coords and sends to Pusher\n    app.post('/simulate', (req, res, next) =\u003e {\n      let loopCount = 0\n      let operator  = 0.001000  \n      let longitude = parseFloat(req.body.longitude)\n      let latitude  = parseFloat(req.body.latitude)\n    \n      let sendToPusher = setInterval(() =\u003e {\n        loopCount++;\n    \n        // Calculate new coordinates and round to 6 decimal places...\n        longitude = parseFloat((longitude + operator).toFixed(7))\n        latitude  = parseFloat((latitude - operator).toFixed(7))\n    \n        // Send to pusher\n        pusher.trigger('my-channel', 'new-values', {longitude, latitude})\n    \n        if (loopCount === 20) {\n          clearInterval(sendToPusher)\n        }\n      }, 2000);\n      \n      res.json({success: 200})\n    })\n    \n    // Index\n    app.get('/', (req, res) =\u003e res.json(\"It works!\"));\n    \n    // Serve app\n    app.listen(4000, _ =\u003e console.log('App listening on port 4000!'));\n```\n\nThe code above is an Express application. In the `/simulate` route, we are simulating longitude and latitude values and then sending them to Pusher. These will then be picked by our application. \n\n\u003e 💡 The longitude and latitude values will typically be obtained from the device being tracked in a real-life scenario.\n\nFinally, we will create the configuration file, named `config.js`. Paste this snippet there:\n\n```\n    module.exports = {\n        appId: 'PUSHER_APP_ID',\n        key: 'PUSHER_APP_KEY',\n        secret: 'PUSHER_APP_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n    };\n```\n\nReplace the values there with the keys from your Pusher dashboard. Then install the modules needed by our server by running this command in the root directory:\n\n```\n    $ npm install\n```\n\nOur server should be up and running on port **4000**.\n\n\n## Building our realtime map in Android Studio\n\n### Create a new Android project\nOpen Android studio and create a new project. Enter your application details, include Kotlin support, choose a minimum SDK (this should not be less than API 14), choose an Empty Activity, and finish the process. Here is a quick GIF of the process:\n\n![realtime-map-kotlin-create-project](//images.contentful.com/1es3ne0caaid/1VNHmrSYbuOCuWUGMsQS4i/97fc57e24e9d9bfce38468218383b651/realtime-map-kotlin-create-project.gif)\n\n### Adding app dependencies\nThis demo has several dependencies. We need the Pusher dependency for realtime functionality, the Google Maps API for easy integration of maps into our app, and Retrofit to access our server with ease. \n\nOpen your app-module `build.gradle` file and paste the following dependencies:\n\n```\n    // Pusher dependency\n    implementation 'com.pusher:pusher-java-client:1.5.0'\n    \n    // Google maps API\n    implementation 'com.google.android.gms:play-services-maps:11.8.0'\n    \n    // Retrofit dependencies\n    implementation 'com.squareup.retrofit2:retrofit:2.3.0'\n    implementation 'com.squareup.retrofit2:converter-scalars:2.3.0'\n```\n\nSync your Gradle files so that the libraries can be downloaded and made available.\n\n### Building our layout\nOpen the `activity_main.xml` and paste this:\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cFrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\"\u003e\n        \u003cfragment xmlns:android=\"http://schemas.android.com/apk/res/android\"\n            xmlns:tools=\"http://schemas.android.com/tools\"\n            android:layout_marginTop=\"50dp\"\n            android:id=\"@+id/map\"\n            android:name=\"com.google.android.gms.maps.SupportMapFragment\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            tools:context=\"com.example.mapwithmarker.MapsMarkerActivity\" /\u003e\n        \u003cButton\n            android:id=\"@+id/simulateButton\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Simulate\" /\u003e\n    \n    \u003c/FrameLayout\u003e\n```\n\nIn the snippet above, we have a fragment which will hold our map and a button.\n\n### Setting up Google Maps API key\nIt is expected that at this point, you have obtained your API key. You can follow the steps [here](https://developers.google.com/maps/documentation/android-api/signup) to get it. We now want to configure the application with our key. Open your `strings.xml` file and paste it in. This is located at `name-of-project/app/src/main/res/values`:\n\n```\n    \u003cresources\u003e\n        \u003c!-- ... --\u003e\n        \u003cstring name=\"google_maps_key\"\u003eGOOGLE_MAPS_KEY\u003c/string\u003e\n    \u003c/resources\u003e\n```\n\n\u003e ⚠️  Replace the `GOOGLE_MAPS_KEY` placeholder with the actual key from Google.\n\nThis file contains all strings used during the development of the application. All raw strings within the app are kept here. It is required when there is a need to translate your app into multiple languages.\n\nNext, open the `AndroidManifest.xml` file and paste these under the `\u003capplication\u003e` tag:\n\n```\n    \u003cmeta-data\n        android:name=\"com.google.android.gms.version\"\n        android:value=\"@integer/google_play_services_version\" /\u003e\n    \u003cmeta-data\n        android:name=\"com.google.android.geo.API_KEY\"\n        android:value=\"@string/google_maps_key\" /\u003e\n```\n\nWith this, our app knows how and where to fetch our key.\n\n### Setting up Retrofit\nWe already have Retrofit available as a dependency, but we need two more things - an interface to show endpoints/routes to be accessed and our retrofit object. First create a new Kotlin file name `ApiInterface.kt` and paste this:\n\n```\n    import okhttp3.RequestBody\n    import retrofit2.Call\n    import retrofit2.http.Body\n    import retrofit2.http.POST\n    \n    interface ApiInterface {\n        @POST(\"/simulate\")\n        fun sendCoordinates(@Body coordinates: RequestBody): Call\u003cString\u003e\n    }\n```\n\nSince we will make just one request in this demo, we will limit the scope of our Retrofit object to the `MainActivity.kt` class. This means we will create a function within a class for it. Paste this function into the class:\n\n```\n    fun getRetrofitObject(): ApiInterface {\n        val httpClient = OkHttpClient.Builder()\n        val builder = Retrofit.Builder()\n                .baseUrl(\"http://10.0.3.2:4000/\")\n                .addConverterFactory(ScalarsConverterFactory.create())\n    \n        val retrofit = builder\n                .client(httpClient.build())\n                .build()\n        return retrofit.create(ApiInterface::class.java)\n    }\n```\n\nI used a Genymotion emulator and the recognized localhost address for it is `10.0.3.2`.\n\nAdd the internet permission to the `AndroidManifest.xml` file:\n\n```\n    \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n```\n\n### Configuring our map and getting realtime updates\nFor us to initialize and use the map, our the `MainActivity.kt` class must implement the `OnMapReadyCallback` interface and override the `onMapReady` method. We also need to setup Pusher to listen to events and receive the simulated coordinates in realtime. Open your `MainActivity.kt` and paste this:\n\n```\n    import android.support.v7.app.AppCompatActivity\n    import android.os.Bundle\n    import android.util.Log\n    import com.google.android.gms.maps.*\n    import com.google.android.gms.maps.model.MarkerOptions\n    import com.google.android.gms.maps.model.LatLng\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import kotlinx.android.synthetic.main.activity_main.*\n    import okhttp3.MediaType\n    import okhttp3.OkHttpClient\n    import org.json.JSONObject\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    import retrofit2.Retrofit\n    import retrofit2.converter.scalars.ScalarsConverterFactory\n    import okhttp3.RequestBody\n    import com.google.android.gms.maps.model.CameraPosition\n    import com.google.android.gms.maps.model.Marker\n    \n    class MainActivity : AppCompatActivity(), OnMapReadyCallback {\n        private lateinit var markerOptions:MarkerOptions\n        private lateinit var marker:Marker\n        private lateinit var cameraPosition:CameraPosition\n        var defaultLongitude = -122.088426\n        var defaultLatitude  = 37.388064\n        lateinit var googleMap:GoogleMap\n        lateinit var pusher:Pusher\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_main)\n            markerOptions = MarkerOptions()\n            val latLng = LatLng(defaultLatitude,defaultLongitude)\n            markerOptions.position(latLng)\n            cameraPosition = CameraPosition.Builder()\n                    .target(latLng)\n                    .zoom(17f).build()\n    \n        }\n    \n        override fun onMapReady(googleMap: GoogleMap?) {\n            this.googleMap = googleMap!!\n            marker = googleMap.addMarker(markerOptions)\n            googleMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition))\n        }\n    }\n```\n\nWe first created some class variables to hold our initial coordinates and other map utilities like the camera position and the marker position. We initialized them in the `onCreate` function. Next, we added a click listener to the simulate button. \n\nThe next thing to do is still in the `MainActivity.kt` class. In the `onCreate` method, paste this:\n\n```\n    simulateButton.setOnClickListener {\n        callServerToSimulate()\n    }\n```\n\nWhen the button is clicked, it calls the `callServerToSimulate` function. Create a function `callServerToSimulate` within the class like this:\n\n```\n    private fun callServerToSimulate() {\n        val jsonObject = JSONObject()\n        jsonObject.put(\"latitude\",defaultLatitude)\n        jsonObject.put(\"longitude\",defaultLongitude)\n    \n        val body = RequestBody.create(\n            MediaType.parse(\"application/json\"), \n            jsonObject.toString()\n        )\n    \n        getRetrofitObject().sendCoordinates(body).enqueue(object:Callback\u003cString\u003e{\n            override fun onResponse(call: Call\u003cString\u003e?, response: Response\u003cString\u003e?) {\n                Log.d(\"TAG\",response!!.body().toString())\n            }\n    \n            override fun onFailure(call: Call\u003cString\u003e?, t: Throwable?) {\n                Log.d(\"TAG\",t!!.message)\n            }\n        })\n    }\n```\n\nIn this function, we sent our initial coordinates to our server. The server then generates twenty coordinates similar to the initial ones sent and uses Pusher to send them to channel `my-channel`, firing the `new-values` event.\n\nNext, we create and initialize a `SupportMapFragment` object with the view ID of the map:\n\n```\n    val mapFragment = supportFragmentManager.findFragmentById(R.id.map) as SupportMapFragment\n    mapFragment.getMapAsync(this)\n    setupPusher()\n```\n                \nNext add the the `setupPusher` function to the class and it should looks like this:\n\n```\n    private fun setupPusher() {\n        val options = PusherOptions()\n        options.setCluster(PUSHER_CLUSTER)\n        pusher = Pusher(PUSHER_API_KEY, options)\n    \n        val channel = pusher.subscribe(\"my-channel\")\n    \n        channel.bind(\"new-values\") { channelName, eventName, data -\u003e\n            val jsonObject = JSONObject(data)\n            val lat:Double = jsonObject.getString(\"latitude\").toDouble()\n            val lon:Double = jsonObject.getString(\"longitude\").toDouble()\n    \n            runOnUiThread {\n                val newLatLng = LatLng(lat, lon)\n                marker.position = newLatLng\n                cameraPosition = CameraPosition.Builder()\n                        .target(newLatLng)\n                        .zoom(17f).build()\n                googleMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition))\n            }\n        }\n    }\n```\n\nWe initialized Pusher here and listened for coordinate updates. When we receive any update, we update our marker and move the camera view towards the new point. You are expected to replace the Pusher parameters with the keys and details found on your Pusher dashboard.\n\nWe then call the disconnect and connect functions in the `onPause` and `onResume` functions respectively in the class. These functions are inherited from the parent class `AppCompatActivity`:\n\n```\n    override fun onResume() {\n        super.onResume()\n        pusher.connect()\n    }\n    \n    override fun onPause() {\n        super.onPause()\n        pusher.disconnect()\n    }\n```\n\n## Conclusion\n\nWe have been able to leverage the power of Pusher, Kotlin and Google Maps API to create a realtime location tracking app. Hopefully you have picked up a thing or two from the tutorial and can use the knowledge to build beautiful realtime apps using Pusher and Kotlin.","metaTitle":"Build a realtime map using Kotlin","metaDescription":"The intersection of geolocation and technology has become a very important part of our live. This tutorial is going to help your on how you can create a live map with Kotlin and Node.js."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"BYMUj9H49E08Wi8GKWM0E","type":"Entry","createdAt":"2018-02-28T12:21:17.268Z","updatedAt":"2018-06-21T09:23:00.104Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a cryptocurrency tracker using Vue.js","url":"cryptocurrency-tracker-vue","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/sample-vue-pwa-cryptocurrency-watcher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4kOTcNAC12gwWEyE6MimMY","type":"Entry","createdAt":"2018-02-12T15:08:28.581Z","updatedAt":"2018-02-26T12:31:12.766Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Trading","url":"trading","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-02-09","description":"In this tutorial, learn how to build a live cryptocurrency tracking view with Progressive Web Apps, Vue.js and Node.js.","prerequisite":"A basic understanding of Vue.js, Node.js and PWA is needed to follow this tutorial.","content":"PWAs (Progressive Web Applications) has already been identified as the future of web applications and the reason is quite obvious. PWAs let you build web apps that are capable of delivering native app-like experiences to users.\n\nFrom sending push notifications, to caching data for offline retrieval, to background sync, Progressive web apps have got you completely covered. PWAs can also ensure that users are engaged and up to date with dynamic data even with very poor network connections.\n\n\u003e Progressive Web App (PWA) is a term used to denote web applications that use the latest web technologies. Progressive Web Apps, also known as Installable Web Apps or Hybrid Web Apps, are regular web pages or websites but can appear to the user like traditional applications or native mobile applications. The application type attempts to combine features offered by most modern browsers with the benefits of mobile experience. - [Wikipedia](https://en.wikipedia.org/wiki/Progressive_web_app)\n\nThis article demonstrates how to build a simple realtime PWA with Vue.js and Pusher.\nVue.js is a Progressive Web Framework for JavaScript, it’s easy to use, and requires relatively little code to produce awesome results.\n\nFor the realtime part of this application, we will be plugging in Pusher’s JavaScript library. Pusher is a realtime engine that makes it easy to add realtime functionalities to applications.\n\n## What we’ll be building\n\nIn this article, we will be building a cryptocurrency application called “KryptoWatcher”. Its function is to display the price updates of three cryptocurrencies (Bitcoin, Ethereum, and Litecoin) in realtime. The price updates will be obtained from the Cryptocompare API.\n\nKryptoWatcher will also be able to travel five days into the past and retrieve coin data for those days. Here’s a visual display of what the final application will look like:\n\n![cryptocurrency-tracker-vue-demo](//images.contentful.com/1es3ne0caaid/70YNXoNPl6cuAOAmS0SW8a/3b318c61b0a19378604ac5607a3201eb/cryptocurrency-tracker-vue-demo.gif)\n\nThe best part of it all is that, after this app runs once, it can run again and display coin data even without an internet connection. This is possible because we’ll build `KryptoWatcher` to cache the coin data on the first run.\n\nLet’s start putting the pieces together.\n\n## Requirements\n\nTo follow along in this tutorial, you will need to have the following:\n- Knowledge of [Vue.js](https://vuejs.org/).\n- [Vue CLI](https://vuejs.org/v2/guide/installation.html#CLI) installed on your machine.\n- [Node and NPM](https://docs.npmjs.com/getting-started/installing-node) installed on your machine.\n- Knowledge of Node.js and Express framework.\n- Knowledge of JavaScript.\n- A Pusher Application. [Create one here](https://pusher.com).\n\nOnce you have requirements we can move on to setting up our application.\n\n## Setting up your Pusher application\n\nCreate a [Pusher account](https://pusher.com/), if you have not already, and then set up your application as seen in the screenshot below.\n\n![cryptocurrency-tracker-vue-create-app](//images.contentful.com/1es3ne0caaid/4dQB7DXuQEyecCwE06AuSy/3d775f17a03b1895f67c6e8b80e65e2f/cryptocurrency-tracker-vue-create-app.png)\n\nWhen you have completed the set up, take note of your Pusher application keys as we will need them later on.\n\n## Setting up our Vue.js PWA application\n\nYou can think of the Vue CLI tool as a lightweight tool for scaffolding Vue.js projects. To start building our application we will use the Vue CLI tool to pull in the [Vue PWA template](https://github.com/vuejs-templates/pwa) that we will be working with. \n\nTo create our application run the following command on your terminal:\n\n```\n    $ vue init pwa krypto-watcher\n```\n\nYou’ll be presented with prompts and a few ‘Yes’ or ‘No’ questions. You can answer most as you see fit, however, for the “Y” or “N” prompts, since we do not require the additional functionalities and features, let’s respond with “N” to all the queries.\n\n\n![cryptocurrency-tracker-vue-project-details](//images.contentful.com/1es3ne0caaid/64HwW3fkUouk2OuuGMkmeC/d7b56613d14ecc9f66bb25b55b3e248a/cryptocurrency-tracker-vue-project-details.png)\n\n\nThe template gives us awesome PWA features out of the box. One such feature is the service worker. The service worker allows our application to work offline.\n\n\n\u003e 💡  A service worker is a script that your browser runs in the background, separate from a web page, opening the door to features that don't need a web page or user interaction.\n\nTo install the dependencies, go to your terminal window and run the following command:\n \n```\n    $ cd krypto-watcher \u0026\u0026 npm install\n```\n\nIf you take a look at your project directory, you will find that it contains a few subfolders: `build`, `config`, `src`, `static`, `test`. Let’s open the `build/webpack.prod.conf.js` file and take a quick peek at the `SWPrecacheWebpackPlugin` object:\n\n```\n    new SWPrecacheWebpackPlugin({\n        cacheId: 'krypto-watcher',\n        filename: 'service-worker.js',\n        staticFileGlobs: ['dist/**/*.{js,html,css}'],\n        minify: true,\n        stripPrefix: 'dist/'\n    })\n```\n\nWhat this does is generate a new service worker when the application is built (with the `npm run build` command).\n\nThe service worker will cache all the files that match the glob expression, for offline access, in `staticFileGlobs` which currently points to a non-existent `dist` folder. The `dist` directory will be created when we build our application.\n\nLet’s start building out our application component by component.\n\n### Vue.js components\n\nSimilar to other modern JavaScript libraries and frameworks like React, Vue allows us to create components when building applications. Components help us keep our application modular and ensure that apps can be separated into reusable modules.\n\nLet’s build `KryptoWatcher` by creating three reusable components:\n\n1. The `Intro` component which will hold the introductory markup and styles for the application.\n2. The `Current` component which will display coin prices in realtime.\n3. The `Previous` component which will display coins prices from ‘x days ago’.\n\nLet us start creating the components. We will be doing them manually however you can always use an NPM package like [this](https://www.npmjs.com/package/vue-generate-component) to make it easier to create components. Create a `src/components` directory and create the following files in the directory: `Intro.vue`, `Current.vue`, and `Previous.vue`.\n\n### The intro component\nThis component has no special functionalities as it just holds the intro markup and styles that will make the app presentable. The HTML goes between the `template` tags and the styles go in the `styles` tag.\n\nIn the `Intro.vue` file paste the following:\n\n```\n    \u003ctemplate\u003e\n      \u003cheader class=\"hero\"\u003e\n        \u003cdiv class=\"bar logo\"\u003e\n          \u003ch3\u003eKryptoWatcher\u003c/h3\u003e\n          \u003cspan class=\"monitor\"\u003e\u003cspan class=\"monitorText\"\u003ereceive updates\u003c/span\u003e\u003c/span\u003e\n        \u003c/div\u003e\n        \u003ch1\u003eRealtime PWA that displays updates on cryptocurrencies\u003c/h1\u003e\n        \u003ch2\u003eBitcoin, Ethereum, Litecoin?\u003c/h2\u003e\n      \u003c/header\u003e\n    \u003c/template\u003e\n    \u003cscript\u003eexport default { name: 'app' }\u003c/script\u003e\n    \n    \u003cstyle scoped\u003e\n    header {\n        background: linear-gradient(to bottom right, rgb(0, 193, 131),rgb(50, 72, 95));\n        padding: 1em;\n        margin-bottom: 1em;\n        text-align: center;\n        height: 300px;\n        color: #fff;\n    }\n    header h3 {\n        color: white;\n        font-weight: bold;\n        text-transform: uppercase;\n        float: left;\n    }\n    bar { padding: 20px; height: 48px; }\n    .monitor{\n        text-transform: uppercase;\n        float:right;\n        background-color: rgba(255, 255, 255, 0.2);\n        line-height: 23px;\n        border-radius: 25px;\n        width: 175px;\n        height: 48px;\n        margin: auto;\n    }\n    .monitor:hover, monitorText:hover { cursor:pointer; }\n    .monitorText{\n        width: 104px;\n        height: 23px;\n        font-weight: bold;\n        line-height: 50px;\n        font-size: 14px;\n    }\n    header h1 { padding-top: 80px; width: 80%; margin: auto; }\n    header h2{ padding-top:20px; }\n    \u003c/style\u003e\n```\n\nThat is all for the intro component.\n\n### The current component\nIn the `Current.vue` component, we’ll write some HTML that displays the prices in realtime as they are updated. Open the file and paste the following inside the file:\n\n```\n    \u003ctemplate\u003e\n      \u003cdiv\u003e\n        \u003ch2\u003eCurrent prices of coins\u003c/h2\u003e\n        \u003cdiv id=\"btc\" class=\"currency\"\u003e\n          \u003clabel\u003e1 BTC\u003c/label\u003e\n          \u003cp\u003e${{currentCurrency.BTC}}\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv id=\"eth\"class=\"currency\"\u003e\n          \u003clabel\u003e1 ETH\u003c/label\u003e\n          \u003cp\u003e${{currentCurrency.ETH}}\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv id=\"ltc\"class=\"currency\"\u003e\n          \u003clabel\u003e1 LTC\u003c/label\u003e\n          \u003cp\u003e${{currentCurrency.LTC}}\u003c/p\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nBelow the `template` tags, we will have the `script` tag. This will be where we will handle the scripting of the component. Below the `template` tag in the same file, paste the following code:\n\n```\n    \u003cscript\u003e\n    export default {\n      name: 'app',\n      props: {\n        currentCurrency: { type: Object }\n      }, \n      data () {\n        return {}\n      }\n    }\n    \u003c/script\u003e\n```\n\nThe script above specifies the `props` the `Current` component should expect. It will be getting it, `currentCurrency`, from the parent component `App.vue`.\n\nLastly, below the `script` tag, let’s include the `style` for the component. Paste the following code after the `script` tag:\n\n```\n    \u003cstyle scoped\u003e\n    .currency {\n      border: 1px solid #F5CE00;\n      border-radius: 15px;\n      padding: 2em 0em;\n      display: inline-block;\n      width: 30%;\n    }\n    div p { font-size: 2rem; }\n    h2 { font-size: 1.5em; }\n    \u003c/style\u003e\n```\n\nThat’s all for the `Current` component.\n\n### The previous component\nThis component should display the prices of coins in the past, five days at most. We’ll also display the dates of each of the days.\n\nInside the `Previous.vue` file paste the following code:\n\n```\n    \u003ctemplate\u003e\n      \u003cdiv\u003e\n        \u003ch2\u003ePrevious prices of coins\u003c/h2\u003e\n        \u003cdiv id=\"first\"\u003e\n          \u003ch2\u003eDate:   {{previousCurrency.yesterday.DATE}}\u003c/h2\u003e\n          \u003cp\u003e\u003clabel\u003e1 BTC:\u003c/label\u003e {{previousCurrency.yesterday.BTC}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 ETH:\u003c/label\u003e {{previousCurrency.yesterday.ETH}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 LTC:\u003c/label\u003e {{previousCurrency.yesterday.LTC}}\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv id=\"second\"\u003e\n          \u003ch2\u003eDate:   {{previousCurrency.twoDays.DATE}}\u003c/h2\u003e\n          \u003cp\u003e\u003clabel\u003e1 BTC:\u003c/label\u003e {{previousCurrency.twoDays.BTC}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 ETH:\u003c/label\u003e {{previousCurrency.twoDays.ETH}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 LTC:\u003c/label\u003e {{previousCurrency.twoDays.LTC}}\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv id=\"third\"\u003e\n          \u003ch2\u003eDate:   {{previousCurrency.threeDays.DATE}}\u003c/h2\u003e\n          \u003cp\u003e\u003clabel\u003e1 BTC:\u003c/label\u003e {{previousCurrency.threeDays.BTC}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 ETH:\u003c/label\u003e {{previousCurrency.threeDays.ETH}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 LTC:\u003c/label\u003e {{previousCurrency.threeDays.LTC}}\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv id=\"fourth\"\u003e\n          \u003ch2\u003eDate:   {{previousCurrency.fourDays.DATE}}\u003c/h2\u003e\n          \u003cp\u003e\u003clabel\u003e1 BTC:\u003c/label\u003e {{previousCurrency.fourDays.BTC}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 ETH:\u003c/label\u003e {{previousCurrency.fourDays.ETH}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 LTC:\u003c/label\u003e {{previousCurrency.fourDays.LTC}}\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv id=\"fifth\"\u003e\n          \u003ch2\u003eDate:   {{previousCurrency.fiveDays.DATE}}\u003c/h2\u003e\n          \u003cp\u003e\u003clabel\u003e1 BTC:\u003c/label\u003e {{previousCurrency.fiveDays.BTC}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 ETH:\u003c/label\u003e {{previousCurrency.fiveDays.ETH}}\u003c/p\u003e\n          \u003cp\u003e\u003clabel\u003e1 LTC:\u003c/label\u003e {{previousCurrency.fiveDays.LTC}}\u003c/p\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nIn the `script` section, we’ll be receiving the `previousCurrency` object from the parent component, `App.vue`. In the same file paste the following code after the `template` tag:\n\n```\n    \u003cscript\u003e\n    export default {\n      name: 'app',\n      props: {\n        previousCurrency: { type: Object }\n      },\n      data () {\n        return {}\n      }\n    }\n    \u003c/script\u003e\n```\n\nLastly, some styles to help things stay pretty:\n\n```\n    \u003cstyle scoped\u003e\n    #first, #second, #third, #fourth, #fifth {\n      border: 1px solid #F5CE00;\n      padding: 2em 0em;\n      max-width: 90%;\n      margin: 3px auto;\n    }\n    #first p, #second p, #third p, #fourth p, #fifth p {\n      display: inline-block;\n      padding: 0em 1.5em;\n      font-size: 1.5rem;\n    }\n    h2 { font-size: 1.5em; }\n    \u003c/style\u003e\n```\n\nThat’s pretty much all the business we have with the three components, they are pretty straightforward. Most of the complexity and app logic are buried in the root component, `App.vue`. Let’s explore that next.\n\n### Setting up the root component\n\nThe root component is included by default in every fresh Vue installation in the `src/App.vue` file, so we don’t need to create it. Unlike the other components we created earlier, the root component holds the logic and is more complex than them. \n\nWe’ll keep the `template` tag of the root component simple. We include the earlier components, `Intro.vue`, `Current.vue`, and `Previous.vue`, as custom tags and pass in the appropriate `props`.\n\nIn the `App.vue` file, replace the contents with the following:\n\n```\n    \u003ctemplate\u003e\n      \u003cdiv\u003e\n        \u003cintro\u003e\u003c/intro\u003e\n        \u003cdiv id=\"body\"\u003e\n          \u003cdiv id=\"current\"\u003e\n            \u003ccurrent v-bind:currentCurrency=\"currentCurrency\"\u003e\u003c/current\u003e\n          \u003c/div\u003e\n          \u003cdiv id=\"previous\"\u003e\n            \u003cprevious v-bind:previousCurrency=\"previousCurrency\"\u003e\u003c/previous\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nNext, let’s add some `script` and start adding logic in the `script` section. Paste the following below the `template` tag:\n\n```\n    \u003cscript\u003e\n    import Intro from './components/Intro.vue';\n    import Current from './components/Current.vue';\n    import Previous from './components/Previous.vue';\n    \n    export default {\n      name: 'app',\n      components: {Intro, Current, Previous},\n      data() {\n        return {\n          currentCurrency: {BTC: '', ETH: '', LTC: ''},\n          previousCurrency: {\n            yesterday: {}, twoDays: {}, threeDays: {}, fourDays: {}, fiveDays: {}\n          }\n        }\n      },\n      methods: {\n        // Stub\n      },\n      created() {\n        // Stub\n      }\n    }\n    \u003c/script\u003e\n```\n\nThe script above does not do much but it sets the stage for our logic. We have set all the defaults for the `data` we will be using in the application and we have defined the `created` method that is called automatically during Vue’s component lifecycle. We also imported the components we will be using in the application.\n\nBefore we start adding script logic, let’s add some style for the root component. Below the `script` tag, paste the following code:\n\n```\n    \u003cstyle\u003e\n    @import url('https://fonts.googleapis.com/css?family=Lato');\n    * {\n      margin : 0px;\n      padding : 0px;\n      font-family: 'Lato', sans-serif;\n    }\n    body { height: 100vh; width: 100%; }\n    .row { display: flex; flex-wrap: wrap; }\n    h1 { font-size: 48px; }\n    a { color: #FFFFFF; text-decoration: none; }\n    a:hover { color: #FFFFFF; }\n    a:visited { color: #000000; }\n    .button {\n      margin: auto;\n      width: 200px;\n      height: 60px;\n      border: 2px solid #E36F55;\n      box-sizing: border-box;\n      border-radius: 30px;\n    }\n    #body {\n      max-width: 90%;\n      margin: 0 auto;\n      padding: 1.5em;\n      text-align: center;\n      color:rgb(0, 193, 131);\n    }\n    #current { padding: 2em 0em; }\n    #previous { padding: 2em 0em; }\n    \u003c/style\u003e\n```\n\n### Adding methods to our root component\n\nWe need to populate the `method` object with actual methods. We’ll start by defining the methods that will retrieve coin prices for previous days.\n\n### Pulling in dependencies\nSince we are getting data from a remote API, we need an HTTP client to pull in the data for us. In this article, we’ll be using the promise based HTTP client [axios](https://github.com/axios/axios) to make our HTTP requests. We also need [moment](https://momentjs.com/) to easily work with dates.\n\nTo add Axios and Moment.js to our project, run the following command in your terminal:\n\n```\n    npm install --save vue-axios axios vue-momentjs moment\n```\n\n\u003e 💡  `vue-axios` and `vue-momentjs` are Vue wrappers around the Axios and Moment.js packages.\n\nWhen the installation is complete, we will globally import the packages to our application. Open the `src/main.js` file and in there replace:\n\n```\n    import App from './App'\n```\n\nwith:\n\n```\n    import App from './App'\n    import moment from 'moment';\n    import VueMomentJS from 'vue-momentjs';\n    import axios from 'axios'\n    import VueAxios from 'vue-axios'\n     \n    Vue.use(VueAxios, axios)\n    Vue.use(VueMomentJS, moment);\n```\n\n### Building the methods logic\nNext, we want to go back to our root component and build out the `methods` object. In the `methods` object, let’s create the first method. Paste the following code inside the `methods` object in the `App.vue` file:\n\n```\n    _fetchDataFor: (key, daysAgo) =\u003e {\n      var date = this.$moment().subtract(daysAgo, 'days').unix()\n      let fetch = (curr, date) =\u003e this.axios.get(`https://min-api.cryptocompare.com/data/pricehistorical?fsym=${curr}\u0026tsyms=USD\u0026ts=${date}`)\n      \n      this.axios\n          .all([fetch('BTC', date), fetch('ETH', date), fetch('LTC', date)])\n          .then(this.axios.spread((BTC, ETH, LTC) =\u003e {\n              this.previousCurrency[key] = {\n                  BTC: BTC.data.BTC.USD,\n                  LTC: LTC.data.LTC.USD,\n                  ETH: ETH.data.ETH.USD,\n                  DATE: this.$moment.unix(date).format(\"MMMM Do YYYY\"),\n              }\n              \n              localStorage.setItem(`${key}Prices`, JSON.stringify(this.previousCurrency[key]));\n          }))\n    },\n```\n\nThe method above is a helper method for fetching the coin exchange rate within a specified period and saving the response in `localStorage` and the `this.previousCurrency` object. We will use this later in the code.\n\nNext, paste the following function inside the `methods`  object alongside the one we added above:\n\n```\n    _fetchDataForToday: () =\u003e {\n      let url = 'https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC\u0026tsyms=USD'\n      \n      this.axios.get(url).then(res =\u003e {\n        localStorage.setItem('BTC', this.currentCurrency.BTC = res.data.BTC.USD),\n        localStorage.setItem('ETH', this.currentCurrency.ETH = res.data.ETH.USD),\n        localStorage.setItem('LTC', this.currentCurrency.LTC = res.data.LTC.USD)\n      })\n    },\n```\n\nThe method above simply fetches the coin data for the current date and saves the response to `localStorage` and the `this.currentCurrency` object.\n\nNext, inside the `created()` method of the root component, paste in the following code:\n\n```\n    if ( ! navigator.onLine) {\n      this.currentCurrency = {\n        BTC: localStorage.getItem('BTC'),\n        ETH: localStorage.getItem('ETH'),\n        LTC: localStorage.getItem('LTC'),\n      }\n      \n      this.previousCurrency = {\n        yesterday: JSON.parse(localStorage.getItem('yesterdayPrices')),\n        twoDays:   JSON.parse(localStorage.getItem('twoDaysPrices')),\n        threeDays: JSON.parse(localStorage.getItem('threeDaysPrices')),\n        fourDays:  JSON.parse(localStorage.getItem('fourDaysPrices')),\n        fiveDays:  JSON.parse(localStorage.getItem('fiveDaysPrices'))\n      }\n    } else {\n      this._fetchDataFor('yesterday', 1)\n      this._fetchDataFor('twoDays', 2)\n      this._fetchDataFor('threeDays', 3)\n      this._fetchDataFor('fourDays', 4)\n      this._fetchDataFor('fiveDays', 5)\n      this._fetchDataForToday()\n    }\n```\n\nIn the code above, we have defined the code to fetch the current currency from `localStorage` if the client is offline. If the client is online though, it fetches the data from the API.\n\nEverything should be working now except the realtime functionality.\n\n![cryptocurrency-tracker-vue-draft](//images.contentful.com/1es3ne0caaid/70EsAUqmNqSogEYYgwg640/c70439aeb26fd7963309b4cfb39dce7f/cryptocurrency-tracker-vue-draft.png)\n\n### Integrating realtime functionality using Pusher\n\nNow that we have a functional application, we would like to add some realtime functionality so we see updates as they happen. \n\nWe will be using Pusher to provide this functionality, if you haven’t, create your Pusher application from the Pusher dashboard as you will need the: `app_id`, `key`, `secret` and `cluster`.\n\n#### Building a Node.js backend for our application\nWe need a backend server to trigger events to Pusher, we will be using Node.js to build the backend for this article.\n\nTo get started, create a new file in the root directory of our application and call it `server.js`.\nIn this `server.js` file, we’ll be using `Express` as the web framework so we need to pull that in. We’ll also pull in `axios`, `Pusher` and `body-parser` since we’d be making references to them in our code.\n\nIn your terminal type in the following command:\n\n```\n    $ npm install --save express axios body-parser pusher\n```\n\nWhen the installation is complete, open the `server.js` file and in the file paste in the following code:\n\n```\n    const express = require('express');\n    const path = require('path');\n    const bodyParser = require('body-parser');\n    const app = express();\n    const Pusher = require('pusher');\n    const axios = require('axios');\n    \n    \n    // Initialise Pusher\n    var pusher = new Pusher({\n      appId: 'PUSHER_APP_ID',\n      key: 'PUSHER_APP_KEY',\n      secret: 'PUSHER_APP_SECRET',\n      cluster: 'PUSHER_APP_CLUSTER',\n      encrypted: true\n    });\n    \n    // Body parser middleware\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // CORS middleware\n    app.use((req, res, next) =\u003e {\n        res.setHeader('Access-Control-Allow-Origin', '*')\n        res.setHeader('Access-Control-Allow-Credentials', true)\n        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')\n        res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type')\n        next()\n    });\n    \n    // Routes\n    app.get('/', _ =\u003e res.send('Welcome'));\n    \n    // Simulated Cron\n    setInterval(_ =\u003e {\n      let url = 'https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC\u0026tsyms=USD';\n      \n      axios.get(url).then(res =\u003e {\n        pusher.trigger('price-updates', 'coin-updates', {coin: res.data})\n      })\n    }, 5000)\n    \n    // Start app\n    app.listen(8000, () =\u003e console.log('App running on port 8000!'));\n```\n\n\u003e 💡  You need to replace `PUSHER_APP_ID`, `PUSHER_APP_KEY`, `PUSHER_APP_SECRET`, and `PUSHER_APP_CLUSTER` with the details from your Pusher application dashboard.\n\nIn the Express app above, we import our dependencies and then instantiate Pusher. We then register some middleware including the [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) middleware so we don’t get cross origin request errors.\n\nNext, we have a “Simulated Cron” that runs after 5 seconds. The job is to fetch the updates from the server and send the updates to Pusher. Our Vue application can then subscribe to the Pusher channel, pull the changes and display them.\n\nFinally, we tell the Node app to listen on port **8000**. To start the Node server, run the command below:\n\n```\n    $ node server.js \n```\n\nThis will start a Node server and the simulated cron will start running and sending events to Pusher.\n\n## Creating an API proxy\n\nTo access our API server from the Vue application, we can create a proxy in `config/index.js` and run the dev server and the API backend side-by-side. All requests to `/api` in our frontend code will be proxied to the backend server.\n\nOpen the `config/index.js` and make the following modifications:\n\n```\n    // config/index.js\n    module.exports = {\n      // ...\n      dev: {\n        // ...\n        proxyTable: {\n            '/api': {\n            target: 'http://localhost:8000',\n            changeOrigin: true,\n            pathRewrite: {\n              '^/api': ''\n            }\n          }\n        },\n        // ...\n      }\n    }\n```\n\nIn the `proxyTable` we attempt to proxy requests from `/api` to `localhost:8000`. \n\n### Using Pusher in our Vue.js application\nTo use `Pusher` on the client side of our application we need to pull in the `pusher-js`. Run the following command in your terminal:\n\n```\n    $ npm install --save pusher-js\n```\n\nWhen the installation is complete, we will import `pusher-js` to the root component. Within the `script` tag add the following at the top:\n\n```\n    import Pusher from 'pusher-js'\n```\n\nNext we will initialize Pusher with the app credentials from the Pusher dashboard and subscribe to a channel in the `created()` life cycle hook. Open the `App.vue` and add this to the bottom of the `created()` method in the `else` block:\n\n```\n    let pusher = new Pusher('PUSHER_APP_KEY', {\n      cluster: 'PUSHER_APP_CLUSTER',\n      encrypted: true\n    });\n    \n    let channel = pusher.subscribe('price-updates');\n    \n    channel.bind('coin-updates', data =\u003e {\n      this.currentCurrency = {\n        BTC: data.coin.BTC.USD, \n        ETH: data.coin.ETH.USD, \n        LTC: data.coin.LTC.USD\n      }\n    });\n```\n\nIn the code above, we subscribe to receive updates on the `price-updates` channel. Then we bind to the `coin-updates` event on the channel. When the event is triggered, we get the data and update the `currentCurrency`.\n\nThat’s all now. You can build the application by running the command below:\n\n```\n    $ npm run dev\n```\n\nThis should start and open the Vue PWA on your browser. To make sure you receive updates, make sure your Node server is running. \n\n![cryptocurrency-watcher-vue-demo](//images.contentful.com/1es3ne0caaid/4beBtBCJjqiWK4GKa0Mw0i/13f64db1b24726b8b3e19ccb17aa92a6/cryptocurrency-watcher-vue-demo.gif)\n\n## Using service workers and offline capability\n\nAs it is, the application already functions but is not a PWA in true sense of the term. So let us work on making the application a PWA with offline storage. The build process already automatically generates the service worker when the application is built so let’s build the application. Run the following command to build the application:\n\n```\n    $ npm run build\n```\n\nThis command creates a `dist` folder in our working directory and also registers a new service worker. Let’s serve this `dist` directory and take a peek at the generated service worker in a Chrome web browser.\n\nWe’ll serve this application using an NPM package called [Serve](https://www.npmjs.com/package/serve). Run the following command to install it:\n\n```\n    $ npm i serve -g\n```\n\nWhen the installation is complete, we will use the package to serve the application. Run the following command to serve the application:\n\n```\n    $ serve dist\n```\n\nWe should get an output that looks like this:\n\n\n![cryptocurrency-tracker-vue-output](//images.contentful.com/1es3ne0caaid/5D35dFM7PGssemAeMO0IcS/2563dfc1d3b90732117be8babc5ae2d0/cryptocurrency-tracker-vue-output.png)\n\n\nIf we navigate to this address `http://localhost:5000` on our web browser, we’d see our application as it was the last time, no obvious changes except for the fact that the app is now a PWA.\n\nWe can inspect this feature by opening the browser’s dev tools and clicking on the “Application” tab. Here’s what we should see:\n\n\n![cryptocurrency-tracker-vue-service-workers](//images.contentful.com/1es3ne0caaid/1V3EsE6wwoicCOo6KQgiG0/35da6aa92c35a46419c58dacb08b7a3a/cryptocurrency-tracker-vue-service-workers.png)\n\n\nOur app registered a service worker that caches the app shell on the first run, thanks to the Vue PWA template.\n\n\n\u003e 💡  An application shell (or app shell) refers to the local resources that your web app needs to load the skeleton of your user interface (UI). Think of your app's shell like the bundle of code you would publish to a native app store when building a native app.\n\n\n## Conclusion\n\nIn this tutorial, we have seen how to write a simple realtime PWA with Vue.js, Pusher and Service Workers. We also saw how to cache dynamic values from a remote API using the Web Storage API’s storage object. There is a lot more you can do with PWAs and Vue, but this is a good introduction so far.","metaTitle":"Build a cryptocurrency tracker using Vue.js","metaDescription":"In this tutorial, learn how to build a realtime cryptocurrency tracker using Progressive Web Apps, Vue.js, Node.js and and Service Workers."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"7fFgA3TznUECEOsUEgWWsM","type":"Entry","createdAt":"2018-02-28T10:56:41.953Z","updatedAt":"2020-06-19T14:33:37.011Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime map using ASP.NET","url":"realtime-map-aspnet","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/realtime-map-dotnet","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"O9j65ghjKU6qKEgiEIOes","type":"Entry","createdAt":"2018-02-12T15:07:22.950Z","updatedAt":"2018-02-26T12:31:13.567Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Location","url":"location","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2kVecA2nXe6CSEuigMi4Yq","type":"Entry","createdAt":"2018-02-12T14:46:25.053Z","updatedAt":"2018-02-12T14:46:25.053Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"ASP.NET","url":"asp-net","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1NUYHyE9AsKICMGiIyCA4y","type":"Entry","createdAt":"2018-02-12T14:53:47.651Z","updatedAt":"2018-02-26T12:31:14.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"jQuery","url":"jquery","type":"library"}}],"reviewDate":"2018-02-02","description":"Build a realtime map using ASP.NET and Pusher. ","prerequisite":"A basic understanding of ASP.NET and jQuery is needed to follow this tutorial.","content":"Realtime maps are a popular feature in most modern applications. They are used in apps like Uber or Lyft, and in courier and delivery services to track the location of parcels or cabs and to monitor their progress and movement as they make their way to the customer.\n\nIn this article, we will look at how to build a realtime map using .NET and Pusher. Our resulting application will look like this:\n\n![realtime-map-aspnet-demo](//images.contentful.com/1es3ne0caaid/6CNl2xfqP6YOygySaS6k0I/fe08c0dd1e65f2496e67befa9102e652/realtime-map-aspnet-demo.gif)\n\n## Prerequisites\n\nTo follow along with this article, you’ll need:\n\n- Visual Studio IDE, find installation instructions [here](https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio).\n- Basic knowledge of C#.\n- Basic knowledge of JavaScript (ES6 syntax) and jQuery.\n\n## Setting up Pusher and Google Maps\n\nTo achieve our realtime map, we’ll be making use of two services: Pusher and Google Maps.\nPusher is a service that offers simple implementation of realtime functionality in web and mobile applications. We will use it primarily to transmit the realtime updates on our map. \n\nCreate a [Pusher account](https://pusher.com/), if you have not already, and then set up your application as seen in the screenshot below.\n\n![realtime-map-aspnet-create-app](//images.contentful.com/1es3ne0caaid/3wPqfDfQI0o2UuOsEAmW4G/317ddbeb75ad7e96001ac802adf1d2fa/realtime-map-aspnet-create-app.png)\n\nWhen you have completed the set up, take note of your Pusher application keys as we will need them later on.\n\nNext, we will set up a [Google Maps API](https://developers.google.com/maps/) project. The Google Maps API provides a service for embedding maps in our applications and provides access to location information of businesses, cities and much more for numerous countries all over the world. We will use this service to generate a map and mark the realtime locations on the map.\n\nUsing the Google Maps API [guide](https://developers.google.com/maps/documentation/javascript/get-api-key), create a project and copy out the API key.\n\n## Building the backend\n\nIn this article, using C#, we will build a small application that renders a map, on which the location will be displayed and marked in realtime.\n\n### Creating our project\n\nUsing the [Visual Studio IDE](https://www.visualstudio.com/), follow the **New Project Wizard**. We will need to:\n- Create our map project.\n- Set C# as our language to use.\n- Select .NET MVC Project as the template.\n- Fill in the Project name e.g. Gaia.\n- Fill in the Solution name i.e. application name.\n\n### Setting up our routes and controllers\n\nFor the purpose of this application, we will define two routes: the route to render the map and the route to send new locations to our map. Create a `RouteConfig.cs` file, and paste the following code:\n\n```\n    // RouteConfig.cs\n    routes.MapRoute(\n        name: \"Home\",\n        url: \"\",\n        defaults: new { controller = \"Home\", action = \"Index\" }\n    );\n    \n    routes.MapRoute(\n        name: \"Map\",\n        url:  \"map\",\n        defaults: new { controller = \"Map\", action = \"Index\" }\n    );\n```\n\nThese route definitions specify the route pattern and the **Controller** and **Action** to handle it. Based on this, we need to create two controller files in the Controllers directory, `HomeController.cs` and `MapController.cs`.\n\n\n\u003e 💡 Creating our project with Visual Studio automatically creates the `HomeContoller.cs` file with an `Index` action. We will use this for our home route.\n\nIn the `HomeController.cs` file, we add:\n\n```\n    // HomeController.cs\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Web;\n    using System.Web.Mvc;\n    using System.Web.Mvc.Ajax;\n    \n    namespace Gaia.Controllers\n    {\n        public class HomeController : Controller\n        {\n            public ActionResult Index()\n            {\n                return View();\n            }\n        }\n    }\n```\n\nThe above snippet renders our home view using the **View** function.\n\n\u003e 💡 The `View` function creates a view response which we return. When it is invoked, C# looks for the default view of the calling controller class. This default view is the `index.cshtml` file found in the Views directory, in a directory with the same name as the Controller.\n\u003e i.e. The default view of the HomeController class will be the `Views/Home/index.cshtml` file.\n\nIn the `MapController.cs` file, we will receive a location’s longitude and latitude via a POST request and transmit this location data to our map via the Pusher service. Add the following code:\n\n```\n    // MapController.cs\n    \n    ...\n    \n    public class MapController : Controller\n    {\n        private Pusher pusher;\n    \n        public MapController() \n        {\n            var options = new PusherOptions();\n            options.Cluster = \"app_cluster\";\n    \n            pusher = new Pusher(\n                \"app_id\",\n                \"app_key\",\n                \"app_secret\", \n                options\n            );   \n        }\n    \n        [HttpPost]\n        public JsonResult Index()\n        {\n            var latitude    = Request.Form[\"lat\"];\n            var longitude = Request.Form[\"lng\"];\n    \n            var location = new\n            {\n                latitude = latitude,\n                longitude = longitude\n            };\n    \n            pusher.TriggerAsync(\"location_channel\", \"new_location\", location);\n    \n            return Json( new { status = \"success\", data = location } );\n        }\n    }\n```\n\nIn the code block above, we create a class variable `private Pusher pusher`. Then, we instantiate it to a Pusher client in the class constructor using the app credentials copied earlier from the Pusher dashboard. \n\nWe use the Pusher instance to transmit the location data on the `location_channel` channel, in the `new_location` event. Remember to replace `app_id` and the other values with your Pusher app credentials.\n\n\n\u003e ⚠️ To use the Pusher client in our controller, you must install the PusherServer library via NuGet, and add `using PusherServer` to the top import statements of your `MapController` class.\n\n## Creating our map view\n\nSince our map will be rendered on our home route, we will use the `Views/Home/index.cshtml` file (which is the default view of the HomeController class).\n\n\n\u003e 💡 Our `Views/Home/index.cshtml` file extends the `Shared/_Layout.cshtml` file. We have added the `title` tag and stylesheet imports to `Shared/_Layout.cshtml` for this reason.\n\nIn the `Shared/_Layout.cshtml` file, we add:\n\n```\n    \u003c!-- Shared/_Layout.cshtml --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003eGaia\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0-beta.3/css/bootstrap.min.css\" /\u003e\n        \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"@Url.Content(\"~/Content/custom.css\")\"/\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        @RenderBody()\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the `Views/Home/index.cshtml` file, add the following:\n\n```\n    \u003c!-- Views/Home/index.cshtml --\u003e\n    \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row\"\u003e\n            \u003cdiv class=\"col-md-6 col-xs-12 col-lg-6\"\u003e\n                \u003ch3\u003eA realtime Map\u003c/h3\u003e\n                \u003cdiv id=\"map\"\u003e\n    \n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0-beta.3/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n```\n\nThe block above defines the basic markup of our view. It consists mainly of the `div` for holding our map. We have also imported the Bootstrap CSS framework and its jQuery library dependency, to take advantage of some pre-made styles.\n\nNext we will import the Google Maps API JavaScript library and initialize our map in `Views/Home/index.cshtml`:\n\n```\n    \u003c!-- Views/Home/index.cshtml --\u003e\n    \u003cscript async defer src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAniUCyk0Gfp_UT1qNTHg2AF4I4ZmQ6EGo\u0026callback=initMap\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n        let lineCoordinates = []\n    \n        let latitude = 6.4541;\n        let longitude = 3.3947;\n    \n        let map = false;\n        let marker = false;\n    \n        function initMap() {\n            let lagos = {lat: latitude, lng: longitude};\n    \n            map = new google.maps.Map(document.getElementById('map'), {\n              zoom: 10,\n              center: lagos\n            });\n    \n            marker = new google.maps.Marker({\n              position: lagos,\n              map: map\n            });\n    \n            lineCoordinates.push(marker.getPosition())\n        }\n    \u003c/script\u003e\n```\n\nIn the snippet above, we have initialized our map by passing the coordinates of [Lagos, Nigeria](https://en.wikipedia.org/wiki/Lagos) to the Google Maps library.\n\nNext, we will listen for changes in location (via our Pusher event) and implement the updates to our map. For this we’ll define our map update function. Copy the following code:\n\n```\n    \u003c!-- Views/Home/index.cshtml --\u003e\n    \n    [...]\n    \n    const updateMap = function(data) {\n        latitude = (data.latitude * 1);\n        longitude = (data.longitude * 1);\n    \n        map.setCenter({\n            lat: latitude,\n            lng: longitude,\n            alt: 0\n        });\n    \n        marker.setPosition({\n            lat: latitude,\n            lng: longitude,\n            alt: 0\n        });\n    \n        lineCoordinates.push(marker.getPosition())\n    \n        let lineCoordinatesPath = new google.maps.Polyline({\n          path: lineCoordinates,\n          geodesic: true,\n          map: map,\n          strokeColor: '#FF0000',\n          strokeOpacity: 1.0,\n          strokeWeight: 2\n        });\n    }\n    \u003c/script\u003e\n```\n\nFinally, we’ll listen for our Pusher events and trigger the `updateMap` function in our view:\n\n```\n    \u003c!-- Views/Home/index.cshtml\n    \n    [...]\n    \n    \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n      const pusher = new Pusher('app_key', {\n        cluster: 'app_cluster'\n      });\n    \n      const channel = pusher.subscribe('location_channel');\n    \n      channel.bind('new_location', function(data) {\n          updateMap(data);\n      });\n    \u003c/script\u003e\n```\n\nIn the snippet above, we import and initialize the Pusher JavaScript client. Then we subscribe to the `location_channel` and listen to the `new_location` event, passing the new location data received to our `updateMap` function for realtime updates.\n\nHere is the application when we run it again:\n\n![realtime-map-aspnet-demo](//images.contentful.com/1es3ne0caaid/6CNl2xfqP6YOygySaS6k0I/fe08c0dd1e65f2496e67befa9102e652/realtime-map-aspnet-demo.gif)\n\n## Conclusion\n\nIn a few simple steps, we have built a realtime map that updates and marks its current position based on data it receives. This application can be used to get GPS coordinates from a requested cab, or a tracked parcel to view its location and travel path on a map.","metaTitle":"Build a realtime map using ASP.NET","metaDescription":"Build a realtime map like Google Maps using .NET and Pusher. Use the map to get GPS coordinates from a requested cab, or track a parcel and see its journey and location."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1WEqqnxzxGQq4W6ueiayCg","type":"Entry","createdAt":"2018-02-28T11:46:32.914Z","updatedAt":"2018-02-28T11:46:32.914Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an activity feed with Flask","url":"activity-feed-flask","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3sixk7zsAoQqqSsUWM8I8y","type":"Entry","createdAt":"2018-02-13T18:06:00.483Z","updatedAt":"2018-02-14T10:08:13.372Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Olayinka Omole","url":"olayinka-omole","email":"olayinka.omole@gmail.com","twitter":"https://twitter.com/olayinkaos","github":"https://github.com/olayinkaos","guestWriter":true}}],"projectRepo":"https://github.com/olayinkaos/flask-realtime-activity-feed","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}}],"reviewDate":"2018-01-24","description":"In this tutorial, we will cover how to build a live blog feed using Flask and HTML.","prerequisite":"A basic understanding of Flask and HTML is needed to follow this tutorial.","content":"A great way to track what users are doing in your application is to visualise their activities in a feed. This would be especially useful when creating a dashboard for your application. \n\nIn this tutorial, I will show you how to build a quick and easy realtime activity feed using Python ([Flask](http://flask.pocoo.org/)), JavaScript and Pusher. We will build a realtime blog, and a feed page which will show user activity from the blog.\n\nHere is what the final app will look like:\n\n![activity-feed-flask-demo](//images.contentful.com/1es3ne0caaid/6DYvqpgeMo8gquI4mYueoA/c929a74adc4ec50b8aacd71c412d334a/activity-feed-flask-demo.gif)\n\n## Prerequisites\n\nTo follow along properly, basic knowledge of Python, Flask and JavaScript (ES6 syntax) is needed. You will also need to install [Python](https://www.python.org/) and [virtualenv](https://virtualenv.pypa.io/en/stable/) locally.\n\n\n\u003e Virtualenv is a tool that helps us create isolated Python environments. This makes it possible for us to install dependencies (like Flask) in an isolated environment, and not pollute our global packages directory. To install virtualenv:\n\n```\n    pip install virtualenv\n```\n\n## Setup and Configuration\n\n### Installing Flask\nAs stated earlier, we will be developing using Flask, a web framework for Python. In this step, we will activate a virtual Python environment and install Flask for use in our project.\n\nTo activate a virtual environment:\n\n```\n    mkdir realtime-feed\n    cd realtime-feed\n    virtualenv .venv\n    source .venv/bin/activate\n```\n\nTo install Flask:\n\n```\n    pip install flask\n```\n\n### Setting up Pusher\nPusher is a service that makes it easy for us to supercharge our web and mobile applications with realtime updates. We will be using it primarily for powering our realtime blog and activity feed. Head over to Pusher.com and [register for a free account](https://pusher.com/signup?plan=sandbox), if you don’t already have one.\n\nNext, create an app on the [dashboard](https://dashboard.pusher.com/) and copy out the app credentials (App ID, Key, Secret and Cluster), as we would be needing these in our app.\n\nNow we can install the Pusher Python library to help our backend communicate with the Pusher service:\n\n```\n    pip install pusher\n```\n\n### File and Folder Structure\nHere is the folder structure for the app. We will only limit it to things necessary so as to avoid bloat:\n\n```\n    ├── realtime-feed\n        ├── app.py\n        └── templates\n            ├── index.html\n            └── feed.html\n```\n\nThe templates folder contains our HTML files, while `app.py` will house all our server-side code. One of the great things about Flask is how it allows you to set up small web projects with minimal code and very few files.\n\n## Building the backend\n\nNext, we will write some code to display our pages and handle requests from our app. We will use Pusher to handle the management of data sent to our backend. We will broadcast events, with corresponding data on a channel, and listen for these events in our app.\n\nLet us start by importing the needed modules and configuring the Pusher object:\n\n```\n    # ./app.py\n    from flask import Flask, render_template, request, jsonify\n    from pusher import Pusher\n    import uuid\n    \n    # create flask app\n    app = Flask(__name__)\n    \n    # configure pusher object\n    pusher = Pusher(\n      app_id='YOUR_APP_ID',\n      key='YOUR_APP_KEY',\n      secret='YOUR_APP_SECRET',\n      cluster='YOUR_APP_CLUSTER',\n      ssl=True\n    )\n```\n\nIn the code above, we initialise the Pusher object with the credentials gotten from the Pusher dashboard. Remember to replace `YOUR_APP_ID` and similar values with the actual values for your own app.\n\nNext we define the different routes in our app for handling requests. Updating `app.py`:\n\n```\n    # ./app.py\n    \n    # index route, shows index.html view\n    @app.route('/')\n    def index():\n      return render_template('index.html')\n    \n    # feed route, shows feed.html view\n    @app.route('/feed')\n    def feed():\n      return render_template('feed.html')\n```\n\nThe first 2 routes defined serve our two app views. The `index` (or home) page which shows the blog, and the `feed` page which shows the activity feed.\n\n\u003e Note: The `render_template()` function renders a template from the template folder.\n\nNow we can define API endpoints for interacting with the blog posts:\n\n```\n    # ./app.py\n    \n    # store post\n    @app.route('/post', methods=['POST'])\n    def addPost():\n      data = {\n        'id': \"post-{}\".format(uuid.uuid4().hex),\n        'title': request.form.get('title'),\n        'content': request.form.get('content'),\n        'status': 'active',\n        'event_name': 'created'\n      }\n      pusher.trigger(\"blog\", \"post-added\", data)\n      return jsonify(data)\n    \n    # deactivate or delete post\n    @app.route('/post/\u003cid\u003e', methods=['PUT','DELETE'])\n    def updatePost(id):\n      data = { 'id': id }\n      if request.method == 'DELETE':\n        data['event_name'] = 'deleted'\n        pusher.trigger(\"blog\", \"post-deleted\", data)\n      else:\n        data['event_name'] = 'deactivated'\n        pusher.trigger(\"blog\", \"post-deactivated\", data)\n      return jsonify(data)\n```\n\nThe endpoints defined above broadcast events for various actions (storing posts, deactivating posts, deleting posts) via Pusher.\n\nWe use the configured `pusher` object for broadcasting events on specific channels. To broadcast an event, we use the `trigger()` method with the following syntax:\n\n```\n    pusher.trigger('a_channel', 'an_event', {'some': 'data'})\n```\n\n\u003e Note: You can find the docs for the Pusher Python library [here](https://github.com/pusher/pusher-http-python).\n\nPusher also grants us the ability to trigger events on various types of channels including Public, Private and Presence channels. Read about them [here](https://pusher.com/docs/client_api_guide/client_channels#channel_types).\n\nFinally, to start the app in debug mode:\n\n```\n    # ./app.py\n    \n    # run Flask app in debug mode\n    app.run(debug=True)\n```\n\nYou can find the full `app.py` file [here](https://github.com/olayinkaos/flask-realtime-activity-feed/blob/master/app.py). In the next step, we will build the views for our app.\n\n## Creating Our App Views\n\n### The blog page\nThis will serve as the homepage, and is where our users will interact with blog posts (creating, deactivating and deleting them). In the `index.html` file:\n\n```\n    \u003c!-- ./templates/index.html --\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n      \u003ctitle\u003eHome!\u003c/title\u003e\n      \u003c!-- import Bulma CSS --\u003e\n      \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.6.0/css/bulma.min.css\"\u003e\n      \u003c!-- custom styles --\u003e\n      \u003cstyle\u003e\n        #post-list .card {\n          margin-bottom: 10px;\n        }\n        #post-list .card.deactivated {\n          opacity: 0.5;\n          cursor: not-allowed;\n        }\n      \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003csection class=\"section\"\u003e\n        \u003cdiv class=\"container\"\u003e\n          \u003ch1 class=\"title\"\u003eRealtime Blog\u003c/h1\u003e\n          \u003cp class=\"subtitle\"\u003eRealtime blog built with \u003cstrong\u003e\u003ca href=\"https://pusher.com\" target=\"_blank\"\u003ePusher\u003c/a\u003e\u003c/strong\u003e!\u003c/p\u003e\n    \n          \u003cdiv class=\"columns\"\u003e\n            \u003cdiv class=\"column\"\u003e\n              \u003cform id=\"post-form\"\u003e\n                \u003cdiv class=\"field\"\u003e\n                  \u003clabel class=\"label\"\u003eTitle\u003c/label\u003e\n                  \u003cdiv class=\"control\"\u003e\n                    \u003cinput name=\"title\" class=\"input\" type=\"text\" placeholder=\"Hello world\"\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n    \n                \u003cdiv class=\"field\"\u003e\n                  \u003clabel class=\"label\"\u003eContent\u003c/label\u003e\n                  \u003cdiv class=\"control\"\u003e\n                    \u003ctextarea class=\"textarea\" name=\"content\" rows=\"10\" cols=\"10\"\u003e\u003c/textarea\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n    \n                \u003cdiv class=\"field\"\u003e\n                  \u003cbutton class=\"button is-primary\"\u003eSubmit\u003c/button\u003e\n                \u003c/div\u003e\n              \u003c/form\u003e\n            \u003c/div\u003e\n    \n            \u003cdiv class=\"column\"\u003e\n              \u003cdiv id=\"post-list\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n    \n          \u003c/div\u003e\n    \n        \u003c/div\u003e\n      \u003c/section\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThe above code contains the basic markup for the homepage. We imported [Bulma](https://bulma.io/) (a cool CSS framework) to take advantage of some pre-made styles.\n\nNext, we will define some JavaScript functions to handle our app functions and communicate with our backend:\n\n```\n    \u003c!-- ./templates/index.html --\u003e\n      \u003c!-- // ... --\u003e\n      \u003cscript\u003e\n        const form = document.querySelector('#post-form');\n        \n        // makes POST request to store blog post on form submit\n        form.onsubmit = e =\u003e {\n          e.preventDefault();\n          fetch(\"/post\", {\n            method: 'POST',\n            body: new FormData(form)\n          })\n          .then(r =\u003e {\n            form.reset();\n          });\n        }\n    \n        // makes DELETE request to delete a post\n        function deletePost(id) {\n          fetch(`/post/${id}`, { \n            method: 'DELETE'\n          });\n        }\n    \n        // makes PUT request to deactivate a post\n        function deactivatePost(id) {\n          fetch(`/post/${id}`, { \n            method: 'PUT'\n          });\n        }\n    \n        // appends new posts to the list of blog posts on the page\n        function appendToList(data) {\n          const html = `\n            \u003cdiv class=\"card\" id=\"${data.id}\"\u003e\n              \u003cheader class=\"card-header\"\u003e\n                \u003cp class=\"card-header-title\"\u003e${data.title}\u003c/p\u003e\n              \u003c/header\u003e\n              \u003cdiv class=\"card-content\"\u003e\n                \u003cdiv class=\"content\"\u003e\n                  \u003cp\u003e${data.content}\u003c/p\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n              \u003cfooter class=\"card-footer\"\u003e\n                \u003ca href=\"#\" onclick=\"deactivatePost('${data.id}')\" class=\"card-footer-item\"\u003eDeactivate\u003c/a\u003e\n                \u003ca href=\"#\" onclick=\"deletePost('${data.id}')\" class=\"card-footer-item\"\u003eDelete\u003c/a\u003e\n              \u003c/footer\u003e\n            \u003c/div\u003e`;\n          let list = document.querySelector(\"#post-list\")\n          list.innerHTML += html;\n        };\n      \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nWe make use of the JavaScript [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) to make AJAX requests to our backend. While this is great because the API is simple to use, note that it requires a polyfill for older browsers. A great alternative is [axios](https://github.com/axios/axios).\n\nNow that we have established communication with our backend, we can listen for events from Pusher, using the Pusher [JavaScript client library](https://github.com/pusher/pusher-js):\n\n```\n      \u003c!-- ./templates/index.html --\u003e\n      \u003c!-- // ... --\u003e\n      \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003cscript\u003e\n        // configure pusher\n        const pusher = new Pusher('YOUR_APP_KEY', {\n          cluster: 'YOUR_APP_CLUSTER', // gotten from Pusher app dashboard\n          encrypted: true // optional\n        });\n        // subscribe to `blog` public channel\n        const channel = pusher.subscribe('blog');\n    \n        channel.bind('post-added', data =\u003e {\n          appendToList(data);\n        });\n    \n        channel.bind('post-deleted', data =\u003e {\n          const post = document.querySelector(`#${data.id}`);\n          post.parentNode.removeChild(post);\n        });\n    \n        channel.bind('post-deactivated', data =\u003e {\n          const post = document.querySelector(`#${data.id}`);\n          post.classList.add('deactivated');\n        });\n        \n        // ...\n        \n      \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the code block above, we import the Pusher JavaScript client library, subscribe to the channel (`blog`) on which we’re publishing events from our backend, and listen for those events.\n\nWe `bind` the various events we’re listening for on the channel. The `bind()` method has the following syntax – `channel.bind(event_name, callback_function)`. We’re listening for 3 events on the blog view - `post-added`, `post-deleted` and `post``-deactivated`.\n\nNow that we have finished building the blog page, we can proceed to create the feed page and listen for the same set of events.\n\n### The feed page\n\nFinally we will build a simple page to display the events being triggered from our blog.\nIn the `feed.html` file:\n\n```\n    \u003c!-- ./templates/feed.html --\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n      \u003ctitle\u003eActivity Feed\u003c/title\u003e\n      \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\"\u003e\n      \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.6.0/css/bulma.min.css\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003csection class=\"section\"\u003e\n        \u003cdiv class=\"container\"\u003e\n          \u003ch1 class=\"title\"\u003eBlog Realtime Activity Feed!\u003c/h1\u003e\n          \u003cdiv id=\"events\"\u003e\u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/section\u003e\n    \n      \u003c!-- import Pusher-js library --\u003e\n      \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n    \n      \u003cscript\u003e\n        // connect to Pusher\n        const pusher = new Pusher('YOUR_APP_KEY', {\n          cluster: 'YOUR_APP_CLUSTER', // gotten from Pusher app dashboard\n          encrypted: true // optional\n        });\n        // subscribe to blog channel\n        const channel = pusher.subscribe('blog');\n    \n        // listen for relevant events\n        channel.bind('post-added', eventHandler);\n        channel.bind('post-deleted', eventHandler);\n        channel.bind('post-deactivated', eventHandler);\n    \n        // handler function to show feed of events\n        function eventHandler (data) {\n          const html = `\n              \u003cdiv class=\"box\"\u003e\n                \u003carticle class=\"media\"\u003e\n                  \u003cdiv class=\"media-content\"\u003e\n                    \u003cdiv class=\"content\"\u003e\n                      \u003cp\u003e\n                        \u003cstrong\u003ePost ${data.event_name}\u003c/strong\u003e\n                        \u003csmall\u003e\n                          \u003ci class=\"fa fa-${ data.event_name == 'created' \n                            ? `plus` \n                            : data.event_name == 'deactivated' ? `ban` : `trash`\n                          }\"\u003e\u003c/i\u003e\n                        \u003c/small\u003e\n                        \u003cbr\u003e\n                        Post with ID [\u003cstrong\u003e${data.id}\u003c/strong\u003e] has been ${data.event_name}\n                      \u003c/p\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/article\u003e\n              \u003c/div\u003e`;\n          let list = document.querySelector(\"#events\")\n          list.innerHTML += html;\n        }\n      \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the code above, we define an `eventHandler()` function which acts as callback for all the events we’re listening for. The function simply gets the event which was triggered and lists it as seen in the image below:\n\n![activity-feed-flask-post-created](//images.contentful.com/1es3ne0caaid/4Jxua3RcMgiI4GESKGKw2I/aaeef4fd30c18dd8615e36ebc6a34adb/activity-feed-flask-post-created.png)\n\nAnd that’s it! To run our app:\n\n```\n    python app.py\n```\n\n## Conclusion\n\nIn a few easy steps, we have been able to build both a realtime blog page, and an activity feed to show events happening on the blog — this shows how well Pusher works with Flask for creating quick realtime applications.\n\nThere are many other use cases for adding realtime functionality to Python applications. Do you have any more improvements, suggestions or use cases? Let us know in the comments!","metaTitle":"Build an activity feed with Flask","metaDescription":"Discover how to build amazing social features like a realtime activity feed for a blog using Flask and HTML."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1ceAhJsxrIkC8A8AkggoEE","type":"Entry","createdAt":"2018-02-28T12:44:04.737Z","updatedAt":"2018-05-29T09:15:34.681Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime comments feature with Nest.js","url":"realtime-comments-nestjs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/live-comments-nest","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"39y1r2Hh7OseMkwQSIyQwS","type":"Entry","createdAt":"2018-02-12T15:08:52.296Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Comments","url":"live-comments","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SgQuYVb0kSMIgEmwqImOA","type":"Entry","createdAt":"2018-02-12T14:49:17.136Z","updatedAt":"2018-04-19T08:52:46.508Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Nest.js","url":"nest-js","type":"framework"}}],"reviewDate":"2018-01-23","description":"Leverage from the power of Next.js and TypeScript and build a live comments feature into your application.","prerequisite":"A basic understanding of TypeScript and Node.js is needed to follow this tutorial.","content":"In this article, I will show you how to simply add realtime functionality to a Nest.js application by leveraging the powerful features offered by Pusher. Nest.js is a sever-side Node framework which leverages the power of TypeScript. It’s progressive and scales with whatever size of project you throw at it.\n\nTypescript is the modern style of writing JavaScript, making it easy to debug and organize code base for very large and complicated apps. The obvious difference is that TypeScript  adds type information to the code.\n\nAlthough there are a handful of libraries to develop web applications in Node.js, mostly with JavaScript, here I will introduces a robust Node.js framework called Nest.js. It introduces a new way of building scalable applications by using TypeScript. \n\nDespite being built with TypeScript, Nest.js still preserves compatibility with pure JavaScript. This means you can still write pure JavaScript while developing applications with Nest.js.\n\nWhat we will build in this article will keep you acquainted with the essential building blocks of a Nest.js application. And you can easily improve on this and explore some other structures and architecture of Nest.js. \n\n## Why Nest.js\n\nNest.js focuses on solving the issues of Architecture on the server-side. According to the documentation [here](https://docs.nestjs.com/), Nest.js aims to provide an applications architecture out of the box. This will allow developers to seamlessly create highly scalable, loosely coupled and easily maintainable applications. \n\n## Building block of Nest.js\n\nBefore building with Nest.js, lets have a quick overview of the important building blocks used when building applications:\n\n- Modules: The `@Module()` decorator provides metadata, which **Nest** uses to organize the application structure.\n- Controllers: The controllers layer is responsible for handling incoming **requests**, and return a **response** to the client.\n- Components: Almost everything is a component – Service, Repository, Factory, Helper [...] and they can be **injected** into controllers or into other components through `constructor`.\n\nYou can read more about these [here](https://docs.nestjs.com/controllers).\n\n## What we’ll build\n\nWe are going to create a very simple commenting system, where a user can post comments and see the posted message in realtime. To simplify things, there won’t be any need to persist posted comments into the database. We will basically emit an event with added comment(s), subscribe to the channel and update data in realtime.\n\n![realtime-comments-nestjs-demo](//images.contentful.com/1es3ne0caaid/2OLeu9OMEwsO8SuYiG0qEm/f76bf6bd5682b3939827b24d5cc380d7/realtime-comments-nextjs-demo.gif)\n\n## Install Node\n\nNest.js is basically a Node.js appplication and, as such, it will require Node and NPM to install the required dependency. Download Node and Npm [here](https://nodejs.org/en/).\n\n## Set up the application\n\nWe will set up Nest.js applications quickly by cloning the starter project on GitHub:\n\n```\n    git clone https://github.com/nestjs/typescript-starter.git nest-comment\n```\n\nThis will download a copy of the starter project in a local directory `nest-comment`. Now you can change directory into the new folder, install all the required dependencies and finally run the application:\n\n```\n    // change directory\n      cd nest-comment\n      \n    // install dependencies\n      npm install\n```\n\n## Running the application\n\nAfter installing all dependencies, we now can start the application:\n\n```\n    npm run start\n```\n\nThen navigate to the browser and open `localhost:300`:\n\n![realtime-comments-nestjs-hello-world](//images.contentful.com/1es3ne0caaid/6oJOyWQhz2SyIAW8iQoMEw/6cc32a2b32df6ccf134f6b8a75872a7d/realtime-comments-nextjs-hello-world.png)\n\n## Pusher setup\n\n[Register for a free pusher account](https://pusher.com/signup), if you don’t have one already. Then go ahead and create an app from your dashboard and copy out the credentials as you will be required to use them later in this tutorial.\n\n![realtime-comments-nestjs-create-app](//images.contentful.com/1es3ne0caaid/5B1dwpJiAo0gmC6KOScUeW/fd5db316ad359100462c3bbaf21b0668/realtime-comments-nextjs-create-app.png)\n\nWe are building a JavaScript frontend and backend so we choose JavaScript and Node.js respectively.\n\n## Create first controller\n\nControllers in Nest.js are responsible for handling incoming HTTP requests and returning a response to the client, just like every other HTTP framework. The starter project we just downloaded has a controller already created within `./src/modules/app.controller.ts`. For the purpose of this tutorial, we will create a basic controller to handle the necessary requests for our application to function as specified. \n\nTo have a proper folder structure, create a new directory for comments `./src/modules/comments`. \n\nNow create the controller  `./src/modules/comments/comments.controller.ts` and paste the following code in it:\n\n```\n    import { Controller, Get, Post, Body, Req, Res } from '@nestjs/common';\n    import { Comment } from './interface/comment';\n    import { CommentService } from './comments.service';\n    \n    @Controller('comments')\n    export class CommentsController {\n        constructor(private commentsService: CommentService){}\n        @Get()\n        getComments(@Req() req, @Res() res, err) {\n            res.render('index');\n        }\n    \n        @Post()\n        createComment(@Res() res, @Body() comment: Comment) {\n            this.commentsService.create(comment);\n            res.status(201).send('created');\n        }\n    }\n```\n\nIn the code above, we only imported modules necessary to create a basic controller for a Nest.js application. The metadata attached to the class allows Nest.js to know how the controller needs to be mapped to the appropriate routes. To do this, we are using the decorators `@Controller('comments')` , where `comments` represent a prefix for each route registered in the class.\n\nIn order to define the syntax that needs to be adhered to when parameters are being inputted by users, we created and included a TypeScript class. This helps provides a standard structure that should be followed if you have more than one property that needs to be used. This is basic and has only one property `message`:\n\n```\n    // .src/modules/comments/interface/comment.ts\n    \n    export class Comment {\n        message: string;\n        constructor(message: string) {\n            this.message  = message;\n        }\n    }\n```\n\nAlso a `CommentService` class was imported and injected into the controller through the constructor. This service is a component in Nest.js. It handles any complex tasks instead of them being handled by the controller. We will create this service in a bit.\n\nInstall the following node modules:\n\n```\n    npm install body-parser pusher ejs \n```\n\n## Create component\n\nComponents are plain TypeScript class decorators. It plays, amongst other things, the role of abstracting the business logic away from the controller. \n\nAs evident from the code below, the service created for this application contains one method, `create()`, which is responsible for creating comments.  Lets create a component `./src/modules/comments/comments.service.``ts`:\n\n```\n    import {Component, OnModuleInit } from '@nestjs/common';\n    import { Comment } from './interface/comment';\n    \n    @Component()\n    export class CommentService implements OnModuleInit {\n        \n        create(comment: Comment) {\n        ...\n        }\n    }\n```\n\n## Realtime features on the server\n\nWe want to send the payload to all connected clients when an item is created. Here, we initialise Pusher with the required credentials obtained from the application dashboard:\n\n```\n    create(comment: Comment) {\n            const Pusher = require('pusher');\n            \n            var pusher = new Pusher({\n                appId: 'YOUR_PUSHER_APP_ID',\n                key: 'YOUR_PUSHER_APP_KEY',\n                secret: 'YOUR_PUSHER_SECRET',\n                cluster: 'YOUR_CLUSTER',\n                encrypted: true\n              });\n        \n              pusher.trigger('comment', 'comment_data', comment);\n        }\n```\n\n\nLastly, to make both the controller and the component created available, we need to import and add them to the root module `./src/modules/app.module.ts` . Open it and fill with this:\n\n```\n    import { Module } from '@nestjs/common';\n    import { AppController } from './app.controller';\n    import { CommentsController } from './comments/comments.controller';\n    import { CommentService } from './comments/comments.service';\n    @Module({\n      modules: [],\n      controllers: [AppController, CommentsController],\n      components: [CommentService],\n    })\n    export class ApplicationModule {} \n```\n\n## Set up the views\n\nAt the moment, we have completed setting up the backend of this application as most of the logic has been handled by nest’s Controller and Component. To render the content within the view, we install the EJS module earlier on for this purpose. EJS is a JavaScript templating library. Let’s configure our application to use EJS. Open `./src/server.ts`:\n\n\n```\n    import { NestFactory } from '@nestjs/core';\n    import { ApplicationModule } from './modules/app.module';\n    import * as bodyParser from 'body-parser';\n    import * as Express from 'express';\n    \n    let server = new Express();\n    \n    async function bootstrap() {\n        const app = await NestFactory.create(ApplicationModule, server);\n        app.use(bodyParser.json());\n        server.set('view engine', 'ejs');\n        await app.listen(3000);\n    }\n    bootstrap();\n```\n\nTo configure our application to use EJS, we imported Express and created an instance with the name `server`. This was use to set EJS as the view engine as evident from the code above. By default the `NestFactory``.create()` method takes an Express instance as a second argument. This is deliberate as Nest.js allows developers to have full control of the Express instance life cycle.\n\nNext, within the root directory make a new folder `views` and create an `index.``ejs` file within it:\n\n\n```\n    // ./views/index.ejs\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\"\u003e        \n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.13/vue.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/pusher/4.2.2/pusher.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.17.1/axios.js\"\u003e\u003c/script\u003e\n        \u003ctitle\u003eDocument\u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cnav class=\"navbar navbar-default\" role=\"navigation\"\u003e\n            \u003cdiv class=\"container-fluid\"\u003e\n                \n                \u003cdiv class=\"navbar-header\"\u003e\n                    \u003ca class=\"navbar-brand\" href=\"#\"\u003e\n                        \u003cspan class=\"glyphicon glyphicon glyphicon-tree-deciduous\"\u003e\u003c/span\u003e\n                        Nest Js\n                    \u003c/a\u003e\n                \u003c/div\u003e\n                \n            \u003c/div\u003e\n        \u003c/nav\u003e\n        \u003cdiv class=\"container\" id=\"app\"\u003e\n            \u003cmain\u003e            \n                \u003cdiv class=\"row\"\u003e\n                    \u003cdiv class=\"col-md-8\"\u003e\n                        \u003cform method=\"post\" action=\"/comments\"\u003e\n                            \u003cdiv class=\"form-group\"\u003e\n                                \u003cinput type=\"text\" class=\"form-control\" name=\"message\" placeholder=\"Type your comments\"\u003e\n                            \u003c/div\u003e\n                            \n                            \u003cdiv class=\"form-group\"\u003e\n                                \u003cbutton class=\"btn btn-success\" type=\"submit\"\u003eSubmit\u003c/button\u003e\n                            \u003c/div\u003e\n                        \u003c/form\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e \n            \u003c/main\u003e\n        \u003c/div\u003e\n        \u003cscript\u003e\n        //.....\n        //.....\n        //.....\n        \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThe code imports Vue, Pusher, and Axios. Vue will simplify how we interact with the DOM while the Pusher client helps us to connect with our Pusher instance on the server. Axios will be used to send the HTTP Post request to the `/comments` endpoint.\n\nUpdate the script tag before the body closing tag to show this log:\n\n```\n    new Vue({\n                el: '#app',\n                data() {\n                    return {\n                        comments: [],\n                        comment: {\n                            message: ''\n                        }\n                    }\n                },\n                created() {\n                    let pusher = new Pusher('PUSHER_KEY', {\n                        cluster: 'PUSHER_CLUSTER',\n                        encrypted: true\n                    });\n                    const channel = pusher.subscribe('comment');\n                    channel.bind('comment_data', data =\u003e {\n                        this.comments.push(data);\n                    });\n                },\n                methods: {\n                    submitComment() {\n                        axios.post('/comments', this.comment).then((data) =\u003e {\n                            console.log(data)\n                        })\n                    }\n                }\n            })\n```\n\nAs you can see, the `created` lifecycle method listens for changes and updates our DOM based on the new comments emitted by the server. The `submitComment` method is triggered every time we submit the comment form. It uses Axios to send the `comment` payload to the server.\n\n## Run the application\n\nStop and run the sever again. Then navigate to this endpoint  `http://localhost:3000/comments`:\n\n\n![realtime-comments-nextjs-hello-world](//images.contentful.com/1es3ne0caaid/4R8q1mzyTKqIwaoQisAWsi/3424502ebdd67b2a6d1f8795136ff4bb/realtime-comments-nextjs-hello-world.png)\n\n\nThis basically renders the content within `index.ejs`. It contains a header bar and form to post comments.\n\n\nRemember we already subscribed to the channel that emits data once comments are being posted. To display the comments, we will iterate over the `comments`:\n\n```\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n    ...\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \u003cnav class=\"navbar navbar-default\" role=\"navigation\"\u003e\n        ...\n    \u003c/nav\u003e\n    \n    \u003cdiv class=\"container\" id=\"app\"\u003e\n        \u003cmain\u003e\n            \u003cdiv class=\"jumbotron\"\u003e\n                \u003ch3\u003eComments\u003c/h3\u003e\n                \u003cul\u003e\n                    \u003cli v-for=\"comment in comments\"\u003e\n                        {{comment.message}}\n                    \u003c/li\u003e\n                \u003c/ul\u003e\n            \u003c/div\u003e\n        \u003c/main\u003e\n                    \n        \u003cdiv class=\"row\"\u003e\n            ...\n         \u003c/div\u003e\n    \u003c/div\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n# \n```\n\nStop and run the sever again. Then navigate to this endpoint  `http://localhost:3000/comments`:\n\nhttps://www.youtube.com/watch?v=xaMUyaYUvoQ\n\nNow, you can post a comment and see it updated in realtime.\n\n## Final thoughts\n\nNest.js introduces a new approach to building web applications in Node.js. The usage of TypeScript helps to manage and create a properly structured application. As we saw in this article, with the help of Pusher, we were able to add realtime functionality to Nest.js. The source code for the app can be found on [GitHub](https://github.com/christiannwamba/live-comments-nest).","metaTitle":"Build a realtime comments feature with Nest.js","metaDescription":"In this tutorial, learn more about Next.js and how you can build a live comments feature."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Oj0XeT59CGOEuY24sUwEK","type":"Entry","createdAt":"2018-02-28T14:04:12.045Z","updatedAt":"2020-06-19T13:18:43.153Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a realtime table with Android ","url":"realtime-table-android","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/pusher-android-table","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1hvzJaMiAkEQOq088wwo4O","type":"Entry","createdAt":"2018-02-12T14:50:04.128Z","updatedAt":"2018-02-26T12:31:15.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Java","url":"java","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SLUsp74nyUigSY4UymAsy","type":"Entry","createdAt":"2018-02-12T15:10:13.159Z","updatedAt":"2018-02-26T12:31:11.509Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Table","url":"live-table","type":"use case"}}],"reviewDate":"2018-01-19","description":"In this tutorial, build a simple live table for Android devices with Java.","prerequisite":"A basic understanding of Java and Node.js is needed to follow this tutorial.","content":"If you are building an app that handles extensive amounts of data, you might want to implement realtime tables at some point. Let’s take a content management system for instance. Large amounts of data are added and removed often, and we would like the changes to be available to consumers in realtime. \n\nIn this tutorial, we will be utilizing the Pusher Android SDK's client-side library to quickly and easily build a realtime data table. \n\nWe’ll be using a few developer tools to achieve this fit, including:\n\n- [Android Studio](https://developer.android.com/studio/intro/index.html) - The Official IDE for Android Development, it provides the fastest tools for building apps on every type of Android device.\n- [Pusher](https://pusher.com/) - A free, realtime, easy to use pub/sub service. Pusher makes realtime as easy as using basic events.\n\nThe flow of our app is that the user will fill out a form to add a new employee to an employees table and click a “save” button. This will send a POST request to our server. In this tutorial, we will use a simple NodeJS server to provide a single API endpoint.\nOnce our server receives the POST request, it will render the data to all connected clients, which will show the data on their tables in realtime.\n\nHere is a glimpse of what we are going to build:\n\n![realtime-table-android-add-employee](//images.contentful.com/1es3ne0caaid/2GYgpYFQIESI8eaEMaICIC/269bb72f1bbfd90ebbe4e7fbef85438e/realtime-table-android-add-employee.jpg)\n\n![realtime-table-android-employee-1](//images.contentful.com/1es3ne0caaid/58oMsLwdvq4EA0U8S0eacM/d7c0b9a0204d906e19411cae59743f63/realtime-table-android-employee-1.jpg)\n\n![realtime-table-android-employee-3](//images.contentful.com/1es3ne0caaid/1aHlfafnXuoqmqsg0Uiq8/92d5b45f60e9d8b2b063abf446680343/realtime-table-android-employee-3.jpg)\n\n## Set Up\n### Create a new project:\n\n\n1. Open Android Studio and select New Project from the File menu.\n2. Set the minimum SDK for the app to be API 16 (Android 4.1, Jelly Bean).\n3. Click through the wizard, ensuring that Empty Activity is selected. Leave the Activity Name set to `MainActivity`, and leave the Layout Name set to `activity_main`.\n\n\n### Add the Pusher Android SDK to gradle:\n\nOnce you’ve set up your application on Android Studio, or your preferred IDE, then install Pusher as a dependency. In the `build.gradle` file of your application module, add:\n \n```\n    repositories {\n      maven { url 'http://clojars.org/repo' }\n    }\n    \n    dependencies {\n      compile 'com.pusher:pusher-java-client:1.0.0'\n      compile 'com.loopj.android:android-async-http:1.4.9' \n      compile 'com.google.code.gson:gson:2.2.4' \n    }\n```\n\nSync the gradle project. Pusher along with other modules we’ll need later, should now be installed. \n\nHowever, you can find your Pusher credentials when you create an app after [signing up for a free account](https://pusher.com/signup). Be sure to keep them handy for when we start adding some realtime features. \n\n## Client-Side\n### Creating the form\n\nIn the created project, open the `activity_main.xml` file and create the input form to collate the user details:\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:background=\"#fff\"\u003e\n    \u003cScrollView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\u003e\n        \u003cLinearLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\u003e\n    \n        \u003cLinearLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\"\n            android:layout_margin=\"10dp\"\n            android:layout_centerVertical=\"true\"\n            android:background=\"@drawable/layoutstyle\"\n            android:layout_centerHorizontal=\"true\"\u003e\n    \n            \u003cTextView\n                android:layout_gravity=\"center\"\n                android:layout_margin=\"16dp\"\n                android:textSize=\"20sp\"\n                android:textStyle=\"bold\"\n                android:textColor=\"#000\"\n                android:fontFamily=\"serif\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"Add Employee\"/\u003e\n    \n            \u003cEditText\n                android:background=\"@drawable/buttonstyle\"\n                android:layout_margin=\"8dp\"\n                android:id=\"@+id/edtName\"\n                android:padding=\"8dp\"\n                android:fontFamily=\"serif\"\n                android:textColor=\"#fff\"\n                android:hint=\"Name\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\" /\u003e\n    \n            \u003cEditText\n                android:padding=\"8dp\"\n                android:background=\"@drawable/buttonstyle\"\n                android:layout_margin=\"8dp\"\n                android:id=\"@+id/edtAge\"\n                android:fontFamily=\"serif\"\n                android:textColor=\"#fff\"\n                android:layout_width=\"match_parent\"\n                android:hint=\"Age\"\n                android:layout_height=\"wrap_content\" /\u003e\n            \u003cEditText\n                android:background=\"@drawable/buttonstyle\"\n                android:layout_margin=\"8dp\"\n                android:id=\"@+id/edtPosition\"\n                android:padding=\"8dp\"\n                android:textColor=\"#fff\"\n                android:hint=\"Position\"\n                android:fontFamily=\"serif\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\" /\u003e\n            \u003cEditText\n                android:background=\"@drawable/buttonstyle\"\n                android:layout_margin=\"8dp\"\n                android:fontFamily=\"serif\"\n                android:id=\"@+id/edtAddress\"\n                android:padding=\"8dp\"\n                android:textColor=\"#fff\"\n                android:hint=\"Address\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\" /\u003e\n    \n            \u003cButton\n                android:id=\"@+id/BtnSave\"\n                android:layout_gravity=\"center\"\n                android:fontFamily=\"serif\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:onClick=\"AddEmployee\"\n                android:text=\"Save\"/\u003e\n    \n          \u003c/LinearLayout\u003e\n        \u003c/LinearLayout\u003e\n      \u003c/ScrollView\u003e\n    \u003c/LinearLayout\u003e \n```\n\nNext we define some custom button styles and layout styles to give our app the desired user interface as can be seen in the snapshots earlier posted. So create two new drawable files called buttonstyle.xml and layoutstyle.xml and copy the codes therein into them.\nThese files only add round shapes to the EditText fields and LinearLayout. Hence, you could decide not to add my designs to your own work. However, to run the app with my designs and avert any xml errors, simply copy these files from the gist we attached above and paste in your own drawable files or simply delete every occurrence of `buttonstyle.xml` or `layoutstyle``.xml` in your xml. Your app will work just fine either way.\n\nThen open the `MainActivity.java` class and update it as follows to provide references to the EditText objects. This allows us to get the text from them:\n\n```\n    package com.example.ekene.pushapp;\n    \n    import android.support.v7.app.AppCompatActivity;\n    import android.os.Bundle;\n    import android.widget.EditText;\n    \n    public class MainActivity extends AppCompatActivity {\n    \n      private EditText edtName, edtAge, edtPosition, edtAddress;\n      private Button btnSave;\n      @Override\n      protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    \n        edtName = (EditText)findViewById(R.id.edtName);\n        edtAddress = (EditText)findViewById(R.id.edtAddress);\n        edtAge = (EditText)findViewById(R.id.edtAge);\n        edtPosition = (EditText)findViewById(R.id.edtPosition);\n       }\n    }\n```\n\n### Creating the table\n\nNext we create the Employee’s Table where we’ll render the form data. We’ll do this with Android Studio’s [TableLayout](https://developer.android.com/reference/android/widget/TableLayout.html) and [TableRow](https://developer.android.com/reference/android/widget/TableLayout.html). So inside the `activity_main.xml` file, just below the form’s Linear Layout, we add:\n\n```\n    \u003cTextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:textColor=\"#000\"\n        android:textSize=\"20sp\"\n        android:fontFamily=\"serif\"\n        android:text=\"Employees\"\n        android:gravity=\"center\"/\u003e\n    \n        \u003cTableLayout\n            android:layout_marginTop=\"10dp\"\n            android:id=\"@+id/table_layout\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\u003e\n    \n            \u003cTableRow\n                android:layout_height=\"wrap_content\"\n                android:layout_width=\"match_parent\"\n                android:id=\"@+id/table_row1\"\n                android:padding=\"10dp\"\u003e\n    \n                \u003cTextView\n                    android:id=\"@+id/name\"\n                    android:fontFamily=\"serif\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_weight=\"1\"\n                    android:textColor=\"#000\"\n                    android:text=\"Name\"/\u003e\n                \u003cTextView\n                    android:id=\"@+id/age\"\n                    android:textColor=\"#000\"\n                    android:fontFamily=\"serif\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_weight=\"1\"\n                    android:text=\"Age\"/\u003e\n                \u003cTextView\n                    android:textColor=\"#000\"\n                    android:id=\"@+id/position\"\n                    android:fontFamily=\"serif\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_weight=\"1\"\n                    android:text=\"Position\"/\u003e\n                \u003cTextView\n                    android:textColor=\"#000\"\n                    android:id=\"@+id/address\"\n                    android:fontFamily=\"serif\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_weight=\"1\"\n                    android:text=\"location\"/\u003e\n    \n            \u003c/TableRow\u003e\n            \u003cView\n                android:layout_height=\"3dip\"\n                android:layout_width=\"match_parent\"\n                android:background=\"#ff0000\"/\u003e\n          \u003c/TableLayout\u003e\n        \u003c/LinearLayout\u003e\n      \u003c/ScrollView\u003e\n    \u003c/LinearLayout\u003e\n```    \n\nBasically, this table is temporarily serving as a mock up for our application at this point. Later on we’’ll be creating the table dynamically with a `ListView`*.*\n\n## Adding new employees to the table\n\nTo add new records to our table, we set up the event listener for the ‘Save’ button like so:\n\n```\n    public class MainActivity extends AppCompatActivity implements View.OnClickListener {\n    \n        private EditText edtName, edtAge, edtPosition, edtAddress;\n        private Button btnSave;\n    \n        @Override\n        protected void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n            setContentView(R.layout.activity_main);\n    \n            // get our input fields by its ID        \n              edtName = (EditText)findViewById(R.id.edtName);\n              edtAddress = (EditText)findViewById(R.id.edtAddress);\n              edtAge = (EditText)findViewById(R.id.edtAge);\n              edtPosition = (EditText)findViewById(R.id.edtPosition);\n    \n             // get our button by its ID\n            btnSave = (Button) findViewById(R.id.BtnSave);\n    \n            // set its click listener\n            btnSave.setOnClickListener(this);\n        }\n```\n\nWe’ll then define a method that will execute when the save button is clicked to get the data from our input fields and post to the server.\n\n```\n        @Override\n        public void onClick(View v) {\n            addEmployee();\n        }\n    \n        private void addEmployee()  {\n        }\n```\n\nThe `addEmployee()` method will simply get the values from the `EditText` objects and POST it to the server. In this tutorial, we’ll be using the [AsyncHTTPClient](https://github.com/AsyncHttpClient/async-http-client) library to send records to our server.\n\nSo let’s go ahead with creating and sending our request parameters in the `MainActivity.java` file:\n\n```\n    package com.example.ekene.pushapp;\n    \n    import com.loopj.android.http.AsyncHttpClient;\n    import com.loopj.android.http.JsonHttpResponseHandler;\n    import com.loopj.android.http.RequestParams;\n    import org.json.JSONArray;\n    import android.text.TextUtils;\n    \n    public class MainActivity extends AppCompatActivity {\n    \n        private void addEmployee(View v)  {\n    \n            String employeeName = edtName.getText().toString();\n            String employeeAge = edtAge.getText().toString();\n            String employeePosition = edtPosition.getText().toString();\n            String employeeAddress = edtAddress.getText().toString();\n    \n             // return if the input fields are blank\n                if (TextUtils.isEmpty(employeeName) \u0026\u0026 TextUtils.isEmpty(employeeAge) \u0026\u0026 \n                    TextUtils.isEmpty(employeePosition)\u0026\u0026 \n                    TextUtils.isEmpty(employeeAddress)) {\n                return;\n            }\n            \n            RequestParams params = new RequestParams();\n            // set our JSON object\n            params.put(\"name\", employeeName);\n            params.put(\"age\", employeeAge);\n            params.put(\"position\", employeePosition);\n            params.put(\"address\", employeeAddress);\n    \n            // create our HTTP client\n            AsyncHttpClient client = new AsyncHttpClient();\n            ...\n        }\n```\n\nWe’ll then define a String variable called  `RECORDS_ENDPOINT` in `MainActivity` and set it to point to the URL of our server e.g:\n\n```\n    private static final String RECORDS_ENDPOINT = \"http://localhost:3000/records\";\n```\n\nThen let’s make it so that when the request is successful it clears the `inputFields`, or when it fails it alerts the user that it “Couldn’t Post” with a Toast.\nSo we continue creating our HTTP client inside the `MainActivity` like so:\n\n```\n    ....\n    client.post(RECORDS_ENDPOINT, params, new JsonHttpResponseHandler(){\n    \n        @Override\n        public void onSuccess(\n        int statusCode, \n        cz.msebera.android.httpclient.Header[] headers, \n        JSONArray response) {\n            super.onSuccess(statusCode, headers, response);\n            runOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    edtName.setText(\"\");\n                    edtAge.setText(\"\");\n                    edtPosition.setText(\"\");\n                    edtAddress.setText(\"\");\n                }\n            });\n        }\n    \n        @Override\n        public void onFailure(\n        int statusCode, \n        cz.msebera.android.httpclient.Header[] headers, \n        String responseString, \n        Throwable throwable) {\n            super.onFailure(statusCode, headers, responseString, throwable);\n                  Toast.makeText(\n                          getApplicationContext(), \"Couldn't Post!\",\n                          Toast.LENGTH_LONG\n                  ).show();\n          }\n        });\n      }\n    }\n```\n\nAt this point the client is set up to send the input to the server. Next we’ll set up our mini API \n\n## Server-side\n\nAt this point we will integrate Pusher at the back end. Pusher is a simple hosted API for quickly, easily and securely implementing realtime two-way functionality on web and mobile apps. To achieve this, we’ll need to set it up on the server-side.\n\nInstall [NodeJS](https://nodejs.org/en/) and [Express](http://expressjs.com/) if you haven’t already. Generate your table-backend with:\n\n```\n    $ express table-backend \n    $ cd table-backend \n    $ npm install\n```\n\nNow install the [Pusher Node library](http://github.com/pusher-http-node) with:\n\n```\n    $ npm install pusher --save\n```\n\nNow we initialize the `Pusher` object in our `app.js` file with the application credentials:\n\n```\n    var Pusher = require('pusher');\n    var express = require('express');\n    var options = PusherOptions();\n        options.setCluster(PUSHER_APP_CLUSTER);\n    var pusher = new Pusher({\n        appId: \"your app id\",\n        key: \"your app key\",\n        secret: \"your app secret\"    \n    });\n```\n\nNext we create the endpoint that receives JSON from the client. Then we’ll fire up a Pusher event called `new_record` on a channel called `records`, passing along the data we received from the client.\n\n```\n    app.post('/records', function(req, res){\n      var record = req.body;\n      pusher.trigger('records', 'new_record', record);\n      res.json({success: 200});\n    });\n```\n\nNext open your `AndroidManifest.xml` file and enable internet permissions. Just before the Application tag, add:\n\n`\u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e`\n\nNow let’s fire up our server, and run the mobile app either on an emulator or on any android device. Meanwhile, open up the Pusher Debug Console for your app on [your dashboard](http://dashboard.pusher.com/). Then on your emulator or device, you should see the Add Employee form, fill in the fields and and click the `Save` button, you should see the information you just supplied pop up in realtime on your Debug Console. \n\n## Render Live Table Records\n\nWe’ve come a long way but we are not done, Let’s now have our Android client listen for incoming employee records, and show them in a list.\nSo in `activity_main.xml`, add a `ListView` as the last child of `LinearLayout` and above the `TableLayout` that wraps our table headings. Your layout XML starting from the TableLayout  should look like so:\n\n```\n    \u003cTableLayout\n            android:layout_marginTop=\"10dp\"\n            android:id=\"@+id/table_layout\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\u003e\n    \n            \u003cTableRow\n                android:layout_height=\"wrap_content\"\n                android:layout_width=\"match_parent\"\n                android:id=\"@+id/table_row1\"\n                android:padding=\"10dp\"\u003e\n    \n                \u003cTextView\n                    android:id=\"@+id/name\"\n                    android:fontFamily=\"serif\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_weight=\"1\"\n                    android:textColor=\"#000\"\n                    android:text=\"Name\"/\u003e\n                \u003cTextView\n                    android:id=\"@+id/age\"\n                    android:textColor=\"#000\"\n                    android:fontFamily=\"serif\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_weight=\"1\"\n                    android:text=\"Age\"/\u003e\n                \u003cTextView\n                    android:textColor=\"#000\"\n                    android:id=\"@+id/position\"\n                    android:fontFamily=\"serif\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_weight=\"1\"\n                    android:text=\"Position\"/\u003e\n                \u003cTextView\n                    android:textColor=\"#000\"\n                    android:id=\"@+id/address\"\n                    android:fontFamily=\"serif\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_weight=\"1\"\n                    android:text=\"location\"/\u003e\n    \n            \u003c/TableRow\u003e\n            \u003cView\n                android:layout_height=\"3dip\"\n                android:layout_width=\"match_parent\"\n                android:background=\"#ff0000\"/\u003e\n        \u003c/TableLayout\u003e\n        // add a listview to display our table records \n        \u003cListView\n        android:id=\"@+id/records_view\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"500dp\"\n        android:layout_marginTop=\"16dp\"\u003e\n        \u003c/ListView\u003e\n       \u003c/LinearLayout\u003e\n      \u003c/ScrollView\u003e\n    \u003c/LinearLayout\u003e\n```\n\nIn order to display each message within the `ListView`, we’ll have to create an adapter that turns a list into a set of views. In our MainActivity `onCreate` method, let’s bind our `ListView` to this adapter like so: **NB** *we haven’t created the adapter yet, we’ll do that in a bit.*\n\n```\n    public class MainActivity extends AppCompatActivity implements View.OnClickListener {\n        ...\n        private RecordAdapter recordAdapter;\n        @Override\n        protected void onCreate(Bundle savedInstanceState) {\n            ...\n            recordAdapter= new RecordAdapter(this, new ArrayList\u003cRecord\u003e());\n            final ListView recordsView = (ListView) findViewById(R.id.records_view);\n            recordsView.setAdapter(recordAdapter);\n        }\n```\n\nNext we create the `Record.java` class which comprises a single row in the List:\n\n```\n    public class Record {\n        public String age;\n        public String name;\n        public String position;\n        public String address;\n    }\n```\n\nNext we create the adapter. Create a new class `RecordAdapter`. We initialized it in the `MainActivity` Class with our `MainActivity`‘s context. We’ll create it like so:\n\n```\n    public class RecordAdapter extends BaseAdapter {\n    \n        private Context recordContext;\n        private List\u003cRecord\u003e recordList;\n    \n        public RecordsAdapter(Context context, List\u003cRecord\u003e records) {\n            recordList = records;\n            recordContext = context;\n        }\n```\n\nBecause we extended `BaseAdapter`, Android Studio will prompt us to implement it’s three associating methods `getCount`, `getItem` and `getItemId`, which we can do like so:\n\n```\n    @Override\n    public int getCount() {\n        return recordList.size();\n    }\n    @Override\n    public Object getItem(int i) {\n        return recordList.get(i);\n    }\n    @Override\n    public long getItemId(int i) {\n        return i;\n    }\n```\n\nFinally we’ll have to implement a method called `getView()` that will convert an item in the `ArrayList` of `Records` to a view. But first we need to create a `RecordViewHolder`  private class to encapsulate the views we would like to be part of the message. In this case, we’re going to have a:\n\n- nameView - for the employees name\n- ageView - for the employees name\n- nameView - for the employees name\n- nameView - for the employees name\n\nSo within our `RecordAdapter`, add a private nested class:\n\n```\n    private static class RecordViewHolder {\n    \n        public TextView nameView;\n        public TextView positionView;\n        public TextView ageView;\n        public TextView addressView;\n    }\n```\nNext we create another layout resource file called `record.xml`. This layout will hold the views we defined in the `RecordViewHolder` class and render it to the list. Hence it’ll contain four `TextViews` for the name, age, position and address respectively.\n\n```\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"horizontal\" android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\u003e\n        \u003cTextView\n            android:id=\"@+id/record_name\"\n            android:fontFamily=\"serif\"\n            android:layout_height=\"wrap_content\"\n            android:layout_width=\"match_parent\"\n            android:layout_weight=\"1\"\n            android:textColor=\"#000\"\n            android:text=\"Name\"/\u003e\n        \u003cTextView\n            android:id=\"@+id/record_age\"\n            android:textColor=\"#000\"\n            android:fontFamily=\"serif\"\n            android:layout_height=\"wrap_content\"\n            android:layout_width=\"match_parent\"\n            android:layout_weight=\"1\"\n            android:text=\"Age\"/\u003e\n        \u003cTextView\n            android:textColor=\"#000\"\n            android:id=\"@+id/record_position\"\n            android:fontFamily=\"serif\"\n            android:layout_height=\"wrap_content\"\n            android:layout_width=\"match_parent\"\n            android:layout_weight=\"1\"\n            android:text=\"Position\"/\u003e\n        \u003cTextView\n            android:textColor=\"#000\"\n            android:id=\"@+id/record_address\"\n            android:fontFamily=\"serif\"\n            android:layout_height=\"wrap_content\"\n            android:layout_width=\"match_parent\"\n            android:layout_weight=\"1\"\n            android:text=\"location\"/\u003e        \n    \u003c/LinearLayout\u003e\n```\n\nNow that we have a `RecordViewHolder` to encapsulate the visual elements that comprise a record, and a `record.xml` layout to inflate those elements into, we can go ahead and implement our  `getView` method inside our RecordAdapter class like so:\n\n```\n    @Override\n    public View getView(int i, View view, ViewGroup viewGroup) {\n            RecordViewHolder holder;\n            \n        if (view ==null){\n            LayoutInflater recordInflater = (LayoutInflater) \n            recordContext.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);\n            view = recordInflater.inflate(R.layout.record, null);\n            \n            holder = new RecordViewHolder();\n            holder.ageView = (TextView) view.findViewById(R.id.record_age);\n            holder.nameView = (TextView) view.findViewById(R.id.record_name);\n            holder.positionView = (TextView) view.findViewById(R.id.record_position);\n            holder.addressView = (TextView) view.findViewById(R.id.record_address);\n            view.setTag(holder);\n            \n        }else {\n            holder = (RecordViewHolder) view.getTag();\n        }\n        \n            Record record = (Record) getItem(i);\n            holder.nameView.setText(record.name);\n            holder.ageView.setText(record.age);\n            holder.positionView.setText(record.position);\n            holder.addressView.setText(record.address);\n            return view;\n    }\n```\n\nWhat we want to do now is, when we receive an event from Pusher about a new record, we want to add that new record to our `RecordAdapter` and update our `recordsList` with that new employee record. Here’s how we achieve that:\n\n```\n    //...\n    public class RecordsAdapter extends BaseAdapter {\n      //...\n      public void add(Record record) {\n        recordList.add(record);\n        notifyDataSetChanged();\n      }\n    }\n```\n\nThis will add the record to the `recordsList` and `notifyDataSetChange()` will refresh the adapter, showing the new record.\nNow we can go back to `MainActivity` and start listening for Pusher records:\n\n```\n        @Override\n        protected void onCreate(Bundle savedInstanceState) {\n             ...\n             // initialize Pusher\n            Pusher pusher = new Pusher(\"pusher_key\"); \n            pusher.setCluster(\"app_cluster\");\n             // subscribe to our \"records\" channel\n            Channel channel = pusher.subscribe(\"records\"); \n              // listen for the \"new_record\" event\n            channel.bind(\"new_record\", new SubscriptionEventListener() {\n                ...\n            }); \n            // connect to the Pusher API\n            pusher.connect(); \n        }\n```\n\nNow that we have initialized Pusher, connected to the API, and subscribed to the `records` channel, we can add our `SubscriptionEventListener` to execute when an event comes in. All we’ll need to do is parse the JSON (for this example we used the [Gson library](https://github.com/google/gson) to parse it into the `Record` object) and then add it to the `RecordAdapter` inside the `MainActivity` like so:\n\n```\n    channel.bind(\"new_record\", new SubscriptionEventListener() {\n        @Override\n        public void onEvent(String channelName, String eventName, final String data) {\n            runOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    Gson gson = new Gson();\n                    Record record = gson.fromJson(data, Record.class);\n                    recordAdapter.add(record);\n                    recordsView.setSelection(recordsAdapter.getCount() - 1);\n                }\n            });\n        }\n    });\n```\n\nAt this point, whenever we have a `new_record` event come in, we simply add it to our `RecordAdapter`, and the new record will appear in realtime! wow, that was amazing!\n\nNow run your app on an emulator or any android device, and give it a spin. If you encounter any issues, do consult the [source code](https://github.com/christiannwamba/pusher-android-table).\nIf you have an android device, you can [install the app here](https://drive.google.com/file/d/1yicGkXQyOLCnhhkmIHjVTDgAB_j-_9jm/view?usp=sharing) and see how it works.\n\n## Conclusion\n\nWith this walk through, you should be able to build cross platform realtime apps with ease. Other Pusher features are available but their use depends on the requirements of your app. You can have a look at [Pusher’s](https://pusher.com/docs/) documentation for a deeper comprehension of the project.\n\n### Appendix: Pusher Setup\n\n1. [Sign up](https://dashboard.pusher.com/accounts/sign_in) for a free Pusher account:\n![realtime-table-android-signup](//images.contentful.com/1es3ne0caaid/qUrCl4R2BauEiIckOwCAS/fc02e2b21cfdc56c05a09d2e3525bcff/realtime-table-android-signup.png)\n\n2. Create a new app by selecting **Apps** on the sidebar and clicking **Create New** button on the bottom of the sidebar:\n![realtime-table-android-dashboard](//images.contentful.com/1es3ne0caaid/4Z3RALCwV2AO42YcmcayII/8b534c87265b7eacb6be6c00de639954/realtime-table-android-dashboard.png)\n\n3. Configure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with for a better setup experience:\n![realtime-table-android-create-app](//images.contentful.com/1es3ne0caaid/47GBScjOI0MWIq2GsokAU8/0ab3ef594630f3548b39b7cfd4e760a6/realtime-table-android-create-app.png)\n\n4. You can retrieve your keys from the **App Keys** tab:\n![realtime-table-android-api-keys](//images.contentful.com/1es3ne0caaid/50Epp9EnvqmOOWUUUuE0Sy/71df392b707f50ed6fd04da9d375ee65/realtime-table-android-api-keys.png)","metaTitle":"Build a realtime table with Android ","metaDescription":"In this tutorial, we will be using our Android library to quickly and easily build a live data table. "}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2txXtpE7lCciQUc4M4GmyS","type":"Entry","createdAt":"2018-02-22T15:04:12.993Z","updatedAt":"2018-02-28T16:55:30.946Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Making React realtime with websockets","url":"react-websockets","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/react-pusher-getting-started","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}}],"reviewDate":"2018-01-15","description":"Build a chat application using React and Pusher. ","prerequisite":"A basic understanding of React and Node.js are needed to follow this tutorial.","content":"Every chat application requires real time functionality. This amongst other benefits allows interaction between users in different location(s). A chat application like this can be built to function on diverse platforms, be it mobile or web applications. \n\nIn this tutorial, I will be showing you how to build a chat application using [React](https://reactjs.org/) and [Pusher](https://pusher.com). This is a very simple application and it comes with functionality which will be showing some of the rich features of Pusher and how you can easily combine it with a modern library like React. \n\nPusher is a platform that allows developers to easily build an application with realtime features as quickly as possible. Pusher specialises in building realtime and scalable infrastructures for developers and is packaged with powerful features like client events, queryable API, Pub/Sub messaging and others.\n\nWe will explore Pusher as we proceed in this tutorial and leverage on the DOM manipulation, event driven and data-binding ability of React.\n\nA basic knowledge of JavaScript and React will be of advantage so as to effectively participate in this tutorial.\n\nA sneak peek into what we will build in this tutorial:\n\n![reactjs-websockets-demo](//images.contentful.com/1es3ne0caaid/1O7NDl5Hv6Wia6AGEoS6mE/b842dd7761b6a525a9005e70daefd227/making-reactjs-realtime-with-websockets-demo.gif)\n\n## Getting Started\n\nFor a hitch-free flow of procedures in this tutorial, we will begin by setting up the required credentials with Pusher. If you don’t have an account, [kindly create one](https://pusher.com/) . Once you are done, go ahead and create a new app from your dashboard. Don’t forget to take note of your `app_id`, `key`, `secret` and `cluster` as you will be required to use them later in this tutorial.\n\n\n## Create React-app\n\nTo quickly scaffold a React app, we will make use of the `create``-react-app` tool. This gives us easy access to the CLI tool that will be used to start building our chat application. \n\nIt is important that you have Node and npm installed on your machine.  Quickly follow this [link](https://nodejs.org/en/) to complete that, if you don’t have it already. To verify if you have Node and npm installed, open up the terminal and run the command below:\n\n```\n    npm -v \n    node -v\n```\n\nThe version for each one will be displayed, if they are installed. The latest versions are fine.\n\n\n## Installation\n\nNow, install create-react-app and also scaffold a new React app with the following commands: \n\n```\n    npm install -g create-react-app\n    \n    create-react-app react-pusher\n```\n\nOnce all the necessary files are installed, change directory into `react-``pusher` and start the application with:\n\n```\n    npm start\n```\n\nBy now, you should have a new tab opened in your default browser:\n\n![reactjs-websockets-first-run](//images.contentful.com/1es3ne0caaid/4pHsFx37gASYMaAyqwcYES/602097101ff4bb5e2b96fc98b3b0945c/making-reactjs-realtime-with-websockets-first-run.png)\n\nWe have successfully set up the front-end of the application, we will return to this very soon. Let’s proceed to setup the server application.\n\n## Node Server\n\nNode.js using the Express web framework will be used as our server application.  The server application, amongst other functions, will provide endpoints to send messages for our chat app so as to ensure interaction between users. There are number of dependencies required for the application server, so let’s install them immediately:\n\n```\n    npm install --save axios body-parser cors express pusher pusher-js\n```\n\nTo configure the entry point of the application, create a file called `server.js` and paste the code below into it:\n\n```\n    const Pusher = require('pusher');\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const cors = require('cors');\n    \n    const app = express();\n    \n    app.use(cors());\n    app.use(bodyParser.urlencoded({extended: false}));\n    app.use(bodyParser.json());\n    const pusher = new Pusher({\n      appId: 'APP_ID',\n      key: 'APP_KEY',\n      secret: 'APP_SECRET',\n      cluster: 'APP_CLUSTER',\n      encrypted: true\n    });\n    app.set('PORT', process.env.PORT || 5000);\n    \n    app.post('/message', (req, res) =\u003e {\n      const payload = req.body;\n      pusher.trigger('chat', 'message', payload);\n      res.send(payload)\n    });\n    \n    app.listen(app.get('PORT'), () =\u003e \n      console.log('Listening at ' + app.get('PORT')))\n```\n\nHere we initialised Pusher with the required credentials and then created an endpoint to process messages from the frontend of our application.\n\n## Building Components\n\nTo define a good application structure and fully see our chat app in action, lets create some components. In React, components can either be stateful or stateless depending on the functionality that it was created for. The common patter is to have state for container components only and pass those states to UI components as props.\n\nCreate components from the terminal with:\n\n```\n    touch ChatList.js ChatBox.js\n```\n\nand lastly their respective stylesheet:\n\n```\n    touch ChatList.css ChatBox.css\n```\n\nEach of the components’ logic need to be created. Lets do that now\n\n\n## ChatBox.js\n\nThis component contains the input field for accepting the users message and also displays a welcome message showing the username passed in from the parent component. Furthermore, `handleTextChange` is also passed from the parent component. This component is exported and configured like:\n\n```\n    import React from \"react\";\n    import './ChatBox.css';\n    export default ({ text, username, handleTextChange }) =\u003e (\n      \u003cdiv\u003e\n        \u003cdiv className=\"row\"\u003e\n        \u003cdiv className=\"col-xs-12\"\u003e\n          \u003cdiv className=\"chat\"\u003e\n            \u003cdiv className=\"col-xs-5 col-xs-offset-3\"\u003e\n              \u003cinput\n                type=\"text\"\n                value={text}\n                placeholder=\"chat here...\"\n                className=\"form-control\"\n                onChange={handleTextChange}\n                onKeyDown={handleTextChange}\n              /\u003e\n            \u003c/div\u003e\n            \u003cdiv className=\"clearfix\"\u003e\u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n        \u003ch4 className=\"greetings\"\u003eHello, {username}\u003c/h4\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n    );\n```\n\nThis component above is styled with imported stylesheet `ChatBox.css` :\n\n```\n    .greetings {\n        margin-top: 90px;\n        text-align: center;\n    }\n```\n\n## ChatList.js\n\nThis is responsible for displaying the list of chats inputted by each user. Added to it is the username and messages. This is also implemented as shown below and exported:\n\n```\n    import React from \"react\";\n    import \"./ChatList.css\";\n    import avatar from \"./avatar.png\";\n    export default ({ chats }) =\u003e (\n      \u003cul\u003e\n        {chats.map(chat =\u003e {\n          return (\n            \u003cdiv\u003e\n              \u003cdiv className=\"row show-grid\"\u003e\n                \u003cdiv className=\"col-xs-12\"\u003e\n                  \n                  \u003cdiv className=\"chatMessage\"\u003e\n                    \u003cdiv key={chat.id} className=\"box\"\u003e\n                      \u003cp\u003e\n                        \u003cstrong\u003e{chat.username}\u003c/strong\u003e\n                      \u003c/p\u003e\n                      \u003cp\u003e{chat.message}\u003c/p\u003e\n                    \u003c/div\u003e\n                    \u003cdiv className=\"imageHolder\"\u003e\n                    \u003cimg src={avatar} className=\"img-responsive avatar\" alt=\"logo\" /\u003e\n                  \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          );\n        })}\n      \u003c/ul\u003e\n    );\n```\n\nAnd the stylesheet `ChatList.css`:\n\n```\n    ul {\n      list-style-type: none;\n    }\n    .chat {\n      margin-top: 50px;\n    }\n    .chatMessage {\n      position: relative;\n      border: 1px solid #ccc;\n      border-radius: 5px;\n      margin: 20px auto;\n      width: 700px;\n      display: table;\n    }\n    .box {\n      background-color: #ffffff;\n      padding: 20px;\n      border-bottom: 1px solid #cccccc;\n    }\n    .imageHolder {\n      width: 50px;\n      height: 50px;\n      position: absolute;\n      top: 20px;\n      right: 50px;\n    }\n```\n\nWe have successfully completed the `ChatBox` and `ChatList` component. As far as the application is concerned, these modules are not yet available to be rendered in the parent app component yet.  To correct this, the `A``pp.js` file needs to be configured.\n\n## Parent Container Component (App.js)\n\nThis is regarded as the parent component. It ensures effective parent-child communication by passing props down to each child component. In App.js, a class named App is used to extend the React Component class and a constructor is defined with its properties and methods. In App.js required node modules and CSS file are imported with:\n\n```\n    import React, { Component } from 'react';\n    import axios from 'axios';\n    import Pusher from 'pusher-js';\n    import ChatList from './ChatList';\n    import ChatBox from './ChatBox';\n    import logo from './logo.svg';\n    import './App.css';\n    ...\n```    \n\nNext a class that extends the Component class imported from the React module is created. Also defined in this class is the state variables. The `super()` method is also called whenever a child class is extended from a parent class. In this case, props is also passed as a parameter. The state variables in the app are created and defined in the constructor like this:\n\n```\n    ...\n    class App extends Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n          text: '',\n          username: '',\n          chats: []\n        };\n      }\n      componentDidMount() {\n        ...\n      }\n      handleTextChange(e) {\n       ...\n      }\n      render() {\n        return (\n          \u003cdiv className=\"App\"\u003e\n           ...\n          \u003c/div\u003e\n        );\n      }\n    }\n    ...\n```\n\nAfter defining the required state of the app, you can start subscribing to the Pusher channel and binding to the events emitted by your server:\n\n```\n     componentDidMount() {\n        const username = window.prompt('Username: ', 'Anonymous');\n        this.setState({ username });\n        const pusher = new Pusher('APP_KEY', {\n          cluster: 'APP_CLUSTER',\n          encrypted: true\n        });\n        const channel = pusher.subscribe('chat');\n        channel.bind('message', data =\u003e {\n          this.setState({ chats: [...this.state.chats, data], test: '' });\n        });\n        this.handleTextChange = this.handleTextChange.bind(this);\n      }\n      \n      handleTextChange(e) {\n        if (e.keyCode === 13) {\n          const payload = {\n            username: this.state.username,\n            message: this.state.text\n          };\n          axios.post('http://localhost:5000/message', payload);\n        } else {\n          this.setState({ text: e.target.value });\n        }\n      }\n```\n\nBringing it all together:\n\n```\n    render() {\n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003cheader className=\"App-header\"\u003e\n              \u003cimg src={logo} className=\"App-logo\" alt=\"logo\" /\u003e\n              \u003ch1 className=\"App-title\"\u003eWelcome to React-Pusher Chat\u003c/h1\u003e\n            \u003c/header\u003e\n            \u003csection\u003e\n              \u003cChatList chats={this.state.chats} /\u003e\n              \u003cChatBox\n                text={this.state.text}\n                username={this.state.username}\n                handleTextChange={this.handleTextChange}\n              /\u003e\n            \u003c/section\u003e\n          \u003c/div\u003e\n        );\n      }\n```\n\nIn case you missed anything, you can find the complete App.js file [right here](https://github.com/christiannwamba/react-pusher-getting-started/blob/master/src/App.js).\n\n![reactjs-websockets-demo](//images.contentful.com/1es3ne0caaid/1O7NDl5Hv6Wia6AGEoS6mE/b842dd7761b6a525a9005e70daefd227/making-reactjs-realtime-with-websockets-demo.gif)\n\n## Conclusion\n\nThis article has covered the basic steps necessary to create a realtime chat application using React and Pusher. Moving forward, the concept demonstrated here can be built upon and extended to cater for any other realtime features you wish to build in your application. I hope you have found this tutorial helpful and feel free to improve on the code available [here](https://github.com/christiannwamba/react-pusher-getting-started) and drop comment(s) below, if any.","metaTitle":"Making React realtime with websockets","metaDescription":"Follow the steps you need to build a chat application using React and Pusher. "}}],"defaultValue":"Channels","queryType":"product","pages":33,"route":"/tutorials","query":{"product":"Channels","page":"24"}}},"page":"/tutorials","query":{"product":"Channels","page":"24"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&page=24 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:47:08 GMT -->
</html>