<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=JavaScript&page=4 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:32:26 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">290</span> tutorials for “<span class="css-npldjc ehwuahf2">JavaScript</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials512c.html?product=Beams&amp;tag=JavaScript" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials.html" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#C223CE" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#C223CE"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="JavaScript"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/live-analytics-go.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">HTML<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live analytics dashboard using Go and MongoDB</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Use Go, MongoDB and Pusher Channels to monitor user interactions with your app. Build a simple demo app page and a monit...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/node-command-line-app.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Understanding Node.js by building command line apps</h3><p class="css-k12xad e5jrto45">Use Node.js to build a command line application. Integrate the APIXU weather API, allowing users to get the current and ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/youtube-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a Youtube-integrated application using React Native</h3><p class="css-k12xad e5jrto45">Build a basic React Native app. Set up YouTube integration and pull in playlists from Rotten Tomatoes. This tutorial wil...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/accessible-react-fragments.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Writing accessible apps and efficient code with React fragments</h3><p class="css-k12xad e5jrto45">Learn how to handle nested HTML elements in React using fragments. Understand the benefits of fragments compared to othe...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/end-to-end-encryption-node.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">End to end encryption in Node.js with Pusher Channels</h3><p class="css-k12xad e5jrto45">Learn how Pusher Channels support varying encryption levels, from public to fully encrypted. Build a simple demo using N...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-countdown-angular.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live subscription count down with Angular</h3><p class="css-k12xad e5jrto45">Use Angular 7, Node and Channels to build a live subscription countdown. The app features two interfaces: a signup dashb...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/consume-restful-api-react.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">How to consume a RESTful API in React</h3><p class="css-k12xad e5jrto45">This brief tutorial will introduce you to using REST APIs in React applications. You will create a simple demo that cons...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-multiplayer-quiz-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Gaming<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Creating a live multiplayer quiz app in React Native</h3><p class="css-k12xad e5jrto45">Use React Native and Node to build a live cross-platform quiz app. Admins are able to add questions and start the game. ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/backend-developer-part-3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Dart<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flutter<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Becoming a backend developer - Part 3: Connecting to the server from a mobile app</h3><p class="css-k12xad e5jrto45">This is a tutorial for mobile app developers. In this three-part series, we will cover all the basics of what it takes t...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialse2e4.html?tag=JavaScript&amp;page=3" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials700d.html?tag=JavaScript&amp;page=1" class="css-5s6711 edg0byb1">1</a><a href="tutorials84cd.html?tag=JavaScript&amp;page=2" class="css-5s6711 edg0byb1">2</a><a href="tutorialse2e4.html?tag=JavaScript&amp;page=3" class="css-5s6711 edg0byb1">3</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials394c.html?tag=JavaScript&amp;page=4" class="css-2wakph edg0byb1">4</a><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorialsac66.html?tag=JavaScript&amp;page=5" class="css-za1ua3 edg0byb1">5</a><a href="tutorials0fbd.html?tag=JavaScript&amp;page=6" class="css-za1ua3 edg0byb1">6</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials3c54.html?tag=JavaScript&amp;page=33" class="css-5s6711 edg0byb1">33</a><a href="tutorialsac66.html?tag=JavaScript&amp;page=5" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":290,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"7Mf0Yf8VG2Rp2GrRrgrQok","type":"Entry","createdAt":"2019-05-01T18:13:43.138Z","updatedAt":"2019-05-01T18:13:43.138Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live analytics dashboard using Go and MongoDB","url":"live-analytics-go","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Khmrnzj5moO4S6WOYOGAo","type":"Entry","createdAt":"2018-11-14T14:35:55.702Z","updatedAt":"2019-03-03T15:15:59.601Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lanre Adelowo","url":"lanre-adelowo","email":"adelowomailbox@gmail.com","twitter":"https://twitter.com/alanreadelowo","github":"https://github.com/adelowo","guestWriter":true}}],"projectRepo":"https://github.com/adelowo/pusher-realtime-analytics-dashboard","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4E7t0TtVFSAyeeA0ckeYe0","type":"Entry","createdAt":"2018-02-12T15:09:41.899Z","updatedAt":"2018-02-26T12:31:11.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Realtime Chart","url":"realtime-chart","type":"use case"}}],"reviewDate":"2019-05-01","description":"Use Go, MongoDB and Pusher Channels to monitor user interactions with your app. Build a simple demo app page and a monitoring dashboard. The dashboard updates in realtime as users interact with the app.","prerequisite":"You will need Go 1.7+ and MongoDB 3+ installed on your machine.","content":"One of the most important step to take while taking a website or app into production is analytics and usage statistics. This is important as it allows you to see how users are actually using your app, improve usability and inform future development decisions. \n\nIn this tutorial, I will describe how to monitor all requests an application is going to receive, we will use the data gotten from monitoring to track a few metrics such as:\n\n- Most visited links\n- Response time for each link\n- Total number of requests\n- Average response time\n\n![go-app-monitoring-demo](//images.ctfassets.net/1es3ne0caaid/3bGgZOLvnaGTWBhY3e68lL/4248aba65a28dd9aef46b4379b4afec7/go-app-monitoring-demo.gif)\n\n## Prerequisites\n\n- Golang \u003e=1.7. You can install the Golang toolchain [by following this guide](https://golang.org/dl/).\n- MongoDB \u003e=3. You can install this by [following this guide](https://docs.mongodb.com/manual/installation/).\n- A [Pusher account](http://pusher.com/signup).\n\n\n## Starting out\n\nWe will start out by setting up our project directory. You will need to create a directory called `analytics-dashboard`. The location of this directory will depend on the version of the Go toolchain you have:\n\n- If you are running `\u003c=1.11`, you should create the directory in `$GOPATH/src/github.com/pusher-tutorials/analytics-dashboard`\n- If you are running `1.12` or greater, you can create the directory anywhere.\n\nIn the newly created directory, create a `.env` in the root directory with the following command:\n\n\n```    \n    $ touch .env\n```    \n\nIn the `.env` file, you will need to add your credentials. Copy and paste the following contents into the file:\n\n```\n    // analytics-dashboard/.env\n    PUSHER_APP_ID=PUSHER_APP_ID\n    PUSHER_APP_KEY=PUSHER_APP_KEY\n    PUSHER_APP_SECRET=PUSHER_APP_SECRET\n    PUSHER_APP_CLUSTER=PUSHER_APP_CLUSTER\n    PUSHER_APP_SECURE=\"1\"\n```    \n\n\n\u003e Please make sure to replace the placeholders with your own credentials.\n\n\n\n## MongoDB\n\nMongoDB is going to be used as a persistent datastore and we are going to make use of it’s calculation abilities to build out the functionality I described above.\n\nSince we are building the application in Golang, we will need to fetch a client library that will assist us in connecting and querying the MongoDB database. To that, you should run the following command:\n\n\n```   \n    $ go get -u -v gopkg.in/mgo.v2/...\n```    \n\nOnce the above command succeeds, you will need to create a new file called `analytics.go`. In this file, paste the following code:\n\n```go\n    // analytics-dashboard/analytics.go\n    \n    package main\n    \n    import (\n            \"gopkg.in/mgo.v2\"\n            \"gopkg.in/mgo.v2/bson\"\n    )\n    \n    const (\n            collectionName = \"request_analytics\"\n    )\n    \n    type requestAnalytics struct {\n            URL         string `json:\"url\"`\n            Method      string `json:\"method\"`\n            RequestTime int64  `json:\"request_time\"`\n            Day         string `json:\"day\"`\n            Hour        int    `json:\"hour\"`\n    }\n    \n    type mongo struct {\n            sess *mgo.Session\n    }\n    \n    func (m mongo) Close() error {\n            m.sess.Close()\n            return nil\n    }\n    \n    func (m mongo) Write(r requestAnalytics) error {\n            return m.sess.DB(\"pusher_tutorial\").C(collectionName).Insert(r)\n    }\n    \n    func (m mongo) Count() (int, error) {\n            return m.sess.DB(\"pusher_tutorial\").C(collectionName).Count()\n    }\n    \n    type statsPerRoute struct {\n            ID struct {\n                    Method string `bson:\"method\" json:\"method\"`\n                    URL    string `bson:\"url\" json:\"url\"`\n            } `bson:\"_id\" json:\"id\"`\n            NumberOfRequests int `bson:\"numberOfRequests\" json:\"number_of_requests\"`\n    }\n    \n    func (m mongo) AverageResponseTime() (float64, error) {\n    \n            type res struct {\n                    AverageResponseTime float64 `bson:\"averageResponseTime\" json:\"average_response_time\"`\n            }\n    \n            var ret = []res{}\n    \n            var baseMatch = bson.M{\n                    \"$group\": bson.M{\n                            \"_id\":                 nil,\n                            \"averageResponseTime\": bson.M{\"$avg\": \"$requesttime\"},\n                    },\n            }\n    \n            err := m.sess.DB(\"pusher_tutorial\").C(collectionName).\n                    Pipe([]bson.M{baseMatch}).All(\u0026ret)\n    \n            if len(ret) \u003e 0 {\n                    return ret[0].AverageResponseTime, err\n            }\n    \n            return 0, nil\n    }\n    \n    func (m mongo) StatsPerRoute() ([]statsPerRoute, error) {\n    \n            var ret []statsPerRoute\n    \n            var baseMatch = bson.M{\n                    \"$group\": bson.M{\n                            \"_id\":              bson.M{\"url\": \"$url\", \"method\": \"$method\"},\n                            \"responseTime\":     bson.M{\"$avg\": \"$requesttime\"},\n                            \"numberOfRequests\": bson.M{\"$sum\": 1},\n                    },\n            }\n    \n            err := m.sess.DB(\"pusher_tutorial\").C(collectionName).\n                    Pipe([]bson.M{baseMatch}).All(\u0026ret)\n            return ret, err\n    }\n    \n    type requestsPerDay struct {\n            ID               string `bson:\"_id\" json:\"id\"`\n            NumberOfRequests int    `bson:\"numberOfRequests\" json:\"number_of_requests\"`\n    }\n    \n    func (m mongo) RequestsPerHour() ([]requestsPerDay, error) {\n    \n            var ret []requestsPerDay\n    \n            var baseMatch = bson.M{\n                    \"$group\": bson.M{\n                            \"_id\":              \"$hour\",\n                            \"numberOfRequests\": bson.M{\"$sum\": 1},\n                    },\n            }\n    \n            var sort = bson.M{\n                    \"$sort\": bson.M{\n                            \"numberOfRequests\": 1,\n                    },\n            }\n    \n            err := m.sess.DB(\"pusher_tutorial\").C(collectionName).\n                    Pipe([]bson.M{baseMatch, sort}).All(\u0026ret)\n            return ret, err\n    }\n    \n    func (m mongo) RequestsPerDay() ([]requestsPerDay, error) {\n    \n            var ret []requestsPerDay\n    \n            var baseMatch = bson.M{\n                    \"$group\": bson.M{\n                            \"_id\":              \"$day\",\n                            \"numberOfRequests\": bson.M{\"$sum\": 1},\n                    },\n            }\n    \n            var sort = bson.M{\n                    \"$sort\": bson.M{\n                            \"numberOfRequests\": 1,\n                    },\n            }\n    \n            err := m.sess.DB(\"pusher_tutorial\").C(collectionName).\n                    Pipe([]bson.M{baseMatch, sort}).All(\u0026ret)\n            return ret, err\n    }\n    \n    func newMongo(addr string) (mongo, error) {\n            sess, err := mgo.Dial(addr)\n            if err != nil {\n                    return mongo{}, err\n            }\n    \n            return mongo{\n                    sess: sess,\n            }, nil\n    }\n    \n    type Data struct {\n            AverageResponseTime float64          `json:\"average_response_time\"`\n            StatsPerRoute       []statsPerRoute  `json:\"stats_per_route\"`\n            RequestsPerDay      []requestsPerDay `json:\"requests_per_day\"`\n            RequestsPerHour     []requestsPerDay `json:\"requests_per_hour\"`\n            TotalRequests       int              `json:\"total_requests\"`\n    }\n    \n    func (m mongo) getAggregatedAnalytics() (Data, error) {\n    \n            var data Data\n    \n            totalRequests, err := m.Count()\n            if err != nil {\n                    return data, err\n            }\n    \n            stats, err := m.StatsPerRoute()\n            if err != nil {\n                    return data, err\n            }\n    \n            reqsPerDay, err := m.RequestsPerDay()\n            if err != nil {\n                    return data, err\n            }\n    \n            reqsPerHour, err := m.RequestsPerHour()\n            if err != nil {\n                    return data, err\n            }\n    \n            avgResponseTime, err := m.AverageResponseTime()\n            if err != nil {\n                    return data, err\n            }\n    \n            return Data{\n                    AverageResponseTime: avgResponseTime,\n                    StatsPerRoute:       stats,\n                    RequestsPerDay:      reqsPerDay,\n                    RequestsPerHour:     reqsPerHour,\n                    TotalRequests:       totalRequests,\n            }, nil\n    }\n```   \n\nIn the above, we have implemented a few queries on the MongoDB database:\n\n\n- `StatsPerRoute`: Analytics for each route visited\n- `RequestsPerDay`: Analytics per day\n- `RequestsPerHour`: Analytics per hour\n\nThe next step is to add some HTTP endpoints a user can visit. Without those, the code above for querying MongoDB for analytics is redundant. You will also need to create a logging middleware that writes analytics to MongoDB. And to make it realtime, Pusher Channels will also be used.\n\nTo get started with that, you will need to create a file named `main.go`. You can do that via the command below:\n\n\n```    \n    $ touch main.go\n```   \n\nYou will also need to fetch some libraries that will be used while building. You will need to run the command below to fetch them:\n\n\n```    \n    $ go get github.com/go-chi/chi\n    $ go get github.com/joho/godotenv\n    $ go get github.com/pusher/pusher-http-go\n```   \n\nIn the newly created `main.go` file, paste the following code:\n\n```go\n    // analytics-dashboard/main.go\n    \n    package main\n    \n    import (\n            \"encoding/json\"\n            \"flag\"\n            \"fmt\"\n            \"html/template\"\n            \"log\"\n            \"net/http\"\n            \"os\"\n            \"path/filepath\"\n            \"strconv\"\n            \"strings\"\n            \"sync\"\n            \"time\"\n    \n            \"github.com/go-chi/chi\"\n            \"github.com/joho/godotenv\"\n            \"github.com/pusher/pusher-http-go\"\n    )\n    \n    const defaultSleepTime = time.Second * 2\n    \n    func main() {\n            httpPort := flag.Int(\"http.port\", 4000, \"HTTP Port to run server on\")\n            mongoDSN := flag.String(\"mongo.dsn\", \"localhost:27017\", \"DSN for mongoDB server\")\n    \n            flag.Parse()\n    \n            if err := godotenv.Load(); err != nil {\n                    log.Fatal(\"Error loading .env file\")\n            }\n    \n            appID := os.Getenv(\"PUSHER_APP_ID\")\n            appKey := os.Getenv(\"PUSHER_APP_KEY\")\n            appSecret := os.Getenv(\"PUSHER_APP_SECRET\")\n            appCluster := os.Getenv(\"PUSHER_APP_CLUSTER\")\n            appIsSecure := os.Getenv(\"PUSHER_APP_SECURE\")\n    \n            var isSecure bool\n            if appIsSecure == \"1\" {\n                    isSecure = true\n            }\n    \n            client := \u0026pusher.Client{\n                    AppId:   appID,\n                    Key:     appKey,\n                    Secret:  appSecret,\n                    Cluster: appCluster,\n                    Secure:  isSecure,\n                    HttpClient: \u0026http.Client{\n                            Timeout: time.Second * 10,\n                    },\n            }\n    \n            mux := chi.NewRouter()\n    \n            log.Println(\"Connecting to MongoDB\")\n            m, err := newMongo(*mongoDSN)\n            if err != nil {\n                    log.Fatal(err)\n            }\n    \n            log.Println(\"Successfully connected to MongoDB\")\n    \n            mux.Use(analyticsMiddleware(m, client))\n    \n            var once sync.Once\n            var t *template.Template\n    \n            workDir, _ := os.Getwd()\n            filesDir := filepath.Join(workDir, \"static\")\n            fileServer(mux, \"/static\", http.Dir(filesDir))\n    \n            mux.Get(\"/\", func(w http.ResponseWriter, r *http.Request) {\n    \n                    once.Do(func() {\n                            tem, err := template.ParseFiles(\"static/index.html\")\n                            if err != nil {\n                                    log.Fatal(err)\n                            }\n    \n                            t = tem.Lookup(\"index.html\")\n                    })\n    \n                    t.Execute(w, nil)\n            })\n    \n            mux.Get(\"/api/analytics\", analyticsAPI(m))\n            mux.Get(\"/wait/{seconds}\", waitHandler)\n    \n            log.Fatal(http.ListenAndServe(fmt.Sprintf(\":%d\", *httpPort), mux))\n    }\n    \n    func fileServer(r chi.Router, path string, root http.FileSystem) {\n            if strings.ContainsAny(path, \"{}*\") {\n                    panic(\"FileServer does not permit URL parameters.\")\n            }\n    \n            fs := http.StripPrefix(path, http.FileServer(root))\n    \n            if path != \"/\" \u0026\u0026 path[len(path)-1] != '/' {\n                    r.Get(path, http.RedirectHandler(path+\"/\", 301).ServeHTTP)\n                    path += \"/\"\n            }\n    \n            path += \"*\"\n    \n            r.Get(path, http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n                    fs.ServeHTTP(w, r)\n            }))\n    }\n    \n    func analyticsAPI(m mongo) http.HandlerFunc {\n            return func(w http.ResponseWriter, r *http.Request) {\n    \n                    data, err := m.getAggregatedAnalytics()\n                    if err != nil {\n                            log.Println(err)\n    \n                            json.NewEncoder(w).Encode(\u0026struct {\n                                    Message   string `json:\"message\"`\n                                    TimeStamp int64  `json:\"timestamp\"`\n                            }{\n                                    Message:   \"An error occurred while fetching analytics data\",\n                                    TimeStamp: time.Now().Unix(),\n                            })\n    \n                            return\n                    }\n    \n                    w.Header().Set(\"Content-Type\", \"application/json\")\n                    json.NewEncoder(w).Encode(data)\n            }\n    }\n    \n    func analyticsMiddleware(m mongo, client *pusher.Client) func(next http.Handler) http.Handler {\n            return func(next http.Handler) http.Handler {\n                    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n    \n                            startTime := time.Now()\n    \n                            defer func() {\n    \n                                    if strings.HasPrefix(r.URL.String(), \"/wait\") {\n    \n                                            data := requestAnalytics{\n                                                    URL:         r.URL.String(),\n                                                    Method:      r.Method,\n                                                    RequestTime: time.Now().Unix() - startTime.Unix(),\n                                                    Day:         startTime.Weekday().String(),\n                                                    Hour:        startTime.Hour(),\n                                            }\n    \n                                            if err := m.Write(data); err != nil {\n                                                    log.Println(err)\n                                            }\n    \n                                            aggregatedData, err := m.getAggregatedAnalytics()\n                                            if err == nil {\n                                                    client.Trigger(\"analytics-dashboard\", \"data\", aggregatedData)\n                                            }\n                                    }\n                            }()\n    \n                            next.ServeHTTP(w, r)\n                    })\n            }\n    }\n    \n    func waitHandler(w http.ResponseWriter, r *http.Request) {\n            var sleepTime = defaultSleepTime\n    \n            secondsToSleep := chi.URLParam(r, \"seconds\")\n            n, err := strconv.Atoi(secondsToSleep)\n            if err == nil \u0026\u0026 n \u003e= 2 {\n                    sleepTime = time.Duration(n) * time.Second\n            } else {\n                    n = 2\n            }\n    \n            log.Printf(\"Sleeping for %d seconds\", n)\n            time.Sleep(sleepTime)\n            w.Write([]byte(`Done`))\n    }\n```    \n\nWhile the above might seem like a lot, basically what has been done is:\n\n\n- Line 31 - 33: Parse environment variables from the `.env` created earlier.\n\u003e Another reminder to update the `.env` file to contain your actual credentials\n- Line 36 - 56: A server side connection to Pusher Channels is established\n- Line 68 - 95: Build an HTTP server. \n- Line 139 - 171: A lot is happening here. `analyticsMiddleware` is used to capture all requests, and for requests that have the path `wait/{seconds}` , a log is written to MongoDB. It is also sent to Pusher Channels.\n\nBefore running the server, you need a frontend to visualize the analytics. The frontend is going to be as simple and usable as can be. You will need to create a new directory called `static` in your root directory - `analytics-dashboard` . That can be done with the following command:\n\n\n```    \n    $ mkdir analytics-dashboard/static\n```   \n\nIn the `static` directory, create two files - `index.html` and `app.js`. You can run the command below to do just that:\n\n\n```    \n    $ touch static/{index.html,app.js}\n```    \n\nOpen the `index.html` file and paste the following code:\n\n```html\n    // analytics-dashboard/static/index.html\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n        \u003ctitle\u003eRealtime analytics dashboard\u003c/title\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\n              integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \u003cdiv class=\"container\" id=\"app\"\u003e\u003c/div\u003e\n    \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.1.2/handlebars.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"https://js.pusher.com/4.3/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"/static/app.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```    \n\nWhile that is an empty page, you will make use of JavaScript to fill it up with useful data. So you will also need to open up the `app.js` file. In the `app.js` file, paste the following code:\n\n```js\n    // analytics-dashboard/static/app.js\n    \n    const appDiv = document.getElementById('app');\n    \n    const tmpl = `\n    \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-md-5\"\u003e\n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003ch5 class=\"card-title\"\u003eTotal requests\u003c/h5\u003e\n                    \u003cdiv class=\"card-text\"\u003e\n                        \u003ch3\u003e\\{{total_requests}}\u003c/h3\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"col-md-5\"\u003e\n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003ch5 class=\"card-title\"\u003eAverage response time\u003c/h5\u003e\n                    \u003cdiv class=\"card-text\"\u003e\n                        \u003ch3\u003e\\{{ average_response_time }} seconds\u003c/h3\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-md-5\"\u003e\n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003ch5 class=\"card-title\"\u003eBusiest days of the week\u003c/h5\u003e\n                    \u003cdiv class=\"card-text\" style=\"width: 18rem\"\u003e\n                        \u003cul class=\"list-group list-group-flush\"\u003e\n                            {{#each requests_per_day}}\n                            \u003cli class=\"list-group-item\"\u003e\n                                \\{{ this.id }} (\\{{ this.number_of_requests }} requests)\n                            \u003c/li\u003e\n                            {{/each }}\n                        \u003c/ul\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"col-md-5\"\u003e\n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003ch5 class=\"card-title\"\u003eBusiest hours of day\u003c/h5\u003e\n                    \u003cdiv class=\"card-text\" style=\"width: 18rem;\"\u003e\n                        \u003cul class=\"list-group list-group-flush\"\u003e\n                            {{#each requests_per_hour}}\n                            \u003cli class=\"list-group-item\"\u003e\n                                \\{{ this.id }} (\\{{ this.number_of_requests }} requests)\n                            \u003c/li\u003e\n                            {{/each}}\n                        \u003c/ul\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-md-5\"\u003e\n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003ch5 class=\"card-title\"\u003eMost visited routes\u003c/h5\u003e\n                    \u003cdiv class=\"card-text\" style=\"width: 18rem;\"\u003e\n                        \u003cul class=\"list-group list-group-flush\"\u003e\n                            {{#each stats_per_route}}\n                            \u003cli class=\"list-group-item\"\u003e\n                                \\{{ this.id.method }} \\{{ this.id.url }} (\\{{ this.number_of_requests }} requests)\n                            \u003c/li\u003e\n                            {{/each}}\n                        \u003c/ul\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    `;\n    \n    const template = Handlebars.compile(tmpl);\n    \n    writeData = data =\u003e {\n      appDiv.innerHTML = template(data);\n    };\n    \n    axios\n      .get('http://localhost:4000/api/analytics', {})\n      .then(res =\u003e {\n        console.log(res.data);\n        writeData(res.data);\n      })\n      .catch(err =\u003e {\n        console.error(err);\n      });\n    \n    const APP_KEY = 'PUSHER_APP_KEY';\n    const APP_CLUSTER = 'PUSHER_CLUSTER';\n    \n    const pusher = new Pusher(APP_KEY, {\n      cluster: APP_CLUSTER,\n    });\n    \n    const channel = pusher.subscribe('analytics-dashboard');\n    \n    channel.bind('data', data =\u003e {\n      writeData(data);\n    });\n```   \n\n\n\u003e Please replace `PUSHER_APP_KEY` and `PUSHER_CLUSTER` with your own credentials.\n\nIn the above code, we defined a constant called `tmpl`, it holds an HTML template which we will run through the [Handlebars](http://handlebarsjs.com/) template engine to fill it up with actual data.\n\nWith this done, you can go ahead to run the Golang server one. You will need to go to the root directory - `analytics-dashboard` and run the following command:\n\n\n```    \n    $ go build\n    $ ./analytics-dashboard\n```    \n\n\n\u003e Make sure you have a MongoDB instance running. If your MongoDB is running on a port other than the default 27017, make sure to add  `-mongo.dsn \"YOUR_DSN\"` to the above command\n\n\n\u003e Also make sure your credentials are in `.env` \n\nAt this stage, you will need to open two browser tabs. Visit `http://localhost:4000` in one and `http://localhost:4000/wait/2` in the other. Refresh the tab where you have `http://localhost:4000/wait/2` and go back to the other tab to see a breakdown of usage activity.\n\n\n\u003e Note you can change the value of 2 in the url to any other digit. \n\n\n## Conclusion\n\nIn this tutorial, we’ve built a middleware that tracks every request, and a Golang application that calculates analytics of the tracked requests. We also built a dashboard that displays the relevant data. With Pusher Channels, we’ve been able to update the dashboard in realtime. The full source code can be found [on GitHub](https://github.com/adelowo/pusher-realtime-analytics-dashboard).","metaTitle":"Build a live analytics dashboard using Go and MongoDB","metaDescription":"Use Go, MongoDB and Pusher Channels to monitor user interactions with your app. Build a simple demo app page and a monitoring dashboard. The dashboard updates in realtime as users interact with the app."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"tANmwZdnJlDd6CqiTBsNs","type":"Entry","createdAt":"2019-04-30T18:52:07.492Z","updatedAt":"2019-04-30T18:52:07.492Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Understanding Node.js by building command line apps","url":"node-command-line-app","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5K3KWA2xvqw4SW2sYI8eCG","type":"Entry","createdAt":"2018-02-12T15:34:14.169Z","updatedAt":"2018-02-14T10:09:19.038Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Chimezie Enyinnaya","url":"chimezie-enyinnaya","email":"meziemichael@gmail.com","twitter":"https://twitter.com/ammezie","github":"https://github.com/ammezie","guestWriter":true}}],"projectRepo":"https://github.com/ammezie/weatherCLI","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2019-04-30","description":"Use Node.js to build a command line application. Integrate the APIXU weather API, allowing users to get the current and predicted weather for any location in the world. The Commander npm module provides CLI app scaffolding including help and version pages.","prerequisite":"You will need Node.js installed on your machine.","content":"In this tutorial, I’ll be showing how to build command line applications using Node.js.\n\nJavaScript is very popular for building all kinds of applications, from frontend applications to backend and mobile applications. The language keeps evolving and now you can build command line applications or control hardware devices like drones with JavaScript.\n\n## Prerequisites\n\nThis tutorial assumes the following:\n\n- Node.js and NPM installed on your computer\n- Basic knowledge of JavaScript and Node.js\n\n## What we’ll be building\n\nIn this tutorial, we’ll be learning how to build simple command line application. We’ll be building a command line weather application using Node.js. With our command line weather application, we’ll be able to get the current weather in any city in the world. We’ll also be able to get a forecast for any specified city using a different command line parameters.\n\n## Getting started\n\nLet’s start by setting up our project and installing dependencies:\n\n```\n    $ mkdir weatherCLI\n    $ cd weatherCLI\n    $ npm init -y\n```\n\nThis will create an empty directory called `weatherCLI` that will hold all our project files.\nAfter our project directory has been created, we change the directory to the project directory and initialize our project. A `package.json` file will be created and now we can proceed to install our project dependencies:\n\n```\n    $ npm install commander node-fetch --save\n```\n\n[Commander](https://github.com/tj/commander.js) is a Node.js library that makes writing command line applications easy. We’ll be leveraging the library to build our command line application. [node-fetch](https://github.com/bitinn/node-fetch) is also a light-weight module that allows us make requests to external services to fetch data. We’ll use it to fetch weather data from [APIXU](https://www.apixu.com).\n\n## Obtaining API keys\n\nTo obtain our API keys, we need an account on [APIXU](https://www.apixu.com). Once you’ve created an account, login to the dashboard to find your API key that looks like `4a8****3e``*e248ac1*****``04`.\n\n## Building the command line app\n\nFirst, let’s create our project files. Create a `src` directory, and within it, create two files:\n\n```\n    $ touch src/index.js src/commands.js\n```\n\nOnce the files are created, we’ll go ahead to create our commands for the app by adding the code below inside `src/commands.js`:\n\n```js\n    // src/commands.js\n    \n    const fetch = require(\"node-fetch\");\n    const APIXU_KEY = \"\u003cYOUR APIXU KEY\u003e\";\n```\n\nWe import the `node-fetch` library, then we create an `APIXU_KEY` variable, which holds our API key.\n\nNext, we’ll go ahead to create two functions: `fetchNow()` to fetch the current weather for any specified city and `weatherForecast()` to fetch the forecast of any specified city likewise:\n\n```js\n    // src/commands.js\n    \n    const fetchNow = async (city) =\u003e {\n      const response = await fetch(`https://api.apixu.com/v1/current.json?key=${APIXU_KEY}\u0026q=${city}`);\n      const data = await response.json();\n    \n      const now = {\n        location: data.location.name,\n        country: data.location.country,\n        longitude: data.location.lon,\n        latitude: data.location.lat,\n        temparature: data.current.temp_c,\n        condition: data.current.condition.text\n      }\n    \n      console.log(now)\n    };   \n```\n\nThe `fetchNow` function is an asynchronous function that will return a `Promise`. It takes the passed `city` as a parameter in order to make the complete API request. The `await` operator can only be used inside an asynchronous function and it returns the fulfilled value of the `Promise`, or the value itself if it's not a `Promise`.\n\nThe `now` object holds just the necessary information we need from the data returned from the API request. The same thing applies to the `weatherForecast` function:\n\n```js\n    // src/commands.js\n    \n    const weatherForecast = async (city) =\u003e {\n        const response = await fetch(`https://api.apixu.com/v1/forecast.json?key=${APIXU_KEY}\u0026q=${city}`);\n    \n      const data = await response.json();\n    \n      console.log(data.forecast)\n    };\n```\n\nAfter defining all functions, we need to export them so they can be used in our command line program:\n\n```js\n    // src/commands.js\n    \n    module.exports = {\n      fetchNow,\n      weatherForecast\n    };\n```\n\nOur main application file `src/index.js` will hold the main application logic. Add the code below inside `src/index.js`:\n\n```js\n    // src/index.js\n    \n    const program = require('commander');\n    const { fetchNow, weatherForecast } = require('./commands');\n```\n\nWe import the `commander` library and also the defined functions from `src/commands.js`. After the dependencies have been imported, we’ll define our program parameters:\n\n```js\n    // src/index.js\n    \n    program\n      .version('0.0.1')\n      .description('Command line Weather Application')\n    \n    program\n      .command(\"now \u003ccity\u003e\")\n      .alias('n')\n      .description('see the current weather in the specified city')\n      .action(city =\u003e fetchNow(city));\n    \n    program\n      .command(\"forecast \u003ccity\u003e\")\n      .alias('f')\n      .description('see the weather forcast of a specified city')\n      .action(city =\u003e weatherForecast(city)); \n```\n\nLet’s go over what each piece of the code above does:\n\n\n- `.version` allows us define the current version of our command line application\n- `.command` defines how the parameter should be passed to the program with any extra arguments\n- `.alias` defines an alternative short form parameter that can be passed to the program instead of typing a longer one.\n- `.description` is the description of the alias\n- `.action` will call whatever function is passed to it. The action runs the functions and displays whatever is returned from the function. The action is also responsible for handling interactions with the user if the command line application is an interactive application.\n\nIn order to read all parameters and arguments passed to our program, we have to parse the inputs after the program command. Add the snippet below as the last line inside `weatherCLI.js`:\n\n```js\n    // src/index.js\n    \n    program.parse(process.argv)\n```\n\n## Running and testing the CLI application\n\nTo run and test our application, run the command below:\n\n```\n    $ node src/index.js now lagos\n```\n\nIt will return the current weather in Lagos as in the image below:\n\n![node-cli-weather-current](//images.ctfassets.net/1es3ne0caaid/3evr6LYpgSCpOy2eaWqLNr/77de51ef272f2bbd46d89348e7bacf6c/node-cli-weather-current.png)\n\nTo fetch the weather forecast for Lagos, run:\n\n```\n    $ node src/index.js f lagos\n```\n\n![node-cli-weather-future](//images.ctfassets.net/1es3ne0caaid/620gvkFjNCJSxKFD1NzB0z/c096b39ca34218b58f4bdf36fddb947b/node-cli-weather-future.png)\n\nAlso, we can run additional commands as below:\n\n```\n    $ node src/index.js --help\n```\n\nThis will return the application usage menu.\n\n![node-cli-weather-help](//images.ctfassets.net/1es3ne0caaid/48XbKS1Q2oMu51ZPqpXdDI/12180ba88da7864662da5a903a7698e2/node-cli-weather-help.png)\n\n```\n    $ node src/index.js --version\n```\n\nThis will return the application version as specified earlier in `src/index.js`.\n\n![node-cli-weather-version](//images.ctfassets.net/1es3ne0caaid/1O6Nect5QOWAtmNEjUXHXd/0a31be6a5f02972f69fc8d359a6f4078/node-cli-weather-version.png)\n\n## Conclusion\n\nFrom the tutorial, we can see how easy it is to create command line applications using the Node.js Commander library. We’ve been able to create a command line application that can display the current weather of any city in the world using the [APIXU](https://www.apixu.com). You can work more on the display formats so the displayed data looks interesting to users and also add a network loader while the application is fetching the weather reports.\n\nThe complete code for this tutorial is available on [GitHub](https://github.com/ammezie/weatherCLI).","metaTitle":"Understanding Node.js by building command line apps","metaDescription":"Use Node.js to build a command line application. Integrate the APIXU weather API, allowing users to get the current and predicted weather for any location in the world. The Commander npm module provides CLI app scaffolding including help and version pages."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2Y5V99KAFZ8nOHQOK8PaZ","type":"Entry","createdAt":"2019-04-25T18:29:16.822Z","updatedAt":"2019-04-25T18:29:16.822Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a Youtube-integrated application using React Native","url":"youtube-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5KlhqILjZSg4wUSqY4Goqg","type":"Entry","createdAt":"2018-02-20T14:39:32.323Z","updatedAt":"2018-10-02T14:31:36.612Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Samuel Ogundipe","url":"samuel-ogundipe","email":"ayoogundipe2005@gmail.com","twitter":"https://twitter.com/fucked_down","github":"https://github.com/samuelayo","guestWriter":true}}],"projectRepo":"https://github.com/samuelayo/OurTube","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2019-04-25","description":"Build a basic React Native app. Set up YouTube integration and pull in playlists from Rotten Tomatoes. This tutorial will guide you through React Native basics such as building components and using React Router.","prerequisite":"You will need React Native installed on your machine.","content":"## Introduction\n\nWhile building certain types of mobile apps, you might need to have media files displayed in the app.  In this tutorial, we will see how to integrate media from YouTube into our mobile apps.\n\n## What we'll build\n\nWe will build a simple mobile app using React Native called OurTube which will pull videos from the new trailers on Rotten Tomato YouTube channel via the Youtube API and display them to the user. After displaying, we should also be able to tap on a video and have it play inside the app.\n\n## Prerequisites\n\nA basic understanding of React and React Native is required for this tutorial.\n\n## Getting started\n\nYoutube is a video sharing website and it allows users to upload, rate, like, dislike, comment on videos and a lot more. Youtube also allows users to live stream videos. Youtube is also used widely for video blogging, educational purposes, movies, and trailers, and so on.\nWith the Youtube API, users can find, watch, and manage content on YouTube. It also allows you to add YouTube functionality to your website and mobile apps.\n\n## Obtaining your YouTube API key\n\nTo get started, the first step is to obtain our developer API key from the developer console. If you prefer a video tutorial, you can find a detailed video tutorial on how to obtain your developer API keys for YouTube [here](https://www.youtube.com/watch?v=3jZ5vnv-LZc).\n\nAfter obtaining your API key that should look like `AIzaSy****DjoCmWdzH*****cZYjOVg8o******`, we require the playlist ID we would like to fetch. To get the playlist ID:\n\n- Go to [Rotten Tomatoes TV channel YouTube page](https://www.youtube.com/playlist?list=PLTovKDoAy18KZ6sUQcmK2RDQeYkm2xUNtYouTube) -\u003e New Trailers Playlist\n- Copy the URL from the address bar e.g `https://www.youtube.com/playlist?list=PLTovKDoAy18KZ6sUQcmK2RDQeYkm2xUNt` and the playlist ID will be the string after the `list` query in the URL which is `PLTovKDoAy18KZ6sUQcmK2RDQeYkm2xUNt`\n## Setting up our React Native project\n\nTo get started, follow the official [documentation](https://facebook.github.io/react-native/docs/getting-started) on how to set up your computer for React Native development. If you already have your computer set up, you need to initiate and create the application project.\n\n```\n    $ react-native init OurTube\n```\n\nOnce that is completed, we need to compile and build the application to make sure everything is working fine.\n\n```\n    // For ios\n    $ react-native run-ios\n    \n    // For Android\n    $ react-native run-android\n```\n\n## Configure routing using react-native-router-flux\n\nReact-native-router-flux is a simple navigation API on top of React Navigation and it allows you to declare all application routes in stack and scenes for easy management and configuration. To get started with `react-native-router-flux`:\n\n```\n    $ npm install react-native-router-flux --save\n```\n\nGo ahead and create a route file and configure all application routing.\n\n```\n    $ touch Route.js\n```\n\n`Route.js` should be in the root directory of our OurTube App  and the contents will look like:\n\n```js\n    // Route.js\n    import React, { Component } from 'react';\n    import {Platform} from 'react-native';\n    // import components from react-native-router-flux\n    import {Router, Stack, Scene} from 'react-native-router-flux';\n    // import our screens as components \n    import Home from './screens/Home';\n    import WatchVideo from './screens/Video';\n    export default class Routes extends Component\u003c{}\u003e {\n      render() {\n        return(\n          \u003cRouter\u003e\n              \u003cStack key=\"root\"\u003e\n                \u003cScene key=\"home\" component={Home} title=\"Playlist Videos\" /\u003e\n                \u003cScene key=\"watchvideo\" component={WatchVideo} title=\"View Video\"/\u003e\n              \u003c/Stack\u003e\n          \u003c/Router\u003e\n          )\n      }\n    }\n```\n\nThe Router is the main routing component while a Stack is a group of Scenes with it's own navigator, so you can have multiple stacks for navigating. A Scene is the basic routing component for the main router and all Scene components require a key prop that must be unique and a key prop is used to call the screen transition and must be unique to all screens.\nWe have created two scenes called `home` and `watchvideo`. The scenes will be called as actions in our Home and Video screens.\nMore information can be found in the official [documentation](https://github.com/aksonov/react-native-router-flux/tree/master/docs/v3) of React Native Router Flux.\nUpdate `App.js` file to look like:\n\n```js\n    // App.js\n    import React, { Component } from 'react';\n    import {\n      StyleSheet,\n      View,\n      StatusBar,\n    } from 'react-native';\n    import Routes from './Route';\n    export default class App extends Component\u003c{}\u003e {\n      render() {\n        return (\n          \u003cView style={styles.container}\u003e\n            \u003cStatusBar\n              backgroundColor=\"#fff\"\n              barStyle=\"dark-content\"\n            /\u003e\n            \u003cRoutes/\u003e\n          \u003c/View\u003e\n        );\n      }\n    }\n    const styles = StyleSheet.create({\n      container : {\n        flex: 1,\n      }\n    }); \n```\n\n## Creating UI components\n\nReact Native offers inbuilt UI components and we'll be leveraging these inbuilt components. We will make use of components such as the `FlatList`, `Text`, and so on. \nLet's go ahead to create our project directories and files: \n\n```\n    $ mkdir screens \u0026\u0026 cd screens\n    $ touch Home.js Video.js\n```\n\n``js\n    // screens/Home.js\n    import React, { Component } from 'react';\n    import { StyleSheet, SafeAreaView, FlatList, Text, TouchableOpacity } from 'react-native';\n    import {Actions} from 'react-native-router-flux';\n    const MAX_RESULT = 15;\n    const PLAYLIST_ID = \"PLScC8g4bqD47c-qHlsfhGH3j6Bg7jzFy-\";\n    const API_KEY = \"\u003cYOUR-YOUTUBE-API-KEY\u003e\";\n    export default class Home extends Component\u003c{}\u003e {\n      \n      home(){\n        Actions.home();\n      }\n      watchVideo(video_url){\n        Actions.watchvideo({video_url: video_url});\n      }\n      componentWillMount() {\n        this.fetchPlaylistData();\n      }\n      fetchPlaylistData = async () =\u003e {\n        const response = await fetch(`https://www.googleapis.com/youtube/v3/playlistItems?playlistId=${PLAYLIST_ID}\u0026maxResults=${MAX_RESULT}\u0026part=snippet%2CcontentDetails\u0026key=${API_KEY}`);\n        const json = await response.json();\n        this.setState({ videos: json['items']});\n        console.log(this.state.videos)\n      };\n      constructor(props) {\n        super(props);\n        this.state = {\n          videos: [],\n        }\n      }\n      render() {\n        const videos = this.state.videos;\n        return (\n          \u003cSafeAreaView style={styles.safeArea}\u003e\n                \u003cFlatList\n                  data={this.state.videos}\n                  keyExtractor={(_, index) =\u003e index.toString()}\n                  renderItem={\n                    ({item}) =\u003e \n                    \u003cTouchableOpacity\n                        style={styles.demacate}\n                        onPress={() =\u003e this.watchVideo(item.contentDetails.videoId)}\n                    \u003e\n                    \u003cText \n                      style={styles.item} \n                    \u003e \n                    {item.snippet.title} \n                    \u003c/Text\u003e\n                    \u003c/TouchableOpacity\u003e\n                  }\n                /\u003e\n          \u003c/SafeAreaView\u003e\n        );\n      }\n    }\n    const styles = StyleSheet.create({\n      safeArea: {\n        flex: 1,\n        backgroundColor: '#fff'\n      },\n      demacate: {\n        borderBottomColor: 'blue',\n        borderBottomWidth: 2,\n        borderRadius:10\n      },\n      item: {\n        padding: 10,\n        fontSize: 12,\n        height: 44,\n      },\n    });\n```\n\nThe first thing we do in the `Home.js` file is to import all the necessary components to build the home screen. Like the variable names imply, `MAX_RESULT` is the number of videos we want to return from the youtube API, `PLAYLIST_ID` is a string of the youtube playlist we want to fetch and `API_KEY` will hold our Youtube API access key.\n\nThe `home()` and `watchVideo()` functions will call navigation actions that allow us to navigate from page to page. The `fetchPlaylistData()` is an asynchronous function that allows us to fetch data from the Youtube API and `componentWillMount()` allows us to fetch the async data after the screen is rendered. \n\nThe response data is converted to JSON and stored in the videos state and will be passed to our component during rendering. \n\nIn the `render()` we define a prop that holds data fetched such as video id from our Youtube API and we pass it to the videos page as a `video_url` prop so we don't have to do a network fetch to get the same data on the next screen. \n\nOur `render()` function renders the screen and we use the SafeAreaView component to handle the screens of newer devices such as the iPhone X, XR and higher so the screen doesn't overlap. We use the `Flatlist` component to render our data from the `videos` state using the `renderItem` prop.\n\n```js\n    // screens/Video.js\n    import React, { Component } from 'react';\n    import { StyleSheet, SafeAreaView, View, WebView } from 'react-native';\n    import {Actions} from 'react-native-router-flux';\n    export default class WatchVideo extends Component\u003c{}\u003e {\n      \n      home(){\n        Actions.home();\n      }\n      videos(){\n        Actions.videos();\n      }\n      constructor(props) {\n        super(props);\n        console.log(this.props);\n      }\n      render() {\n        return (\n          \u003cSafeAreaView style={styles.safeArea}\u003e\n              { \n                \u003cWebView\n                  source={{ uri: \"https://www.youtube.com/embed/\"+this.props.video_url}}\n                  startInLoadingState={true} \n                /\u003e\n              }\n          \u003c/SafeAreaView\u003e\n        );\n      }\n    }\n    const styles = StyleSheet.create({\n      safeArea: {\n        flex: 1,\n        backgroundColor: '#fff'\n      }\n    });\n```\n\nIn the `Video.js` file, we also import all the necessary components to build our interface and likewise, create routing actions so we can navigate back to our home screen.\nIn the `render()` function, the data we stored in the `video_url` props is accessed and rendered using the `Webview` video component. The component is customizable and allows us to define the URL source, loaders, and so on. \n\n## Building our app\n\nTo build and compile our code on iOS:\n\n```\n    $ react-native run-ios\n```\n\nTo build and compile our code on Android:\n\n```\n    $ react-native run-android\n```\n\nAfter build is successful, your application should look like:\n\n- Home Screen\n![react-ative-youtube-1](//images.ctfassets.net/1es3ne0caaid/71QEeOooJs8NEECW70GXW2/07781df2b5ac9408900a59da419c7330/react-ative-youtube-1.png)\n\n- Video Screen \n![react-ative-youtube-2](//images.ctfassets.net/1es3ne0caaid/2x9Vny1WUcFHQ9xiywm79D/c1cf04bc40a7228b25f275d1a1dad870/react-ative-youtube-2.png)\n\n## Conclusion\n\nThe YouTube API is robust and allows us to watch videos, get video metadata, and so on. The data can be integrated with any mobile development framework and as seen in OurTube app using React Native.\nOurTube app is in a simple version right now, but you can go ahead to add some more functionalities such as liking and disliking videos, reporting comments, and so on by reading [the Google Developer guide for Youtube](https://developers.google.com/youtube/v3/getting-started) in order to build complex and robust applications.\nThe codebase to this tutorial is available in a [public GitHub repository.](https://github.com/samuelayo/OurTube) Feel free to play around with it.","metaTitle":"Create a Youtube-integrated application using React Native","metaDescription":"Build a basic React Native app. Set up YouTube integration and pull in playlists from Rotten Tomatoes. This tutorial will guide you through React Native basics such as building components and using React Router."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6TNyvQoF2Yo2du5mu3u3XY","type":"Entry","createdAt":"2019-04-23T17:55:06.084Z","updatedAt":"2019-04-23T17:55:06.084Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Writing accessible apps and efficient code with React fragments","url":"accessible-react-fragments","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"55Vy5qUc2Hc2NxBxWerK1T","type":"Entry","createdAt":"2019-03-16T13:13:19.673Z","updatedAt":"2019-03-16T13:13:19.673Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lotanna Nwose","url":"lotanna-nwose","email":"viclotana@gmail.com","twitter":"https://twitter.com/viclotana","github":"https://github.com/viclotana","guestWriter":true}}],"projectRepo":"https://github.com/viclotana/Fragments","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2019-04-23","description":"Learn how to handle nested HTML elements in React using fragments. Understand the benefits of fragments compared to other approaches, and work through a few practical examples.","prerequisite":"You will need React 16.8+ installed on your machine.","content":"we should \u003e **TL;DR:** in this article, you will be introduced to an awesome feature in React called fragments. You will learn why it is important as regards accessibility and how to use it.\n\n\n## Introduction\n\nSometimes while using React, you want to display or return multiple HTML elements in a component. This can be achieved in a number of ways that will be discussed in this post, most of which however can lead to HTML that is not accessible or even to writing non-semantic code. In this article, you will be shown a new feature called fragments in React that lets you do so in a very accessible memory efficient way. You will be taken through a series of illustrations and also code samples to let you properly understand the usefulness and how React fragments came about.\n\n## Achieving accessibility in React\n\nAccessibility on the web is the design of pages, tools and technologies that can be used by everyone. Everyone here includes people with auditory, cognitive, neurological, physical, speech and visual disabilities. Accessibility support is necessary to allow assistive technology like screen readers to interpret web pages and applications. For these technologies to work, developers have to always think and build accessible applications.\n\n\n## Prerequisites \n\nThis article is suited for all levels of expertise using React JS, this includes beginners. This article promises to break down concepts as simply as possible.\nTo be able to follow through in this article’s demonstration you should have:\n\n\n- [Visual Studio Code](https://code.visualstudio.com/download) installed as your integrated development environment. \n- Node version 11.0 or above installed on your machine.\n- Node Package Manager version 6.7 or above (usually ships with Node installation).\n- React version 16.8 or above installed on your machine.\n- Create-react-app installed on your machine\n\nWith these, you are ready to move to setting up a new React project. \nOther things that will be nice-to-haves are:\n\n- A working knowledge of the [React framework and create-react-app (CRA)](https://github.com/facebook/create-react-app) file system at a beginner level.\n- Familiarity with rendering in React will be a plus but not a requirement.\n\n\n## Setting up\n\nWe will go through the process of setting up the development environment and installing all the required dependencies for create-react-app to work.\n\nInstall React globally by running the command below in a terminal:\n\n```\n    npm install -g react\n```\n\nInstall create-react-app globally too with this command below\n\n```\n    npm install -g create-react-app\n```\n\nNavigate to a folder of your choice and create a new React application called `fragments` with the CRA boilerplate by running this command below\n\n```\n    npx create-react-app fragments\n```\n\nOR You can just download an already created new React project [here](https://github.com/viclotana/react_canvas). Unzip the folder and then install all the dependencies with this command:\n\n```\n    npm install\n```\n\nNavigate into the fragments folder and run the new app in development environment like this:\n\n```\n    npm start\n```\n\nOpen the project in VS Code, navigate to the `src` folder and open the `app.js` file. Remove all the code inside the div of the return statement. Your `app.js` file should look like this:\n\n```javascript\n    //  src/App.js\n    import React, { Component } from 'react';\n    import './App.css';\n    class App extends Component {\n     render() {\n      return (\n      \u003cdiv className=\"App\"\u003e\n      \u003c/div\u003e\n      );\n     }\n    }\n    export default App;\n```\n\n## Writing in JSX \n\nCreate a new file, call it `Fragment.js` It will be a React component. Writing in JSX, if you want to return a paragraph of text with a heading in a functional or any React component, you might first think to represent it like this at first:\n\n```javascript\n    // src/Fragment.js\n    import React from 'react'\n    function Fragment() {\n    return (\n    \u003ch2\u003e Learning about fragments \u003c/h2\u003e\n    \u003cp\u003efragments are super amazing\u003c/p\u003e\n    )\n    }\n    export default Fragment\n```\n\nAdd this line to the `App.js`  to import the fragment component in the main app component\n\n```javascript\n    import Fragment from './Fragment';\n```\n\nYou will immediately see some warnings in squeaky red lines saying “Parsing error: Adjacent JSX elements must be wrapped in an enclosing tag” and if you go ahead and save the file and run in the development environment, you will find out the application is broken.\n\n![react-fragments-1](//images.ctfassets.net/1es3ne0caaid/2IMkMbsMZwYNXwtvDSzZx6/77e008d43312c55c9c6ba5d484bb4269/react-fragments-1.png)\n\nThis occurs simply because it is not possible to have more than one parent HTML element in a return statement for JSX. In order to run JSX code and get it compiled, it must have one parent HTML element, and the rest of the elements should be child elements of that parent element. There has been a few ways React developers over time have used to get around this problem, I call them old practises.\n\n\n## Old practises\n\nThese are a few practises usually adopted by React developers to return multiple HTML elements without any parse errors.\n\n\n## The array technique\n\nIn this technique, you wrap the elements you want to return in an array by passing the elements like array elements. That way, your elements will be rendered as you will want them and the application will no longer break.\nCreate a new functional component and call it `ArrayExample.js` . Return the exact logic we had in the first illustration in the return section but this time as array elements of an array.\n\n```javascript\n    // src/ArrayExample.js\n    import React from 'react'\n    function ArrayExample() {\n     return (\n      [\n       \u003ch2\u003eLearning about fragments\u003c/h2\u003e,\n       \u003cp\u003efragments are super amazing\u003c/p\u003e\n      ]\n     )\n    }\n    export default ArrayExample\n```\n\nReference this new component in the DOM by including it and importing it in the main `App.js` file.\n\n```js\n    // src/App.js\n    import React, { Component } from 'react';\n    import './App.css';\n    // import Fragment from './Fragment';\n    import ArrayExample from './ArrayExample';\n    class App extends Component {\n    render() {\n    return (\n    \u003cdiv className=\"App\"\u003e\n    {/* \u003cFragment /\u003e */}\n    \u003cArray /\u003e\n    \u003c/div\u003e\n    );\n    }\n    }\n    export default App;\n```\n\nIn order not to get any errors, make sure to remove the paragraph element in the `Fragment.js` file. The return statement should look like this:\n\n```js\n    // replace the return code block in the Fragment.js with this\n    return (\n    \u003ch2\u003e\n    Learning about fragments\n    \u003c/h2\u003e\n    )\n```\n\nWhen you save all the files, you will see the elements you expected rendered in the browser. Open your browser at [http://localhost:3000/](http://localhost:4200/) and you should see your application like this:\n\n![react-fragments-2](//images.ctfassets.net/1es3ne0caaid/5wwSfiIU7eel6lPF57SMtO/e5a099c5c1d0d2a51be2652ae4dcb976/react-fragments-2.png)\n\n### Drawbacks: inefficient memory management\n\nThe array technique is a good solution but a memory inefficient solution, as it requires rendering extra elements in the DOM. It also requires even more additional syntax to use. If you use your browser developer tools to inspect the application, you will see a console warning that looks like this:\n\n![react-fragments-3](//images.ctfassets.net/1es3ne0caaid/5ij6dr41CgRtjIlAVjW4K2/81d3f6759931ff219e34a1d3f8294473/react-fragments-3.png)\n\nTo make sure you do not get warned again, add unique keys to the individual elements in the array.\n\n```js\n    // src/ArrayExample.js\n    import React from 'react'\n    function ArrayExample() {\n     return (\n      [\n       \u003ch2 key=\"alpha\"\u003e Learning about fragments \u003c/h2\u003e,\n       \u003cp key=\"beta\"\u003e fragments are super amazing \u003c/p\u003e\n      ]\n     )\n    }\n    export default ArrayExample\n```\n\nYou will see the warnings disappear when you save the file. This additional syntax adds to the cumbersome nature of this method and makes it unsustainable and inefficient.\n\n\n## The extra tag technique\n\nAnother solution to returning more than one element without errors is to wrap them in a parent tag. This tag can be a `span` or a `div` tag, most React developers use `div` tags a lot to ensure their code block for a return statement does not lead to errors that break the application. These tags are absolutely do nothing except preventing JSX errors.\n\nCreate a new functional component and call it `Extra.js`. Copy the logic below and paste into the new component.\n\n```js\n    // src/Extra.js\n    import React from 'react'\n    import Lists from './Lists';\n    function Extra() {\n     return (\n      \u003cdiv\u003e\n       \u003ch2\u003e Learning about fragments \u003c/h2\u003e\n       \u003cp\u003eWays to render elements\u003c/p\u003e\n       \u003cul\u003e\n        \u003cLists /\u003e\n       \u003c/ul\u003e\n      \u003c/div\u003e\n     )\n    }\n    \n    export default Extra\n```\n\nCreate another component, call it `Lists.js` where the list will be stored and then imported into the `Extra` component.\n\n```js\n    // src/Lists.js\n    import React from 'react'\n    function Lists() {\n     return (\n      \u003cdiv\u003e\n       \u003cli\u003e1. Array method\u003c/li\u003e\n       \u003cli\u003e2. Extra tag method\u003c/li\u003e\n       \u003cli\u003e3. fragments\u003c/li\u003e\n      \u003c/div\u003e\n     )\n    }\n    export default Lists\n```\n\nReference the `Extra` component in the DOM by including it and importing it in the main `App.js` file.\n\n```js\n    // src/App.js\n    import React, { Component } from 'react';\n    import './App.css';\n    // import Fragment from './Fragment';\n    import Extra from './Extra';\n    \n    class App extends Component {\n     render() {\n      return (\n       \u003cdiv className=\"App\"\u003e\n       {/* \u003cFragment /\u003e */}\n       {/* \u003cArrayExample /\u003e */}\n       \u003cExtra /\u003e\n      \u003c/div\u003e\n      );\n     }\n    }\n    \n    export default App;\n```\n\nWhen you save all the files, you will see the elements as expected rendered in the browser. However, when you inspect the application using the developer tools you will discover that the extra `div` is present in the DOM but more damaging is the `div` between the `ul` tag and the `li` tags. That is not semantic and will not be recognized by an accessibility tool like a screen reader.\n\n![react-fragments-4](//images.ctfassets.net/1es3ne0caaid/4sSXaMGoB3Eg83XNRBK4O9/c774daa3180f9ba525885a1ec4817aee/react-fragments-4.png)\n\nYou can see that after a `ul` tag, the next logical HTML tag to expect is either `li` or a closing `ul` tag. Any other tag will deviate from HTML semantics.\n\n### Drawbacks: accessibility problems\n\nThis is the most popularly used method but it is also the most inaccessible solution. In instances like rendering lists items where we use extra elements like `div` tags are used, it can easily lead to non-semantic HTML. As regards to accessibility, which will be explained later in this post, it is very difficult for screen readers to interpret non-semantic code and so this method, albeit simple is not advisable.\n\n\n## Introducing React fragments \n\nSome months ago, React version 16.2 was released, it shipped with this new feature that helped to address this accessibility problem called fragments. Fragments are like those extra HTML elements we used but they come without all the drawbacks. This means that child nodes can be returned safely without extra nodes added to the DOM. \n\n\n\u003e Fragments let you group a list of children without adding extra nodes to the DOM — [Official Documentation](https://reactjs.org/docs/fragments.html#short-syntax)\n\n\n## Fragment syntax \n\n```js\n    render() {\n      return (\n        \u003cReact.fragment\u003e\n          \u003cChildA /\u003e\n          \u003cChildB /\u003e\n          \u003cChildC /\u003e\n        \u003c/React.fragment\u003e\n      );\n    }\n```\n\nThere is also a shorthand syntax you might have noticed in some of my React tutorials, they look like this:\n\n```js\n    render() {\n      return (\n        \u003c\u003e\n          \u003cChildA /\u003e\n          \u003cChildB /\u003e\n          \u003cChildC /\u003e\n        \u003c\u003e\n      );\n    }\n```\n\n## Applications of fragments \n\nIf you take the very first illustration we addressed which is `Fragment.js` and wrap the elements in a React fragment, you will see no errors and they will compile without adding the fragment node to the DOM.\n\n```js\n    // src/Fragment.js\n    import React from 'react'\n    function Fragment() {\n     return (\n      \u003c\u003e\n       \u003ch2\u003e Learning about fragments \u003c/h2\u003e\n       \u003cp\u003efragments are super amazing\u003c/p\u003e \n      \u003c/\u003e\n     )\n    }\n    export default Fragment\n```\n\nSave the file and take a look at the element inspection in the developer tools, you will notice the beautiful power of fragments.\n\n![react-fragments-5](//images.ctfassets.net/1es3ne0caaid/3xBWE1Ja5HEB2PQpjCFoVD/5551282a11d485c560a3e1533ff81435/react-fragments-5.png)\n\nThe elements appear in the DOM exactly as they are in the presentation and no longer contain any extra elements. Fragments can be used to improve efficiency, better manage memory and reduce cumbersome code structures.\n\n\n## Keyed fragments \n\nReact fragments can be returned by callback functions and they can have a `key` attribute. Copy the code below to the `Fragment.js` file\n\n```js\n    // src/Fragment.js\n    import React from 'react'\n    function Fragment() {\n    const artists = [\n    {id: '1', name: 'Davido', genre: 'afro pop'},\n    {id: '2', name: 'Skepta', genre: 'afrobeats'},\n    {id: '3', name: 'Burna Boy', genre: 'afro pop'},\n    {id: '4', name: 'Mr. Eazi', genre: 'afro pop'},\n    {id: '5', name: 'Stormzy', genre: 'afro pop'},\n    {id: '6', name: 'Wizkid', genre: 'afro pop'}\n    ]\n    return (\n    \u003c\u003e\n    \u003ch1\u003eUK Urban Artists Chart\u003c/h1\u003e\n    {\n    artists.map( artist =\u003e (\n    \u003cReact.Fragment key={artist.id}\u003e\n    \u003ch2\u003e{artist.id}: {artist.name}\u003c/h2\u003e\n    \u003c/React.Fragment\u003e\n    ))\n    }\n    \u003c/\u003e\n    )\n    }\n    export default Fragment\n```\n\nThe `key` attribute is the only attribute that can be passed to React fragments at the time of writing this tutorial. The React team however promised to look into adding support for more attributes like event handlers. \nMake sure to uncomment the fragment import in the `App.js` file \n\n```js\n    // src/App.js\n    import React, { Component } from 'react';\n    import './App.css';\n    import Fragment from './Fragment';\n    // import ArrayExample from './ArrayExample';\n    // import Extra from './Extra';\n    \n    class App extends Component {\n     render() {\n      return (\n       \u003cdiv className=\"App\"\u003e\n        \u003cFragment /\u003e \n       \u003c/div\u003e\n      );\n     }\n    }\n    \n    export default App;\n```\n\nSave all the files and your application should look like this:\n\n![react-fragments-6](//images.ctfassets.net/1es3ne0caaid/4BvpSiak0HtcK2TWtLFZMJ/5ffee014d72366c4f305e95dfa6d6df1/react-fragments-6.png)\n\n## Conclusion\n\nIn this tutorial, you have been introduced to React fragments, why they are important and how they are used. You have also seen how they contribute to ensuring we keep building accessible applications. The coming of fragments is one deliberate step towards achieving total accessibility championed by React. You can find my how to make your React application more accessible [article here](https://blog.bitsrc.io/achieving-accessibility-in-react-applications-d762f8f2a3e7). The complete code to this tutorial can be found on [GitHub here](https://github.com/viclotana/Fragments). Try using fragments today.","metaTitle":"Writing accessible code with React fragments","metaDescription":"Learn how to handle nested HTML elements in React using fragments. Understand the benefits of fragments compared to other approaches, and work through a few practical examples."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2OMB4z5byaHkTcNA6V3AEV","type":"Entry","createdAt":"2019-04-03T18:02:47.712Z","updatedAt":"2019-04-03T18:02:47.712Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"End to end encryption in Node.js with Pusher Channels","url":"end-to-end-encryption-node","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Khmrnzj5moO4S6WOYOGAo","type":"Entry","createdAt":"2018-11-14T14:35:55.702Z","updatedAt":"2019-03-03T15:15:59.601Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lanre Adelowo","url":"lanre-adelowo","email":"adelowomailbox@gmail.com","twitter":"https://twitter.com/alanreadelowo","github":"https://github.com/adelowo","guestWriter":true}}],"projectRepo":"https://github.com/adelowo/pusher-encrypted-channels-node","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2019-04-03","description":"Learn how Pusher Channels support varying encryption levels, from public to fully encrypted. Build a simple demo using Node, sending fully encrypted messages to a message feed.","prerequisite":"You will need Node 8+ and an OpenSSL tool installed on your machine.","content":"Privacy is a hot topic this days. Who has access to what and who can read my conversation with a friend. [Pusher Channels](https://pusher.com/channels) offers three kinds of channels:\n\n- Public\n- Private\n- Encrypted\n\nBasically, all three perform the same functions - flexible pub/sub messaging and tons of other cool features. But there are few differences between them. Public channels do not require client-server authentication in order to subscribe to events. Private channels take it a step further by requiring client-server authentication. Encrypted channels build on top of private channels by introducing security in the form of encrypted data. \n\nBelow is a screenshot of the **Debug Console** showing an event published on a public channel.\n\n![node-e2e-encryption-1](//images.ctfassets.net/1es3ne0caaid/5zoI0MfCCjmhDYo7ITM50v/d136bc1f798e483623791e8a0f4e4a63/node-e2e-encryption-1.png)\n\nBelow is a screenshot of the **Debug Console** showing an event published on an encrypted channel.\n\n![node-e2e-encryption-2](//images.ctfassets.net/1es3ne0caaid/4SZabcpm2h4lXIZNFpr2xr/4efcec0a8a9904e516ba47fc7878a029/node-e2e-encryption-2.png)\n\n\nKindly take a look at the images above and spot the difference. Seen any yet? In the first image which shows the **Debug Console** for a public channel, you can see the data being sent to Pusher Channels contains some fields - `title`, `content` and `createdAt`. Now take a look at the second image, you will notice those fields are no longer present but instead you have a bunch of non-human readable content your application obviously didn’t create.  The field called `ciphertext` is what the data you sent to Pusher Channels was converted to. The word `ciphertext` outside this discourse refers to encrypted and/or garbled data.\n\n\n## Understanding encrypted channels\n\nAs depicted above, an advantage of an encrypted channel is the ability to send messages only the server SDK and any of your connected clients can read. No one else - including Pusher -  will be able to read the messages.\n\n\u003e Remember that a client has to go through the authentication process too.\n\nPusher Channels uses one of the current top encryption algorithms available and that is [Secretbox](https://nacl.cr.yp.to/secretbox.html). On the server side, the application author is meant to provide an encryption key to be used for the data encryption. This encryption key never gets to Pusher servers, which is why you are the only one that can read messages in an encrypted channel.\n\nBut a question. If the encryption key never gets to Pusher servers, how is a connected client able to subscribe to an event in an encrypted channel and read/decrypt the message? The answer resides in the authentication process. During authentication, a shared secret key is generated based off the master encryption key and the channel name. The generated shared secret key will be used to encrypt the data before being offloaded to Pusher Channels. \n\nThe shared secret is also sent as part of a successful authentication response as the client SDK will need to store it as it will be used for decrypting encrypted messages it receives. Again notice that since the encryption key never leaves your server, there is no way Pusher or any other person can read the messages if they don’t go through the authentication process - which is going to be done by the client side SDK.\n\n\n\u003e Note that this shared secret is channel specific. For each channel subscribed to, a new shared secret is generated.\n\nHere is a sample response:\n\n\n```json    \n    {\n      \"auth\": \"3b65aa197f334949f0ef:ffd3094d43e1bb21d5eb849c3debcbba0f7dd32bddeb0bb7dd8441516029853d\",\n      \"channel_data\": {\n        \"user_id\": \"10\",\n        \"user_info\": {\n          \"random\": \"random\"\n        }\n      },\n      \"shared_secret\": \"oB4frIyBUiYVzbUSBFCBl7U5BxzW8ni6wIrO4UaYIeo=\"\n    }\n```     \n\nApart from privacy and security, another benefit encrypted channels provide is message authenticity and protection against forgery. So there is maximum guarantee that whatever message is being received was published by someone who has access to the encryption key.\n\n\n## Implementing encrypted channels\n\nTo show encrypted channels in practice, we will build a live feed application. The application will consist of a server and client. The server will be written in Node. \n\nBefore getting started, it will be nice to be aware of some limitations imposed by an encrypted channel. They are:\n\n- Channel name(s) must begin with `private-encrypted-`. Examples include `private-encrypted-dashboard` or `private-encrypted-grocery-list`.  If you provide an encryption key but fail to follow the naming scheme, your data will not be encrypted.\n- [Client events](https://pusher.com/docs/client_api_guide/client_events#trigger-events) cannot be triggered\n- Channel and event names are not encrypted. This is for good reasons as events need to be dispatched to right clients and making sure an event in the Pusher Channels namespace  - `pusher:` - cannot be used.\n\nBefore proceeding, you will need to create a new directory called `pusher-encrypted-channels-node` . It can be done by issuing the following command in a terminal:\n\n\n```    \n    $ mkdir pusher-encrypted-channels-node\n```    \n\n\n## Prerequisites\n\n\n- Node `\u003e=8.0`\n- A [Pusher account](https://dashboard.pusher.com)\n- OpenSSL tool.\n\n\n\u003e If you are a Windows user, please note that you can make use of Git Bash since it comes with the OpenSSL toolkit.\n\n\n## Building the server\n\nThe first thing to do is to create a [Pusher Channels](https://pusher.com/channels) account if you don’t have one already. You will need to take note of your app keys and secret as we will be using them later on in the tutorial.\n\nIn the `pusher-encrypted-channels-node` directory, you will need to create another directory called `server`.\n\nThe next step of action is to create a `.env` file to contain the secret and key gotten from the dashboard. You should paste in the following contents:\n\n```\n    // pusher-encrypted-channels-node/server/variable.env\n    PUSHER_APP_ID=\"PUSHER_APP_ID\"\n    PUSHER_APP_KEY=\"PUSHER_APP_KEY\"\n    PUSHER_APP_SECRET=\"PUSHER_APP_SECRET\"\n    PUSHER_APP_CLUSTER=\"PUSHER_APP_CLUSTER\"\n    PUSHER_APP_SECURE=\"1\"\n    PUSHER_CHANNELS_ENCRYPTION_KEY=\"PUSHER_CHANNELS_ENCRYPTION_KEY\"\n```    \n\n`PUSHER_CHANNELS_ENCRYPTION_KEY`  will be the master encryption key used to generate the shared secret and it should be difficult to guess. It is also required to be a 32 byte encryption key. You can generate a suitable encryption key with the following command:\n\n\n```    \n    $ openssl rand -base64 24\n```    \n\nYou will also need to install some dependencies - the Pusher NodeJS SDK , Express and another for parsing the `variable.env` file you previously created. You can grab those dependencies by running:\n\n\n```    \n    $ npm init -y\n    $ npm install express body-parser cors dotenv pusher -S\n```    \n\nYou will need to create an `index.js` file and paste in the following content:\n\n```javascript\n    // pusher-encrypted-channels-node/server/index.js\n    \n    require('dotenv').config({ path: 'variable.env' });\n    \n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const cors = require('cors');\n    const Pusher = require('pusher');\n    \n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APP_ID,\n      key: process.env.PUSHER_APP_KEY,\n      secret: process.env.PUSHER_APP_SECRET,\n      cluster: process.env.PUSHER_APP_CLUSTER,\n      useTLS: true,\n      encryptionMasterKey: process.env.PUSHER_CHANNELS_ENCRYPTION_KEY,\n    });\n    \n    const app = express();\n    \n    app.use(cors());\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: true }));\n    \n    const titles = [];\n    \n    app.post('/pusher/auth', function(req, res) {\n      var socketId = req.body.socket_id;\n      var channel = req.body.channel_name;\n      var auth = pusher.authenticate(socketId, channel);\n      res.send(auth);\n    });\n    \n    app.post('/feed', (req, res) =\u003e {\n      const title = req.body.title;\n      const body = req.body.content;\n    \n      if (title === undefined) {\n        res\n          .status(400)\n          .send({ message: 'Please provide your post title', status: false });\n        return;\n      }\n    \n      if (body === undefined) {\n        res\n          .status(400)\n          .send({ message: 'Please provide your post body', status: false });\n        return;\n      }\n    \n      if (title.length \u003c= 5) {\n        res.status(400).send({\n          message: 'Post title should be more than 5 characters',\n          status: false,\n        });\n        return;\n      }\n    \n      if (body.length \u003c= 6) {\n        res.status(400).send({\n          message: 'Post body should be more than 6 characters',\n          status: false,\n        });\n        return;\n      }\n    \n      const index = titles.findIndex(element =\u003e {\n        return element === title;\n      });\n    \n      if (index \u003e= 0) {\n        res\n          .status(400)\n          .send({ message: 'Post title already exists', status: false });\n        return;\n      }\n    \n      titles.push(title.trim());\n      pusher.trigger('private-encrypted-feeds', 'items', {\n        title: title.trim(),\n        body: body.trim(),\n        time: new Date(),\n      });\n    \n      res\n        .status(200)\n        .send({ message: 'Post was successfully created', status: true });\n    });\n    \n    app.set('port', process.env.PORT || 5200);\n    const server = app.listen(app.get('port'), () =\u003e {\n      console.log(`Express running on port ${server.address().port}`);\n    });\n```    \n\nIn the above, we create an HTTP server with two endpoints:\n\n\n- `/pusher/auth` for authentication of client SDKs.\n- `/feed` for the addition of a new feed item.\n\n\n\u003e Note that the feed items will not be stored in a persistent database but in memory instead\n\nYou should be able to run the server now. That can be done with:\n\n\n```    \n    $ node index.js\n```    \n\n\n## Building the client\n\nThe client is going to contain three pages:\n\n\n- A dashboard page.\n- A form page for adding new feed items.\n- A feed page for displaying feed items in realtime as received from the encrypted channel.\n\nYou will need to create a directory called `client`. That can be done with:\n\n\n```    \n    $ mkdir client\n```    \n\nTo get started, we will need to build the form page to allow new items to be added. You will need to create a file called `new.html` with:\n\n\n```    \n    $ touch new.html\n```    \n\nIn the newly created `new.html` file, paste the following content:\n\n```html\n    // pusher-encrypted-channels-node/client/new.html\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003ctitle\u003ePusher realtime feed\u003c/title\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /\u003e\n        \u003clink rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\" /\u003e\n        \u003cbase href=\"/\" /\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.2/css/bulma.min.css\"\u003e\n    \u003cstyle\u003e\n    .hidden { display: none }\n    \u003c/style\u003e\n      \u003cbody\u003e\n          \u003csection class=\"section\"\u003e\n              \u003cdiv class=\"container\"\u003e\n    \u003cdiv class=\"columns\"\u003e\n      \u003cdiv class=\"column is-5\"\u003e\n        \u003ch3 class=\"notification\"\u003eCreate a new post\u003c/h3\u003e\n        \u003cdiv class=\"notification is-success hidden\" id=\"success\"\u003e\u003c/div\u003e\n        \u003cdiv class=\"is-danger notification hidden\" id=\"error\"\u003e\u003c/div\u003e\n        \u003cform id=\"feed-form\"\u003e\n          \u003cdiv class=\"field\"\u003e\n            \u003clabel class=\"label\"\u003eTitle : \u003c/label\u003e\n            \u003cdiv class=\"control\"\u003e\n              \u003cinput\n                class=\"input\"\n                type=\"text\"\n                placeholder=\"Post title\"\n                name=\"title\"\n                id=\"title\"\n              /\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n    \n          \u003cdiv\u003e\u003clabel\u003eMessage: \u003c/label\u003e\u003c/div\u003e\n          \u003cdiv\u003e\n            \u003ctextarea\n              rows=\"10\"\n              cols=\"70\"\n              name=\"content\"\n                 id=\"content\"\n            \u003e\u003c/textarea\u003e\n          \u003c/div\u003e\n    \n    \n    \u003cbutton id=\"submit\" class=\"button is-info\"\u003e\n      Send\n    \u003c/button\u003e\n        \u003c/form\u003e\n              \u003c/div\u003e\n      \u003cdiv class=\"is-7\"\u003e\u003c/div\u003e\n           \u003c/section\u003e\n      \u003c/body\u003e\n      \u003cscript src=\"app.js\"\u003e\u003c/script\u003e\n    \u003c/html\u003e\n```    \n\nThis is as simple as can be. We reference the Bulma CSS library, we create a form with an input and text field. Finally we link to a non-existent file called `app.js` - we will create that in a bit.\n\nTo view what this file looks like, you should navigate to the `client` directory and run the following command:\n\n\n```    \n    $ python -m http.server 8000\n```    \n\n\n\u003e Here I used Python’s inbuilt server but you are free to use whatever.  For example you can also make use of `http-server` which can be installed via `npm i http-server` after which you should run `http-server`.\n\nYou should visit `localhost:8000/new.html` . You should be presented with something similar to the image below:\n\n![node-e2e-encryption-3](//images.ctfassets.net/1es3ne0caaid/7rU2SpAF4G2TQeXMaAT7Ac/57b8b26c5e916d3b4126aca0d5159a9f/node-e2e-encryption-3.png)\n\nAs said earlier, we linked to a non-existent file `app.js`, we will need to create it and fill it with some code. Create the `app.js` file with:\n\n\n```    \n    $ touch app.js\n```    \n\nIn the newly created file, paste the following:\n\n```javascript\n    // pusher-encrypted-channels-node/client/app.js\n    \n    (function() {\n      const submitFeedBtn = document.getElementById('feed-form');\n      const isDangerDiv = document.getElementById('error');\n      const isSuccessDiv = document.getElementById('success');\n    \n      if (submitFeedBtn !== null) {\n        submitFeedBtn.addEventListener('submit', function(e) {\n          isDangerDiv.classList.add('hidden');\n          isSuccessDiv.classList.add('hidden');\n          e.preventDefault();\n          const title = document.getElementById('title');\n          const content = document.getElementById('content');\n    \n          if (title.value.length === 0) {\n            isDangerDiv.classList.remove('hidden');\n            isDangerDiv.innerHTML = 'Title field is required';\n            return;\n          }\n    \n          if (content.value.length === 0) {\n            isDangerDiv.classList.remove('hidden');\n            isDangerDiv.innerHTML = 'Content field is required';\n            return;\n          }\n    \n          fetch('http://localhost:5200/feed', {\n            method: 'POST',\n            body: JSON.stringify({ title: title.value, content: content.value }),\n            headers: {\n              'Content-Type': 'application/json',\n            },\n          }).then(\n            function(response) {\n              if (response.status === 200) {\n                isSuccessDiv.innerHTML = 'Feed item was successfully added';\n                isSuccessDiv.classList.remove('hidden');\n                setTimeout(function() {\n                  isSuccessDiv.classList.add('hidden');\n                }, 1000);\n                return;\n              }\n    \n              response.json().then(data =\u003e {\n                isDangerDiv.innerHTML = data.message;\n                isDangerDiv.classList.remove('hidden');\n              });\n            },\n            function(error) {\n              isDangerDiv.innerHTML = 'Could not create feed item';\n              isDangerDiv.classList.remove('hidden');\n            }\n          );\n        });\n      }\n    })();\n```    \n\nIn the above, we validate the form whenever the **Send** button is clicked. If the form contains valid data, it is sent to the Node server for processing. The server will store it and trigger a message to Pusher Channels. \n\nGo ahead and submit the form. If successful and you are on the **Debug Console**, you will notice a JSON that contains a nonce and cipher text - the encrypted information. A visual reprensentation is presented below: \n\n![node-e2e-encryption-4](//images.ctfassets.net/1es3ne0caaid/5LhTkqFzdCXBbWSc5f7PzX/495e7653384fd80ad448944881e62b29/node-e2e-encryption-4.png)\n\nThe next point of action will be to create the feeds page so entries can be viewed in realtime. You will need to create a file called `feed.html`. That can be done with:\n\n\n```    \n    $ touch feed.html\n```    \n\nIn the new file, paste the following HTML code:\n\n```html\n    // pusher-encrypted-channels-node/client/feed.html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003ctitle\u003ePusher realtime feed\u003c/title\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /\u003e\n        \u003clink rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\" /\u003e\n        \u003cbase href=\"/\" /\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.2/css/bulma.min.css\"\u003e\n      \u003cbody\u003e\n          \u003csection class=\"section\"\u003e\n              \u003cdiv class=\"container\"\u003e\n           \u003ch1 class=\"notification is-info\"\u003eYour feed\u003c/h1\u003e\n    \u003cdiv class=\"columns\"\u003e\n      \u003cdiv class=\"column is-7\"\u003e\n        \u003cdiv id=\"feed\"\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n              \u003c/div\u003e\n           \u003c/section\u003e\n      \u003c/body\u003e\n      \u003cscript src=\"https://js.pusher.com/4.3/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.1.0/handlebars.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"app.js\"\u003e\u003c/script\u003e\n    \u003c/html\u003e\n```    \n\nThis page is basically empty. It will be updated by the Channels client SDK as it receives data. We are linking to the Pusher Channels client SDK and Handlebars. Handlebars is used to compile templates we will inject into the page. \n\nTo be able to receive and update the feeds page with data the `app.js` file has to be updated to make use of Pusher Channels. In `app.js` , append the following code:\n\n```javascript\n    // pusher-encrypted-channels-node/client/app.js\n    \n    // Sample template to be injected\n    // below the code we already have in this file\n      const tmpl = `\n          \u003cdiv class=\"box\"\u003e\n            \u003carticle class=\"media\"\u003e\n              \u003cdiv class=\"media-left\"\u003e\n                \u003cfigure class=\"image is-64x64\"\u003e\n                  \u003cimg src=\"https://bulma.io/images/placeholders/128x128.png\" alt=\"Image\" /\u003e\n                \u003c/figure\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"media-content\"\u003e\n                \u003cdiv class=\"content\"\u003e\n                  \u003cp\u003e\n                    \u003cstrong\u003e{{title}}\u003c/strong\u003e\n                    \u003csmall\u003e{{time}}\u003c/small\u003e \u003cbr /\u003e\n                    {{body}}\n                  \u003c/p\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/article\u003e\n          \u003c/div\u003e\n    `;\n    \n      const APP_KEY = 'PUSHER_APP_KEY';\n      const APP_CLUSTER = 'PUSHER_APP_CLUSTER';\n    \n      const pusher = new Pusher(APP_KEY, {\n        cluster: APP_CLUSTER,\n        authEndpoint: 'http://localhost:5200/pusher/auth',\n      });\n    \n      const channel = pusher.subscribe('private-encrypted-feeds');\n      const template = Handlebars.compile(tmpl);\n      const feedDiv = document.getElementById('feed');\n    \n      channel.bind('items', function(data) {\n        console.log(data);\n        const html = template(data);\n    \n        const divElement = document.createElement('div');\n        divElement.innerHTML = html;\n    \n        feedDiv.appendChild(divElement);\n      });\n```    \n\n\n\u003e Remember to replace both `PUSHER_CLUSTER` and `PUSHER_KEY` with your credentials\n\nWith the addition above, the entire `app.js` should look like:\n\n```javascript\n    // pusher-encrypted-channels-node/client/app.js\n    \n    (function() {\n      const submitFeedBtn = document.getElementById('feed-form');\n      const isDangerDiv = document.getElementById('error');\n      const isSuccessDiv = document.getElementById('success');\n    \n      if (submitFeedBtn !== null) {\n        submitFeedBtn.addEventListener('submit', function(e) {\n          isDangerDiv.classList.add('hidden');\n          isSuccessDiv.classList.add('hidden');\n          e.preventDefault();\n          const title = document.getElementById('title');\n          const content = document.getElementById('content');\n    \n          if (title.value.length === 0) {\n            isDangerDiv.classList.remove('hidden');\n            isDangerDiv.innerHTML = 'Title field is required';\n            return;\n          }\n    \n          if (content.value.length === 0) {\n            isDangerDiv.classList.remove('hidden');\n            isDangerDiv.innerHTML = 'Content field is required';\n            return;\n          }\n    \n          fetch('http://localhost:5200/feed', {\n            method: 'POST',\n            body: JSON.stringify({ title: title.value, content: content.value }),\n            headers: {\n              'Content-Type': 'application/json',\n            },\n          }).then(\n            function(response) {\n              if (response.status === 200) {\n                isSuccessDiv.innerHTML = 'Feed item was successfully added';\n                isSuccessDiv.classList.remove('hidden');\n                setTimeout(function() {\n                  isSuccessDiv.classList.add('hidden');\n                }, 1000);\n                return;\n              }\n    \n              response.json().then(data =\u003e {\n                isDangerDiv.innerHTML = data.message;\n                isDangerDiv.classList.remove('hidden');\n              });\n            },\n            function(error) {\n              isDangerDiv.innerHTML = 'Could not create feed item';\n              isDangerDiv.classList.remove('hidden');\n            }\n          );\n        });\n      }\n    \n      const tmpl = `\n          \u003cdiv class=\"box\"\u003e\n            \u003carticle class=\"media\"\u003e\n              \u003cdiv class=\"media-left\"\u003e\n                \u003cfigure class=\"image is-64x64\"\u003e\n                  \u003cimg src=\"https://bulma.io/images/placeholders/128x128.png\" alt=\"Image\" /\u003e\n                \u003c/figure\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"media-content\"\u003e\n                \u003cdiv class=\"content\"\u003e\n                  \u003cp\u003e\n                    \u003cstrong\u003e{{title}}\u003c/strong\u003e\n                    \u003csmall\u003e{{time}}\u003c/small\u003e \u003cbr /\u003e\n                    {{body}}\n                  \u003c/p\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/article\u003e\n          \u003c/div\u003e\n    `;\n    \n      const APP_KEY = 'PUSHER_APP_KEY';\n      const APP_CLUSTER = 'PUSHER_APP_CLUSTER';\n    \n      const pusher = new Pusher(APP_KEY, {\n        cluster: APP_CLUSTER,\n        authEndpoint: 'http://localhost:5200/pusher/auth',\n      });\n    \n      const channel = pusher.subscribe('private-encrypted-feeds');\n      const template = Handlebars.compile(tmpl);\n      const feedDiv = document.getElementById('feed');\n    \n      channel.bind('items', function(data) {\n        console.log(data);\n        const html = template(data);\n    \n        const divElement = document.createElement('div');\n        divElement.innerHTML = html;\n    \n        feedDiv.appendChild(divElement);\n      });\n    })();\n```    \n\nYou can go ahead to open the `feed.html` page on a tab and `new.html` in another. Watch closely as whatever data you submit in `new.html` appears in `feed.html`. You can also keep an eye on the **Debug Console** to make sure all data is encrypted.\n\nTo make this app a little more polished, add an `index.html` page. You can find the source code at the accompanying [GitHub repository](https://github.com/adelowo/pusher-encrypted-channels-node) of this tutorial.\n\n\n## Conclusion\n\nIn this tutorial, I introduced you to a lesser known feature of Pusher Channels - end to end encryption with encrypted channels. We also built an application that uses encrypted channels instead of the regular public channels you might be used to. To learn more about encrypted channels, kindly visit its [documentation](https://pusher.com/docs/client_api_guide/client_encrypted_channels).\n\nAs always, the entire code for this tutorial can be found on [GitHub](https://github.com/adelowo/pusher-encrypted-channels-node).","metaTitle":"End to end encryption in Node.js with Pusher Channels","metaDescription":"Learn how Pusher Channels support varying encryption levels, from public to fully encrypted. Build a simple demo using Node, sending fully encrypted messages to a message feed."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3gf9alVghihS36meGPMwy5","type":"Entry","createdAt":"2019-04-02T18:15:31.049Z","updatedAt":"2019-04-02T18:15:31.049Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live subscription count down with Angular","url":"live-countdown-angular","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"38Gip5IBCgiiy4AYeeyyqG","type":"Entry","createdAt":"2018-03-04T19:48:48.360Z","updatedAt":"2018-03-04T19:48:48.360Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Gideon Onwuka","url":"gideon-onwuka","email":"dongidomed@gmail.com","twitter":"https://twitter.com/gideon_onwuka","github":"https://github.com/dongido001","guestWriter":true}}],"projectRepo":"https://github.com/dongido001/subscription-count-down","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2019-04-02","description":"Use Angular 7, Node and Channels to build a live subscription countdown. The app features two interfaces: a signup dashboard, and a countdown view, showing how many places are left. The count decreases by one with every signup.","prerequisite":"You will need Node 8+ and the Angular CLI installed on your machine.","content":"\nIn this tutorial, I will walk you through how you can add a realtime subscription count down functionality to your Angular application. In the app, we’ll have a page that displays the subscribers status, that is, the number of slots left. Then we will have another page for users to register themselves. Once the number of users that are registered is equal to the target of users that we want, then we close the registration in realtime.\n\nAt times, we need to present things to our users in a realtime manner so they know beforehand when things tend to happen. Consider that we are building an app where there are limited resources and we need maybe a limited amount of user. In such cases, It’s a better idea to let the user know what is happening in realtime. That is showing the user the slots that are remaining.  \n\nHere is a preview of what we are going to build:\n\n![angular-sub-count-demo-1](//images.ctfassets.net/1es3ne0caaid/39TIM9HVCx9anxoFhZBQbA/f5f85e0c34a157fb563a2adfca5ade6a/angular-sub-count-demo-1.gif)\n\n## Prerequisite\n\nYou are required to have a basic knowledge of the following technologies to be able to follow along with this tutorial comfortably:\n\n- JavaScript\n- [Angular](https://angular.io/)\n- [Node.js](https://nodejs.org/) version 8.** or greater\n- [Channels](https://pusher.com/channels) for realtime functionality\n- [Express](https://expressjs.com/) for the Node server\n- [TypeScript](https://www.typescriptlang.org/)\n\n\n## Setting up\n\nLet’s get your system ready. First check that you have Node installed by typing the below command in a terminal on your system:\n\n```\n    $ node --version\n```\n\nThe above command should print out the version of Node you have installed. If otherwise, you don’t have Node, visit the [Node.js](https://nodejs.org/)’s website and install the latest version of Node to your system.\n\nNext, let’s install the Angular [CLI](https://cli.angular.io/). Angular provides a CLI that makes scaffolding of new Angular project and also working with Angular easier.\n\nInstall the Angular CLI globally to your system if you don’t have it installed already by executing the below command to a terminal on your system.\n\n```\n    $ npm install -g @angular/cli\n```\n\nIf that was successful, you should now have the Angular command available globally on your system as `ng`.\n\nNow use the Angular CLI command to create a new Angular project:\n\n```\n    $ ng new subscription-count-down\n```\n\nChoose **yes** for the prompt that asks if you **Would like to add Angular routing** and choose **CSS** for the stylesheet format. Then give it some minute to finalize the process.\n\n![angular-sub-count-options](//images.ctfassets.net/1es3ne0caaid/75Q9lcSssR1qGcTv8U4PY3/dc2d200c9fb3dddb61fef9f35ef839b1/angular-sub-count-options.png)\n\nFinally, cd into the newly created project and start up the app:\n\n```\n    $ cd subscription-count-down\n    $ ng serve --open\n```\n\nThe app should now be available at [http://localhost:4200](http://localhost:42000) displaying a default Angular page like below:\n\n![angular-sub-count-landing-page](//images.ctfassets.net/1es3ne0caaid/5FFTqx0gD0F7lgNwWduSm1/ec42abd797b1ebf19a60ca0f8ec48a77/angular-sub-count-landing-page.png)\n\nThe  `src/app/app.component.ts` file is the default component file that renders the page above.\n\n## Getting your Pusher keys\n\nWe’ll be using [Channels](https://pusher.com/channels)’s pub/sub messaging feature to add realtime functionality to our app. The next thing we’ll do is to get our Channels API keys.\n\nHead over to [Channels](https://pusher.com/channels) website and create a free account if you don’t have one already. Once you are logged into your [Dashboard](https://dashboard.pusher.com/), create a new app and get the API keys of the app. \n\nThe keys are in this format:\n\n```\n    appId=\u003cappId\u003e\n    key=\u003ckey\u003e\n    secret=\u003csecret\u003e\n    cluster=\u003ccluster\u003e\n```\n\nTake note of these keys because we’ll be making use of them soon.\n\nNext, add the API key to the environment file so we can reference it from other files when we need it by replacing the content with below:\n\n```typescript\n    // src/environments/environment.ts\n    \n    export const environment = {\n      production: false,\n      apiUrl: 'http://localhost:3000',\n      PUSHER_API_KEY: '\u003cPUSHER_API_KEY\u003e',\n      PUSHER_API_CLUSTER: '\u003cPUSHER_APP_CLUSTER\u003e'\n    };\n```\n\nMake sure to replace `\u003cPUSHER_API_KEY\u003e` and `\u003cPUSHER_APP_CLUSTER\u003e` placeholders with your correct API details.\n\nIn the object file above, the `apiUrl` property is the URL where our Node server will be running on which we’ll be creating later on.\n\nFinally, add the pusher client SDK to the Angular app:\n\n```\n    $ npm install pusher-js\n```\n\n\u003e You should run the command while in the root folder of the project from a command line.\n\n\n## Creating the Node server\n\nWe need a server to be able to trigger events to Channels and also for creating and storing users. For the sake of brevity, we’ll use SQLite for our database. And we’ll be using Node for our server.\n\nTo set up a Node server, open up a new terminal, then run the following command in your terminal:\n\n```\n    # Create a new folder\n    $ mkdir subscription-count-down-server\n    \n    # Navigate to the folder\n    $ cd subscription-count-down-server\n    \n    # Create the Node entry file\n    $ touch app.js\n    \n    # Create a package.js file\n    $ touch package.json\n    \n    # Create the database file\n    $ touch app.db\n    \n    # Create the environment file for holding sensitive data\n    $ touch .env\n```\n\nThese are the basic files we will need for the Node server. \n\nNow add to the `package.json` file the necessary dependencies for the app:\n\n```json\n    {\n      \"name\": \"count-down-server\",\n      \"version\": \"1.0.0\",\n      \"description\": \"Count Down Server\",\n      \"main\": \"app.js\",\n      \"scripts\": {\n        \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\",\n        \"serve\": \"node app.js\"\n      },\n      \"keywords\": [\n        \"Node\",\n        \"Count-Down\",\n        \"Pusher\"\n      ],\n      \"author\": \"Onwuka Gideon\",\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"body-parser\": \"^1.18.3\",\n        \"cors\": \"^2.8.5\",\n        \"dotenv\": \"^6.2.0\",\n        \"express\": \"^4.16.4\",\n        \"pusher\": \"^2.2.0\",\n        \"sqlite3\": \"^4.0.6\"\n      }\n    }\n```\n\nNext, add your Channels key to the `.env` file:\n\n```\n    PUSHER_APP_ID=\u003cappId\u003e\n    PUSHER_APP_KEY=\u003ckey\u003e\n    PUSHER_APP_SECRET=\u003csecret\u003e\n    PUSHER_APP_CLUSTER=\u003ccluster\u003e\n```\n\nMake sure to replace `\u003cappId\u003e`, `\u003ckey\u003e`, `\u003csecret\u003e`, and `\u003ccluster\u003e` placeholders with your correct API details.\n\nNow import the dependencies we added earlier to the `app.js` file:\n\n```javascript\n    // app.js\n    \n    require('dotenv').config()\n    \n    const express = require('express')\n    const cors = require('cors')\n    const bodyParser = require('body-parser')\n    const sqlite3 = require('sqlite3').verbose();\n    const Pusher = require('pusher');\n```\n\nThen, set up [express](https://expressjs.com/), which is a Node.js web application framework for building web apps. \n\n```javascript\n    // app.js\n    \n    // [...]\n    \n    const app = express()\n    const port = 3000\n    \n    app.use(cors())\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: true }));\n    \n    app.get('/', (req, res) =\u003e res.status(200).send({msg: \"Count down server!\"}))\n    \n    app.listen(port, () =\u003e console.log(`Example app listening on port ${port}!`))\n    \n    // [...]\n```\n\nIn the above code, we created a new route - `/` - which will render a JSON content once visited. We are only using it to test if express is working.\n\nNow install the dependencies and start up the app:\n\n```\n    # Instal dependencies\n    $ npm install\n    \n    # Start up the app\n    $ npm run serve\n```\n\nIf everything went well, the app should be accessible from http://localhost:3000/. If you visit the URL, you should get an output as below which shows that it works!\n\n```\n    {\n      \"msg\": \"Count down server!\"\n    }\n```\n\nNext, initialize the database:\n\n```javascript\n    // app.js\n    // [...]\n    \n    const db = new sqlite3.Database('./app.db', sqlite3.OPEN_READWRITE);\n    \n    db.run(\"CREATE TABLE IF NOT EXISTS subscriptions (email VARCHAR(90), name VARCHAR(90))\")\n    \n    // [...]\n```\n\nThe first line above opens a new SQLite connection. While the second line checks if the subscriptions table exists, if it does not exists, it will create it.\n\nNext, initialize Pusher server SDK:\n\n```javascript\n    // app.js\n    \n    // [...]\n    \n    const pusher = new Pusher({\n        appId: process.env.PUSHER_APP_ID,\n        key: process.env.PUSHER_APP_KEY,\n        secret: process.env.PUSHER_APP_SECRET,\n        cluster: process.env.PUSHER_APP_CLUSTER,\n        encrypted: true\n    });\n    \n    // [...]\n```\n\nNow create a new route that we can use to get the total number of users that have subscribed and the number of targets we want. The target is the maximum number of users that we want to be able to subscribe:\n\n```javascript\n    // app.js\n    \n    // [...]\n    \n    app.get('/userCount', (req, res) =\u003e {\n        db.each(`SELECT count(*) AS userCount FROM subscriptions`, (err, row) =\u003e {\n            res.status(201).send({userCount: row.userCount, targetCount: 5}) \n        });\n    })\n    \n    // [...]\n```\n\nHere, we hard-coded the `targetCount` to five. If the total number of registered user reaches five, no other user should be able to register again.\n\nNext, create a new endpoint named `addUser` for adding new users:\n\n```javascript\n    // app.js\n    \n    // [...]\n    \n    app.post('/addUser',  (req, res) =\u003e {\n        const email = req.body.email;\n        const name = req.body.name;\n    \n        db.run(`INSERT INTO subscriptions (name, email) values ('${name}', '${email}')`)\n        \n        db.serialize(function() {\n            db.each(`SELECT count(*) AS userCount FROM subscriptions`, (err, row) =\u003e {\n                res.status(201).send({userCount: row.userCount}) \n            });\n        });\n    })\n    \n    // [...]\n```\n\nFinally, create a new endpoint named `/pusher/trigger` for triggering events to Channels.\n\n```javascript\n    // app.js\n    \n    // [...]\n    \n    app.post('/pusher/trigger', (req, res) =\u003e {\n        const channel_name = req.body.channel_name;\n        const event_name = req.body.event_name;\n        const data = req.body.data;\n     \n        pusher.trigger(channel_name, event_name, data);\n        \n        res.status(200).send(data)\n    })\n    \n    // [...]\n```\n\nTo trigger events to Channels, we call the trigger method from the Pusher SDK passing along the name of the channel where we want to trigger the event to, the name of the event, and some data to pass along with the event.  \n\nRestart the server so the new changes will be picked up.\n\n## Creating the app client \n\nBefore we start building the app components, let’s create the service for our app. We’ll create two services - count-down service and pusher service. The count-down service will contain services for the entire component while the pusher service will contain services that are related to Channels, say we want to trigger event or listen to an event.\n\n### Creating our app service\n\nIn Angular, [services](https://angular.io/tutorial/toh-pt4) are great ways of sharing information among classes that don't know each other. \n\nNow, create the count-down service using the Angular CLI command:\n\n```\n    # Make sure you are in the root folder of the project\n    $ ng generate service count-down\n```\n\nYou should now see a new file that is created named `src/app/count-down.service.ts`.\n\nInside the file, replace its content with the below code:\n\n```typescript\n    // src/app/count-down.service.ts\n    \n    import { Injectable } from '@angular/core';\n    import { HttpClient } from '@angular/common/http';\n    import { Observable } from 'rxjs';\n    \n    import { environment } from '../environments/environment';\n    \n    interface userCount {\n      userCount: number,\n      targetCount: number\n    }\n    \n    export interface userData {\n      name: String;\n      email: String;\n    }\n    \n    @Injectable({\n      providedIn: 'root'\n    })\n    export class CountDownService {\n    \n      constructor(private http: HttpClient) { }\n    \n      getUserCount (): Observable\u003cuserCount\u003e {\n        return this.http.get\u003cuserCount\u003e(`${environment.apiUrl}/userCount`)\n      }\n    \n      addNewUser (userData: userData): Observable\u003cuserData\u003e {\n        return this.http.post\u003cuserData\u003e(`${environment.apiUrl}/addUser`, userData)\n      }\n    }\n```    \n\nIn the preceding code:\n\n\n- We imported the following modules:\n  - HttpClient - the [HttpClient](https://angular.io/guide/http) is an Angular module that helps users to communicate with backend services over the HTTP protocol.\n  - Observable - we’ll use the [Observable](https://angular.io/guide/observables) module to handle asynchronous requests.\n  - environment - this is the environment key that we add to the `src/app/environments/environment.ts` file earlier.\n  \n- Next, we created two interfaces, namely `userCount` and `userData`, which defines the type of datatype they accept. \n  - Recall from our Node server, we created an endpoint named `/userCount` which returns the `userCount` and `targetCount` as an object. This is the format that we have defined in the `userCount` interface.\n  - The `userData` defines the data for a new user.\n  \n- Next, we injected the HttpClient class into the class using `constructor(private http: HttpClient) { }` so that we can access it using `*this*.http` in any part in the class.\n\n\n- Finally, we created two methods: \n  - `getUserCount` - this method will make a request to the `/userCount` endpoint to get the number of registered users and the target count.\n  - `addNewUser` - when we want to add a new user, we will call the function, passing along the user’s name and email as an object.\n\n### Pusher service\n\nNext, create the Pusher service\n\n```\n    $ ng generate service pusher\n```\n\nNow update the content of the service file:\n\n```typescript\n    // src/app/pusher.service.ts\n    \n    import { Injectable } from '@angular/core';\n    import Pusher from 'pusher-js';\n    import { HttpClient } from '@angular/common/http';\n    import { Observable } from 'rxjs';\n    \n    import { environment } from '../environments/environment';\n    \n    @Injectable({\n      providedIn: 'root'\n    })\n    export class PusherService {\n    \n      pusher: any\n    \n      constructor(private http: HttpClient) { \n        this.pusher = new Pusher(environment.PUSHER_API_KEY, {\n          cluster: environment.PUSHER_API_CLUSTER,\n          forceTLS: true\n        });\n      }\n    \n      subScribeToChannel(channelName: String, events: String[], cb: Function) {\n        var channel = this.pusher.subscribe(channelName);\n        \n        events.forEach( event =\u003e {\n          channel.bind(event, function(data) {\n            cb(data)\n          });\n        })\n      }\n    \n      triggerEvent(channelName: String, event: String, data: Object): Observable\u003cObject\u003e {\n        return this.http.post(`${environment.apiUrl}/pusher/trigger`, {\n          channel_name: channelName,\n          event_name: event,\n          data: data\n        })\n      }\n    }\n```\n\nIn the preceding code:\n\n- We injected the HttpClient module just as we did in the previous service file.\n- Next, we initialize the Pusher client JavaScript SDK in the constructor of the class.\n- Next, we created two functions:\n  -  `subScribeToChannel()` - using this function we can subscribe to a channel and start to listen for events on that channel. The function accepts three parameters. The first one which is the channel name you want to subscribe to. The second parameter is an array of events you want to listen for. The last parameter is a callback function that is called when an event is triggered.\n  - `triggerEvent()` - if we want to trigger an event, we only need to call this function passing along the channel name, the event name, and the data we want to send along. The function makes an HTTP request to our Node server to trigger the event.\n\nNow let’s build the client-facing part of the app which we are doing with Angular. We’ll divide the app into two components:\n\n- CountDown component. This component will hold the count number and is the first page that will be shown to users.\n- Register component. This component will contain the form and logic for adding new users.\n\nBefore you can use the [HttpClient](https://angular.io/api/common/http/HttpClient), we need to import the Angular [HttpClientModule](https://angular.io/api/common/http/HttpClientModule). Import the HttpClientModule to the `app.module.ts` file:\n\n```typescript\n    // src/app/app.module.ts\n    \n    [...]\n    import { HttpClientModule } from '@angular/common/http';\n    \n      [...]\n      imports: [\n        [...]\n        HttpClientModule,\n        [...]\n      ],\n    \n    [...]\n```\n\n### CountDown component\n\nCreate the CountDown component using the Angular CLI command:\n\n```\n    $ ng generate component count-down\n```\n\nThe above command will create a new folder, `src/app/count-down/`, and generates the four files for the `CountDownComponent`.\n\nThe `count-down.component.ts` is the main component class, which includes the other three files to itself. This is the file that will contain the logic for the component.\n\nAll our markup definitions go inside the `count-down.component.html` file. CSS styles for the component will reside in the `count-down.component.css` file. If we need to write a test for the component, we can do that in the `count-down.component.spec.ts` file.\n\nUpdate the route to render this component:\n\n```typescript\n    // src/app/app-routing.module.ts\n    \n    // [...]\n    \n    import { CountDownComponent } from './count-down/count-down.component';\n    \n    const routes: Routes = [\n      { path: '', component: CountDownComponent }\n    ];\n    \n    // [...]\n```\n\nNext, remove the default rendered page and replace it with the below mark-up:\n\n```html\n    \u003c!-- src/app/app.component.html --\u003e\n    \n    \u003cdiv class=\"container\"\u003e\n      \u003cdiv class=\"content\"\u003e \n        \u003crouter-outlet\u003e\u003c/router-outlet\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nIf you now reload the page, you see it renders the html file for the CountDown component:\n\n![angular-sub-count-countdown-works](//images.ctfassets.net/1es3ne0caaid/2uCl9Qbi6LFnXkwMzvGxsn/c1e94e08f8c00129380b8031e6896626/angular-sub-count-countdown-works.png)\n\nNext, update the markup for the CountDown component:\n\n```html\n    \u003c!-- src/app/count-down/count-down.component.html --\u003e\n    \n    \u003cdiv\u003e\n        \u003cdiv *ngIf=\"!countDown\"\u003e Registration closed! \u003c/div\u003e\n        \u003cnav *ngIf=\"countDown\"\u003e\n          \u003ca routerLink=\"/register\"\u003eRegister\u003c/a\u003e\n        \u003c/nav\u003e\n      \u003ch1\u003eSubscription count down:\u003c/h1\u003e\n      \u003cdiv class=\"count-down\"\u003e {{ countDown }} \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nNow add some styling to the app:\n\n```css\n    /* src/style.css */\n    \n    h1 {\n        color: #369;\n        font-family: Arial, Helvetica, sans-serif;\n        font-size: 200%;\n    }\n    h2, h3 {\n        color: #369;\n        font-family: Arial, Helvetica, sans-serif;\n        font-weight: lighter;\n    }\n    body {\n        overflow: hidden;\n    }\n    body, input[type=\"text\"], button {\n        color: #888;\n        font-family: Cambria, Georgia;\n    }\n    /* everywhere else */\n    * {\n        font-family: Arial, Helvetica, sans-serif;\n    }\n    .container {\n        display: grid;\n        height: 100vh;\n        width: 100vw;\n    }\n    .content {\n        align-self: center;\n        justify-self: center;\n    }\n    .count-down {\n        text-align: center;\n        font-size: 300%;\n    }\n    .from-input {\n        display: block;\n        width: 300px;\n        margin: 8px;\n        padding: 15px;\n        font-size: 100%;\n    }\n    .from-submit {\n        background: #369;\n        color: white;\n        font-family: Arial, Helvetica, sans-serif;\n        font-size: 140%;\n        border-radius: 3px;\n        width: 100%;\n        padding: 10px;\n    }\n    .success-message {\n        background: green; \n        color: antiquewhite; \n        padding: 10px;\n        border-radius: 3px;\n        margin: 4px;\n    }\n```\n\nReload the page to see how it looks now.\n\nWe have been able to render the CountDown component, but it does not show real data yet. And also it is showing “registration is closed!”. It should show that when the users registered is equal to the target users and otherwise show a registration form.\n\nNow, let’s work on this component. \n\nImport the two services we created earlier to the component file:\n\n```typescript\n    // src/app/count-down/count-down.component.ts\n    \n    // [...]\n    \n    import { CountDownService } from '../count-down.service';\n    import { PusherService } from '../pusher.service';\n    \n    // [...]\n```\n\nNotice that we are rendering the `{{ countDown }}` variable to the markup file, which does not have any effect because we have not defined the variable. This variable will hold the number of slots remaining.\n\nDefine the variable:\n\n```typescript\n    // src/app/count-down/count-down.component.ts\n    \n    // [...]\n    \n    export class CountDownComponent implements OnInit {\n      countDown: number;\n    \n    // [...]\n```\n\nNext, inject the services we imported to the component class so we can access them easily:\n\n```typescript\n    // src/app/count-down.component.ts\n    \n    // [....]\n      constructor(\n        private countDownService: CountDownService,\n        private pusherService: PusherService\n      ) { }\n    // [....]\n```\n\nNow we want to get the countDown value from the Node server when the page loads and also listen to new events when a new user subscribes.\n\n```typescript\n    // src/app/count-down.component.ts\n    \n    // [....] \n     ngOnInit() {\n        this.countDownService.getUserCount()\n          .subscribe(data =\u003e {\n            this.countDown = data.targetCount - data.userCount\n          });\n        \n        this.pusherService.subScribeToChannel('count-down', ['newSub'], (data) =\u003e {\n          // console.log(data)\n          this.countDown -= 1;\n        });\n      }\n    // [....]\n```\n\nNow when the component is mounted, we call the `getUserCount()` function from the countDownService service to get the targetCount and userCount, which we then use to calculate the number of the slots that are remaining. \n\nThen, we call the `pusherService.subScribeToChannel()` function to the count-down  and start listening for a newSub event. Once there is a newSub event, we reduce the `countDown` value by one. And all this happens in realtime. Note that the channel name ('count-down') and event name ('newSub') can be anything you like. You only need to make sure that you trigger the same value on the Node server if you change it.\n\nIf you reload the page, you should see now that it shows the remaining slots and also a link where a user can register form.\n\n![angular-sub-count-sub-count](//images.ctfassets.net/1es3ne0caaid/1whfRj5Uapdv19B9D4MFwI/2f71a3c572ed91496887c97b17fcba2a/angular-sub-count-sub-count.png)\n\n\n### Register component\n\nWe also need another component that renders the form for a user to subscribe.\n\nCreate the Register component using the Angular CLI command:\n\n```\n    $ ng generate component register\n```\n\nAdd a route that renders the Register component:\n\n```typescript\n    // src/app/app-routing.module.ts\n    [...]\n    \n    import { RegisterComponent } from './register/register.component';\n    \n    [...]\n      const routes: Routes = [\n        { path: 'register', component: RegisterComponent },\n        { path: '', component: CountDownComponent}\n      ];\n    [...]\n```\n\nNow, if we visit http://localhost:4200/register, it should show the register page.\n\nNext, import the two services we created earlier to the component file:\n\n```typescript\n    // src/app/register/register.component.ts\n    \n    // [...]\n    \n    import { CountDownService, userData } from '../count-down.service';\n    import { PusherService } from '../pusher.service';\n    \n    // [...]\n```\n\nDefine the input form detail for two-way binding:\n\n```typescript\n    // [...]\n    \n    export class RegisterComponent implements OnInit {\n      userData: userData = {\n        name: '',\n        email: ''\n      };\n    \n      userAdded: Boolean = false\n    \n    // [...]\n```\n \n The `userData` is the input we are expecting from the user as they fill the registration form. We’ll use `userAdded` Boolean to toggle between when to show the user a success message as the submit the form.\n \n Next, inject the service we imported to the class:\n \n```typescript\n    // src/app/register/register.component.ts\n    \n    // [....]\n      constructor(\n        private countDownService: CountDownService,\n        private pusherService: PusherService\n      ) { }\n    // [....]\n```\n \n Next, add a function that will be called when a user clicks to submit the form:\n \n```typescript\n    // [...] \n      ngOnInit() {}\n    \n      addUser(): void {\n        this.countDownService.addNewUser(this.userData)\n          .subscribe( data =\u003e {\n            this.userAdded = true \n            this.userData = {name:'', email:''}\n          })\n        \n        this.pusherService.triggerEvent('count-down', 'newSub', this.userData)\n            .subscribe( data =\u003e {\n              console.log(data)\n            })\n      }\n    \n    // [...]\n```\n\nIn the function we created above, we call the `addNewUser` function from the countDownService to register the user. Then finally, we trigger an event to Channels so it notifies all connected user that a new user has just registered so that the count down number is updated.\n \nNext, update the HTML mark up for the form:\n \n```html\n    \u003c!-- src/app/register/register.component.html --\u003e\n    \u003cdiv\u003e\n      \u003cnav\u003e\n        \u003ca routerLink=\"/\"\u003eGot to count-down\u003c/a\u003e\n      \u003c/nav\u003e\n      \u003cdiv\u003e\n        \u003cdiv class=\"success-message\" *ngIf=\"userAdded\"\u003e User Created Successfully! \u003c/div\u003e\n        \u003cform\u003e \n          \u003cinput \n            type=\"text\" \n            class=\"from-input\" \n            placeholder=\"Email\" \n            [(ngModel)]=\"userData.email\" \n            name=\"email\"\n          /\u003e\n          \u003cinput \n            type=\"text\" \n            class=\"from-input\" \n            placeholder=\"Name\" \n            [(ngModel)]=\"userData.name\" \n            name=\"name\"\n          /\u003e\n          \u003cbutton class=\"from-submit\" (click)=\"addUser()\"\u003e Submit \u003c/button\u003e\n        \u003c/form\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n```\n\nFinally, add the FormsModule, which is required when working with forms:\n\n```typescript\n    // src/app/app.module.ts\n    \n    [...]\n    import { FormsModule } from '@angular/forms';\n    \n      [...]\n      imports: [\n        [...]\n        FormsModule,\n        [...]\n      ],\n    \n    [...]\n```\n\nAnd that is it! Let’s test what we have built:\n\n- Start up the Node server if it is not running already - `npm run serve`\n- Start the frontend app if it’s not running, then open the app in two or more different tabs in your browser.\n- In one of the tabs, navigate to the register page and then fill the form and submit. The number of slots remaining should reduce in realtime.\n\n\n## Conclusion\n\nIn this tutorial, we have learned how to add realtime functionality to our Angular apps by building a subscription count down app. There are other use-cases where this same approach can be applied to. Feel free to them explore with the knowledge that you have gained.\n\nYou can get the complete code of the app on [GitHub](https://github.com/dongido001/subscription-count-down).","metaTitle":"Build a live subscription count down with Angular","metaDescription":"Use Angular 7, Node and Channels to build a live subscription countdown. The app features two interfaces: a signup dashboard, and a countdown view, showing how many places are left. The count decreases by one with every signup."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"7DhDRN2hkAKlFM826mnGOR","type":"Entry","createdAt":"2019-03-29T17:32:22.293Z","updatedAt":"2019-07-16T00:37:57.653Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"How to consume a RESTful API in React","url":"consume-restful-api-react","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1N3HBqLEugWyeKsWEW0iYg","type":"Entry","createdAt":"2018-08-06T18:12:32.345Z","updatedAt":"2018-08-06T18:12:32.345Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Fisayo Afolayan","url":"fisayo-afolayan","email":"afolayanfisayo@gmail.com","twitter":"https://twitter.com/fisayoafolayan","github":"https://github.com/fisayoafolayan","guestWriter":true}}],"projectRepo":"https://github.com/fisayoafolayan/consuming-restful-api-in-react","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}}],"reviewDate":"2019-03-29","description":"This brief tutorial will introduce you to using REST APIs in React applications. You will create a simple demo that consumes a contact list API and displays it.","prerequisite":"You will need npm installed, and a basic knowledge of React.","content":"This brief tutorial will help you understand a few concepts you need to know so as to integrate a RESTful API in a React application.\n\nReact is the one of the most popular frontend framework out there and more developers are increasing learning how to build real life applications with React. While learning React, you will eventually get to a point when you need to integrate APIs in your React application. \n\nWe will be building a simple contact list application to display the contact's name, email and we will store a catch phrase of a contact. We will make use of this [endpoint](http://jsonplaceholder.typicode.com/users), it contains a JSON dump of data needed for our contact list application.\n\n## Prerequisites\n\n- Basic knowledge of React (versions \u003e=2.1.1)\n- Basic understanding of JavaScript\n- Basic understanding of APIs\n- Must have npm installed on your local machine (versions \u003e= 5.2)\n\n## Setting up our environment\n\n### Install create-react-app\n\nWe will be creating our React Application using a neat tool called `create-react-app`, this is a boilerplate that helps you set up a proper folder structure and assets binding for your React application. Run this command on your terminal.\n\n```\n    npm i create-react-app\n```\n\n### Create a new Project\n\nNext, we will create a new project using `create-react-app`. So you can switch into your preferred directory and run this command on your terminal.\n\n```\n    npx create-react-app react-api\n```\n\n\u003e `npx` is a tool to help execute packages, you can read more about it [here](https://www.npmjs.com/package/npx)\n\nThis will generate some scaffolds you need to get your React application running as quick as possible.\n\nNext, run the application using the following command.\n\n```\n    npm start\n```\n\nThis will automatically open http://localhost:3000 on your browser and you will get the default `create-react-app` homepage.\n\n![react-rest-api-1](//images.ctfassets.net/1es3ne0caaid/7EXzzORL4Z7eGbAywYOkxl/7accecb9df1d30d8b096d7f81f7958d5/react-rest-api-1.png)\n\n\u003e To access the application on any device you have connected on the same network, you can access it via `http://\u003cyour-host-machine-ip\u003e:3000` which will be shown to you in terminal.\n\n## Project setup\n\nThe next step is to modify the `App.js` file located in the `src` folder to look like this.\n\n```javascript\n    // src/App.js\n    \n    import React, {Component} from 'react';\n    \n    class App extends Component {\n      render () {\n        return (\n          // JSX to render goes here...\n        );\n      }\n    }\n    \n    export default App;\n```\n\nIf you noticed, we got rid of `import logo from './logo.svg';` and `import './App.css';` along with the JSX in the `render()` method because we will not be needing those in the course of this tutorial.\n\n### Setting up bootstrap\n\nNext, we have to link bootstrap's CDN in the `index.html` file which can be found in the public folder.\n\n```html\n    // public/index.html\n    ...\n    \u003chead\u003e\n      ...\n      \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin=\"anonymous\"\u003e\n      ...\n    \u003c/head\u003e\n    ...\n```\n\nWhen this is done we will render a bootstrap card in the `App.js` file by including this snippet in the `return()` method.\n\n```javascript\n    // src/App.js\n    \n    import React, { Component } from 'react';\n    \n    class App extends Component {\n      render() {\n        return (\n          \u003cdiv class=\"card\"\u003e\n            \u003cdiv class=\"card-body\"\u003e\n              \u003ch5 class=\"card-title\"\u003eSteve Jobs\u003c/h5\u003e\n              \u003ch6 class=\"card-subtitle mb-2 text-muted\"\u003esteve@apple.com\u003c/h6\u003e\n              \u003cp class=\"card-text\"\u003eStay Hungry, Stay Foolish\u003c/p\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    \n    export default App;\n```\n\nIf we reload our application the following changes will reflect showing the contact's name, email and catch phrase in a bootstrap card.\n\n![react-rest-api-2](//images.ctfassets.net/1es3ne0caaid/2Fl8AfkXpWfxLLV8tNGRDw/dd649c8648754d633dce8152e7459fc6/react-rest-api-2.png)\n\n### Feeding dynamic data from the API\n\nMost modern web applications make use of the [REST Protocol](https://searchmicroservices.techtarget.com/definition/REST-representational-state-transfer) to communicate with each other. To achieve this, data is sent as [JSON (JavaScript Object Notation)](https://www.json.org/) to the API. In turn, the API returns a JSON payload which can be static or dynamic data. Our application will parse and display the data in a presentable manner, making it appealing to the user.\n\nBelow is a typical JSON response from the contact list [dump](http://jsonplaceholder.typicode.com/users):\n\n```json\n    [\n      {\n        \"id\": 1,\n        \"name\": \"Leanne Graham\",\n        \"username\": \"Bret\",\n        \"email\": \"Sincere@april.biz\",\n        \"address\": {\n          \"street\": \"Kulas Light\",\n          \"suite\": \"Apt. 556\",\n          \"city\": \"Gwenborough\",\n          \"zipcode\": \"92998-3874\",\n          \"geo\": {\n            \"lat\": \"-37.3159\",\n            \"lng\": \"81.1496\"\n          }\n        },\n        \"phone\": \"1-770-736-8031 x56442\",\n        \"website\": \"hildegard.org\",\n        \"company\": {\n          \"name\": \"Romaguera-Crona\",\n          \"catchPhrase\": \"Multi-layered client-server neural-net\",\n          \"bs\": \"harness real-time e-markets\"\n        }\n      }\n    ]\n```\n\n### Creating a state\n\nA state is simply an object that holds data pending to be rendered. This is where we will store the output from the API call.\n\n```javascript\n    // src/App.js\n    \n    import React, { Component } from 'react';\n    \n    class App extends Component {\n    \n      state = {\n        contacts: []\n      }\n      ...\n    }\n```\n\nIn the snippet above we have created a state to store the the output from our API request.\n\n### Calling the API\n\nTo fetch our contact list, we will use a `componentDidMount()` method in our `App.js` file. This method is executed immediately our component is mounted and we will also make our API request in that method.\n\n```javascript\n    // src/App.js\n    \n    import React, { Component } from 'react'\n    \n    class App extends Component {\n      ...\n      componentDidMount() {\n        fetch('http://jsonplaceholder.typicode.com/users')\n        .then(res =\u003e res.json())\n        .then((data) =\u003e {\n          this.setState({ contacts: data })\n        })\n        .catch(console.log)\n      }\n      ...\n    }\n```\n\n`fetch('http://jsonplaceholder.typicode.com/users')` will make a `GET` request to the endpoint `.then(res =\u003e res.json())` parses the output to JSON, `.then((data) =\u003e {this.setState({ contacts: data })})` sets the value of our state to the output from the API call and finally `.catch(console.log)` logs any error we get to the console.\n\n### Creating our contacts component\n\nNext up, we will create a component to render the results as cards. To achieve this we will create a component by creating a new sub-folder named `components` in the `src` directory followed by creating a `contacts.js` file in the `components` directory by running:\n\n```\n    $ mkdir src/components\n    $ touch src/components/contacts.js\n```\n\nThe contents of the `contacts.js` component file will be the following:\n\n```javascript\n    // src/components/contacts.js\n    \n    import React from 'react'\n    \n    const Contacts = ({ contacts }) =\u003e {\n      return (\n        \u003cdiv\u003e\n          \u003ccenter\u003e\u003ch1\u003eContact List\u003c/h1\u003e\u003c/center\u003e\n          {contacts.map((contact) =\u003e (\n            \u003cdiv class=\"card\"\u003e\n              \u003cdiv class=\"card-body\"\u003e\n                \u003ch5 class=\"card-title\"\u003e{contact.name}\u003c/h5\u003e\n                \u003ch6 class=\"card-subtitle mb-2 text-muted\"\u003e{contact.email}\u003c/h6\u003e\n                \u003cp class=\"card-text\"\u003e{contact.company.catchPhrase}\u003c/p\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          ))}\n        \u003c/div\u003e\n      )\n    };\n    \n    export default Contacts\n```\n\nThe `Contacts` method accepts the `contacts` state we created earlier and then returns a mapped version of the state, which loops over the bootstrap card to insert the contact's `name`, `email` and `catch phrase`.\n\n### Rendering the contacts component\n\nThe final step to this application is to render our component in `src/App.js` . To do this, we have to import the component into `App.js`.\n\n```javascript\n    // src/App.js\n    \n    import React, { Component } from 'react';\n    import Contacts from './components/contacts';\n    ...\n```\n\nThen in our render method we have to clear out whatever we had there before and pass our component along with the `contacts` state in there for it to be rendered.\n\n```javascript\n    // src/App.js\n    \n    import React, { Component } from 'react'\n    import Contacts from './components/contacts'\n    \n    class App extends Component {\n      ...\n      render() {\n        return (\n          \u003cContacts contacts={this.state.contacts} /\u003e\n        )\n      }\n    }\n    \n    export default App\n```\n\n## Running our application\n\nIf you don't already have your application running, you can run it by using the `npm start` command.\n\n![react-rest-api-3](//images.ctfassets.net/1es3ne0caaid/562Cp96RBxy9hArfvoHmJ9/f3bb2f3db60b535708cd45ae878cf0b1/react-rest-api-3.png)\n\nThis will open your browser for you to view the application or show you some errors if you missed anything. You can visit directly by accessing `http://localhost:3000` . If port `3000` is already in you you will be prompted to change the port.\n\n![react-rest-api-4](//images.ctfassets.net/1es3ne0caaid/7HhiEHl7512eNWwlO8lbmi/71d9f8df33ec07f19efca03103bbcbaa/react-rest-api-4.png)\n\n## Conclusion\n\nIn this tutorial, we built a simple contact list web page, that displayed contact details. We called a RESTful Api, and we displayed the response to the browser using React. We also covered how the `componentDidMount()` method works, how state works, how components works and how to fetch data from an API and parsing the data to a component.\n\nYou can learn more about React from the official documentation [here](https://reactjs.org/docs/getting-started.html). The source code to the application in this article is available on [GitHub](https://github.com/fisayoafolayan/consuming-restful-api-in-react).","metaTitle":"How to consume a RESTful API in React","metaDescription":"This brief tutorial will introduce you to using REST APIs in React applications. You will create a simple demo that consumes a contact list API and displays it."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4CCoqI4zE8NbARFYXDrNx9","type":"Entry","createdAt":"2019-03-28T16:22:45.686Z","updatedAt":"2019-03-28T16:22:45.686Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Creating a live multiplayer quiz app in React Native","url":"live-multiplayer-quiz-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNQuiz","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6nDfV1cd5C6464wgCoOQii","type":"Entry","createdAt":"2018-02-12T15:08:13.901Z","updatedAt":"2018-02-26T12:31:12.764Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Gaming","url":"gaming","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2019-03-28","description":"Use React Native and Node to build a live cross-platform quiz app. Admins are able to add questions and start the game. Users have a short amount of time to respond. At the end, a scoreboard is displayed, showing the top player.","prerequisite":"You will need Node 11+, Yarn and React Native installed on your machine.","content":"In this tutorial, we’ll create a quiz app which can cater to multiple users in realtime. \n\n\n## Prerequisites\n\nKnowledge of Node.js and React Native is required to follow this tutorial. This also means your machine needs to have the React Native development environment.\n\nWe’ll be using [Yarn](https://yarnpkg.com/en/) to install dependencies. \n\nYou’ll also need a [Pusher app instance](https://pusher.com/channels) and an [ngrok account](https://ngrok.com/). Enable client events on your Pusher app so we can trigger events from the app itself.\n\nThe following package versions are used in this tutorial:\n\n\n- Node 11.2.0\n- Yarn 1.13.0\n- React Native 0.58.5\n\n\n## App overview\n\nWe will create a multi-player quiz app. Users will be given 10 multiple choice questions and they have to select the correct answer to each one as they are displayed on the screen.\n\nWhen the user opens the app, they have to log in. This serves as their identification in the game:\n\n![react-native-quiz-1](//images.ctfassets.net/1es3ne0caaid/4HEVLB5VTnFk0gE4NN6VpV/cbd2200a7b4b8e983980d6ed5569d9c0/react-native-quiz-1.png)\n\nOnce they’re logged in, a loading animation will be displayed while waiting for the admin to trigger the questions. \n\nThe game starts when the first question is displayed on the screen. As soon as the user picks an option, either correct or wrong mark will be displayed next to the option they selected. Once the user selects an option, they can no longer select another one. Users have 10 seconds to answer each question. If they answer after the countdown (displayed in the upper right corner), their answer won’t be considered.\n\n![react-native-quiz-2](//images.ctfassets.net/1es3ne0caaid/2ls9Qhi5bWTtaevyI9dPWk/57929ac14013c77e5af01e1e35365e1d/react-native-quiz-2.gif)\n\nAfter all 10 questions have been displayed, the top users are displayed and that ends the game:\n\n![react-native-quiz-3](//images.ctfassets.net/1es3ne0caaid/6XIrr1HxmjNhP4NkwktMcr/6548adc564125f35044e81edc009c398/react-native-quiz-3.png)\n\n\n## Setting up \n\nClone the repo and switch to the starter  branch to save time in setting up the app and adding boilerplate code:\n\n```\n    git clone https://github.com/anchetaWern/RNQuiz\n    cd RNQuiz\n    git checkout starter\n```\n\nNext, install the dependencies and link them up:\n\n```\n    yarn\n    react-native eject\n    react-native link react-native-config\n    react-native link react-native-gesture-handler\n    react-native link react-native-vector-icons\n```\n\nThe starter branch already has the two pages set up. All the styles that the app will use are also included. So all we have to do is add the structure and logic.\n\nNext, update your `android/app/src/main/AndroidManifest.xml` and add the permission for accessing the network state. This is required by Pusher:\n\n```xml\n    \u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      package=\"com.rnquiz\"\u003e\n        \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n        \u003cuses-permission android:name=\"android.permission.SYSTEM_ALERT_WINDOW\"/\u003e\n        \u003cuses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/\u003e \u003c!-- add this --\u003e\n    \u003c/manifest\u003e\n```\n\nNext, update `android/app/build.gradle` to include the `.gradle` file for the [React Native Config](https://github.com/luggit/react-native-config) package. We’ll be using it to use `.env` configuration files inside the project:\n\n```gradle\n    apply from: \"../../node_modules/react-native/react.gradle\"\n    apply from: project(':react-native-config').projectDir.getPath() + \"/dotenv.gradle\"\n```\n\nNext, create a `.env` file at the root of the React Native project and add your Pusher app credentials:\n\n```\n    PUSHER_APP_KEY=\"YOUR PUSHER APP KEY\"\n    PUSHER_APP_CLUSTER=\"YOUR PUSHER APP CLUSTER\"\n```\n\nOnce you’re done with setting up the app, do the same for the server as well:\n\n```\n    cd server\n    yarn\n```\n\nThe server doesn’t have boilerplate code already set up so we’ll write everything from scratch.\n\nLastly, create a `server/.env` file and add your Pusher app credentials:\n\n```\n    APP_ID=\"YOUR PUSHER APP ID\"\n    APP_KEY=\"YOUR PUSHER APP KEY\"\n    APP_SECRET=\"YOUR PUSHER APP SECRET\"\n    APP_CLUSTER=\"YOUR PUSHER APP CLUSTER\"\n```\n\n## Quiz server\n\nBefore we add the code for the actual app, we have to create the server first. This is where we add the code for creating the database and displaying the UI for creating quiz items.\n\nNavigate inside the `server` directory if you haven’t already. Inside, create an `index.js` file and add the following:\n\n```javascript\n    const express = require(\"express\"); // server framework\n    const bodyParser = require(\"body-parser\"); // for parsing the form data\n    const Pusher = require(\"pusher\"); // for sending realtime messages\n    const cors = require(\"cors\"); // for accepting requests from any host\n    const mustacheExpress = require('mustache-express'); // for using Mustache for templating\n    \n    const { check } = require('express-validator/check'); // for validating user input for the quiz items\n    \n    const sqlite3 = require('sqlite3').verbose(); // database engine\n    const db = new sqlite3.Database('db.sqlite'); // database file in the root of the server directory\n```\n\nNext, add the code for using the server packages we’ve imported above:\n\n```javascript\n    const app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use(cors());\n    app.engine('mustache', mustacheExpress());\n    app.set('view engine', 'mustache');\n    app.set('views', __dirname + '/views'); // set the location of mustache files\n```\n\nSet up Pusher:\n\n```javascript\n    const pusher = new Pusher({\n      appId: process.env.APP_ID,\n      key: process.env.APP_KEY,\n      secret: process.env.APP_SECRET,\n      cluster: process.env.APP_CLUSTER\n    });\n```\n\nNext, add the code for authenticating users with Pusher and logging them into the server:\n\n```javascript\n    var users = []; // this will store the username and scores for each user\n    \n    app.post(\"/pusher/auth\", (req, res) =\u003e {\n      const socketId = req.body.socket_id;\n      const channel = req.body.channel_name;\n    \n      const auth = pusher.authenticate(socketId, channel);\n      res.send(auth);\n    });\n    \n    app.post(\"/login\", (req, res) =\u003e {\n      const username = req.body.username;\n      console.log(username + \" logged in\");\n    \n      if (users.indexOf(username) === -1) { // check if user doesn't already exist\n        console.log('users: ', users.length);\n        users.push({\n          username,\n          score: 0 // initial score\n        });\n      }\n    \n      res.send('ok');\n    });\n```\n\nNext, add the code for creating the database. Note that this step is optional as I have already added the `db.sqlite` file at the root of the `server` directory. That’s the database file which contains a few questions that I used for testing. If you want to start anew, simply create an empty `db.sqlite` file through the command line (or your text editor) and access the below route on your browser:\n\n```javascript\n    app.get(\"/create-db\", (req, res) =\u003e {\n      db.serialize(() =\u003e {\n        db.run('CREATE TABLE [quiz_items] ([question] VARCHAR(255), [optionA] VARCHAR(255), [optionB] VARCHAR(255), [optionC] VARCHAR(255), [optionD] VARCHAR(255), [answer] CHARACTER(1))');\n      });\n    \n      db.close();\n      res.send('ok');\n    });\n```\n\nNext, add the route for displaying the UI for adding quiz items. This uses the Mustache Express library to render the `quiz_creator` template inside the `views` folder:\n\n```javascript\n    app.get(\"/create-quiz\", (req, res) =\u003e {\n      res.render('quiz_creator');\n    });\n```\n\nHere’s the code for the quiz creator template. Create a `views/quiz_creator.mustache` file and add the following:\n\n```html\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n      \u003cmeta charset=\"UTF-8\"/\u003e\n      \u003ctitle\u003eQuiz Creator\u003c/title\u003e\n      \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"\u003e\n      \u003cstyle\u003e\n      .hidden {\n        display: none;\n      }\n      \u003c/style\u003e\n    \u003c/head\u003e\n    \n    \u003cbody\u003e\n    \n      \u003cdiv class=\"container\"\u003e\n        \u003cdiv class=\"row align-items-center\"\u003e\n          \u003cdiv class=\"col col-lg-12\"\u003e\n            \u003ch1\u003eCreate Quiz\u003c/h1\u003e\n    \n            \u003cdiv class=\"alert alert-success hidden\"\u003e\n            Item created!\n            \u003c/div\u003e\n    \n            \u003cform method=\"POST\" action=\"/save-item\"\u003e\n              \u003cdiv class=\"form-group\"\u003e\n                \u003clabel for=\"question\"\u003eQuestion\u003c/label\u003e\n                \u003cinput type=\"text\" id=\"question\" name=\"question\" class=\"form-control\" required\u003e\n              \u003c/div\u003e\n    \n              \u003cdiv class=\"form-group\"\u003e\n                \u003clabel for=\"option_a\"\u003eOption A\u003c/label\u003e\n                \u003cinput type=\"text\" id=\"option_a\" name=\"option_a\" class=\"form-control\" required\u003e\n              \u003c/div\u003e\n    \n              \u003cdiv class=\"form-group\"\u003e\n                \u003clabel for=\"option_b\"\u003eOption B\u003c/label\u003e\n                \u003cinput type=\"text\" id=\"option_b\" name=\"option_b\" class=\"form-control\" required\u003e\n              \u003c/div\u003e\n    \n              \u003cdiv class=\"form-group\"\u003e\n                \u003clabel for=\"option_c\"\u003eOption C\u003c/label\u003e\n                \u003cinput type=\"text\" id=\"option_c\" name=\"option_c\" class=\"form-control\" required\u003e\n              \u003c/div\u003e\n    \n              \u003cdiv class=\"form-group\"\u003e\n                \u003clabel for=\"option_d\"\u003eOption D\u003c/label\u003e\n                \u003cinput type=\"text\" id=\"option_d\" name=\"option_d\" class=\"form-control\" required\u003e\n              \u003c/div\u003e\n    \n              Correct Answer\n    \n              \u003cdiv class=\"form-group\"\u003e\n                \u003cdiv class=\"form-check\"\u003e\n                  \u003cinput class=\"form-check-input\" type=\"radio\" name=\"answer\" id=\"correct_a\" value=\"A\"\u003e\n                  \u003clabel class=\"form-check-label\" for=\"correct_a\"\u003e\n                    A\n                  \u003c/label\u003e\n                \u003c/div\u003e\n    \n                \u003cdiv class=\"form-check\"\u003e\n                  \u003cinput class=\"form-check-input\" type=\"radio\" name=\"answer\" id=\"correct_b\" value=\"B\"\u003e\n                  \u003clabel class=\"form-check-label\" for=\"correct_b\"\u003e\n                    B\n                  \u003c/label\u003e\n                \u003c/div\u003e\n    \n                \u003cdiv class=\"form-check\"\u003e\n                  \u003cinput class=\"form-check-input\" type=\"radio\" name=\"answer\" id=\"correct_c\" value=\"C\"\u003e\n                  \u003clabel class=\"form-check-label\" for=\"correct_c\"\u003e\n                    C\n                  \u003c/label\u003e\n                \u003c/div\u003e\n    \n                \u003cdiv class=\"form-check\"\u003e\n                  \u003cinput class=\"form-check-input\" type=\"radio\" name=\"answer\" id=\"correct_d\" value=\"D\"\u003e\n                  \u003clabel class=\"form-check-label\" for=\"correct_d\"\u003e\n                    D\n                  \u003c/label\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n    \n              \u003cbutton type=\"submit\" class=\"btn btn-primary\"\u003eSave Item\u003c/button\u003e\n            \u003c/form\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \n      \u003cscript\u003e\n        if (window.location.hash) {\n          document.querySelector('.alert').classList.remove('hidden');\n        }\n      \u003c/script\u003e\n    \n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nNote that we haven’t really used the templating engine in the above template. But it’s a good practice to use it if you’re expecting to display dynamic data.\n\nNext, add the route where the form data will be submitted. This has a simple validation where the length of each text field should not be less than one. Once the data is validated, we insert a new quiz item to the table:\n\n```javascript\n    // server/index.js\n    const required = { min: 1 }; // minimum number of characters required for each field\n    \n    app.post(\"/save-item\", [\n      check('question').isLength(required),\n      check('option_a').isLength(required),\n      check('option_b').isLength(required),\n      check('option_c').isLength(required),\n      check('option_d').isLength(required),\n      check('answer').isLength(required) // the letter of the answer (e.g. A, B, C, D)\n    ], (req, res) =\u003e {\n    \n      const { question, option_a, option_b, option_c, option_d, answer } = req.body;\n      db.serialize(() =\u003e {\n        var stmt = db.prepare('INSERT INTO quiz_items VALUES (?, ?, ?, ?, ?, ?)');\n        stmt.run([question, option_a, option_b, option_c, option_d, answer]);\n      });\n    \n      res.redirect('/create-quiz#ok'); // redirect back to the page for creating a quiz item\n    });\n```\n\nNext, add the code for sending the questions. This selects ten random rows from the table and sends them at an interval (every 13 seconds). The users will only have ten seconds to answer each question, but we included an additional three seconds to cater for the latency (delay) in the network and in the app:\n\n```javascript\n    const channel_name = 'quiz-channel';\n    const question_timing = 13000; // 10 secs to show + 3 secs latency\n    const question_count = 10;\n    const top_users_delay = 10000; // additional delay between displaying the last question and the top users\n    \n    app.get(\"/questions\", (req, res) =\u003e {\n      var index = 1;\n      db.each('SELECT question, answer, optionA, optionB, optionC, optionD, answer FROM quiz_items ORDER BY random() LIMIT ' + question_count, (err, row) =\u003e {\n        timedQuestion(row, index);\n        index += 1;\n      });\n    \n      // next: add code for sending top users\n    \n      res.send('ok');\n    });\n    \n    // next: add code for timedQuestion function\n```\n\nAfter all the questions have been sent, we send the top three users to all users who are currently subscribed to the quiz channel:\n\n```javascript\n    setTimeout(() =\u003e {\n      console.log('now triggering score...');\n      const sorted_users_by_score = users.sort((a, b) =\u003e b.score - a.score)\n      const top_3_users = sorted_users_by_score.slice(0, 1); // replace 1 with 3\n    \n      pusher.trigger(channel_name, 'top-users', {\n        users: top_3_users\n      });\n    }, (question_timing * (question_count + 2)) + top_users_delay);\n```\n\nHere’s the code for the `timedQuestion` function we used earlier. All it does is send each individual row from the table:\n\n```javascript\n    const timedQuestion = (row, index) =\u003e {\n      setTimeout(() =\u003e {\n        Object.assign(row, { index });\n    \n        pusher.trigger(\n          channel_name,\n          'question-given',\n          row\n        );\n    \n      }, index * question_timing);\n    }\n```\n\nNext, add the route for incrementing user scores. This finds the user with the specified username in the array of users and then increments their score:\n\n```javascript\n    app.post(\"/increment-score\", (req, res) =\u003e {\n      const { username } = req.body;\n      console.log(`incremented score of ${username}`);\n    \n      const user_index = users.findIndex(user =\u003e user.username == username);\n      users[user_index].score += 1;\n    \n      res.send('ok');\n    });\n```\n\nNote that all users make a request to the above route every time they answer correctly so it’s a potential bottleneck. This is especially true if there are thousands of users using the app at the same time. If you’re planning to create a multi-player quiz app of your own, you might want to use Pusher on the server side to listen for messages sent by users. From there, you can increment their scores as usual.\n\nLastly, run the server on a specific port:\n\n```javascript\n    var port = process.env.PORT || 5000;\n    app.listen(port);\n```\n\n## Quiz app\n\nNow that we’ve added the server code, we’re ready to work on the actual app. As mentioned earlier, the boilerplate code has already been set up so all we have to do is add the UI structure and the logic.\n\n### Login screen\n\nOpen the login screen file and add the following:\n\n```javascript\n    // src/screens/Login.js\n    import React, { Component } from \"react\";\n    import { View, Text, TextInput, TouchableOpacity, Alert } from \"react-native\";\n    \n    import Pusher from \"pusher-js/react-native\"; // for using Pusher\n    import Config from \"react-native-config\"; // for using .env config file\n    \n    import axios from 'axios'; // for making http requests\n    \n    const pusher_app_key = Config.PUSHER_APP_KEY;\n    const pusher_app_cluster = Config.PUSHER_APP_CLUSTER;\n    const base_url = \"YOUR NGROK HTTPS URL\";\n    \n    class LoginScreen extends Component {\n      static navigationOptions = {\n        header: null\n      };\n    \n      state = {\n        username: \"\",\n        enteredQuiz: false\n      };\n    \n      constructor(props) {\n        super(props);\n        this.pusher = null;\n      }\n    \n      // next: add render()\n    }\n    \n    export default LoginScreen;\n```\n\nNext, render the login UI:\n\n```javascript\n    render() {\n      return (\n        \u003cView style={styles.wrapper}\u003e\n          \u003cView style={styles.container}\u003e\n            \u003cView style={styles.main}\u003e\n              \u003cView\u003e\n                \u003cText style={styles.label}\u003eEnter your username\u003c/Text\u003e\n                \u003cTextInput\n                  style={styles.textInput}\n                  onChangeText={username =\u003e this.setState({ username })}\n                  value={this.state.username}\n                /\u003e\n              \u003c/View\u003e\n    \n              {!this.state.enteredQuiz \u0026\u0026 (\n                \u003cTouchableOpacity onPress={this.enterQuiz}\u003e\n                  \u003cView style={styles.button}\u003e\n                    \u003cText style={styles.buttonText}\u003eLogin\u003c/Text\u003e\n                  \u003c/View\u003e\n                \u003c/TouchableOpacity\u003e\n              )}\n    \n              {this.state.enteredQuiz \u0026\u0026 (\n                \u003cText style={styles.loadingText}\u003eLoading...\u003c/Text\u003e\n              )}\n            \u003c/View\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nWhen the user clicks on the login button, we authenticate them via Pusher and log them into the server. As you’ve seen in the server code earlier, this allows us to add the user to the `users` array which is then used later to filter for the top users:\n\n```javascript\n    enterQuiz = async () =\u003e {\n      const myUsername = this.state.username;\n    \n      if (myUsername) {\n        this.setState({\n          enteredQuiz: true // show loading animation\n        });\n    \n        this.pusher = new Pusher(pusher_app_key, {\n          authEndpoint: `${base_url}/pusher/auth`,\n          cluster: pusher_app_cluster,\n          encrypted: true\n        });\n        \n        try {\n          await axios.post(\n            `${base_url}/login`, \n            {\n              username: myUsername\n            }\n          );\n          console.log('logged in!');\n        } catch (err) {\n          console.log(`error logging in ${err}`);\n        }\n        \n        // next: add code for subscribing to quiz channel\n    \n      }\n    };\n```\n\nNext, listen for Pusher’s channel subscription success event and navigate the user to the Quiz screen. We pass the Pusher reference, username and quiz channel as navigation params so we can also use it in the Quiz screen:\n\n```javascript\n    this.quizChannel = this.pusher.subscribe('quiz-channel');\n    this.quizChannel.bind(\"pusher:subscription_error\", (status) =\u003e {\n      Alert.alert(\n        \"Error\",\n        \"Subscription error occurred. Please restart the app\"\n      );\n    });\n    \n    this.quizChannel.bind(\"pusher:subscription_succeeded\", () =\u003e {     \n      this.props.navigation.navigate(\"Quiz\", {\n        pusher: this.pusher,\n        myUsername: myUsername,\n        quizChannel: this.quizChannel\n      });\n    \n      this.setState({\n        username: \"\",\n        enteredQuiz: false // hide loading animation\n      });\n    });\n```\n\n### Quiz screen\n\nThe Quiz screen is the main meat of the app. This is where the questions are displayed for the user to answer. Start by importing all the packages we need:\n\n```javascript\n    // src/screens/Quiz.js\n    import React, { Component } from \"react\";\n    import { View, Text, ActivityIndicator, TouchableOpacity } from \"react-native\";\n    import axios from 'axios';\n    import Icon from 'react-native-vector-icons/FontAwesome';\n    \n    const option_letters = ['A', 'B', 'C', 'D'];\n    const base_url = \"YOUR NGROK HTTPS URL\";\n```\n\nNext, initialize the state:\n\n```javascript\n    class Quiz extends Component {\n      \n      static navigationOptions = {\n        header: null\n      };\n    \n      state = {\n        display_question: false, // whether to display the questions or not\n        countdown: 10, // seconds countdown for answering the question\n        show_result: false, // whether to show whether the user's answer is correct or incorrect\n        selected_option: null, // the last option (A, B, C, D) selected by the user\n        disable_options: true, // whether to disable the options from being interacted on or not\n        total_score: 0, // the user's total score\n       \n        index: 1, // the index of the question being displayed\n        display_top_users: false // whether to display the top users or not\n      }\n    \n      // next: add constructor\n    }\n    \n    export default Quiz;\n```\n\nInside the constructor, we get the navigation params that were passed from the login screen earlier. Then we listen for the `question-given` event to be triggered by the server. As you’ve seen earlier, this contains the question data (question, four options, and answer). We just set those into the state so they’re displayed. After that, we immediately start the countdown so that the number displayed on the upper right corner counts down every second:\n\n```javascript\n    constructor(props) {\n      super(props);\n      const { navigation } = this.props;\n      \n      this.pusher = navigation.getParam('pusher');\n      this.myUsername = navigation.getParam('myUsername');\n      this.quizChannel = navigation.getParam('quizChannel');\n    \n      this.quizChannel.bind('question-given', ({ index, question, optionA, optionB, optionC, optionD, answer }) =\u003e {\n        \n        this.setState({\n          display_question: true, // display the question in the UI\n          countdown: 10, // start countdown\n          selected_option: null,\n          show_result: false, \n          disable_options: false,\n          \n          // question to display\n          index, \n          question, \n          optionA, \n          optionB, \n          optionC, \n          optionD, \n          answer\n        });\n        \n        // start the countdown\n        const interval = setInterval(() =\u003e {\n          this.setState((prevState) =\u003e {\n            const cnt = (prevState.countdown \u003e 0) ? prevState.countdown - 1 : 0\n            if (cnt == 0) {\n              clearInterval(interval);\n            }\n    \n            return {\n              countdown: cnt\n            }\n          });\n        }, 1000);\n    \n      });\n      \n      // next: add listener for top users\n    }\n```\n\nNext, listen for the `top-users` event. This will display the names and scores of the top users:\n\n```javascript\n    this.quizChannel.bind('top-users', ({ users }) =\u003e {\n      console.log('received top users: ', JSON.stringify(users));\n      this.setState({\n        top_users: users,\n        display_top_users: true\n      });\n    });\n```\n\nNext, render the UI. When the user is first redirected from the login screen, only the total score, default countdown value, and the activity indicator are displayed. When the server starts sending questions, the activity indicator is hidden in place of the question and its options. Lastly, when the server sends the top users, the question and its options are hidden in place of the list of top users:\n\n```javascript\n    render() {\n      const { \n        total_score,\n        countdown, \n        index, \n        question, \n        optionA, \n        optionB, \n        optionC, \n        optionD, \n        answer, \n    \n        display_question,\n        top_users,\n        display_top_users\n      } = this.state;\n      \n      const options = [optionA, optionB, optionC, optionD];\n    \n      return (\n        \u003cView style={styles.container}\u003e\n          \n          \u003cView\u003e\n            \u003cText\u003eTotal Score: {total_score}\u003c/Text\u003e\n          \u003c/View\u003e\n    \n          \u003cView style={styles.countdown}\u003e\n            \u003cText style={styles.countdown_text}\u003e{countdown}\u003c/Text\u003e\n          \u003c/View\u003e\n    \n          {\n            !display_question \u0026\u0026\n            \u003cView style={styles.centered}\u003e\n              \u003cActivityIndicator size=\"large\" color=\"#0000ff\" /\u003e\n            \u003c/View\u003e\n          }\n    \n          {\n            display_question \u0026\u0026 !display_top_users \u0026\u0026 \n            \u003cView style={styles.quiz}\u003e\n              {\n                !showAnswer \u0026\u0026\n                \u003cView\u003e\n                  \u003cView\u003e\n                    \u003cText style={styles.big_text}\u003e{question}\u003c/Text\u003e\n                  \u003c/View\u003e\n    \n                  \u003cView style={styles.list_container}\u003e\n                    { this.renderOptions(options, answer) }\n                  \u003c/View\u003e\n                \u003c/View\u003e\n              }\n            \u003c/View\u003e\n          }\n    \n          {\n            display_top_users \u0026\u0026\n            \u003cView style={styles.top_users}\u003e\n              \u003cText style={styles.big_text}\u003eTop Users\u003c/Text\u003e\n              \u003cView style={styles.list_container}\u003e\n              { this.renderTopUsers() }\n              \u003c/View\u003e\n            \u003c/View\u003e\n          }\n              \n        \u003c/View\u003e\n      );\n    }\n```\n\nHere’s the code for rendering the options. Each one executes the `placeAnswer` function when the user clicks on it. As soon as an option is selected, the icon which represents whether they’re correct or not is immediately displayed next to it: \n\n```javascript\n    renderOptions = (options, answer) =\u003e {\n      const { show_result, selected_option, disable_options } = this.state;\n    \n      return options.map((opt, index) =\u003e {\n        const letter = option_letters[index];\n        const is_selected = selected_option == letter;\n        const is_answer = (letter == answer) ? true : false; \n    \n        return (\n          \u003cTouchableOpacity disabled={disable_options} onPress={() =\u003e this.placeAnswer(index, answer)} key={index}\u003e\n            \u003cView style={styles.option}\u003e\n              \u003cText style={styles.option_text}\u003e{opt}\u003c/Text\u003e\n    \n              {\n                is_answer \u0026\u0026 show_result \u0026\u0026 is_selected \u0026\u0026 \u003cIcon name=\"check\" size={25} color=\"#28a745\" /\u003e\n              }\n              \n              {\n                !is_answer \u0026\u0026 show_result \u0026\u0026 is_selected \u0026\u0026 \u003cIcon name=\"times\" size={25} color=\"#d73a49\" /\u003e\n              }\n            \u003c/View\u003e\n          \u003c/TouchableOpacity\u003e\n        );\n      });\n    }\n```\n\nHere’s the `placeAnswer` function. This accepts the index of the selected option (0, 1, 2, or 3) and the letter of the answer. Those are used to determine if the user answered correctly or not. The answer isn’t even considered if the user missed the countdown. If they answered correctly, their total score is incremented by one and the app makes a request to the server to increment the user’s score:\n\n```javascript\n    placeAnswer = (index, answer) =\u003e {\n      \n      const selected_option = option_letters[index]; // the letter of the selected option\n      const { countdown, total_score } = this.state;\n    \n      if (countdown \u003e 0) { // \n        if (selected_option == answer) { \n          this.setState((prevState) =\u003e {\n            return {\n              total_score: prevState.total_score + 1\n            }\n          });\n      \n          axios.post(base_url + '/increment-score', {\n            username: this.myUsername\n          }).then(() =\u003e {\n            console.log('incremented score');\n          }).catch((err) =\u003e {\n            console.log('error occurred: ', e);\n          });\n        } \n      }\n    \n      this.setState({\n        show_result: true, // show whether the user answered correctly or not\n        disable_options: true, // disallow the user from selecting any of the options again\n        selected_option // the selected option (letter)\n      });\n    }\n```\n\nHere’s the code for rendering the top users:\n\n```javascript\n    renderTopUsers = () =\u003e {\n      const { top_users } = this.state;\n      return top_users.map(({ username, score }) =\u003e {\n        return (\n          \u003cView key={username}\u003e\n            \u003cText style={styles.sub_text}\u003e{username}: {score} out of 10\u003c/Text\u003e\n          \u003c/View\u003e\n        );\n      });\n    }\n```\n\n## Running the app\n\nTo run the app, you have to run the server first and expose it to the internet by using ngrok:\n\n```\n    cd server\n    yarn start\n    ~/.ngrok http 5000\n```\n\nIf you haven’t used the `db.sqlite` file I provided in the repo, you have to access `http://localhost:5000/create-db` to create the database (Note: you first have to create an empty `db.sqlite` at the root of the `server` directory). After that, access `http://localhost:5000/create-quiz` and add some quiz items. Add at least 10 items.\n\nNext, update your `src/screens/Login.js` and `src/screens/Quiz.js` file with your ngrok HTTPS URL and run the app:\n\n```\n    react-native run-android\n    react-native run-ios\n```\n\nLastly, access `http://localhost:5000/questions` to start sending the quiz items.\n\n\n## Conclusion\n\nIn this tutorial, we’ve created a multi-player quiz app using Node.js and React Native. Along the way, you learned how to use mustache templates and SQLite database within an Express app. Lastly, you learned how to use Node.js, React Native, and Pusher to easily implement a multi-player quiz app.\n\nYou can view the code on this [GitHub repo](https://github.com/anchetaWern/RNQuiz).","metaTitle":"Creating a live multiplayer quiz app in React Native","metaDescription":"Use React Native and Node to build a live cross-platform quiz app. Admins are able to add questions and start the game. Users have a short amount of time to respond. At the end, a scoreboard is displayed, showing the top player."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2WHY7OFNyluJt2UEm7tnNP","type":"Entry","createdAt":"2019-03-28T16:14:34.236Z","updatedAt":"2019-03-28T16:14:34.236Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Becoming a backend developer - Part 3: Connecting to the server from a mobile app","url":"backend-developer-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"58WBWjhcWcuAMI6qIAyiC4","type":"Entry","createdAt":"2018-12-13T20:46:00.073Z","updatedAt":"2018-12-13T20:46:36.867Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Suragch","url":"suragch","email":"studymongolian@gmail.com","twitter":"https://twitter.com/suragch","github":"https://github.com/suragch","guestWriter":true}}],"projectRepo":"https://github.com/suragch/backend_demo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1st5ugwNDbvlnFFHBadh5b","type":"Entry","createdAt":"2019-03-13T18:08:14.919Z","updatedAt":"2019-03-13T18:08:14.920Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Dart","url":"dart","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Q3oRmiXjOmcSmweY4gKY8","type":"Entry","createdAt":"2018-09-12T09:33:28.375Z","updatedAt":"2018-09-12T09:33:28.375Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flutter","url":"flutter","type":"framework","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}}],"reviewDate":"2019-03-28","description":"This is a tutorial for mobile app developers. In this three-part series, we will cover all the basics of what it takes to become a backend developer. You will create backends using Node and Dart, with mobile frontend examples using Android, Swift, and Flutter. In part three, build the frontend.","prerequisite":"You need experience in at least one of Android, iOS or Flutter development.","content":"In this three-part series, we have been covering all the basics of what it takes to become a backend developer. This is a tutorial for mobile app developers. \n\n\n- [Part 1: Foundational concepts](https://pusher.com/tutorials/backend-developer-part-1)\n- [Part 2: Building the server](https://pusher.com/tutorials/backend-developer-part-2)\n- Part 3: Connecting to the server from a mobile app\n\n\n## Introduction\n\nSo far we have already learned about REST APIs and how they use the HTTP protocol for client server communication. In the last lesson, we learned how to implement our API on the server, once using Node.js and again using Server Side Dart. I chose Node.js because it is popular and Server Side Dart because it allows Flutter developers to use Dart everywhere. However, it really doesn't matter what platform or language you chose for the backend server. Because we are using a REST API, we are able to make requests to it with Android, iOS, Futter, or any other frontend platform.\n\n![backend-mobile-1-2](//images.ctfassets.net/1es3ne0caaid/5fFYkzDLBS2G0hqW7s8kII/cac6226ef0211c8b4c10e6234705866e/backend-mobile-1-2.png)\n\nIn this tutorial, we will look at how to make a frontend client app that connects to the server we made in [part two](https://pusher.com/tutorials/backend-developer-part-2), I’ll give you three different examples: one for Android, one for iOS, and one for Flutter. Since you are already a mobile app developer, I won't go into much detail about how to create the app or build the layout. Instead I'll give you the code for making the HTTP requests. \n\nJust scroll down to the platform you are developing with. If you are a developer for a platform other than Android, iOS, or Flutter, you can look up the code for making HTTP requests on your platform and just port one of the examples below.\n\n## Prerequisites\n\nI'm assuming that you already have experience with Android, iOS, or Flutter, and that you have the development environment set up. I wrote and tested the client apps using the following software versions:\n\n\n- Android: Android Studio 3.3\n- iOS: Xcode 10.1\n- Flutter: Android Studio 3.3 with Flutter 1.2.1\n\n\n## Android client app\n\nCreate a layout similar to the image below (see [source code](https://github.com/suragch/backend_demo/blob/master/android_client/activity_main.xml)):\n\n![backend-mobile-3-1](//images.ctfassets.net/1es3ne0caaid/1baCUQQbkpRAoSEoWNrG14/d283ada58d50f1b680ca58684ad54a5d/backend-mobile-3-1.png)\n\nIn the manifest add the `INTERNET` permission (see [source code](https://github.com/suragch/backend_demo/blob/master/android_client/AndroidMainifest.xml)):\n\n```xml\n    \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n```\n\nAnd allow clear text:\n\n```xml\n    \u003capplication\n        android:usesCleartextTraffic=\"true\"\n        ...\n        \u003e\n```\n\n\u003e **Note:** You should use a secure HTTPS server in production, but in this tutorial we are using \"clear text\" HTTP. Doing this allowed me to simplify the server tutorial in part two by not having to register a certificate with a certificate authority. \n\nReplace `MainActivity.kt` with the following code (Java version [here](https://github.com/suragch/backend_demo/blob/master/android_client/MainActivity.java)):\n\n```kotlin\n    package com.example.backendclient\n    \n    import android.support.v7.app.AppCompatActivity\n    import android.os.Bundle\n    import android.os.AsyncTask\n    import android.util.Log\n    import android.view.View\n    import java.io.*\n    import java.net.HttpURLConnection\n    import java.net.URL\n    \n    private const val HOST = \"http://10.0.2.2:3000\"\n    private const val TAG = \"TAG\"\n    \n    class MainActivity : AppCompatActivity() {\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_main)\n        }\n    \n        fun makeGetAllRequest(view: View) {\n            HttpGetRequest().execute(HOST)\n        }\n    \n        fun makeGetOneRequest(view: View) {\n            val idToGet = 0\n            val url = \"$HOST/$idToGet\"\n            HttpGetRequest().execute(url)\n        }\n    \n        fun makePostRequest(view: View) {\n            val json = \"{\\\"fruit\\\": \\\"pear\\\", \\\"color\\\": \\\"green\\\"}\"\n            HttpPostRequest().execute(HOST, json)\n        }\n    \n        fun makePutRequest(view: View) {\n            val idToReplace = 0\n            val url = \"$HOST/$idToReplace\"\n            val json = \"{\\\"fruit\\\": \\\"watermellon\\\", \\\"color\\\": \\\"red and green\\\"}\"\n            HttpPutRequest().execute(url, json)\n        }\n    \n        fun makePatchRequest(view: View) {\n            val idToUpdate = 0\n            val url = \"$HOST/$idToUpdate\"\n            val json = \"{\\\"color\\\": \\\"green\\\"}\"\n            HttpPatchRequest().execute(url, json)\n        }\n    \n        fun makeDeleteRequest(view: View) {\n            val idToDelete = 0\n            val url = \"$HOST/$idToDelete\"\n            HttpDeleteRequest().execute(url)\n        }\n    \n        // GET\n        class HttpGetRequest : AsyncTask\u003cString, Void, Void\u003e() {\n            override fun doInBackground(vararg params: String): Void? {\n                val urlString = params[0]\n    \n                val myUrl = URL(urlString)\n                val connection = myUrl.openConnection() as HttpURLConnection\n                connection.requestMethod = \"GET\"\n                val result = getStringFromInputStream(connection.inputStream)\n                val statusCode = connection.responseCode\n                connection.disconnect()\n    \n                Log.i(TAG, \"GET result: $statusCode $result\")\n                return null\n            }\n        }\n    \n        // POST\n        class HttpPostRequest : AsyncTask\u003cString, Void, Void\u003e() {\n            override fun doInBackground(vararg params: String): Void? {\n                val urlString = params[0]\n                val json = params[1]\n    \n                val myUrl = URL(urlString)\n                val connection = myUrl.openConnection() as HttpURLConnection\n                connection.requestMethod = \"POST\"\n                connection.doOutput = true\n                connection.setRequestProperty(\"Content-Type\", \"application/json\")\n    \n                writeStringToOutputStream(json, connection.outputStream)\n                val result = getStringFromInputStream(connection.inputStream)\n                val statusCode = connection.responseCode\n                connection.disconnect()\n    \n                Log.i(TAG, \"POST result: $statusCode $result\")\n                return null\n            }\n        }\n    \n        // PUT\n        class HttpPutRequest : AsyncTask\u003cString, Void, Void\u003e() {\n            override fun doInBackground(vararg params: String): Void? {\n                val urlString = params[0]\n                val json = params[1]\n    \n                val myUrl = URL(urlString)\n                val connection = myUrl.openConnection() as HttpURLConnection\n                connection.requestMethod = \"PUT\"\n                connection.doOutput = true\n                connection.setRequestProperty(\"Content-Type\", \"application/json\")\n    \n                writeStringToOutputStream(json, connection.outputStream)\n                val result = getStringFromInputStream(connection.inputStream)\n                val statusCode = connection.responseCode\n                connection.disconnect()\n    \n                Log.i(TAG, \"PUT result: $statusCode $result\")\n                return null\n            }\n        }\n    \n        // PATCH\n        class HttpPatchRequest : AsyncTask\u003cString, Void, Void\u003e() {\n            override fun doInBackground(vararg params: String): Void? {\n                val urlString = params[0]\n                val json = params[1]\n    \n                val myUrl = URL(urlString)\n                val connection = myUrl.openConnection() as HttpURLConnection\n                connection.requestMethod = \"PATCH\"\n                connection.doOutput = true\n                connection.setRequestProperty(\"Content-Type\", \"application/json\")\n    \n                writeStringToOutputStream(json, connection.outputStream)\n                val result = getStringFromInputStream(connection.inputStream)\n                val statusCode = connection.responseCode\n                connection.disconnect()\n    \n                Log.i(TAG, \"PATCH result: $statusCode $result\")\n                return null\n            }\n        }\n    \n        // DELETE\n        class HttpDeleteRequest : AsyncTask\u003cString, Void, Void\u003e() {\n            override fun doInBackground(vararg params: String): Void? {\n                val urlString = params[0]\n    \n                val myUrl = URL(urlString)\n                val connection = myUrl.openConnection() as HttpURLConnection\n                connection.requestMethod = \"DELETE\"\n    \n                val result = getStringFromInputStream(connection.inputStream)\n                val statusCode = connection.responseCode\n                connection.disconnect()\n    \n                Log.i(TAG, \"DELETE result: $statusCode $result\")\n                return null\n            }\n        }\n    }\n    \n    private fun writeStringToOutputStream(json: String, outputStream: OutputStream) {\n        val bytes = json.toByteArray(charset(\"UTF-8\")) // API 19: StandardCharsets.UTF_8\n        outputStream.write(bytes)\n        outputStream.close()\n    }\n    \n    private fun getStringFromInputStream(stream: InputStream): String {\n        val text =  stream.bufferedReader().use { it.readText() }\n        stream.close()\n        return text\n    }\n```\n\nAs you can see, Android uses [HttpURLConnection](https://developer.android.com/reference/java/net/HttpURLConnection) to make HTTP requests. After opening the connection you use `setRequestMethod()` to choose the HTTP verb that you want (`GET`, `POST`, etc.). \n\nYou send the request by writing data to an output stream. After that you get the response by reading from an input stream. This should all be done in an AsyncTask to avoid blocking the UI thread.\n\nI used a raw string for the JSON in the code above. The GSON library is one option for converting JSON strings to Java objects. Check out [this tutorial](http://tutorials.jenkov.com/java-json/gson.html) for some instruction on that.\n\nWith the server that you made in [part two](https://pusher.com/tutorials/backend-developer-part-2) running, test the app in the Android emulator. In the Android Studio Logcat, note the statements that get printed after server responses:\n\n```\n    GET result: 200 [{\"fruit\":\"apple\",\"color\":\"red\"},{\"fruit\":\"banana\",\"color\":\"yellow\"}]\n    GET result: 200 {\"fruit\":\"apple\",\"color\":\"red\"}\n    POST result: 200 Item added with id 2\n    PUT result: 200 Item replaced at id 0\n    PATCH result: 200 Item updated at id 0\n    DELETE result: 200 Item deleted at id 0\n```\n\n## iOS client app\n\nCreate a [layout](https://github.com/suragch/backend_demo/blob/master/ios_client/Main.storyboard) similar to the image below:\n\n![backend-mobile-3-2](//images.ctfassets.net/1es3ne0caaid/6qtuYClCK2yHIkqw3ioOxP/2e456b33f459682c0c82abdbe60e2045/backend-mobile-3-2.png)\n\nIn the [Info.plist](https://github.com/suragch/backend_demo/blob/master/ios_client/Info.plist) file, add the following key:\n\n```xml\n    \u003ckey\u003eNSAppTransportSecurity\u003c/key\u003e\n    \u003cdict\u003e\n        \u003ckey\u003eNSAllowsArbitraryLoads\u003c/key\u003e\n        \u003ctrue/\u003e\n    \u003c/dict\u003e\n```\n\n![backend-mobile-3-3](//images.ctfassets.net/1es3ne0caaid/5sRVkgWpGj5S4hZvLG2hFA/ae1848a606e82d2e0f70cc3aa6fcc496/backend-mobile-3-3.png)\n\n\u003e **Note:** You should use a secure HTTPS server in production, but in this tutorial we are using unencrypted text with an HTTP server. Adding the key above bypasses iOS's requirement for encrypted text over a network call. Doing this allowed me to simplify the server tutorial in part two by not having to register a certificate with a certificate authority. \n\nReplace `ViewController.swift` with the following code:\n\n```swift\n    import UIKit\n    class ViewController: UIViewController {\n        \n        let host = \"http://localhost:3000\"\n    \n        // make GET (all) request\n        @IBAction func makeGetAllRequestTapped(_ sender: UIButton) {\n            \n            guard let url  = URL(string: host) else {return}\n            \n            // background task to make request with URLSession\n            let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n                guard let statusCode = (response as? HTTPURLResponse)?.statusCode \n                    else {return}\n                guard let body = data \n                    else {return}\n                guard let jsonString = String(data: body, encoding: String.Encoding.utf8) \n                    else {return}\n                \n                print(\"GET result: \\(statusCode) \\(jsonString)\")\n            }\n            \n            // start the task\n            task.resume()\n        }\n        \n        // make GET (one) request\n        @IBAction func makeGetOneRequestTapped(_ sender: UIButton) {\n            \n            let idToGet = 0;\n            let urlString = \"\\(host)/\\(idToGet)\"\n            guard let url  = URL(string: urlString) else {return}\n            \n            let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n                guard let statusCode = (response as? HTTPURLResponse)?.statusCode \n                    else {return}\n                guard let body = data \n                    else {return}\n                guard let jsonString = String(data: body, encoding: String.Encoding.utf8) \n                    else {return}\n                \n                print(\"GET result: \\(statusCode) \\(jsonString)\")\n            }\n            task.resume()\n        }\n        \n        // make POST request\n        @IBAction func makePostRequestTapped(_ sender: UIButton) {\n            \n            let dictionary = [\"fruit\" : \"pear\", \"color\" : \"green\"]\n            \n            // prepare request\n            guard let url  = URL(string: host) else {return}\n            var request = URLRequest(url: url)\n            request.httpMethod = \"POST\"\n            request.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n            guard let json = try? JSONSerialization.data(\n                withJSONObject: dictionary, options: [])\n                else {return}\n            request.httpBody = json\n            \n            let task = URLSession.shared.dataTask(with: request) { \n                (data, response, error) in\n                guard let statusCode = (response as? HTTPURLResponse)?.statusCode \n                    else {return}\n                guard let body = data \n                    else {return}\n                guard let responseString = String(data: body, encoding: .utf8) \n                    else {return}\n                print(\"POST result: \\(statusCode) \\(responseString)\")\n                \n                // If your API returns JSON you could do the following:\n                // guard let jsonString = try? JSONSerialization.jsonObject(\n                //     with: body, options: []) else {return}\n            }\n            task.resume()\n        }\n        \n        // make PUT request\n        @IBAction func makePutRequestTapped(_ sender: UIButton) {\n            \n            let dictionary = [\"fruit\" : \"watermellon\", \"color\" : \"red and green\"]\n            \n            let idToPut = 0;\n            let urlString = \"\\(host)/\\(idToPut)\"\n            \n            // prepare request\n            guard let url  = URL(string: urlString) else {return}\n            var request = URLRequest(url: url)\n            request.httpMethod = \"PUT\"\n            request.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n            guard let json = try? JSONSerialization.data(\n                withJSONObject: dictionary, options: []) \n                else {return}\n            request.httpBody = json\n            \n            let task = URLSession.shared.dataTask(with: request) { \n                (data, response, error) in\n                guard let statusCode = (response as? HTTPURLResponse)?.statusCode \n                    else {return}\n                guard let body = data \n                    else {return}\n                guard let responseString = String(data: body, encoding: .utf8) \n                    else {return}\n                print(\"PUT result: \\(statusCode) \\(responseString)\")\n            }\n            task.resume()\n        }\n        \n        // make PATCH request\n        @IBAction func makePatchRequestTapped(_ sender: UIButton) {\n            \n            let dictionary = [\"color\" : \"green\"]\n            \n            let idToPatch = 0;\n            let urlString = \"\\(host)/\\(idToPatch)\"\n            \n            // prepare request\n            guard let url  = URL(string: urlString) else {return}\n            var request = URLRequest(url: url)\n            request.httpMethod = \"PATCH\"\n            request.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n            guard let json = try? JSONSerialization.data(\n                withJSONObject: dictionary, options: []) \n                else {return}\n            request.httpBody = json\n            \n            let task = URLSession.shared.dataTask(with: request) { \n                (data, response, error) in\n                guard let statusCode = (response as? HTTPURLResponse)?.statusCode \n                    else {return}\n                guard let body = data \n                    else {return}\n                guard let responseString = String(data: body, encoding: .utf8) \n                    else {return}\n                print(\"PATCH result: \\(statusCode) \\(responseString)\")\n            }\n            task.resume()\n        }\n        \n        // make DELETE request\n        @IBAction func makeDeleteRequestTapped(_ sender: UIButton) {\n            \n            let idToDelete = 0;\n            let urlString = \"\\(host)/\\(idToDelete)\"\n            \n            // prepare request\n            guard let url  = URL(string: urlString) else {return}\n            var request = URLRequest(url: url)\n            request.httpMethod = \"DELETE\"\n            \n            let task = URLSession.shared.dataTask(with: request) { \n                (data, response, error) in\n                guard let statusCode = (response as? HTTPURLResponse)?.statusCode \n                    else {return}\n                guard let body = data \n                    else {return}\n                guard let responseString = String(data: body, encoding: .utf8) \n                    else {return}\n                print(\"DELETE result: \\(statusCode) \\(responseString)\")\n            }\n            task.resume()\n        }\n    }\n```\n\nAs you can see, iOS uses [URLSession](https://developer.apple.com/documentation/foundation/urlsession) to make HTTP requests as URLRequest. It will return a URLResponse from the server. We used JSONSerialization to convert the JSON strings to and from Swift Dictionary objects.\n\nWith the server that you made in part two running, test the app in the iOS simulator. Note the log statements that get printed in Xcode after server responses:\n\n```\n    GET result: 200 [{\"fruit\":\"apple\",\"color\":\"red\"},{\"fruit\":\"banana\",\"color\":\"yellow\"}]\n    GET result: 200 {\"fruit\":\"apple\",\"color\":\"red\"}\n    POST result: 200 Item added with id 2\n    PUT result: 200 Item replaced at id 0\n    PATCH result: 200 Item updated at id 0\n    DELETE result: 200 Item deleted\n```\n\nSee also:\n\n\n- [Uploading Data to a Website](https://developer.apple.com/documentation/foundation/url_loading_system/uploading_data_to_a_website)\n\n\n## Flutter client app\n\nGood job if you chose Flutter. You write the code once and it works for both Android and iOS. Having already made the client app for Android and iOS, I can tell you that Flutter cuts your time in half.\n\nWe will have the following layout:\n\n![backend-mobile-3-4](//images.ctfassets.net/1es3ne0caaid/xS3JZNgXyGBI4JOqxwO3d/622c3222d99ffdd12ff59d0844c40a47/backend-mobile-3-4.png)\n\nAdd the `http` dependency to your `pubspec.yaml` file.\n\n```yaml\n    dependencies:\n      http: ^0.12.0+1\n```\n\nReplace `main.dart` with the following code:\n\n```dart\n    import 'dart:io';\n    import 'package:flutter/material.dart';\n    import 'package:http/http.dart';\n    \n    void main() =\u003e runApp(MyApp());\n    \n    class MyApp extends StatelessWidget {\n      @override\n      Widget build(BuildContext context) {\n        return MaterialApp(\n          debugShowCheckedModeBanner: false,\n          home: Scaffold(\n            appBar: AppBar(title: Text('Client App (Flutter)')),\n            body: BodyWidget(),\n          ),\n        );\n      }\n    }\n    \n    class BodyWidget extends StatelessWidget {\n      @override\n      Widget build(BuildContext context) {\n        return Align(\n          alignment: Alignment.topCenter,\n          child: Padding(\n            padding: const EdgeInsets.only(top: 32.0),\n            child: SizedBox(\n              width: 200,\n              child: Column(\n                crossAxisAlignment: CrossAxisAlignment.stretch,\n                children: \u003cWidget\u003e[\n                  RaisedButton(\n                    child: Text('Make GET (all) request'),\n                    onPressed: () {\n                      _makeGetAllRequest();\n                    },\n                  ),\n                  RaisedButton(\n                    child: Text('Make GET (one) request'),\n                    onPressed: () {\n                      _makeGetOneRequest();\n                    },\n                  ),\n                  RaisedButton(\n                    child: Text('Make POST request'),\n                    onPressed: () {\n                      _makePostRequest();\n                    },\n                  ),\n                  RaisedButton(\n                    child: Text('Make PUT request'),\n                    onPressed: () {\n                      _makePutRequest();\n                    },\n                  ),\n                  RaisedButton(\n                    child: Text('Make PATCH request'),\n                    onPressed: () {\n                      _makePatchRequest();\n                    },\n                  ),\n                  RaisedButton(\n                    child: Text('Make DELETE request'),\n                    onPressed: () {\n                      _makeDeleteRequest();\n                    },\n                  ),\n                ],\n              ),\n            ),\n          ),\n        );\n      }\n    \n      static const Map\u003cString, String\u003e headers = {\"Content-type\": \"application/json\"};\n    \n      // access localhost from the emulator/simulator\n      String _hostname() {\n        if (Platform.isAndroid)\n          return 'http://10.0.2.2:3000';\n        else\n          return 'http://localhost:3000';\n      }\n    \n      // GET all\n      _makeGetAllRequest() async {\n        // get everything\n        Response response = await get(_hostname());\n        // examples of info available in response\n        int statusCode = response.statusCode;\n        String jsonString = response.body;\n        print('Status: $statusCode, $jsonString');\n      }\n    \n      // GET one\n      _makeGetOneRequest() async {\n        // only get a single item at index 0\n        int idToGet = 0;\n        String url = '${_hostname()}/$idToGet';\n        Response response = await get(url);\n        int statusCode = response.statusCode;\n        String jsonString = response.body;\n        print('Status: $statusCode, $jsonString');\n      }\n    \n      // POST\n      _makePostRequest() async {\n        // set up POST request arguments\n        String json = '{\"fruit\": \"pear\", \"color\": \"green\"}';\n        // make POST request\n        Response response = await post(_hostname(), headers: headers, body: json);\n        int statusCode = response.statusCode;\n        String body = response.body;\n        print('Status: $statusCode, $body');\n      }\n    \n      // PUT\n      _makePutRequest() async {\n        // set up PUT request arguments\n        int idToReplace = 0;\n        String url = '${_hostname()}/$idToReplace';\n        String json = '{\"fruit\": \"watermellon\", \"color\": \"red and green\"}';\n        // make PUT request\n        Response response = await put(url, headers: headers, body: json);\n        int statusCode = response.statusCode;\n        String body = response.body;\n        print('Status: $statusCode, $body');\n      }\n    \n      // PATCH\n      _makePatchRequest() async {\n        // set up PATCH request arguments\n        int idToUpdate = 0;\n        String url = '${_hostname()}/$idToUpdate';\n        String json = '{\"color\": \"green\"}';\n        // make PATCH request\n        Response response = await patch(url, headers: headers, body: json);\n        int statusCode = response.statusCode;\n        String body = response.body;\n        print('Status: $statusCode, $body');\n      }\n    \n      // DELETE\n      void _makeDeleteRequest() async {\n        // set up DELETE request argument\n        int idToDelete = 0;\n        String url = '${_hostname()}/$idToDelete';\n        // make DELETE request\n        Response response = await delete(url);\n        int statusCode = response.statusCode;\n        String body = response.body;\n        print('Status: $statusCode, $body');\n      }\n    }\n    \n    // For help converting JSON to objects in Flutter see\n    // this post https://stackoverflow.com/a/54657953\n    class Fruit {\n    \n      int id;\n      String fruit;\n      String color;\n    \n      Fruit(this.fruit, this.color);\n    \n      // named constructor\n      Fruit.fromJson(Map\u003cString, dynamic\u003e json)\n          : fruit = json['fruit'],\n            color = json['color'];\n    \n      // method\n      Map\u003cString, dynamic\u003e toJson() {\n        return {\n          'fruit': fruit,\n          'color': color,\n        };\n      }\n    }\n```\n\nWe used the `http` package to make the requests. We get back a Response object from which we can get the status code and body. Although we didn’t use it here, I added a model object at the end that included the code to convert JSON strings to and from Map objects.\n\nWith the server that you made in part two running, test the Flutter app in the Android emulator or iOS simulator. Note the log statement that Android Studio prints in the Run tab:\n\n```\n    GET result: 200 [{\"fruit\":\"apple\",\"color\":\"red\"},{\"fruit\":\"banana\",\"color\":\"yellow\"}]\n    GET result: 200 {\"fruit\":\"apple\",\"color\":\"red\"}\n    POST result: 200 Item added with id 2\n    PUT result: 200 Item replaced at id 0\n    PATCH result: 200 Item updated at id 0\n    DELETE result: 200 Item deleted at id 0\n```\n\n## Conclusion\n\nWe’ve covered a lot in this series. It’s my hope that this will be a solid start to your backend development work. Starting out on a new technology is the most difficult step. It will get easier from here. \n\nThe essential files for each of the server and client examples in this series are on [GitHub](https://github.com/suragch/backend_demo).\n\n\n## Going on\n\nYou already have a working server. However, the following topics are some things you will want to work on before your server is ready for production.\n\n### Database\n\nIn the server examples in part two, we used an array as a mock database. Later, of course, you’ll want to add a real database. The “further study” links I included at the end of both server sections tell how to do that. \n\n### HTTPS\n\nModern versions of Android and iOS require secure encrypted connections by default when accessing the internet. We bypassed that security when we made the client apps in above so that we wouldn’t have to bother registering with a [certificate authority](https://en.wikipedia.org/wiki/Certificate_authority). \n\nDon’t bypass it in your production apps, though! It’s not a lot more work to set it up on the server and you can get a free certificate from [Let’s Encrypt](https://letsencrypt.org/). (I wouldn’t recommend using a self-signed certificate.)\n\n### Authentication, validation, and testing\n\nIf you put your server online now, anyone in the world could mess your database up. It’s probably fine to leave your `GET` methods open to the world as long as there is no sensitive data, but you will surely want to add some sort of [authentication](https://nordicapis.com/3-common-methods-api-authentication-explained/) for who is allowed to `POST`, `PUT`, `PATCH`, and `DELETE`. And even when users are authenticated, never trust what they send you. Validate any data you receive.\n\n[Node.js](https://hackernoon.com/a-crash-course-on-testing-with-node-js-6c7428d3da02) and [Server Side Dart](http://dartdoc.takyam.com/articles/dart-unit-tests/) both support unit testing. You really need to write tests. The good news with backend programming is that you don’t have the UI to deal with.\n\n### Publishing\n\nWhen you are ready to deploy the server, you might consider getting a VPS running Linux. This is convenient because getting the server up and running is essentially the same as doing it on your local machine.\n\nI've found quite a few VPSs on [LowEndBox](https://lowendbox.com/) for under $20 USD per year. They’re great for learning and even for small production apps. (Every now and then a company goes out of business, though, so keep backups) \n\nIn the future when reliability and scalability become more important, you can consider deploying to one of the big-name cloud hosting providers.\n\nIt is also recommended to put a reverse proxy between your server app and the internet. Nginx works well for this. See the following links for help:\n\n\n- [Use NGINX as a Reverse Proxy](https://www.linode.com/docs/web-servers/nginx/use-nginx-reverse-proxy/)\n- [5 Performance Tips for Node.js Applications](https://www.nginx.com/blog/5-performance-tips-for-node-js-applications/)","metaTitle":"Becoming a backend developer - Part 3","metaDescription":"This is a guide for mobile app developers. In this three-part series we will cover all the basics of what it takes to become a backend developer. You will create backends using Node and Dart, with mobile frontend examples using Android, Swift and Flutter. In part three, build the frontend."}}],"defaultValue":"JavaScript","queryType":"tag","pages":33,"route":"/tutorials","query":{"tag":"JavaScript","page":"4"}}},"page":"/tutorials","query":{"tag":"JavaScript","page":"4"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=JavaScript&page=4 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:32:29 GMT -->
</html>