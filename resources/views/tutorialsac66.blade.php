<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=JavaScript&page=5 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:32:29 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">290</span> tutorials for “<span class="css-npldjc ehwuahf2">JavaScript</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials512c.html?product=Beams&amp;tag=JavaScript" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials.html" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#C223CE" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#C223CE"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="JavaScript"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/whiteboard-electron-react-part-1.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Collaboration</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a whiteboard Electron app with React - Part 1: Adding the whiteboard</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">In this two-part series, build a whiteboard app using Node, Electron and React. Users will be able to collaborate in rea...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/backend-developer-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Dart<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flutter<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Becoming a backend developer - Part 2: Building the server</h3><p class="css-k12xad e5jrto45">In this three-part series, we will cover all the basics of what it takes for a mobile app developer to become a backend ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/backend-developer-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flutter<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Becoming a backend developer - Part 1: Foundational concepts</h3><p class="css-k12xad e5jrto45">This is a tutorial series for mobile app developers. In this three-part series, we will cover all the basics of what it ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/maze-game-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Gaming<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a two-player maze game with React Native</h3><p class="css-k12xad e5jrto45">Build a two-player maze game for mobile using React Native and Node.js. Users can log in, be matched with an opponent, a...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/pusher-channels-adonis.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Adonis.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">How to use Pusher Channels with Adonis</h3><p class="css-k12xad e5jrto45">This tutorial provides an introduction to how to use Pusher Channels with Adonis.js. A sample project is provided, along...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-node-rethinkdb.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">How to build a realtime application with Node.js and RethinkDB</h3><p class="css-k12xad e5jrto45">This tutorial introduces RethinkDB, a sophisticated database solution. It provides a practical example with Node.js and ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-comments-laravel-vue.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live commenting system with Laravel and Vue.js</h3><p class="css-k12xad e5jrto45">Build a simple live comments web app using Laravel and Vue.js. Users are able to post comments, and see other comments a...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/encryption-go-channels.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Go</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">End to end encryption in Go with Pusher Channels</h3><p class="css-k12xad e5jrto45">Pusher Channels allows for end-to-end encryption. In this tutorial, learn how to use it by building a simple realtime bl...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/webpack-part-10.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Node.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">React</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Getting started with webpack - Part 10: Webpack and React.js from scratch</h3><p class="css-k12xad e5jrto45">This ten-part series provides a comprehensive introduction to webpack, with practical examples throughout. Over the cour...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials394c.html?tag=JavaScript&amp;page=4" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials700d.html?tag=JavaScript&amp;page=1" class="css-5s6711 edg0byb1">1</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorialse2e4.html?tag=JavaScript&amp;page=3" class="css-za1ua3 edg0byb1">3</a><a href="tutorials394c.html?tag=JavaScript&amp;page=4" class="css-za1ua3 edg0byb1">4</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsac66.html?tag=JavaScript&amp;page=5" class="css-2wakph edg0byb1">5</a><a href="tutorials0fbd.html?tag=JavaScript&amp;page=6" class="css-za1ua3 edg0byb1">6</a><a href="tutorials391c.html?tag=JavaScript&amp;page=7" class="css-za1ua3 edg0byb1">7</a><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials3c54.html?tag=JavaScript&amp;page=33" class="css-5s6711 edg0byb1">33</a><a href="tutorials0fbd.html?tag=JavaScript&amp;page=6" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":290,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"vvcxCOBUSHPTCIhFirmU5","type":"Entry","createdAt":"2019-03-25T17:17:58.561Z","updatedAt":"2020-06-19T13:31:54.155Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a whiteboard Electron app with React - Part 1: Adding the whiteboard","url":"whiteboard-electron-react-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/ElectronWhiteboard","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"HyJAicSHQGS4kGSOg4KqA","type":"Entry","createdAt":"2018-02-12T15:06:47.499Z","updatedAt":"2018-02-26T12:31:13.678Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Collaboration","url":"collaboration","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Od9rZziIoMG4yaQ4EAeok","type":"Entry","createdAt":"2018-02-13T11:31:10.435Z","updatedAt":"2018-02-26T12:31:10.730Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":16,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live UX","url":"live-ux","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2019-03-25","description":"In this two-part series, build a whiteboard app using Node, Electron and React. Users will be able to collaborate in realtime, drawing on a simple canvas. The app also features chat functionality. In part one, create the whiteboard.","prerequisite":"You will need Node and Yarn installed on your machine.","content":"In this tutorial, we’ll take a look at how we can build a whiteboard app using React.\n\n## Prerequisites\n\nBasic knowledge of React is required. We’ll also be using Electron, but you don’t even need to know it since we’re only using it as a container.\n\nYou need [Node](https://nodejs.org/en/) and [Yarn](https://yarnpkg.com/en/) to install packages.\n\nYou’ll also need a [Pusher app instance](https://pusher.com/channels). Enable client events on its settings because we will be triggering events directly from the client side.\n\nOptionally, you need an Ngrok account if you want to test the app with someone outside your network.\n\n\n## App overview\n\nThe whiteboard app will allow the users to communicate their ideas via a canvas similar to a physical whiteboard. Thus, it will have the following tools:\n\n- **Select** - for selecting objects in the canvas so they can be modified or removed.\n- **Pen** - for free-hand drawing.\n- **Rectangle** - for drawing rectangle shapes.\n- **Circle** - for drawing circle shapes.\n- **Text** - for adding text.\n\nHere’s what the final output for this part will look like:\n\n![electron-whiteboard-1-1](//images.ctfassets.net/1es3ne0caaid/5Im2J04E3NEn3FCzt0BXuj/38a72bd337ed43a6f761f797bcf6d98e/electron-whiteboard-1-1.gif)\n\nYou can find the code for this tutorial on its [GitHub repo](https://github.com/anchetaWern/ElectronWhiteboard).\n\nNote that I’ll be using the terms “canvas” and “whiteboard” interchangeably throughout the article, but they will mean the same thing. \n\n\n## Choosing the tool\n\nThe main challenge with building a whiteboard is the implementation of canvas. With plain JavaScript, we have a bunch of options, but only [FabricJS](http://fabricjs.com/) and [Konva](https://konvajs.github.io/) seem to fit the bill. \n\nThe next step is to find out if any of these libraries have decent React integration. Of the two, only Konva meets the requirement with its [React Konva](https://github.com/konvajs/react-konva) library. \n\nThe only problem is I don’t have prior Konva experience and the various elements (for example, rectangle and circle) are actually rendered using components. There’s also no free-drawing tool which is often the most important. \n\nFinally, I found this [React Sketch](https://github.com/tbolis/react-sketch) package from [Thomas](https://github.com/tbolis). It’s exactly what we need to quickly create a whiteboard app. And it uses FabricJS behind the scenes so I know that it’s going to be good since I previously used FabricJS on another project.\n\n\n## Bootstrapping the app\n\nNow that you know why we ended up using React Sketch, it’s time to start building the app. I’ve already created a starter project which has navigation and all the styles already set up. This will serve as the starting point for this tutorial. Go ahead and clone it on your working directory:\n\n```\n    git clone https://github.com/anchetaWern/ElectronWhiteboard\n```\n\nSwitch to the `starter` branch and install the dependencies:\n\n```\n    git checkout starter\n    yarn\n```\n\n## Extending the React Sketch package\n\nIn this section, we’ll extend the React Sketch package in order for it to be able to trigger client events when a whiteboard object is created, updated, or removed. \n\nThis is an optional section since I’ve already included the compiled version of the updated package in the `node_modules/react-sketch/dist` folder of the [part1 branch](https://github.com/anchetaWern/ElectronWhiteboard/blob/part1/node_modules/react-sketch/dist). \n\nIf you’re planning to make use of the same package in the future or you want to learn how the package works, I encourage you to follow along. Otherwise, simply skip to the next section.\n\nIf you decide to skip this section, you need to copy [this file](https://github.com/anchetaWern/ElectronWhiteboard/blob/part1/node_modules/react-sketch/dist/index.js) over to the `node_modules/react-sketch/dist` directory of the project. \n\n### Installing the dependencies\n\nIf you’re still here, the next step is to clone the React Sketch package so we can update it accordingly:\n\n```\n    git clone https://github.com/tbolis/react-sketch.git\n```\n\nIf you’re on Mac, you need to install [Macports](https://guide.macports.org/chunked/installing.macports.html). This software allows you to install various open source software that’s required to compile FabricJS. Go ahead and download the [installer file from this page](https://guide.macports.org/chunked/installing.macports.html) and install it on your machine. Once it’s installed, you need to install the following packages via Macports:\n\n```\n    sudo port install pkgconfig cairo pango libpng jpeg giflib libsrvg\n```\n\nThese are all required to compile FabricJS.\n\nIf you’re on Ubuntu or any other Linux distribution, you won’t have any problem because these open-source tools are native to Linux. But if you don’t have it, you can simply install it via your default way of installing software.\n\nFor Windows, you need to install Node 8.11 because it’s required by [windows-build-tools](https://www.npmjs.com/package/windows-build-tools). This will install Python 2.7 and Visual Studio build tools on your machine:\n\n```\n    npm install -g windows-build-tools\n```\n\nYou also need [node-gyp](https://github.com/nodejs/node-gyp):\n\n```\n    npm install -g node-gyp\n```\n\n### Updating the code\n\nWe’re now ready to update the code. Start by declaring the additional props that we will be supplying to this component:\n\n```javascript\n    // react-sketch/src/SketchField.jsx\n    static propTypes = {\n      // \u003cexisting code\u003e\n      style: PropTypes.object,\n      \n      // add these:\n      onUpdate: PropTypes.func, // function to execute when an object is modified\n      username: PropTypes.string, // username of the current user\n      shortid: PropTypes.func // helper for generating random unique IDs for objects\n    }\n```\n\nNext, update the `_onObjectAdded` function to add a unique ID for an object that was created. Then execute the `onUpdate` function that we will pass as props later on:\n\n```javascript\n    _onObjectAdded = (e) =\u003e {\n      // \u003cexisting code\u003e\n      this._history.keep([obj, state, state])\n      \n      // add these:\n      if (!obj.sender) { \n        const id = this.props.shortid.generate(); \n        Object.assign(obj, { id });\n        this.props.onUpdate(JSON.stringify(obj), 'add', this.props.username, id); \n      }\n    }\n```\n\nThe above function is automatically triggered whenever a new object is added to the canvas. That’s why it’s the perfect place to execute the function that will update the UI of all the other users in the channel. \n\nNote that we’re checking for the non-existence of the `sender` property (username of the user who added the object) in the object before we trigger the function for updating the UI of the other users because it will be a catastrophe if we don’t. \n\nWe already know that the `_onObjectAdded` function is automatically executed every time a new object is added. So if we’re not checking for the existence of the `sender` property, `this.props.onUpdate` will basically ping-pong between the users in the channel. \n\nAs you’ll see in the `src/screens/Whiteboard.js` file later, the `sender` property is being added to the object when the event for updating the canvas (`client-whiteboard-updated`) is received. This effectively prevents the receiver from triggering the same event to all the other users. \n\nDo the same for the `_onObjectModified` function. This function is automatically executed every time an object is updated:\n\n```javascript\n    _onObjectModified = (e) =\u003e {\n      // \u003cexisting code\u003e  \n      this._history.keep([obj, prevState, currState]);\n      // add these:\n      if (!obj.sender) {\n        let strObj = JSON.stringify(obj);\n        this.props.onUpdate(strObj, 'update', this.props.username, obj.id);\n      }\n    }\n```\n\nNext, add a function for getting the currently selected object. This will get called from the `src/screens/Whiteboard.js` file later to get the `id` of the currently selected object for removal. \n\nAs you’ve seen in the `_onObjectAdded` function earlier, this is a unique ID assigned to the object. By using it, all the other users can find the object so they can also remove it from their canvas:\n\n```javascript\n    getSelected = () =\u003e {\n      let canvas = this._fc;\n      let activeObj = canvas.getActiveObject();\n      return activeObj;\n    }\n```\n\nThe `setSelected` function is used for programmatically setting an active (currently selected) object in the canvas. We will call it when the other users in the channel receive the event for updating the whiteboard. \n\nIf the event has a type of `remove`, this function sets the object with the `id` passed in the event as active. From there, we simply use the existing `removeSelected` function to remove the object from the canvas:\n\n```javascript\n    setSelected = (id) =\u003e {\n      let canvas = this._fc;\n      var objToSelect = canvas.getObjects().find((o) =\u003e {\n        return id == o.id;\n      });\n      canvas.setActiveObject(objToSelect);\n      canvas.requestRenderAll();\n    }\n```\n\nNext, add a function for programmatically adding an object to the canvas. This gets fired on all the other users in the channel every time a user adds a new object. Note that each object type has a different way of initialization:\n\n```javascript\n    addObject = (obj) =\u003e {\n    \n      let canvas = this._fc;\n      let shapeData = JSON.parse(obj);\n      \n      let shape = null;\n      const type = this._capsFirstLetter(shapeData.type);\n      if (type == 'Path') {\n        let string_path = '';\n        shapeData.path.forEach((x) =\u003e {\n          string_path += x.join(' ');\n        });\n      \n        shape = new fabric.Path(string_path);\n        delete shapeData.path;\n        shape.set(shapeData);\n      } else if (type == 'I-text') {\n        shape = new fabric.Text(shapeData.text); \n        delete shapeData.text;\n        shape.set(shapeData);\n      } else {\n        // for Rectangle and Circle objects\n        shape = new fabric\\[type\\](shapeData);\n      }\n       \n      canvas.add(shape);\n    }\n```\n\nHere’s the `_capsFirstLetter` function. It’s used to convert the first letter of a string to uppercase so it matches an actual [FabricJS object type](http://fabricjs.com/fabric-intro-part-1#objects):\n\n```javascript\n    _capsFirstLetter = (str) =\u003e {\n      return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n```\n\nNext, add the function for modifying existing objects. This gets called every time an existing object is updated by another user in the channel:\n\n```javascript\n    modifyObject = (obj) =\u003e {\n      \n      let objData = JSON.parse(obj);\n      let canvas = this._fc;\n    \n      var objToModify = canvas.getObjects().find((o) =\u003e {\n        return objData.id == o.id;\n      });\n      objToModify.set(objData); // update the object\n      objToModify.setCoords(); // useful if the object's coordinates in the canvas also changed (usually by moving)\n      canvas.requestRenderAll(); // refresh the canvas so changes will appear\n    }\n```\n\nNext, update the `addText` function to include the `id` to the object. This `id` will be passed from the `src/screens/Whiteboard.js` file later:\n\n```javascript\n    addText = (text, options = {}) =\u003e {\n      // \u003cexisting code\u003e\n      Object.assign(options, opts);\n      iText.set({\n        'id': options.id, // add this\n        // \u003cexisting code\u003e\n      });\n    }\n```\n\n### Building the package\n\nNow we’re ready to install all the dependencies and build the package:\n\n```\n    yarn\n    yarn prebuild\n    yarn build\n```\n\nThis generates a `dist/index.js` file. Copy that file and replace the `node_modules/react-sketch/dist/index.js` file inside the `ElectronWhiteboard` folder with it to update React Sketch in your project. \n\nRemember to do this before you compile the ElectronWhiteboard project using `yarn start` or `yarn build` so it uses the updated version of the package instead of the original one. You can also add a build script to automatically do that if you want.\n\n\n## Login screen\n\nCreate a  `src/screens/Login.js` file and add the following: \n\n```javascript\n    import React, { Component } from \"react\";\n    import { Container, Row, Col, Button, Input } from 'reactstrap';\n    import Pusher from \"pusher-js\";\n    \n    import uniquename from \"../helpers/uniquename\";\n    \n    const channel_name = uniquename();\n    \n    const PUSHER_APP_KEY = process.env.REACT_APP_PUSHER_APP_KEY;\n    const PUSHER_APP_CLUSTER = process.env.REACT_APP_PUSHER_APP_CLUSTER;\n    const BASE_URL = \"http://localhost:5000\";\n    \n    class LoginScreen extends Component {\n    \n      state = {\n        myUsername: \"\",\n        channelName: channel_name,\n        isLoading: false\n      }\n    \n      constructor(props) {\n        super(props);\n        this.pusher = null;\n        this.group_channel = null; // channel for communicating changes to the canvas\n      }\n    \n      // next: add render function\n    \n    }\n```\n\nNext, render the login UI. This will ask for the user’s username and channel they want to enter. Note that when logging in, the channel doesn’t already need to exist:\n\n```javascript\n    render() {\n      return (\n        \u003cContainer\u003e\n          \u003cRow\u003e\n            \u003cCol lg={12}\u003e\n              \u003cdiv className=\"centered\"\u003e\n                \u003cdiv className=\"textInputContainer\"\u003e\n                  \u003cInput \n                    type=\"text\"\n                    placeholder=\"myUsername\"\n                    onChange={this.onUpdateText}\n                    value={this.state.myUsername} /\u003e\n                \u003c/div\u003e\n    \n                \u003cdiv className=\"textInputContainer\"\u003e\n                  \u003cInput \n                    type=\"text\"\n                    placeholder=\"channelName\"\n                    onChange={this.onUpdateText}\n                    value={this.state.channelName} /\u003e\n                \u003c/div\u003e\n    \n                \u003cdiv className=\"buttonContainer\"\u003e\n                  \u003cButton \n                    type=\"button\" \n                    color=\"primary\" \n                    onClick={this.login} \n                    disabled={this.state.isLoading} \n                    block\u003e\n                      {this.state.isLoading ? \"Logging in…\" : \"Login\"}\n                  \u003c/Button\u003e\n                \u003c/div\u003e\n    \n              \u003c/div\u003e\n            \u003c/Col\u003e\n          \u003c/Row\u003e\n        \u003c/Container\u003e\n      );\n    }\n```\n\nHere’s the function for updating the value of the text fields:\n\n```javascript\n    onUpdateText = (evt) =\u003e {\n      const field = evt.target.getAttribute(\"placeholder\");\n      this.setState({\n        [field]: evt.target.value\n      });\n    };\n```\n\nWhen the user logs in, we authenticate them with Pusher so they can trigger events from the client side. Once authenticated, we subscribe them to a common channel where all the changes in the whiteboard will be communicated:\n\n```javascript\n    login = () =\u003e {\n    \n      const { myUsername, channelName } = this.state;\n    \n      this.setState({\n        isLoading: true\n      });\n    \n      this.pusher = new Pusher(PUSHER_APP_KEY, {\n        authEndpoint: `${BASE_URL}/pusher/auth`,\n        cluster: PUSHER_APP_CLUSTER,\n        encrypted: true\n      });\n    \n      this.group_channel = this.pusher.subscribe(`private-group-${channelName}`);\n      this.group_channel.bind(\"pusher:subscription_error\", (status) =\u003e {\n        console.log(\"error subscribing to group channel: \", status);\n      });\n    \n      this.group_channel.bind(\"pusher:subscription_succeeded\", () =\u003e {\n        console.log(\"subscription to group succeeded\");\n        \n        // navigate to the whiteboard screen\n        this.props.navigation.navigate(\"Whiteboard\", {\n          myUsername,\n          pusher: this.pusher,\n          group_channel: this.group_channel\n        });\n    \n      });\n    \n    }\n```\n\nDon’t forget to add a `.env` file at the project root. This contains your Pusher app credentials:\n\n```\n    REACT_APP_PUSHER_APP_KEY=\"YOUR PUSHER APP KEY\"\n    REACT_APP_PUSHER_APP_CLUSTER=\"YOUR PUSHER APP CLUSTER\"\n```\n\n### Unique name helper\n\nHere’s the code for the unique name helper:\n\n```javascript\n    // src/helpers/uniquename.js\n    var generateName = require(\"sillyname\");\n    \n    const generateUsername = () =\u003e {\n      const min = 10;\n      const max = 99;\n      const number = Math.floor(Math.random() * (max - min + 1)) + min;\n      const username = generateName().replace(\" \", \"_\") + number;\n      return username;\n    };\n    \n    export default generateUsername;\n```\n\n## Whiteboard screen\n\nNow we’re ready to add the code for the Whiteboard screen. Create a `src/screens/Whiteboard.js` file and add the following:\n\n```javascript\n    import React, { Component } from \"react\";\n    import { Container, Row, Col, Button, Input } from 'reactstrap';\n    import { SketchField, Tools } from 'react-sketch';\n    \n    import { FaMousePointer, FaPen, FaCircle, FaSquare, FaTrash } from 'react-icons/fa';\n    \n    import shortid from 'shortid'; // for generating unique IDs\n```\n\nNext, initialize the state and the instance variables. `this.tools` contains the tools that the users can use to draw objects in the whiteboard. This corresponds to the [object types](http://fabricjs.com/fabric-intro-part-1#objects) available in FabricJS:\n\n```javascript\n    class WhiteboardScreen extends Component {\n    \n      state = {\n        text: '',\n        myUsername: '',\n        tool: Tools.Pencil\n      }\n      \n      constructor(props) {\n        super(props);\n      \n        this.tools = [\n          {\n            name: 'select',\n            icon: \u003cFaMousePointer /\u003e,\n            tool: Tools.Select\n          },\n          {\n            name: 'pencil', \n            icon: \u003cFaPen /\u003e,\n            tool: Tools.Pencil\n          },\n          {\n            name: 'rect',\n            icon: \u003cFaSquare /\u003e,\n            tool: Tools.Rectangle\n          },\n          {\n            name: 'circle',\n            icon: \u003cFaCircle /\u003e,\n            tool: Tools.Circle\n          }\n        ];\n      \n        this.auto_create_tools = ['circle', 'rect']; // tools that will automatically create their corresponding object when selected\n      \n        // next: add settings for auto-created objects\n      }\n    \n      // next: add componentDidMount\n    }\n```\n\nNext, add the default settings for the objects that will be automatically created upon selection. Note that the user can always modify the object afterward so it’s safe to create them with some default settings:\n\n```javascript\n    this.initial_objects = {\n      'circle': { \n        radius: 75, \n        fill: 'transparent', \n        stroke: '#000', \n        strokeWidth: 3, \n        top: 60, \n        left: 500 \n      },\n      \n      'rect': { \n        width: 100, \n        height: 50, \n        fill: 'transparent', \n        stroke: '#000', \n        strokeWidth: 3, \n        top: 100, \n        left: 330 \n      }\n    }\n```\n\nOnce the component is mounted, we get the navigation params that were passed from the login screen earlier:\n\n```javascript\n    componentDidMount() {\n    \n      const { navigation } = this.props;\n      this.myUsername = navigation.getParam(\"myUsername\");\n      this.pusher = navigation.getParam(\"pusher\");\n      this.group_channel = navigation.getParam(\"group_channel\");\n    \n      this.setState({\n        myUsername: this.myUsername\n      });\n    \n      // next: add code for listening for canvas updates\n    }\n```\n\nNext, we listen for the event triggered by the user who updates the canvas. Every time this gets fired, we call the `textGatherer` function. This is a [JavaScript closure](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures) that allows us to create an internal scope for storing payload data. \n\nWe’re doing this because not all messages contain all the data we need in order to update the canvas. A single object update or creation may require the use of five or more messages in order to send its full data. This is necessary because of Pusher’s 10KB per message limit which we’ll talk about later. \n\nGoing back to the code below, we check for the `is_final` property in the `payload` before we can start processing the message. Having this property in the message means that this is the last part of the message. Only then can we get the contents accumulated by the closure and convert it to an object. \n\nThat way, we can assign additional properties to it before we convert it back to a JSON string so we can pass it to the `addObject` and `modifyObject` functions:\n\n```javascript\n    let textGatherer = this._gatherText();\n    \n    this.group_channel.bind('client-whiteboard-updated', (payload) =\u003e {\n      textGatherer(payload.data);\n    \n      if (payload.is_final) {\n        const full_payload = textGatherer(); // get the gathered text\n        let obj = '';\n        if (full_payload) {\n          obj = JSON.parse(full_payload);\n    \n          if (payload.id) {\n            Object.assign(obj, { id: payload.id, sender: payload.sender });\n          } else {\n            Object.assign(obj, { sender: payload.sender });\n          }\n        }\n        \n        if (payload.action === 'add') {\n          this._sketch.addObject(JSON.stringify(obj));\n        } else if(payload.action === 'update') {\n          this._sketch.modifyObject(JSON.stringify(obj));\n        } else if(payload.action === 'remove') {\n          this._sketch.setSelected(payload.id);\n          this._sketch.removeSelected();\n        }\n    \n        textGatherer = this._gatherText(); // reset to an empty string\n      }\n    \n    });\n```\n\nHere’s the code for the `_gatherText` function:\n\n```javascript\n    _gatherText = () =\u003e {\n      let sentence = '';\n      return (txt = '') =\u003e {\n       return sentence += txt;\n      }\n    }\n```\n\nNext, render the UI. This is where we make use of the `SketchField` component that we updated earlier (if you followed along). `this._sketch` contains the reference to the component itself, it allows us to use methods from within the component class. `tool` is the tool that’s used to draw something on the canvas. `onUpdate`, `username`, and `shortid` are the custom ones (they’re not from the original library) we added earlier. Additionally, we have a tool for removing objects and adding text:\n\n```javascript\n    render() {\n      return (\n        \u003cContainer fluid\u003e\n          \u003cRow\u003e\n            \u003cCol lg={9}\u003e\n              {\n                this.state.myUsername \u0026\u0026\n                \u003cSketchField\n                  className=\"canvas\"\n                  ref={c =\u003e (this._sketch = c)}\n                  width='1024px'\n                  height='768px'\n                  tool={this.state.tool}\n                  lineColor='black'\n                  lineWidth={3}\n                  onUpdate={this.sketchUpdated}\n                  username={this.state.myUsername}\n                  shortid={shortid} /\u003e\n              }\n            \u003c/Col\u003e\n    \n            \u003cCol lg={3} className=\"Sidebar\"\u003e\n              \u003cdiv className=\"tools\"\u003e\n    \n                {this.renderTools()}\n    \n                \u003cdiv className=\"tool\"\u003e\n                  \u003cButton \n                    color=\"danger\" \n                    size=\"lg\" \n                    onClick={this.removeSelected} \n                  \u003e\n                    \u003cFaTrash /\u003e\n                  \u003c/Button\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n              \n              \u003cdiv\u003e\n                \u003cdiv className=\"textInputContainer\"\u003e\n                  \u003cInput \n                    type=\"textarea\" \n                    name=\"text_to_add\" \n                    id=\"text_to_add\" \n                    placeholder=\"Enter text here\" \n                    value={this.state.text}\n                    onChange={this.onUpdateText} /\u003e\n                  \u003cdiv className=\"buttonContainer\"\u003e\n                    \u003cButton type=\"button\" color=\"primary\" onClick={this.addText} block\u003eAdd Text\u003c/Button\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n    \n            \u003c/Col\u003e  \n          \u003c/Row\u003e\n        \u003c/Container\u003e\n      );\n    }\n```\n\nHere’s the function for rendering the buttons for picking the tools:\n\n```javascript\n    renderTools = () =\u003e {\n      return this.tools.map((tool) =\u003e {\n        return (\n          \u003cdiv className=\"tool\" key={tool.name}\u003e\n            \u003cButton \n              color=\"secondary\" \n              size=\"lg\" \n              onClick={this.pickTool} \n              data-name={tool.name}\n              data-tool={tool.tool}\n            \u003e\n              {tool.icon}\n            \u003c/Button\u003e\n          \u003c/div\u003e\n        );\n      });\n    }\n```\n\nThe `pickTool` function is executed when any of the buttons is clicked. This will simply update the value of `tool` in the state. But if the selected tool is one of those “auto-create” ones, we generate a unique ID and add it as a property to the default object settings (`this.initial_objects`) before we add it to the canvas. \n\nWe also change the tool back to the select tool so the user can select the object and start modifying it to their liking:\n\n```javascript\n    pickTool = (event) =\u003e {\n      const button = event.target.closest('button');\n      const tool = button.getAttribute('data-tool');\n      const tool_name = button.getAttribute('data-name');\n    \n      this.setState({\n        tool\n      }, () =\u003e {\n        if (this.auto_create_tools.indexOf(tool_name) !== -1) {\n         \n          const obj = this.initial_objects[tool_name]; // get the initial object settings\n          const id = shortid.generate(); // generate a random unique ID\n          Object.assign(obj, { id: id, type: tool_name }); // add the ID to the object\n          \n          this._sketch.addObject(JSON.stringify(obj)); // add the object to the canvas\n        \n          // change the tool back to select\n          setTimeout(() =\u003e {\n            this.setState({\n              tool: Tools.Select \n            });\n          }, 500);\n    \n        }\n    \n      });\n    }\n    \n    // next: add onUpdateText\n```\n\nNext, add the function for updating the value of the text field for entering the text to be added to the canvas:\n\n```javascript\n    onUpdateText = (event) =\u003e {\n      this.setState({\n        text: event.target.value\n      });\n    }\n    \n    // next: add addText\n```\n\nWhen the button for adding a text is clicked, we call the `addText` method from inside the `SketchField` component. This accepts the text value to be added, and an optional object containing additional options for the text. In this case, we’re simply using it to pass the unique object ID:\n\n```javascript\n    addText = () =\u003e {\n      if (this.state.text) {\n        const id = shortid.generate();\n        this._sketch.addText(this.state.text, { id }); // add a text object to the canvas\n      \n        this.setState({\n          text: ''\n        });\n      }\n    }\n    \n    // next: add sketchUpdated function\n```\n\nNext is the `sketchUpdated` function. This function is called every time an object is added, modified, or removed from the canvas. It uses the `updateOtherUsers` function to publish the changes to all the other users on the channel. But before doing so, it first splits up the object based on a specific length. \n\nAs mentioned earlier, Pusher has a [10KB limit for publishing messages](https://support.pusher.com/hc/en-us/articles/202046553-What-is-the-message-size-limit-when-publishing-a-message-). This is plenty for the Circle, Rectangle, and Text objects but not for the path (free-drawing) object. \n\nIt’s considered a complex shape so it takes a lot more data to describe it. Which means that the 10KB limit is not enough. So the solution is to split up the `obj` into multiple parts. \n\nEach part contains a specific number of characters. In this case, we’re using 8,000 because 10KB is roughly 10,000 characters. The extra 2,000 is for all the other data that we’re publishing. For the final part, we simply add an `is_final` property to the `payload` to signal the receiver that the message is ready to be assembled:\n\n```javascript\n    sketchUpdated = (obj, action, sender, id = null) =\u003e {\n      if (this.state.myUsername) {\n        \n        let length_per_part = 8000; // maximum number of characters that can be alloted to a FabricJS object\n        let loop_count = Math.ceil(obj.length / length_per_part);\n    \n        let from_str_index = 0;\n        for (let x = 0; x \u003c loop_count; x++) {\n          const str_part = obj.substr(from_str_index, length_per_part);\n    \n          const payload = {\n            action: action,\n            id: id,\n            data: str_part,\n            sender: this.state.myUsername\n          };\n    \n          if (x + 1 === loop_count) { // if this is the final part\n            Object.assign(payload, { is_final: true });\n          }\n          \n          this.updateOtherUsers(payload);\n          from_str_index += length_per_part;\n        }\n      }\n    }\n```\n\nHere’s the `updateOtherUsers` function:\n\n```javascript\n    updateOtherUsers = (payload) =\u003e {\n      this.group_channel.trigger('client-whiteboard-updated', payload);\n    }\n```\n\nLastly, we have the `removeSelected` function. This is where we get the currently selected object and publish its `id` to all the other users in the channel:\n\n```javascript\n    removeSelected = () =\u003e {\n      const activeObj = this._sketch.getSelected();\n      \n      const payload = {\n        action: 'remove',\n        is_final: true,\n        id: activeObj.id,\n        sender: this.state.myUsername\n      };\n    \n      this.updateOtherUsers(payload);\n      this._sketch.removeSelected(); // remove the object from the user's canvas\n    }\n```\n\n## Server code\n\nHere’s the server code. Right now, we’re simply using it to authenticate the user with Pusher so they can send client events:\n\n```javascript\n    // server/server.js\n    var express = require(\"express\");\n    var bodyParser = require(\"body-parser\");\n    var Pusher = require(\"pusher\");\n    const cors = require(\"cors\");\n    \n    require(\"dotenv\").config();\n    \n    var app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use(cors());\n    \n    var pusher = new Pusher({\n      appId: process.env.APP_ID,\n      key: process.env.APP_KEY,\n      secret: process.env.APP_SECRET,\n      cluster: process.env.APP_CLUSTER\n    });\n    \n    // for checking if the server works\n    app.get(\"/\", (req, res) =\u003e {\n      res.send(\"all good...\");\n    });\n    \n    app.post(\"/pusher/auth\", (req, res) =\u003e {\n      const socketId = req.body.socket_id;\n      const channel = req.body.channel_name;\n      console.log(\"authing...\");\n      var auth = pusher.authenticate(socketId, channel);\n      return res.send(auth);\n    });\n    \n    var port = process.env.PORT || 5000;\n    app.listen(port);\n```\n\nDon’t forget to update the `server/.env` file to include your Pusher app credentials:\n\n```\n    APP_ID=\"YOUR PUSHER APP ID\"\n    APP_KEY=\"YOUR PUSHER APP KEY\"\n    APP_SECRET=\"YOUR PUSHER APP SECRET\"\n    APP_CLUSTER=\"YOUR PUSHER APP CLUSTER\"\n```\n\n## Running the app\n\nAt this point, you can now run the app. Start by running the server:\n\n```\n    cd server\n    node server.js\n```\n\nOptionally, you can use ngrok so you can test the app with someone outside your network. Don’t forget to update the base URL in the login screen if you do so:\n\n```javascript\n    // src/screens/Login.js\n    const BASE_URL = \"http://localhost:5000\";\n```\n\nFinally, run the app itself:\n\n```\n    yarn start\n    yarn electron-dev\n```\n\n## Conclusion\n\nIn this tutorial, we learned how to use FabricJS and React Sketch library to create a whiteboard app in React. Stay tuned for [part two](https://pusher.com/tutorials/whiteboard-electron-react-part-2) where we add a group chat to the whiteboard so the users can talk about what they’re trying to sketch. \n\nYou can find the code for this tutorial on its [GitHub repo](https://github.com/anchetaWern/ElectronWhiteboard).","metaTitle":"Create a whiteboard Electron app with React - Part 1","metaDescription":"In this two-part series, build a whiteboard app using Node, Electron and React. Users will be able to collaborate in realtime, drawing on a simple canvas. The app also features chat functionality. In part one, create the whiteboard."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3K4M08vitNFw90L1Urqnuj","type":"Entry","createdAt":"2019-03-22T18:25:24.515Z","updatedAt":"2019-03-22T18:25:24.515Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Becoming a backend developer - Part 2: Building the server","url":"backend-developer-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"58WBWjhcWcuAMI6qIAyiC4","type":"Entry","createdAt":"2018-12-13T20:46:00.073Z","updatedAt":"2018-12-13T20:46:36.867Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Suragch","url":"suragch","email":"studymongolian@gmail.com","twitter":"https://twitter.com/suragch","github":"https://github.com/suragch","guestWriter":true}}],"projectRepo":"https://github.com/suragch/backend_demo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1st5ugwNDbvlnFFHBadh5b","type":"Entry","createdAt":"2019-03-13T18:08:14.919Z","updatedAt":"2019-03-13T18:08:14.920Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Dart","url":"dart","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Q3oRmiXjOmcSmweY4gKY8","type":"Entry","createdAt":"2018-09-12T09:33:28.375Z","updatedAt":"2018-09-12T09:33:28.375Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flutter","url":"flutter","type":"framework","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}}],"reviewDate":"2019-03-22","description":"In this three-part series, we will cover all the basics of what it takes for a mobile app developer to become a backend developer. You will create backends using Node and Dart, with mobile frontend examples using Android, Swift, and Flutter.","prerequisite":"You need experience in at least one of Android, iOS or Flutter development.","content":"This is a guide for mobile app developers. In this three-part series we are covering all the basics of what it takes to become a backend developer.\n\n\n- [Part 1: Foundational concepts](https://pusher.com/tutorials/backend-developer-part-1)\n- Part 2: Building the server \n- Part 3: Connecting to the server from a mobile app\n\n\n## Introduction\n\nIn the [first tutorial](https://pusher.com/tutorials/backend-developer-part-1) we went over background knowledge related to client-server communication. This included URIs, HTTP, REST APIs, and JSON. If any of these topics are unfamiliar to you, go back and review them. \n\nNow, let’s build a server! \n\n## Prerequisites\n\nI'm not assuming you have any backend server experience, but I won't be repeating online documentation, so you will need to be able to following the installation directions from the links I give you. \n\nI will be using [Visual Studio Code](https://code.visualstudio.com/) to do the server programming. Feel free to use another IDE if you prefer.\n\n\n## Building the backend\n\nFor development purposes, we are going to install the server software on our local machine and have it communicate directly with our mobile app running in an emulator. \n\nBelow are two examples of a backend server: Node.js and Server-Side Dart. You only need to choose one. [Node.js](https://nodejs.org/) is very [popular](https://insights.stackoverflow.com/trends?tags=node.js) and you write the server code in JavaScript. [Server Side Dart](https://www.dartlang.org/server) is not nearly as popular as Node.js, but for Flutter developers the advantage is that you can use the same language for the frontend and the backend. It really doesn't matter which one you choose, but if you can't decide, go with Node.js.\n\n\n## Backend example one: Node.js\n\n\n\u003e **Note:** This tutorial was tested with Node.js 10.15.1\n\n### Install Node.js\n\nGo to [nodejs.org](https://nodejs.org) to download and install Node.js. \n\nThe [Getting Started Guide](https://nodejs.org/en/docs/guides/getting-started-guide/) shows the code for a basic HTTP server. It doesn’t explain the code, though, so I have added comments below:\n\n```javascript\n    // The require() function loads modules in Node.js. \n    // A module is code that is in another file.\n    // 'http' is a builtin module in Node.js. It allows data transfer\n    // using the HTTP protocol and enables setting up an HTTP server.\n    const http = require('http');\n    \n    // During development we will use the localhost.\n    const hostname = '127.0.0.1';\n    const port = 3000;\n    \n    // set up an http server\n    // Two parameters are passed in:\n    //     req = request (from the client)\n    //     res = response (from the server)\n    const server = http.createServer((req, res) =\u003e {\n    \n      // A status code of 200 means OK (A 404 would mean Not Found)\n      res.statusCode = 200;\n    \n      // A header adds additional information. \n      // Here we are using a name-value pair to set the\n      // media type (MIME type) as plain text (as opposed to html).\n      res.setHeader('Content-Type', 'text/plain');\n    \n      // This writes a message and then ends the response.\n      res.end('Hello World\\n');\n    });\n    \n    // This causes the server to listen for requests from clients on \n    // the hostname and port that we defined above.\n    server.listen(port, hostname, () =\u003e {\n      console.log(`Server running at http://${hostname}:${port}/`);\n    });\n```\n\nGo ahead and test the code by running the app as described in the Getting Started Guide. You should see “Hello World” in the browser window when you navigate to http://localhost:3000.\n\n### Implement our API\n\nIn Part 1 [ADD LINK] I told you the REST API that we were going to make would look like this:\n\n```\n    GET http://localhost:3000/              // get all items\n    GET http://localhost:3000/id            // get item at id\n    POST http://localhost:3000/             // create new item\n    PUT http://localhost:3000/id            // replace item at id\n    PATCH http://localhost:3000/id          // update item at id\n    DELETE http://localhost:3000/id         // delete item at id\n```\n\nOur client app that we will make in Part 3 is going to look like this:\n\n![backend-mobile-2-1](//images.ctfassets.net/1es3ne0caaid/7MvuGc4TMFanlAXX9KNXX7/a80f94db1eb63c5146ad64dc2daefd89/backend-mobile-2-1.png)\n\nSo we need to make our server handle all of these requests. First go to the terminal and create a new directory for our Node.js project.\n\n```\n    mkdir nodejs_server\n    cd nodejs_server\n```\n\nThe way to create a new project is to use the Node Package Manager (npm). Run the following command and accept the default values for everything. (If you need to edit this info later you can open `package.json`.)\n\n```\n    npm init\n```\n\nWe are also going to use the [Express](https://expressjs.com/) framework, which simplifies a lot of the HTTP protocol handling.\n\n```\n    npm install express --save\n```\n\nNow create the server file that we named in the `npm init` step above:\n\n```\n    touch index.js\n```\n\nOpen it in an editor (I'm using [VSCode](https://code.visualstudio.com/)), and paste in the following:\n\n```javascript\n    // nodejs_server/index.js\n    \n    var express = require('express');\n    var bodyParser = require('body-parser');\n    var app = express();\n    \n    // bodyParser is a type of middleware\n    // It helps convert JSON strings\n    // the 'use' method assigns a middleware\n    app.use(bodyParser.json({ type: 'application/json' }));\n    \n    const hostname = '127.0.0.1';\n    const port = 3000;\n    \n    // http status codes\n    const statusOK = 200;\n    const statusNotFound = 404;\n    \n    // using an array to simulate a database for demonstration purposes\n    var mockDatabase = [\n        {\n            fruit: \"apple\",\n            color: \"red\"\n        },\n        {\n            fruit: \"banana\",\n            color: \"yellow\"\n        }\n    ]\n    \n    // Handle GET (all) request\n    app.get('/', function(req, res) {\n        // error checking\n        if (mockDatabase.length \u003c 1) {\n            res.statusCode = statusNotFound;\n            res.send('Item not found');\n            return;\n        }\n        // send response\n        res.statusCode = statusOK;\n        res.send(mockDatabase);\n    });\n    \n    // Handle GET (one) request\n    app.get('/:id', function(req, res) {\n        // error checking\n        var id = req.params.id;\n        if (id \u003c 0 || id \u003e= mockDatabase.length) {\n            res.statusCode = statusNotFound;\n            res.send('Item not found');\n            return;\n        }\n        // send response\n        res.statusCode = statusOK;\n        res.send(mockDatabase[id]);\n    });\n    \n    // Handle POST request\n    app.post('/', function(req, res) {\n        // get data from request\n        var newObject = req.body; // TODO validate data\n        mockDatabase.push(newObject);\n        // send created item back with id included\n        var id = mockDatabase.length - 1;\n        res.statusCode = statusOK;\n        res.send(`Item added with id ${id}`);\n    });\n    \n    // Handle PUT request\n    app.put('/:id', function(req, res) {\n        // replace current object\n        var id = req.params.id;     // TODO validate id\n        var replacement = req.body; // TODO validate data\n        mockDatabase[id] = replacement;\n        // report back to the client\n        res.statusCode = statusOK;\n        res.send(`Item replaced at id ${id}`);\n    });\n    \n    // Handle PATCH request \n    app.patch('/:id', function(req, res) {\n        // update current object\n        var id = req.params.id;        // TODO validate id\n        var newColor = req.body.color; // TODO validate data\n        mockDatabase[id].color = newColor;\n        // report back to the client\n        res.statusCode = statusOK;\n        res.send(`Item updated at id ${id}`);\n    });\n    \n    // Handle DELETE request \n    app.delete('/:id', function(req, res) {\n        // delete specified item\n        var id = req.params.id;  // TODO validate id\n        mockDatabase.splice(id, 1);\n        // send response back\n        res.statusCode = statusOK;\n        res.send(`Item deleted at id ${id}`);\n    });\n    \n    app.listen(port, hostname, function () {\n        console.log(`Listening at http://${hostname}:${port}/...`);\n    });\n```\n\nSave the file and run it in the terminal.\n\n```\n    node index.js\n```\n\nThe server is now running on your machine. You can use [Postman](https://www.getpostman.com/) (see [docs](https://learning.getpostman.com/getting-started/) and [tutorial](https://www.youtube.com/watch?v=t5n07Ybz7yI)) to test the server now, or you can use one of the client apps that we will make in part three. \n\n![backend-mobile-2-2](//images.ctfassets.net/1es3ne0caaid/4gkCYUOTv1gGOai0cnnMlc/ce7cd897542def20af71963b0daf9116/backend-mobile-2-2.gif)\n\n### Further study\n\n\n- [NodeJS REST API](https://www.youtube.com/watch?v=F7NVpxxmmgM\u0026list=PL0dzCUj1L5JE4w_OctDGyZOhML6OtJSqR) \n- [Building a RESTful API with Node.js](https://www.youtube.com/watch?v=0oXYLzuucwE\u0026index=1\u0026list=PL55RiY5tL51q4D-B63KBnygU6opNPFk_q) \n- [Node.js Crash Course](https://www.youtube.com/watch?v=fBNz5xF-Kx4) \n- [Building a Node.js REST API with Express](https://medium.com/@jeffandersen/building-a-node-js-rest-api-with-express-46b0901f29b6) \n\n\n## Backend example two: Server Side Dart\n\n\n\u003e **Note:** This tutorial was tested with Dart 2.1.2\n\n### Install Dart\n\nIf you have Flutter installed on your system, then Dart is already installed. But if not, then go to [this link](https://www.dartlang.org/tools/sdk) to download and install the Dart SDK. \n\nCheck if `dart/bin` is in your system path:\n\n```\n    # Linux or Mac\n    echo $PATH\n    \n    # Windows Command Prompt\n    echo %path%\n    \n    # Windows Powershell\n    $env:Path -split ';'\n```\n\nIf it isn't and you just installed it from the link above (because you don't have Flutter), you can add it to your path like this:\n\n```\n    # Linux or Mac\n    export PATH=\"$PATH:/usr/lib/dart/bin\"\n```\n\nOn Windows it is easiest to use the GUI to set environment variables.\n\nIf you already had Flutter/Dart installed, find your Flutter SDK directory. Then you can add the path like this (replacing `\u003cflutter\u003e`):\n\n```\n    export PATH=\"$PATH:\u003cflutter\u003e/bin/cache/dart-sdk/bin\"\n```\n\nThis only updates the path until you restart your machine. You will probably want to update your `.bash_profile` (or whatever you use on your system) to make it permanent.\n\n### Install Aqueduct\n\nWe are also going to use the [Aqueduct](https://aqueduct.io/) framework to make HTTP request APIs easier to build. Now that we have Dart installed, we can install Aqueduct like this:\n\n```\n    pub global activate aqueduct\n```\n\nFollow the directions to add the `$HOME/.pub-cache/bin` to your path if you are instructed to.\n\n### Implement our API\n\nIn [part one](https://pusher.com/tutorials/backend-developer-part-1) I told you the REST API that we were going to make would look like this:\n\n```\n    GET http://localhost:3000/              // get all items\n    GET http://localhost:3000/id            // get item at id\n    POST http://localhost:3000/             // create new item\n    PUT http://localhost:3000/id            // replace item at id\n    PATCH http://localhost:3000/id          // update item at id\n    DELETE http://localhost:3000/id         // delete item at id\n```\n\nOur client app that we will make in part three is going to look like this:\n\n![backend-mobile-2-1](//images.ctfassets.net/1es3ne0caaid/7MvuGc4TMFanlAXX9KNXX7/a80f94db1eb63c5146ad64dc2daefd89/backend-mobile-2-1.png)\n\nSo we need to make our server handle all of these requests.\n\nFirst go to the terminal and cd to the directory that you want to create the server project folder in. Then type:\n\n```\n    aqueduct create dart_server\n```\n\nOpen the project in an editor. The [Aqueduct documentation](https://aqueduct.io/docs/) recommends [IntelliJ IDEA](https://www.jetbrains.com/idea/), but I am using [Visual Studio Code](https://code.visualstudio.com/) with the [Dart plugin](https://dartcode.org/).\n\nOpen the `lib/channel.dart` file and replace it with the following code:\n\n```dart\n    // dart_server/lib/channel.dart\n    \n    import 'package:dart_server/controller.dart';\n    import 'dart_server.dart';\n    \n    // This class sets up the controller that will handle our HTTP requests\n    class DartServerChannel extends ApplicationChannel {\n    \n      @override\n      Future prepare() async {\n        // auto generated code\n        logger.onRecord.listen((rec) =\u003e print(\"$rec ${rec.error ?? \"\"} ${rec.stackTrace ?? \"\"}\"));\n      }\n    \n      @override\n      Controller get entryPoint {\n        final router = Router();\n    \n        // We are only setting up one route. \n        // We could add more below if we had them.\n        // A route refers to the path portion of the URL.\n        router\n          .route('/[:id]') // the root path with an optional id variable\n          .link(() =\u003e MyController()); // requests are forwarded to our controller\n        return router;\n      }\n    }\n```\n\nIn the comments I talked about a controller. Let's make that now. Create a file called `controller.dart` in the `lib/` directory. Paste in the code below to handle HTTP requests:\n\n```dart\n    // dart_server/lib/controller.dart\n    \n    import 'dart:async';\n    import 'dart:io';\n    import 'package:aqueduct/aqueduct.dart';\n    \n    // using a list to simulate a database for demonstration purposes\n    List\u003cMap\u003cString, dynamic\u003e\u003e mockDatabase = [\n        {\n            'fruit': 'apple',\n            'color': 'red'\n        },\n        {\n            'fruit': 'banana',\n            'color': 'yellow'\n        }\n    ];\n    \n    class MyController extends ResourceController {\n    \n      // Handle GET (all) request\n      @Operation.get()\n      Future\u003cResponse\u003e getAllFruit() async {\n        // return the whole list\n        return Response.ok(mockDatabase);\n      }\n    \n      // Handle GET (one) request\n      @Operation.get('id')\n      Future\u003cResponse\u003e getFruitByID(@Bind.path('id') int id) async {\n        // error checking\n        if (id \u003c 0 || id \u003e= mockDatabase.length){\n          return Response.notFound(body: 'Item not found');\n        }\n        // return json for item at id\n        return Response.ok(mockDatabase[id]);\n      }\n    \n      // Handle POST request\n      @Operation.post()\n      Future\u003cResponse\u003e addFruit() async {\n        // get json from request\n        final Map\u003cString, dynamic\u003e item = await request.body.decode(); // TODO validate\n        // create item (TODO return error status code if there was a problem)\n        mockDatabase.add(item);\n        // report back to client\n        final int id = mockDatabase.length - 1;\n        return Response.ok('Item added with id $id');\n      }\n    \n      // Handle PUT request\n      @Operation.put('id')\n      Future\u003cResponse\u003e putContent(@Bind.path('id') int id) async {\n        // error checking\n        if (id \u003c 0 || id \u003e= mockDatabase.length){\n          return Response.notFound(body: 'Item not found');\n        }\n        // get the updated item from the client\n        final Map\u003cString, dynamic\u003e item = await request.body.decode(); // TODO validate\n        // make the update\n        mockDatabase[id] = item;\n        // report back to the client\n        return Response.ok('Item replaced at id $id');\n      }\n    \n      // Handle PATCH request \n      // (PATCH does not have its own @Operation method so \n      // the constructor parameter is used.)\n      @Operation('PATCH', 'id')\n      Future\u003cResponse\u003e patchContent(@Bind.path('id') int id) async {\n        // error checking\n        if (id \u003c 0 || id \u003e= mockDatabase.length){\n          return Response.notFound(body: 'Item not found');\n        }\n        // get the updated item from the client\n        final Map\u003cString, dynamic\u003e item = await request.body.decode(); // TODO validate\n        // make the partial update\n        mockDatabase\\[id\\]['color'] = item['color'];\n        // report back to the client\n        return Response.ok('Item updated at id $id');\n      }\n    \n      // Handle DELETE request \n      @Operation.delete('id')\n      Future\u003cResponse\u003e deleteContent(@Bind.path('id') int id) async {\n        // error checking\n        if (id \u003c 0 || id \u003e= mockDatabase.length){\n          return Response.notFound(body: 'Item not found');\n        }\n        // do the delete\n        mockDatabase.removeAt(id);\n        // report back to the client\n        return Response.ok('Item deleted at id $id');\n      }\n    }\n```\n\nSave your changes.\n\n### Testing the server\n\nMake sure you are inside the root of your project folder:\n\n```\n    cd dart_server\n```\n\nNormally you would start the server in the terminal like this:\n\n```\n    aqueduct serve\n```\n\nHowever, Aqueduct defaults to listening on port 8888. In all of the client apps and Node.js we are using port 3000, so let’s do that here, too. I'm also limiting the number of server instances (aka isolates) to one. This is only because we are using a mock database. For your production server with a real database, you can let the server choose the number of isolates to run. So start the server like this:\n\n```\n    aqueduct serve --port 3000 --isolates 1\n```\n\nThe server is now running on your machine. You can use [Postman](https://www.getpostman.com/) (see [docs](https://learning.getpostman.com/getting-started/) and [tutorial](https://www.youtube.com/watch?v=t5n07Ybz7yI)) to test the server now, or you can use one of the client apps that we will make in part three.\n\n![backend-mobile-2-3](//images.ctfassets.net/1es3ne0caaid/6OyYdQ0ng1ea5noxxMedcy/eb43f52374be3179130f22b48797b11a/backend-mobile-2-3.gif)\n\n### Supplemental code\n\nThe following is a model class that includes code to do JSON conversions. I’m including it here for your reference, but you don’t need to do anything with it today. For more help converting JSON to objects in Dart see [this post](https://stackoverflow.com/a/54657953).\n\n```dart\n    class Fruit {\n    \n      Fruit(this.fruit, this.color);\n    \n      // named constructor\n      Fruit.fromJson(Map\u003cString, dynamic\u003e json)\n          : fruit = json['fruit'] as String,\n            color = json['color'] as String;\n    \n      int id;\n      String fruit;\n      String color;\n    \n      // method\n      Map\u003cString, dynamic\u003e toJson() {\n        return {\n          'fruit': fruit,\n          'color': color,\n        };\n      }\n    }\n```\n\n### Further study\n\n\n- [Build RESTful Web APIs with Dart, Aqueduct and PostgreSQL #2: Routing and Controllers](https://youtu.be/K4EqGjMjCY0)\n- [Dart: First API And Create Controller | 1/7 | Aqueduct | Backend Course](https://youtu.be/XCOYxjoJDb8)\n\n\n## Conclusion\n\nIn this tutorial, we saw two ways to create a backend server. Although the details were somewhat different, the REST API that we implemented was exactly the same. If you don’t like Node.js or Server Side Dart, there are many more to choose from. (I was playing around with [Server Side Swift](https://stackoverflow.com/questions/47958172/server-side-swift-basic-client-server-communication-example-for-ios-and-android) for a while before I decided to pursue Flutter for the frontend.) Whatever server technology you choose, just implement the REST API that we used here.\n\nYou can find the server code for this lesson on [GitHub](https://github.com/suragch/backend_demo).\n\nIn the [last part](https://pusher.com/tutorials/backend-developer-part-3) of this tutorial we will learn how to make Android, iOS, and Flutter client apps that are able to communicate with the servers that we made in this lesson.","metaTitle":"Becoming a backend developer - Part 2: Building the server","metaDescription":"This is a guide for mobile app developers. In this three-part series we will cover all the basics of what it takes to become a backend developer. Create backends using Node and Dart, with mobile frontend examples using Android, Swift and Flutter. In part two, build backends with Node and Dart."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"QRNM2nbB5h8g4zlBUYGaR","type":"Entry","createdAt":"2019-03-19T17:36:04.012Z","updatedAt":"2020-06-15T16:02:14.641Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Becoming a backend developer - Part 1: Foundational concepts","url":"backend-developer-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"58WBWjhcWcuAMI6qIAyiC4","type":"Entry","createdAt":"2018-12-13T20:46:00.073Z","updatedAt":"2018-12-13T20:46:36.867Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Suragch","url":"suragch","email":"studymongolian@gmail.com","twitter":"https://twitter.com/suragch","github":"https://github.com/suragch","guestWriter":true}}],"projectRepo":"https://github.com/suragch/backend_demo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Q3oRmiXjOmcSmweY4gKY8","type":"Entry","createdAt":"2018-09-12T09:33:28.375Z","updatedAt":"2018-09-12T09:33:28.375Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flutter","url":"flutter","type":"framework","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1st5ugwNDbvlnFFHBadh5b","type":"Entry","createdAt":"2019-03-13T18:08:14.919Z","updatedAt":"2019-03-13T18:08:14.920Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Dart","url":"dart","type":"language"}}],"reviewDate":"2019-03-19","description":"This is a tutorial series for mobile app developers. In this three-part series, we will cover all the basics of what it takes to become a backend developer. You will create backends using Node and Dart, with mobile frontend examples using Android, Swift and Flutter. In part one, cover key concepts around APIs.","prerequisite":"You need experience in at least one of Android, iOS or Flutter development.","content":"This is a guide for mobile app developers. In this three-part series we will cover all the basics of what it takes to become a backend developer.\n\n\n- Part 1: Foundational concepts\n- Part 2: Building the server\n- Part 3: Connecting to the server from a mobile app\n\n\n## Introduction\n\nSo you have some experience developing mobile apps for Android or iOS. You may even have a few apps on Google Play or in the App Store. More and more, though, you are getting ideas for new apps that would require a server backend. The problem is that you don't know how to do server programming. Maybe you work for a small company or maybe you’re on your own, and you don't have the resources to hire a backend developer. Now you've decided that it's finally time to take the leap and learn how to do it yourself. If that's you, then you've come to the right place.\n\nIn this series I will take you through everything you need to know to get started building a backend server and connecting it to your mobile apps. There are a myriad of choices of platforms and frameworks for both the backend and frontend. I will show you how to build two backend servers (Node.js and Server-Side Dart) and three frontend apps (Android, iOS, and Flutter). Choose one backend server and one frontend app to follow along with. \n\nThe purpose of telling you how to do the same thing on different platforms is so that you can see that the process is basically the same no matter what you choose. Even if you decide on a different technology, you can still follow along and just Google how to adapt it to your particular situation.\n\nNo matter what platforms you choose for your backend and frontend, there are a few foundational topics related to client-server communication that are important to know. They include URIs, HTTP, REST APIs, and JSON. If you are already familiar with these topics, feel free to skip directly to Part 2: Building the server.\n\n\n## URI\n\nA URI (Uniform Resource Identifier) is an address for a resource. A resource, for example, could be a webpage or a file or a database row. A specific type of URI is a URL. (See [difference between URI, URL, and URN](https://stackoverflow.com/questions/176264/what-is-the-difference-between-a-uri-a-url-and-a-urn).) You’re probably familiar with URIs from your mobile app development and certainly familiar with URLs from web browsers, but you might not be aware of their components, especially the query string.\n\n![backend-mobile-1-1](//images.ctfassets.net/1es3ne0caaid/5GMcbCR4mwdfYzuWPd1v8Z/89f52b49dc6a2d01b0d676bafa2b7e6d/backend-mobile-1-1.png)\n\nThe query string starts with a `?` question mark and is followed by parameters. The parameters are separated by `\u0026` ampersands. So in the example above we have two parameters:\n\n\n- `q = flutter`\n- `language = en`\n\nSee [this page](https://doepud.co.uk/blog/anatomy-of-a-url) for more explanation about the parts of a URI. \n\n### URI example\n\nWhen our client app accesses resources on our server, it will use a URI to reference them. Here is an actual example that we will use:\n\n```\n    http://localhost:3000/0\n```\n\nI’ll talk about the `http` protocol part of the URI in the next section. We’ll be using `localhost` (that is, `127.0.0.1`) to refer to our own machine, where the server will be running. This will simplify the development process. Then we will (somewhat arbitrarily) choose port `3000` to communicate over. Our path is simply the root `/`. We could have used something like `/fruit` or `/items`. In fact, a more complex server app would probably define several different paths (also known as routes) that clients could connect to to access different types of resources. In our minimal server, though, we’ll just use one path. The final `0` at the end of the path will be used as a parameter to refer to the ID of a database row. (Actually for us it will refer to the index of an array that is pretending to be a database, but the client doesn’t have to know that.)\n\n## HTTP\n\nHTTP (Hypertext Transfer Protocol) is a set of rules for how to transfer data on the web. You've seen `http://` in web addresses, of course. Now you’re going to use the same protocol to transfer data between your app and the server.\n\n### Verbs\n\nThe primary HTTP verbs that we are going to be using are:\n\n\n- `GET` - for requesting data from the server\n- `POST` - for sending new data to the server\n- `PUT` - for updating data on the server (fully replace an existing resource)\n- `PATCH` - for updating data on the server (partially modify an existing resource)\n- `DELETE` - for deleting data on the server\n\nYou will note that these are very similar to the CRUD operations of a database:\n\n\n- Create -\u003e `POST`\n- Read -\u003e `GET`\n- Update -\u003e `PUT` or `PATCH`\n- Delete -\u003e `DELETE`\n\nThese HTTP verbs are sent by clients to the server. This is known as a **request**. After the server receives a request it processes it and then sends back a **response** to the client. Both the request and the response contain metadata known as **headers**. The primary data itself is sent in the **body**. \n\n### Status codes\n\nOne of the headers is the status code. When a client makes an HTTP request, the server should send back an HTTP status code in its response. This lets the client know if the request was successful or not. You’ve seen the 404 Not Found response whenever you click on a broken link. Here are some more that you should get familiar with:\n\n\n- 1xx Informational\n- 2xx Success\n\n      - 200 OK\n      - 201 Created\n\n- 3xx Redirection\n\n      - 301 Moved Permanently\n\n- 4xx Client Error\n\n      - 400 Bad Request\n      - 401 Unauthorized\n      - 403 Forbidden\n      - 404 Not Found\n\n- 5xx Server Error \n\n      - 500 Internal Server Error\n      - 502 Bad Gateway\n\nIt’s your responsibility as a backend developer to choose the right code to add in your response to a client request. You can read more about HTTP status codes [here](https://www.restapitutorial.com/httpstatuscodes.html) and [here](https://restfulapi.net/http-status-codes/). \n\n### Content type\n\nAnother header is `Content-Type`, which is the Media Type (formerly known as MIME type). This tells us the type of data that is in the body. It could be plain text or HTML or JSON. Here are a few examples as they look encoded:\n\n\n- `application/json`\n- `application/x-www-form-urlencoded`\n- `image/png`\n- `text/plain`\n- `text/html`\n\nHere is a [complete list](https://www.iana.org/assignments/media-types/media-types.xhtml). We will be using JSON ( `application/json` ) primarily. I’ll explain it more in a little while.\n\n### Examples\n\nLet’s look at a few examples of the raw text of some HTTP requests. The following is a GET request:\n\n```\n    GET 3000/0\n    Content-Type: application/json\n    cache-control: no-cache\n    Postman-Token: 00572d5b-a2ec-4195-8436-ef1e797c0751\n    User-Agent: PostmanRuntime/7.6.0\n    Accept: */*\n    Host: localhost:3000\n    accept-encoding: gzip, deflate\n```\n\nNotice that it starts with the HTTP verb and URI path. The rest of the lines here are headers. I used [Postman](https://www.getpostman.com/) to make the request so that I could get the raw text. \n\nThis is the response that the server gave to that GET request:\n\n```\n    HTTP/1.1 200\n    status: 200\n    X-Powered-By: Express\n    Content-Type: application/json; charset=utf-8\n    Content-Length: 31\n    ETag: W/\"1f-xulzIcqO6GqXGwKlplM3A8YgRg8\"\n    Date: Fri, 08 Mar 2019 19:30:16 GMT\n    Connection: keep-alive\n    \n    {\"fruit\":\"apple\",\"color\":\"red\"}\n```\n\nYou can see that the status code is 200. Everything is OK. The content type of the body is JSON. You can find the body at the end, separated from the headers by a single blank line.\n\nHere is a POST request:\n\n```\n    POST 3000\n    Content-Type: application/json\n    cache-control: no-cache\n    Postman-Token: 6b985c28-ef59-4dac-930c-63b3245de3f1\n    User-Agent: PostmanRuntime/7.6.0\n    Accept: */*\n    Host: localhost:3000\n    accept-encoding: gzip, deflate\n    content-length: 46\n    \n    { \"fruit\": \"kiwi\", \"color\": \"purple\" }\n```\n\nAnd here is the response from the server:\n\n```\n    HTTP/1.1 200\n    status: 200\n    X-Powered-By: Express\n    Content-Type: text/html; charset=utf-8\n    Content-Length: 20\n    ETag: W/\"14-gSUAeNN7vCHjCoiKRj0ziSuiiQI\"\n    Date: Fri, 08 Mar 2019 19:34:18 GMT\n    Connection: keep-alive\n    \n    Item added with id 2\n```\n\nYou don’t need to understand the details of all that raw text. The frameworks that we are going to use to interact with the HTTP protocol will hide most of it from us. I just share these examples with you to let you know what is happening under the hood. If you do need to get at the headers, though, you will be able to access them from within the framework.\n\n\n## REST API\n\n### REST\n\nWhen we do our client-server communication, we will be using what is called a REST (or RESTful) API. (REST stands for Representational State Transfer, but I’ve never found it very helpful to know that.) In addition to using the HTTP protocol, REST adds some additional rules for how the client and the server should interact. As a beginner, remember these important REST principles:\n\n\n- The server should not save any state about a client.\n- Only use the HTTP verbs as they are defined. For example, while it is technically possible to create a resource on the server by sending the data through a GET request, REST says we should use a POST request for creating new resources.\n\nThere is a lot more to REST, but you don't need to understand everything right now. Check out [this](https://www.youtube.com/watch?v=Q-BpqyOT3a8) and [this](https://www.youtube.com/watch?v=0oXYLzuucwE\u0026index=1\u0026list=PL55RiY5tL51q4D-B63KBnygU6opNPFk_q) if you are interested.\n\n### API\n\nThe API is the set of methods that we will handle on the server. It’s our own personal protocol for communicating between the client and the server. Once we have our API defined, it doesn't matter what is running on the server or who the clients are. This is a prime example of [clean architecture](https://pusher.com/tutorials/clean-architecture-introduction).\n\n![backend-mobile-1-2](//images.ctfassets.net/1es3ne0caaid/5fFYkzDLBS2G0hqW7s8kII/cac6226ef0211c8b4c10e6234705866e/backend-mobile-1-2.png)\n\n### Our API\n\nThe REST API is defined in terms of HTTP verbs ( `GET`, `POST`, `PUT`, etc.) along with a URI path. This is the API that we will use for our server and clients in the second and third parts of this series:\n\n```\n    GET http://localhost:3000/              // get all items\n    GET http://localhost:3000/id            // get item at id\n    POST http://localhost:3000/             // create new item\n    PUT http://localhost:3000/id            // replace item at id\n    PATCH http://localhost:3000/id          // update item at id\n    DELETE http://localhost:3000/id         // delete item at id\n```\n\n## JSON\n\nWhen communicating with a server we need to pass data back and forth. This becomes more difficult when we want to pass complex objects (that is, most anything besides strings, numbers, and booleans). Since we can't pass an object directly using in the HTTP protocol, we can convert it to a string (also known as serialization), transfer it in the body of an HTTP message, and then convert it from a string back to an object.\n\nA common way to do that is with JavaScript Object Notation (JSON). We’re not limited to JavaScript, though. There are JSON libraries for Java, Kotlin, Swift, Objective-C, Dart, and many other languages.\n\n### Example\n\nJSON formats the data in a class to a list of key-value pairs. Here is what a simple User object would look like when converted to JSON:\n\n```json\n    {\n       \"id\" : 3,\n       \"name\" : \"Mary\",\n    }\n```\n\nNotes:\n\n- The curly braces represent an object.\n- The keys and any string values need double quotes. Other values don’t.\n- JSON encodes objects, arrays, strings, numbers, booleans, and nulls. \n- Objects and arrays can be nested.\n- See the [documentation](https://www.json.org/) for a full explanation.  Here are [a few more examples](https://medium.com/@studymongolian/easy-json-examples-7c70785b4707?source=friends_link\u0026sk=dbca368da83bc2273c9a6073159c8c39).\n\nWhite space does not matter. So this:\n\n```json\n    {\"fruit\":\"apple\",\"color\":\"red\"}\n```\n\nis the same as this:\n\n```json\n    {\n      \"fruit\": \"apple\",\n      \"color\": \"red\"\n    }\n```\n\n### In a model object\n\nWhen you create a model object, it’s convenient to add a constructor and helper method that can serialize and deserialize (encode and decode) between the object and JSON. For example, here is a model object in Dart. The constructor creates an object from a JSON map. And a JSON map can be created from the object using the `toJson()` method. \n\n```dart\n    class Fruit {\n    \n      int id;\n      String fruit;\n      String color;\n    \n      Fruit(this.fruit, this.color);\n    \n      // named constructor\n      Fruit.fromJson(Map\u003cString, dynamic\u003e json)\n          : fruit = json['fruit'],\n            color = json['color'];\n    \n      // method\n      Map\u003cString, dynamic\u003e toJson() {\n        return {\n          'fruit': fruit,\n          'color': color,\n        };\n      }\n    }\n```\n\nAs I said, all of the platforms and languages have libraries for converting between a raw JSON string (which is what you have in the HTTP body) and a Map or Dictionary or whatever key-value data structure is used in your language.\n\n\n## Conclusion\n\nYou now have all of the basic background knowledge you need to start building your backend server. In part two I’ll show you how to make the server, and in part three we’ll make a simple frontend app to connect to the server. These will implement the REST API that we learned about above.\n\nThe code for the servers and for the frontend apps is on [GitHub](https://github.com/suragch/backend_demo).","metaTitle":"Becoming a backend developer - Part 1: Foundational concepts","metaDescription":"This is a guide for mobile app developers. In this three-part series we will cover all the basics of what it takes to become a backend developer. You will create backends using Node and Dart, with mobile frontend examples using Android, Swift and Flutter. In part one, cover key concepts around APIs."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"xPKfiMCBGHTrOuv4SQwiA","type":"Entry","createdAt":"2019-03-15T19:33:27.186Z","updatedAt":"2020-06-19T14:29:21.236Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a two-player maze game with React Native","url":"maze-game-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNMaze","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6nDfV1cd5C6464wgCoOQii","type":"Entry","createdAt":"2018-02-12T15:08:13.901Z","updatedAt":"2018-02-26T12:31:12.764Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Gaming","url":"gaming","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2019-03-15","description":"Build a two-player maze game for mobile using React Native and Node.js. Users can log in, be matched with an opponent, and race each other through a maze to a target. The tutorial takes advantage of MatterJS to handle game physics.","prerequisite":"You will need React Native, Node and Yarn installed on your machine.","content":"In this tutorial, we will create a two-player maze game with React Native and Pusher. \n\n\n## Prerequisites\n\nBasic knowledge of React Native is required. \n\nWe’ll be using the following package versions. If you encounter any issues getting the app to work, try using the following:\n\n- Yarn 1.13.0\n- React Native 0.58.4\n\nWe’ll also be using [ngrok](https://ngrok.com/) to expose the Pusher auth server to the internet.\nLastly, you’ll need a [Pusher app instance](https://pusher.com/channels).\n\n\n## App overview\n\nAs mentioned earlier, we will create a maze game in which two players have to navigate. When the app starts, they will be greeted with a login screen. This is where they enter a unique username and wait for an opponent:\n\n![react-native-maze-game-demo-1](//images.ctfassets.net/1es3ne0caaid/3B8d2Uj2EXtab9H9cbPNcu/38c2b17124b1c4b1e37b0cdfb2b59476/react-native-maze-game-demo-1.png)\n\nOnce there are two players, a Pusher event is manually triggered by accessing a specific route of the app’s server component. This event informs both users that an opponent is found. This serves as the cue for the app to automatically navigate to the game screen where the maze will be generated.\n\nAfter that, the event for starting the game is also manually triggered. Once the app receives that, it will inform the players that they can start navigating the maze. The first player to reach the goal wins the game.\n\nHere’s what the app looks like. The black square is the goal, the pink circle is the current player, and the blue circle is their opponent:\n\n![react-native-maze-game-demo-2](//images.ctfassets.net/1es3ne0caaid/29l2LDSXI8L06uAPTcSVDE/e6e19904103e513e8aad4c8aa59cef6d/react-native-maze-game-demo-2.gif)\n\nYou can view the code on this [GitHub repo](https://github.com/anchetaWern/RNMaze). \n\n\n## Building the app\n\nStart by cloning the repo:\n\n```\n    git clone https://github.com/anchetaWern/RNMaze.git\n    cd RNMaze\n```\n\nNext, switch to the `starter` branch and install the dependencies:\n\n```\n    git checkout starter\n    yarn\n```\n\nThis branch has the styling and navigation already set up so we don’t have to go through them in this tutorial.\n\nNext, update the `.env` file with your Pusher app credentials:\n\n```\n    PUSHER_APP_KEY=\"YOUR PUSHER APP KEY\"\n    PUSHER_APP_CLUSTER=\"YOUR PUSHER APP CLUSTER\"\n```\n\n### Login screen\n\nLet’s start by adding the code for the login screen:\n\n```javascript\n    // src/screens/Login.js\n    import React, { Component } from \"react\";\n    import { View, Text, TextInput, TouchableOpacity, Alert } from \"react-native\";\n    \n    import Pusher from \"pusher-js/react-native\";\n    import Config from \"react-native-config\"; // for reading the .env file\n    \n    const pusher_app_key = Config.PUSHER_APP_KEY;\n    const pusher_app_cluster = Config.PUSHER_APP_CLUSTER;\n    const base_url = \"YOUR HTTPS NGROK URL\";\n    \n    class LoginScreen extends Component {\n      static navigationOptions = {\n        title: \"Login\"\n      };\n    \n      state = {\n        username: \"\",\n        enteredGame: false\n      };\n    \n      constructor(props) {\n        super(props);\n        this.pusher = null;\n        this.myChannel = null; // the current user's Pusher channel\n        this.opponentChannel = null; // the opponent's Pusher channel\n      }\n      \n      // next: add render()\n    }\n```\n\nNext, render the UI for the login screen. This asks for the user’s username so they can log in:\n\n```javascript\n    render() {\n      return (\n        \u003cView style={styles.wrapper}\u003e\n          \u003cView style={styles.container}\u003e\n            \u003cView style={styles.main}\u003e\n              \u003cView\u003e\n                \u003cText style={styles.label}\u003eEnter your username\u003c/Text\u003e\n                \u003cTextInput\n                  style={styles.textInput}\n                  onChangeText={username =\u003e this.setState({ username })}\n                  value={this.state.username}\n                /\u003e\n              \u003c/View\u003e\n    \n              {!this.state.enteredGame \u0026\u0026 (\n                \u003cTouchableOpacity onPress={this.enterGame}\u003e\n                  \u003cView style={styles.button}\u003e\n                    \u003cText style={styles.buttonText}\u003eLogin\u003c/Text\u003e\n                  \u003c/View\u003e\n                \u003c/TouchableOpacity\u003e\n              )}\n    \n              {this.state.enteredGame \u0026\u0026 (\n                \u003cText style={styles.loadingText}\u003eLoading...\u003c/Text\u003e\n              )}\n            \u003c/View\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nOnce the **Login** button is clicked, the `enterGame` function is executed. This authenticates the user with Pusher via an auth endpoint in the app’s server component (we’ll create this later). From the prerequisites section, one of the requirements is that your Pusher app instance needs to have client events enabled. This authentication step is a required step for using the client events feature. This allows us to trigger events directly from the app itself:\n\n```javascript\n    enterGame = async () =\u003e {\n      const myUsername = this.state.username;\n    \n      if (myUsername) {\n        this.setState({\n          enteredGame: true // show login activity indicator\n        });\n    \n        this.pusher = new Pusher(pusher_app_key, {\n          authEndpoint: `${base_url}/pusher/auth`,\n          cluster: pusher_app_cluster,\n          auth: {\n            params: { username: myUsername }\n          },\n          encrypted: true\n        });\n    \n        // next: add code for subscribing the user to their own channel\n    \n      }\n    };\n```\n\nNext, subscribe the user to their own channel. The username they entered is used for this. This channel is what’s used by their opponent to pass messages to them in realtime:\n\n```javascript\n    this.myChannel = this.pusher.subscribe(`private-user-${myUsername}`);\n    this.myChannel.bind(\"pusher:subscription_error\", status =\u003e {\n      Alert.alert(\n        \"Error\",\n        \"Subscription error occurred. Please restart the app\"\n      );\n    });\n    \n    // next: add code for when subscription succeeds\n```\n\nWhen the subscription succeeds, we wait for the `opponent-found` event to get triggered by the server. When this happens, we determine who among the players is the first player (Player One) and assign the ball color based on that. From here, we also subscribe to the opponent’s channel. Once it succeeds, we navigate to the game screen with a few data we’re going to need:\n\n```javascript\n    this.myChannel.bind(\"pusher:subscription_succeeded\", () =\u003e {\n     \n      this.myChannel.bind(\"opponent-found\", data =\u003e {\n        const opponentUsername =\n          myUsername == data.player_one ? data.player_two : data.player_one;\n    \n        const isPlayerOne = myUsername == data.player_one ? true : false;\n        \n        const ballColor = (isPlayerOne) ? 'pink' : 'blue'; // pink ball always goes to the first player\n    \n        Alert.alert(\"Opponent found!\", `Use the ${ballColor} ball`);\n    \n        this.opponentChannel = this.pusher.subscribe(\n          `private-user-${opponentUsername}`\n        );\n        this.opponentChannel.bind(\"pusher:subscription_error\", data =\u003e {\n          console.log(\"Error subscribing to opponent's channel: \", data);\n        });\n    \n        this.opponentChannel.bind(\"pusher:subscription_succeeded\", () =\u003e {\n          this.props.navigation.navigate(\"Game\", {\n            pusher: this.pusher,\n            isPlayerOne: isPlayerOne,\n            myUsername: myUsername,\n            myChannel: this.myChannel,\n            opponentUsername: opponentUsername,\n            opponentChannel: this.opponentChannel\n          });\n        });\n    \n        this.setState({\n          username: \"\",\n          enteredGame: false // hides the login activity indicator\n        });\n      });\n    });\n```\n\n### Game screen\n\nNow we’re ready to add the code for the Game screen. Start by importing the packages, components, and helpers we need:\n\n```javascript\n    // src/screens/Game.js\n    import React, { PureComponent } from \"react\";\n    import { View, Text, Alert, ActivityIndicator } from \"react-native\";\n    \n    import Matter from \"matter-js\"; // physics engine, collision detection\n    import { GameEngine } from \"react-native-game-engine\"; // rendering game objects\n    \n    import Circle from '../components/Circle'; // renderer for the balls\n    import Rectangle from '../components/Rectangle'; // renderer for the maze walls\n    \n    import CreateMaze from '../helpers/CreateMaze'; // for generating the maze\n    import GetRandomPoint from '../helpers/GetRandomPoint'; // for getting a random point in the grid\n    \n    // the hardcoded width and height contraints of the app\n    import dimensions from '../data/constants';\n    const { width, height } = dimensions;\n```\n\nNext, create the constants file (`src/data/constants.js`) we used above:\n\n```javascript\n    const constants = {\n      width: 360,\n      height: 686.67\n    }\n    \n    export default constants;\n```\n\nNext, go back to the game screen (`src/screens/Game.js`) and initialize the physics settings for the ball as well as the goal size:\n\n```javascript\n    const BALL_SIZE = Math.floor(width * .02);\n    const ballSettings = {\n      inertia: 0,\n      friction: 0,\n      frictionStatic: 0,\n      frictionAir: 0,\n      restitution: 0,\n      density: 1\n    };\n    \n    const GOAL_SIZE = Math.floor(width * .04); \n```\n\nYou can find what each of the ball settings does [here](http://brm.io/matter-js/docs/classes/Body.html).\n\nNext, create the maze. As you’ll see later, this generates a composite body which makes up the walls of the maze:\n\n```javascript\n    const GRID_X = 15; // the number of cells in the X axis\n    const GRID_Y = 18; // the number of cells in the Y axis\n    \n    const maze = CreateMaze(GRID_X, GRID_Y);\n```\n\nNext, create the Game component. Inside the `constructor`, get the navigation params that were passed earlier from the Login screen:\n\n```javascript\n    export default class Game extends PureComponent {\n      \n      static navigationOptions = {\n        header: null\n      };\n    \n      state = {\n        isMazeReady: false, // whether to show the maze or not\n        isGameFinished: false // whether someone has already reached the goal or not\n      }\n      \n      constructor(props) {\n        super(props);\n    \n        const { navigation } = this.props;\n       \n        this.pusher = navigation.getParam('pusher');\n        this.myUsername = navigation.getParam('myUsername');\n        this.opponentUsername = navigation.getParam('opponentUsername');\n    \n        this.myChannel = navigation.getParam('myChannel');\n        this.opponentChannel = navigation.getParam('opponentChannel');\n        this.isPlayerOne = navigation.getParam('isPlayerOne');\n        \n        // next: add code for adding the entities\n      }\n    }\n```\n\nNext, we need to construct the object containing the entities to be rendered by the React Native Game Engine. In this game, there are four entities we need to render, three of them are physical (two balls, one goal), while the other is logical (physics). Since there is a need to mirror the objects (and their positions) in both player instances, we first generate the objects in player one’s instance. Once the objects are generated, we send the object’s position to player two via Pusher:\n\n```javascript\n    this.entities = {};\n    \n    if (this.isPlayerOne) {\n      const ballOneStartPoint = GetRandomPoint(GRID_X, GRID_Y); // generate a random point to put the pink ball\n      const ballTwoStartPoint = GetRandomPoint(GRID_X, GRID_Y); // generate a random point to put the blue ball\n    \n      const ballOne = this._createBall(ballOneStartPoint, 'ballOne'); // create the pink ball (for player one)\n      const ballTwo = this._createBall(ballTwoStartPoint, 'ballTwo'); // create the blue ball (for player two)\n    \n      this.myBall = ballOne;\n      this.myBallName = 'ballOne'; \n      this.opponentBall = ballTwo;\n      this.opponentBallName = 'ballTwo';\n    \n      const goalPoint = GetRandomPoint(GRID_X, GRID_Y); // generate a random goal point\n      const goal = this._createGoal(goalPoint); // create the goal box\n      \n      const { engine, world } = this._addObjectsToWorld(maze, ballOne, ballTwo, goal); // add all the objects to the world\n    \n      this.entities = this._getEntities(engine, world, maze, ballOne, ballTwo, goal); // get the entities of the game\n      \n      this._setupPositionUpdater(); // call the interval timer for updating the opponent of the current user's ball position\n      this._setupGoalListener(engine); // setup the sensor for listening if a ball has touched the goal\n      \n      // send the position of the generated objects to player two\n      this.opponentChannel.trigger('client-generated-objects', {\n        ballOneStartPoint,\n        ballTwoStartPoint,\n        goalPoint\n      });\n    }\n```\n\nIf the second player is the one who’s logged in, the following event is triggered. This contains the positions for the two balls and the goal. Using this data, we construct player two’s world:\n\n```javascript\n    this.myChannel.bind('client-generated-objects', ({ ballOneStartPoint, ballTwoStartPoint, goalPoint }) =\u003e {\n      \n      const ballOne = this._createBall(ballOneStartPoint, 'ballOne');\n      const ballTwo = this._createBall(ballTwoStartPoint, 'ballTwo');\n      const goal = this._createGoal(goalPoint);\n    \n      this.myBall = ballTwo;\n      this.myBallName = 'ballTwo';\n      this.opponentBall = ballOne;\n      this.opponentBallName = 'ballOne';\n    \n      const { engine, world } = this._addObjectsToWorld(maze, ballOne, ballTwo, goal);\n      \n      this.entities = this._getEntities(engine, world, maze, ballOne, ballTwo, goal);\n      \n      this._setupPositionUpdater();\n      this._setupGoalListener(engine);\n    });\n```\n\nNext, we add physics to the world. By default, MatterJS applies gravity to the world. We don’t really want that so we set the gravity to zero for both X and Y axis:\n\n```javascript\n    this.physics = (entities, { time }) =\u003e {\n      let engine = entities[\"physics\"].engine;\n      engine.world.gravity = {\n        x: 0,\n        y: 0\n      };\n      Matter.Engine.update(engine, time.delta);\n      return entities;\n    };\n    \n    // next: add this.moveBall\n```\n\nNext, we add the system for moving the ball. This filters `move` events. This event is triggered when the user moves their finger across the screen. Note that this listens for that event on the entire screen so the user doesn’t actually need to place their finger directly on top of the ball in order to move it. As you can see, this function specifically targets `this.myBall`. `this.myBall.position` contains the current position of the ball, while `move.delta` contains the data on how much the finger was moved across the screen. We add that up to the ball’s current position in order to move it to that direction:\n\n```javascript\n    this.moveBall = (entities, { touches }) =\u003e {\n      let move = touches.find(x =\u003e x.type === \"move\");\n      if (move) {\n        // move.delta.pageX is negative if moving fingers to the left\n        // move.delta.pageX is negative if moving fingers to the top\n        const newPosition = {\n          x: this.myBall.position.x + move.delta.pageX, \n          y: this.myBall.position.y + move.delta.pageY\n        };\n        Matter.Body.setPosition(this.myBall, newPosition);\n      }\n    \n      return entities;\n    };\n    \n    // next: listen for the start-game event\n```\n\nNext, listen for the event for starting the game. All we do here is show an alert and update the state so it shows the generated maze instead of the activity indicator:\n\n```javascript\n    this.myChannel.bind('start-game', () =\u003e {\n      Alert.alert('Game Start!', 'You may now navigate towards the black square.');\n      this.setState({\n        isMazeReady: true\n      });\n    });\n    // next: listen for client-moved-ball\n```\n\nNext, listen for the event for moving the opponent’s ball:\n\n```javascript\n    this.myChannel.bind('client-moved-ball', ({ positionX, positionY }) =\u003e {\n      Matter.Body.setPosition(this.opponentBall, {\n        x: positionX,\n        y: positionY\n      });\n    });\n```\n\nThat’s pretty much all there is to it for the Game screen. Let’s now go over the functions we used for constructing the world.\n\nFirst is the function for creating a ball. This accepts the ball’s start point and the name you want to assign to it. The name is very important here because it’s what we use to determine which ball touched the goal:\n\n```javascript\n    constructor(props) {\n      // ...\n    }\n    \n    _createBall = (startPoint, name) =\u003e {\n      const ball = Matter.Bodies.circle(\n        startPoint.x,\n        startPoint.y,\n        BALL_SIZE,\n        {\n          ...ballSettings,\n          label: name\n        }\n      );\n      return ball;\n    }\n```\n\nNext is the function for creating the goal box. Not unlike the ball, we don’t need to add a whole lot of physics settings to the goal. That’s because it only acts as a sensor. It gets rendered to the world, but it doesn’t actually interact or affect the rest of it (For example, the ball shouldn’t bounce if it touches it, nor does it move because of the force applied by the ball). The key setting here is `isSensor: true`: \n\n```javascript\n    _createGoal = (goalPoint) =\u003e {\n      const goal = Matter.Bodies.rectangle(goalPoint.x, goalPoint.y, GOAL_SIZE, GOAL_SIZE, {\n        isStatic: true,\n        isSensor: true,\n        label: 'goal'\n      });\n      return goal;\n    }\n```\n\nNext is the function for adding the objects to the world. Aside from the two balls and the goal, we also need to add the maze that we generated earlier:\n\n```javascript\n    _addObjectsToWorld = (maze, ballOne, ballTwo, goal) =\u003e {\n      const engine = Matter.Engine.create({ enableSleeping: false }); // enableSleeping tells the engine to stop updating and collision checking bodies that have come to rest\n      const world = engine.world;\n    \n      Matter.World.add(world, [\n        maze, ballOne, ballTwo, goal\n      ]);\n    \n      return {\n        engine,\n        world\n      }\n    }\n```\n\nNext is the `_getEntities` function. This is responsible for constructing the `entities` object that we need to pass to the React Native Game Engine. This includes the physics, the two balls, the goal, and the maze walls. All of these objects (except for the `physics`), requires the `body` and `renderer`. All the other options are simply passed as a prop to the renderer to customize its style (`bgColor`, `size`, `borderColor`):\n\n```javascript\n    _getEntities = (engine, world, maze, ballOne, ballTwo, goal) =\u003e {\n      const entities = {\n        physics: {\n          engine,\n          world\n        },\n        playerOneBall: {\n          body: ballOne,\n          bgColor: '#FF5877',\n          borderColor: '#FFC1C1',\n          renderer: Circle\n        },\n        playerTwoBall: {\n          body: ballTwo,\n          bgColor: '#458ad0',\n          borderColor: '#56a4f3',\n          renderer: Circle\n        },\n        goalBox: {\n          body: goal,\n          size: [GOAL_SIZE, GOAL_SIZE],\n          color: '#414448',\n          renderer: Rectangle\n        }\n      };\n    \n      const walls = Matter.Composite.allBodies(maze); // get the children of the composite body\n      walls.forEach((body, index) =\u003e {\n    \n        const { min, max } = body.bounds;\n        const width = max.x - min.x;\n        const height = max.y - min.y;\n        \n        Object.assign(entities, {\n          ['wall_' + index]: {\n            body: body,\n            size: [width, height],\n            color: '#fbb050',\n            renderer: Rectangle\n          }\n        });\n      });\n    \n      return entities; \n    }\n```\n\nThe `_setupPositionUpdater` function triggers the event for updating the current user’s ball position on their opponent’s side. We can actually do this inside the system for moving the ball (`this.moveBall`) but that gets called multiple times over a span of a few milliseconds so it’s not really recommended. Also, make sure to only execute it if no one has reached the goal yet:\n\n```javascript\n    _setupPositionUpdater = () =\u003e {\n      setInterval(() =\u003e {\n        if (!this.state.isGameFinished) { // nobody has reached the goal yet\n          this.opponentChannel.trigger('client-moved-ball', {\n            positionX: this.myBall.position.x,\n            positionY: this.myBall.position.y\n          });\n        }\n      }, 1000);\n    }\n```\n\nThe `_setupGoalListener` is responsible for listening for collision events. These collision events are triggered from the engine so we’re attaching the listener to the engine itself. `collisionStart` gets fired at the very beginning of a collision. This provides data on the bodies which collided. The first body (`bodyA`) always contain the body which initiated the collision. In this case, it’s always one of the two balls. `bodyB`, on the other hand, contains the body which receives the collision. In this case, it’s the goal box. But since the goal box is set as a sensor (`isSensor: true`), it won’t actually affect the ball in any way. It will only register that it collided with the ball:\n\n```javascript\n    _setupGoalListener = (engine) =\u003e {\n    \n      Matter.Events.on(engine, \"collisionStart\", event =\u003e { \n        var pairs = event.pairs;\n    \n        var objA = pairs[0].bodyA.label;\n        var objB = pairs[0].bodyB.label;\n     \n        if (objA == this.myBallName \u0026\u0026 objB == 'goal') {\n          Alert.alert(\"You won\", \"And that's awesome!\");\n          this.setState({\n            isGameFinished: true\n          });\n        } else if (objA == this.opponentBallName \u0026\u0026 objB == 'goal') {\n          Alert.alert(\"You lose\", \"And that sucks!\");\n          this.setState({\n            isGameFinished: true\n          });\n        }\n      });\n    }\n```\n\nLastly, render the UI:\n\n```javascript\n    render() {\n      if (this.state.isMazeReady) {\n        return (\n          \u003cGameEngine\n            systems={[this.physics, this.moveBall]}\n            entities={this.entities}\n          \u003e\n          \u003c/GameEngine\u003e\n        );\n      }\n    \n      return \u003cActivityIndicator size=\"large\" color=\"#0064e1\" /\u003e;\n    }\n```\n\n### Circle component\n\nHere’s the code for the Circle component:\n\n```javascript\n    // src/components/Circle.js\n    import React from \"react\";\n    import { View, Dimensions } from \"react-native\";\n    import dimensions from '../data/constants';\n    const { width, height } = dimensions;\n    \n    const BODY_DIAMETER = Math.floor(width * .02);\n    const BORDER_WIDTH = 2;\n    \n    const Circle = ({ body, bgColor, borderColor }) =\u003e {\n      const { position } = body;\n    \n      const x = position.x;\n      const y = position.y;\n      return \u003cView style={[styles.head, {\n        left: x, \n        top: y,\n        backgroundColor: bgColor,\n        borderColor: borderColor\n      }]} /\u003e;\n    \n    };\n    \n    export default Circle;\n    \n    const styles = {\n      head: {\n        borderWidth: BORDER_WIDTH,\n        width: BODY_DIAMETER,\n        height: BODY_DIAMETER,\n        position: \"absolute\",\n        borderRadius: BODY_DIAMETER * 2\n      }\n    };\n```\n\n### Rectangle component\n\nHere’s the code for the Rectangle component:\n\n```javascript\n    // src/components/Rectangle.js\n    import React from \"react\";\n    import { View } from \"react-native\";\n    \n    const Rectangle = ({ body, size, color }) =\u003e {\n      const width = size[0];\n      const height = size[1];\n      \n      const x = body.position.x - width / 2;\n      const y = body.position.y - height / 2;\n     \n      return (\n        \u003cView\n          style={{\n            position: \"absolute\",\n            left: x,\n            top: y,\n            width: width,\n            height: height,\n            backgroundColor: color\n          }}\n        /\u003e\n      );\n    };\n    \n    export default Rectangle;\n```\n\n### CreateMaze helper\n\nThe CreateMaze helper is really the main meat of this app because it’s the one which generates the maze that the players have to navigate. There are lots of [maze generation algorithms](http://weblog.jamisbuck.org/2011/2/7/maze-generation-algorithm-recap.html) out there. This helper uses the [recursive backtracking algorithm](http://weblog.jamisbuck.org/2010/12/27/maze-generation-recursive-backtracking). Here’s the way it works:\n\n\n1. Create a grid.\n2. Choose a random cell within the grid. In this case, we’re selecting the very first cell in the grid to start with. \n3. Check if there are any cells you can visit from the current cell.\n4. If there is, then:\n  1. Pick a random neighbor.\n  2. Put the neighbor on the stack.\n  3. Mark the path from the current cell to the neighbor.\n5. If there are no more cells you can go to, mark the cell as “visited” and pop it out of the stack. The cell you’ve gone to prior to the cell that was popped out is now the current cell.\n6. Repeat steps 3 to 5 until all the cells in the grid have been visited or popped out of the stack.\n\nNow that you have a general idea of how we’re going to implement this, it’s time to proceed with the code. Start by importing the things we need:\n\n```javascript\n    // src/helpers/CreateMaze.js\n    import Matter from 'matter-js';\n    \n    import GetRandomNumber from './GetRandomNumber';\n    \n    import dimensions from '../data/constants';\n    const { width, height } = dimensions;\n    \n    // convenience variables:\n    const TOP = 'T';\n    const BOTTOM = 'B';\n    const RIGHT = 'R';\n    const LEFT = 'L';\n```\n\nNext, we represent the grid using an array. The `CreateMaze` class accepts the number of cells in the X and Y axis for its constructor. By default, it’s going to generate a 15x18 grid. `this.grid` contains a two-dimensional array of `null` values. This will be filled later with the directions in which a path is carved on each row in the grid:\n\n```javascript\n    const CreateMaze = (gridX = 15, gridY = 18) =\u003e {\n    \n      this.width = gridX; \n      this.height = gridY; \n    \n      this.blockWidth = Math.floor(width / this.width); // 24\n      this.blockHeight = Math.floor(height / this.height); // 38\n    \n      this.grid = new Array(this.height)\n      for (var i = 0; i \u003c this.grid.length; i++) {\n        this.grid[i] = new Array(this.width);\n      }\n      \n      // next: initialize the composite body\n      \n    }\n```\n\nNext, initialize the composite body for containing the maze:\n\n```javascript\n    const wallOpts = {\n      isStatic: true,\n    };\n    \n    this.matter = Matter.Composite.create(wallOpts);\n```\n\nNext, start carving the path. We’re going to start at the very first cell for this one, but you can pretty much start anywhere. Just remember that the grid is only 15x18 so you can only pick numbers between 0 to 14 for the X axis, and numbers between 0 to 17 for the Y axis:\n\n```javascript\n    this.carvePathFrom(0, 0, this.grid);\n```\n\n`carvePathFrom` is a recursive function. It will call itself recursively until it has visited all the cells in the grid. It works by randomly picking which direction to go to first from the current cell. It then loops through those directions to determine if they can be visited or not. As you learned earlier, a cell can be visited if it can be accessed from the current cell and that it hasn’t already been visited. The `getDirectionX` and `getDirectionY` function checks if the next cell in the X or Y axis can be visited:\n\n```javascript\n    carvePathFrom = (x, y, grid) =\u003e {\n     \n      const directions = [TOP, BOTTOM, RIGHT, LEFT]\n        .sort(f =\u003e 0.5 - GetRandomNumber()); // whichever direction is closest to the random number is first in the list. \n    \n      directions.forEach(dir =\u003e {\n        const nX = x + this.getDirectionX(dir);\n        const nY = y + this.getDirectionY(dir);\n        const xNeighborOK = nX \u003e= 0 \u0026\u0026 nX \u003c this.width;\n        const yNeighborOK = nY \u003e= 0 \u0026\u0026 nY \u003c this.height;\n    \n        // next: check if cell can be visited\n      }); \n    }\n```\n\nOnly when both these functions return either `0` or `1`, and that the next cell hasn’t already been visited will it proceed to call itself again. Don’t forget to put the visited direction into the grid. This will tell the function that the specific cell has already been visited. We also need to add the direction opposite to the current direction as the next path:\n\n```javascript\n    if (xNeighborOK \u0026\u0026 yNeighborOK \u0026\u0026 grid\\[nY\\][nX] == undefined) {\n      grid\\[y\\][x] = grid\\[y\\][x] || dir;\n      grid\\[nY\\][nX] = grid\\[nY\\][nX] || this.getOpposite(dir);\n      this.carvePathFrom(nX, nY, grid);\n    }\n```\n\nHere are the variables we used in the above function: \n\n```javascript\n    const LEFT = 'L';\n    \n    // add these:\n    const directionX = {\n      'T': 0, // neutral because were moving in the X axs\n      'B': 0,\n      'R': 1, // +1 because were moving forward (we started at 0,0 so we move from left to right)\n      'L': -1 // -1 because were moving backward\n    };\n    \n    const directionY = {\n      'T': -1, // -1 because were moving backward\n      'B': 1, // +1 because were moving forward (we started at 0,0 so we move from top to bottom)\n      'R': 0, // neutral because were moving in the Y axis\n      'L': 0\n    };\n    \n    // opposite directions\n    const op = {\n      'T': BOTTOM, // top's opposite is bottom\n      'B': TOP,\n      'R': LEFT,\n      'L': RIGHT\n    };\n```\n\nAnd here are the functions:\n\n```javascript\n    this.matter = Matter.Composite.create(wallOpts);\n    \n    // add these:\n    getDirectionX = (dir) =\u003e {\n      return directionX[dir];\n    }\n    \n    getDirectionY = (dir) =\u003e {\n      return directionY[dir];\n    }\n    \n    getOpposite = (dir) =\u003e {\n      return op[dir];\n    }\n```\n\nNow that we have the grid and the path in place, the next step is to construct the walls:\n\n```javascript\n    this.carvePathFrom(0, 0, this.grid);\n    \n    // add these:\n    for (var i = 0; i \u003c this.grid.length; i++) { // rows\n      for (var j = 0; j \u003c this.grid[i].length; j++) { // columns\n        Matter.Composite.add(this.matter, this.generateWall(j, i));\n      }\n    }\n```\n\nThe `generateWall` function accepts the cell’s address in the X and Y axis. The first one is always going to be `0,0` since that’s the very first cell we visited. From there, we figure out which part of the cell do we draw the walls. We do that by checking if the current cell we are in isn’t part of the path. `gridPoint` is the cell we’re currently iterating over and it contains the direction of the path to be visited from there (either `T`, `L`, `B` or `R`). For example, if we’re visiting `0,0` and it contains `B` as part of the path then only the top, right, and left walls will be generated. Aside from that, we also need to consider the opposite. The `getPointInDirection` is key for that. This function is responsible for returning the direction (either `T`, `L`, `B` or `R`) of the next cell to visit, but it only does so if the address to the next cell in the given direction is greater than `0`. So it’s just checking if we’ve actually moved forward in that specific direction:\n\n```javascript\n    generateWall = (x, y) =\u003e {\n      const walls = Matter.Composite.create({ isStatic: true });\n      const gridPoint = this.grid\\[y\\][x];\n      const opts = { \n        isStatic: true\n      };\n    \n      const wallThickness = 5; // how thick the wall is in pixels\n    \n      const topPoint = this.getPointInDirection(x, y, TOP);\n      if (gridPoint !== TOP \u0026\u0026 topPoint !== this.getOpposite(TOP)) {\n        Matter.Composite.add(walls, Matter.Bodies.rectangle(this.blockWidth / 2, 0, this.blockWidth, wallThickness, opts));\n      }\n      const bottomPoint = this.getPointInDirection(x, y, BOTTOM);\n      if (gridPoint !== BOTTOM \u0026\u0026 bottomPoint !== this.getOpposite(BOTTOM)) {\n        Matter.Composite.add(walls, Matter.Bodies.rectangle(this.blockWidth / 2, this.blockHeight, this.blockWidth, wallThickness, opts));\n      }\n      const leftPoint = this.getPointInDirection(x, y, LEFT);\n      if (gridPoint !== LEFT \u0026\u0026 leftPoint !== this.getOpposite(LEFT)) {\n        Matter.Composite.add(walls, Matter.Bodies.rectangle(0, this.blockHeight / 2, wallThickness, this.blockHeight + wallThickness, opts));\n      }\n      const rightPoint = this.getPointInDirection(x, y, RIGHT);\n      if (gridPoint !== RIGHT \u0026\u0026 rightPoint !== this.getOpposite(RIGHT)) {\n        Matter.Composite.add(walls, Matter.Bodies.rectangle(this.blockWidth, this.blockHeight / 2, wallThickness, this.blockHeight + wallThickness, opts));\n      }\n      \n      // next: create vector\n    }\n```\n\nThe final step before we return the walls is to actually put the walls in their proper position. In the code above, all we did was create Rectangle bodies and add it to the composite body. We haven’t actually specified the correct position for them (which cells they need to be added to). That’s where the [Vector class](http://brm.io/matter-js/docs/classes/Vector.html) comes in. We use it to change the position of the walls so that they’re on the cells where they need to be. For this, we simply multiply the cell address with the width or height of each cell in order to get their proper position. Then we use the `translate` method to actually move the walls to that position:\n\n```javascript\n    const translate = Matter.Vector.create(x * this.blockWidth, y * this.blockHeight);\n    Matter.Composite.translate(walls, translate);\n    \n    return walls;\n```\n\nHere’s the `getPointInDirection` function:\n\n```javascript\n    getOpposite = (dir) =\u003e {\n      // ...\n    }\n    \n    getPointInDirection = (x, y, dir) =\u003e {\n      const newXPoint = x + this.getDirectionX(dir);\n      const newYPoint = y + this.getDirectionY(dir);\n    \n      if (newXPoint \u003c 0 || newXPoint \u003e= this.width) {\n        return;\n      }\n      \n      if (newYPoint \u003c 0 || newYPoint \u003e= this.height) {\n        return;\n      }\n    \n      return this.grid\\[newYPoint\\][newXPoint];\n    }\n```\n\n### GetRandomPoint helper\n\nHere’s the code for getting a random point within the grid:\n\n```javascript\n    // src/helpers/GetRandomNumber.js\n    import dimensions from '../data/constants';\n    const { width, height } = dimensions;\n    import GetRandomNumber from './GetRandomNumber';\n    \n    const GetRandomPoint = (gridX, gridY) =\u003e {\n      const gridXPart = (width / gridX);\n      const gridYPart = (height / gridY);\n      const x = Math.floor(GetRandomNumber() * gridX);\n      const y = Math.floor(GetRandomNumber() * gridY);\n    \n      return {\n        x: x * gridXPart + gridXPart / 2,\n        y: y * gridYPart + gridYPart / 2\n      }\n    }\n    \n    export default GetRandomPoint;\n```\n\n### GetRandomNumber helper\n\nHere’s the code for generating random numbers:\n\n```javascript\n    // src/helpers/GetRandomNumber.js\n    var seed = 1;\n    const GetRandomNumber = () =\u003e {\n      var x = Math.sin(seed++) * 10000;\n      return x - Math.floor(x);\n    }\n    \n    export default GetRandomNumber;\n```\n\n## Server\n\nNow we’re ready to work with the server. Start by navigating to the app’s `server` directory and install the dependencies:\n\n```\n    cd server\n    yarn\n```\n\nNext, update the `.env` file with your Pusher credentials:\n\n```\n    APP_ID=\"YOUR PUSHER APP ID\"\n    APP_KEY=\"YOUR PUSHER APP KEY\"\n    APP_SECRET=\"YOUR PUSHER APP SECRET\"\n    APP_CLUSTER=\"YOUR PUSHER APP CLUSTER\"\n```\n\nNext, create a `server.js` file and add the following. This sets up the server and Pusher:\n\n```javascript\n    var express = require(\"express\");\n    var bodyParser = require(\"body-parser\");\n    var Pusher = require(\"pusher\");\n    \n    require(\"dotenv\").config();\n    \n    var app = express();\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    // setup Pusher\n    var pusher = new Pusher({\n      appId: process.env.APP_ID,\n      key: process.env.APP_KEY,\n      secret: process.env.APP_SECRET,\n      cluster: process.env.APP_CLUSTER\n    });\n```\n\nNext, add the route for authenticating users with Pusher:\n\n```javascript\n    var users = []; // for storing the users who logs in\n    \n    app.post(\"/pusher/auth\", function(req, res) {\n      var socketId = req.body.socket_id;\n      var channel = req.body.channel_name;\n      var username = req.body.username;\n    \n      users.push(username);\n      console.log(username + \" logged in\");\n    \n      var auth = pusher.authenticate(socketId, channel);\n      res.send(auth);\n    });\n```\n\nNext, add the route for triggering the event that an opponent was found:\n\n```javascript\n    app.get(\"/opponent-found\", function(req, res) {\n      var unique_users = users.filter((value, index, self) =\u003e {\n        return self.indexOf(value) === index;\n      });\n    \n      var player_one = unique_users[0];\n      var player_two = unique_users[1];\n    \n      console.log(\"opponent found: \" + player_one + \" and \" + player_two);\n    \n      pusher.trigger(\n        [\"private-user-\" + player_one, \"private-user-\" + player_two],\n        \"opponent-found\",\n        {\n          player_one: player_one,\n          player_two: player_two\n        }\n      );\n    \n      res.send(\"opponent found!\");\n    });\n```\n\nNext, add the route for triggering the event for starting the game:\n\n```javascript\n    app.get(\"/start-game\", function(req, res) {\n      var unique_users = users.filter((value, index, self) =\u003e {\n        return self.indexOf(value) === index;\n      });\n    \n      var player_one = unique_users[0];\n      var player_two = unique_users[1];\n    \n      console.log(\"start game: \" + player_one + \" and \" + player_two);\n    \n      pusher.trigger(\n        [\"private-user-\" + player_one, \"private-user-\" + player_two],\n        \"start-game\",\n        {\n          start: true\n        }\n      );\n    \n      users = [];\n    \n      res.send(\"start game!\");\n    });\n```\n\nLastly, run the server on port `5000`:\n\n```javascript\n    var port = process.env.PORT || 5000;\n    app.listen(port);\n```\n\n\n## Running the app\n\nStart by running the server:\n\n```\n    cd server\n    node server\n    ./ngrok http 5000\n```\n\nNext, update the the login screen with the ngrok URL:\n\n```javascript\n    // src/screens/Login.js\n    const base_url = \"YOUR NGROK HTTPS URL\";\n```\n\nFinally, run the app:\n\n```\n    react-native run-android\n```\n\nSince this app requires two players, I recommend that you set up the development server on one or two of the devices (or emulator). That way, you don’t need to physically connect the device to their computer (they only need to be connected to the same WI-FI network). This also helps avoid the confusion of where the React Native CLI will deploy the app if two devices are connected at the same time.\n\n![react-native-maze-game-demo-3](//images.ctfassets.net/1es3ne0caaid/6v86bI45vX2SQ2QF0HbKN7/df7df9cd8597cb6f31186aeb8c14deb8/react-native-maze-game-demo-3.png)\n\nThe screen above can be accessed by shaking the device (or executing `adb shell input keyevent 82` in the terminal), select **Dev Settings**, and select **Debug server host \u0026 port for device**. Then enter your computer’s internal IP address in the box. The default port where the bundler runs is `8081`.\n\nHere’s the workflow I use for running the app:\n\n\n1. Connect device A and run the app.\n2. Set up development server on device A.\n3. Disconnect device A.\n4. Repeat the above steps for the next device.\n5. Log in user on device A.\n6. Log in user on device B.\n7. Access `http://localhost:5000/opponent-found` on your browser.\n8. Dismiss the alerts that show up in the app.\n9. Access `http://localhost:5000/start-game` on your browser.\n10. Dismiss the alert and start navigating the maze on both devices. The position of each ball should be updated every 500 milliseconds. Once a player finds their way to the goal, both players are notified.\n\n\n## Conclusion\n\nIn this tutorial, you learned how to construct a maze using MatterJS. By using Pusher, we were able to update the position of each player within the maze in realtime. \n\nBut as you’ve seen, the game we created isn’t really production-ready. If you’re looking for a challenge, here are a few things that need additional work:\n\n\n- **Automate Pusher events** - automate the events for informing the players that an opponent was found, and the event for starting the game. As you’ve seen, we’re manually triggering these events by accessing a specific server route.\n- **Remove the dimension constraint** - the game is limited to a certain dimension. This means that if the player is on a tablet or a phone with a larger screen or smaller screen than those dimensions, then it won’t really look good. For smaller screens, it will also end up hindering the functionality because the maze will be bigger than the screen.\n- **Generate random mazes** - even though we have a random number generator, it doesn’t really generate a random maze. It’s set up that way because of the need to have the same maze generated for both players.\n- **Generate random points that make sense** - the app generates random points within the grid for the starting point of each player as well as the goal. So it also becomes a game of luck because the goal might be nearer to another player.\n- **Prevent the players from cheating** - there’s a [long time MatterJS issue](https://github.com/liabru/matter-js/issues/5) which allows objects to pass through walls if they have sufficient velocity. The app isn’t really an exception because if you swipe your finger fast enough, the ball can actually pass through the walls. One way to solve this is to change the game setup. The player will now have to change the device orientation in order to move the ball (using the device’s gyroscope). You can use the [React Native Sensors](https://react-native-sensors.github.io/) package to implement this. This should prevent the ball from gaining too much velocity because the walls are usually tightly packed. Another solution would be to detect collisions between the ball and the walls, such that it immediately set the ball’s velocity to a safe one.\n- **Add a basic game loop** - once a player wins, the game ends there. It would be good to have a basic game loop. Such that the app will ask the players if they want to continue playing the game after it finishes. If they answer “yes”, then a new maze will be generated and the game will start all over again. \n\nOnce you’ve implemented the above improvements, the game is basically ready for the app store.\n\nYou can find the code for this app on its [GitHub repo](https://github.com/anchetaWern/RNMaze).","metaTitle":"Create a two-player maze game with React Native","metaDescription":"Build a two-player maze game for mobile using React Native and Node.js. Users can log in, be matched with an opponent, and race each other through a maze to a target. The tutorial takes advantage of MatterJS to handle game physics."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"psK3TcDODuqyygOaiKCYC","type":"Entry","createdAt":"2019-03-13T16:14:34.088Z","updatedAt":"2019-03-13T16:14:34.088Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"How to use Pusher Channels with Adonis","url":"pusher-channels-adonis","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Ok7hdNlHGsaAME2MCGEeq","type":"Entry","createdAt":"2018-09-17T17:53:10.446Z","updatedAt":"2018-09-17T17:53:10.446Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ethiel Adiassa","url":"ethiel-adiassa","email":"ethiel97@gmail.com","twitter":"https://twitter.com/ethiel97","github":"https://github.com/ethiel97","guestWriter":true}}],"projectRepo":"https://github.com/Ethiel97/comments-adonis-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2AjUjeRuA4oUAcYYI6ck6i","type":"Entry","createdAt":"2018-09-28T17:24:15.392Z","updatedAt":"2018-09-28T17:24:15.392Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Adonis.js","url":"adonis-js","type":"library","featured":false}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2019-03-13","description":"This tutorial provides an introduction to how to use Pusher Channels with Adonis.js. A sample project is provided, along with code snippets and an overview of the integration steps.","prerequisite":"You will need an Adonis project to work with. If you don't have one, follow the GitHub link to clone the example repo.","content":"## Introduction\n\nIn this tutorial, I’ll show you how to integrate Pusher Channels into an existing Adonis application of yours. In my opinion Adonis is a must-have tool for a dev for its simplicity and efficiency but coupled with the power of Pusher Channels, the combo could not be more astonishing 😍. You can really come up with very awesome apps.\n\n## Prerequisites\n\nThis tutorial assumes you have an existing Adonis project already set up with all the required dependencies. I’ll guide you through the steps involved in integrating Pusher Channels to your project.\n\n\n## Set up Pusher \n\nHead over to [Pusher](https://www.pusher.com) and create your account or sign in if you already have a account.\n\nNext, you should create a new Pusher app instance. This registration provides credentials which can be used to communicate with the created Pusher instance. Copy the App ID, Key, Secret, and Cluster from the App Keys section and put them in the `.env`  file located at your project root:\n\n```\n    //.env\n        PUSHER_APP_KEY=\u003cAPP_KEY\u003e\n        PUSHER_APP_SECRET=\u003cAPP_SECRET\u003e\n        PUSHER_APP_ID=\u003cAPP_ID\u003e\n        PUSHER_APP_CLUSTER=\u003cAPP_CLUSTER\u003e\n```\n\nWe’ll use those keys further in this tutorial to link Pusher with our Adonis project.\n\nIf you complete this step you’ll now need to install the Pusher SDK as well as other necessary dependencies.\nWe won’t use the Pusher SDK directly but instead use [a Pusher provider for Adonis](https://github.com/Perafan18/adonis-pusher). This provider acts as an interface between the Pusher SDK and the Adonis.js ecosystem.\nBut we should first install the Pusher SDK by running this command:  \n\n```\n    #if you want to use npm\n    npm install pusher\n\n    #or if you prefer Yarn\n    yarn add pusher\n```\n\nNow, you can install the Pusher provider for Adonis with this command:\n\n```\n    #if you want to use npm\n    npm install adonis-pusher\n    \n    #or if you prefer Yarn\n    yarn add adonis-pusher\n```\n\nLast you will need to add the provider to AdonisJS at `start/app.js`:\n\n\n``` javascript    \n    const providers = [\n        ...\n        'adonis-pusher/providers/Pusher'\n    ]\n```    \n\n## How to emit events\n\nThis section will focus on emitting server-side events with data.  With Pusher Channels, you can open a bidirectionnal connection between your browser or client and your backend in such a way that they can communicate easily and with no interruption. So all data sent to this open channel is received by the other part involved in this communication. Let’s see how we can implement this in practice.\nFirst we have to fire events with Adonis.js and then tell what to do when those events are fired.\n\n``` javascript\n          Event.fire('new::event', data)\n```\n\nThis simple line of code tells your Adonis app to emit/fire the `new::event`  event and with it any data you want to send throughout your Adonis channel, as it happens `data` . You can fire your event from any controller function of your project provided you define your event name and the data you want it to carry 🙂 .\nBut the event you submit above doesn’t have any listener, so you have to define a listener for it. Inside the listener we’ll trigger a new channel from our backend every time our `new::event` is emit. That’s the mechanism.\n\n### Emit events with Pusher Channels\n\nCreate a file named `event.js` in the `start` directory of your project. In this file, we’ll define our event that will be fired every time we need to send a message via Pusher Channels.\n\n``` javascript\n    //events.js\n    \n    const Pusher = use('Pusher')\n    const Event = use('Event');\n    const Env = use('Env');\n    \n    // set up Pusher\n    let pusher = new Pusher({\n      appId: Env.get('PUSHER_APP_ID'),\n      key: Env.get('PUSHER_APP_KEY'),\n      secret: Env.get('PUSHER_APP_SECRET'),\n      cluster: Env.get('PUSHER_APP_CLUSTER'),\n      encrypted: false\n    });\n    \n    //fire new event\n    Event.when('new::event', async (comment) =\u003e {\n      pusher.trigger('new-channel', 'pusher-event', {\n        comment\n      })\n    });\n```    \n\nFirst, we need to pull in the `Event`, `Pusher` (using the adonis-pusher package we installed earlier) and `Env` service providers.\n\nNext, we registered a listener for the `new::event`  event, after which we initialize and configure Pusher. \n\nWhen we are done with the Pusher configuration, we trigger a `pusher-event` event on our `new-channel` with the `trigger` method. The `new-channel` (a Pusher channel) as I said above is an open bidirectionnal connection between your browser(client) and your backend to enable realtime exchanges of data. Great isn’t it? 😎 \n\n\n## Subscribe to your Pusher channel\n\nFrom your client, you can simply subscribe to your channels with the following block of code:\n\n``` javascript\n    //main.js for example\n    let pusher = new Pusher(`YOUR_PUSHER_APP_ID`, {\n            cluster: `YOUR_PUSHER_CLUSTER`,\n            encrypted: false\n          });\n    \n          //Subscribe to the channel we specified in our Adonis Application\n          let channel = pusher.subscribe('new-channel')\n    \n          channel.bind('pusher-event', (data) =\u003e {\n                //do here any process you want with the data retrieved\n          })\n```\n\nFirst we declare a new instance of Pusher using our credentials. Then we simply subscribe to our channel we defined from our backend, and last we can listen to our `pusher-event`.\n\n## Conclusion\n\nWe’re done for this tutorial. I do hope you’ve understood how you can integrate Pusher Channels to your Adonis project. If you enjoy the lesson, I think you can build great apps with this nice combo. You can take a look at the [Github repo](https://github.com/Ethiel97/comments-adonis-pusher) if you want, it depicts a real word use case of what we’ve seen in this tutorial.","metaTitle":"How to use Pusher Channels with Adonis","metaDescription":"This short article provides an introduction to how to use Pusher Channels with Adonis.js. A sample project is provided, along with code snippets and an overview of the integration steps."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rMpEfIF72i4kymOIUew08","type":"Entry","createdAt":"2019-03-11T17:49:00.199Z","updatedAt":"2019-03-11T17:49:00.199Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"How to build a realtime application with Node.js and RethinkDB","url":"live-node-rethinkdb","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3j821hA7aMgOiUEaO4Q8y6","type":"Entry","createdAt":"2018-02-26T19:00:03.819Z","updatedAt":"2018-03-20T12:22:11.602Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Shalvah Adebayo","url":"shalvah-adebayo","email":"shalvah.adebayo@gmail.com","twitter":"https://twitter.com/theshalvah","github":"https://shalvah.me/","guestWriter":true}}],"projectRepo":"https://github.com/shalvah/rethinkdb-pusher-node-demo","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2019-03-11","description":"This tutorial introduces RethinkDB, a sophisticated database solution. It provides a practical example with Node.js and Handlebars, constructing a simple blog post feed, to demonstrate the realtime capabilities of RethinkDB.","prerequisite":"You will need Node 8.10+ and RethinkDB 2.3.6+ installed on your machine.","content":"In this tutorial, we’ll explore RethinkDB, a database system that was built with realtime functionality in mind. We’ll build a social app that pairs RethinkDB with Pusher Channels to bring an improved experience to users. Let’s go!\n\nIn traditional web apps, database systems were used as “dumb” data stores—they only held data (usually textual or binary) for you and gave it back when you asked nicely. But over time, database systems have become more and more powerful. They can hold data in a wide range of formats and perform actions on (or with) the data. \n\n## Prerequisites\n1. [Node.js](http://nodejs.org) 8.10.0 or higher\n2. RethinkDB 2.3.6 or higher. [Get it here.](https://rethinkdb.com/docs/install)\n3. A [Pusher account](http://pusher.com/signup).\n\n\n## Setting up\n\nWe’ll start by using the [express application generator](https://expressjs.com/en/starter/generator.html):\n\n```\n    # if you don't already have it installed\n    npm install express-generator -g\n    \n    # create a new express app with view engine set to Handlebars (hbs)\n    express --view=hbs rethinkdb-pusher-nodejs-demo\n    cd rethinkdb-pusher-nodejs-demo \u0026\u0026 npm install\n```\n\nThen we’ll add our dependencies:\n\n```\n    npm install dotenv rethinkdb pusher\n```\n\nWe'll use **dotenv** to load sensitive data (our Pusher app credentials) from a `.env` file. The **rethinkdb** and **pusher** libraries are the Node.js clients for communicating with RethinkDB and Pusher’s realtime APIs respectively.\n\n\n## What is RethinkDB?\n\n[RethinkDB](https://rethinkdb.com) is an open-source database built for realtime applications. It aims to improve application performance and simplify the developer experience by pushing data to the app, rather than having it poll the database for changes. RethinkDB is built to do this in an efficient and scalable way.\n\nRethinkDB is a NoSQL database, so it stores its data as JSON documents. However, it incorporates concepts from SQL (such as its query language, Rethink Query Language, or ReQL) to create an even better experience for its users.  RethinkDB is used by thousands of developers, including NASA and Social Radar.\n\nWe’ll build an application where people can create posts and all posts can be seen in realtime on the home page without having to reload the page. Our application will rely on RethinkDB to inform us of new posts in the database and use Pusher to push these changes to the frontend. Let’s get started.\n\n\n## Building the feed\n\nThe feed (the home page) will show a list of all posts, with the newest first. Let’s set up the route and view for this page. In the route, we retrieve all posts from the database and pass them to the view. Replace the code in `routes/index.js` with this:\n\n\n``` javascript\n    // routes/index.js\n    const router = require('express').Router();\n    const r = require('rethinkdb');\n    \n    let connection;\n    r.connect({host: 'localhost', port: 28015, db: 'test'})\n        .then(conn =\u003e {\n          connection = conn;\n        });\n    \n    /* Render the feed. */\n    router.get('/', async (req, res, next) =\u003e {\n      const posts = await r.table('posts').orderBy(r.desc('date')).run(connection)\n          .then(cursor =\u003e cursor.toArray());\n      res.render('index', { posts });\n    });\n    \n    module.exports = router;\n```    \n\nLet’s walk through what’s going on here. We’re connecting to our database via the RethinkDB client (`r`). Then, in the home route, we retrieve all posts from the database. In ReQL, we can do this by calling `table()`. We want the results to have the newest posts first, so we add `orderBy(r.desc('date')).` This query will return all the documents in the table as a **cursor**. RethinkDB uses a cursor because it allows for easy pagination of large tables. We convert this cursor to an array of the documents by calling `cursor.toArray()`, then we render them on the frontend.\n\n\nNow we’ll create the view where we render the posts. We’ll use Bootstrap for some quick styling. Put the following code in your `views/layout.hbs` (the base layout):\n\n``` handlebars\n    \u003c!-- views/layout.hbs --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n      \u003chead\u003e\n        \u003ctitle\u003e{{title}}\u003c/title\u003e\n          \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\"\u003e\n      \u003cbody\u003e\n        {{{body}}}\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThen, in the file `views/index.hbs`:\n\n``` handlebars\n    \u003c!-- views/index.hbs --\u003e\n    \u003cdiv class=\"container-fluid text-center\" id=\"posts-list\"\u003e\n    \n        {{#each posts }}\n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\n                    \u003ch5 class=\"card-title\"\u003e{{ this.title }}\u003c/h5\u003e\n                    \u003ch6 class=\"card-subtitle mb-2 text-muted\"\u003e{{ this.date }}\u003c/h6\u003e\n                    \u003cp class=\"card-text\"\u003e{{ this.content }}\u003c/p\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        {{/each}}\n    \n    \u003c/div\u003e\n```    \n\nOne more thing. Replace the contents of your `app.js` with the following:\n\n``` javascript\n    // app.js\n    require('dotenv').config();\n    const express = require('express');\n    const path = require('path');\n    const logger = require('morgan');\n    \n    const app = express();\n    \n    // view engine setup\n    app.set('views', path.join(__dirname, 'views'));\n    app.set('view engine', 'hbs');\n    \n    app.use(logger('dev'));\n    app.use(express.urlencoded({ extended: false }));\n    \n    app.use('/', require('./routes/index'));\n    \n    // error handler\n    app.use((err, req, res, next) =\u003e {\n      res.locals.message = err.message;\n      res.locals.error = err;\n    \n      // render the error page\n      res.status(err.status || 500);\n      res.render('error');\n    });\n    \n    module.exports = app;\n```\n\n## Creating a post\n\nNext, we’ll make it possible for a user to create a post. Let’s add the necessary routes. Open up your route file (`routes/index.js`) and replace the last line (`module.exports = router`) with the following:\n\n``` javascript\n    // routes/index.js\n    \n    /* Show the view to create a new post. */\n    router.get('/new', (req, res, next) =\u003e {\n      res.render('new');\n    });\n    \n    /* Save a new post to the database */\n    router.post('/new', async (req, res, next) =\u003e {\n        const post = {\n            title: req.body.title,\n            content: req.body.content,\n            date: new Date(),\n        };\n      r.table('posts').insert(post).run(connection)\n          .then(() =\u003e res.redirect('/'));\n    });\n    \n    module.exports = router;\n```\n\nHere we’re creating two routes. The first route will render the form for creating new posts when you visit `/new` in your browser. The second route is where the form submits to. Within this route, we pull data from the request and create a new post in the database. With RethinkDB, this is as easy as calling `insert(post)`. For each post, we store a title, content and the date it was created.\n\nNext up, create the file `views/new.hbs` with the following contents:\n\n``` handlebars\n    \u003c!-- views/new.hbs --\u003e\n    \n    \u003cdiv class=\"container-fluid text-center mt-5\"\u003e\n    \u003ch4\u003eCreate Post\u003c/h4\u003e\n    \u003cform method=\"post\" action=\"/new\"\u003e\n    \n        \u003cdiv class=\"form-group\"\u003e\n            \u003clabel\u003eTitle\n                \u003cinput type=\"text\" class=\"form-control\" name=\"title\"\u003e\n            \u003c/label\u003e\n        \u003c/div\u003e\n    \n        \u003cdiv class=\"form-group\"\u003e\n            \u003clabel\u003eContent\n                \u003ctextarea class=\"form-control\" name=\"content\" rows=\"3\"\u003e\u003c/textarea\u003e\n            \u003c/label\u003e\n        \u003c/div\u003e\n    \n        \u003cbutton type=\"submit\" class=\"btn btn-primary\"\u003ePublish post\u003c/button\u003e\n    \u003c/form\u003e\n    \u003c/div\u003e\n```    \n\nAt this point, you can take the app for a spin to be sure it works as expected. Here’s what you need to do:\n\n- Start your RethinkDB server by following the instructions for your operating system [here](https://rethinkdb.com/docs/install/).\n- RethinkDB comes with an included web interface where you can explore your database and modify or query data. After starting the server, you should be able to access this UI at http://localhost:8080. \n- You can run queries and commands from the **Data Explorer** tab. We’ll test it out by creating our `posts` table. Enter the command `r.tableCreate('posts')` in the text box and click the **Run** button. The result of the query will be shown in the lower pane, as shown in the screenshot below.\n\n![rethinkdb-node-express-database-test](//images.ctfassets.net/1es3ne0caaid/4spXglH6bYKkwUIuECy8YA/67b4ae6d145242105bd26526f970e94d/rethinkdb-node-express-database-test.png)\n\n\n- Start your Express app by running this terminal command in its directory:\n\n```\n    npm start\n```\n\n- Visit your app on http://localhost:3000. You should see a blank page because our database is currently empty. Visit http://localhost:3000/new to create a new post. Create a couple of posts, and when you reload the home page, you should see your posts sorted from newest to oldest.\n\nNow that we’ve verified the app works, let’s make it realtime.\n\n## Going realtime with RethinkDB changefeeds\n\nRethinkDB has a useful feature called [changefeeds](https://www.rethinkdb.com/docs/changefeeds/javascript/) that makes it well-suited for realtime applications. Using changefeeds, we can ask RethinkDB to notify us when there are any changes to the database. We can even specify a query (such as “all items in Food category and with price greater than 500 dollars”), and RethinkDB will watch for changes to the result set.\n\nWe’ll add changefeeds to our app so the server gets notified of any new posts. Note that since RethinkDB is a database system, it can’t talk directly to the frontend. It can only send the changes to our servers, then we can have the server send the changes to the frontend via a service like Pusher.\n\nTo add changefeeds to our app, we need to make a small change to our `routes/index.js`. Replace this snippet (where we connect to the RethinkDB server):\n\n``` javascript\n    let connection;\n    r.connect({host: 'localhost', port: 28015, db: 'test'})\n        .then(conn =\u003e {\n          connection = conn;\n        });\n```\n\nwith this:\n\n``` javascript\n    let connection;\n    r.connect({host: 'localhost', port: 28015, db: 'test'})\n        .then(conn =\u003e {\n          connection = conn;\n          return r.table('posts').changes().run(connection);\n        }).then(cursor =\u003e {\n          cursor.each((err, row) =\u003e {\n            if (err) throw err;\n            const post = row.new_val;\n            console.log(post);\n            // publish row to the frontend\n        });\n    });\n```\n\nWe’re still connecting to the server as before, but this time, after the connection is established, we set up a changefeed by using the `changes()` method, telling RethinkDB to notify us of any changes to the data in the `posts` table. Once again, changes are returned as a cursor, which has keys `new_val` and `old_val`. For now, we simply log the new document to the console.\n\nOur backend is realtime now. Let’s make our frontend realtime too.\n\n## Going realtime with Pusher Channels\n\nFirst, let’s get our credentials set up. Log in to your [Pusher app dashboard](https://dashboard.pusher.com) and retrieve your app credentials from the **App Keys** tab. Then create a `.env` file in your project and add your credentials to it:\n\n```\n    # .env\n    \n    PUSHER_APP_ID=your-app-id\n    PUSHER_APP_KEY=your-app-key\n    PUSHER_APP_SECRET=your-app-secret\n    PUSHER_APP_CLUSTER=your-app-cluster\n```\n\nNow, we’ll modify our app to push changes to the frontend when notifications come in from RethinkDB. Modify your `routes/index.js` so it looks like this:\n\n``` javascript\n    // routes/index.js\n    \n    const router = require('express').Router();\n    const r = require('rethinkdb');\n    const Pusher = require('pusher');\n    const pusher = new Pusher({\n        appId: process.env.PUSHER_APP_ID,\n        key: process.env.PUSHER_APP_KEY,\n        secret: process.env.PUSHER_APP_SECRET,\n        cluster: process.env.PUSHER_APP_CLUSTER\n    });\n    \n    let connection;\n    r.connect({host: 'localhost', port: 28015, db: 'test'})\n        .then(conn =\u003e {\n          connection = conn;\n          return r.table('posts').changes().run(connection);\n        }).then(cursor =\u003e {\n          cursor.each((err, row) =\u003e {\n            if (err) throw err;\n            const post = row.new_val;\n            pusher.trigger('post-events', 'new-post', { post }, (err) =\u003e console.log(err));\n        });\n    });\n    \n    /* Render the feed. */\n    router.get('/', async (req, res, next) =\u003e {\n      const posts = await r.table('posts').orderBy(r.desc('date')).run(connection)\n          .then(cursor =\u003e cursor.toArray());\n      res.render('index', { posts, appKey: process.env.PUSHER_APP_KEY });\n    });\n    \n    /* Show the view to create a new post. */\n    router.get('/new', (req, res, next) =\u003e {\n      res.render('new');\n    });\n    \n    /* Save a new post to the database */\n    router.post('/new', async (req, res, next) =\u003e {\n        const post = {\n            title: req.body.title,\n            content: req.body.content,\n            date: new Date(),\n        };\n      r.table('posts').insert(post).run(connection)\n          .then(() =\u003e res.redirect('/'));\n    });\n    \n    module.exports = router;\n```\n\nThe final step is to update our frontend to add the newly created post to the list when it receives the event via Pusher. Add the following code to the end of your `views/index.hbs`:\n\n``` handlebars\n    \u003c!-- views/index.hbs --\u003e\n    \n    \u003cscript src=\"https://js.pusher.com/4.3/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n        // Enable pusher logging\n        Pusher.logToConsole = true;\n        const pusher = new Pusher(\"{{ appKey }}\", {\n            cluster: 'eu'\n        });\n        const channel = pusher.subscribe('post-events');\n        channel.bind('new-post', (data) =\u003e {\n            const postsList = document.getElementById('posts-list');\n            postsList.insertBefore(createPostCard(data.post), postsList.firstChild);\n        });\n    \n        function createPostCard(post) {\n            let cardElement = document.querySelector('.card');\n            let newCard = cardElement.cloneNode(true);\n            newCard.querySelector('.card-title').innerText = post.title;\n            // we wrap the date here and call toString() \n            // because RethinkDB returns it in a different format for changefeeds\n            newCard.querySelector('.card-subtitle').innerText = new Date(post.date).toString();\n            newCard.querySelector('.card-text').innerText = post.content;\n            return newCard;\n        }\n    \u003c/script\u003e\n```    \n\nAll done! Now our app is ready.\n\nMake sure your RethinkDB server is running. Start the app by running `npm start`. If you had it running earlier, be sure to exit and restart it. Tinker with the app as before, creating new posts at http://localhost:3000/new. This time, leave the homepage (http://localhost:3000) open in another tab. You should see your posts showing up in realtime on the feed, as in the GIF below:\n\n![rethinkdb-node-express-demo](//images.ctfassets.net/1es3ne0caaid/3zsqQel6X6UsQayAIOuyyg/7ee559333958a7d973cc0b3860287c6a/rethinkdb-node-express-demo.gif)\n\n\n## Conclusion\n\nIn this tutorial, we’ve explored RethinkDB, a database system built for realtime applications. Without RethinkDB’s native changefeeds functionality, we’d have to spend time writing code that listens for any database inserts and dispatches events, introducing a lot of complexity. When paired with Pusher, RethinkDB allows us to deliver pleasant realtime experiences to our users. It’s a great choice worth checking out if you’re building a realtime application. You can visit [the RethinkDB docs](https://rethinkdb.com/docs/) for more, and check out the source code of the completed application [on GitHub](https://github.com/shalvah/rethinkdb-pusher-node-demo).","metaTitle":"How to build a live application with Node.js and RethinkDB","metaDescription":"This article introduces RethinkDB, a sophisticated database solution. It provides a practical example with Node.js and Handlebars, constructing a simple blog post feed, to demonstrate the realtime capabilities of RethinkDB."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6W1PLV0N4AIYgQiiMyYcGi","type":"Entry","createdAt":"2019-03-08T17:09:41.028Z","updatedAt":"2019-03-08T17:09:41.028Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live commenting system with Laravel and Vue.js","url":"live-comments-laravel-vue","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Ok7hdNlHGsaAME2MCGEeq","type":"Entry","createdAt":"2018-09-17T17:53:10.446Z","updatedAt":"2018-09-17T17:53:10.446Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ethiel Adiassa","url":"ethiel-adiassa","email":"ethiel97@gmail.com","twitter":"https://twitter.com/ethiel97","github":"https://github.com/ethiel97","guestWriter":true}}],"projectRepo":"https://github.com/Ethiel97/comments-laravel-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2019-03-08","description":"Build a simple live comments web app using Laravel and Vue.js. Users are able to post comments, and see other comments appear in realtime.","prerequisite":"You will need Node and Laravel 5.7 installed on your machine.","content":"## Introduction\n\nThis tutorial will help you build a realtime commenting system with Laravel, Vue.js and Pusher. We’ll create a basic landing page, a comments feed, and a submission form where users can submit comments that will be added to the page and viewable instantly. This tutorial is the Laravel version of [this one](https://pusher.com/tutorials/live-commenting-adonis-vue), and when setting up Vuex and Vue.js you can refer to the same sections in that tutorial.\nNow on to building our app!\n\n\n## Demo\n\nYour final app should be looking like this:\n\n![laravel-vue-comments-demo](//images.ctfassets.net/1es3ne0caaid/3yVNw2WXjWsqe28UoMoAo2/7cdb479170177381c885b8ccfb50ee80/laravel-vue-comments-demo.gif)\n\n\n## Prerequisites\n\nIn order to follow this tutorial a basic to good understanding of Vue.js and Laravel is required, as we’ll be using these frameworks throughout this tutorial. Also ensure you have Node.js installed on your machine or Yarn.\n\nWe’ll be using these tools to build our application so make sure to have them installed on your machine:\n\n\n- [Pusher](https://pusher.com/channels)\n- [Laravel 5.7](https://laravel.com)\n- [Vue.js](https://vuejs.org)\n- [Vuex](https://vuex.vuejs.org)\n- [Laravel CLI](https://laravel.com/docs/5.7/installation) \n\n\n## Pusher setup\n\nHead over to the [Pusher website](https://pusher.com) and sign up for a free account. Select **Create new app** on the sidebar, and hit **Create my app** to create a new app after filling the form.\n\nOnce your app is created, retrieve your credentials from the **API Keys**  tab, and make note of it as we’ll use them later in the tutorial.\n\n\n## Create the project and install dependencies\n\nTo get started we’ll install a new Laravel application using the Laravel CLI. We’ll run the following command:\n\n```\nlaravel new live_comments\n```\n\nOnce the installation is finished run the following command to move to your app directory: \n\n```\ncd live_comments\n```\n\nNow we’ll install our node dependencies, first paste this in  your `package.json` file: \n\n``` json\n    //live_comments/package.json\n    {\n      \"private\": true,\n      \"scripts\": {\n        \"dev\": \"npm run development\",\n        \"development\": \"cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\",\n        \"watch\": \"npm run development -- --watch\",\n        \"watch-poll\": \"npm run watch -- --watch-poll\",\n        \"hot\": \"cross-env NODE_ENV=development node_modules/webpack-dev-server/bin/webpack-dev-server.js --inline --hot --config=node_modules/laravel-mix/setup/webpack.config.js\",\n        \"prod\": \"npm run production\",\n        \"production\": \"cross-env NODE_ENV=production node_modules/webpack/bin/webpack.js --no-progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\"\n      },\n      \"devDependencies\": {\n        \"axios\": \"^0.18\",\n        \"bootstrap\": \"^4.0.0\",\n        \"cross-env\": \"^5.1\",\n        \"jquery\": \"^3.2\",\n        \"laravel-mix\": \"^2.0\",\n        \"lodash\": \"^4.17.5\",\n        \"popper.js\": \"^1.12\",\n        \"vue\": \"^2.5.7\",\n        \"vuex\": \"^3.0.1\",\n        \"moment\": \"^2.22.2\",\n        \"pusher-js\": \"^4.2.2\"\n      }\n    }\n```\n\nThen run `npm install` or `yarn` to install the dependencies. It’s up to you.\n\nAfter this step, add the following to your  `.env` file in the root of your project directory. Ensure to replace the placeholders with your keys from Pusher.\n\n```\n    PUSHER_APP_ID=YOUR_PUSHER_APP_ID\n    PUSHER_APP_KEY=YOUR_PUSHER_APP_KEY\n    PUSHER_APP_SECRET=YOUR_PUSHER_APP_SECRET\n    PUSHER_APP_CLUSTER=YOUR_PUSHER_APP_CLUSTER\n```\n\n\n## Database setup\n\nWe’ll use SQLite as our database. Create a database.sqlite file in the database directory, and amend the .env file like this:\n\n```\n    DB_CONNECTION=sqlite\n    DB_DATABASE=/absolute/path/to/database.sqlite\n```\n\nRefer to this [section on Laravel website](https://laravel.com/docs/5.7/database) for more relevant information.\n\n\n## Building models and seeding our database\n\nNow, let’s build our database structure. We’ll use again Laravel CLI for that.\nRun this command: \n\n```\nphp artisan make:model Comment -mc\n```\n\nThe above command will generate the Comment model as well as its migration and its controller `CommentController.php`   for us.\n\nOpen your `Comment.php` file and paste this:\n\n``` php\n    //live_comments/app/Comment.php\n    \n    \u003c?php\n    \n    namespace App;\n    \n    use Illuminate\\Database\\Eloquent\\Model;\n    \n    class Comment extends Model {\n    \n        //\n        protected $fillable = ['content', 'author'];\n    }\n```\n\nNext copy and paste this piece of code in your comment migration file: \n\n``` php\n    //live_comments/database/migrations/*_create_comments_table.php\n    \u003c?php\n    \n    use Illuminate\\Database\\Migrations\\Migration;\n    use Illuminate\\Database\\Schema\\Blueprint;\n    use Illuminate\\Support\\Facades\\Schema;\n    \n    class CreateCommentsTable extends Migration\n    {\n        /**\n         * Run the migrations.\n         *\n         * @return void\n         */\n       \n        public function up()\n        {\n            Schema::create('comments', function (Blueprint $table) {\n                $table-\u003eincrements('id');\n                $table-\u003estring('content');\n                $table-\u003estring('author');\n                $table-\u003etimestamps();\n            });\n        }\n    \n        /**\n         * Reverse the migrations.\n         *\n         * @return void\n         */\n         \n        public function down()\n        {\n            Schema::dropIfExists('comments');\n        }\n    }\n```\n\nThen run `php artisan migrate` to run the migration.\n\n\n\n## Define routes and create the CommentController\n\nIn this section we’ll define our app endpoints and define the logic behind our `CommentController.php`.\n\nWe’ll create three basic routes for our application, one for rendering our app view, one for fetching comments from the database and the last one for storing comments into the database.\n\n Paste the following into `api.php`:\n\n``` php\n    //live_comments/routes/api.php\n    \u003c?php\n    use Illuminate\\Support\\Facades\\Route;\n    \n    Route::get('/', 'CommentController@index');\n    \n    Route::prefix('api')-\u003egroup(function () {\n        Route::get('/comments', 'CommentController@fetchComments');\n        Route::post('/comments', 'CommentController@store');\n    });\n```\n\nAnd amend `web.php` like the following\n\n``` php\n    //live_comments/routes/web.php\n    \u003c?php\n    use Illuminate\\Support\\Facades\\Route;\n    Route::get('/', 'CommentController@index');\n```\n\nNow let’s define our controller logic. Our controller functions will be responsible for actions to handle when some requests reach our API endpoints.\n\n\nOpen your `CommentController` file and paste the following code:\n\n``` php\n    //live_comments/app/Http/Controllers/CommentController.php\n    \u003c?php\n    \n    namespace App\\Http\\Controllers;\n    \n    use App\\Comment;\n    use App\\Events\\CommentEvent;\n    use Illuminate\\Http\\Request;\n    \n    class CommentController extends Controller\n    {\n        //\n    \n        public function index()\n        {\n    \n            return view('comments');\n        }\n    \n        public function fetchComments()\n        {\n            $comments = Comment::all();\n    \n            return response()-\u003ejson($comments);\n        }\n    \n        public function store(Request $request)\n        {\n            $comment = Comment::create($request-\u003eall());\n    \n            event(new CommentEvent($comment));\n            return response()-\u003ejson('ok');\n    \n        }\n    }\n```\n\nYou can notice three functions in the code above:\n\n\n- `index` renders the `comment.edge` file(that we’ll create later in this tutorial) in the `resources/views` directory (which is where views are stored in Adonis).\n- `fetchComments`  fetches comments from our database and returns them in a JSON format\n- `store`  creates a new `Comment` instance with the request queries and returns a response.\n\n\n### Emit event\n\nWell you may have noticed this line: `event(new CommentEvent($comment))`. It broadcasts an event with the new comment to the client-side of our app using [Laravel broadcasting](https://laravel.com/docs/5.7/broadcasting). We’ll see how to create this event in the next part of the tutorial.\n\n\n## Create a search event with broadcasting\n\nOur  `SearchEvent` event will be emitted whenever a comment is submit by a user. Enough talk, let’s focus on the code. Let’s create our `CommentEvent` by running the following command in your terminal: `php artisan make:event CommentEvent`.\n\nNow open your `CommentEvent` file and paste the following:\n\n``` php\n    //live_comments/app/Events/CommentEvent.php\n    \u003c?php\n    \n    namespace App\\Events;\n    \n    use Illuminate\\Broadcasting\\Channel;\n    use Illuminate\\Broadcasting\\InteractsWithSockets;\n    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcastNow;\n    use Illuminate\\Foundation\\Events\\Dispatchable;\n    use Illuminate\\Queue\\SerializesModels;\n    \n    class CommentEvent implements ShouldBroadcastNow\n    {\n        use Dispatchable, InteractsWithSockets, SerializesModels;\n    \n        public $comment;\n    \n        /**\n         * Create a new event instance.\n         *\n         * @param  $comment\n         *\n         * @return void\n         */\n         \n        public function __construct($comment)\n        {\n            //\n            $this-\u003ecomment = $comment;\n        }\n    \n        /**\n         * Get the channels the event should broadcast on.\n         *\n         * @return \\Illuminate\\Broadcasting\\Channel|array\n         */\n    \n        public function broadcastOn()\n        {\n            return new Channel('comment-channel');\n        }\n    \n        public function broadcastAs()\n        {\n            return 'newComment';\n        }\n    \n    \n    }\n```\n\nOur class constructor initializes a comment that is nothing but the new submit comment. We have two additional functions that may seem strange to you:\n\n- `broadcastAs`: customizes the broadcast name because by default Laravel uses the event’s class name.\n- `broadcastOn`: defines the channel `comment-channel` (which we’ll set up further on the tutorial) on which our event should be broadcast.\n\n### Broadcasting configuration\n\nAccording to Laravel documentation about [event broadcasting](https://laravel.com/docs/5.7/broadcasting), before broadcasting any events, you will first need to register the `App\\Providers\\BroadcastServiceProvider`. In fresh Laravel applications, you only need to uncomment this provider in the `providers` array of your `../config/app.php` configuration file. This provider will allow you to register the broadcast authorization routes and callbacks.\n\nIf this is done, you have to tell Laravel to use Pusher to broadcast events. Open your `.env` file and ensure you have this line: `BROADCAST_DRIVER=pusher`\n\nAs we are broadcasting our events over [Pusher](https://pusher.com), we should install the Pusher PHP SDK using the Composer package manager:\n\n```\n    composer require pusher/pusher-php-server \"~3.0\"\n```\n\n### Setting up the broadcast channel\n\nLaravel broadcasts events on well defined channels. As said above our event should be broadcast on `comment-channel` channel. It’s time to set it up. Paste the following code in your `channels.php` file: \n\n``` php\n    //live_comments/routes/channels.php\n    Broadcast::channel('comment-channel', function () {\n        return true;\n    });\n```\n\nAs we aren’t using Laravel auth, we return `true` in the function callback so that everybody can use this channel to broadcast events.\n\nNow amend your  `bootstrap.js` file like the following:\n\n``` javascript\n    //live_comments/resources/js/bootstrap.js\n    \n    window._ = require('lodash');\n    \n    window.axios = require('axios');\n    window.moment = require('moment')\n    \n    // import 'vue-tel-input/dist/vue-tel-input.css';\n    \n    window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n    window.axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n    window.axios.defaults.headers.common.crossDomain = true;\n    window.axios.defaults.baseURL = '/api';\n    \n    let token = document.head.querySelector('meta[name=\"csrf-token\"]');\n    \n    if (token) {\n        window.axios.defaults.headers.common['X-CSRF-TOKEN'] = token.content;\n    } else {\n        console.error('CSRF token not found: https://adonisjs.com/docs/4.1/csrf');\n    }\n    \n    \n    window.Pusher = require('pusher-js');\n```\n\nWe make our `pusher-js` package global in order to use with no hassle everywhere and to listen to events on client-side.\n\nOur app is ready to broadcast and consume events in realtime using Pusher channels. Let’s focus now on the frontend of your app.\n\n\n## Set up Vuex store\n\nWe’ll be using the [Vuex](https://vuex.vuejs.org) library to centralize our data and control the way it is mutated throughout our application.\n\n### Create our state\n\nVuex state is a single object that contains all our application data. So let’s create  `../resources/js/store/state.js`  and paste this code inside:\n\n\n``` javascript\n    let state = {\n        comments: []\n    }\n    export default  state\n```\n\nThe `comments` key is an array responsible to store our database comments.\n\n### Create our getters\n\nWith help of getters we can compute derived based on our data store state. Create  `../resources/js/store/getters.js`  and paste this code inside\n\n``` javascript\n    let getters = {\n        comments: state =\u003e {\n            return state.comments\n        }\n    }\n    \n    export default getters\n```\n\n### Create our mutations\n\nMutations allow us to perform some changes on our data. Create `../resources/js/store/mutations.js` and paste this piece of code inside:\n\n``` javascript\n    let mutations = {\n      GET_COMMENTS(state, comments) {\n        state.comments = comments\n      },\n      ADD_COMMENT(state, comment) {\n        state.comments = [...state.comments, comment]\n      }\n    }\n    \n    export default mutations\n```\n\nOur `mutations` object has two functions:\n\n- `GET_COMMENTS` is responsible for getting our comments data from a database or webserver.\n- `ADD_COMMENT` is responsible for adding a new comment to our comments array using the [ES6 spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax).\n\n\n### Create our actions\n\nVuex actions allow us to perform asynchronous operations over our data. Create the file `../resources/js/store/actions.js` and  paste the following code:\n\n``` javascript\n    let actions = {\n      ADD_COMMENT({commit}, comment) {\n    \n        return new Promise((resolve, reject) =\u003e {\n          axios.post(`/comments`, comment)\n            .then(response =\u003e {\n              resolve(response)\n            }).catch(err =\u003e {\n            reject(err)\n          })\n        })\n      },\n    \n      GET_COMMENTS({commit}) {\n        axios.get('/comments')\n          .then(res =\u003e {\n            {\n              commit('GET_COMMENTS', res.data)\n            }\n          })\n          .catch(err =\u003e {\n            console.log(err)\n          })\n      }\n    }\n    \n    export default actions\n```\n\nWe have defined two actions and each of them is responsible for a single operation, either comments post or comments fetch. They both perform asynchronous calls to our API routes. \n\n\n- `ADD_COMMENT`  sends a post request to our `/api/comments` with the new comment to create and returns a new promise (later in this tutorial we’ll handle the returned promise). This action is dispatched whenever a user submits a comment.\n\n\n- `GET_COMMENTS` makes a get request to our `api/comments` endpoint to get our database comments and commits the request result with `GET_COMMENTS` mutation.\n\n\n### Set up our store with Vue\n\nCreate the file `../resources/js/store/index.js` and paste this code inside:\n\n\n``` javascript\n    import Vue from 'vue'\n    import Vuex from 'vuex'\n    import actions from './actions'\n    import mutations from './mutations'\n    import getters from './getters'\n    import state from \"./state\";\n    \n    Vue.use(Vuex);\n    \n    export default new Vuex.Store({\n        state,\n        mutations,\n        getters,\n        actions\n    })\n```\n\nNext, we will export our store and add it to the Vue instance. \nAdd this code to your `../resouces/js/app.js`  file.\n\n``` javascript\n    require('./bootstrap')\n    \n    window.Vue = require('vue');\n    \n    import store from './store/index'\n    \n    Vue.component('comment', require('./components/Comment'));\n    Vue.component('comments', require('./components/Comments'))\n    Vue.component('new-comment', require('./components/NewComment'))\n    \n    const app = new Vue({\n      el: '#app',\n      store\n    });\n```\n\nThe code above globally registers three Vue components, `Comment.vue` ,`Comments.vue` and  `NewComment.vue` that we’ll build in the next part of this tutorial.\n\n\n## Building Vue components\n\nWe’ll build three Vue components for our app, the `Comment.vue` component, the  `Comments.vue` and the  `NewComment.vue` component, each of them responsible for a single functionality.\n\n### Create the Comment.vue component\n\nThe  `Comment.vue` component is responsible for encapsulating details about a single comment instance from the database and rendering it in a proper and styled way.\nPaste the following inside your `Comment.vue` component.\n\n``` html\n    //../resources/js/components/Comment.vue\n    \n    \u003ctemplate\u003e\n      \u003cli class=\"comment-wrapper animate slideInLeft \"\u003e\n        \u003cdiv class=\"profile\"\u003e\n          \u003cimg :src=\"avatar\" alt=\"\"\u003e\u003c/div\u003e\n        \u003cdiv class=\"msg has-shadow\"\u003e\n          \u003cdiv class=\"msg-body\"\u003e\u003cp class=\"name\"\u003e{{comment.author}} \u003cspan class=\"date\"\u003e{{posted_at}}\u003c/span\u003e\u003c/p\u003e\n            \u003cp class=\"content\"\u003e{{comment.content}}\u003c/p\u003e\u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/li\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n      export default {\n        name: \"Comment\",\n        props: ['comment'],\n        computed: {\n          posted_at() {\n            return moment(this.comment.created_at).format('MMMM Do YYYY')\n          },\n          avatar() {\n            return `https://api.adorable.io/avatars/48/${this.comment.author}@adorable.io.png`\n          }\n        }\n      }\n    \u003c/script\u003e\n    \n    \u003cstyle lang=\"scss\" scoped\u003e\n      .comment-wrapper {\n        list-style: none;\n        text-align: left;\n        overflow: hidden;\n        margin-bottom: 2em;\n        padding: .4em;\n    \n        .profile {\n          width: 80px;\n          float: left;\n        }\n    \n        .msg-body {\n          padding: .8em;\n          color: #666;\n          line-height: 1.5;\n        }\n    \n        .msg {\n          width: 86%;\n          float: left;\n          background-color: #fff;\n          border-radius: 0 5px 5px 5px;\n          position: relative;\n          \u0026::after {\n            content: \" \";\n            position: absolute;\n            left: -13px;\n            top: 0;\n            border: 14px solid transparent;\n            border-top-color: #fff;\n          }\n        }\n    \n        .date {\n          float: right;\n        }\n        .name {\n          margin: 0;\n          color: #999;\n          font-weight: 700;\n          font-size: .8em;\n        }\n    \n        p:last-child {\n          margin-top: .6em;\n          margin-bottom: 0;\n        }\n     \n      }\n    \n    \n    \u003c/style\u003e\n```\n\nOur  `Comment.vue` component takes a `comment` property whose details we simply render in the component body.  We also defined two `computed` properties, `posted_at`  to parse the Moment.js library with the `comment` posted date, and `avatar` to generate an avatar for the comment author using [this API](http://avatars.adorable.io).\nIn the `style` block we’ve defined some styles to our comment component in order to make things look more beautiful.\n\n### Create the Comments.vue component\n\nThis component will render comment items from the database.\nCreate your  `Comments.vue` component and paste this code inside:\n\n``` html\n    ../resources/js/components/Comments.vue\n    \n    \u003ctemplate\u003e\n      \u003cdiv class=\"container\"\u003e\n        \u003cul class=\"comment-list\"\u003e\n          \u003cComment :key=\"comment.id\" v-for=\"comment in comments\" :comment=\"comment\"\u003e\u003c/Comment\u003e\n        \u003c/ul\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n      import {mapGetters} from 'vuex'\n      import Comment from './Comment'\n    \n      export default {\n        name: \"Comments\",\n        components: {Comment},\n        mounted() {\n          this.$store.dispatch('GET_COMMENTS')\n    \n         //use your own credentials you get from Pusher\n          let pusher = new Pusher(`YOUR_PUSHER_APP_ID`, {\n            cluster: `YOUR_PUSHER_CLUSTER`,\n            encrypted: false\n          });\n    \n          //Subscribe to the channel we specified in our Adonis Application\n          let channel = pusher.subscribe('comment-channel')\n    \n          channel.bind('new-comment', (data) =\u003e {\n            this.$store.commit('ADD_COMMENT', data.comment)\n          })\n        },\n        computed: {\n          ...mapGetters([\n            'comments'\n          ])\n        }\n      }\n    \u003c/script\u003e\n    \n    \u003cstyle scoped\u003e\n      .comment-list {\n        padding: 1em 0;\n        margin-bottom: 15px;\n      }\n    \n    \u003c/style\u003e\n```\n\n\n\u003e First don’t forget to add your Pusher credentials in your Vue template.\n\nIn the `template` section of this code, we loop through our comments array and render for each loop iteration a `Comment.vue` component imported with the current comment iterated as a property.\n\nIn the  `mounted` hook function we dispatched the  `GET_COMMENTS` action. The action defined above sends a get request to our database to fetch posted comments. Then, we initialized a Pusher instance using the credentials obtained earlier when creating our Pusher app. Next, we subscribed to the `comment-channel` and listened to the `new-comment` event in order to commit the `ADD_COMMENT` mutation with the new comment pulled in by the event.\n\nWe also used the Vuex helper function  `…mapGetters()` to access our comments state as `computed` property. In this component we also defined some styles to beautify our interface in the `style` block.\n\n\n### Create the NewComment.vue component\n\nOur third component is responsible for displaying a form to our users for comment posting. It should also send a request to our database when a user submits his comment. Let’s create the `NewComment.vue` component, copy and paste this code inside:\n\n``` html\n    ../resources/js/components/NewComment.vue\n    \u003ctemplate\u003e\n      \u003cdiv id=\"commentForm\" class=\"box has-shadow has-background-white\"\u003e\n    \n        \u003cform @keyup.enter=\"postComment\"\u003e\n          \u003cdiv class=\"field has-margin-top\"\u003e\n    \n            \u003cdiv class=\"field has-margin-top\"\u003e\n              \u003clabel class=\"label\"\u003eYour name\u003c/label\u003e\n              \u003cdiv class=\"control\"\u003e\n                \u003cinput type=\"text\" placeholder=\"Your name\" class=\"input is-medium\" v-model=\"comment.author\"\u003e\n              \u003c/div\u003e\n    \n            \u003c/div\u003e\n            \u003cdiv class=\"field has-margin-top\"\u003e\n              \u003clabel class=\"label\"\u003eYour comment\u003c/label\u003e\n              \u003cdiv class=\"control\"\u003e\n                            \u003ctextarea\n                              style=\"height:100px;\"\n                              name=\"comment\"\n                              class=\"input is-medium\" autocomplete=\"true\" v-model=\"comment.content\"\n                              placeholder=\"lorem ipsum\"\u003e\u003c/textarea\u003e\n              \u003c/div\u003e\n    \n            \u003c/div\u003e\n            \u003cdiv class=\"control has-margin-top\"\u003e\n              \u003cbutton style=\"background-color: #47b784\" :class=\"{'is-loading': submit}\"\n                      class=\"button has-shadow is-medium has-text-white\"\n                      :disabled=\"!isValid\"\n                      @click.prevent=\"postComment\"\n                      type=\"submit\"\u003e Submit\n              \u003c/button\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/form\u003e\n        \u003cbr\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n      export default {\n        name: \"NewComment\",\n        data() {\n          return {\n            submit: false,\n            comment: {\n              content: '',\n              author: '',\n            }\n          }\n        },\n        methods: {\n          postComment() {\n            this.submit = true;\n            this.$store.dispatch('ADD_COMMENT', this.comment)\n              .then(response =\u003e {\n                this.submit = false;\n                if (response.data === 'ok')\n                  console.log('success')\n              }).catch(err =\u003e {\n              this.submit = false\n            })\n    \n          },\n        },\n        computed: {\n          isValid() {\n            return this.comment.content !== '' \u0026\u0026 this.comment.author !== ''\n          }\n        }\n      }\n    \u003c/script\u003e\n    \n    \u003cstyle scoped\u003e\n      .has-margin-top {\n        margin-top: 15px;\n      }\n    \n    \u003c/style\u003e\n```\n\nWe bind our `comment` data to our comment content and author name fields using the Vue.js `v-model` directive. We handled the form submission with the `postComment` function inside which we dispatch the `ADD_COMMENT` mutation with the comment data entered by the user. We also defined `isValid`  as a computed property that we use to disable the **submit** button if the two required fields are empty.\n\n\n## Finalize the app\n\nNow, let’s create our `comments.blade.php` file which contains our Vue.js components. Then paste this code inside: \n\n``` php\n    //live_comments/resources/views/comments.blade.php\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"/\u003e\n        \u003ctitle\u003eLive commenting system with Laravel and Pusher\u003c/title\u003e\n        \u003cmeta name=\"csrf-token\" content=\"{{ csrf_token() }}\"\u003e\n        \u003cmeta name=\"viewport\"\n              content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\"\u003e\n    \n        \u003c!-- Bootstrap core CSS --\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.1/css/bulma.min.css\"/\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.5.2/animate.min.css\"/\u003e\n    \n        \u003cstyle\u003e\n            html {\n                background: radial-gradient(ellipse at center, #fff 0, #ededfd 100%);\n            }\n    \n            #app {\n                width: 60%;\n                margin: 4rem auto;\n            }\n    \n            .container {\n                margin: 0 auto;\n                position: relative;\n                width: unset;\n            }\n    \n            .question-wrapper {\n                text-align: center;\n            }\n    \n            .has-shadow {\n                box-shadow: 0 4px 8px -2px rgba(0, 0, 0, 0.05) !important;\n            }\n    \n        \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \n    \n    \u003cdiv id=\"app\"\u003e\n    \n        \u003cdiv class=\"container\"\u003e\n            \u003cdiv class=\"question-wrapper\"\u003e\n                \u003cimg width=\"200\" src=\"{{ asset('images/adonuxt.png') }}\" alt=\"\"\u003e\n                \u003ch5 class=\"is-size-2\" style=\"color: #220052;\"\u003e\n                    What do you think about \u003cspan style=\"color: #47b784;\"\u003eLaravel\u003c/span\u003e?\u003c/h5\u003e\n                \u003cbr\u003e\n                \u003ca href=\"#commentForm\" class=\"button is-medium has-shadow has-text-white\" style=\"background-col\n                or: #47b784\"\u003eComment\u003c/a\u003e\n            \u003c/div\u003e\n    \n            \u003cbr\u003e\u003cbr\u003e\n            \u003ccomments\u003e\u003c/comments\u003e\n            \u003cnew-comment\u003e\u003c/new-comment\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \n    \u003cscript async src=\"{{mix('js/app.js')}}\"\u003e\u003c/script\u003e\n    \n    \u003c/body\u003e\n    \n    \u003c/html\u003e\n```\n\nWe are almost done! Now open your terminal and run `npm run dev` to build your app. This can take a few seconds. After this step, run `php artisan serve` and open your browser to `localhost:8000`  to see your app working fine. Try posting a new comment! You should see your comment added in realtime 😎.\n\n\n\u003e **Note**: If you encounter  a 500 error when trying to submit a comment, it’s sure that you have to disable Pusher encryption. Open these files  `../config/broadcasting.php` and  `../resources/js/bootstrap.js` and make sure you disable Pusher encryption `encrypted: false` in both of them.\n\n\n## Conclusion\n\nIn this tutorial, we have covered how to create a live commenting system using Laravel, Vue.js and Pusher. You can get the full source code [here](https://github.com/Ethiel97/comments-laravel-pusher).","metaTitle":"Build a live commenting system with Laravel and Vue.js","metaDescription":"Build a simple live comments web app using Laravel and Vue.js. Users are able to post comments, and see other comments appear in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2LpicPeZ4voAsBOjRTmoa9","type":"Entry","createdAt":"2019-03-06T22:05:30.070Z","updatedAt":"2019-03-06T22:05:30.070Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"End to end encryption in Go with Pusher Channels","url":"encryption-go-channels","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3Khmrnzj5moO4S6WOYOGAo","type":"Entry","createdAt":"2018-11-14T14:35:55.702Z","updatedAt":"2019-03-03T15:15:59.601Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Lanre Adelowo","url":"lanre-adelowo","email":"adelowomailbox@gmail.com","twitter":"https://twitter.com/alanreadelowo","github":"https://github.com/adelowo","guestWriter":true}}],"projectRepo":"https://github.com/adelowo/pusher-encrypted-channels","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}}],"reviewDate":"2019-03-06","description":"Pusher Channels allows for end-to-end encryption. In this tutorial, learn how to use it by building a simple realtime blog feed, with a Golang backend. Users will be able to create blog posts and see them published instantly, but all data will be fully encrypted and not shared with Pusher.","prerequisite":"You will need Go 1.8+ set up on your machine.","content":"Privacy is a hot topic this days. Who has access to what and who can read my conversation with a friend. [Pusher Channels](https://pusher.com/channels) offers three kinds of channels:\n\n- Public\n- Private\n- Encrypted\n\nBasically, all three perform the same functions - flexible pub/sub messaging and tons of others. But there are few differences between them. Public channels do not require client-server authentication in order to subscribe to events. Private channels take it a step further by requiring client-server authentication. Encrypted channels build on top of private channels by introducing security in the form of encrypted data. \n\n![go-pusher-encryption-dashboard-1](//images.ctfassets.net/1es3ne0caaid/79OJvQvTGQQpJ78b9C7FeW/94bc78cd4744befc50a87fad4efd00b9/go-pusher-encryption-dashboard-1.png)\n\n![go-pusher-encryption-dashboard-2](//images.ctfassets.net/1es3ne0caaid/20bWhmdBXzQzv7OHnH4k47/ed0c7b1b125f4887d9dd14822ea81f16/go-pusher-encryption-dashboard-2.png)\n\nKindly take a look at the images above and spot the difference. Seen any yet ? In the first image which shows the **Debug console** for a public channel, you can see the data being sent to Pusher Channels contains some fields - `title`, `content` and `createdAt`. Now take a look at the second image, you will notice those fields are no longer present but instead you have a bunch of non-human readable content your application obviously didn’t create.  The field called `ciphertext` is what the data you sent to Pusher Channels was converted to. The word `ciphertext` outside this discourse refers to encrypted and/or garbled data.\n\n\n## Understanding encrypted channels\n\nAs depicted above, an advantage of an encrypted channel is the ability to send messages only the server SDK and any of your connected clients can read. No one else - including Pusher -  will be able to read the messages. \n\n\n\u003e Remember that a client has to go through the authentication process too.\n\nPusher Channels uses one of the current top encryption algorithms available and that is [Secretbox](https://nacl.cr.yp.to/box.html). On the server side, the application author is meant to provide an encryption key to be used for the data encryption. This encryption key never gets to Pusher servers, which is why you are the only one that can read messages in an encrypted channel.\n\nBut a question. If the encryption key never gets to Pusher servers, how is a connected client able to subscribe to an event in an encrypted channel and read/decrypt the message ? The answer resides in the authentication process. During authentication, a shared secret key is generated based off the master encryption key and the channel name. The generated shared secret key will be used to encrypt the data before being offloaded to Pusher Channels. The shared secret is also sent as part of a successful authentication response as the client SDK will need to store it as it will be used for decrypting encrypted messages it receives. Again notice that since the encryption key never leaves your server, there is no way Pusher or any other person can read the messages if they don’t go through the authentication process - which is going to be done by the client side SDK.\n\n\n\u003e Note that this shared secret is channel specific. For each channel subscribed to, a new shared secret is generated.\n\nHere is a sample response:\n\n\n```json    \n    {\n      \"auth\": \"3b65aa197f334949f0ef:ffd3094d43e1bb21d5eb849c3debcbba0f7dd32bddeb0bb7dd8441516029853d\",\n      \"channel_data\": {\n        \"user_id\": \"10\",\n        \"user_info\": {\n          \"random\": \"random\"\n        }\n      },\n      \"shared_secret\": \"oB4frIyBUiYVzbUSBFCBl7U5BxzW8ni6wIrO4UaYIeo=\"\n    }\n```     \n\nApart from privacy and security, another benefit encrypted channels provide is message authenticity and protection against forgery. So there is maximum guarantee that whatever message is being received was published by someone who has access to the encryption key.\n\n\n## Implementing encrypted channels\n\nTo show encrypted channels in practice, we will build a live feed application. The application will consist of a server and client. The server will be written in Go. \n\nBefore getting started, it will be nice to be aware of some limitations imposed by an encrypted channel. They are:\n\n\n- Channel name(s) must begin with `private-encrypted-`. Examples include `private-encrypted-dashboard` or `private-encrypted-grocery-list`.  If you provide an encryption key but fail to follow the naming scheme, your data will not be encrypted.\n- [Client events](https://pusher.com/docs/client_api_guide/client_events#trigger-events) cannot be triggered\n- Channel and event names are not encrypted. This is for good reasons as events need to be dispatched to right clients and making sure an event in the Pusher Channels namespace  - `pusher:` - cannot be used.\n\nBefore proceeding, you will need to create a new directory called `pusher-encrypted-feeds`. Make sure to create it within your `$GOPATH`. It can be done by issuing the following command in a terminal:\n\n```    \n    $ mkdir pusher-encrypted-feeds\n```    \n\n\n## Prerequisites\n\n\n- Golang `\u003e=1.8`\n- A [Pusher account](https://dashboard.pusher.com)\n- OpenSSL tool.\n\n\n\u003e If you are a Windows user, please note that you can make use of Git Bash since it comes with the OpenSSL toolkit.\n## Building the server\n\nThe first thing to do is to create a [Pusher Channels](https://pusher.com/channels) account if you don’t have one already. You will need to take note of your app keys and secret as we will be using them later on in the tutorial.\n\nIn the `pusher-encrypted-feeds` directory, you will need to create another directory called `server`.\n\nThe next step of action is to create a `.env` file to contain the secret and key gotten from the dashboard. You should paste in the following contents:\n\n```env\n    // pusher-encrypted-feeds/server/.env\n    \n    PUSHER_APP_ID=\"PUSHER_APP_ID\"\n    PUSHER_APP_KEY=\"PUSHER_APP_KEY\"\n    PUSHER_APP_SECRET=\"PUSHER_APP_SECRET\"\n    PUSHER_APP_CLUSTER=\"PUSHER_APP_CLUSTER\"\n    PUSHER_APP_SECURE=\"1\"\n    PUSHER_CHANNELS_ENCRYPTION_KEY=\"PUSHER_CHANNELS_ENCRYPTION_KEY\"\n```    \n\n`PUSHER_CHANNELS_ENCRYPTION_KEY`  will be the master encryption key used to generate the shared secret and it should be difficult to guess. It is also required to be a 32 byte encryption key. You can generate a suitable encryption key with the following command:\n\n```    \n    $ openssl rand -base64 24\n``` \n\nYou will also need to install some dependencies - the Pusher Go SDK and another for parsing the `.env` file you previously created. You can grab those dependencies by running:\n\n```    \n    $ go get github.com/joho/godotenv\n    $ go get github.com/pusher/pusher-http-go\n```    \n\nYou will need to create a `main.go` file and paste in the following content:\n\n```go\n    // pusher-encrypted-feeds/server/main.go\n    \n    package main\n    \n    import (\n            \"encoding/json\"\n            \"errors\"\n            \"flag\"\n            \"fmt\"\n            \"io/ioutil\"\n            \"log\"\n            \"net/http\"\n            \"os\"\n            \"strings\"\n            \"sync\"\n            \"time\"\n    \n            \"github.com/joho/godotenv\"\n            pusher \"github.com/pusher/pusher-http-go\"\n    )\n    \n    func main() {\n    \n            port := flag.Int(\"http.port\", 1400, \"Port to run HTTP service on\")\n    \n            flag.Parse()\n    \n            err := godotenv.Load()\n            if err != nil {\n                    log.Fatal(\"Error loading .env file\")\n            }\n    \n            appID := os.Getenv(\"PUSHER_APP_ID\")\n            appKey := os.Getenv(\"PUSHER_APP_KEY\")\n            appSecret := os.Getenv(\"PUSHER_APP_SECRET\")\n            appCluster := os.Getenv(\"PUSHER_APP_CLUSTER\")\n            appIsSecure := os.Getenv(\"PUSHER_APP_SECURE\")\n    \n            var isSecure bool\n            if appIsSecure == \"1\" {\n                    isSecure = true\n            }\n    \n            client := \u0026pusher.Client{\n                    AppId:               appID,\n                    Key:                 appKey,\n                    Secret:              appSecret,\n                    Cluster:             appCluster,\n                    Secure:              isSecure,\n                    EncryptionMasterKey: os.Getenv(\"PUSHER_CHANNELS_ENCRYPTION_KEY\"),\n            }\n    \n            mux := http.NewServeMux()\n    \n            f := \u0026feed{\n                    mu:   \u0026sync.RWMutex{},\n                    data: make(map[string]string, 0),\n            }\n    \n            mux.Handle(\"/feed\", createFeedTitle(client, f))\n            mux.Handle(\"/pusher/auth\", authenticateUsers(client))\n            \n            log.Println(\"Starting HTTP server\")\n            log.Fatal(http.ListenAndServe(fmt.Sprintf(\":%d\", *port), mux))\n    }\n    \n    type feed struct {\n            data map[string]string\n    \n            mu *sync.RWMutex\n    }\n    \n    func (f *feed) exists(title string) bool {\n            f.mu.RLock()\n            defer f.mu.RUnlock()\n            _, ok := f.data[title]\n            return ok\n    }\n    \n    func (f *feed) Add(title, content string) error {\n            if f.exists(title) {\n                    return errors.New(\"title already exists\")\n            }\n    \n            f.mu.Lock()\n            defer f.mu.Unlock()\n            f.data[title] = content\n            return nil\n    }\n    \n    const (\n            successMsg = \"success\"\n            errorMsg   = \"error\"\n    )\n    \n    func createFeedTitle(client *pusher.Client, f *feed) http.HandlerFunc {\n            return func(w http.ResponseWriter, r *http.Request) {\n                    w.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n                    w.Header().Set(\"Access-Control-Allow-Methods\", \"POST, GET, OPTIONS, PUT, DELETE\")\n                    w.Header().Set(\"Access-Control-Allow-Headers\", \"Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization\")\n    \n                    if r.Method == http.MethodOptions {\n                            return\n                    }\n    \n                    writer := json.NewEncoder(w)\n    \n                    type respose struct {\n                            Message   string `json:\"message\"`\n                            Status    string `json:\"status\"`\n                            Timestamp int64  `json:\"timestamp\"`\n                    }\n    \n                    if r.Method != http.MethodPost {\n                            w.WriteHeader(http.StatusMethodNotAllowed)\n                            writer.Encode(\u0026respose{\n                                    Message:   http.StatusText(http.StatusMethodNotAllowed),\n                                    Status:    errorMsg,\n                                    Timestamp: time.Now().Unix(),\n                            })\n    \n                            return\n                    }\n    \n                    var request struct {\n                            Title   string `json:\"title\"`\n                            Content string `json:\"content\"`\n                    }\n    \n                    if err := json.NewDecoder(r.Body).Decode(\u0026request); err != nil {\n                            w.WriteHeader(http.StatusBadRequest)\n                            writer.Encode(\u0026respose{\n                                    Message:   \"Invalid request body\",\n                                    Status:    errorMsg,\n                                    Timestamp: time.Now().Unix(),\n                            })\n                            return\n                    }\n    \n                    if len(strings.TrimSpace(request.Title)) == 0 {\n                            w.WriteHeader(http.StatusBadRequest)\n                            writer.Encode(\u0026respose{\n                                    Message:   \"Title field is empty\",\n                                    Status:    errorMsg,\n                                    Timestamp: time.Now().Unix(),\n                            })\n                            return\n                    }\n    \n                    if len(strings.TrimSpace(request.Content)) == 0 {\n                            w.WriteHeader(http.StatusBadRequest)\n                            writer.Encode(\u0026respose{\n                                    Message:   \"Content field is empty\",\n                                    Status:    errorMsg,\n                                    Timestamp: time.Now().Unix(),\n                            })\n                            return\n                    }\n    \n                    if err := f.Add(request.Title, request.Content); err != nil {\n                            w.WriteHeader(http.StatusAlreadyReported)\n                            writer.Encode(\u0026respose{\n                                    Message:   err.Error(),\n                                    Status:    errorMsg,\n                                    Timestamp: time.Now().Unix(),\n                            })\n                            return\n                    }\n    \n                    go func() {\n    \n                            _, err := client.Trigger(\"private-encrypted-feeds\", \"items\", map[string]string{\n                                    \"title\":     request.Title,\n                                    \"content\":   request.Content,\n                                    \"createdAt\": time.Now().String(),\n                            })\n    \n                            if err != nil {\n                                    fmt.Println(err)\n                            }\n    \n                    }()\n    \n                    w.WriteHeader(http.StatusOK)\n                    writer.Encode(\u0026respose{\n                            Message:   \"Feed item was successfully added\",\n                            Status:    errorMsg,\n                            Timestamp: time.Now().Unix(),\n                    })\n            }\n    }\n    \n    func authenticateUsers(client *pusher.Client) http.HandlerFunc {\n            return func(w http.ResponseWriter, r *http.Request) {\n                    // Handle CORS\n                    w.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n                    w.Header().Set(\"Access-Control-Allow-Methods\", \"POST, GET, OPTIONS, PUT, DELETE\")\n                    w.Header().Set(\"Access-Control-Allow-Headers\", \"Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization\")\n    \n                    if r.Method == http.MethodOptions {\n                            return\n                    }\n    \n                    params, err := ioutil.ReadAll(r.Body)\n                    if err != nil {\n                            w.WriteHeader(http.StatusBadRequest)\n                            return\n                    }\n    \n                    presenceData := pusher.MemberData{\n                            UserId: \"10\",\n                            UserInfo: map[string]string{\n                                    \"random\": \"random\",\n                            },\n                    }\n    \n                    response, err := client.AuthenticatePresenceChannel(params, presenceData)\n                    if err != nil {\n                            w.WriteHeader(http.StatusBadRequest)\n                            return\n                    }\n    \n                    w.Write(response)\n            }\n    }\n```    \n\n\nIn the above, we create an HTTP server with two endpoints:\n\n\n- `/pusher/auth` for authentication of client SDKs.\n- `/feed` for the addition of a new feed item.\n\n\n\u003e Note that the feed items will not be stored in a persistent database but in memory instead\n\nYou should be able to run the server now. That can be done with:\n\n```    \n    $ go run main.go\n```    \n\n## Building the client\n\nThe client is going to contain three pages:\n\n- a dashboard page\n- a form page for adding new feed items \n- a feed page for displaying feed items in realtime as received from the encrypted channel.\n\nYou will need to create a directory called `client`. That can be done with:\n\n```   \n    $ mkdir client\n```    \n\nTo get started, we will need to build the form page to allow new items to be added. You will need to create a file called `new.html` with:\n\n```    \n    $ touch new.html\n```    \n\nIn the newly created `new.html` file, paste the following content:\n\n```html\n    \u003c!-- pusher-encrypted-feeds/client/new.html --\u003e\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003ctitle\u003ePusher realtime feed\u003c/title\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /\u003e\n        \u003clink rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\" /\u003e\n        \u003cbase href=\"/\" /\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.2/css/bulma.min.css\"\u003e\n    \u003cstyle\u003e\n    .hidden { display: none }\n    \u003c/style\u003e\n      \u003cbody\u003e\n          \u003csection class=\"section\"\u003e\n              \u003cdiv class=\"container\"\u003e\n    \u003cdiv class=\"columns\"\u003e\n      \u003cdiv class=\"column is-5\"\u003e\n        \u003ch3 class=\"notification\"\u003eCreate a new post\u003c/h3\u003e\n        \u003cdiv class=\"notification is-success hidden\" id=\"success\"\u003e\u003c/div\u003e\n        \u003cdiv class=\"is-danger notification hidden\" id=\"error\"\u003e\u003c/div\u003e\n        \u003cform id=\"feed-form\"\u003e\n          \u003cdiv class=\"field\"\u003e\n            \u003clabel class=\"label\"\u003eTitle : \u003c/label\u003e\n            \u003cdiv class=\"control\"\u003e\n              \u003cinput\n                class=\"input\"\n                type=\"text\"\n                placeholder=\"Post title\"\n                name=\"title\"\n                id=\"title\"\n              /\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n    \n          \u003cdiv\u003e\u003clabel\u003eMessage: \u003c/label\u003e\u003c/div\u003e\n          \u003cdiv\u003e\n            \u003ctextarea\n              rows=\"10\"\n              cols=\"70\"\n              name=\"content\"\n                 id=\"content\"\n            \u003e\u003c/textarea\u003e\n          \u003c/div\u003e\n    \n    \n    \u003cbutton id=\"submit\" class=\"button is-info\"\u003e\n      Send\n    \u003c/button\u003e\n        \u003c/form\u003e\n              \u003c/div\u003e\n      \u003cdiv class=\"is-7\"\u003e\u003c/div\u003e\n           \u003c/section\u003e\n      \u003c/body\u003e\n      \u003cscript src=\"app.js\"\u003e\u003c/script\u003e\n    \u003c/html\u003e\n```    \n\nThis is as simple as can be. We reference the Bulma css library, we create a form with an input and text field. Finally we link to a non-existent file called `app.js` - we will create that in a bit.\n\nTo view what this file looks like, you should navigate to the `client` directory and run the following command:\n\n```    \n    $ python -m http.server 8000\n```    \n\n\n\u003e Here I used Python’s inbuilt server but you are free to use whatever. \n\nYou should visit `localhost:8000/new.html` . You should be presented with something similar to the image below:\n\n![go-pusher-encryption-demo-1](//images.ctfassets.net/1es3ne0caaid/6eeu4WgVojhVIKWB0BcJwH/03d22ca53507c6599403c7319654013f/go-pusher-encryption-demo-1.png)\n\nAs said earlier, we linked to a non-existent file `app.js`, we will need to create it and fill it with some code. Create the `app.js` file with:\n\n```    \n    $ touch app.js\n```    \n\nIn the newly created file, paste the following:\n\n```javascript\n    // pusher-encrypted-channels/client/app.js\n    \n    (function() {\n      const submitFeedBtn = document.getElementById('feed-form');\n      const isDangerDiv = document.getElementById('error');\n      const isSuccessDiv = document.getElementById('success');\n    \n      if (submitFeedBtn !== null) {\n        submitFeedBtn.addEventListener('submit', function(e) {\n          isDangerDiv.classList.add('hidden');\n          isSuccessDiv.classList.add('hidden');\n          e.preventDefault();\n          const title = document.getElementById('title');\n          const content = document.getElementById('content');\n    \n          if (title.value.length === 0) {\n            isDangerDiv.classList.remove('hidden');\n            isDangerDiv.innerHTML = 'Title field is required';\n            return;\n          }\n    \n          if (content.value.length === 0) {\n            isDangerDiv.classList.remove('hidden');\n            isDangerDiv.innerHTML = 'Content field is required';\n            return;\n          }\n    \n          fetch('http://localhost:1400/feed', {\n            method: 'POST',\n            body: JSON.stringify({ title: title.value, content: content.value }),\n            headers: {\n              'Content-Type': 'application/json',\n            },\n          }).then(\n            function(response) {\n              if (response.status === 200) {\n                isSuccessDiv.innerHTML = 'Feed item was successfully added';\n                isSuccessDiv.classList.remove('hidden');\n                setTimeout(function() {\n                  isSuccessDiv.classList.add('hidden');\n                }, 1000);\n                return;\n              }\n    \n              if (response.status === 208) {\n                message = 'Feed item already exists';\n              } else {\n                message = response.statusText;\n              }\n    \n              isDangerDiv.innerHTML = message;\n              isDangerDiv.classList.remove('hidden');\n            },\n            function(error) {\n              isDangerDiv.innerHTML = 'Could not create feed item';\n              isDangerDiv.classList.remove('hidden');\n            }\n          );\n        });\n      }\n    })();\n```    \n\nIn the above, we validate the form whenever the **Send** button is clicked. If the form contains valid data, it is sent to the Go server for processing. The server will store it and trigger a message to Pusher Channels. \n\nGo ahead and submit the form. If successful and you are on the **Debug Console**, you will notice something of the following sort:\n\n![go-pusher-encryption-dashboard-3](//images.ctfassets.net/1es3ne0caaid/4zefJqFCJnj1fjcu6Om434/2b31ae6871756544195d9b113af03b2e/go-pusher-encryption-dashboard-3.png)\n\nThe next point of action will be to create the feeds page so entries can be viewed in realtime. You will need to create a file called `feed.html`. That can be done with:\n\n```    \n    $ touch feed.html\n```    \n\nIn the new file, paste the following HTML code:\n\n```html\n    \u003c!-- pusher-encrypted-channels/client/feed.html --\u003e\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003ctitle\u003ePusher realtime feed\u003c/title\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /\u003e\n        \u003clink rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\" /\u003e\n        \u003cbase href=\"/\" /\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.2/css/bulma.min.css\"\u003e\n      \u003cbody\u003e\n          \u003csection class=\"section\"\u003e\n              \u003cdiv class=\"container\"\u003e\n           \u003ch1 class=\"notification is-info\"\u003eYour feed\u003c/h1\u003e\n    \u003cdiv class=\"columns\"\u003e\n      \u003cdiv class=\"column is-7\"\u003e\n        \u003cdiv id=\"feed\"\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n              \u003c/div\u003e\n           \u003c/section\u003e\n      \u003c/body\u003e\n      \u003cscript src=\"https://js.pusher.com/4.3/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.1.0/handlebars.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"app.js\"\u003e\u003c/script\u003e\n    \u003c/html\u003e\n```    \n\nThis page is basically empty. It will be updated by the Channels client SDK as it receives data. \nWe are linking to the Pusher Channels client SDK and Handlebars. Handlebars is used to compile templates we will inject into the page. \n\nTo be able to receive and update the feeds page with data the `app.js` file has to be updated to make use of Pusher Channels. In `app.js` , append the following code:\n\n\n```javascript    \n    // pusher-encrypted-feed/client/app.js\n    \n    // Sample template to be injected\n    const tmpl = `\n          \u003cdiv class=\"box\"\u003e\n            \u003carticle class=\"media\"\u003e\n              \u003cdiv class=\"media-left\"\u003e\n                \u003cfigure class=\"image is-64x64\"\u003e\n                  \u003cimg src=\"https://bulma.io/images/placeholders/128x128.png\" alt=\"Image\" /\u003e\n                \u003c/figure\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"media-content\"\u003e\n                \u003cdiv class=\"content\"\u003e\n                  \u003cp\u003e\n                    \u003cstrong\u003e{{title}}\u003c/strong\u003e\n                    \u003csmall\u003e{{createdAt}}\u003c/small\u003e \u003cbr /\u003e\n                    {{content}}\n                  \u003c/p\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/article\u003e\n          \u003c/div\u003e\n    `;\n    \n      const APP_KEY = 'PUSHER_APP_KEY';\n      const APP_CLUSTER = 'PUSHER_CLUSTER';\n    \n      Pusher.logToConsole = true;\n    \n      const pusher = new Pusher(APP_KEY, {\n        cluster: APP_CLUSTER,\n        authEndpoint: 'http://localhost:1400/pusher/auth',\n      });\n    \n      const channel = pusher.subscribe('private-encrypted-feeds');\n      // Use Handlebars to compile the template\n      const template = Handlebars.compile(tmpl);\n      const feedDiv = document.getElementById('feed');\n    \n      channel.bind('items', function(data) {\n        // replace some fields in the template with data from the event.\n        const html = template(data);\n    \n        const divElement = document.createElement('div');\n        divElement.innerHTML = html;\n    \n        // Update the page\n        feedDiv.appendChild(divElement);\n      });\n```      \n\n\n\u003e Remember to replace both `PUSHER_CLUSTER` and `PUSHER_KEY` with your credentials\n\nWith the addition above, the entire `app.js` should look like:\n\n```javascript\n    // pusher-encrypted-feed/client/app.js\n    \n    (function() {\n      const submitFeedBtn = document.getElementById('feed-form');\n      const isDangerDiv = document.getElementById('error');\n      const isSuccessDiv = document.getElementById('success');\n    \n      if (submitFeedBtn !== null) {\n        submitFeedBtn.addEventListener('submit', function(e) {\n          isDangerDiv.classList.add('hidden');\n          isSuccessDiv.classList.add('hidden');\n          e.preventDefault();\n          const title = document.getElementById('title');\n          const content = document.getElementById('content');\n    \n          if (title.value.length === 0) {\n            isDangerDiv.classList.remove('hidden');\n            isDangerDiv.innerHTML = 'Title field is required';\n            return;\n          }\n    \n          if (content.value.length === 0) {\n            isDangerDiv.classList.remove('hidden');\n            isDangerDiv.innerHTML = 'Content field is required';\n            return;\n          }\n    \n          fetch('http://localhost:1400/feed', {\n            method: 'POST',\n            body: JSON.stringify({ title: title.value, content: content.value }),\n            headers: {\n              'Content-Type': 'application/json',\n            },\n          }).then(\n            function(response) {\n              if (response.status === 200) {\n                isSuccessDiv.innerHTML = 'Feed item was successfully added';\n                isSuccessDiv.classList.remove('hidden');\n                setTimeout(function() {\n                  isSuccessDiv.classList.add('hidden');\n                }, 1000);\n                return;\n              }\n    \n              if (response.status === 208) {\n                message = 'Feed item already exists';\n              } else {\n                message = response.statusText;\n              }\n    \n              isDangerDiv.innerHTML = message;\n              isDangerDiv.classList.remove('hidden');\n            },\n            function(error) {\n              isDangerDiv.innerHTML = 'Could not create feed item';\n              isDangerDiv.classList.remove('hidden');\n            }\n          );\n        });\n      }\n    \n      const tmpl = `\n          \u003cdiv class=\"box\"\u003e\n            \u003carticle class=\"media\"\u003e\n              \u003cdiv class=\"media-left\"\u003e\n                \u003cfigure class=\"image is-64x64\"\u003e\n                  \u003cimg src=\"https://bulma.io/images/placeholders/128x128.png\" alt=\"Image\" /\u003e\n                \u003c/figure\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"media-content\"\u003e\n                \u003cdiv class=\"content\"\u003e\n                  \u003cp\u003e\n                    \u003cstrong\u003e{{title}}\u003c/strong\u003e\n                    \u003csmall\u003e{{createdAt}}\u003c/small\u003e \u003cbr /\u003e\n                    {{content}}\n                  \u003c/p\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/article\u003e\n          \u003c/div\u003e\n    `;\n    \n      const APP_KEY = 'PUSHER_APP_KEY';\n      const APP_CLUSTER = 'PUSHER_CLUSTER';\n    \n      Pusher.logToConsole = true;\n    \n      const pusher = new Pusher(APP_KEY, {\n        cluster: APP_CLUSTER,\n        authEndpoint: 'http://localhost:1400/pusher/auth',\n      });\n    \n      const channel = pusher.subscribe('private-encrypted-feeds');\n      const template = Handlebars.compile(tmpl);\n      const feedDiv = document.getElementById('feed');\n    \n      channel.bind('items', function(data) {\n        const html = template(data);\n    \n        const divElement = document.createElement('div');\n        divElement.innerHTML = html;\n    \n        feedDiv.appendChild(divElement);\n      });\n    })();\n```    \n\nYou can go ahead to open the `feed.html` page on a tab and `new.html` in another. Watch closely as whatever data you submit in `new.html` appears in `feed.html`. You can also keep an eye on the **Debug Console** to make sure all data is encrypted.\n\nTo make this app a little more polished, add an `index.html` page. You can find the source code at the  accompanying [GitHub repository](https://github.com/adelowo/pusher-encrypted-channels/blob/master/client/index.html) of this tutorial.\n\n\n## Conclusion\n\nIn this tutorial, I introduced you to a lesser known feature of Pusher Channels - end to end encryption with encrypted channels. We also built an application that uses encrypted channels instead of the regular public channels you might be used to. \n\nAs always, the entire code for this article can be found on [GitHub](https://github.com/adelowo/pusher-encrypted-channels).","metaTitle":"End to end encryption in Go with Pusher Channels","metaDescription":"Pusher Channels allows for end-to-end encryption. In this article, learn how to use it by building a simple realtime blog feed, with a Golang backend. Users will be able to create blog posts and see them published instantly, but all data will be fully encrypted and not shared with Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"29obfsQVC75y6xWpONEXMO","type":"Entry","createdAt":"2019-03-05T16:58:06.061Z","updatedAt":"2019-03-05T16:58:06.061Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Getting started with webpack - Part 10: Webpack and React.js from scratch","url":"webpack-part-10","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/getting-started-webpack","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6vbbi6HVOo2Uy4O2G4ou8M","type":"Entry","createdAt":"2018-01-31T14:10:06.663Z","updatedAt":"2018-02-26T12:31:10.461Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React","url":"react","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2ZVQkK3AmUbK2iZgUihU3C","type":"Entry","createdAt":"2019-01-23T11:31:37.525Z","updatedAt":"2019-01-23T11:31:37.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Webpack","url":"webpack","type":"library"}}],"reviewDate":"2019-03-05","description":"This ten-part series provides a comprehensive introduction to webpack, with practical examples throughout. Over the course of the series you will learn the basics of webpack, before moving on to more advanced topics such as building plugins and creating custom Vue and React setups. In part ten, set up a React project from scratch.","prerequisite":"You will need Node 6.11.5+ installed on your machine.","content":"## Introduction\n\nIn this final tutorial, we will consider how to configure another popular JavaScript library from scratch. As with Vue, React, comes with its own CLI tool that can help you get started pretty quickly. However, the React CLI tool abstracts all the logic and does all the magic in the background. So let’s attempt to set up React from scratch without using the CLI tool.\n\nIn the [previous post](https://pusher.com/tutorials/webpack-part-9) we learned how we can configure the popular JavaScript library Vue.js from scratch. We configured things we are already used to having from the vue-cli tool like hot reloading, stylesheet support, loading `.vue` files, and more.\n\n\n### A quick reminder\n\nBefore we get started, please note that we are not recommending any way of setting up the libraries. This article is designed to show you in examples how you can use webpack. You should decide to use CLI tools or manual depending on the project and the level of customization you want to have.\n\nNow, that that’s out of the way, let’s get started.\n\n\n\u003e Source code of the application is available on [GitHub](https://github.com/neoighodaro/getting-started-webpack).\n\n\n## Prerequisites\n\nTo follow along in this series, you need the following requirements:\n\n\n- Completed all previous parts of the series.\n- Basic knowledge of JavaScript.\n- Basic knowledge of the CLI.\n- A text editor. [VS Code](https://code.visualstudio.com/) is recommended.\n- Node.js (\u003e= 6.11.5) and npm installed locally.\n\nLet’s continue with the series.\n\n\n## Starting from scratch\n\nThe recommended way to start a React project is using the [create-react-app](https://github.com/facebook/create-react-app) tool. This tool will help us generate new React applications that are already complete with hot reloading, asset compilation and more all with one command:\n\n```\n    $ npx create-react-app my-app\n```\n\nHowever, the aim of this tutorial is to create a React application from scratch without using the CLI tool.\n\n### Getting started\n\nTo get started we have to create a new project directory. This will be the directory where all our code will reside. Create a new directory and `cd` to the directory on your terminal application and run the following command:\n\n```\n    $ npm init -y\n```\n\nThe above command will initialize the project and add a new `package.json` file in the root of the directory.\n\nWhen the command has finished executing, run the next command to install `webpack` and `webpack-cli`:\n\n```\n    $ npm install --save-dev webpack webpack-cli\n```\n\nWhen both packages have been installed successfully, open the `package.json` file and add the following `script` as seen below:\n\n``` json\n    // File: ./package.json\n    {\n      // [...]\n      \n      \"scripts\": {\n        \"build\": \"webpack --mode development\"\n      },\n    \n      // [...]\n    }\n```\n\nNext, let’s install the required [Babel](http://babeljs.io) packages. To do this, run the following command below:\n\n```\n   $ npm i @babel/core babel-loader @babel/preset-env @babel/preset-react --save-dev\n```\n\nThis command will install the Babel packages we will use to bundle our React application. The `babel-react` package will help us compile the `.jsx` files if we have any in the project.\n\nBefore we continue, we need to configure our Babel installation. We can do this by creating a new `.babelrc` file in the root of the project and paste the following contents into it:\n\n```\n    // File: ./.babelrc\n    {\n      \"presets\": [\"@babel/preset-env\", \"@babel/preset-react\"]\n    }\n```\n\nNext, let’s create a new webpack configuration file and paste the following code into the file:\n\n``` javascript\n    // File: ./webpack.config.js\n    const env = process.env.NODE_ENV;\n    \n    module.exports = {\n      mode: env == 'production' || env == 'none' ? env : 'development',\n      entry: ['./src/app.js'],\n      module: {\n        rules: [\n          {\n            test: /\\.(js|jsx)$/,\n            exclude: /node_modules/,\n            loader: 'babel-loader'\n          }\n        ]\n      }\n    };\n```\n\nThis is actually the barest minimum we need to compile our React application. The main thing we added is the `babel-loader` which will help us bundle the JS and JSX files. Now let’s start writing some sample components.\n\nTo get started, we need to install the React package. In your terminal, run the following command to install React as a dependency:\n\n```\n    $ npm i react react-dom --save-dev\n```\nWhen the installation is complete, we can start creating some React specific files. In the root of the project, create a new `src` directory and inside the directory, create a new file `app.js` and paste the following code into the file:\n\n``` javascript\n    // File: ./src/app.js\n    import React from 'react';\n    import ReactDOM from 'react-dom';\n    \n    const App = () =\u003e \u003cdiv\u003eHello React!\u003c/div\u003e;\n    \n    ReactDOM.render(\u003cApp /\u003e, document.getElementById('app'));\n```\n\nNext, we need to create a new HTML file as our entry point. Create a new `index.html` file in the root of the project and paste the following code into it:\n\n``` html\n    \u003c!-- File: ./index.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\" /\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" /\u003e\n        \u003ctitle\u003eReact and Webpack\u003c/title\u003e\n      \u003c/head\u003e\n    \n      \u003cbody\u003e\n        \u003cdiv id=\"app\"\u003e\u003c/div\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nTo make sure webpack adds the bundled JavaScript to the HTML file, let’s install the `html-webpack-plugin` and add it to our webpack configuration file. Run the following command in your terminal to install the plugin:\n\n```\n    $ npm i html-webpack-plugin -D\n```\n\nWhen the installation is complete, open the webpack configuration file and update it as seen below:\n\n``` javascript\n    // File: ./webpack.config.js\n    // [...]\n    \n    const HtmlWebPackPlugin = require('html-webpack-plugin');\n    \n    module.exports = {\n      // [...]\n      \n      plugins: [\n        new HtmlWebPackPlugin({\n          template: 'index.html',\n          filename: 'index.html',\n          inject: true\n        })\n      ]\n    };\n```\n\nNext, run the following command below to build the application:\n\n```\n    $ npm run build\n```\n\nThis will build the application to the `dist` directory in the project directory. Open the `dist/index.html` file in your browser to see the bundled application:\n\n![webpack-10-1](//images.ctfassets.net/1es3ne0caaid/75aUpMJGKiosv7FGIbdHcU/25586aa5148bbb13e05d5a8669abf950/webpack-10-1.png)\n\n### Improving our webpack bundling\n\nAlthough our build above works, we can definitely do better. Let’s do some additional configuration that will get us closer to an actual development environment. First, we will install the webpack dev server. This will remove the need for us to manually launch the `index.html` file.\n\nIn your terminal, run the following command:\n\n```\n    $ npm i webpack-dev-server -D\n```\n\nNext, in your `package.json` file, add the following build script:\n\n``` json\n    // File: ./package.json\n    {\n      // [...]\n      \n      \"scripts\": {\n      \n        // [...]\n    \n        \"dev\": \"webpack-dev-server --open\"\n      }\n      \n      // [...]\n    }\n```\n\nNow when we run the `dev` script and visit http://localhost:8080, we should see the same output as above. However, when we change the contents of the `App.vue` the changes are not reflected immediately. \n\nTo add hot reload, let’s make a few changes. In the webpack configuration file, update as seen below:\n\n``` javascript\n    // File: ./webpack.config.js\n    // [...]\n    const webpack = require('webpack');\n    \n    module.exports = {\n      // [...]\n      \n      devServer: {\n        hot: true,\n        watchOptions: {\n          poll: true\n        }\n      },\n      \n      // [...]\n    \n      plugins: [\n        new webpack.HotModuleReplacementPlugin(),\n        \n        // [...]\n      ]\n    };\n```\n\nNow we can re-run the `dev` script and we will see true hot reloading whenever we change our source files.\n\n### Adding styles and other components\n\nRight now, we have a single component and an unstyled HTML page. Let’s add some styling and an additional component.\n\nIn the `src` directory create a new `components` directory and in the directory create a new file `HelloWorld.js` and paste the following code:\n\n``` javascript\n    // File: ./src/components/HelloWorld.js\n    import React from 'react';\n    \n    const HelloWorld = () =\u003e \u003ch1\u003eHello World!\u003c/h1\u003e;\n    \n    export default HelloWorld;\n```\n\nNext, create a new `styles` directory in the `src` directory and in this directory, create a new `app.css` file. Paste the following code inside the file:\n\n``` css\n    /* File: ./src/styles/app.css */\n    #app .container {\n      width: 100%;\n      margin: 0 auto;\n      max-width: 1200px;\n    }\n    \n    #app .container h1 {\n      color: #232b2b;\n      text-align: center;\n    }\n```\n\nNext, open the `src/app.js` file and replace the contents with the following:\n\n``` javascript\n    // File: ./src/app.js\n    import React from 'react';\n    import ReactDOM from 'react-dom';\n    import HelloWorld from './components/HelloWorld';\n    \n    import './styles/app.css';\n    \n    const App = () =\u003e (\n      \u003cdiv className=\"container\"\u003e\n        \u003cHelloWorld /\u003e\n      \u003c/div\u003e\n    );\n    \n    ReactDOM.render(\u003cApp /\u003e, document.getElementById('app'));\n```\n\nBefore we run the server again, let’s add a loader to handle the CSS we imported above. In your terminal, run the following command:\n\n```\n    $ npm i css-loader style-loader -D\n```\n\nWhen the installation is complete, open the webpack configuration file and update as seen below:\n\n``` javascript\n    // File: ./webpack.config.js\n    \n    // [...]\n    \n    module.exports = {\n      // [...]\n      \n      module: {\n        rules: [\n          // [...]\n          \n          {\n            test: /\\.css$/,\n            use: ['style-loader', 'css-loader']\n          }\n        ]\n      }\n      \n      // [...]\n    };\n```\n\nAbove, we just added the `style-loader` and `css-loader` to handle the CSS in the application.\n\nNow, run the command to build and start the server once again (if it was previously running, you need to kill it with `ctrl+c` and restart it):\n\n```\n    $ npm run dev\n```\nNow you should see the styled application when you visit http://localhost:8080\n\n![webpack-10-2](//images.ctfassets.net/1es3ne0caaid/5FR3OrncYbubHF1FM88fK2/e12c0d8fe1c214e06d5c6e89a5aba9cd/webpack-10-2.png)\n\nThat’s all. We have successfully created a React web application from scratch using webpack.\n\n## Conclusion\n\nIn this final tutorial of the series, we learned how to set up a new React application from scratch using the power of webpack. \n\nThroughout the series, we have touched on various aspects of webpack as a whole and though there is still a lot more, you should know your way around webpack now. If you need more information, you can always visit the [documentation](https://webpack.js.org/concepts/).\n\nThe source code to the applications built in the series is available on [GitHub](https://github.com/neoighodaro/getting-started-webpack).","metaTitle":"Getting started with webpack - Part 10","metaDescription":"This ten-part series provides a comprehensive introduction to webpack. Through the series you will learn the basics of webpack, before moving on to more advanced topics such as building plugins and creating custom Vue and React setups. In part nine, set up a React project from scratch."}}],"defaultValue":"JavaScript","queryType":"tag","pages":33,"route":"/tutorials","query":{"tag":"JavaScript","page":"5"}}},"page":"/tutorials","query":{"tag":"JavaScript","page":"5"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=JavaScript&page=5 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:32:32 GMT -->
</html>