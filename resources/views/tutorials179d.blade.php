<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=Android&page=3 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:31:11 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="12xz815">.css-12xz815{display:none;}@media all and (min-width:760px){.css-12xz815{display:inline-block;}}</style><div class="css-12xz815 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="1dgudy">.css-1dgudy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-1dgudy{display:none;}}</style><div class="css-1dgudy e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div name="Channels" class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">42</span> tutorials for “<span class="css-npldjc ehwuahf2">Channels &amp; Android</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="nh0oyd">.css-nh0oyd{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);background-color:#300D4F;}.css-nh0oyd:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-nh0oyd{margin:0 1rem;}}</style><a href="tutorials994f.html?tag=Android" class="css-nh0oyd e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="white"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsa785.html?product=Beams&amp;tag=Android" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorialsd528.html?product=Channels&amp;tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials05d7.html?product=Channels&amp;tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorials87f0.html?product=Channels&amp;tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials261c.html?product=Channels&amp;tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials9328.html?product=Channels&amp;tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials0e67.html?product=Channels" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#C223CE" xmlns="http://www.w3.org/2000/svg"><path fill="#C223CE" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#C223CE" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#C223CE" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#C223CE" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorials6609.html?product=Channels&amp;tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials52d6.html?product=Channels&amp;tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials7b3b.html?product=Channels&amp;tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Channels &amp; Android"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/memory-game-react-native.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a two-player memory game with React Native</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This tutorial will show you how to build a two-player memory game using React Native. Players sign in and are randomly a...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/workout-tracker-react-native.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1"> Create a live workout tracking app with React Native</h3><p class="css-k12xad e5jrto45">This tutorial takes you through building a workout tracking app in React Native, with a Node backend. Users will be able...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/stocks-push-notifications-kotlin.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Create a stocks application for Android featuring push notifications</h3><p class="css-k12xad e5jrto45">Build an Android app featuring realtime stock price updates and push notifications. You will use Kotlin to build a nativ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chatbot-kotlin-dialogflow.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Building a chatbot for Android with Kotlin and Dialogflow</h3><p class="css-k12xad e5jrto45">Build on an existing Kotlin Android chat app to create a chatbot feature. Use Dialogflow to generate the chatbot, with c...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/android-messenger-presence-kotlin.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an Android messenger app with online presence using Kotlin</h3><p class="css-k12xad e5jrto45">This tutorial shows how to build an Android messaging app featuring online presence functionality. Use Node and MongoDB ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/push-notifications-kotlin-food-delivery.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Maps<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Implement push notifications in Kotlin to create a food delivery app</h3><p class="css-k12xad e5jrto45">This tutorial uses Kotlin and React to create a full-featured food delivery application, with interfaces for admins and ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/android-poll-push-notifications.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flask<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an Android poll app with push notifications</h3><p class="css-k12xad e5jrto45">Build an Android app in Kotlin, with a backend in Python. Users are able to vote, and see other votes displayed in realt...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-app-framework7.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Chat<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app using Framework7</h3><p class="css-k12xad e5jrto45">Build a chat app for iOS and Android using Framework7 and Vue.js, with a simple Node.js backend. Framework7 is a free an...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/live-blog-kotlin-push-notifications.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Kotlin<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Beams</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live blog in Kotlin with push notifications</h3><p class="css-k12xad e5jrto45">Build an Android app with Kotlin. The app connects to a Node.js server, and provides push notifications to alert users w...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials40f4.html?product=Channels&amp;tag=Android&amp;page=2" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials8077.html?product=Channels&amp;tag=Android&amp;page=1" class="css-5s6711 edg0byb1">1</a><a href="tutorials40f4.html?product=Channels&amp;tag=Android&amp;page=2" class="css-5s6711 edg0byb1">2</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials179d.html?product=Channels&amp;tag=Android&amp;page=3" class="css-2wakph edg0byb1">3</a><a href="tutorialsed89.html?product=Channels&amp;tag=Android&amp;page=4" class="css-5s6711 edg0byb1">4</a><a href="tutorials439f.html?product=Channels&amp;tag=Android&amp;page=5" class="css-5s6711 edg0byb1">5</a><a href="tutorialsed89.html?product=Channels&amp;tag=Android&amp;page=4" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":42,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5tl7of1DKEgoi2oqIUWScS","type":"Entry","createdAt":"2018-11-06T11:45:11.893Z","updatedAt":"2018-11-06T11:45:11.893Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a two-player memory game with React Native","url":"memory-game-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNMemory","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4IiTE4WzzyQkoeAoaOqgcu","type":"Entry","createdAt":"2018-02-12T15:10:28.101Z","updatedAt":"2018-02-26T12:31:12.455Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Multiplayer Game","url":"multiplayer-game","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}}],"reviewDate":"2018-11-06","description":"This tutorial will show you how to build a two-player memory game using React Native. Players sign in and are randomly assigned an opponent. The game then involves searching for image pairs. The game board and score update in realtime.","prerequisite":"You will need Node, Yarn, ngrok and Expo installed on your machine. Some knowledge of React Native development is required.","content":"In this tutorial, we’ll build a realtime memory game app with React Native and Pusher Channels. \n\n\n## Prerequisites\n\nBasic knowledge of React Native is required.\n\nTo easily test the app on multiple devices, we’ll be using [Expo](https://expo.io/) to create it. Be sure to install their [Android](https://play.google.com/store/apps/details?id=host.exp.exponent\u0026hl=en) or [iOS](https://itunes.apple.com/us/app/expo-client/id982107779?mt=8) client apps. Log in to your Expo account on both the CLI and client apps. [Create one](https://expo.io/signup) if you don’t have it already.\n\nThese are the package versions used in creating the app:\n\n\n- Node 8.3.0\n- Yarn 1.7.0\n- Expo CLI 2.1.2\n- Expo SDK 30.0.0\n- Pusher 4.3.1\n\nLastly, you also need a [Pusher](https://pusher.com/) and [ngrok](https://ngrok.com/) account. We’ll use it to create a Pusher app instance and expose the local Pusher server to the internet.\n\n\n## App overview\n\nWe’re going to build a two-player memory game app. \n\nWhen they open the app, users will be greeted by a login screen where they have to enter their username:\n\n![rn-memory-demo-1](//images.ctfassets.net/1es3ne0caaid/7C8jOMvjDU4Su66c6qi4M2/cb7b88b8cf276fb80527cb7df91b0013/rn-memory-demo-1.png)\n\nWhen a user logs in, the app’s server component will pick two random users and they’re the ones who will play.\n\nOnce an opponent is found, both users are automatically navigated to the Game screen. By default, there will be a lot of question mark icons, these represent the cards that haven’t been opened yet:\n\n![rn-memory-demo-2](//images.ctfassets.net/1es3ne0caaid/45tgSa5DUA868yMSIsGyA8/4a35bfedcacbdae5e9de64f1e55e0e33/rn-memory-demo-2.png)\n\nTo play the game, users have to click on each one to reveal its content. Users can reveal the content of up to two cards before both of them closes. Once a user has selected a pair, they will stay open for the rest of the game.\n\nHere’s what the screen looks like while the two players are playing the game:\n\n![rn-memory-demo-3](//images.ctfassets.net/1es3ne0caaid/4osnUhZMPKyas6CmUCk4Mu/6e4c9a7c4fc29a95f2dec9eeef225bc6/rn-memory-demo-3.png)\n\nWhen one of the players accumulates the maximum score (in this case it’s 12), both players are notified that one of them already won and the UI is reset:\n\n![rn-memory-demo-4](//images.ctfassets.net/1es3ne0caaid/3UbXAG3a6s06k808Q4yIiM/a65c3ec37bfe970e1b4bbb2b548d5148/rn-memory-demo-4.png)\n\nYou can view the app’s source code in this [GitHub repo](https://github.com/anchetaWern/RNMemory).\n\n\n## Create a Pusher app\n\nYou need to create a Pusher app instance so you can use Pusher’s services.\n\nOn your Pusher account dashboard, create a new Pusher app and check the **Enable client events** in the app settings. This allows us to emit events directly from the app:\n\n![rn-memory-enable-client-events](//images.ctfassets.net/1es3ne0caaid/6pEk3EZMOc2m0aCsKO2yE4/90724fb8ba79aa2ca0e6504a594a27e6/rn-memory-enable-client-events.png)\n\n## Clone the starter project\n\nSo that we can focus on the main parts of the app, clone the app’s GitHub repo and switch to the `starter` branch:\n\n```\n    git clone https://github.com/anchetaWern/RNMemory\n    cd RNMemory\n    git checkout starter\n```\n\nThe `starter` branch contains all the screens of the app (Login and Game screen), helper functions, and the UI components that we will be using. The app screens and the server component are where we will do most of the work.\n\nNext, install all the packages the app and the server depend on:\n\n```\n    yarn install\n    cd server\n    npm install\n```\n\n## Starter project tour\n\nBefore we proceed to actually code the app, let’s first take a quick look at the files and folders that are already available in the starter project:\n\n\n- `app/screens` - this is where the app’s screens are stored. We only have two screens: Login and Game. Only a starter template with minimum output is available in the starter branch.\n- `app/helpers` - this is where the app’s helper functions are stored. In this case, we only have the `shuffleArray.js` file. It’s used to arrange the items in the array in random order. This is very useful for changing the location of the cards that need to be guessed in the screen.\n- `app/data` - this is where hard-coded data is stored. In this case, we only have the `cards.js` file which contains the definition for the unique cards that the app uses. We’re using [Expo’s vector icons](https://expo.github.io/vector-icons/) so the file contains the `name` of the icon, the `src` (for example, FontAwesome), and the `color` we want to apply to it.\n- `app/components` - this is where the UI components of the app are stored. In this case, we only have the `Card.js` which renders the individual cards, and `Score.js` which renders the score and name of the user.\n- `server` - this is where we will add the code for the server component of the app. Currently, it only has the `.env` file which contains the placeholder for Pusher app credentials.\n\n\n## Build the app\n\nWe’re now ready to start building the app. I encourage you to start running the app even if the code is still not complete. This allows you to visualize what the code does as we’re adding it:\n\n```\n    expo start\n```\n\n### Login screen\n\nIn the Login screen, start by importing all the packages we need:\n\n``` javascript\n    // app/screens/Login.js\n    import React, { Component } from \"react\";\n    import {\n      View,\n      Text,\n      TextInput,\n      Button,\n      Alert,\n      ActivityIndicator\n    } from \"react-native\";\n    \n    import Pusher from \"pusher-js/react-native\";\n    \n    // next: initialize state\n```\n\nNext, initialize the state and the user’s channel:\n\n``` javascript\n    state = {\n      username: \"\",\n      is_loading: false\n    };\n    \n    constructor(props) {\n      super(props);\n      this.pusher = null; // variable for storing the Pusher reference\n      this.my_channel = null; // variable for storing the channel assigned to this user\n    }\n    \n    // next: add render function\n```\n\nInside the `render` function, return the UI for the Login screen. In this case, we’re only asking the user’s username. The login button is visible by default, but it gets hidden in place of the activity indicator when the user clicks on it. It stays that way until such time that an opponent is found:\n\n``` javascript\n    render() {\n      return (\n        \u003cView style={styles.container}\u003e\n          \u003cView style={styles.topContent}\u003e\n            \u003cText style={styles.bigText}\u003eRNMemory\u003c/Text\u003e\n          \u003c/View\u003e\n    \n          \u003cView style={styles.mainContent}\u003e\n            \u003cText style={styles.label}\u003eUsername\u003c/Text\u003e\n            \u003cTextInput\n              style={styles.text_field}\n              onChangeText={username =\u003e {\n                this.setState({ username });\n              }}\n              value={this.state.username}\n              placeholder=\"Enter your username\"\n            /\u003e\n    \n            {!this.state.is_loading \u0026\u0026 (\n              \u003cButton onPress={this.login} title=\"Enter\" color=\"#0064e1\" /\u003e\n            )}\n    \n            {this.state.is_loading \u0026\u0026 (\n              \u003cActivityIndicator size=\"large\" color=\"#0000ff\" /\u003e\n            )}\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nWhen the login button is clicked, the `login` function gets executed. This will connect the user to Pusher and subscribe them in their own unique channel. Subscribing the user to their own channel allows us to:\n\n\n- Send data to them once an opponent is found. \n- While the game is ongoing, we use it to receive updates of the opponent’s score.\n- When the current user wins, we use it to send an update to the opponent that they lose.\n\nHere’s the code:\n\n``` javascript\n    login = () =\u003e {\n      let username = this.state.username;\n      \n      if (username) {\n        this.setState({\n          is_loading: true // hide's login button and shows activity indicator\n        });\n        \n        // connect to Pusher:\n        this.pusher = new Pusher(\"YOUR_PUSHER_API_KEY\", {\n          authEndpoint: \"YOUR_NGROK_URL/pusher/auth\",\n          cluster: \"YOUR_PUSHER_APP_CLUSTER\",\n          encrypted: true,\n          auth: {\n            params: { username: username }\n          }\n        });\n      \n        this.my_channel = this.pusher.subscribe(`private-user-${username}`); // subscribe to user's unique channel\n        \n        // subscription error occurred\n        this.my_channel.bind(\"pusher:subscription_error\", status =\u003e {\n          Alert.alert('Error', 'Subscription error occurred. Please restart the app');\n        });\n        \n        // subscription to their own channel succeeded\n        this.my_channel.bind(\"pusher:subscription_succeeded\", data =\u003e {\n          console.log(\"subscription ok: \", data);\n      \n          // next: add code for listening when opponent is found    \n        });\n      }\n    };\n```\n\nDon’t forget to add your Pusher App ID when connecting to Pusher. As for the `authEndpoint`, we’ll add it later once we run ngrok.\n\nNext, add the code for listening for the `opponent-found` event. This event is emitted from the server once two random users are matched. Both players are notified when that happens, and it will automatically navigate the user to Game screen:\n\n``` javascript\n    this.my_channel.bind(\"opponent-found\", data =\u003e {\n      console.log(\"opponent found: \", data);\n      \n      // determine who the opponent is, player one or player two?\n      let opponent =\n        username == data.player_one ? data.player_two : data.player_one;\n    \n      Alert.alert(\"Opponent found!\", `${opponent} will take you on!`);\n    \n      this.setState({\n        is_loading: false,\n        username: \"\"\n      });\n      \n      // navigate to the game screen\n      this.props.navigation.navigate(\"Game\", {\n        pusher: this.pusher, // Pusher connection\n        username: username, // current user's username\n        opponent: opponent, // opponent's username\n        my_channel: this.my_channel // current user's channel\n      });\n    });\n```\n\n### Game screen\n\nWe now move on to the Game screen. Start by importing the packages, helpers, data, and components we need:\n\n``` javascript\n    // app/screens/Game.js\n    import React, { Component } from \"react\";\n    import { View, Text, Button, FlatList, Alert } from \"react-native\";\n    import { FontAwesome, Entypo } from \"@expo/vector-icons\"; // the icon sources that the cards will use\n    \n    import Score from \"../components/Score\";\n    import Card from \"../components/Card\";\n    \n    import shuffleArray from \"../helpers/shuffleArray\"; // function for re-ordering the cards to be guessed\n    \n    import cards_data from \"../data/cards\"; // the unique card config\n    \n    // next: initialize state\n```\n\nNext, initialize the state:\n\n``` javascript\n    state = {\n      current_selection: [], // for storing the currently selected pairs. This always resets back to zero once two are selected \n      selected_pairs: [], // the pairs that had already been opened \n      score: 0, // current user's score\n      opponent_score: 0 // opponent's score\n    };\n    \n    // next: add the constructor\n```\n\nNext, add the `constructor`. This is where we add initial values for the Pusher channels and generate the cards, which will be rendered on the screen:\n\n``` javascript\n    constructor(props) {\n      super(props);\n    \n      this.pusher = null; // Pusher connection\n      this.my_channel = null; // current user's Pusher channel\n      this.opponent_channel = null; // opponent's Pusher channel\n      this.username = null; // current user's username\n      this.opponent = null; // opponent's username\n    \n      let sources = {\n        fontawesome: FontAwesome,\n        entypo: Entypo\n      };\n    \n      let clone = JSON.parse(JSON.stringify(cards_data)); // create a copy of the cards data\n    \n      this.cards = cards_data.concat(clone); // append the copy to its original\n      \n      // add a unique ID to each of the card\n      this.cards.map(obj =\u003e {\n        let id = Math.random()\n          .toString(36)\n          .substring(7);\n        obj.id = id;\n        obj.src = sources[obj.src];\n        obj.is_open = false;\n      });\n    \n      this.cards = shuffleArray(this.cards); // arrange the cards in random order\n    }\n    \n    // next: add componentDidMount\n```\n\nOnce the component is mounted, we pick up the navigation params that were passed from the Login screen earlier. This allows us to listen for events emitted by the opponent, and emit events from our own channel:\n\n``` javascript\n    componentDidMount() {\n      const { navigation } = this.props;\n      \n      // get Pusher connection and user's channel from the navigation param\n      this.pusher = navigation.getParam(\"pusher\");\n      this.my_channel = navigation.getParam(\"my_channel\");\n    \n      this.username = navigation.getParam(\"username\");\n      this.opponent = navigation.getParam(\"opponent\");\n      \n      // update the state with the cards generated inside the constructor earlier\n      this.setState({\n        cards: this.cards\n      });\n    \n      if (this.opponent) {\n        // subscribe to the opponent's channel\n        this.opponent_channel = this.pusher.subscribe(\n          `private-user-${this.opponent}`\n        );\n        this.opponent_channel.bind(\"pusher:subscription_error\", status =\u003e {\n          Alert.alert('Subscription error', 'Please restart the app');\n        });\n    \n        this.opponent_channel.bind(\"pusher:subscription_succeeded\", data =\u003e {\n          console.log(\"opponent subscription ok: \", data);\n          \n          // opponent's score is incremented\n          this.opponent_channel.bind(\"client-opponent-scored\", data =\u003e {\n            this.setState({\n              opponent_score: data.score\n            });\n          });\n          \n          // opponent won the game\n          this.opponent_channel.bind(\"client-opponent-won\", data =\u003e {\n            Alert.alert(\"You lose\", `${data.username} won the game`);\n            this.resetCards(); // close all the cards and reset the score\n          });\n        });\n      }\n    }\n```\n\nIn the code above, we’re listening for the `client-opponent-scored` event and the `client-opponent-won` event. The former allows the user to get updated of their opponent’s score. This is emitted by their opponent every time they open a matching pair.  The latter allows the user to get updated when their opponent wins the game. When this happens, we call the `resetCards` method to reset the UI. This allows both users to restart the game if they want. \n\nNext, we render the Game screen. Here, we use a FlatList to render all the cards. Below it, we use the Score component to render the username and score for both users:\n\n``` javascript\n    render() {\n      let contents = this.state.cards;\n    \n      return (\n        \u003cView style={styles.container}\u003e\n          \u003cView style={styles.body}\u003e\n            \u003cFlatList\n              data={contents}\n              renderItem={this.renderCard}\n              numColumns={4}\n              keyExtractor={item =\u003e item.id}\n              columnWrapperStyle={styles.flatlistRow}\n            /\u003e\n          \u003c/View\u003e\n          \u003cView style={styles.bottomContent}\u003e\n            \u003cScore score={this.state.score} username={this.username} /\u003e\n            \u003cScore score={this.state.opponent_score} username={this.opponent} /\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nThe `renderCard` function renders each individual card. This is where we use the Card component to render each card. We pass in the data which determines how the card will look like as props. The `clickCard` prop is where we pass the function to be executed when the card is clicked:\n\n``` javascript\n    renderCard = ({ item }) =\u003e {\n      return (\n        \u003cCard\n          key={item.id}\n          src={item.src}\n          name={item.name}\n          color={item.color}\n          is_open={item.is_open}\n          clickCard={this.clickCard.bind(this, item.id)}\n        /\u003e\n      );\n    };\n```\n\nHere’s the `clickCard` function. This is where we process the card opened by the user. We only process cards that aren’t already guessed by the user and is not already opened. If both conditions are `true`, we add the card to the array of currently selected cards (`selected_pairs`):\n\n``` javascript\n    clickCard = id =\u003e {\n      let selected_pairs = [...this.state.selected_pairs]; // array containing the card pairs that had already been guessed by the user\n      let current_selection = this.state.current_selection; // array containing the currently selected cards\n      let score = this.state.score; // the user's current score\n      \n      // get the index of the card clicked by the user\n      let index = this.state.cards.findIndex(card =\u003e {\n        return card.id == id;\n      });\n    \n      let cards = [...this.state.cards]; // an array containing the cards rendered on the screen\n      \n      if (\n        cards[index].is_open == false \u0026\u0026\n        selected_pairs.indexOf(cards[index].name) === -1\n      ) { // only process the cards that isn't currently open and is not a part of the one's that have already been guessed by the user\n        cards[index].is_open = true; // open the card\n        \n        // add the card in the current selection\n        current_selection.push({\n          index: index,\n          name: cards[index].name\n        });\n    \n        // next: add code for checking if there are already two cards opened        \n      }\n    };\n    \n    // next: add code for resetting cards\n```\n\nOnce the user has already picked a pair of cards, we check whether their names are the same. If it does, we increment the user’s score by one and notify the opponent by emitting an event in the current user’s channel. This works because we’ve set up the current user to listen for events emitted from their opponent’s channel. So anytime we trigger an event on our own channel, the opponent gets notified. Once the current user accumulates the maximum score, we reset the UI and notify the opponent. On the other hand, if the pair selected by the user isn’t the same, we update the state to close the cards:\n\n``` javascript\n    if (current_selection.length == 2) {\n      if (current_selection[0].name == current_selection[1].name) {\n        score += 1;\n        selected_pairs.push(cards[index].name);\n        \n        // notify the opponent that their opponent have scored\n        this.my_channel.trigger(\"client-opponent-scored\", {\n          username: this.username,\n          score: score\n        });\n        \n        // all pairs have been opened\n        if (score == 12) {\n          // notify the user that they won\n          score = 0;\n          Alert.alert(\"Awesome!\", \"You won the game\");\n          // notify the opponent that they lose\n          this.my_channel.trigger(\"client-opponent-won\", {\n            username: this.username\n          });\n    \n          this.resetCards(); // reset the UI\n        }\n      } else {\n        cards[current_selection[0].index].is_open = false; // close the first card from the selected pair\n        \n        // close the second card from the selected pair after half a second\n        setTimeout(() =\u003e {\n          cards[index].is_open = false;\n          this.setState({\n            cards: cards\n          });\n        }, 500);\n      }\n    \n      current_selection = []; // reset the current selection\n    }\n    \n    // update the state\n    this.setState({\n      score: score,\n      cards: cards,\n      current_selection: current_selection\n    });\n```\n\nLastly, the `resetCards` function is where we reset the UI so the users can resume the game if they want to:\n\n``` javascript\n    resetCards = () =\u003e {\n      // close all cards\n      let cards = this.cards.map(obj =\u003e {\n        obj.is_open = false;\n        return obj;\n      });\n      \n      // re-shuffle the cards\n      cards = shuffleArray(cards);\n    \n      // update the state to reset the UI\n      this.setState({\n        current_selection: [],\n        selected_pairs: [],\n        cards: cards,\n        score: 0,\n        opponent_score: 0\n      });\n    };\n```\n\n## Server component\n\nNow we’re ready to add the server component. This is where we add the code for authenticating users as well as matching them so they can start playing the game.\n\nCreate a `server.js`  file inside the `server` folder and start importing the packages we need and initialize them:\n\n``` javascript\n    var express = require(\"express\");\n    var bodyParser = require(\"body-parser\");\n    var Pusher = require(\"pusher\"); // for authenticating users and emitting events from this server\n    \n    var app = express(); // for setting up the server\n    app.use(bodyParser.json()); // for parsing request body into JSON\n    app.use(bodyParser.urlencoded({ extended: false })); // for parsing URL encoded data in the request body\n    \n    require(\"dotenv\").config(); // for getting the environment variables\n```\n\nNext, initialize the array of users. This is where we will store the usernames of the users who log in to the app:\n\n``` javascript\n    var users = [];\n```\n\nNext, initialize the Pusher connection using the credentials from the `.env` file:\n\n``` javascript\n    var pusher = new Pusher({\n      appId: process.env.APP_ID,\n      key: process.env.APP_KEY,\n      secret: process.env.APP_SECRET,\n      cluster: process.env.APP_CLUSTER\n    });\n```\n\nIf you haven’t done so already, this is a good chance to update the `server/.env` file with your Pusher app instance credentials:\n\n``` javascript\n    APP_ID=YOUR_PUSHER_APP_ID\n    APP_KEY=YOUR_PUSHER_APP_KEY\n    APP_SECRET=YOUR_PUSHER_APP_SECRET\n    APP_CLUSTER=YOUR_PUSHER_APP_CLUSTER\n    PORT=3000\n```\n\nNext, add a route for checking if the server is running. Try to access this later at `http://localhost:3000` on your browser once the server is running:\n\n``` javascript\n    app.get(\"/\", function(req, res) {\n      res.send(\"all green...\");\n    });\n```\n\nNext, add the function for returning a random integer (from zero) that’s not greater than the `max` passed as an argument:\n\n``` javascript\n    function randomArrayIndex(max) {\n      return Math.floor(Math.random() * max);\n    }\n```\n\nNext, add the route which receives the Pusher authentication request. From the login code of the `app/screens/Login.js` file earlier, we added the `username` in `auth.params`. This is what we’re accessing in the request body. A username should be unique so we first check if it already exists before processing the request further. If it doesn’t yet exist, we push it to the `users` array. Once there are at least two users, we pick two random users from there. Those two users will be the ones who will partake in the game. We trigger the `opponent-found` event on each of the user’s channel. The event contains the username of the two users. This allowed us to determine which of the users is the opponent and which is the current user from the `app/screens/Game.js` file earlier. Once that’s done, we authenticate the two users and return the authentication token as the response:\n\n``` javascript\n    app.post(\"/pusher/auth\", function(req, res) {\n      var username = req.body.username; // get the username passed as an additional param\n    \n      if (users.indexOf(username) === -1) {\n        users.push(username);\n    \n        if (users.length \u003e= 2) {\n          var player_one_index = randomArrayIndex(users.length);\n          var player_one = users.splice(player_one_index, 1)[0]; // pick a random user and remove them from the array\n    \n          var player_two_index = randomArrayIndex(users.length);\n          var player_two = users.splice(player_two_index, 1)[0]; // pick a random user and remove them from the array\n    \n          // trigger a message to player one and player two on their own channels\n          pusher.trigger(\n            [\"private-user-\" + player_one, \"private-user-\" + player_two],\n            \"opponent-found\",\n            {\n              player_one: player_one,\n              player_two: player_two\n            }\n          );\n        }\n        \n        // authenticate the user\n        var socketId = req.body.socket_id;\n        var channel = req.body.channel_name;\n        var auth = pusher.authenticate(socketId, channel);\n      \n        res.send(auth); // return the auth token\n      } else {\n        res.status(400);\n      }\n    });\n```\n\nLastly, serve it on the port you’ve specified in your `server/.env` file:\n\n``` javascript\n    var port = process.env.PORT || 5000;\n    app.listen(port);\n```\n\n## Run the app\n\nAt this point, we should be ready to run the server and expose it to the internet. \n\nExecute the following inside the `server` directory to run the server:\n\n```\n    node server.js\n```\n\nNext, navigate to where you downloaded the ngrok executable file and execute the following:\n\n```\n    ./ngrok http 3000\n```\n\nTry if the server is running correctly by accessing the https URL returned by ngrok on your browser. If it says “all green…”, the next step is to add the ngrok URL to your `app/screens/Login.js` file:\n\n``` javascript\n    this.pusher = new Pusher(\"YOUR PUSHER APP ID\", {\n      authEndpoint: \"YOUR_NGROK_URL/pusher/auth\",\n      cluster: \"YOUR PUSHER APP CLUSTER\",\n      encrypted: true,\n      auth: {\n        params: { username: username }\n      }\n    });\n```\n\nOnce that’s done, the app should work fully:\n\n```\n    expo start\n```\n\n## Conclusion\n\nThat’s it! In this tutorial, we created a two-player memory game with React Native and Pusher. Along the way, you learned how to use Pusher in React Native. Specifically, you learned how to emit events from both the server and the client side.\n\nYou can view the app’s source code in this [GitHub repo](https://github.com/anchetaWern/RNMemory).","metaTitle":"Create a two-player memory game with React Native","metaDescription":"This tutorial will show you how to build a two-player memory game using React Native. Players sign in and are randomly assigned an opponent. The game then involves searching for image pairs. The game board and score update in realtime."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3pLXeMQWY8QSgC2IYeK0a0","type":"Entry","createdAt":"2018-10-23T12:42:44.772Z","updatedAt":"2018-10-23T12:50:54.968Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":" Create a live workout tracking app with React Native","url":"workout-tracker-react-native","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SKru8xyIMIGCS6QAC20eu","type":"Entry","createdAt":"2018-02-14T16:01:48.212Z","updatedAt":"2018-02-14T16:01:48.212Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Wern Ancheta","url":"wern-ancheta","email":"ancheta.wern@gmail.com","twitter":"https://twitter.com/wernancheta","github":"https://github.com/anchetaWern","guestWriter":true}}],"projectRepo":"https://github.com/anchetaWern/RNWorkout","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"37x2DnMc6IY6eUsMg06Ise","type":"Entry","createdAt":"2018-08-05T12:54:24.411Z","updatedAt":"2018-08-05T12:54:24.411Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"React Native","url":"react-native","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}}],"reviewDate":"2018-10-22","description":"This tutorial takes you through building a workout tracking app in React Native, with a Node backend. Users will be able to log and share their exercise updates and follow each other's progress. New workout logs are shared in realtime.","prerequisite":"You will need git, Node and Expo installed on your machine. Some knowledge of React Native is required.","content":"In this tutorial, we’ll be creating a realtime workout tracking app with React Native and Pusher.\n\n## Prerequisites\n\nBasic knowledge of React Native, React Navigation, and ES6 syntax is required. \n\nWe’ll also be using Redux. I’ll add as much detail as I can on what’s going on with all the Redux code, but you should at least be familiar with how Redux works.\n\nWe’ll be using [Expo](https://expo.io/) in order to easily test the app on multiple devices. [Install Expo](https://expo.io/learn) on your computer, then download the Expo client app for your [iOS](https://itunes.apple.com/us/app/expo-client/id982107779?mt=8) or [Android](https://play.google.com/store/apps/details?id=host.exp.exponent\u0026hl=en) device.\n\nThese are the package versions used in creating the app:\n\n\n- Node 8.3.0\n- Yarn 1.7.0\n- Expo CLI 2.1.2\n- Expo SDK 30.0.0\n- Pusher 4.3.1\n\nIt’s always recommended to use the most recent stable versions, but in case the app doesn’t work for you, you can use the versions above to ensure we have the same environment.\n\nLastly, you must have a [Pusher](https://pusher.com/) and an [ngrok account](https://ngrok.com/).\n\n\n## App overview\n\nThe app that we will be creating is for gym buddies who are working out in a different gym. They can use it to keep track of their buddy’s workout even if they are away from each other.\n\nThe app has two tabs: one for logging their own workout, and another for tracking the workout of their buddy. Users can both log and track at the same time. This makes it possible for users to compete on who can make the most number of sets and reps for each exercise they choose.\n\nUpon opening the app, users will be greeted with the logging tab. This is where they can log their workouts. They’ll be automatically assigned a unique username. When they click on their username, it will be copied to the clipboard so they can easily share it with their buddy:\n\n![react-native-workout-username](//images.ctfassets.net/1es3ne0caaid/ACLwrF7dq80gc200WyUqs/808f6ea8ef582568f0173eab7a198e1e/react-native-workout-username.png)\n\nThis is how it looks like when their buddy subscribes. Subscription can be done in the tracking tab. All they have to do is enter their buddy’s username and click on the right arrow:\n\n![react-native-workout-subscribe](//images.ctfassets.net/1es3ne0caaid/60HPwDIL3aIys8IC2UaYg6/6941f614198dfae33899d8ed0a4b2b00/react-native-workout-subscribe.png)\n\nThis is how it looks like when a user adds an exercise and a set:\n\n![react-native-workout-log](//images.ctfassets.net/1es3ne0caaid/3n6MvWp0FauOyYCUCAY8me/da2899d353559fce2c9e9a968d889153/react-native-workout-log.png)\n\nOnce an exercise or set has been added, it will show in the list below the username. The number at the top of the circle is the weight, and the number inside it is the number of reps for that set. When the user clicks on the circle, the reps is incremented by one:\n\n![react-native-workout-display-log](//images.ctfassets.net/1es3ne0caaid/2lCAJDKLgYOoEqM80IoqaG/ee4b47deb4093fa3ea816cf90e177a1f/react-native-workout-display-log.png)\n\nThe tracking tab in their buddy’s screen is automatically synced with the exercise and sets the user has added:\n\n![react-native-workout-share-log](//images.ctfassets.net/1es3ne0caaid/XdBJMLHT6mSWI8iy8KaeG/5ef729c2cd4c802545e3b17444316b04/react-native-workout-share-log.png)\n\nYou can view the source code of this app on this [GitHub repo](https://github.com/anchetaWern/RNWorkout). \n\n## Creating a Pusher app\n\nOn your [Pusher dashboard](https://dashboard.pusher.com/), create a new app and name it **RNWorkout**. Once created, enable the client events in the **App Settings** tab:\n\n![react-native-workout-client-events](//images.ctfassets.net/1es3ne0caaid/13zBdyDKoi2iO08CYcwkUw/5673c2595a00fd0aeba21cca9d815f32/react-native-workout-client-events.png)\n\nClient events allow us to emit messages directly from the app. Because normally, messages are only emitted from the server. This time, we’ll only be using the server to authenticate the user. This authentication process allows us to make requests directly from the app.\n\n## Clone the app\n\nStart by cloning the repo:\n\n```\n    git clone https://github.com/anchetaWern/RNWorkout.git\n```\n\nSwitch to the `starter` branch and install both the app and server dependencies:\n\n```\n    cd RNWorkout\n    git checkout starter\n    yarn install\n    cd server\n    npm install\n```\n\nThe `starter` branch contains a minimal version of the app where the screens, components, helper functions, styles, and the server code has already been added. This makes it easy for us to focus on the main subject of this tutorial, and that is how to work with Redux and Pusher Channels.\n\n## Starter code tour\n\nBefore we proceed with writing some code, let’s first do a quick tour of the code we have on the `starter` branch.\n\n### Helpers\n\nThe `app/helpers` folder contains two helper files for generating unique ID’s (`uniqid.js`) and usernames (`uniqname.js`). The unique ID’s are used as a unique identifier for the exercises and sets.\n\n### Server\n\nThe `server` folder contains the code for the server component of the app. This server is for authenticating the user when they initialize a new Pusher connection. No further updates are required inside this folder except for the `server/.env` file. We’ll update it later once we run the app.\n\n### Modals\n\nThe `app/modals` folder contains the code for the add exercise and add set modals. These modals are used for logging a new exercise and adding a set to a specific exercise. We will be updating the `AddExerciseModal.js` and `AddSetModal.js` later. This is to add the code for dispatching actions that will modify the store.\n\n### Components\n\nThe `app/components` folder contains all the components that the app is using. This includes the following:\n\n\n- **AlertBox** - for showing messages enclosed inside a box. \n- **IconButton** - for showing buttons with an icon in them.\n- **SetContainer** - for showing the individual sets (the gray circles with a number inside and below them).\n- **List** - serves as a container list for the SetContainer component.\n- **ConnectedFlatList** - for showing all the workout data (exercises and sets).\n\nAmong the components above, we’re only going to update the ConnectedFlatList (`app/components/ConnectedFlatList/ConnectedFlatList.js`). As it is right now, it won’t really render anything. We have to turn it into a “connected” component so it will automatically re-render once the relevant data in the store is updated.\n\n### Screens\n\nWe only have one screen because the logging and tracking features are too similar to have their own screen. If you open the `Root.js` file, you’ll see that we’re only using the LogWorkout screen:\n\n``` javascript\n    import LogWorkoutScreen from \"./app/screens/LogWorkout\";\n    \n    const LogStack = createStackNavigator(\n      {\n        Log: LogWorkoutScreen\n      },\n      { initialRouteName: \"Log\" }\n    );\n    \n    const TrackStack = createStackNavigator(\n      {\n        Track: LogWorkoutScreen\n      },\n      { initialRouteName: \"Track\" }\n    );\n```\n\nWe will be updating the `app/screens/LogWorkout.js` file later because that’s where we need to link everything up.\n\n## Build the app\n\nNow we’re ready to build the app. Here’s what we’ll be doing through the rest of the tutorial:\n\n- Add the actions.\n- Add the reducers.\n- Dispatch an action for adding a new exercise to the store when the user adds a new exercise. \n- Dispatch an action for adding a new set to the store when the user adds a new set.\n- Initialize Pusher.\n- Subscribe user to their own channel so they can emit client events.\n- Subscribe to another user so they can listen for client events emitted by that user.\n- Emit a client event on the channel when a new exercise or set is added by the user.\n- Listen for client events so the tracking tabs UI is synced to that of the user being followed.\n\nThe steps above aren’t ordered in a specific way. Most likely, you’ll have to switch between each of them as you’re testing the app. For this tutorial, I recommend you to start the app even if it’s not fully working yet. This allows you to easily see the effects of the code you’re adding, and not simply copy-pasting it:\n\n```\n    expo start\n```\n\nLet’s make this as hands-on as possible. I’ll first mention what needs to be done so you can try on your own, and then you can peak at the code either here or in the GitHub repo if you’re not sure what to do. I’ve also added “todo” comments in the starter code as a guide on where you should put a specific code. Feel free to browse around the code whenever you see “our task is to…” or “next, we need to..” as that’s the cue for when we’ll start adding the code. Try to figure out on your own first before you proceed.\n\nWe’ll work on the functionality for logging workouts first. That will be the first screen that you see when you run the app. Right now, we only have the following:\n\n![react-native-workout-starter-screen](//images.ctfassets.net/1es3ne0caaid/3MsKX00SNG0Ia6AAqa6Sq2/d08bbe7051266638499d81368acb4477/react-native-workout-starter-screen.png)\n\nThe username is generated, and it can be copied to clipboard, but that’s it. Nothing you can really do in this tab (logging tab) right now.\n\n### Add the actions\n\nOur first task is to figure out how to make the add exercise modal visible so we can enter the exercise we want to add.\n\nMy usual workflow when working with Redux is to first figure out what the global app state will look like. But before we can do that, we first need to determine the actions that can be done throughout the app in relation to how it affects the UI:\n\n- Open or close modals.\n- Add an exercise.\n- Set the current exercise.\n- Add a set.\n- Increment set.\n\nNote that I’ve excluded actions that are only applicable to a specific component. Here’s a good rule of thumb to determine if something is an action or not:\n\n\u003e If the rest of the app’s UI isn’t affected if the value of a specific piece of data is updated, then it’s not an action. \n\nFor this app, non-actions include:\n\n- Entering the name of the exercise.\n- Entering the weight of a set.\n\nBoth instances don’t update the app’s UI in a way that affects the whole app, so the state for those can be managed within the component level.\n\nGo ahead and create an `app/actions` folder. Inside it, create a `types.js` file and define all the actions that we came up with. This will help us avoid typos when working with [actions](https://redux.js.org/basics/actions):\n\n``` javascript\n    // app/actions/types.js\n    export const ADDED_EXERCISE = \"added_exercise\";\n    \n    export const ADDED_SET = \"added_set\";\n    export const INCREMENTED_SET = \"incremented_set\";\n    \n    export const MODAL_TOGGLED = \"modal_toggled\";\n    export const SET_EXERCISE = \"set_exercise\";\n```\n\nNext, define the [action creators](https://redux.js.org/basics/reducers). These are functions that will return the data needed by each action. Each action type will have its own function, which returns it as the `type` property:\n\n``` javascript\n    // app/actions/index.js\n    import {\n      ADDED_EXERCISE,\n      ADDED_SET,\n      INCREMENTED_SET,\n      MODAL_TOGGLED,\n      SET_EXERCISE\n    } from \"./types\";\n    \n    export const addedExercise = (exerciseID, exerciseName, user = \"me\") =\u003e {\n      return {\n        type: ADDED_EXERCISE,\n        id: exerciseID, // a machine-friendly version of the exercise name\n        exercise: exerciseName, // name of the exercise (e.g. front squat)\n        user: user \n      };\n    };\n    \n    export const addedSet = (setID, exerciseID, weight, user = \"me\") =\u003e {\n      return {\n        type: ADDED_SET,\n        id: setID, // unique ID for the set\n        exercise_id: exerciseID, // used for determining which exercise to put the set under\n        weight: weight, // how heavy is the weight being lifted (usually in lbs)\n        reps: 1, // default number of repetitions for a new set\n        user: user\n      };\n    };\n    \n    export const incrementedSet = (setID, reps, user = \"me\") =\u003e {\n      return {\n        type: INCREMENTED_SET,\n        id: setID, // unique ID for the set\n        reps: reps, // repetitions performed for this set\n        user: user\n      };\n    };\n    \n    export const modalToggled = (modalName, visibility) =\u003e {\n      return {\n        type: MODAL_TOGGLED, \n        modal: modalName, // addExerciseModal or addSetModal\n        visibility: visibility // true (visible) or false (not visible)\n      };\n    };\n    \n    // for setting the exercise in which to add a set\n    export const setExercise = id =\u003e {\n      return {\n        type: SET_EXERCISE,\n        exercise_id: id\n      };\n    };\n```\n\nNote that the `addedExercise`, `addedSet`, and `incrementedSet` functions have a `user` parameter which is set to `me` by default. This allows us to specify which specific app state will the data go. The value of this parameter can either be `me` or `others`. `me` is for the data displayed in the logging tab, while `others` is for the data displayed on the tracking tab. \n\n### Add the reducers\n\nNext, we need to create the [reducers](https://redux.js.org/basics/reducers). These are responsible for describing how a specific portion of the app state will change. Personally, I create a separate reducer based on the data they’re modifying. In this app, that would be:\n\n- Exercise reducer (`ExerciseReducer.js`) - for exercise-related data.\n- Set reducer (`SetReducer.js`) - for set-related data.\n- UI reducer (`UIReducer.js`) - for UI-related data. These are usually booleans which hide or show what is seen on the screen (for example, modals and progress loaders).\n\nWhen it comes to figuring out which reducers to create, anything really goes if you’re only working on a throw-away project to learn a specific technology. But be sure to read about Redux best practices when working in a production app.\n\nCreate an `app/reducers` folder and create the files mentioned above inside it. \n\nLet’s first start with the exercise reducer:\n\n``` javascript\n    // app/reducers/ExerciseReducer.js\n    import { ADDED_EXERCISE } from \"../actions/types\";\n    \n    import uniqid from \"../helpers/uniqid\";\n    \n    const INITIAL_STATE = {\n      exercises: [],\n      others_exercises: []\n    };\n    \n    export default (state = INITIAL_STATE, action) =\u003e {\n      switch (action.type) {\n        case ADDED_EXERCISE:\n          const key = uniqid();\n          const id = action.id;\n          const exercise = action.exercise;\n          \n          // determine which specific array to update\n          const exercises =\n            action.user == \"me\" ? state.exercises : state.others_exercises;\n          \n          // create a new array with the new exercise appended to the end of it\n          const updated_exercises = exercises.concat({\n            key: key,\n            exercise_id: id, // machine-friendly version of the exercise name\n            exercise_name: exercise\n          });\n          \n          // return the new state based on which user performed the action\n          if (action.user == \"me\") {\n            return { ...state, exercises: updated_exercises };\n          }\n    \n          return { ...state, others_exercises: updated_exercises };\n    \n        default:\n          return state;\n      }\n    };\n```\n\nFrom the code above, the first step is to define the `INITIAL_STATE`. Note that this isn’t the initial value for the whole app state. This should only be for the specific data modified by this reducer. In this case, it’s only the `exercises` (the exercises logged by the current user), and `others_exercises` (the exercises logged by the user followed by the current user). \n\nBased on the `user` passed from the action, we get and re-create either the `exercises` or `others_exercises` array. Take note of the word “re-create” as we’re not really supposed to modify the state directly, we only replace it with a different value. Redux handles the calculation needed to determine whether the UI should be re-rendered or not. And if you modify the state directly, then it won’t be ensured that that process will work correctly. That’s why we’re using the [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) and [concat method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat) to avoid updating the state directly. \n\nNext is the set reducer. Again, we’re updating two arrays, one for each user. But this time, our reducer handles two actions, one for when the set is added, and another for when it’s incremented:\n\n``` javascript\n    // app/reducers/SetReducer.js\n    import { ADDED_SET, INCREMENTED_SET } from \"../actions/types\";\n    \n    const INITIAL_STATE = {\n      sets: [],\n      others_sets: []\n    };\n    \n    export default (state = INITIAL_STATE, action) =\u003e {\n      let sets = [];\n      let index = 0;\n      let reps = 0;\n    \n      let set_name = \"sets\";\n      let current_sets = [];\n    \n      switch (action.type) {\n        case ADDED_SET:\n          current_sets = action.user == \"me\" ? state.sets : state.others_sets;\n          sets = current_sets.concat({\n            key: action.id,\n            exercise_id: action.exercise_id,\n            weight: action.weight,\n            reps: action.reps\n          });\n    \n          const updated_state =\n            action.user == \"me\"\n              ? { ...state, sets }\n              : { ...state, others_sets: sets };\n          return updated_state;\n    \n        case INCREMENTED_SET:\n          current_sets = action.user == \"me\" ? state.sets : state.others_sets;\n          sets = [...current_sets];\n          index = sets.findIndex(itm =\u003e {\n            return itm.key == action.id;\n          });\n    \n          reps = action.reps;\n          sets[index] = { ...sets[index], reps: reps + 1 }; // add 1 to the current rep\n    \n          if (action.user == \"others\") {\n            return { ...state, others_sets: sets };\n          }\n    \n          return { ...state, sets };\n    \n        default:\n          return state;\n      }\n    };\n```\n\nNext is the UI reducer. This is responsible for processing the actions for showing or hiding the modals, and setting the current exercise:\n\n``` javascript\n    // app/reducers/UIReducer.js\n    import { MODAL_TOGGLED, SET_EXERCISE } from \"../actions/types\";\n    \n    const INITIAL_STATE = {\n      ui: {\n        current_exercise: \"\",\n        addExerciseModalIsOpen: false,\n        addSetModalIsOpen: false\n      }\n    };\n    \n    export default (state = INITIAL_STATE, action) =\u003e {\n      let ui = {};\n      switch (action.type) {\n        case SET_EXERCISE:\n          ui = { ...state.ui };\n          ui[\"current_exercise\"] = action.exercise_id;\n    \n          return {\n            ...state,\n            ui\n          };\n    \n        case MODAL_TOGGLED:\n          ui = { ...state.ui };\n          ui[`${action.modal}IsOpen`] = action.visibility;\n    \n          const new_state = {\n            ...state,\n            ui\n          };\n    \n          return new_state;\n    \n        default:\n          return state;\n      }\n    };\n```\n\nThe final step is to combine all the reducers into a single file. This allows us to easily supply it when we create the store later:\n\n``` javascript\n    // app/reducers/index.js\n    import { combineReducers } from \"redux\";\n    import ExerciseReducer from \"./ExerciseReducer\";\n    import SetReducer from \"./SetReducer\";\n    import UIReducer from \"./UIReducer\";\n    \n    export default combineReducers({\n      exercises: ExerciseReducer,\n      sets: SetReducer,\n      ui: UIReducer\n    });\n```\n\n### Connect the LogWorkout screen to the store\n\nNow that we’ve defined our actions, action creators, and reducers, the next step is to link the LogWorkout screen to the store.\n\nOpen `app/screens/LogWorkout.js` and add the following:\n\n``` javascript\n    import { MaterialIcons } from \"@expo/vector-icons\"; // already added\n    \n    // add these\n    import { createStore } from \"redux\";\n    import { Provider } from \"react-redux\";\n```\n\nIn the code above, `createStore` is used for [creating the store](https://redux.js.org/api/createstore). Consider the store as the global app state, while the `Provider` is a helper component that allows us to pass down the store to the component level. This gives us the ability to dispatch actions within this component and allow its child components to also connect to the store.\n\nNext, import the actions and reducers. To create a store we need to pass the combined reducers as an argument. This makes the store aware of which reducers it should use when a specific action is dispatched from the app:\n\n``` javascript\n    import {\n      modalToggled,\n      incrementedSet,\n      addedExercise,\n      addedSet\n    } from \"../actions\";\n    \n    import reducers from \"../reducers\";\n    const store = createStore(reducers);\n```\n\nNext, wrap the whole screen in the `Provider` component and pass the `store` as a value for the `store` prop:\n\n``` javascript\n    render() {\n      return (\n        \u003cProvider store={store}\u003e\n          ...\n        \u003c/Provider\u003e\n      );\n    }\n```\n\nOnce that’s done, we should be able to dispatch actions inside this component’s methods. In this case, we dispatch the action for opening the add exercise modal:\n\n``` javascript\n    showAddExerciseModal = () =\u003e {\n      store.dispatch(modalToggled(\"addExerciseModal\", true));\n    };\n```\n\nAs the button for opening the modal is inside the header, we need to set the `showAddExerciseModal` function as a navigation param. That way, we can access it as such from the header:\n\n``` javascript\n    componentDidMount() {\n      this.props.navigation.setParams({\n        showAddExerciseModal: this.showAddExerciseModal\n      });\n    }\n```\n\nIn the `navigationOptions`, you can now execute the `showAddExerciseModal` function:\n\n``` javascript\n    return {\n      headerTitle: `Log Workout`,\n      headerRight: (\n        \u003cIconButton\n          onPress={() =\u003e {\n            if (routeName == \"Log\") {\n              params.showAddExerciseModal(); // add this\n            }\n          }}\n        /\u003e\n      ),\n    }\n```\n\nWhen the button is clicked, it should execute the exercise reducer and the app’s state will be modified. Currently, the add exercise modal isn’t really aware of the changes that happen in the store yet, so it won’t really become visible when the button is clicked.\n\n### Open the add exercise modal\n\nThe next step is to make the add exercise modal into a connected component. That way, it will become aware of the state changes so it can re-render itself when a data it depends on changes.\n\nOpen the `app/modals/AddExerciseModal.js` file. To turn a component into a connected component, we need to use the `connect` method from `react-redux`. This allows us to add the functions for mapping specific data in the store as a prop for this component. It also allows us to define functions that we can use inside the component to dispatch actions, as you’ll see later:\n\n``` javascript\n    import { connect } from \"react-redux\";\n```\n\nNext, import the actions for toggling the visibility of the modal, and adding a new exercise:\n\n``` javascript\n    import { modalToggled, addedExercise } from \"../actions\";\n```\n\nNext, scroll to the bottom of the file (right before `export default AddExerciseModal`) and define the `mapStateToProps` function. This is used for mapping whichever data we have on the store as a prop for this component. In this case, we only need the `ui` object from the UI reducer. We use [object destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) to extract it, and the spread syntax to extract the properties that are inside the `ui` object:\n\n``` javascript\n    const mapStateToProps = ({ ui }) =\u003e ({\n      ...ui\n    });\n```\n\nEarlier, in the UI reducer, we defined the following initial state:\n\n``` javascript\n    // app/reducers/UIReducer.js\n    const INITIAL_STATE = {  \n      ui: {\n        current_exercise: \"\",\n        addExerciseModalIsOpen: false,\n        addSetModalIsOpen: false\n      }\n    };\n```\n\n`mapStateToProps` gives us access to those specific properties in the `ui` object as if it were a prop that’s passed to the component (add exercise modal). To access the current visibility value of the add exercise modal, all we have to do is supply `this.props.ui.addExerciseModalIsOpen` to the `visible` prop of the `Modal` component:\n\n``` javascript\n    // app/modals/AddExerciseModal.js\n    \u003cModal\n      animationType=\"slide\"\n      visible={this.props.ui.addExerciseModalIsOpen}\n    \u003e\n      ...\n    \u003c/Modal\u003e\n```\n\nBut before we can do that, we first have to connect the component to the store. We can do that with the following code. This returns a “connected” version of the component, one that’s subscribed to the updates made in the store. `mapStateToProps` gets executed every time there’s an update to the store. If a relevant value is updated, the component is re-rendered because the prop it depends on is directly mapped to a value in the store:\n\n``` javascript\n    // app/modals/AddExerciseModal.js\n    export default connect(\n      mapStateToProps\n    )(AddExerciseModal);\n    \n    // export default AddExerciseModal; // replace this with the one above\n```\n\nOnce that’s done, clicking on the button in the header should make the add exercise modal visible.\n\nIf you’re wondering why we used `this.props.ui.addExerciseModalIsOpen` instead of `this.props.addExerciseModalIsOpen`, that’s because the data inside the UI reducer lives inside the `ui` object. We’ve defined this earlier in the reducer’s index file:\n\n``` javascript\n    // app/reducers/index.js\n    export default combineReducers({\n      // ...\n      ui: UIReducer\n    });\n```\n\nAnd in the UI reducer, everything lives inside another `ui` object:\n\n``` javascript\n    // app/reducers/UIReducer.js\n    const INITIAL_STATE = {\n      ui: {\n        // ...\n        addSetModalIsOpen: false\n      }\n    };\n```\n\nSo to access `addSetModalIsOpen`, we have to access `ui.ui.addSetModalIsOpen` from the store. Object destructuring gave us access to the `ui` object we’ve defined inside `app/reducers/index.js` file, while the spread syntax gave us access to the `ui` object defined inside `app/reducers/UIReducer.js` but not the properties inside of it:\n\n``` javascript\n    const mapStateToProps = ({ ui }) =\u003e ({\n      ...ui // note: spreads the ui object defined in the app/reducers/index.js file. not the ui object in the app/reducers/UIReducer.js\n    });\n```\n\nThis is why we still had to use `this.props.ui.addExerciseModalIsOpen`.\n\n### Add a new exercise\n\nThe next step is to add a new exercise when the add button in the add exercise modal is clicked. Earlier, you learned that to dispatch an action, you first have to import the action creator so you can dispatch it using the `dispatch` method from the `store`:\n\n``` javascript\n    // app/screens/LogWorkout.js\n    store.dispatch(modalToggled(\"addExerciseModal\", true));\n```\n\nThe problem we have now is that we have no access to the `store` or its `dispatch` method when inside the add exercise modal. The solution for that is the `mapDispatchToProps` method. It allows us to return functions that are also mapped as props for the component. The `dispatch` function is automatically passed as an argument to the `mapDispatchToProps` function, and we can use it to dispatch the action. In this case, we only need the action for toggling the visibility of the modal and adding the exercise:\n\n``` javascript\n    // app/modals/AddExerciseModal.js\n    // add this right below mapStateToProps\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        closeModal: () =\u003e {\n          dispatch(modalToggled(\"addExerciseModal\", false));\n        },\n        addExercise: (id, name) =\u003e {\n          dispatch(addedExercise(id, name));\n        }\n      };\n    };\n```\n\nTo use `mapDispatchToProps`, pass it as the second argument for the `connect` function:\n\n``` javascript\n    export default connect(\n      mapStateToProps,\n      mapDispatchToProps\n    )(AddExerciseModal);\n```\n\nThe next step is to call the two functions (`closeModal` and `addExercise`) we just mapped as props:\n \n``` javascript\n    addExercise = () =\u003e {\n      // add these\n      if (this.state.exercise_name) {\n        const name = this.state.exercise_name;\n        const id = name.replace(\" \", \"_\");\n        this.props.addExercise(id, name); \n        \n        // already added\n        this.setState({\n          exercise_name: \"\"\n        });\n      \n        this.props.closeModal(); \n      }\n    };\n```\n\nOnce that’s done, a new exercise should be added to the store every time you click on the add button in the add exercise modal. The modal should also automatically close after that.\n\nDon’t forget to close the modal when the close button is clicked:\n\n``` javascript\n    \u003cIconButton\n      icon=\"close\"\n      color=\"#FFF\"\n      size={18}\n      onPress={() =\u003e {\n        this.props.closeModal(); // add this\n      }}\n    /\u003e\n```\n\n### Show the exercises\n\nNow that we’ve added the code for creating a new exercise, the next step is to show the exercises that were added. That’s the job of the ConnectedFlatList component. \n\nWhat we need to do is very similar to what we did in the add exercise modal, so we’ll just breeze through the code. Start by importing all the things we need:\n\n``` javascript\n    // app/components/ConnectedFlatList/ConnectedFlatList.js\n    import { connect } from \"react-redux\";\n    import uniqid from \"../../helpers/uniqid\";\n    \n    import {\n      modalToggled,\n      setExercise,\n      incrementedSet,\n      addedExercise,\n      addedSet\n    } from \"../../actions\";\n```\n\nNext, scroll to the bottom of the file and add the `mapStateToProps` function. While we’re here, let’s also add the data related to the sets:\n\n``` javascript\n    const mapStateToProps = state =\u003e {\n      return {\n        exercises: state.exercises.exercises,\n        sets: state.sets.sets,\n        others_exercises: state.exercises.others_exercises,\n        others_sets: state.sets.others_sets\n      };\n    };\n    \n    export default connect(\n      mapStateToProps\n    )(ConnectedFlatList);\n```\n\nNext, get the relevant exercise data from the props. While we’re here, let’s also extract the sets data:\n\n``` javascript\n    render() {\n      // add these\n      const exercises =\n        this.props.user == \"me\"\n          ? this.props.exercises\n          : this.props.others_exercises;\n      const sets =\n        this.props.user == \"me\" ? this.props.sets : this.props.others_sets;\n      \n      // already added\n      if (exercises.length) {\n        return (\n          \u003cFlatList\n            data={exercises}\n            extraData={sets}\n            renderItem={this.renderItem}\n            contentContainerStyle={{ paddingBottom: 50, backgroundColor: \"#FFF\" }}\n          /\u003e\n        );\n      }\n    }\n```\n\nTake note of the `extraData` prop that we’ve supplied for the FlatList. We’ve supplied `sets` to it because the sets data isn’t nested under the `exercises` array. That means that if we add a new set or increment an existing one, this FlatList won’t really get re-rendered. Supplying `sets` as an `extraData` allows us to re-render the main FlatList when the sets data is updated.\n\nOnce that’s done, you should now see the exercises being listed as you add them through the add exercise modal.\n\n\n### Open the add set modal\n\nNow that we can add and show exercises, the next step is to show the add set modal. \n\nWhen the plus button to the right of the exercise name is clicked, it should show the add set modal. To implement that, we need to dispatch the action for toggling the visibility of the add set modal.\n\nJust like what we did earlier in the add exercise modal, we need to use `mapDispatchToProps` so we can dispatch actions by calling functions that are mapped as a prop:\n\n``` javascript\n    // app/components/ConnectedFlatList/ConnectedFlatList.js\n    // add these\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        openAddSetModal: () =\u003e {\n          dispatch(modalToggled(\"addSetModal\", true));\n        },\n        setExercise: exercise_id =\u003e {\n          dispatch(setExercise(exercise_id));\n        }\n      };\n    };\n    \n    export default connect(\n      mapStateToProps,\n      mapDispatchToProps // add this\n    )(ConnectedFlatList);\n```\n\nNote that aside from the `modalToggled` action, we also have `setExercise`. This is for updating the value of the `current_exercise` property in the UI reducer so that by the time the user hits the button for adding the set, we can extract this value from the props and supply it as one of the properties for the set to be created.\n\nNext, inside the `renderItem` method, call the relevant functions you returned in `mapDispatchToProps`:\n\n``` javascript\n    renderItem = ({ item }) =\u003e {\n      return (\n        \u003cView key={item.key} listKey={item.key}\u003e\n          \u003cView style={styles.list_item_header}\u003e\n            \u003cText style={styles.list_item_header_text}\u003e{item.exercise_name}\u003c/Text\u003e\n            \u003cIconButton\n              icon=\"add\"\n              size={20}\n              color=\"#333\"\n              onPress={() =\u003e {\n                if (this.props.user == \"me\") {\n                  // add these:\n                  this.props.openAddSetModal(); \n                  this.props.setExercise(item.exercise_id);\n                }\n              }}\n            /\u003e\n          \u003c/View\u003e\n        \u003c/View\u003e\n      );\n    }\n```\n\nThe next step is to turn the add set modal into a connected component. You should already know how to do this so let’s just look at the code:\n\n``` javascript\n    // app/modals/AddSetModal.js\n    import { connect } from \"react-redux\";\n    import { modalToggled, addedSet } from \"../actions\";\n    import uniqid from \"../helpers/uniqid\";\n\n\n    const mapStateToProps = ({ ui }) =\u003e ({\n      ...ui\n    });\n    \n    export default connect(\n      mapStateToProps\n    )(AddSetModal);\n\n\n    render() {\n      return (\n        \u003cModal\n          animationType=\"slide\"\n          visible={this.props.ui.addSetModalIsOpen}\n          ...\n        \u003e\n        \u003c/Modal\u003e\n      );\n    }\n```\n\nOnce that’s done, the add set modal should become visible when the plus button to the right of the exercise name is clicked.\n\n### Add a new set\n\nAdding a new set is very similar to how we added an exercise:\n\n``` javascript\n    // app/modals/AddSetModal.js\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        closeModal: () =\u003e {\n          dispatch(modalToggled(\"addSetModal\", false));\n        },\n        addSet: (setID, exerciseID, weight) =\u003e {\n          dispatch(addedSet(setID, exerciseID, weight));\n        }\n      };\n    };\n    \n    export default connect(\n      mapStateToProps,\n      mapDispatchToProps // add this\n    )(AddSetModal);\n```\n\nTake note of how we’re extracting the `current_exercise` from the props. Earlier, in the ConnectedFlatList, we’ve set the value for this property when the user clicks on the plus button to the right of the exercise name. That’s the purpose of the `setExercise` action, so we always have the correct value for the `exercise_id` when we add a new set:\n\n``` javascript\n    addSet = () =\u003e {\n      // add these\n      if (this.state.weight) {\n        const id = uniqid();\n        const exercise_id = this.props.ui.current_exercise;\n        const weight = this.state.weight;\n      \n        this.props.addSet(id, exercise_id, weight);\n        this.props.closeModal();\n        \n        // previously added code..\n      }\n    };\n```\n\nDon’t forget to close the modal when its close button is clicked:\n\n``` javascript\n    \u003cIconButton\n      icon=\"close\"\n      color=\"#FFF\"\n      size={18}\n      onPress={() =\u003e {\n        this.props.closeModal(); // add this\n      }}\n    /\u003e\n```\n\n### Show the sets\n\nThe next step is to show the sets added for a specific exercise. Earlier, we already mapped the current values of the `sets` and `others_sets` array in the store over to this component via `mapStateToProps`. All we have to do now is extract the relevant sets data from the props:\n\n``` javascript\n    // app/components/ConnectedFlatList/ConnectedFlatList.js\n    renderSets = (exercise_id, key) =\u003e {\n      const id = uniqid();\n      const l_key = exercise_id + \":\" + key + \":\" + id;\n      \n      const sets_data =\n        this.props.user == \"me\" ? this.props.sets : this.props.others_sets;\n      const sets = sets_data.filter(item =\u003e {\n        return item.exercise_id == exercise_id;\n      });\n      \n      // already added:\n      if (sets.length) {\n        // ...\n      }\n    }\n```\n\nNote that the value of `this.props.users` in the code above is passed as a prop via the standard means (through the component). This is used to determine which specific set data to use (the current user or the user they’re following). The `l_key` is used as the value for the `listKey` for the FlatList that will contain each set. [We need to supply this](https://stackoverflow.com/questions/49276526/nested-flat-list-invariant-violation-a-virtualizedlist-contains-a-cell-which-it) because we’re nesting a FlatList within a FlatList. The `listKey` prop allows React to differentiate between sibling flatlists.\n\nAt this point, you should be able to see the sets being listed below a specific exercise when you add them.\n\n### Increment a set\n\nThe final thing we need to implement when it comes to the logging functionality is incrementing the value of a specific set. \n\nWe called it “increment set”, but what we really want to do is to increment the number of reps for a specific set. \n\nStart by adding it in the `mapDispatchToProps`:\n\n``` javascript\n    // app/components/ConnectedFlatList/ConnectedFlatList.js\n    const mapDispatchToProps = dispatch =\u003e {\n      return {\n        // added previously\n        setExercise: exercise_id =\u003e {\n          ...\n        },\n        // add this\n        incrementSet: (set_id, reps) =\u003e {\n          dispatch(incrementedSet(set_id, reps));\n        }\n      };\n    };\n```\n\nOnce that’s done, you should be able to call the method within the `onPress` method of the SetContainer:\n\n``` javascript\n    \u003cSetContainer\n      ...\n      onPress={() =\u003e {\n        if (this.props.user == \"me\") {\n          this.props.incrementSet(item.key, item.reps); // add this\n        }\n      }}\n    /\u003e\n```\n\nAt this point, clicking on a set should increment the number inside it.\n\n### Emit client events\n\nNow we’re ready to implement the tracking tab. \n\nStart by importing Pusher:\n\n``` javascript\n    // app/screens/LogWorkout.js\n    import Pusher from \"pusher-js/react-native\";\n```\n\nNext, initialize the class variables that we’re going to use:\n\n``` javascript\n    constructor(props) {\n      super(props);\n      this.pusher = null;\n      this.my_channel = null; // the channel of the current user\n      this.followed_channel = null; // the channel of the user they followed\n    }\n```\n\nInside `componentDidMount`, add the code for initializing Pusher. Supply the credentials found in your Pusher app instance’s settings page. Leave the `authEndpoint` for now, we will supply it later once we run the server. Once that’s done, subscribe the user to their own channel (the unique `username` generated for them). In this case, we’re prefixing the channel name with `private-` to specify that this is a [private channel](https://pusher.com/docs/client_api_guide/client_private_channels). This specific channel type allows us to emit events directly from the app. Since it’s private, we have to authenticate through a server (the one inside the `server` directory of the project), that’s what the `authEndpoint` is for:\n\n``` javascript\n    componentDidMount() {\n      // previous code here\n    \n      // add these:\n      this.pusher = new Pusher(\"YOUR PUSHER APP KEY\", {\n        authEndpoint: \"YOUR_NGROK_URL/pusher/auth\",\n        cluster: \"YOUR_PUSHER_APP_CLUSTER\",\n        encrypted: true\n      });\n    \n      this.my_channel = this.pusher.subscribe(`private-user-${username}`);\n      this.my_channel.bind(\"pusher:subscription_error\", status =\u003e {\n        Alert.alert(\n          \"Error occured\",\n          \"Cannot connect to Pusher. Please restart the app.\"\n        );\n      });\n    \n      this.my_channel.bind(\"pusher:subscription_succeeded\", () =\u003e {\n        console.log(\"subscription to my channel ok!\");\n      });\n    }\n```\n\nNext, inside the `render` method, we need to check whether `my_channel` is initialized before we render anything. This allows us to supply it as a prop to AddExerciseModal, AddSetModal, and ConnectedFlatList:\n\n``` javascript\n    render() {\n      return (\n        \u003cProvider store={store}\u003e\n          \u003cView\u003e\n          {\n            this.props.navigation.state.routeName == \"Log\" \u0026\u0026 this.my_channel \u0026\u0026 (\n              \u003cView style={styles.log_content}\u003e\n                \u003cView style={styles.top_content}\u003e\n                  ...\n                \u003c/View\u003e\n                \u003cAddExerciseModal channel={this.my_channel} /\u003e\n                \u003cAddSetModal channel={this.my_channel} /\u003e\n                \n                \u003cConnectedFlatList user={\"me\"} channel={this.my_channel} /\u003e\n              \u003c/View\u003e  \n            )\n          }\n          \u003c/View\u003e\n        \u003c/Provider\u003e\n      );\n    }\n```\n\nWhy do we need to add `my_channel` as a prop to those three components you ask? That’s because we need to trigger client events when a specific action happens. In this case, the actions are:\n\n- Adding a new exercise.\n- Adding a new set.\n- Incrementing a set.\n\nLet’s quickly run through all the places which needs updating:\n\n``` javascript\n    // app/modals/AddExerciseModal.js\n    addExercise = () =\u003e {\n      if (this.state.exercise_name) {\n        this.props.addExercise(id, name); // already added\n        \n        // add this\n        this.props.channel.trigger(\"client-added-exercise\", {\n          id,\n          name\n        });\n        \n        // rest of the code\n      }\n    };\n\n\n    // app/models/AddSetModal.js\n    addSet = () =\u003e {\n      if (this.state.weight) {\n        this.props.addSet(id, exercise_id, weight); // already added\n        // add this\n        this.props.channel.trigger(\"client-added-set\", {\n          id,\n          exercise_id,\n          weight\n        });\n        \n        // rest of the code\n      }    \n    };\n\n\n    // app/components/ConnectedFlatList/ConnectedFlatList.js\n    \n    \u003cSetContainer\n      ...\n      onPress={() =\u003e {\n        if (this.props.user == \"me\") {\n          this.props.incrementSet(item.key, item.reps); // already added\n          // add this\n          this.props.channel.trigger(\"client-incremented-set\", {\n            set_id: item.key,\n            reps: item.reps\n          });\n        }\n      }}\n    /\u003e\n```\n\nThe codes we’ve added above should be fairly easy to understand. We’re emitting a [client event](https://pusher.com/docs/client_api_guide/client_events) via the `channel` prop we’ve passed from the LogWorkout screen. The `trigger` method accepts the name of the event as its first argument, and an object containing the data we want to emit as its second.\n\nNote that client events should always be prefixed with `client-`. This allows Pusher to determine that this event is sent from the client.\n\n### Listen for client events\n\nThe final step is to add the code for subscribing to the user entered in the tracking tab and listening to events as they get fired. We execute the code below when the user clicks on the button with a right arrow in the tracking tab:\n\n``` javascript\n    // app/screens/LogWorkout.js\n    \n    subscribe = () =\u003e {\n      this.followed_channel = this.pusher.subscribe(\n        `private-user-${this.state.subscribedToUsername}`\n      );\n    \n      this.followed_channel.bind(\"pusher:subscription_error\", status =\u003e {\n        Alert.alert(\n          \"Error occured\",\n          \"Cannot connect to Pusher. Please restart the app.\"\n        );\n      });\n    \n      this.followed_channel.bind(\"pusher:subscription_succeeded\", () =\u003e {\n        Alert.alert(\"Success\", \"You are now subscribed!\"); // let the user know that the subscription succeeded\n        \n        // listen for the events that we've emitted earlier\n        this.followed_channel.bind(\"client-added-exercise\", data =\u003e {\n          store.dispatch(addedExercise(data.id, data.name, \"others\")); // dispatch the action to update the UI for the tracking tab\n        });\n    \n        this.followed_channel.bind(\"client-added-set\", data =\u003e {\n          store.dispatch(\n            addedSet(data.id, data.exercise_id, data.weight, \"others\")\n          );\n        });\n    \n        this.followed_channel.bind(\"client-incremented-set\", data =\u003e {\n          store.dispatch(incrementedSet(data.set_id, data.reps, \"others\"));\n        });\n      });\n    };\n```\n\n## Running the app\n\nNow that we’ve added all of the relevant code, the app should work after we’ve added all the config and linked it to its server component.\n\nStart by adding your Pusher app credentials to the `server/.env` file:\n\n```\n    APP_ID=YOUR_PUSHER_APP_ID\n    APP_KEY=YOUR_PUSHER_APP_KEY\n    APP_SECRET=YOUR_PUSHER_APP_SECRET\n    APP_CLUSTER=YOUR_PUSHER_APP_CLUSTER\n    PORT=3000\n```\n\nOnce that’s done, run the server:\n\n```\n    node server.js\n```\n\nNext, add your ngrok auth token and expose port 3000 to the internet:\n\n```\n    ./ngrok authToken YOUR_NGROK_AUTH_TOKEN\n    ./ngrok http 3000\n```\n\nNgrok should show the https URL for the server. Copy it to your Pusher `authEndpoint` in the LogWorkout screen:\n\n``` javascript\n    // app/screens/LogWorkout.js\n    this.pusher = new Pusher(\"YOUR_PUSHER_APP_KEY\", {\n      authEndpoint: \"YOUR_NGROK_URL/pusher/auth\",\n      cluster: \"YOUR_PUSHER_APP_CLUSTER\",\n      encrypted: true\n    });\n```\n\nOnce that’s done, the app should be fully functional. Try running it on two devices:\n\n```\n    expo start\n```\n\n## Conclusion\n\nIn this tutorial, you learned how to use Pusher within a React Native app to create a realtime workout tracking app. Along the way, you’ve solidified your experience with basic Redux concepts and Pusher Channels.\n\nYou can view the source code of this app on this [GitHub repo](https://github.com/anchetaWern/RNWorkout).","metaTitle":" Create a live workout tracking app with React Native","metaDescription":"Use React Native and Node to build a workout tracking app. Users will log and share workouts and follow each other's progress."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5ltcXcWOIwUEUiYmqmGCyG","type":"Entry","createdAt":"2018-09-21T15:23:41.010Z","updatedAt":"2018-09-21T15:24:06.940Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Create a stocks application for Android featuring push notifications","url":"stocks-push-notifications-kotlin","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/stock-app/","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4kOTcNAC12gwWEyE6MimMY","type":"Entry","createdAt":"2018-02-12T15:08:28.581Z","updatedAt":"2018-02-26T12:31:12.766Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Trading","url":"trading","type":"use case"}}],"reviewDate":"2018-09-21","description":"Build an Android app featuring realtime stock price updates and push notifications. You will use Kotlin to build a native app, and Node.js to create the backend. Users will be able to choose which stocks to track.","prerequisite":"You need Android Studio 3+ and Node.js installed on your machine. Some familiarity with Android development and Android Studio is required.","content":"\u003e A **stock market**, **equity market** or **share market** is the aggregation of buyers and sellers (a loose network of economic transactions, not a physical facility or discrete entity) of [stocks](https://en.wikipedia.org/wiki/Stock) (also called shares), which represent ownership claims on businesses; these may include securities listed on a public [stock exchange](https://en.wikipedia.org/wiki/Stock_exchange) as well as those only traded privately. - [Wikipedia](https://en.wikipedia.org/wiki/Stock_market)\n\nBuilding a stock market application has some fundamental requirements. Apart from accuracy, the application needs to also be able to update prices in realtime as the changes occur. It should also have an option to notify the user if there is a change in the price of a stock, even when they are not currently looking at the application.\n\nIn this post, we will see how we can achieve this using Kotlin, Pusher Beams, and Pusher Channels. \n\nWhen we are done with the article, here is what our app will look like:\n\n![android-stocks-demo](//images.ctfassets.net/1es3ne0caaid/1zIUg74BUg8Wksm0mCyoic/a21c893a69dacd159cae24c1d9c6434c/android-stocks-demo.gif)\n\n## Prerequesites\n\nTo follow along in this tutorial, you need the following:\n\n\n- Android Studio (v3.x or later) installed on your machine. Download [here](https://developer.android.com/studio/index.html).\n- Knowledge of Android development and the Android Studio IDE.\n- Knowledge of Kotlin. Visit the [docs](https://kotlinlang.org/docs/reference/).\n- Node.js and NPM installed on your machine. Download any stable release [here](https://nodejs.org/en/).\n\n\n## Creating your Android application\n\nThe first thing we want to do is create our Android application. Open Android Studio and create a new application. \n\nEnter the name of your application, `StockExchangeApp`, and then enter the package name, which is `com.example.stockexchangeapp`. Make sure the **Enable Kotlin Support** checkbox is selected, choose the minimum SDK, we chose API 19, click **Next.** Choose an **Empty Activity** template and click **Finish**.\n\n### Setting up Pusher Channels\n\nFor this article, you need a Pusher application. To get this, log in to your [Pusher dashboard](https://dashboard.pusher.com) and Create a new channel app. You can do this by clicking the **Create new Channels app** card at the bottom right. When you create a new app, you are provided with the keys. We will need them later.\n\n### Getting your FCM key\n\nFor Pusher Beams to work, we need an FCM key and a `google-services.json` file. Go to your [Firebase console](https://console.firebase.google.com/u/0/) and click the **Add project** card to initialize the app creation wizard. Add the name of project, read and accept the terms and conditions. After this, you will be directed to the project overview screen. Choose the **Add Firebase to your Android app** option. \n\nThe next screen will require the package name of your app. You can find your app’s package name is your app-module `build.gradle` file. Look for the `applicationId` value. When you enter the package name and click **Next**, you will be prompted to download a `google-services.json` file. Download the file and skip the rest of the process. Add the downloaded file to the app folder of your project - `StockExchangeApp/app`.\n\nTo get the FCM key, go to your project settings on Firebase, under the **Cloud messaging** tab, copy out the server key.\n\n![android-stocks-firebase-cloud-messaging](//images.ctfassets.net/1es3ne0caaid/32gyC9vKQgGiI2Ems6iIuW/3f47c88d12f9f44d5013de495d9f82f3/android-stocks-firebase-cloud-messaging.png)\n\n### Setting up Pusher Beams\n\nNow that we have set up our Firebase application, log in to the [Pusher Beams dashboard](https://dash.pusher.com/) and click on the **CREATE** button on the **BEAMS** card.\n\n![android-stocks-new-beams](//images.ctfassets.net/1es3ne0caaid/4s7xcv2Q1qkAYc8iKgGiEK/61bde551b68626cc773e1922420cb6ef/android-stocks-new-beams.png)\n\nAfter creating the instance, you will be presented with a quickstart guide. Select the **ANDROID** quickstart.\n\n![android-stocks-beams-android](//images.ctfassets.net/1es3ne0caaid/4xfRCPYpTW4OkEMCwGy6MM/9d66d1fb7d2381208f5da695f6f75316/android-stocks-beams-android.png)\n\nThe next screen requires the FCM key which you copied earlier. After you add the FCM key, you can exit the guide.\n\n### Adding application dependencies\n\nSince this application will depend on other libraries to function, let’s pull in these dependencies so they are available to the project.\n\nOpen the project `build.gradle` file and add the add the following:\n\n``` gradle\n    // File: ./build.gradle\n    buildscript {\n        // [...]\n    \n        dependencies {\n            // [...]\n            \n            classpath 'com.google.gms:google-services:4.0.0'\n        }\n    }\n```\n\nAnd these other dependencies to the app-module `build.gradle` file:\n\n``` gradle\n    // File: ./app/build.gradle\n    dependencies {\n    \n        // [...]\n    \n        // Support library\n        implementation 'com.android.support:appcompat-v7:28.0.0-rc01'\n        implementation 'com.android.support:recyclerview-v7:28.0.0-rc01'\n        implementation 'com.android.support:preference-v7:28.0.0-rc01'\n    \n        // Pusher Channel\n        implementation 'com.pusher:pusher-java-client:1.8.0'\n    \n        // Pusher Beams\n        implementation 'com.google.firebase:firebase-messaging:17.3.0'\n        implementation 'com.pusher:push-notifications-android:0.10.0'\n    }\n    \n    // Add this line to the end of the file\n    apply plugin: 'com.google.gms.google-services'\n```\n\n### Building the application\n\nSo far, we have been setting up the project. Now let’s start building the application. Let’s start by tweaking the colors of the application. \n\nOpen the `colors.xml` file and add the following code to it:\n\n``` xml\n    \u003c!-- File: ./app/src/main/res/values/colors.xml --\u003e\n    \u003ccolor name=\"colorPrimary\"\u003e#9E9E9E\u003c/color\u003e\n    \u003ccolor name=\"colorPrimaryDark\"\u003e#424242\u003c/color\u003e\n    \u003ccolor name=\"colorAccent\"\u003e#607D8B\u003c/color\u003e\n```\n\nNext, open your `styles.xml` file and replace the parent theme on the app theme with this - `Theme.AppCompat`.\n\nApart from the initial `MainActivity` already created for us, we will need a screen to manage the settings for the application. \n\nCreate a new **Empty Activity** named `SettingsActivity`. Open the layout created for it - `activity_settings` and replace everything except the first line of the file with the following code:\n\n``` xml\n    \u003c!-- File: ./app/src/main/res/layout/activity_settings.xml --\u003e\n    \u003cFrameLayout\n      android:background=\"#000\"\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:id=\"@+id/frame_layout\"\n      android:layout_height=\"match_parent\"\n      tools:context=\".SettingsActivity\"/\u003e\n```\n\nNext, open the `SettingsActivity` file and set it up like this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/stockexchangeapp/SettingsActivity.kt\n    // [...]\n    \n    import android.os.Bundle\n    import android.support.v7.app.AppCompatActivity\n    \n    class SettingsActivity: AppCompatActivity() {\n    \n      override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_settings)\n        supportFragmentManager.beginTransaction()\n            .replace(R.id.frame_layout, SettingsFragment())\n            .commit()\n      }\n    \n    }\n```\n\nIn the code above, we replaced the frame layout with a [fragment](https://developer.android.com/guide/components/fragments). This is the recommended practice when creating a settings page. Before creating the fragment, let’s create a preference file. \n\nCreate a new file in the `xml` directory named `preference` and paste the following:\n\n``` xml\n    \u003c!-- File: ./app/src/main/res/xml/preference.xml --\u003e\n    \u003cPreferenceScreen\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003e\n    \n      \u003cCheckBoxPreference\n        android:key=\"amazon_preference\"\n        android:title=\"Amazon\"\n        android:summary=\"Receive stock updates for Amazon\"\n        android:defaultValue=\"true\" /\u003e\n    \n      \u003cCheckBoxPreference\n        android:key=\"apple_preference\"\n        android:title=\"Apple\"\n        android:summary=\"Receive stock updates for Apple\"\n        android:defaultValue=\"true\" /\u003e\n    \n    \u003c/PreferenceScreen\u003e\n```\n\nIn this file, we have two checkboxes to control the updates for two stocks, Amazon and Apple. \n\nNext, create a new class named `SettingsFragment` and paste the following code:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/stockexchangeapp/SettingsFragment.kt\n    // [...]\n    \n    import android.os.Bundle\n    import android.support.v7.preference.PreferenceFragmentCompat\n    \n    class SettingsFragment: PreferenceFragmentCompat() {\n    \n      override fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {\n        // Load the preferences from an XML resource\n        setPreferencesFromResource(R.xml.preference, rootKey)\n      }\n    \n    }\n```\n\nThe code above loads the settings from the preference file created earlier. With this, we are done implementing the settings screen. \n\nThe next screen to be added will be a list of stock prices, which will be shown in the `MainActivity`. To do this, we need a list. Open the `activity_main.xml` file and paste the following:\n\n``` xml\n    \u003c!-- File: ./app/src/main/res/layout/activity_main.xml --\u003e\n    \u003candroid.support.constraint.ConstraintLayout\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      android:background=\"#000\"\n      tools:context=\".MainActivity\"\u003e\n    \n      \u003candroid.support.v7.widget.RecyclerView\n        android:id=\"@+id/recyclerView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"/\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nThis layout has a `ConstraintLayout` housing a `RecyclerView`. Since we are using a list, we need some other utilities. One of those utilities is a data object. The object is what every item on the list will hold. \n\n**Related:** [**Getting started with ConstraintLayout in Kotlin**](https://pusher.com/tutorials/constraintlayout-kotlin-part-1).\n\nCreate a new class named `StockModel` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/stockexchangeapp/StockModel.kt\n    data class StockModel(var name: String, var currentValue: Double, var changeValue:Double)\n```\n\nA data class in Kotlin generates some other useful methods we would have had to create manually if we were using Java. \n\nNext, let’s design a layout for how each list item will look. Create a new layout file named  `list_row` and paste this:\n\n``` xml\n    \u003c!-- File: ./app/src/main/res/layout/list_row.xml --\u003e\n    \u003candroid.support.constraint.ConstraintLayout \n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\"\u003e\n    \n      \u003cTextView\n        android:layout_margin=\"10dp\"\n        android:id=\"@+id/stockName\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginStart=\"20dp\"\n        tools:text=\"Amazon\"\n        android:textAppearance=\"@style/TextAppearance.AppCompat.Display1\"\n        android:textSize=\"18sp\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" /\u003e\n    \n      \u003cTextView\n        android:id=\"@+id/changeValue\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        tools:text=\"+5%\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        android:layout_marginEnd=\"20dp\"\n        android:paddingEnd=\"5dp\"\n        android:paddingStart=\"5dp\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\" /\u003e\n    \n      \u003cTextView\n        android:id=\"@+id/currentValue\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginEnd=\"10dp\"\n        tools:text=\"1234.9\"\n        app:layout_constraintEnd_toStartOf=\"@id/changeValue\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintBottom_toBottomOf=\"parent\" /\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nFrom this layout, each list item will show a company name, the current stock price, and it’ll show the change percentage. \n\nNext, let’s create the adapter for the list. Create a new class named `StockListAdapter` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/stockexchangeapp/StockListAdapter.kt\n    // [...]\n    \n    import android.support.v4.content.res.ResourcesCompat\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.TextView\n    \n    class StockListAdapter(private val stockList:ArrayList\u003cStockModel\u003e) : RecyclerView.Adapter\u003cStockListAdapter.ViewHolder\u003e() {\n    \n      override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        return ViewHolder(LayoutInflater.from(parent.context)\n            .inflate(R.layout.list_row, parent, false))\n      }\n    \n      override fun onBindViewHolder(holder: ViewHolder, position: Int) = holder.bind(stockList[position])\n    \n      override fun getItemCount(): Int = stockList.size\n    \n      fun addItem(item:StockModel){\n        stockList.add(item)\n        notifyDataSetChanged()\n      }\n    \n      fun updateItem(item:StockModel) {\n        stockList.forEachIndexed { index, element -\u003e\n          if (element.name == item.name){\n            stockList[index].changeValue = item.changeValue\n            stockList[index].currentValue = item.currentValue\n            notifyItemChanged(index)\n          }\n        }\n      }\n    \n      fun contains(item: StockModel):Boolean{\n        for (stock in stockList){\n          if (stock.name==item.name){\n            return true\n          }\n        }\n    \n        return false\n      }\n    \n      fun removeItem(name: String) {\n        val it = stockList.iterator()\n    \n        while (it.hasNext()) {\n          val value = it.next()\n          if (value.name == name){\n            it.remove()\n          }\n        }\n        \n        notifyDataSetChanged()\n      }\n    \n      inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        private val changePercent: TextView = itemView.findViewById(R.id.changeValue)\n        private val stockName: TextView = itemView.findViewById(R.id.stockName)\n        private val currentValue: TextView = itemView.findViewById(R.id.currentValue)\n    \n        fun bind(item: StockModel) = with(itemView) {\n          stockName.text = item.name\n          currentValue.text = item.currentValue.toString()\n          val fmt = \"%s%s\"\n    \n          changePercent.text = String.format(fmt, item.changeValue.toString(), \"%\")\n    \n          if (item.changeValue.toString().contains(\"-\")){\n            changePercent.background = ResourcesCompat.getDrawable(resources, android.R.color.holo_red_dark, null)\n          } else {\n            changePercent.background = ResourcesCompat.getDrawable(resources, android.R.color.holo_green_dark, null)\n          }\n        }\n      }\n    }\n```\n\nThis class manages the display of stock items on the list. It collects an initial list passed from the constructor and uses the size of that to know how many items we have. \n\nThe list can be updated with the `additem`, `updateItem`, and `removeItem` methods we created. The `list_row` layout we designed earlier is used in the `onCreateViewHolder` method. In the `bind` method of the `ViewHolder` class, apart from adding the values to the necessary text views, we apply a green or red background to the `changePercent` text view if it is a positive or negative value.\n\nFor uniformity, we will create a new class that will hold the list items we will use throughout the client app. Create a new class named `MyStockList` and paste this:\n\n``` kotlin\n    // File: app/src/main/java/com/example/stockexchangeapp/MyStockList.kt\n    // [...]\n    \n    class MyStockList{\n      companion object {\n        val stockList = ArrayList\u003cStockModel\u003e()\n        init {\n          stockList.add(StockModel(\"Apple\", 0.0, 0.0))\n          stockList.add(StockModel(\"Amazon\", 0.0, 0.0))\n        }\n      }\n    }\n```\n\nFor this demo, we are considering two stocks only. You can add more if you like. These stocks have a default value of 0.0 for change percent and value. \n\nNext, we will add some logic to our `MainActivity` file. Open the file and paste the following:\n\n``` kotlin\n    // file: app/src/main/java/com/example/stockexchangeapp/MainActivity.kt\n    // [...]\n    \n    import android.content.Intent\n    import android.content.SharedPreferences\n    import android.os.Bundle\n    import android.preference.PreferenceManager\n    import android.support.v7.app.AppCompatActivity\n    import android.support.v7.widget.DividerItemDecoration\n    import android.support.v7.widget.LinearLayoutManager\n    import android.util.Log\n    import android.view.Menu\n    import android.view.MenuItem\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import com.pusher.pushnotifications.PushNotifications\n    import kotlinx.android.synthetic.main.activity_main.*\n    import org.json.JSONObject\n    \n    class MainActivity : AppCompatActivity(), SharedPreferences.OnSharedPreferenceChangeListener {\n    \n      private val mAdapter = StockListAdapter(ArrayList())\n      private lateinit var sharedPreferences: SharedPreferences\n      private val options = PusherOptions().setCluster(\"PUSHER_CLUSTER\")\n      private val pusher = Pusher(\"PUSHER_KEY\", options)\n      private val channel = pusher.subscribe(\"stock-channel\")\n    \n      override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        setupPrefs()\n        pusher.connect()\n        setupRecyclerView()\n        setupPusherChannels()\n        setupPushNotifications()\n      }\n    \n    }\n```\n\nThis class implements the `SharedPreferences.OnSharedPreferenceChangeListener` interface because we will add settings functionality in the app and the callback will tell us when the settings have been updated. \n\nWe created instance variables for our Pusher Channel object and the list adapter. We subscribed to the `stock-channel` channel to listen for stock updates.\n\n\n\u003e Replace the Pusher holders with the keys on your Pusher Channel dashboard\n  \n\nOther methods called in the `onCreate` method include:\n\n\n1. `setupPrefs()` - this method initializes the `sharedPreferences` variable and initializes our settings with the default values. Add the method to the class:\n\n``` kotlin\n    // file: app/src/main/java/com/example/stockexchangeapp/MainActivity.kt\n    private fun setupPrefs() {\n      PreferenceManager.setDefaultValues(this, R.xml.preference, false)\n      sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this)\n    }\n```\n\n2. `setupRecyclerView()` - this method initializes our `RecyclerView`. Add the method to the class:\n\n``` kotlin\n    // file: app/src/main/java/com/example/stockexchangeapp/MainActivity.kt\n    private fun setupRecyclerView() {\n      with(recyclerView) {\n        layoutManager = LinearLayoutManager(this@MainActivity)\n        adapter = mAdapter\n        addItemDecoration(\n            DividerItemDecoration(recyclerView.context, DividerItemDecoration.VERTICAL)\n        )\n      }\n    }\n```\n\n3. `setupPusherChannels()` - this method loops through the stock list and looks for the stocks enabled in our settings page. If any of the stock is enabled, we subscribe to receive updates. Add the method to the class:\n\n``` kotlin\n    // file: app/src/main/java/com/example/stockexchangeapp/MainActivity.kt\n    private fun setupPusherChannels(){\n        val sharedPref = PreferenceManager.getDefaultSharedPreferences(this)\n        MyStockList.stockList.forEachIndexed { index, element -\u003e\n            val refKey = element.name.toLowerCase() + \"_preference\"\n            val refValue = sharedPref.getBoolean(refKey, false)\n            if (refValue) {\n                if (!mAdapter.contains(element)) {\n                    mAdapter.addItem(element)\n                    channel.bind(element.name) { channelName, eventName, data -\u003e\n                        val jsonObject = JSONObject(data)\n                        runOnUiThread {\n                            mAdapter.updateItem(\n                                StockModel(\n                                    eventName, \n                                    jsonObject.getDouble(\"currentValue\"), \n                                    jsonObject.getDouble(\"changePercent\")\n                                )\n                            )\n                        }\n                    }\n                }\n            } else {\n                mAdapter.removeItem(element.name)\n                channel.unbind(element.name){ _, _, _ -\u003e }\n            }\n        }\n    }\n```\n\n\n4. `setupPushNotifications()` - this method initializes Pusher Beams and listens to stock interests. Add the method to the class:\n\n``` kotlin\n    // file: app/src/main/java/com/example/stockexchangeapp/MainActivity.kt\n    private fun setupPushNotifications() {\n        PushNotifications.start(applicationContext, \"PUSHER_BEAMS_INSTANCEID\")\n        PushNotifications.subscribe(\"stocks\")\n    }\n```\n\n\u003e Replace the `PUSHER_BEAMS_INSTANCEID` placeholder with the Pusher Beams instance ID on your dashboard.\n  \n\nRemember we created a settings page earlier? Let’s inflate our menu and link it to the settings page. To do this, first, let’s first create a menu file in the menu resource folder. \n\nCreate a new menu file named `menu_main.xml` and paste this:\n\n``` xml\n    \u003c!-- File: app/src/main/res/menu/menu_main.xml --\u003e\n    \u003cmenu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\u003e\n    \n      \u003citem\n        android:id=\"@+id/settings\"\n        app:showAsAction=\"collapseActionView\"\n        android:title=\"@string/settings\" /\u003e\n    \n    \u003c/menu\u003e\n```\n\nNow, add these methods to your `MainActivity` file:\n\n``` kotlin\n    // file: app/src/main/java/com/example/stockexchangeapp/MainActivity.kt\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\n      menuInflater.inflate(R.menu.menu_main, menu)\n      return true\n    }\n    \n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\n      return when (item.itemId) {\n        R.id.settings -\u003e {\n          startActivity(Intent(this@MainActivity,SettingsActivity::class.java))\n          true\n        }\n        else -\u003e super.onOptionsItemSelected(item)\n      }\n    }\n```\n\nThese methods add the menu to the toolbar of our main application screen and add an action when settings is selected. We then register and unregister the listener in the appropriate callback methods like so:\n\n``` kotlin\n    // file: app/src/main/java/com/example/stockexchangeapp/MainActivity.kt\n    \n    override fun onStart() {\n      super.onStart()\n      sharedPreferences.registerOnSharedPreferenceChangeListener(this)\n    }\n    \n    override fun onDestroy() {\n      super.onDestroy()\n      sharedPreferences.unregisterOnSharedPreferenceChangeListener(this)\n    }\n```\n\nFinally, let’s add the callback for the shared preference listener:\n\n``` kotlin\n    // file: app/src/main/java/com/example/stockexchangeapp/MainActivity.kt\n    override fun onSharedPreferenceChanged(sharedPref: SharedPreferences?, key: String?) {\n      setupPusherChannels()\n    }\n```\n\nWhen the settings change, we call the `setupPusherChannels` method again so it binds to the stock reports we enabled and unbind from those we disabled.\n\nTo complete our Pusher Beams setup, we need a service that will handle incoming notifications. Create a new class named `NotificationsMessagingService` and paste this:\n\n``` kotlin\n    // file: app/src/main/java/com/example/stockexchangeapp/NotificationsMessagingService.kt\n    // [...]\n    \n    import android.app.NotificationChannel\n    import android.app.NotificationManager\n    import android.app.PendingIntent\n    import android.content.Intent\n    import android.os.Build\n    import android.preference.PreferenceManager\n    import android.support.v4.app.NotificationCompat\n    import android.support.v4.app.NotificationManagerCompat\n    import android.util.Log\n    import com.google.firebase.messaging.RemoteMessage\n    import com.pusher.pushnotifications.fcm.MessagingService\n    \n    class NotificationsMessagingService : MessagingService() {\n    \n      override fun onMessageReceived(remoteMessage: RemoteMessage) {\n        val sharedPref = PreferenceManager.getDefaultSharedPreferences(this)\n        MyStockList.stockList.forEachIndexed { index, element -\u003e\n          val refKey = element.name.toLowerCase() + \"_preference\"\n          val refValue = sharedPref.getBoolean(refKey, false)\n          if (refValue \u0026\u0026 element.name == remoteMessage.notification!!.title!!){\n            setupNotifications(remoteMessage)\n          }\n        }\n      }\n    \n      private fun setupNotifications(remoteMessage: RemoteMessage) {\n        val notificationId = 10\n        val channelId  = \"stocks\"\n        lateinit var channel:NotificationChannel\n        val intent = Intent(this, MainActivity::class.java)\n        intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK\n        val pendingIntent = PendingIntent.getActivity(this, 0, intent, 0)\n        val mBuilder = NotificationCompat.Builder(this, channelId)\n            .setSmallIcon(R.mipmap.ic_launcher)\n            .setContentTitle(remoteMessage.notification!!.title!!)\n            .setContentText(remoteMessage.notification!!.body!!)\n            .setContentIntent(pendingIntent)\n            .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n            .setAutoCancel(true)\n    \n        if (Build.VERSION.SDK_INT \u003e= Build.VERSION_CODES.O) {\n          val notificationManager = applicationContext.getSystemService(NotificationManager::class.java)\n          val name = getString(R.string.channel_name)\n          val description = getString(R.string.channel_description)\n          val importance = NotificationManager.IMPORTANCE_DEFAULT\n          channel = NotificationChannel(\"stock-exchange\", name, importance)\n          channel.description = description\n          notificationManager!!.createNotificationChannel(channel)\n          notificationManager.notify(notificationId, mBuilder.build())\n    \n        } else {\n          val notificationManager =  NotificationManagerCompat.from(this)\n          notificationManager.notify(notificationId, mBuilder.build())\n        }\n      }\n    \n    }\n```\n\nIn the code above, when a new message comes, we check if we enabled price reporting for that stock. With this information, we know whether to display the notification for it or not.\n\nNext, open the `strings.xml` file and add the following to the file:\n\n``` xml\n    \u003c!-- File: app/src/main/res/values/strings.xml --\u003e\n    \u003cstring name=\"settings\"\u003eSettings\u003c/string\u003e\n    \u003cstring name=\"channel_name\"\u003eStock-Exchange\u003c/string\u003e\n    \u003cstring name=\"channel_description\"\u003eTo receive updates about stocks\u003c/string\u003e\n```\n\nNext, open the `AndroidManifest.xml` file and update as seen below:\n\n``` xml\n    \u003c!-- File: ./app/main/AndroidManifest.xml --\u003e\n    \n    \u003capplication\n      [...]\n      \u003e\n    \n      // [...]\n    \n      \u003cservice android:name=\".NotificationsMessagingService\"\u003e\n        \u003cintent-filter android:priority=\"1\"\u003e\n          \u003caction android:name=\"com.google.firebase.MESSAGING_EVENT\" /\u003e\n        \u003c/intent-filter\u003e\n      \u003c/service\u003e\n      \n    \u003c/application\u003e\n```\n\nIn the `AndroidManifest.xml` file, add the internet permission as seen below:\n\n``` xml\n    \u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      package=\"com.example.stockexchangeapp\"\u003e\n    \n      \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n    \n      [...]\n    \n    \u003c/manifest\u003e\n```\n\nWith this, our Android application is complete. Let us now build our backend server.\n\n\n## Building our backend server\n\nNow that we have completed building the application, let us build the backend of the application. We will build our backend with Node.js. \n\nCreate a new folder for your project. Navigate into the folder and create a new `package.json` file, then paste the following code:\n\n``` json\n    // File: ./package.json\n    {\n      \"name\": \"stockexchangeapp\",\n      \"version\": \"1.0.0\",\n      \"description\": \"\",\n      \"main\": \"index.js\",\n      \"scripts\": {\n        \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\"\n      },\n      \"keywords\": [],\n      \"author\": \"\",\n      \"license\": \"ISC\",\n      \"dependencies\": {\n        \"@pusher/push-notifications-server\": \"^1.0.0\",\n        \"body-parser\": \"^1.18.3\",\n        \"express\": \"^4.16.3\",\n        \"pusher\": \"^2.1.2\"\n      }\n    }\n```\n\nThis file contains the meta data for the Node application. It also contains the list of dependencies the application relies on to function properly.\n\nNext, let’s create a configuration file that will hold all our sensitive keys. Create a file named `config.js` and paste this:\n\n``` javascript\n    // File: ./config.js\n    module.exports = {\n        appId: 'PUSHER_CHANNELS_APPID',\n        key: 'PUSHER_CHANNELS_KEY',\n        secret: 'PUSHER_CHANNELS_SECRET',\n        cluster: 'PUSHER_CHANNELS_CLUSTER',\n        secretKey: 'PUSHER_BEAMS_SECRET',\n        instanceId: 'PUSHER_BEAMS_INSTANCEID'\n    };\n```\n\n\u003e Replace the placeholders above with keys from your Pusher dashboard.\n\nFinally, let’s create another file named `index.js` and paste this:\n\n``` javascript\n    // File: ./index.js\n    \n    // import dependencies\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const path = require('path');\n    const Pusher = require('pusher');\n    const PushNotifications = require('@pusher/push-notifications-server');\n    \n    // initialise express\n    const app = express();\n    const pusher = new Pusher(require('./config.js'));\n    const pushNotifications = new PushNotifications(require('./config.js'))\n    \n    function handleStock(req, res, stock) {\n        let loopCount = 0;\n        \n        let sendToPusher = setInterval(() =\u003e {\n            loopCount++;\n            const changePercent = randomIntFromInterval(-10, 10)\n            const currentValue  = randomIntFromInterval(2000, 20000);        \n            const stockName = (stock === 'amazon') ? 'Amazon' : 'Apple'\n            const price = currentValue.toString()\n    \n            // Send to pusher\n            pusher.trigger('stock-channel', stockName, {currentValue, changePercent})\n    \n            pushNotifications.publish(\n                ['stocks'],{\n                fcm: {\n                  notification: {\n                    title: stockName,\n                    body: `The new value for ${stockName} is: ${price}`\n                  }\n                }\n              }).then((publishResponse) =\u003e {\n                console.log('Just published:', publishResponse.publishId);\n              });\n    \n            if (loopCount === 5) {\n              clearInterval(sendToPusher)\n            }\n        }, 2000);\n        \n        res.json({success: 200})\n    }\n    \n    app.get('/stock/amazon', (req, res) =\u003e handleStock(req, res, 'amazon'));\n    app.get('/stock/apple', (req, res) =\u003e handleStock(req, res, 'apple'));\n    \n    function randomIntFromInterval(min,max) {\n        return Math.floor(Math.random()*(max-min+1)+min);\n    }\n    \n    const port = 5000;\n    \n    app.listen(port, () =\u003e console.log(`Server is running on port ${port}`));\n```\n\nThis code above contains the endpoints for our application. We have two endpoints, one to handle all the processes for the `amazon` stock, and the other for the `apple` stock. We have the `handleStock` method that basically does all the work.\n\nIn the folder directory, run this to install the modules:\n\n```\n    $ npm install\n```\n\nThen run the following code to start the application:\n\n```\n    $ node index.js\n```\n\nNow, if you run your app, you should see something like this:\n\n![android-stocks-demo](//images.ctfassets.net/1es3ne0caaid/1zIUg74BUg8Wksm0mCyoic/a21c893a69dacd159cae24c1d9c6434c/android-stocks-demo.gif)\n\n\n## Conclusion\n\nIn this post, we have learned how to leverage the power of Pusher to create powerful engaging applications. \n\nYou can find the source code on [GitHub](https://github.com/neoighodaro/stock-app/). Feel free to clone and explore further.","metaTitle":"Create a stocks application for Android","metaDescription":"Use Kotlin and Node.js to create an Android stock tracking app, featuring realtime price updates and push notifications."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Z42nkqxuE02iQo8kSW64G","type":"Entry","createdAt":"2018-09-19T18:39:03.483Z","updatedAt":"2020-06-19T10:27:24.669Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Building a chatbot for Android with Kotlin and Dialogflow","url":"chatbot-kotlin-dialogflow","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"29U2yrruIQmo6UkY0MMsyK","type":"Entry","createdAt":"2018-02-13T11:27:38.132Z","updatedAt":"2018-02-14T10:08:48.377Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Esteban Herrera","url":"esteban-herrera","email":"estebanhb2@gmail.com","twitter":"https://twitter.com/eh3rrera","github":"https://github.com/eh3rrera/","guestWriter":true}}],"projectRepo":"https://github.com/eh3rrera/chatbot-kotlin-dialogflow","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}}],"reviewDate":"2018-09-19","description":"Build on an existing Kotlin Android chat app to create a chatbot feature. Use Dialogflow to generate the chatbot, with calls to other APIs to implement the desired chat features. You will use Gradle and Kotlin for the backend. Messages are sent and received in realtime.","prerequisite":"You will need an Android development environment set up on your machine, including Java JDK 8+ and Gradle 4.7+. You will also need ngrok, git and a Google account. This tutorial assumes some familiarity with Android development.","content":"In a [previous tutorial](https://pusher.com/tutorials/chat-kotlin-android), I showed you how to create a chat app for Android using Kotlin and Pusher.\n\nIn this tutorial, you’ll learn how to extend that chat to integrate a chatbot that gives trivia about numbers:\n\n![chatbot-kotlin-demo-1](//images.ctfassets.net/1es3ne0caaid/32zjp94Jck4sgi0YMMyIYs/42098f7014f2531f20f46c8f48910408/chatbot-kotlin-demo-1.gif)\n\nThe app will use [Dialogflow](https://dialogflow.com/) to process the language of the user and understand what they are saying. It will call the [Numbers API](http://numbersapi.com) to get random facts about a number.\n\nUnder the hood, the app communicates to a REST API (also implemented in Kotlin) that publishes the message to Pusher. If the message is directed to the bot, it calls Dialogflow's API to get the bot's response.\n\nIn turn, Dialogflow will process the message to get the user's intent and extract the number for the trivia. Then, it will call an endpoint of the REST API that makes the actual request to the Numbers API to get the trivia.\n\nHere’s the diagram that describes the above process:\n\n![chatbot-kotlin-api-diagram](//images.ctfassets.net/1es3ne0caaid/2KPZHTXttuoQiAm2O8uoK2/7740bbac80f7bd5394623f78c3d282de/chatbot-kotlin-api-diagram.jpeg)\n\nFor reference, the entire source code for the application is on [GitHub](https://github.com/eh3rrera/chatbot-kotlin-dialogflow).\n\n\n## Prerequisites\n\nHere’s what you need to have installed/configured to follow this tutorial:\n\n- [Java JDK](http://www.oracle.com/technetwork/java/javase/downloads/index.html) (8 or superior)\n- [Gradle](https://gradle.org/install/) (4.7 or superior)\n- The latest version of [Android Studio](https://developer.android.com/studio/?hl=es-419) (at the time of this writing 3.1.4)\n- Two Android emulators or two devices to test the app\n- A Google account for signing in to Dialogflow\n- [ngrok](https://ngrok.com/download), so Dialogflow can access the endpoint on the server API\n- Optionally, a Java IDE with Kotlin support, like [IntelliJ IDEA Community Edition](https://www.jetbrains.com/idea/download/#section=windows)\n\nI also assume that you are familiar with:\n\n- Android development (an upper-beginner level at least)\n- Kotlin\n- Android Studio\n\nLet’s get started.\n\n## Creating a Pusher application\n\nCreate a free account at [Pusher](https://pusher.com/). \n\nThen, go to your [dashboard](https://dashboard.pusher.com) and create a Channels app, choosing a name, the cluster closest to your location, and optionally, Android as the frontend tech and Java as the backend tech.\n\nSave your app ID, key, secret and cluster values, you’ll need them later. You can also find them in the **App Keys** tab.\n\n\n## Building the Android app\n\nWe’ll use the application from the previous tutorial as the starter project for this one. Clone it from [here](https://github.com/eh3rrera/kotlin-pusher-chat). \n\nDon’t follow the steps in the README file of the repo, I’ll show you what you need to do for this app in this tutorial. If you want to know how this project was built, you can learn [here](https://pusher.com/tutorials/chat-kotlin-android).\n\nNow, open the Android app from the starter project in Android Studio. \n\nYou can update the versions of the Kotlin plugin, Gradle, or other libraries if Android Studio ask you to.\n\nIn this project, we’re only going to add two XML files and modify two classes.\n\nIn the `res/drawable` directory, create a new drawable resource file, `bot_message_bubble.xml`, with the following content:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \n    \u003cshape xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:shape=\"rectangle\"\u003e\n    \n        \u003csolid android:color=\"#11de72\"\u003e\u003c/solid\u003e\n    \n        \u003ccorners  android:topLeftRadius=\"5dp\" android:radius=\"40dp\"\u003e\u003c/corners\u003e\n    \n    \u003c/shape\u003e\n```\n\nNext, in the `res/layout` directory, create a new layout resource file, `bot_message.xml`, for the messages of the bot:\n\n``` xml\n    \u003c!-- res/layout/bot_message.xml --\u003e\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:paddingTop=\"8dp\"\u003e\n    \n        \u003cTextView\n            android:id=\"@+id/txtBotUser\"\n            android:text=\"Trivia Bot\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:textSize=\"12sp\"\n            android:textStyle=\"bold\"\n            app:layout_constraintTop_toTopOf=\"parent\"\n            android:layout_marginTop=\"5dp\" /\u003e\n    \n        \u003cTextView\n            android:id=\"@+id/txtBotMessage\"\n            android:text=\"Hi, Bot's message\"\n            android:background=\"@drawable/bot_message_bubble\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:maxWidth=\"240dp\"\n            android:padding=\"15dp\"\n            android:elevation=\"5dp\"\n            android:textColor=\"#ffffff\"\n            android:layout_marginTop=\"4dp\"\n            app:layout_constraintTop_toBottomOf=\"@+id/txtBotUser\" /\u003e\n    \n        \u003cTextView\n            android:id=\"@+id/txtBotMessageTime\"\n            android:text=\"12:00 PM\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:textSize=\"10sp\"\n            android:textStyle=\"bold\"\n            app:layout_constraintLeft_toRightOf=\"@+id/txtBotMessage\"\n            android:layout_marginLeft=\"10dp\"\n            app:layout_constraintBottom_toBottomOf=\"@+id/txtBotMessage\" /\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nNow the modifications.\n\nThe name of the bot will be stored in the `App` class (`com.pusher.pusherchat.App.kt`), so add it next to the variable for the current user. The class should look like this:\n\n``` kotlin\n    import android.app.Application\n    \n    class App:Application() {\n        companion object {\n            lateinit var user:String\n            const val botUser = \"bot\"\n        }\n    }\n```\n\nNext, you need to modify the class `com.pusher.pusherchat.MessageAdapter.kt` to support the messages from the bot.\n\nFirst, import the `bot_message` view and add a new constant for the bot’s messages outside the class:\n\n``` kotlin\n    import kotlinx.android.synthetic.main.bot_message.view.*\n    \n    private const val VIEW_TYPE_MY_MESSAGE = 1\n    private const val VIEW_TYPE_OTHER_MESSAGE = 2\n    private const val VIEW_TYPE_BOT_MESSAGE = 3  // line to add\n    \n    class MessageAdapter (val context: Context) : RecyclerView.Adapter\u003cMessageViewHolder\u003e() {\n        // ...\n    }\n```\n\nNow modify the method `getItemViewType` to return this constant if the message comes from the bot:\n\n``` kotlin\n    override fun getItemViewType(position: Int): Int {\n        val message = messages.get(position)\n    \n        return if(App.user == message.user) {\n            VIEW_TYPE_MY_MESSAGE\n        } else if(App.botUser == message.user) {\n            VIEW_TYPE_BOT_MESSAGE\n        }\n        else {\n            VIEW_TYPE_OTHER_MESSAGE\n        }\n    }\n```\n\nAnd the method `onCreateViewHolder`, to inflate the view for the bot’s messages using the appropriate layout:\n\n``` kotlin\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MessageViewHolder {\n        return if(viewType == VIEW_TYPE_MY_MESSAGE) {\n            MyMessageViewHolder(\n              LayoutInflater.from(context).inflate(R.layout.my_message, parent, false)\n            )\n        }  else if(viewType == VIEW_TYPE_BOT_MESSAGE) {\n            BotMessageViewHolder(LayoutInflater.from(context).inflate(R.layout.bot_message, parent, false))\n        } else {\n            OtherMessageViewHolder(LayoutInflater.from(context).inflate(R.layout.other_message, parent, false))\n        }\n    }\n```\n\nOf course, you’ll need the inner class `BotMessageViewHolder` so add it at the bottom of the class, next to the other inner classes:\n\n``` kotlin\n    class MessageAdapter (val context: Context) : RecyclerView.Adapter\u003cMessageViewHolder\u003e() {\n        // ...\n        inner class MyMessageViewHolder (view: View) : MessageViewHolder(view) {\n            // ...\n        }\n    \n        inner class OtherMessageViewHolder (view: View) : MessageViewHolder(view) {\n            // ...\n        }\n    \n        inner class BotMessageViewHolder (view: View) : MessageViewHolder(view) {\n            private var messageText: TextView = view.txtBotMessage\n            private var userText: TextView = view.txtBotUser\n            private var timeText: TextView = view.txtBotMessageTime\n    \n            override fun bind(message: Message) {\n                messageText.text = message.message\n                userText.text = message.user\n                timeText.text = DateUtils.fromMillisToTimeString(message.time)\n            }\n        }\n    }\n```\n\nNow you just need to set your Pusher app cluster and key at the beginning of the class `ChatActivity` and that’ll be all the code for the app.\n\n\n## Setting up Dialogflow\n\nGo to [Dialogflow](https://console.dialogflow.com/api-client/#/login) and sign in with your Google account.\n\nNext, create a new agent with English as its primary language:\n\n\n![chatbot-kotlin-create-trivia-bot](//images.ctfassets.net/1es3ne0caaid/39YwGLpkFykeGAmAGaM6s0/9988c811ba8da3ac469273f84cb46fb9/chatbot-kotlin-create-trivia-bot.png)\n\nDialogflow will create two intents by default:\n\n![chatbot-kotlin-default-intents](//images.ctfassets.net/1es3ne0caaid/1KYnYZ55sMCQU2yy0iGymO/51e9db4f78dd92d1a30903816c4fb81b/chatbot-kotlin-default-intents.png)\n\n**Default fallback intent**, which it is triggered if a user's input is not matched by any other intent. And **Default welcome intent**, which it is triggered by phrases like **howdy** or **hi there**.\n\nCreate another intent with the name `Trivia` by clicking on the **CREATE INTENT** button or the link **Create the first one**:\n\n![chatbot-kotlin-create-intent](//images.ctfassets.net/1es3ne0caaid/276iM5sEyIK4iUWquIwgYQ/a85e9cef6ff4e0a1d6ba5b44a34fc8e1/chatbot-kotlin-create-intent.png)\n\nThen, click on the **ADD TRAINING PHRASES** link:\n\n![chatbot-kotlin-add-training-phrases](//images.ctfassets.net/1es3ne0caaid/5nw2LZTIhU8kYKUCOWUQgi/597004d3ddf842d0dd206e0076ea6c39/chatbot-kotlin-add-training-phrases.png)\n\nAnd add some training phrases, like:\n\n- Tell me something about three\n- Give me a trivia about 4\n\nYou’ll notice that when you add one of those phrases, Dialogflow recognizes the numbers three and 4 as numeric entities:\n\n![chatbot-kotlin-recognizes-numbers](//images.ctfassets.net/1es3ne0caaid/3OwLcLz7tek0UWysAyKeqw/e5cdef3d2df01250c3618789100d940c/chatbot-kotlin-recognizes-numbers.png)\n\nNow click on the **Manage Parameters and Action** link. A new entity parameter will be created for those numbers:\n\n![chatbot-kotlin-manage-parameters](//images.ctfassets.net/1es3ne0caaid/31740H7e7Kw6cuyyAMqQGa/60bebd42801700ce737d35e4f5a82664/chatbot-kotlin-manage-parameters.png)\n\nWhen a user posts a message similar to the training phrases, Dialogflow will extract the number to this parameter so we can call the Numbers API to get a trivia.\n\nBut what if the user doesn’t mention a number?\n\nWe can configure another training phrase like **Tell me a trivia** and make the `number` required by checking the corresponding checkbox in the **Action and parameters** table.\n\nThis will enable the **Prompts** column on this table so you can click on the Define prompts link and enter a message like **About which number?** to ask for this parameter to the user:\n\n![chatbot-kotlin-about-which-number](//images.ctfassets.net/1es3ne0caaid/4nEX6gvGEgC0eO8K4Sg2EO/77b91d195a2c3d31d2e40d578f31fe04/chatbot-kotlin-about-which-number.png)\n\nFinally, go to the bottom of the page and enable fulfillment for the intent with the option **Enable webhook call for this intent**:\n\n![chatbot-kotlin-enable-webhook](//images.ctfassets.net/1es3ne0caaid/7Ld6sgtvvqGIKeekuscmKG/b5f08b0275594fd4ef83df9c71ccdbf0/chatbot-kotlin-enable-webhook.png)\n\nAnd click on **SAVE**.\n\nDialogflow will call the webhook on the app server API to get the response for this intent. \n\nThe webhook will receive the number, call the Numbers API and return the trivia to Dialogflow.\n\nLet’s implement this webhook and the endpoint to post the messages and publish them using Pusher.\n\n\n## Building the server-side API\n\nOpen the server API project from the starter project in an IDE like [IntelliJ IDEA Community Edition](https://www.jetbrains.com/idea/download/#section=windows) or any other editor of your choice.\n\nLet’s start by adding the custom repository and the dependencies we are going to need for this project at the end of the file `build.gradle`:\n\n``` gradle\n    repositories {\n        ...\n        maven { url \"https://jitpack.io\" }\n    }\n    \n    dependencies {\n      ...\n      compile('com.github.jkcclemens:khttp:-SNAPSHOT')\n      compile('com.google.cloud:google-cloud-dialogflow:0.59.0-alpha')\n    }\n```\n\n- [khttp](https://khttp.readthedocs.io/en/latest/), an HTTP library to make requests to the Numbers API.\n- [Google Cloud Java Client for Dialogflow](https://github.com/GoogleCloudPlatform/google-cloud-java/tree/master/google-cloud-clients/google-cloud-dialogflow), to call Dialogflow’s API.\n\nNext, in the package `src/main/kotlin/com/example/demo`, modify the class `MessageController.kt` so it looks like this:\n\n``` kotlin\n    package com.example.demo\n    \n    import com.google.cloud.dialogflow.v2.*\n    import com.pusher.rest.Pusher\n    import org.springframework.http.ResponseEntity\n    import org.springframework.web.bind.annotation.*\n    import java.util.*\n    \n    @RestController\n    @RequestMapping(\"/message\")\n    class MessageController {\n        private val pusher = Pusher(\"PUSHER_APP_ID\", \"PUSHER_APP_KEY\", \"PUSHER_APP_SECRET\")\n        private val botUser = \"bot\"\n        private val dialogFlowProjectId = \"DIALOG_FLOW_PROJECT_ID\"\n        private val pusherChatName = \"chat\"\n        private val pusherEventName = \"new_message\"\n    \n        init {\n            pusher.setCluster(\"PUSHER_APP_CLUSTER\")\n        }\n    \n        @PostMapping\n        fun postMessage(@RequestBody message: Message) : ResponseEntity\u003cUnit\u003e {\n            pusher.trigger(pusherChatName, pusherEventName, message)\n    \n            if (message.message.startsWith(\"@$botUser\", true)) {\n                val messageToBot = message.message.replace(\"@bot\", \"\", true)\n    \n                val response = callDialogFlow(dialogFlowProjectId, message.user, messageToBot)\n    \n                val botMessage = Message(botUser, response, Calendar.getInstance().timeInMillis)\n                pusher.trigger(pusherChatName, pusherEventName, botMessage)\n            }\n    \n            return ResponseEntity.ok().build()\n        }\n    \n        @Throws(Exception::class)\n        fun callDialogFlow(projectId: String, sessionId: String,\n                           message: String): String {\n            // Instantiates a client\n            SessionsClient.create().use { sessionsClient -\u003e\n                // Set the session name using the sessionId and projectID \n                val session = SessionName.of(projectId, sessionId)\n    \n                // Set the text and language code (en-US) for the query\n                val textInput = TextInput.newBuilder().setText(message).setLanguageCode(\"en\")\n    \n                // Build the query with the TextInput\n                val queryInput = QueryInput.newBuilder().setText(textInput).build()\n    \n                // Performs the detect intent request\n                val response = sessionsClient.detectIntent(session, queryInput)\n    \n                // Display the query result\n                val queryResult = response.queryResult\n    \n                println(\"====================\")\n                System.out.format(\"Query Text: '%s'\\n\", queryResult.queryText)\n                System.out.format(\"Detected Intent: %s (confidence: %f)\\n\",\n                        queryResult.intent.displayName, queryResult.intentDetectionConfidence)\n                System.out.format(\"Fulfillment Text: '%s'\\n\", queryResult.fulfillmentText)\n    \n                return queryResult.fulfillmentText\n            }\n        }\n    }\n```\n\n`MessageController.kt` is a REST controller that defines a POST endpoint to publish the received message object to a Pusher channel (`chat`) and process the messages of the bot.\n\nIf a message is addressed to the bot, it will call Dialogflow to process the message and also publish its response to a Pusher channel.\n\nNotice a few things:\n\n\n1. Pusher is configured when the class is initialized, just replace your app information.\n\n\n2. We are using the username as the session identifier so Dialogflow can keep track of the conversation with each user.\n\n\n3. About the Dialogflow project identifier, you can click on the spinner icon next to your agent’s name:\n\n![chatbot-kotlin-dialogflow-identifier-1](//images.ctfassets.net/1es3ne0caaid/27LghTlnP66GiQsEiWWqKg/0d0eadc6c4722e7aa5c2a2822d7849fb/chatbot-kotlin-dialogflow-identifier-1.png)\n\nTo enter to the **Settings** page of your agent and get the project identifier:\n\n![chatbot-kotlin-dialogflow-identifier-2](//images.ctfassets.net/1es3ne0caaid/4S9OYT4RHO4WICuMIWmQcQ/9e8a24598f0e6c52ec6247e8dfb4419c/chatbot-kotlin-dialogflow-identifier-2.png)\n\nFor the authentication part, go to your [Google Cloud Platform console](https://console.cloud.google.com/home/dashboard) and choose the project created for your Dialogflow agent:\n\n![chatbot-kotlin-google-console](//images.ctfassets.net/1es3ne0caaid/5XugqjHqmcQcuMWYu2CC8W/6a232c57676119dbd061d3248647f2b6/chatbot-kotlin-google-console.png)\n\n \n Next, go to **APIs \u0026 Services** then **Credentials** and create a new **Service account key**:\n\n![chatbot-kotlin-create-key-1](//images.ctfassets.net/1es3ne0caaid/4THjVbDkN2cowWw28q8KIy/88c67d7c1e4d8939e52b4fb2b026abb5/chatbot-kotlin-create-key-1.png)\n \nThen, select **Dialogflow integrations** under **Service account**, **JSON** under **Key type**, and create your private key. It will be downloaded automatically:\n\n![chatbot-kotlin-create-key-2](//images.ctfassets.net/1es3ne0caaid/2UOL9eQhnGY2wOMIa6OiIY/a68f48eb3e12464abbfa27d71367c6af/chatbot-kotlin-create-key-2.png)\n\nThis file is your access to the API. You must not share it. Move it to a directory outside your project.\n\nNow, for the webhook create the class `src/main/kotlin/com/example/demo/WebhookController.kt` with the following content:\n\n``` kotlin\n    package com.example.demo\n    \n    import khttp.responses.Response\n    import org.json.JSONObject\n    import org.springframework.web.bind.annotation.PostMapping\n    import org.springframework.web.bind.annotation.RequestBody\n    import org.springframework.web.bind.annotation.RequestMapping\n    import org.springframework.web.bind.annotation.RestController\n    \n    data class WebhookResponse(val fulfillmentText: String)\n    \n    @RestController\n    @RequestMapping(\"/webhook\")\n    class WebhookController {\n    \n        @PostMapping\n        fun postMessage(@RequestBody json: String) : WebhookResponse {\n            val jsonObj = JSONObject(json)\n    \n            val num = jsonObj.getJSONObject(\"queryResult\").getJSONObject(\"parameters\").getInt(\"number\")\n    \n            val response: Response = khttp.get(\"http://numbersapi.com/$num?json\")\n            val responseObj: JSONObject = response.jsonObject\n    \n            return WebhookResponse(responseObj[\"text\"] as String)\n        }\n    }\n```\n\nThis class will:\n\n- Receive the request from Dialogflow as a JSON string\n- Extract the `number` parameter from that request\n- Call the Numbers API to get a trivia for that number\n- Get the response in JSON format (with the trivia in the `text` field)\n- Build the response with the format expected by DialogFlow (with the response text in the `fulfillmentText` field).\n\n[Here](https://dialogflow.com/docs/fulfillment) you can see all the request and response fields for Dialogflow webhooks.\n\nAnd that’s all the code we need.\n\n\n## Configuring the Dialogflow webhook\n\nWe are going to use [ngrok](https://ngrok.com/) to expose the server to the world so Dialogflow can access the webhook.\n\nDownload and unzip ngrok is some directory if you have done it already.\n\nNext, open a terminal window in that directory and execute:\n\n```\n    ngrok http localhost:8080\n```\n\nThis will create a secure tunnel to expose the port 8080 (the default port where the server is started) of localhost.\n\nCopy the HTTPS forwarding URL, in my case, https://5a4f24b2.ngrok.io.\n\nNow, in your Dialogflow console, click on the **Fulfillment** option, enable the **Webhook** option, add the URL you just copied from ngrok appending the path of the webhook endpoint (`webhook`), and save the changes (the button is at the bottom of the page):\n\n![chatbot-kotlin-add-webhook](//images.ctfassets.net/1es3ne0caaid/48QhhrJVleCQwUO2k26ESI/05e2a56072050986273ff2ea70c0431c/chatbot-kotlin-add-webhook.png)\n\nIf you are using the free version of ngrok, you must know the URL you get is temporary. You’ll have to update it in Dialogflow every time it changes (either between 7-8 hours or when you close and reopen ngrok).\n\n\n## Testing the app\n\nBefore running the API, define the environment variable `GOOGLE_APPLICATION_CREDENTIALS` and set as its value the location of the JSON file that contains the private key you created in the previous section. For example:\n\n```\n    export GOOGLE_APPLICATION_CREDENTIALS=/path/to/my/key.json\n```\n\nNext, execute the following Gradle command in the root directory of the Spring Boot application:\n\n```\n    gradlew bootRun\n```\n\nOr if you’re using an IDE, execute the class `ChatbotApiApplication`.\n\nThen, in Android Studio, execute your application on one Android emulator if you only want to talk to the bot. If you want to test the chat with more users, [execute the app on two or more emulators](https://stackoverflow.com/questions/28619463/how-to-use-two-emulators-at-the-same-time-in-the-same-project-in-android-studio).\n\nThis is how the first screen should look like:\n\n![chatbot-kotlin-login](//images.ctfassets.net/1es3ne0caaid/3Q8KrrOj8ko6eC4q4ea8mQ/966e4ed6ab82e2227321642fe6c73dcd/chatbot-kotlin-login.png)\n\nEnter a username and use `@bot` to send a message to the bot:\n\n![chatbot-kotlin-demo-1](//images.ctfassets.net/1es3ne0caaid/32zjp94Jck4sgi0YMMyIYs/42098f7014f2531f20f46c8f48910408/chatbot-kotlin-demo-1.gif)\n\nNotice that if you don’t specify a number, the bot will ask for one, as defined:\n\n![chatbot-kotlin-demo-2](//images.ctfassets.net/1es3ne0caaid/3CKeYF5CA8WQ2ygEcccCIQ/6a3959df1a81101d9530b02e74d72460/chatbot-kotlin-demo-2.png)\n\n## Conclusion\n\nYou have learned the basics of how to create a chat app with Kotlin and Pusher for Android, integrating a chatbot using Dialogflow.\n\nFrom here, you can extend it in many ways:\n\n- Train the bot to recognize more phrases\n- Use [Firebase Cloud Functions](https://dialogflow.com/docs/how-tos/getting-started-fulfillment) instead of a webhook to call to the Numbers API (you’ll need a Google Cloud account with billing information)\n- Implement other types of [number trivia](http://numbersapi.com)\n- Use [presence channels](https://pusher.com/docs/client_api_guide/client_presence_channels) to be aware of who is subscribed to the channel\n\n[Here](https://dialogflow.com/docs/examples) you can find more samples for Dialogflow agents.\n\nRemember that all of the source code for this application is available at [GitHub](https://github.com/eh3rrera/chatbot-kotlin-dialogflow).","metaTitle":"Building a chatbot for Android with Kotlin and Dialogflow","metaDescription":"Use Kotlin and Dialogflow to extend an existing Android chat app, by adding a trivia-generating chatbot. Users can send and receive messages to each other, or to a bot, with all messages appearing instantly."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2R3OOdRWOcK8gi8mkcom8i","type":"Entry","createdAt":"2018-07-29T20:22:52.067Z","updatedAt":"2018-07-29T20:22:52.067Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an Android messenger app with online presence using Kotlin","url":"android-messenger-presence-kotlin","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/kotlin-messenger-app-with-online-presence-status","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6HDXlostEIoyqU6K6WyuM0","type":"Entry","createdAt":"2018-02-12T15:09:53.611Z","updatedAt":"2018-02-26T12:31:12.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Online Presence","url":"online-presence","type":"use case"}}],"reviewDate":"2018-07-25","description":"This tutorial shows how to build an Android messaging app featuring online presence functionality. Use Node and MongoDB to create a simple backend, and Kotlin to program the app. Users will be able to log in and see who is online.","prerequisite":"You will need Android Studio 3+, Node, npm and MongoDB installed on your machine. Some familiarity with Android development is required.","content":"When building a chat application, it is essential to have an online presence feature. It is essential because your users will like to know when their friends are online and are more likely to respond to their messages.\n\nIn this article, we will be building a messenger app with online presence using Pusher Channels, Kotlin and Node.js. \n\nHere is a demo of what we will build:\n\n![android-messenger-presence-demo](//images.ctfassets.net/1es3ne0caaid/mmdMFfq7WoYsk26cIKocs/486ce2b458e45a41cfeb01ab4441f3b4/android-messenger-presence-demo.gif)\n\n# Prerequisites\n\nTo follow along you need the following requirements:\n\n\n- A Pusher Channel app. You can create one [here](https://pusher.com/channels).\n- Android Studio installed on your machine. You can check [here](https://developer.android.com/studio/index.html) for the latest stable version. A minimum of version 3.0 is recommended.\n- Basic knowledge of Android development and the Android Studio IDE.\n- Basic knowledge of Kotlin. Here are the [official docs](https://kotlinlang.org/docs/reference/).\n- Node.js and NPM (Node Package Manager) installed on your machine. Download [here](https://nodejs.org/en/).\n- Mongo DB installed on your machine. You can install it following the instructions [here](https://docs.mongodb.com/manual/installation/).\n\n\n## Building the backend server\n\nOur server will be built using Node.js. To start, create a new project directory:\n\n```\n    $ mkdir backend-server\n```\n\nNext, create a new `index.js` file inside the project directory and paste the following code:\n\n``` javascript\n    // File: ./index.js\n    var express = require('express');\n    var bodyParser = require('body-parser');\n    const mongoose = require('mongoose');\n    var Pusher = require('pusher');\n    \n    var app = express();\n    \n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    var pusher = new Pusher({\n      appId: 'PUSHER_APP_ID',\n      key: 'PUSHER_APP_KEY',\n      secret: 'PUSHER_APP_SECRET',\n      cluster: 'PUSHER_APP_CLUSTER'\n    });\n    \n    mongoose.connect('mongodb://127.0.0.1/db');\n    \n    const Schema = mongoose.Schema;\n    const userSchema = new Schema({\n        name: { type: String, required: true, },\n        count: {type: Number}\n    });\n    \n    var User = mongoose.model('User', userSchema);\n    userSchema.pre('save', function(next) {\n        if (this.isNew) {\n            User.count().then(res =\u003e {\n              this.count = res; // Increment count\n              next();\n            });\n          } else {\n            next();\n          }\n    });\n    \n    module.exports = User;\n    \n    var currentUser;\n    \n    /* \n    =================================\n    We will add our endpoints here!!!\n    =================================\n    */\n    \n    var port = process.env.PORT || 5000;\n    \n    app.listen(port);\n```\n\nIn the snippet above, we initialized Pusher, Express, and MongoDB. We are using [Moongose](http://mongoosejs.com/) to connect to our MongoDB instance.\n\n\n\u003e Replace the `PUSHER_APP_*` keys with the ones on your Pusher dashboard.\n  \n\nNow let’s add our endpoints. The first endpoint we will add will be to log a user in. Paste the code below in your `index.js` file below the `currentUser` declaration:\n\n``` javascript\n    // File: ./index.js\n    \n    // [...]\n    \n    app.post('/login', (req,res) =\u003e {\n        User.findOne({name: req.body.name}, (err, user) =\u003e {\n            if (err) {\n                res.send(\"Error connecting to database\");\n            }\n            \n            // User exists\n            if (user) {\n                currentUser = user;\n                return res.status(200).send(user)\n            }\n            \n            let newuser = new User({name: req.body.name});\n    \n            newuser.save(function(err) {\n                if (err) throw err;\n            });\n            \n            currentUser = newuser;\n            res.status(200).send(newuser)\n        });\n    })\n    \n    // [...]\n```\n\nThis endpoint receives a `username` with the request, and either create a new user or returns the data of the existing user. \n\nLet’s add the next endpoint below the one above:\n\n``` javascript\n    // File: ./index.js\n    \n    // [...]\n    \n    app.get('/users', (req,res) =\u003e {\n        User.find({}, (err, users) =\u003e {\n            if (err) throw err;\n            res.send(users);\n        });\n    })\n    \n    // [...]\n```\n\nThis endpoint above fetches all the users from the database and returns them. \n\nSince we will be using a Pusher presence channel, we need an endpoint to authenticate the user. In the same file, paste this code below the endpoint above:\n\n``` javascript\n    // File: ./index.js\n    \n    // [...]\n    \n    app.post('/pusher/auth/presence', (req, res) =\u003e {\n        let socketId = req.body.socket_id;\n        let channel = req.body.channel_name;\n      \n        let presenceData = {\n            user_id: currentUser._id,\n            user_info: {count: currentUser.count, name: currentUser.name}\n        };\n      \n        let auth = pusher.authenticate(socketId, channel, presenceData);\n    \n        res.send(auth);\n    });\n    \n    // [...]\n```\n\nSince we are going to be using private channels, we need an endpoint for authentication. Add the following endpoint below the endpoint above:\n\n``` javascript\n    // File: ./index.js\n    \n    // [...]\n    \n    app.post('/pusher/auth/private', (req, res) =\u003e {\n        res.send(pusher.authenticate(req.body.socket_id, req.body.channel_name));\n    });\n    \n    // [...]\n\nFinally, the last endpoint will be to trigger an event `new-message` to a channel. Add the endpoint below the last one:\n\n\n    // File: ./index.js\n    \n    // [...]\n    \n    app.post('/send-message', (req, res) =\u003e {\n        let payload = {message: req.body.message, sender_id: req.body.sender_id}\n        pusher.trigger(req.body.channel_name, 'new-message', payload);\n        res.send(200);\n    });\n    \n    // [...]\n```\n\nAfter adding all the endpoints, install the necessary NPM packages by running this command:\n\n```\n    $ npm install express body-parser mongoose pusher\n```\n\nBefore you run your application, make sure MongoDB is running already using this command:\n\n```\n    $ mongod --dbpath C:\\MongoDB\\data\\db # Windows\n    $ mongod --dbpath=/path/to/db/directory # Mac or Linux\n```\n\nNow you can run your application using the command below:\n\n```\n    $ node index.js\n```\n\nYour app will be available here: http://localhost:5000.\n\n\n## Building our Android application\n\nCreate your Android project. In the wizard, enter your project name, let’s say **MessengerApp.**  Next, enter your package name. You can use a minimum SDK of 19 then choose an **Empty Activity**. On the next page, change the **Activity Name** to `LoginActivity`. After this, Android Studio will build your project for you.\n\nNow that we have the project, let’s add the required dependencies for our app. Open your app module `build.gradle` file and add these:\n\n```\n    // File ../app/build.gradle\n    dependencies {\n      // [...]\n      \n      implementation 'com.android.support:design:28+'\n      implementation 'com.pusher:pusher-java-client:1.6.0'\n      implementation \"com.squareup.retrofit2:retrofit:2.4.0\"\n      implementation \"com.squareup.retrofit2:converter-scalars:2.4.0\"\n      implementation 'com.squareup.retrofit2:converter-gson:2.3.0'\n    }\n```\n\nNotably, we added the dependencies for [Retrofit](http://square.github.io/retrofit/) and Pusher. Retrofit is an HTTP client library used for network calls. We added the design library dependency too as we want to use some classes from it. Sync your gradle files to pull in the dependencies.\n\nNext, let’s prepare our app to make network calls. Retrofit requires an interface to know the endpoints to be accessed. \n\nCreate a new interface named `ApiService` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/ApiService.kt\n    import okhttp3.RequestBody\n    import retrofit2.Call\n    import retrofit2.http.Body\n    import retrofit2.http.GET\n    import retrofit2.http.POST\n    \n    interface ApiService {\n    \n      @POST(\"/login\")\n      fun login(@Body body:RequestBody): Call\u003cUserModel\u003e\n    \n      @POST(\"/send-message\")\n      fun sendMessage(@Body body:RequestBody): Call\u003cString\u003e\n    \n      @GET(\"/users\")\n      fun getUsers(): Call\u003cList\u003cUserModel\u003e\u003e\n    }\n```\n\nHere, we have declared three endpoints. They are for logging in, sending messages and fetching users. Notice that in some of our responses, we return `Call\u003cUserModel\u003e`. Let’s create the `UserModel`. Create a new class called `UserModel` and paste the following:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/UserModel.kt\n    import com.google.gson.annotations.Expose\n    import com.google.gson.annotations.SerializedName\n    \n    data class UserModel(@SerializedName(\"_id\") @Expose var id: String,\n                         @SerializedName(\"name\") @Expose var name: String,\n                         @SerializedName(\"count\") @Expose var count: Int,\n                         var online:Boolean = false)\n```\n\nAbove, we used a data class so that some other functions required for model classes such as `toString`, `hashCode` are added to the class by default. \n\nWe are expecting only the values for the `id` and `name` from the server. We added the `online` property so we can update later on. \n\nNext, create a new class named `RetrofitInstance` and paste the following code:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/RetrofitInstance.kt\n    import okhttp3.OkHttpClient\n    import retrofit2.Retrofit\n    import retrofit2.converter.gson.GsonConverterFactory\n    import retrofit2.converter.scalars.ScalarsConverterFactory\n    \n    class RetrofitInstance {\n    \n      companion object {\n        val retrofit: ApiService by lazy {\n          val httpClient = OkHttpClient.Builder()\n          val builder = Retrofit.Builder()\n              .baseUrl(\"http://10.0.2.2:5000/\")\n              .addConverterFactory(ScalarsConverterFactory.create())\n              .addConverterFactory(GsonConverterFactory.create())\n    \n          val retrofit = builder\n              .client(httpClient.build())\n              .build()\n          retrofit.create(ApiService::class.java)\n        }\n      }\n    }\n```\n\nThis class contains a class variable called `retrofit`. It provides us with an instance for Retrofit that we will reference in more than one class.\n\nFinally, to request for the internet access permission update the `AndroidManifest.xml` file like so:\n\n``` kotlin\n    // File: ./app/src/main/ApiService.kt\n    \u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      package=\"com.example.messengerapp\"\u003e\n    \n      \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n      [...]\n    \n    \u003c/manifest\u003e\n```\n\nNow we can make requests using Retrofit. \n\nThe next feature we will implement is login. Open the already created `LoginActivity` layout file `activity_login.xml` file and paste this:\n\n``` xml\n    // File: ./app/src/main/res/layout/activity_login.xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      android:layout_margin=\"20dp\"\n      tools:context=\".LoginActivity\"\u003e\n    \n      \u003cEditText\n        android:id=\"@+id/editTextUsername\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" /\u003e\n    \n      \u003cButton\n        android:id=\"@+id/loginButton\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Login\"\n        app:layout_constraintTop_toBottomOf=\"@+id/editTextUsername\" /\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nThis layout contains an input field to take the username and a button to make a login request. \n\nNext, open the `LoginActivity.Kt` file and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/LoginActivity.kt\n    import android.content.Intent\n    import android.os.Bundle\n    import android.support.v7.app.AppCompatActivity\n    import android.util.Log\n    import kotlinx.android.synthetic.main.activity_login.*\n    import okhttp3.MediaType\n    import okhttp3.RequestBody\n    import org.json.JSONObject\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    \n    class LoginActivity : AppCompatActivity() {\n    \n      override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_login)\n        loginButton.setOnClickListener {\n          if (editTextUsername.text.isNotEmpty()) {\n            loginFunction(editTextUsername.text.toString())\n          }\n        }\n      }\n    \n      private fun loginFunction(name:String) {\n        val jsonObject = JSONObject()\n        jsonObject.put(\"name\", name)\n        \n        val jsonBody = RequestBody.create(\n            MediaType.parse(\"application/json; charset=utf-8\"), \n            jsonObject.toString()\n        )\n    \n        RetrofitInstance.retrofit.login(jsonBody).enqueue(object:Callback\u003cUserModel\u003e {\n          override fun onFailure(call: Call\u003cUserModel\u003e?, t: Throwable?) {\n            Log.i(\"LoginActivity\",t!!.localizedMessage)\n          }\n    \n          override fun onResponse(call: Call\u003cUserModel\u003e?, response: Response\u003cUserModel\u003e?) {\n            if (response!!.code() == 200) {\n              Singleton.getInstance().currentUser = response.body()!!\n              startActivity(Intent(this@LoginActivity,ContactListActivity::class.java))\n              finish()\n            }\n          }\n        })\n      }\n    }\n```\n\nIn the file, we set up a listener for our login button so that when it is clicked, we can send the text to the server for authentication. We also stored the logged in user in a singleton class so that we can access the user’s details later. \n\nCreate a new class called `Singleton` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/RetrofitInstance.kt\n    class Singleton {\n      companion object {\n        private val ourInstance = Singleton()\n        fun getInstance(): Singleton {\n          return ourInstance\n        }\n      }\n      lateinit var currentUser: UserModel\n    }\n```\n\n\nWith this class, we will have access to the `currentUser`, which is the logged in user.\n\nNext, let’s create a new activity named `ContactListActivity`. For now, leave the class empty and open the corresponding layout file named `activity_contact_list` and paste the following:\n\n``` xml\n    // File: ./app/src/main/res/layout/activity_contact_list.xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      tools:context=\".ContactListActivity\"\u003e\n    \n      \u003candroid.support.v7.widget.RecyclerView\n        android:layout_width=\"match_parent\"\n        android:id=\"@+id/recyclerViewUserList\"\n        android:layout_height=\"match_parent\"/\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\n\nThe layout contains a recycler view, which will give us all the list of our contacts fetched from the database. Since we are displaying items in a list, we will need an adapter class to manage how items are inflated to the layout. \n\nCreate a new class named `ContactRecyclerAdapter` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/ContactRecyclerAdapter.kt\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.ImageView\n    import android.widget.TextView\n    import java.util.*\n    \n    class ContactRecyclerAdapter(private var list: ArrayList\u003cUserModel\u003e, private var listener: UserClickListener)\n      : RecyclerView.Adapter\u003cContactRecyclerAdapter.ViewHolder\u003e() {\n      \n      override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        return ViewHolder(LayoutInflater.from(parent.context)\n            .inflate(R.layout.user_list_row, parent, false))\n      }\n    \n      override fun onBindViewHolder(holder: ViewHolder, position: Int) = holder.bind(list[position])\n    \n      override fun getItemCount(): Int = list.size\n    \n      fun showUserOnline(updatedUser: UserModel) {\n        list.forEachIndexed { index, element -\u003e\n          if (updatedUser.id == element.id) {\n            updatedUser.online = true\n            list[index] = updatedUser\n            notifyItemChanged(index)\n          }\n    \n        }\n      }\n    \n      fun showUserOffline(updatedUser: UserModel) {\n        list.forEachIndexed { index, element -\u003e\n          if (updatedUser.id == element.id) {\n            updatedUser.online = false\n            list[index] = updatedUser\n            notifyItemChanged(index)\n          }\n        }\n      }\n    \n      fun add(user: UserModel) {\n        list.add(user)\n        notifyDataSetChanged()\n      }\n    \n      inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        private val nameTextView: TextView = itemView.findViewById(R.id.usernameTextView)\n        private val presenceImageView: ImageView = itemView.findViewById(R.id.presenceImageView)\n    \n        fun bind(currentValue: UserModel) = with(itemView) {\n          this.setOnClickListener {\n            listener.onUserClicked(currentValue)\n          }\n          nameTextView.text = currentValue.name\n          if (currentValue.online){\n            presenceImageView.setImageDrawable(this.context.resources.getDrawable(R.drawable.presence_icon_online))\n          } else {\n            presenceImageView.setImageDrawable(this.context.resources.getDrawable(R.drawable.presence_icon))\n    \n          }\n    \n        }\n      }\n    \n      interface UserClickListener {\n        fun onUserClicked(user: UserModel)\n      }\n    }\n```\n\nThis adapter has some overridden methods and some custom methods. \n\nThe `onCreateViewHolder` inflates how each row will look like. `onBindViewHolder` binds the data to each item by calling the `bind` method in the inner `ViewHolder` class. The `getItemCount` gives the size of the list. \n\nFor our custom methods, `showUserOffline` updates the user and shows when they are offline. While `showUserOnline` does the opposite. Finally, we have the `add` method, which adds a new contact to the list and refreshes it.\n\nIn the adapter class above, we used a new layout named `user_list_row`. Create a new layout `user_list_row` and paste this:\n\n``` xml\n    // File: ./app/src/main/res/layout/user_list_row.xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout\n      android:orientation=\"horizontal\"\n      xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\"\n      android:layout_margin=\"20dp\"\n      android:gravity=\"center\"\n      tools:context=\".LoginActivity\"\u003e\n    \n      \u003cImageView\n        android:id=\"@+id/presenceImageView\"\n        android:layout_width=\"15dp\"\n        android:layout_height=\"15dp\"\n        app:srcCompat=\"@drawable/presence_icon\" /\u003e\n    \n      \u003cTextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        tools:text=\"Neo\"\n        android:textSize=\"20sp\"\n        android:layout_marginStart=\"10dp\"\n        android:id=\"@+id/usernameTextView\"\n        app:layout_constraintTop_toBottomOf=\"@+id/editTextUsername\"\n        /\u003e\n    \n    \u003c/LinearLayout\u003e\n```\n\nThis layout is the visual representation of how each item on the layout will look like. The layout has an image view that shows the users online status. The layout also has a textview that shows the name of the contact beside the icon. The icons are vector drawables. Let’s create the files. \n\nCreate a new drawable named `presence_icon_online` and paste this:\n\n``` xml\n    // File: ./app/src/main/res/drawable/presence_icon_online.xml\n    \u003cvector android:height=\"24dp\" android:tint=\"#3FFC3C\"\n        android:viewportHeight=\"24.0\" android:viewportWidth=\"24.0\"\n        android:width=\"24dp\" xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003e\n        \u003cpath android:fillColor=\"#FF000000\" android:pathData=\"M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2z\"/\u003e\n    \u003c/vector\u003e\n```\n\n\nCreate another drawable named `presence_icon` and paste this:\n\n``` xml\n    // File: ./app/src/main/res/drawable/presence_icon.xml\n    \u003cvector android:height=\"24dp\" android:tint=\"#C0C0C6\"\n        android:viewportHeight=\"24.0\" android:viewportWidth=\"24.0\"\n        android:width=\"24dp\" xmlns:android=\"http://schemas.android.com/apk/res/android\"\u003e\n        \u003cpath android:fillColor=\"#FF000000\" android:pathData=\"M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2z\"/\u003e\n    \u003c/vector\u003e\n```\n\nNext, open the `ContactListActivity` class and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/ContactListActivity.kt\n    import android.content.Intent\n    import android.os.Bundle\n    import android.support.v7.app.AppCompatActivity\n    import android.support.v7.widget.LinearLayoutManager\n    import android.util.Log\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import com.pusher.client.channel.PresenceChannelEventListener\n    import com.pusher.client.channel.User\n    import com.pusher.client.util.HttpAuthorizer\n    import kotlinx.android.synthetic.main.activity_contact_list.*\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    \n    class ContactListActivity : AppCompatActivity(),\n        ContactRecyclerAdapter.UserClickListener {\n    \n      private val mAdapter = ContactRecyclerAdapter(ArrayList(), this)\n      \n      override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_contact_list)\n        setupRecyclerView()\n        fetchUsers()\n        subscribeToChannel()\n      }\n    \n    }\n```\n\nIn this class, we initialized the `ContactRecyclerAdapter`, then called three functions in the `onCreate` method. Let’s create these new functions. \n\nIn the same class, add the following methods:\n\n``` kotlin\n    private fun setupRecyclerView() {\n      with(recyclerViewUserList) {\n        layoutManager = LinearLayoutManager(this@ContactListActivity)\n        adapter = mAdapter\n      }\n    }\n    \n    private fun fetchUsers() {\n      RetrofitInstance.retrofit.getUsers().enqueue(object : Callback\u003cList\u003cUserModel\u003e\u003e {\n        override fun onFailure(call: Call\u003cList\u003cUserModel\u003e\u003e?, t: Throwable?) {}\n        override fun onResponse(call: Call\u003cList\u003cUserModel\u003e\u003e?, response: Response\u003cList\u003cUserModel\u003e\u003e?) {\n          for (user in response!!.body()!!) {\n            if (user.id != Singleton.getInstance().currentUser.id) {\n              mAdapter.add(user)\n            }\n          }\n        }\n      })\n    }\n    \n    private fun subscribeToChannel() {\n    \n      val authorizer = HttpAuthorizer(\"http://10.0.2.2:5000/pusher/auth/presence\")\n      val options = PusherOptions().setAuthorizer(authorizer)\n      options.setCluster(\"PUSHER_APP_CLUSTER\")\n    \n      val pusher = Pusher(\"PUSHER_APP_KEY\", options)\n      pusher.connect()\n    \n      pusher.subscribePresence(\"presence-channel\", object : PresenceChannelEventListener {\n        override fun onUsersInformationReceived(p0: String?, users: MutableSet\u003cUser\u003e?) {\n          for (user in users!!) {\n            if (user.id!=Singleton.getInstance().currentUser.id){\n              runOnUiThread {\n                mAdapter.showUserOnline(user.toUserModel())\n              }\n            }\n          }\n        }\n    \n        override fun onEvent(p0: String?, p1: String?, p2: String?) {}\n        override fun onAuthenticationFailure(p0: String?, p1: Exception?) {}\n        override fun onSubscriptionSucceeded(p0: String?) {}\n    \n        override fun userSubscribed(channelName: String, user: User) {\n          runOnUiThread {\n            mAdapter.showUserOnline(user.toUserModel())\n          }\n        }\n    \n        override fun userUnsubscribed(channelName: String, user: User) {\n          runOnUiThread {\n            mAdapter.showUserOffline(user.toUserModel())\n          }\n        }\n      })\n    }\n    \n    override fun onUserClicked(user: UserModel) {\n      val intent = Intent(this, ChatRoom::class.java)\n      intent.putExtra(ChatRoom.EXTRA_ID,user.id)\n      intent.putExtra(ChatRoom.EXTRA_NAME,user.name)\n      intent.putExtra(ChatRoom.EXTRA_COUNT,user.count)\n      startActivity(intent)\n    }\n```\n\n\u003e Replace the `PUSHER_APP_*`  keys with the values on your dashboard.\n\n\n- `setupRecyclerView` assigns a layout manager and an adapter to the recycler view. For a recycler view to work, you need these two things. \n- `fetchUsers` fetches all the users from the server and displays on the list. It exempts the current user logged in.\n- `subcribeToChannel` subscribes to a presence channel. When you subscribe to one, the `onUsersInformationReceived` gives you all the users subscribed to the channel including the current user. So, in that callback, we call the `showUserOnline` method in the adapter class so that the icon beside the user can be changed to signify that the user is online.\n- `onUserClicked` is called when a contact is selected. We pass the details of the user to the next activity called `ChatRoom`.\n\nIn the previous snippet, we used an extension function to transform the `User` object we receive from Pusher to our own `UserModel` object. Let’s define this extension.\n\nCreate a new class called `Utils` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/Utils.kt\n    import com.pusher.client.channel.User\n    import org.json.JSONObject\n    \n    fun User.toUserModel():UserModel{\n      val jsonObject = JSONObject(this.info)\n      val name = jsonObject.getString(\"name\")\n      val numb = jsonObject.getInt(\"count\")\n      return UserModel(this.id, name, numb)\n    }\n```\n\nNow, since we referenced a `ChatRoom` activity earlier in the `onUserClicked` method, let’s create it. \n\nCreate a new activity called `ChatRoom`. The activity comes with a layout file `activity_chat_room`, paste this in the layout file:\n\n``` xml\n    // File: ./app/src/main/res/layout/activity_chat_room.xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      xmlns:tools=\"http://schemas.android.com/tools\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      tools:context=\".ChatRoom\"\u003e\n    \n      \u003candroid.support.v7.widget.RecyclerView\n        android:id=\"@+id/recyclerViewChat\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" /\u003e\n    \n      \u003cEditText\n        android:id=\"@+id/editText\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:layout_margin=\"16dp\"\n        android:hint=\"Enter a message\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toStartOf=\"@+id/sendButton\"\n        app:layout_constraintStart_toStartOf=\"parent\" /\u003e\n    \n      \u003candroid.support.design.widget.FloatingActionButton\n        android:id=\"@+id/sendButton\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"end|bottom\"\n        android:layout_margin=\"16dp\"\n        android:src=\"@android:drawable/ic_menu_send\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintBottom_toBottomOf=\"parent\" /\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nThe layout above contains a recycler view for the chat messages, an edit text to collect new messages, and a floating action button to send the message. \n\nNext, create a new class called `ChatRoomAdapter` and paste the following:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/ChatRoomAdapter.kt\n    import android.support.v7.widget.CardView\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.RelativeLayout\n    import android.widget.TextView\n    import java.util.*\n    \n    class ChatRoomAdapter (private var list: ArrayList\u003cMessageModel\u003e)\n      : RecyclerView.Adapter\u003cChatRoomAdapter.ViewHolder\u003e() {\n    \n      override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        return ViewHolder(LayoutInflater.from(parent.context)\n            .inflate(R.layout.chat_item, parent, false))\n      }\n    \n      override fun onBindViewHolder(holder: ViewHolder, position: Int) = holder.bind(list[position])\n    \n      override fun getItemCount(): Int = list.size\n    \n      fun add(message: MessageModel) {\n        list.add(message)\n        notifyDataSetChanged()\n      }\n    \n      inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        private val messageTextView: TextView = itemView.findViewById(R.id.text)\n        private val cardView: CardView = itemView.findViewById(R.id.cardView)\n    \n        fun bind(message: MessageModel) = with(itemView) {\n          messageTextView.text = message.message\n          val params = cardView.layoutParams as RelativeLayout.LayoutParams\n          if (message.senderId==Singleton.getInstance().currentUser.id) {\n            params.addRule(RelativeLayout.ALIGN_PARENT_RIGHT)\n          }\n        }\n      }\n    }\n```\n\nThis adapter works in a similar fashion as the one we created earlier. One difference though is that the show online and offline methods are not needed here.\n\nNext, create another class named `MessageModel` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/MessageModel.kt\n    data class MessageModel(val message: String, val senderId: String)\n```\n\nThe `chat_item` layout used in the `onCreateViewHolder` method of the adapter class represents how each layout will look like. Create a new layout called `chat_item` and paste this:\n\n``` xml\n    // File: ./app/src/main/res/layout/chat_item.xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cRelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n      android:layout_width=\"wrap_content\"\n      android:layout_height=\"wrap_content\"\n      android:layout_margin=\"16dp\"\n      android:orientation=\"vertical\"\u003e\n    \n      \u003candroid.support.v7.widget.CardView\n        android:id=\"@+id/cardView\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"start\"\n        app:cardCornerRadius=\"8dp\"\n        app:cardUseCompatPadding=\"true\"\u003e\n    \n        \u003cLinearLayout\n          android:layout_width=\"wrap_content\"\n          android:layout_height=\"wrap_content\"\n          android:gravity=\"start\"\n          android:orientation=\"vertical\"\n          android:padding=\"8dp\"\u003e\n    \n          \u003cTextView\n            android:id=\"@+id/text\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center_vertical|start\"\n            android:layout_marginBottom=\"4dp\"\n            android:textStyle=\"bold\" /\u003e\n    \n        \u003c/LinearLayout\u003e\n    \n      \u003c/android.support.v7.widget.CardView\u003e\n    \n    \u003c/RelativeLayout\u003e\n```\n\nFinally, open the `ChatRoom` activity class and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/messengerapp/ChatRoom.kt\n    import android.app.Activity\n    import android.os.Bundle\n    import android.support.v7.app.AppCompatActivity\n    import android.support.v7.widget.LinearLayoutManager\n    import android.util.Log\n    import android.view.View\n    import android.view.inputmethod.InputMethodManager\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import com.pusher.client.channel.PrivateChannelEventListener\n    import com.pusher.client.util.HttpAuthorizer\n    import kotlinx.android.synthetic.main.activity_chat_room.*\n    import okhttp3.MediaType\n    import okhttp3.RequestBody\n    import org.json.JSONObject\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    import java.lang.Exception\n    import java.util.*\n    \n    class ChatRoom : AppCompatActivity() {\n    \n      companion object {\n        const val EXTRA_ID = \"id\"\n        const val EXTRA_NAME = \"name\"\n        const val EXTRA_COUNT = \"numb\"\n      }\n    \n      private lateinit var contactName: String\n      private lateinit var contactId: String\n      private var contactNumb: Int = -1\n      lateinit var nameOfChannel: String\n      val mAdapter = ChatRoomAdapter(ArrayList())\n    \n      override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_chat_room)\n        fetchExtras()\n        setupRecyclerView()\n        subscribeToChannel()\n        setupClickListener()\n      }\n    }\n```\n\nIn this file, we declared constants used to send data to the activity through intents. We also initialized variables we will use later like the adapter the contact details. We then called some additional methods in the `onCreate` method. Let’s add them to the class.\n\nAdd the `fetchExtras` method defined below to the class. The method gets the extras sent from the chatroom activity.\n\n``` kotlin\n    private fun fetchExtras() {\n      contactName = intent.extras.getString(ChatRoom.EXTRA_NAME)\n      contactId = intent.extras.getString(ChatRoom.EXTRA_ID)\n      contactNumb = intent.extras.getInt(ChatRoom.EXTRA_COUNT)\n    }\n```\n\nThe next method is the `setupRecyclerView` method. This initializes the recycler view with an adapter and a layout manager. Paste the function in the same class as before:\n\n``` kotlin\n    private fun setupRecyclerView() {\n      with(recyclerViewChat) {\n        layoutManager = LinearLayoutManager(this@ChatRoom)\n        adapter = mAdapter\n      }\n    }\n```\n\nThe next method is the `subscribeToChannel` method. This method subscribes the user to a private channel with the selected contact. Paste the following code to the same class as before:\n\n``` kotlin\n    private fun subscribeToChannel() {\n      val authorizer = HttpAuthorizer(\"http://10.0.2.2:5000/pusher/auth/private\")\n      val options = PusherOptions().setAuthorizer(authorizer)\n      options.setCluster(\"PUSHER_APP_CLUSTER\")\n    \n      val pusher = Pusher(\"PUSHER_APP_KEY\", options)\n      pusher.connect()\n    \n      nameOfChannel = if (Singleton.getInstance().currentUser.count \u003e contactNumb) {\n        \"private-\" + Singleton.getInstance().currentUser.id + \"-\" + contactId\n      } else {\n        \"private-\" + contactId + \"-\" + Singleton.getInstance().currentUser.id\n      }\n    \n      Log.i(\"ChatRoom\", nameOfChannel)\n    \n      pusher.subscribePrivate(nameOfChannel, object : PrivateChannelEventListener {\n        override fun onEvent(channelName: String?, eventName: String?, data: String?) {\n          val obj = JSONObject(data)\n          val messageModel = MessageModel(obj.getString(\"message\"), obj.getString(\"sender_id\"))\n    \n          runOnUiThread {\n            mAdapter.add(messageModel)\n          }\n        }\n    \n        override fun onAuthenticationFailure(p0: String?, p1: Exception?) {}\n        override fun onSubscriptionSucceeded(p0: String?) {}\n      }, \"new-message\")\n    }\n```\n\n\u003e Replace the `PUSHER_APP_*`  keys with the values on your dashboard.\n\nThe code above allows a user to subscribe to a private channel. A private channel requires authorization like the presence channel. However, it does not expose a callback that is triggered when other users subscribe. \n\nNext method to be added is the `setupClickListener`. Paste the method to the same class as before:\n\n``` kotlin\n    private fun setupClickListener() {\n      sendButton.setOnClickListener{\n        if (editText.text.isNotEmpty()) {\n          val jsonObject = JSONObject()\n          jsonObject.put(\"message\",editText.text.toString())\n          jsonObject.put(\"channel_name\",nameOfChannel)\n          jsonObject.put(\"sender_id\",Singleton.getInstance().currentUser.id)\n          \n          val jsonBody = RequestBody.create(\n              MediaType.parse(\"application/json; charset=utf-8\"), \n              jsonObject.toString()\n          )\n    \n          RetrofitInstance.retrofit.sendMessage(jsonBody).enqueue(object: Callback\u003cString\u003e{\n            override fun onFailure(call: Call\u003cString\u003e?, t: Throwable?) {}\n            override fun onResponse(call: Call\u003cString\u003e?, response: Response\u003cString\u003e?) {}\n          })\n          \n          editText.text.clear()\n          hideKeyBoard()\n        }\n    \n      }\n    }\n```\n\nThe method above assigns a click listener to the floating action button to send the message to the server.  After the message is sent, we clear the text view and hide the keyboard. \n\nAdd a method to the same class for hiding the keyboard like this:\n\n``` kotlin\n    private fun hideKeyBoard() {\n      val imm = getSystemService(Activity.INPUT_METHOD_SERVICE) as InputMethodManager\n      var view = currentFocus\n      \n      if (view == null) {\n        view = View(this)\n      }\n      \n      imm.hideSoftInputFromWindow(view.windowToken, 0)\n    }\n```\n\nThat’s all for the application. Now you can run your application in Android Studio and you should see the application in action.\n\n\n\u003e Make sure the Node.js API we built earlier is running before running the Android application.\n\n\n![android-messenger-presence-demo](//images.ctfassets.net/1es3ne0caaid/mmdMFfq7WoYsk26cIKocs/486ce2b458e45a41cfeb01ab4441f3b4/android-messenger-presence-demo.gif)\n\n\n## Conclusion\n\nIn this article, you have been introduced yet again to some Pusher’s capabilities such as the private and presence channel. We learned how to authenticate our users for the various channels. We used these channels to implement a private chat between two persons and an online notification for a contact. \n\nThe source code to the application built in this article is available on [GitHub](https://github.com/neoighodaro/kotlin-messenger-app-with-online-presence-status).","metaTitle":"Build an Android messenger app with online presence","metaDescription":"Use Kotlin, Node.js and MongoDB to build an Android messaging app, featuring online presence. Users are able to log in and see who else is online."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"ffkxMi1XQA0KmKqOIEg2K","type":"Entry","createdAt":"2018-07-13T16:48:06.187Z","updatedAt":"2018-07-13T16:48:06.187Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Implement push notifications in Kotlin to create a food delivery app","url":"push-notifications-kotlin-food-delivery","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5XNUJSocQo6scKsiMs2Iko","type":"Entry","createdAt":"2018-02-14T13:34:52.032Z","updatedAt":"2018-02-14T13:34:52.032Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Graham Cox","url":"graham-cox","email":"graham@grahamcox.co.uk","twitter":"https://twitter.com/grahamcox82","github":"https://github.com/sazzer","guestWriter":true}}],"projectRepo":"https://github.com/sazzer/pusher-takeaway","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"mT8YjPehTagK0EqEauss8","type":"Entry","createdAt":"2018-02-12T15:08:44.153Z","updatedAt":"2018-02-26T12:31:12.711Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Maps","url":"maps","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}}],"reviewDate":"2018-07-12","description":"This tutorial uses Kotlin and React to create a full-featured food delivery application, with interfaces for admins and customers. Orders update in realtime, and the customer receives status updates with push notifications.","prerequisite":"You will need some experience of Kotlin, and familiarity with Android Studio. You will also need Node and Create React App installed.","content":"## Introduction\n\nMany business need to be very responsive to customer requests in order to be competitive. This works both ways - the business being informed immediately when a new order comes in, and the customer being informed as to the progress of their order.\n\nIn this article we are going to build a simple takeaway application, featuring a web app for the takeaway itself to use, and an Android app for customers. The web app will be updated automatically using Pusher Channels, and the Android app will receive notifications using Pusher Beams so that the customer and staff are always aware of everything going on.\n\n![kotlin-takeaway-demo](//images.ctfassets.net/1es3ne0caaid/35S4CfDJGMgYQayA8Gkumc/00577e26dd50023386f92baed7e4dc0f/kotlin-takeaway-demo.gif)\n\n## Prerequisites\n\nIn order to follow along, you will need some experience with the Kotlin programming language, which we are going to use for both the backend and frontend of our application, as well as with Android development. \n\nWe are going to be building the web UI that the takeaway uses with [Create React App](https://github.com/facebook/create-react-app), so ensure that this is installed, along with a recent version of Node.js.\n\nYou will also need appropriate IDEs. We suggest [IntelliJ IDEA](https://www.jetbrains.com/idea/) and [Android Studio](https://developer.android.com/studio/index.html). Finally, you will need a free [Pusher Account](https://dash.pusher.com/authenticate/register?ref=pn-landing-page). Sign up now if you haven’t already done so.\n\n## Overall design\n\nOur overall application will have a backend application, a web UI that is to be used by the takeaway company, and an Android application that is targeted to the customers. Customers will order food using the Android application, and the orders will appear in the web UI in real time using Pusher Channels. The takeaway company can then use the web UI to update progress on the orders, which will be sent directly to the customer’s device using Pusher Beams, keeping them updated on the progress of their order. The backend application then acts as orchestration between the two UIs.\n\n## Setting up your Pusher accounts\n\nWe are going to use two different Pusher accounts for this application - a Pusher Channels account for real time updates of the web UI, and a Pusher Beams account for notifying the customers of the status of their orders.\n\n### Registering for Pusher Channels\n\nIn order to follow along, you will need to create a free Pusher account. This is done by visiting the [Pusher dashboard](https://dashboard.pusher.com/) and logging in, creating a new account if needed. Next click on **Channels apps** on the sidebar, followed by **Create Channels app.** \n\n![kotlin-takeaway-channels](//images.ctfassets.net/1es3ne0caaid/4v3D4hmmhqqYCEKioYcaOG/7b9ca3510fc16cc1e8e62e59b04ad768/kotlin-takeaway-channels.png)\n\nFill out this dialog as needed and then click the **Create my app** button. Then click on **App Keys** and note down the credentials for later.\n\n![kotlin-takeaway-keys](//images.ctfassets.net/1es3ne0caaid/84MZCDrD4QY8WAyukqGSK/8e1885c09f71d1acf3c9f6b7bbd9274a/kotlin-takeaway-keys.png)\n\n### Registering for Pusher Beams\n\nIn order to use the Beams API and SDKs from Pusher, you also need to create a new Beams instance in the [Pusher Beta Dashboard](https://dash.pusher.com/authenticate/register?ref=pn-social-network-android).\n\nNext, on your **Overview** for your Beams instance, click **Open Quickstart** to add your Firebase Cloud Messaging (FCM) Server Key to the Beams Instance. \n\nAfter saving your FCM key, you can finish the Quickstart wizard by yourself to send your first push notification, or just continue as we’ll cover this below.\n\nIt’s important to make sure that you download and keep the `google-services.json` file from the Firebase Console as we are going to need this later on. \n\nOnce you have created your Beams instance, you will also need to note down your **Instance Id** and **Secret Key** from the Pusher Dashboard, found under the **CREDENTIALS** section of your Instance settings.\n\n## Backend application\n\nWe are going to build our backend application using Spring Boot and the Kotlin programming language, since this gives us a very simple way to get going whilst still working in the same language as the Android app.\n\nHead over to https://start.spring.io/ to create our project structure. We need to specify that we are building a **Gradle** project with **Kotlin** and Spring Boot **2.0.2** (or newer if available at the time of reading), and we need to include the “Web” component:\n\n![kotlin-takeaway-spring-initializer](//images.ctfassets.net/1es3ne0caaid/6gvlvTIkGk8au0u0ew2sS2/7cf5dff11c4c65e5f2a2836a69174bbc/kotlin-takeaway-spring-initializer.png)\n\nThe **Generate Project** button will give you a zip file containing our application structure. Unpack this somewhere. At any time, you can execute `./gradlew bootRun` to build and start your backend server running.\n\nFirstly though, we need to add some dependencies. Open up the `build.gradle` file and add the following to the `dependencies` section:\n\n``` gradle\n    compile 'com.pusher:pusher-http-java:1.0.0'\n    compile 'com.pusher:push-notifications-server-java:0.9.0'\n    runtime 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.2'\n```\n\nThe first of these is the Pusher library needed for triggering push notifications. The second is the Jackson module needed for serializing and deserializing Kotlin classes into JSON.\n\nNow, build the project. This will ensure that all of the dependencies are downloaded and made available and that everything compiles and builds correctly:\n\n```\n    $ ./gradlew build\n    Starting a Gradle Daemon (subsequent builds will be faster)\n    \n    \u003e Task :test\n    2018-04-27 07:34:27.548  INFO 43169 --- [       Thread-5] o.s.w.c.s.GenericWebApplicationContext   : Closing org.springframework.web.context.support.GenericWebApplicationContext@c1cf60f: startup date [Fri Apr 27 07:34:25 BST 2018]; root of context hierarchy\n    \n    \n    BUILD SUCCESSFUL in 17s\n    5 actionable tasks: 5 executed\n```\n\n### Required endpoints\n\nOur backend application will have endpoints for the customer and staff UI to work with. The customer endpoints are:\n\n- GET /menu-items\n- POST /orders\n\nWhilst the staff endpoints are:\n\n- GET /orders\n- PUT /orders/{id}/status\n- PUT /orders/{id}/items/{id}/status\n\nAn `orders` resource will contain a number of `menu-items` entries, with the status of them. The customer application will create a new order containing a simple list of these entries, and then the staff application will update the status of each item as is completed. Once they are all completed it will then update the order status to indicate that the food is out for delivery, and that it has been delivered.\n\nThe creation of an order will cause a Pusher Channels message to be sent out, containing the new order. Every time an order is updated will cause a Pusher Beams message to be sent out, containing the status of that order.\n\n### Listing menu items\n\nThe first thing we’ll do is to support listing of menu items. \n\nFirstly we want to actually represent our menu items. In this case we’ll go for something very simple - just an name and an ID - but in reality you could include whatever details are needed. Create a new class called `MenuItem` as follows:\n\n``` kotlin\n    data class MenuItem(\n            val id: String,\n            val name: String\n    )\n```\n\nThen we’ll create a class to represent our DAO layer for loading menu items. This will be entirely hard-coded in this application, but in reality would work in terms of a database. Create a new class called `MenuItemDao` as follows:\n\n``` kotlin\n    @Component\n    class MenuItemDao {\n        private val menuItems = listOf(\n                MenuItem(id = \"cheese_tomato_pizza\", name = \"Cheese \u0026 Tomato Pizza\"),\n                MenuItem(id = \"hot_spicy_pizza\", name = \"Hot \u0026 Spicy Pizza\"),\n                MenuItem(id = \"vegetarian_pizza\", name = \"Vegetarian Supreme Pizza\"),\n                MenuItem(id = \"garlic_bread\", name = \"Garlic Pizza Bread\"),\n                MenuItem(id = \"donner_kebab\", name = \"Donner Kebab\"),\n                MenuItem(id = \"chicken_tikka_kebab\", name = \"Chicken Tikka Kebab\"),\n                MenuItem(id = \"chicken_strips\", name = \"Chicken Strips (7)\"),\n                MenuItem(id = \"beef_burger\", name = \"Beef Burger\"),\n                MenuItem(id = \"cheeseburger\", name = \"Cheeseburger\")\n        )\n        \n        fun listMenuItems() = menuItems\n    }\n```\n\n\u003e **Note:** the `@Component` annotation means that Spring will automatically find this class and make it available for other classes to use.\n\nNow we’ll create a controller to list these menu items. Create a new class called `MenuItemController` as follows:\n\n``` kotlin\n    @RestController\n    @CrossOrigin\n    class MenuItemController(private val dao: MenuItemDao) {\n        @RequestMapping(\"/menu-items\")\n        fun getMenuItems() = dao.listMenuItems()\n    }\n```\n\n\u003e **Note:** the @CrossOrigin annotation makes this controller accessible from web applications running on a different host and/or port.\n\n### Managing orders\n\nThe next part is to manage the orders themselves. For this we want to be able to create, update and list the orders that are being processed.\n\nFirstly we will create a representation of the order itself. For this, create a class called `Order` as follows:\n\n``` kotlin\n    enum class OrderItemStatus {\n        PENDING,\n        STARTED,\n        FINISHED\n    }\n    \n    enum class OrderStatus {\n        PENDING,\n        STARTED,\n        COOKED,\n        OUT_FOR_DELIVERY,\n        DELIVERED\n    }\n    \n    data class OrderItem(\n            val id: String,\n            val menuItem: String,\n            var status: OrderItemStatus\n    )\n    \n    data class Order(\n            val id: String,\n            var status: OrderStatus,\n            val items: List\u003cOrderItem\u003e\n    )\n```\n\nYou’ll note that there are actually 4 classes here. These represent, between them, the entire order. A single order contains a status and a list of order items, where a single order item contains a menu item and the status of that order item. This allows us to update each order item independently of any others, including if one order contains multiples of the same menu item.\n\nNext, create a new class called `OrderDao`. This is going to represent our data storage for orders and order items.\n\n``` kotlin\n    @Component\n    class OrderDao {\n        private val orders = mutableListOf\u003cOrder\u003e()\n    \n        fun createNewOrder(items: List\u003cString\u003e) : Order {\n            val orderId = UUID.randomUUID().toString()\n            val orderItems = items.map { menuItem -\u003e\n                val orderItemId = UUID.randomUUID().toString()\n                OrderItem(id = orderItemId, menuItem = menuItem, status = OrderItemStatus.PENDING)\n            }\n    \n            val order = Order(id = orderId, items = orderItems, status = OrderStatus.PENDING)\n            orders.add(order)\n    \n            return order\n        }\n    \n        fun removeOrder(orderId: String) {\n            orders.removeIf { order -\u003e order.id == orderId }\n        }\n    \n        fun listOrders(): List\u003cOrder\u003e = orders\n    \n        fun getOrderById(id: String) = orders.first { order -\u003e order.id == id }\n    }\n```\n\nFinally, we want a controller that can be used to interact with orders. For this, create a new class called `OrderController` as follows:\n\n``` kotlin\n    @RestController\n    @RequestMapping(\"/orders\")\n    @CrossOrigin\n    class OrderController(private val orderDao: OrderDao) {\n        @RequestMapping(method = [RequestMethod.GET])\n        fun listOrders() = orderDao.listOrders()\n    \n        @RequestMapping(method = [RequestMethod.POST])\n        fun createOrder(@RequestBody items: List\u003cString\u003e): Order {\n            val order = orderDao.createNewOrder(items)\n            \n            // notifier call to go here\n            return order\n        }\n    \n        @RequestMapping(value = [\"/{order}/status\"], method = [RequestMethod.PUT])\n        fun updateOrderStatus(@PathVariable(\"order\") orderId: String,\n                              @RequestBody newStatus: OrderStatus): Order {\n            val order = orderDao.getOrderById(orderId)\n            order.status = newStatus\n    \n            if (order.status == OrderStatus.DELIVERED) {\n                orderDao.removeOrder(orderId)\n            }\n    \n            // notifier call to go here\n            return order\n        }\n    \n        @RequestMapping(value = [\"/{order}/items/{item}/status\"], method = [RequestMethod.PUT])\n        fun updateOrderItemStatus(@PathVariable(\"order\") orderId: String,\n                                  @PathVariable(\"item\") itemId: String,\n                                  @RequestBody newStatus: OrderItemStatus): Order {\n            val order = orderDao.getOrderById(orderId)\n            order.items.first { item -\u003e item.id == itemId }\n                    .status = newStatus\n    \n            if (order.items.all { item -\u003e item.status == OrderItemStatus.FINISHED }) {\n                order.status = OrderStatus.COOKED\n            } else if (order.items.any { item -\u003e item.status != OrderItemStatus.PENDING }) {\n                order.status = OrderStatus.STARTED\n            }\n    \n            // notifier call to go here\n            return order\n        }\n    }\n```\n\nThis has some business logic around when the status of an order or an order item is updated, in order to correctly transition the order through it’s lifecycle.\n\n\n\u003e **Note:** there is no error handling here. Actions such as providing an invalid ID or status will cause a bad error to be returned. In a real application this would need to be handled properly, but for this article we don’t need to worry about it.\n\n### Sending update notifications\n\nOnce we have our backend server able to manage our orders and order items, we need to keep all of our clients updated. This includes both the web UI for the restaurant and the Android UI for the customers. For this, we are going to be sending events using both Pusher Beams and Pusher Channels.\n\nFor this, we will first create a new class called `OrderNotifier` as follows:\n\n```\n    @Component\n    class OrderNotifier(\n            @Value(\"\\${pusher.beams.instance_id}\") beamsInstanceId: String,\n            @Value(\"\\${pusher.beams.secret}\") beamsSecretKey: String,\n            @Value(\"\\${pusher.channels.app_id}\") channelsAppId: String,\n            @Value(\"\\${pusher.channels.key}\") channelsKey: String,\n            @Value(\"\\${pusher.channels.secret}\") channelsSecret: String,\n            @Value(\"\\${pusher.channels.cluster}\") channelsCluster: String\n    ) {\n    \n        private val beams: PushNotifications = PushNotifications(beamsInstanceId, beamsSecretKey)\n        private val channels: Pusher = Pusher(channelsAppId, channelsKey, channelsSecret)\n    \n        init {\n            channels.setCluster(channelsCluster)\n            channels.setEncrypted(true)\n        }\n    \n        fun notify(order: Order) {\n            sendBeamsNotification(order)\n            sendChannelsNotification(order)\n        }\n    \n        private fun sendBeamsNotification(order: Order) {\n            val itemStatusCounts = order.items.groupBy { it.status }\n                    .mapValues { it.value.size }\n    \n            beams.publish(listOf(order.id),\n                    mapOf(\n                            \"fcm\" to mapOf(\n                                    \"data\" to mapOf(\n                                            \"order\" to order.id,\n                                            \"status\" to order.status.name,\n                                            \"itemsPending\" to (itemStatusCounts[OrderItemStatus.PENDING] ?: 0).toString(),\n                                            \"itemsStarted\" to (itemStatusCounts[OrderItemStatus.STARTED] ?: 0).toString(),\n                                            \"itemsFinished\" to (itemStatusCounts[OrderItemStatus.FINISHED] ?: 0).toString()\n                                    )\n                            )\n                    ))\n        }\n    \n        private fun sendChannelsNotification(order: Order) {\n            channels.trigger(\"orders\", \"order-update\", mapOf(\n                    \"order\" to order.id,\n                    \"status\" to order.status.name\n            ))\n        }\n    }\n```\n\nThen we will wire this up in our controller. Update the constructor definition of `OrderController` as follows:\n\n``` kotlin\n    class OrderController(private val orderDao: OrderDao, private val orderNotifier: OrderNotifier) {\n```\n\nThen add the following to each of the `createOrder`, `updateOrderStatus` and `updateOrderItemStatus` methods, immediately before the return:\n\n``` kotlin\n    orderNotifier.notify(order)\n```\n\nFinally, we need to actually configure our system. This is done in `application.properties`, as follows:\n\n```\n    pusher.channels.app_id=CHANNELS_APP_ID\n    pusher.channels.key=CHANNELS_KEY\n    pusher.channels.secret=CHANNELS_SECRET\n    pusher.channels.cluster=CHANNELS_CLUSTER\n    \n    pusher.beams.instance_id=BEAMS_INSTANCE_ID\n    pusher.beams.secret=BEAMS_SECRET\n```\n\n\u003e **Note:** remember to replace CHANNELS_APP_ID, CHANNELS_KEY, CHANNELS_SECRET, CHANNELS_CLUSTER, BEAMS_INSTANCE_ID and BEAMS_SECRET with the appropriate values obtained when you registered your Pusher application details.\n\nAt this point, our backend does everything necessary to support this application.\n\n\n## Takeaway web application\n\nThe next part is to build the web application that the takeaway will use to fulfil orders. We’re going to use Create React App for that. Firstly, we’ll create the webapp structure itself:\n\n```\n    $ create-react-app takeaway-webapp\n    $ cd takeaway-webapp\n    $ npm install --save axios pusher-js semantic-ui-react semantic-ui-css\n```\n\nThis also installs the modules for communicating with our backend - `axios` for making HTTP calls and `pusher-js` for receiving the Pusher Channels messages - as well as Semantic UI for our styling.\n\n\n\u003e **Note:** at the time of writing, this also installs babel/runtime version 7.0.0-beta.48, which has a serious bug in it. If this is still the case then you can fix this by running `npm install` `--``save @babel/runtime@7.0.0-beta.47`.\n\nFirstly we’ll create a component for rendering a single order. This is fully self-contained in this example, but in reality you might choose to separate out into smaller components. Create a new file called `src/Order.js` as follows:\n\n``` javascript\n    import React from 'react';\n    import { Segment, Table, Button } from 'semantic-ui-react'\n    import axios from 'axios';\n    function updateOrderItem(order, item, newStatus) {\n        axios.put(`http://localhost:8080/orders/${order.id}/items/${item.id}/status`,\n            newStatus,\n            {\n                transformRequest: (data) =\u003e `\"${data}\"`,\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n    }\n    function updateOrder(order, newStatus) {\n        axios.put(`http://localhost:8080/orders/${order.id}/status`,\n            newStatus,\n            {\n                transformRequest: (data) =\u003e `\"${data}\"`,\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n    }\n    function OrderItemButton({ order, item }) {\n        if (item.status === 'PENDING') {\n            return \u003cButton onClick={() =\u003e updateOrderItem(order, item, 'STARTED')}\u003eStart Work\u003c/Button\u003e;\n        } else if (item.status === 'STARTED') {\n            return \u003cButton onClick={() =\u003e updateOrderItem(order, item, 'FINISHED')}\u003eFinish Work\u003c/Button\u003e;\n        } else {\n            return \u003cdiv\u003eFinished\u003c/div\u003e;\n        }\n    }\n    function OrderButton({ order }) {\n        if (order.status === 'COOKED') {\n            return \u003cButton onClick={() =\u003e updateOrder(order, 'OUT_FOR_DELIVERY')}\u003eOut for Delivery\u003c/Button\u003e;\n        } else if (order.status === 'OUT_FOR_DELIVERY') {\n            return \u003cButton onClick={() =\u003e updateOrder(order, 'DELIVERED')}\u003eDelivered\u003c/Button\u003e;\n        } else {\n            return null;\n        }\n    }\n    export default function Order({ order }) {\n        const items = order.items.map((item) =\u003e (\n            \u003cTable.Row key={item.id}\u003e\n                \u003cTable.Cell\u003e\n                    {item.name}\n                \u003c/Table.Cell\u003e\n                \u003cTable.Cell\u003e\n                    \u003cOrderItemButton order={order} item={item} /\u003e\n                \u003c/Table.Cell\u003e\n            \u003c/Table.Row\u003e\n        ));\n        return (\n            \u003cSegment vertical\u003e\n                \u003cTable striped\u003e\n                    \u003cTable.Body\u003e\n                        {items}\n                    \u003c/Table.Body\u003e\n                \u003c/Table\u003e\n                \u003cOrderButton order={order} /\u003e\n            \u003c/Segment\u003e\n        );\n    }\n```\n\n\u003e **Note:** this makes calls to `http://localhost:8080`. In reality you will need to replace this with the real URL to your backend service.\n\nThis will render a table containing all of the order items, each of which has a button next to it to update the status of that item. There will also be a button, if applicable, below the table to update the delivery status of the entire order.\n\nNext we’ll create a simple component to render the complete list of orders. Create `src/OrdersList.js` as follows:\n\n``` javascript\n    import React from 'react';\n    import Order from './Order';\n    export default ({ orders }) =\u003e {\n        const orderElements = orders.map((order) =\u003e \u003cOrder order={order} key={order.id} /\u003e);\n        return (\n            \u003cdiv\u003e\n                {orderElements}\n            \u003c/div\u003e\n        );\n    };\n```\n\nNow we need to actually connect this to our APIs. For this we will create a file called `src/ConnectedOrdersList.js` - so called because it’s not a UI component but a connecting component that makes API calls instead - as follows:\n\n``` javascript\n    import React from 'react';\n    import axios from 'axios';\n    import Pusher from 'pusher-js';\n    import OrdersList from './OrdersList';\n    const socket = new Pusher('\u003cCHANNELS__KEY\u003e', {\n        cluster: '\u003cCHANNELS_CLUSTER\u003e',\n    });\n    export default class ConnectedOrdersList extends React.Component {\n        state = {\n            orders: []\n        };\n        render() {\n            return (\n                \u003cdiv className=\"ui container\"\u003e\n                    \u003cOrdersList orders={this.state.orders} /\u003e\n                \u003c/div\u003e\n            );\n        }\n        componentDidMount() {\n            this._fetchOrders();\n            socket.subscribe('orders')\n                .bind('order-update', () =\u003e this._fetchOrders());\n        }\n        _fetchOrders() {\n            const ordersPromise = axios.get('http://localhost:8080/orders')\n            const menuItemsPromise = axios.get('http://localhost:8080/menu-items');\n            Promise.all([ordersPromise, menuItemsPromise])\n                .then((values) =\u003e {\n                    const menuItems = {};\n                    values[1].data.forEach((entry) =\u003e {\n                        menuItems[entry.id] = entry.name;\n                    });\n                    const orders = values[0].data.map((order) =\u003e {\n                        return {\n                            id: order.id,\n                            status: order.status,\n                            items: order.items.map((item) =\u003e {\n                                return {\n                                    id: item.id,\n                                    menuItem: item.menuItem,\n                                    status: item.status,\n                                    name: menuItems[item.menuItem]\n                                };\n                            })\n                        };\n                    });\n                    this.setState({\n                        orders: orders\n                    });\n                });\n        }\n    }\n```\n\n\u003e **Note:** ensure you replace \u003cCHANNELS_KEY\u003e and \u003cCHANNELS_CLUSTER\u003e with the same values as used in the backend application.\n\nThis contains a method that will make two API calls - one each to our */menu-items* and */orders* endpoints - and combine the results together. Then it will update the component state with this result, which will cause it to render our `Orders` component with the resultant list. We also register to listen to the Pusher events that we broadcast earlier so that every time we get an indication that the orders have changed we can go and refresh our list.\n\nFinally, replace the contents of `src/App.js` with the following:\n\n``` javascript\n    import React, { Component } from 'react';\n    import 'semantic-ui-css/semantic.min.css';\n    import OrdersList from './ConnectedOrdersList';\n    class App extends Component {\n      render() {\n        return (\n          \u003cdiv className=\"App\"\u003e\n            \u003cOrdersList /\u003e\n          \u003c/div\u003e\n        );\n      }\n    }\n    export default App;\n```\n\nThis renders our `ConnectedOrdersList` component that we’ve just defined as the main body of our application.\n\nAt this point, we have a fully functional web UI that the takeaway can use to manage the orders:\n\n![kotlin-takeaway-stage-1](//images.ctfassets.net/1es3ne0caaid/3mmmDudOCkiyGioUYQkC0G/28060805deca056afa072587e139ea6b/kotlin-takeaway-stage-1.gif)\n\n## Building the customers application\n\nThe customers Android application will also be built in Kotlin, using Android Studio. To start, open up Android Studio and create a new project, entering some appropriate details and ensuring that you select the **Include Kotlin support** option. Note that the **Package name** must match that specified when you set up the FCM Server Key earlier.\n\n![kotlin-takeaway-create-android](//images.ctfassets.net/1es3ne0caaid/6ByUvVg2xGQW0ou2y0mGGO/30ad4e43657e16edd4e92d18d4f81939/kotlin-takeaway-create-android.png)\n\nThen on the next screen, ensure that you select support for **Phone and Tablet** using at least API 23:\n\n![kotlin-takeaway-target-devices](//images.ctfassets.net/1es3ne0caaid/5x42W6wam4M2wIoIMcSCy4/aca4503d566684febc2631e1a7fdbacc/kotlin-takeaway-target-devices.png)\n\nEnsure that an **Google Maps Activity** is selected:\n\n![kotlin-ridesharing-create-android-7](//images.ctfassets.net/1es3ne0caaid/6f2xDO0sTu6AOoguysgYG6/0df9b3e7bf31f00431f60e70f353db1f/kotlin-ridesharing-create-android-7.png)\n\nAnd set the **Activity Name** to “MainActivity” and **Layout Name** to “activity_main”:\n\n![kotlin-takeaway-main](//images.ctfassets.net/1es3ne0caaid/1nMTsf3zT6SG2EomEWau8O/931743f110908b66dc781f5c633d8106/kotlin-takeaway-main.png)\n\nNext we need to add some dependencies to our project to support Pusher. Add the following to the project level `build.gradle`, in the existing `dependencies` section:\n\n``` gradle\n    classpath 'com.google.gms:google-services:3.2.1'\n```\n\nThen add the following to the `dependencies` section of the app level `build.gradle`:\n\n``` gradle\n    implementation 'com.google.firebase:firebase-messaging:15.0.0'\n    implementation 'com.pusher:push-notifications-android:0.10.0'\n    \n    compile 'com.loopj.android:android-async-http:1.4.9'\n    compile 'com.google.code.gson:gson:2.2.4'\n```\n\nAnd this to bottom of the app level `build.gradle`:\n\n``` gradle\n    apply plugin: 'com.google.gms.google-services'\n```\n\nNext, copy the `google-services.json` file we downloaded earlier into the `app` directory under your project. We are now ready to actually develop our specific application using these dependencies.\n\nFinally, we need to add some permissions to our application. Open up the `AndroidManifest.xml` file and add the following immediately before the `\u003capplication\u003e` tag:\n\n``` xml\n    \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n```\n\n### Displaying the menu items\n\nThe main screen that we are going to show is a list of menu items, allowing the user to place an order. \n\nFirstly, we need our main application layout. For this, update `app/res/layout/activity_main.xml` as follows:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"vertical\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:background=\"#fff\"\u003e\n    \n        \u003cScrollView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\u003e\n    \n            \u003cLinearLayout\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:orientation=\"vertical\"\u003e\n    \n                \u003cListView\n                    android:id=\"@+id/records_view\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"500dp\"\n                    android:layout_marginTop=\"16dp\"\u003e\n    \n                \u003c/ListView\u003e\n            \u003c/LinearLayout\u003e\n        \u003c/ScrollView\u003e\n    \n        \u003cButton\n            android:id=\"@+id/button2\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Place Order\" /\u003e\n    \n    \u003c/LinearLayout\u003e\n```\n\n\u003e **Note:** in order to paste this snippet in, the **Text** tab at the bottom of the screen should be selected.\n\n\n\u003e **Note:** sometimes, copy and paste of the entire file into the **Text** tab will cause a blank line at the very top. This is invalid XML and needs to be removed.\n\nThis gives us a list to show our menu items, and a button with which to place the order.\n\nNow we need a class to represent each entry in this list. Create a new class called `MenuItem` as follows:\n\n``` kotlin\n    data class MenuItem(\n            val id: String,\n            val name: String\n    )\n```\n\nYou’ll notice that this is identical to the `MenuItem` class on the backend. This is unsurprising since it represents the exact same data.\n\nNext we need a layout to represent a single row in our list. For this, create a new layout resource called `app/res/layout/menuitem.xml` as follows:\n\n``` xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:orientation=\"horizontal\" android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\u003e\n        \u003cTextView\n            android:id=\"@+id/item_name\"\n            android:textColor=\"#000\"\n            android:fontFamily=\"serif\"\n            android:layout_height=\"wrap_content\"\n            android:layout_width=\"match_parent\"\n            android:layout_weight=\"1\"\n            android:text=\"Name\"/\u003e\n        \u003cSpinner\n            android:id=\"@+id/item_count\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"3\" /\u003e\n    \u003c/LinearLayout\u003e\n```\n\nThis has two entries in it - an item name and a spinner. The spinner control is effectively a dropdown, and will be used to select how many of each item to order.\n\nNow we need to be able to render this new layout for each of our menu items. For this, create a new class called `MenuItemAdapter` as follows:\n\n``` kotlin\n    class MenuItemAdapter(private val recordContext: Context) : BaseAdapter() {\n        var records: List\u003cMenuItem\u003e = listOf()\n            set(value) {\n                field = value\n                notifyDataSetChanged()\n            }\n    \n        override fun getView(i: Int, view: View?, viewGroup: ViewGroup): View {\n            val theView = if (view == null) {\n                val recordInflator = recordContext.getSystemService(Activity.LAYOUT_INFLATER_SERVICE) as LayoutInflater\n    \n                val theView = recordInflator.inflate(R.layout.menuitem, null)\n                val newMenuItemViewHolder = MenuItemViewHolder(\n                        theView.findViewById(R.id.item_name),\n                        theView.findViewById(R.id.item_count)\n                )\n                val countAdapter = ArrayAdapter(\n                        recordContext,\n                        android.R.layout.simple_spinner_dropdown_item,\n                        IntRange(0, 10).toList().toTypedArray()\n                )\n                newMenuItemViewHolder.count.adapter = countAdapter\n                theView.tag = newMenuItemViewHolder\n    \n                theView\n            } else {\n                view\n            }\n    \n            val menuItemViewHolder = theView.tag as MenuItemViewHolder\n    \n            val menuItem = getItem(i)\n            menuItemViewHolder.name.text = menuItem.name\n            menuItemViewHolder.id = menuItem.id\n    \n            return theView\n        }\n    \n        override fun getItem(i: Int) = records[i]\n    \n        override fun getItemId(i: Int) = 1L\n    \n        override fun getCount() = records.size\n    }\n    \n    data class MenuItemViewHolder(\n            val name: TextView,\n            val count: Spinner\n    ) {\n        var id: String? = null\n    }\n```\n\nAmongst other things, this includes a hard-coded list of values for the spinner control - allowing the user to order up to 10 of any single item.\n\nFinally we just need to get the data into this list. Update `MainActivity` by adding the following field to the class:\n\n``` kotlin\n    private lateinit var recordAdapter: MenuItemAdapter\n```\n\nThen initialize this by adding the following to our `MainActivity` class:\n\n``` kotlin\n    override fun onResume() {\n        super.onResume()\n        recordAdapter = MenuItemAdapter(this)\n        val recordsView = findViewById\u003cView\u003e(R.id.records_view) as ListView\n        recordsView.setAdapter(recordAdapter)\n    \n        refreshMenuItems()\n    }\n```\n\nNext we just need to implement the `refreshMenuItems` method, as follows:\n\n``` kotlin\n    private fun refreshMenuItems() {\n        val client = AsyncHttpClient()\n        client.get(\"http://10.0.2.2:8080/menu-items\", object : JsonHttpResponseHandler() {\n            override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, response: JSONArray) {\n                super.onSuccess(statusCode, headers, response)\n                runOnUiThread {\n                    val menuItems = IntRange(0, response.length() - 1)\n                            .map { index -\u003e response.getJSONObject(index) }\n                            .map { obj -\u003e\n                                MenuItem(\n                                        id = obj.getString(\"id\"),\n                                        name = obj.getString(\"name\")\n                                )\n                            }\n    \n                    recordAdapter.records = menuItems\n                }\n            }\n        })\n    }\n```\n\n\u003e **Note:** The import for `Header` should be `cz.msebera.android.httpclient.Header`\n\n\n\u003e **Note:** 10.0.2.2 is the IP Address that the host machine appears when running inside the Android emulator. In reality you will want to use the real host of your service.\n\nAt this point we can start up the Android application and see all of the menu choices:\n\n![kotlin-takeaway-stage-2](//images.ctfassets.net/1es3ne0caaid/3qX7X1G7aEAsASgSiU0KSI/d873af999efe1871cb98b02cf4383828/kotlin-takeaway-stage-2.png)\n\n### Placing an order\n\nNow that we can see the list of items that can be ordered, we need to be able to place an order.\n\nFirstly, we need to be able to get the list of items that have been selected to be ordered. This will be coming out of the `MenuItemAdapter` class, as this acts as the interface to the list of items.\n\nFirstly, create a couple of fields in this class as follows:\n\n``` kotlin\n    private val currentOrder = mutableMapOf\u003cString, Int\u003e()\n    \n    val order: List\u003cString\u003e\n        get() = currentOrder.filterValues { it \u003e 0 }\n                .map { orderItem -\u003e List(orderItem.value) { orderItem.key } }\n                .flatten()\n```\n\nThe first of these is a private map that will act as a mapping between each item and the number of that item to order. The second is a computed property that returns a list of the items to order, with one entry for each item. This means that if we order three pizzas, there will be three entries in this list.\n\nNext, add a handler towards the bottom of the `getView` method, immediately before the return statement, to update our map of orders:\n\n``` kotlin\n    menuItemViewHolder.count.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {\n        override fun onNothingSelected(parent: AdapterView\u003c*\u003e?) {\n            currentOrder.remove(menuItem.id)\n        }\n    \n        override fun onItemSelected(parent: AdapterView\u003c*\u003e?, view: View?, position: Int, id: Long) {\n            currentOrder[menuItem.id] = position\n        }\n    }\n```\n\nThis is triggered every time a new value is selected for any item, and will cause our map to be updated to match.\n\nNow we can use this to actually make the HTTP call to place our order. For this we need to create a new method called `placeOrder` in the `MainActivity` class, as follows:\n\n``` kotlin\n    fun placeOrder(view: View) {\n        val items = recordAdapter.order\n        if (items.isEmpty()) {\n            Toast.makeText(this, \"No items selected\", Toast.LENGTH_LONG)\n                    .show()\n        } else {\n    \n            val request = JSONArray(items)\n    \n            val client = AsyncHttpClient()\n            client.post(applicationContext, \"http://10.0.2.2:8080/orders\", StringEntity(request.toString()),\n                    \"application/json\", object : JsonHttpResponseHandler() {\n    \n                override fun onSuccess(statusCode: Int, headers: Array\u003cout Header\u003e, response: JSONObject) {\n                    runOnUiThread {\n                        Toast.makeText(this@MainActivity, \"Order placed\", Toast.LENGTH_LONG)\n                                .show()\n                    }\n                }\n            })\n        }\n    }\n```\n\n\u003e **Note:** the “this@MainActivity” syntax means to get the “this” value that refers to the “MainActivity” class, as opposed to the “JsonHttpResponseHandler” inner class that we’re actually executing inside.\n\nThen we can update our `activity_main.xml` file so that the Button element reads as follows:\n\n``` xml\n    \u003cButton\n        android:id=\"@+id/button2\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Place Order\"\n        android:onClick=\"placeOrder\" /\u003e\n```\n\nThis now does everything necessary to place an order on the server, including displaying an error message if the user did not select any items to order when pressing the button.\n\n### Receiving order update notifications\n\nNow that we can place orders, we want to be notified as to the progress of the order. This will include a progress bar for the part of the process where the order is being prepared, and then simple strings to indicate that the order is out for delivery.\n\nThe first thing we need to do is enable support for receiving push notifications for our events. Add the following to the end of the `onCreate` method of `MainActivity`:\n\n``` kotlin\n    PushNotifications.start(getApplicationContext(), \"BEAMS_INSTANCE_ID\")\n```\n\n\u003e **Note:** remember to replace BEAMS_INSTANCE_ID with the appropriate value obtained when you registered your Pusher Beams application details.\n\nNext we want to register to receive notifications for our order. This is done by adding the following in to the `onSuccess` callback method inside the `placeOrder` method:\n\n``` kotlin\n    val id = response.getString(\"id\")\n    PushNotifications.subscribe(id)\n```\n\nAt this point, every time the order changes, the Android app will receive a push notification informing of the changes. We can now display android notifications to inform the user of the current status. Create a new method called `receiveNotification` in the `MainActivity` class as follows:\n\n``` kotlin\n    private fun receiveNotifications() {\n    \n        val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n    \n        if (Build.VERSION.SDK_INT \u003e= Build.VERSION_CODES.O) {\n            val channel = NotificationChannel(\"takeaway\",\n                    \"Pusher Takeaway\",\n                    NotificationManager.IMPORTANCE_DEFAULT)\n            notificationManager.createNotificationChannel(channel)\n        }\n    \n        PushNotifications.setOnMessageReceivedListenerForVisibleActivity(this, object : PushNotificationReceivedListener {\n            override fun onMessageReceived(remoteMessage: RemoteMessage) {\n                Log.i(\"Notification\", remoteMessage.data.toString())\n    \n                val pending = remoteMessage.data[\"itemsPending\"]?.toInt() ?: 0\n                val started = remoteMessage.data[\"itemsStarted\"]?.toInt() ?: 0\n                val finished = remoteMessage.data[\"itemsFinished\"]?.toInt() ?: 0\n    \n                val total = pending + started + finished\n    \n                val notification = when(remoteMessage.data[\"status\"]) {\n                    \"STARTED\" -\u003e {\n                        NotificationCompat.Builder(applicationContext, \"takeaway\")\n                                .setSmallIcon(R.mipmap.ic_launcher)\n                                .setContentTitle(\"Your order\")\n                                .setContentText(\"Your order is being cooked\")\n                                .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)\n                                .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n                                .setProgress(total, finished, finished == 0)\n                    }\n                    \"COOKED\" -\u003e {\n                        NotificationCompat.Builder(applicationContext, \"takeaway\")\n                                .setSmallIcon(R.mipmap.ic_launcher)\n                                .setContentTitle(\"Your order\")\n                                .setContentText(\"Your order is ready\")\n                                .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)\n                                .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n                                .setProgress(total, total, false)\n                    }\n                    \"OUT_FOR_DELIVERY\" -\u003e {\n                        NotificationCompat.Builder(applicationContext, \"takeaway\")\n                                .setSmallIcon(R.mipmap.ic_launcher)\n                                .setContentTitle(\"Your order\")\n                                .setContentText(\"Your order is out for delivery\")\n                                .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)\n                                .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n                    }\n                    \"DELIVERED\" -\u003e {\n                        NotificationCompat.Builder(applicationContext, \"takeaway\")\n                                .setSmallIcon(R.mipmap.ic_launcher)\n                                .setContentTitle(\"Your order\")\n                                .setContentText(\"Your order is outside\")\n                                .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)\n                                .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n                    }\n                    else -\u003e null\n                }\n    \n                notification?.let {\n                    notificationManager.notify(0, it.build())\n                }\n            }\n        })\n    }\n```\n\n\u003e **Note:**  if it is ambiguous, the NotificationCompat import should be for android.support.v4.app.NotificationCompat.\n\nAnd then call this new method from the `onResume` method:\n\n``` kotlin\n    receiveNotifications()\n```\n\nThis gives everything for the customer to keep updated with their order. Ensure that the backend and web UI are running, and then we can test it all out together.\n\n![kotlin-takeaway-demo](//images.ctfassets.net/1es3ne0caaid/35S4CfDJGMgYQayA8Gkumc/00577e26dd50023386f92baed7e4dc0f/kotlin-takeaway-demo.gif)\n\n## Conclusion\n\nThis article has hopefully shown how easy it can be to integrate Pusher technologies into your application to give real time updates to both the customer and staff user interfaces. Even though we use two totally different Pusher technologies - Pusher Channels and Pusher Beams - they work seamlessly together to give a full featured experience.\n\nThe full source code for this article is available on [GitHub](https://github.com/sazzer/pusher-takeaway). Why not try extending it support more functionality - for example, multiple restaurants.","metaTitle":"Use push notifications to build a food delivery app","metaDescription":"Using Kotlin, React and realtime technologies, build a food delivery application. The app features realtime updates and push notifications."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3HzlrLfzbqicQUwSmy602E","type":"Entry","createdAt":"2018-07-12T21:17:39.261Z","updatedAt":"2018-07-12T21:17:39.261Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an Android poll app with push notifications","url":"android-poll-push-notifications","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/kotlin-python-poll","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6N8l3o0yD6QK2ooI2ME8wW","type":"Entry","createdAt":"2018-02-12T15:09:06.190Z","updatedAt":"2018-02-26T12:31:10.478Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Live Polls","url":"live-polls","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}}],"reviewDate":"2018-07-09","description":"Build an Android app in Kotlin, with a backend in Python. Users are able to vote, and see other votes displayed in realtime. They will also receive push notifications when a new vote is cast.","prerequisite":"You will need Android Studio 3+ and virtualenv installed on your machine. Basic knowledge of Android development is required.","content":"The web has become so dynamic that it's weird to have to refresh anything anymore. We expect instant feedback from whatever application we are using and whatever action we are taking on the application.\n\nPolls adopt realtime technologies to give the owners live updates. This has become a major feature in top social media platforms and it is most essential when you need to perform quick surveys. Popular services like Twitter have adopted polls as a part of their services and it works well to gather user sentiments and thoughts.\n\nIn this tutorial, you will learn how to build a realtime poll. We will be using Kotlin, Flask and Pusher Channels. By the time we are done, we will have an application that looks like this:\n\n![pythonball-demo](//images.ctfassets.net/1es3ne0caaid/3R4OATvRi8qEQoqM0mOU24/58776a5c2a0aeb0c3dab6a36358eb149/pythonball-demo.gif)\n\n\n## Prerequisites\n\nIn other to follow this tutorial, you need the following:\n\n\n- Android Studio. Version \u003e= 3.x is recommended. Download [here](https://developer.android.com/studio/).\n- [Flask](http://flask.pocoo.org/) - you will be guided on how to install it in the post.\n- [Virtualenv](#) installed on your machine.\n- Introductory knowledge of Kotlin. Here are some [resources](https://kotlinlang.org/docs/resources.html).\n- [Pusher Beams](https://dash.pusher.com/beams) and [Pusher Channels](https://dashboard.pusher.com/) instance.\n\n\n\n## Setting up your Android application\n\nCreate a new project and follow the wizard to set it up. Name your app `RealtimePolls`. Enter your company‘s domain name. The company domain affects the package name. We will set the domain to `com.example` and the package name to `com.example.realtimepolls`. \n\nChoose your minimum SDK. API 19 (Android 4.4) is just fine. Continue with the `EmptyActivity` template chosen for you, and finish the wizard.\n\nLet’s stop here for now and set up our Pusher Beams and Channels application.\n\n\n## Creating your Beams and Channels instance\n\n### Setting up Pusher Channels\n\nLog in to your [Pusher dashboard](https://dashboard.pusher.com). If you don’t have an account, create one. Your dashboard should look like this:\n\n![pythonball-new-channels-app](//images.ctfassets.net/1es3ne0caaid/5zBwuAVz6oksgasG0KICwg/7ba6bb2a397765eb2bcfca10c213b7f5/pythonball-new-channels-app.png)\n\nCreate a new Channels app. You can easily do this by clicking the big **Create new Channels app** card at the bottom right. When you create a new app, you are provided with keys. Keep them safe as you will soon need them.\n\n### Getting your FCM key\n\nBefore you can start using Beams, you need an FCM key and a google-services file because Beams relies on Firebase. Go to your [Firebase console](https://console.firebase.google.com/u/0/) and create a new project.\n\nWhen you get to the console, click the **Add project** card to initialize the app creation wizard. Add the name of your project. Read and accept the terms of conditions. After this, you will be directed to the project overview screen. Choose the **Add Firebase to your Android app** option. The next screen will require the package name of your app.\n\nAn easy way to get the package name of your app is from your `AndroidManifest.xml` file. Check the `\u003cmanifest\u003e` tag and copy the value of the `package` attribute. Another place you can find this is your app-module `build.gradle` file. Look out for the `applicationId` value. When you enter the package name and click **Register app.** \n\nNext, download your `google-services.json` file. After you have downloaded the file, you can skip the rest of the process. Add the downloaded file to the app folder of your app `RealtimePolls/app`.\n\n![pythonball-google-services-json](//images.ctfassets.net/1es3ne0caaid/7pwITIZFiEMOQ8WeskYkac/c1c4f8924c16a0243d46dff5471ab371/pythonball-google-services-json.png)\n\nNext, go to your Firebase project settings, under the Cloud messaging tab, copy your server key.\n\n### Setting up Pusher Beams\n\nNext, log in to the new [Pusher dashboard](https://dash.pusher.com/), in here we will create a Pusher Beams instance. You should sign up if you don’t have an account yet. Click on the **Beams** button on the sidebar then click **Create**, this will launch a pop up to **Create a new Beams instance** and give it a name.\n\n![pythonball-new-beams](//images.ctfassets.net/1es3ne0caaid/3P9eqXnJi8swOEoykKA40O/f21b1d5b30b63508509218a3f8210ac1/pythonball-new-beams.png)\n\nAs soon as you create the instance, you will be presented with a quickstart guide. Select the **ANDROID** quickstart\n\n![pythonball-beams-quickstart](//images.ctfassets.net/1es3ne0caaid/BafUtlnfiKw4aEKoOsoKi/aade9a902389f94ee252b21823879eb4/pythonball-beams-quickstart.png)\n\nThe next screen requires the FCM key you copied earlier. After you add the FCM key, you can exit the quickstart guide.\n\n\n## Building the Android application\n\n### Adding our dependencies\n\nReopen our project in Android Studio. The next thing we need to do is install the necessary dependencies for our app. Open your app-module `build.gradle` file and add these:\n\n``` gradle\n    // File: ./app/build.gradle\n    dependencies {\n        // other dependencies...\n        implementation 'com.pusher:pusher-java-client:1.5.0'\n        implementation 'com.google.firebase:firebase-messaging:17.0.0'\n        implementation 'com.pusher:push-notifications-android:0.10.0'\n        implementation 'com.pusher:pusher-java-client:1.5.0'    \n        implementation \"com.squareup.retrofit2:retrofit:2.4.0\"\n        implementation \"com.squareup.retrofit2:converter-scalars:2.4.0\"\n        implementation \"com.squareup.retrofit2:converter-gson:2.3.0\"\n    }\n    apply plugin: 'com.google.gms.google-services'\n```\nAnd in the project `build.gradle` file add this:\n\n``` gradle\n    // File: ./build.gradle\n    dependencies {\n        // add other dependencies...\n        classpath 'com.google.gms:google-services:4.0.0'\n    }\n```\n\nAfter adding the dependencies, sync your Gradle files so that the dependencies are imported. \n\n### Developing the logic for our Android application\n\nPusher Beams makes use of a service to notify the app when there is a remote message. Create a new service named `NotificationsMessagingService` and paste this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/realtimepolls/NotificationsMessagingService.kt\n    import android.app.NotificationChannel\n    import android.app.NotificationManager\n    import android.app.PendingIntent\n    import android.content.Intent\n    import android.os.Build\n    import android.support.v4.app.NotificationCompat\n    import android.support.v4.app.NotificationManagerCompat\n    import com.google.firebase.messaging.RemoteMessage\n    import com.pusher.pushnotifications.fcm.MessagingService\n    \n    class NotificationsMessagingService : MessagingService() {\n    \n        override fun onMessageReceived(remoteMessage: RemoteMessage) {\n            val notificationId = 10\n            val channelId  = \"polls\"\n            lateinit var channel:NotificationChannel\n            val intent = Intent(this, MainActivity::class.java)\n            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK\n            val pendingIntent = PendingIntent.getActivity(this, 0, intent, 0)\n            val mBuilder = NotificationCompat.Builder(this, channelId)\n                    .setSmallIcon(R.mipmap.ic_launcher)\n                    .setContentTitle(remoteMessage.notification!!.title!!)\n                    .setContentText(remoteMessage.notification!!.body!!)\n                    .setContentIntent(pendingIntent)\n                    .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n                    .setAutoCancel(true)\n    \n            if (Build.VERSION.SDK_INT \u003e= Build.VERSION_CODES.O) {\n                val notificationManager = applicationContext.getSystemService(NotificationManager::class.java)\n                val name = getString(R.string.channel_name)\n                val description = getString(R.string.channel_description)\n                val importance = NotificationManager.IMPORTANCE_DEFAULT\n                channel = NotificationChannel(\"world-cup\", name, importance)\n                channel.description = description\n                notificationManager!!.createNotificationChannel(channel)\n                notificationManager.notify(notificationId, mBuilder.build())\n    \n            } else {\n                val notificationManager =  NotificationManagerCompat.from(this)\n                notificationManager.notify(notificationId, mBuilder.build())\n            }\n        }\n    }\n```\n\nThe method `onMessageReceived` is called when a push notification is received on the device. The message received is then used to display a notification for the user. \n\nAdd the following to your `string.xml` file:\n\n``` xml\n    // File: ./app/src/main/res/values/strings.xml\n    \u003cstring name=\"channel_name\"\u003ePolls\u003c/string\u003e\n    \u003cstring name=\"channel_description\"\u003eTo receive updates about polls\u003c/string\u003e\n```\n\nAdd the service to your `AndroidManifest.xml` file like so:\n\n``` xml\n    // File: ./app/src/main/AndroidManifest.xml\n    \u003capplication\n              ...\u003e\n    \n        [...]\n        \n        \u003cservice android:name=\".NotificationsMessagingService\"\u003e\n            \u003cintent-filter android:priority=\"1\"\u003e\n                \u003caction android:name=\"com.google.firebase.MESSAGING_EVENT\" /\u003e\n            \u003c/intent-filter\u003e\n        \u003c/service\u003e\n        \n    \u003c/application\u003e\n```\n\nCreate an interface named `ApiService` and paste the following:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/realtimepolls/ApiService.kt\n    import okhttp3.RequestBody\n    import retrofit2.Call\n    import retrofit2.http.Body\n    import retrofit2.http.GET\n    import retrofit2.http.POST\n    \n    interface ApiService {\n    \n        @GET(\"/generate\")\n        fun generatePolls(): Call\u003cString\u003e\n    \n        @POST(\"/update\")\n        fun updatePolls(@Body  body: RequestBody):Call\u003cString\u003e\n    \n    }\n```\n\nThis interface contains the endpoints to be accessed during the course of this tutorial. There are two endpoints, the first one is to get the question and options from the server while the second is to send the option selected by the user to the server.\n\nSince internet connection is required for some functionalities, you need to request for the internet permissions. Add this to your `AndroidManifest.xml` file:\n\n``` xml\n    // File: ./app/src/main/AndroidManifest.xml\n    \u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        package=\"com.example.realtimepolls\"\u003e\n    \n        \u003cuses-permission android:name=\"android.permission.INTERNET\"/\u003e\n        \n        [...]\n    \n    \u003c/manifest\u003e\n```\n\nNext, let’s design the layout of the app. The app will contain radio buttons so as to ensure that only one option is chosen. Open your `activity_main.xml` file and paste this:\n\n``` xml\n    // File: ./app/src/main/res/layout/activity_main.xml\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003cScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\u003e\n    \n        \u003candroid.support.constraint.ConstraintLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            tools:context=\".MainActivity\"\u003e\n    \n            \u003cTextView\n                android:id=\"@+id/poll_title\"\n                android:layout_width=\"0dp\"\n                android:layout_height=\"wrap_content\"\n                android:layout_margin=\"10dp\"\n                android:textSize=\"20sp\"\n                app:layout_constraintLeft_toLeftOf=\"parent\"\n                app:layout_constraintRight_toRightOf=\"parent\"\n                app:layout_constraintTop_toTopOf=\"parent\" /\u003e\n    \n            \u003cRadioGroup xmlns:android=\"http://schemas.android.com/apk/res/android\"\n                android:id=\"@+id/radio_group\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_margin=\"20dp\"\n                android:orientation=\"vertical\"\n                app:layout_constraintLeft_toLeftOf=\"parent\"\n                app:layout_constraintTop_toBottomOf=\"@id/poll_title\"\u003e\n    \n                \u003cRadioButton\n                    android:id=\"@+id/choice_1\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\" /\u003e\n    \n                \u003candroid.support.v4.widget.ContentLoadingProgressBar\n                    android:id=\"@+id/progress_choice_1\"\n                    style=\"@style/Base.Widget.AppCompat.ProgressBar.Horizontal\"\n                    android:layout_width=\"200dp\"\n                    android:layout_height=\"50dp\"\n                    android:layout_marginStart=\"10dp\"\n                    android:max=\"100\" /\u003e\n    \n                \u003cRadioButton\n                    android:id=\"@+id/choice_2\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\" /\u003e\n    \n                \u003candroid.support.v4.widget.ContentLoadingProgressBar\n                    android:id=\"@+id/progress_choice_2\"\n                    style=\"@style/Base.Widget.AppCompat.ProgressBar.Horizontal\"\n                    android:layout_width=\"200dp\"\n                    android:layout_height=\"50dp\"\n                    android:layout_marginStart=\"10dp\"\n                    android:max=\"100\" /\u003e\n    \n                \u003cRadioButton\n                    android:id=\"@+id/choice_3\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\" /\u003e\n    \n                \u003candroid.support.v4.widget.ContentLoadingProgressBar\n                    android:id=\"@+id/progress_choice_3\"\n                    style=\"@style/Base.Widget.AppCompat.ProgressBar.Horizontal\"\n                    android:layout_width=\"200dp\"\n                    android:layout_height=\"50dp\"\n                    android:layout_marginStart=\"10dp\"\n                    android:max=\"100\" /\u003e\n    \n            \u003c/RadioGroup\u003e\n    \n            \u003cButton\n                android:id=\"@+id/vote\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:layout_margin=\"10dp\"\n                android:text=\"Vote\"\n                android:textAllCaps=\"false\"\n                app:layout_constraintLeft_toLeftOf=\"parent\"\n                app:layout_constraintRight_toRightOf=\"parent\"\n                app:layout_constraintTop_toBottomOf=\"@+id/radio_group\" /\u003e\n    \n        \u003c/android.support.constraint.ConstraintLayout\u003e\n    \n    \u003c/ScrollView\u003e\n```\n\nThe layout contains radio buttons with a progress bar below each of them. The progress bar will give a visual feedback of the vote count.\n\nGo to your `MainActivity` file and add this:\n\n``` kotlin\n    // File: ./app/src/main/java/com/example/realtimepolls/MainActivity.kt\n    import android.os.Bundle\n    import android.util.Log\n    import android.widget.Toast\n    import android.support.v7.app.AppCompatActivity\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import com.pusher.pushnotifications.PushNotifications\n    import kotlinx.android.synthetic.main.activity_main.*\n    import okhttp3.MediaType\n    import okhttp3.OkHttpClient\n    import okhttp3.RequestBody\n    import org.json.JSONObject\n    import retrofit2.Call\n    import retrofit2.Callback\n    import retrofit2.Response\n    import retrofit2.Retrofit\n    import retrofit2.converter.scalars.ScalarsConverterFactory\n    \n    class MainActivity : AppCompatActivity() {\n    \n        private val apiService: ApiService by lazy {\n            Retrofit.Builder()\n                    .baseUrl(\"http://10.0.2.2:5000/\")\n                    .addConverterFactory(ScalarsConverterFactory.create())\n                    .client(OkHttpClient.Builder().build())\n                    .build().create(ApiService::class.java)\n        }\n    \n        val tag = \"MainActivity\"\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_main)\n            generatePolls()\n            setupPusher()\n            setupBeams()\n            setupClickListener()\n        }\n    }\n```\n\nAbove, the class variables `apiService` and `tag` are declared. The first is to be used to make API calls to the local server while the second will be used for logging. In the `onCreate` method, there are some other custom methods called. Let’s create them.\n\nFirst is the `generatePolls` method. Paste the function in your `MainActivity` class:\n\n``` kotlin\n    private fun generatePolls() {\n        apiService.generatePolls().enqueue(object : Callback\u003cString\u003e {\n            override fun onFailure(call: Call\u003cString\u003e?, t: Throwable?) {\n    \n            }\n            \n            override fun onResponse(call: Call\u003cString\u003e?, response: Response\u003cString\u003e?) {\n                val jsonObject = JSONObject(response!!.body())\n                poll_title.text = jsonObject.getString(\"title\")\n                choice_1.text = jsonObject.getString(\"choice1\")            \n                choice_2.text = jsonObject.getString(\"choice2\")\n                choice_3.text = jsonObject.getString(\"choice3\")\n            }\n        })\n    }\n```\n\nThis method makes a network call to the server to get the poll question and options and populate the questions and options to the layout. \n\nNext, is the `setupPusher` method. Add the following to the `MainActivity` class:\n\n``` kotlin\n    private fun setupPusher() {\n        val options = PusherOptions()\n        options.setCluster(PUSHER_APP_CLUSTER)\n        val pusher = Pusher(PUSHER_API_KEY, options)\n        val channel = pusher.subscribe(\"polls\")\n    \n        channel.bind(\"vote\") { channelName, eventName, data -\u003e\n            Log.d(tag, data)\n            val jsonObject = JSONObject(data)\n    \n            runOnUiThread {\n                progress_choice_1.progress = jsonObject.getInt(\"1\")\n                progress_choice_2.progress = jsonObject.getInt(\"2\")\n                progress_choice_3.progress = jsonObject.getInt(\"3\")\n            }\n        }\n        \n        pusher.connect()\n    }\n```\n\u003e Replace the `PUSHER_KEY_*` placeholders with the keys from your Pusher Channels dashboard.\n\nThis method subscribes to the `polls` channel and listens to the `vote` event. Here, what is expected from the Pusher event is the score in percent of each option of the poll. The results are then populated to their respective progress-bars on the UI thread.\n\nNext, create the `setupBeams` function and add it to the same class:\n\n``` kotlin\n    private fun setupBeams() {\n        PushNotifications.start(applicationContext, \"PUSHER_BEAMS_INSTANCE_ID\")\n        PushNotifications.subscribe(\"polls-update\")\n    }\n```\n\nThis method above initializes Pusher Beams and subscribes to the `polls-update` event.\n\n\n\u003e Replace `PUSHER_BEAMS_INSTANCE_ID` with the instance ID from your Beams dashboard.\n\nFinally, create the `setupClickListener` and add it to the class:\n\n``` kotlin\n    private fun setupClickListener() {\n        vote.setOnClickListener {\n            val checkedButton = radio_group.checkedRadioButtonId\n            if (checkedButton == -1) {\n                Toast.makeText(this, \"Please select an option\", Toast.LENGTH_SHORT).show()\n            } else {\n                Log.d(tag, checkedButton.toString())\n                val selectedId = when (checkedButton) {\n                    R.id.choice_1 -\u003e 1\n                    R.id.choice_2 -\u003e 2\n                    R.id.choice_3 -\u003e 3\n                    else -\u003e -1\n                }\n    \n                val jsonObject = JSONObject()\n                jsonObject.put(\"option\", selectedId)\n    \n                val body = RequestBody.create(MediaType.parse(\"application/json\"), jsonObject.toString())\n    \n                apiService.updatePolls(body).enqueue(object : Callback\u003cString\u003e {\n                    override fun onFailure(call: Call\u003cString\u003e?, t: Throwable?) {\n                        Log.d(tag, t?.localizedMessage)\n                    }\n    \n                    override fun onResponse(call: Call\u003cString\u003e?, response: Response\u003cString\u003e?) {\n                        Log.d(tag, response?.body())\n                    }\n                })\n            }\n        }\n    }\n```\n\nThis method above contains the click listener added to the vote button. The user must choose an option for the vote to be recorded. Based on the choice of the user, a unique ID is sent to the server to update the poll and trigger a Pusher event.\n\nThat’s all for the Android application. Let’s build a simple Python backend.\n\n\n## Building your backend\n\nLet’s create our project folder, and activate a virtual environment in it. Run the commands below:\n\n```\n    $ mkdir pypolls\n    $ cd pypolls\n    $ virtualenv .venv\n    $ source .venv/bin/activate # Linux based systems\n    $ \\path\\to\\env\\Scripts\\activate # Windows users\n```\n\nNow that we have the virtual environment setup, we can install Flask within it with this command:\n\n```\n    $ pip install flask\n```\nNext, run the following command to set the Flask environment to development (on Linux based machines):\n\n```\n    $ export FLASK_ENV=development\n```\nIf you are on Windows, the environment variable syntax depends on command line interpreter. On Command Prompt:\n\n```\n    C:\\path\\to\\app\u003eset FLASK_APP=app.py\n```\n\nAnd on PowerShell:\n\n```\n    PS C:\\path\\to\\app\u003e $env:FLASK_APP = \"app.py\"\n```\n\nNow we need to install some of the other dependencies:\n\n```\n    $ pip install pusher pusher_push_notifications\n    $ pip install --ignore-installed pyopenssl\n```\n\nWhen the installation is complete, create the main and only Python file called `app.py` and paste the following code:\n\n``` python\n    // File: ./app.py\n    # Imports\n    from flask import Flask, jsonify, request, json\n    from pusher import Pusher\n    from pusher_push_notifications import PushNotifications\n    \n    app = Flask(__name__)\n    pn_client = PushNotifications(\n        instance_id='YOUR_INSTANCE_ID_HERE',\n        secret_key='YOUR_SECRET_KEY_HERE',\n    )\n    \n    pusher = Pusher(app_id=u'PUSHER_APP_ID', key=u'PUSHER_APP_KEY', secret=u'PUSHER_SECRET', cluster=u'PUSHER_CLUSTER')\n    \n    # Variables to hold scores of polls\n    choice1 = 0\n    choice2 = 0\n    choice3 = 0\n    \n    # Route to send poll question\n    @app.route('/generate')\n    def send_poll_details():\n        return jsonify({'title':'Who will win the 2018 World Cup','choice1': 'Germany', 'choice2':'Brazil', 'choice3':'Spain'})\n        \n    @app.route('/update', methods=['POST'])\n    def update_poll():\n        global choice1, choice2, choice3\n        \n        req_data = request.get_json()\n        \n        user_choice = req_data['option']\n        \n        if user_choice == 1:\n            choice1 += 1\n        elif user_choice == 2:\n            choice2 += 1\n        elif user_choice == 3:\n            choice3 += 1\n        else:\n            print(\"User choose a wrong option\")\n        \n        total = 0.0\n        total = float(choice1 + choice2 + choice3)\n        \n        choice1_percent = (choice1/total) * 100\n        choice2_percent = (choice2/total) * 100\n        choice3_percent = (choice3/total) * 100\n        \n        pn_client.publish(\n        interests=['polls-update'],\n        publish_body={\n            'fcm': {\n                'notification': {\n                    'title': 'Polls update',\n                    'body': 'There are currently ' + str(int(round(total))) + 'vote(s) in the polls. Have you casted your vote?',\n                },\n            },\n        },\n        )\n        \n        pusher.trigger(u'polls', u'vote', {u'1': choice1_percent, '2':choice2_percent, '3':choice3_percent})\n        \n        return 'success', 200\n```\n\n\u003e Replace the `PUSHER_APP_*` keys with the credentials from your Pusher dashboard.\n\nThis is the only file needed for your Flask application. This snippet contains two endpoints to send out the poll question and to give current results.\n\nRun your Python app using this command:\n\n```\n    $ flask run\n```\n\nNow run your Android application in Android Studio and you should see something like this:\n\n![pythonball-demo](//images.ctfassets.net/1es3ne0caaid/3R4OATvRi8qEQoqM0mOU24/58776a5c2a0aeb0c3dab6a36358eb149/pythonball-demo.gif)\n\n## Conclusion\n\nIn this post, you have learned briefly about Flask and how to use it to develop RESTful APIs. You have also explored Pusher’s realtime technologies both on the client and server side. Feel free to check out the final [GitHub repo](https://github.com/neoighodaro/kotlin-python-poll) and play around with the application.","metaTitle":"Build an Android poll app with push notifications","metaDescription":"Use Kotlin to build an Android app, supported by a Python backend. Users are able to vote, and see other votes displayed in realtime. They will also receive push notifications when a new vote is cast."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5iJKA5uH6oMMw8GSGM2ko8","type":"Entry","createdAt":"2018-07-12T21:02:54.294Z","updatedAt":"2020-06-19T13:46:49.924Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app using Framework7","url":"chat-app-framework7","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/Kennypee/pusher-framework7-chat","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FIHOHpvluMeKQoeGgGEGu","type":"Entry","createdAt":"2018-02-12T15:07:01.668Z","updatedAt":"2019-08-22T11:16:51.566Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Chat","url":"chat","type":"use case","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-07-09","description":"Build a chat app for iOS and Android using Framework7 and Vue.js, with a simple Node.js backend. Framework7 is a free and open source mobile HTML framework to develop hybrid mobile apps or web apps with iOS \u0026 Android native look and feel.","prerequisite":"You will need Node and npm or Yarn installed on your machine.","content":"## Introduction\n\nRealtime chat functionality has revitalized the way we communicate over the years. In recent times, customers can speak directly with business owners from their mobile applications and websites. This is a huge plus in technology considering how difficult it was in the past.\n\nFramework7 is a free and open source mobile HTML framework to develop hybrid mobile apps with iOS and Android native look and feel. In this tutorial, we'll build a realtime chat application with Framework7 using Pusher channels. Here’s a preview of what we’ll be building. \n\n![framework7-chat-app-demo](//images.ctfassets.net/1es3ne0caaid/5ksbxBpdDyueuymA0OMEae/45c761be2e92c8b19f8eb55ca8a3a9d9/framework7-chat-app-demo.jpeg)\n\n## Prerequisites\n\nBefore you begin, ensure that you have Node and npm or Yarn installed on your machine. Here is a run-down of the core technologies we will be using.\n\n\n1. [**Framework7**](http://framework7.io) ****- a framework for building native-like mobile applications with HTML\n\n\n2. [**Pusher**](https://pusher.com/) - Pusher is a technology for building apps with varying realtime needs like push notifications and pub/sub messaging. It is the engine behind the realtime ability of our chat app.\n\n\n3. [**Vue.js**](https://vuejs.org/) - an open-source JavaScript framework for building user interfaces\n\n\n4. [**Phonegap**](http://phonegap.com/) - an application framework that enables you to build natively installed applications using HTML and JavaScript. \n\n\n## Setting up the project\n\nThe simplest way to set up a Phonegap project is through the command line interface (CLI). Before we create a Phonegap project, ensure that you have Phonegap installed on your machine. To install Phonegap, run:\n\n```\n    $ npm install -g phonegap\n```\n\nThis will install phonegap on your machine and you can confirm the installation by running the command:\n\n```\n    $ phonegap -v\n```\n\nThis should print the version of the currently installed Phonegap. Now that we have that installed let’s create a Phonegap project. Run:\n\n\n```    \n    // create a phonegap project with the framework7 vue template\n    $ phonegap create pusher-chat --template https://github.com/hollyschinsky/phonegap-template-framework7-vue\n    $ cd pusher-chat\n    //start the server\n    $ phonegap serve\n```\n\n\nIf you get any prompts in the process, it is always safe to say yes within the scope of this demo. The `phonegap serve` command will start your project on `localhost:3000`. If you navigate to it on your browser, you should see this.\n\n![framework7-default-page](//images.ctfassets.net/1es3ne0caaid/6peL2Lzl7imkwesSOiAKuM/3d2898faf0d1debba50b40bd9c0ae337/framework7-default-page.jpeg)\n\n## Setting up Pusher\n\nHead over to Pusher and [sign up for a free account](https://dashboard.pusher.com/accounts/sign_up). \n\n![framework7-create-pusher](//images.ctfassets.net/1es3ne0caaid/2X2s4DWEt2cQEmAG6iui4k/a4bd9f45baaa63a44ea6c85c8f2cf22f/framework7-create-pusher.png)\n\nCreate a new app by selecting **Channels apps** on the sidebar and clicking **Create Channels app** button on the bottom of the sidebar:\n\n![framework7-create-channels](//images.ctfassets.net/1es3ne0caaid/2reyE709jys2EO6eOIQKgw/12d2a1d82bd74a28a017eba7a441a6cc/framework7-create-channels.png)\n\nConfigure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with to be provided with some boilerplate code:\n\n![framework7-pusher-app-config](//images.ctfassets.net/1es3ne0caaid/55C390SQikyEYaY8uwW4Uc/3ddd7e19bd5134635da595a617e22cf1/framework7-pusher-app-config.png)\n\nYou can retrieve your keys from the **App Keys** tab:\n\n![framework7-pusher-app-keys](//images.ctfassets.net/1es3ne0caaid/3zxbKtLyysGEWyko8I2MOq/292dc1a265982eee46b7236043cfb6cb/framework7-pusher-app-keys.png)\n\nSave your Pusher credentials somewhere in your editor where you can quickly retrieve it as we’ll be needing it soon.\n\n\n## Server configurations\n\nWe’ll be using a local Node server to establish communications with the client so as to render messages in realtime. Before we create our server, let’s install the packages it’ll need to run effectively. Back in your project root, run:\n\n```\n    $ npm install --save axios body-parser cors express pusher pusher-js\n```\n\nThen in your code editor, create a new file `server.js` and set it up like so:\n\n``` javascript\n        //server.js\n        const Pusher = require('pusher');\n        const express = require('express');\n        const bodyParser = require('body-parser');\n        const cors = require('cors');\n        const app = express();\n        app.use(cors());\n        app.use(bodyParser.urlencoded({extended: false}));\n        app.use(bodyParser.json());\n        \n        var pusher = new Pusher({\n            appId: 'Your-app-Id',\n            key: 'Your-app-Key',\n            secret: 'Your-app-secret',\n            cluster: 'Your-app-cluster',\n            encrypted: true\n          });\n        app.set('PORT', process.env.PORT || 6000);\n        app.post('/message', (req, res) =\u003e {\n          const message = req.body;\n          pusher.trigger('chat', 'message', message);\n          res.send(message)\n      \n        });\n        app.listen(app.get('PORT'), () =\u003e \n          console.log('Listening at ' + app.get('PORT')))\n```\n\n\u003e Do not forget to replace the placeholder values here with your unique keys from Pusher.\n\nHere we loaded all the necessary middlewares for the Express server and then configured Pusher using the credentials we got from our Pusher dashboard.\n\nWe also created the `/``message` endpoint that will receive and process messages sent in from our app. Finally, we trigger an event named `message` to Pusher Channels on a channel called `chat`. The `chat` channel holds a message payload that contains the `message` sent by the user.\n\nTo start the server, run:\n\n```\n    $ node server\n```\n\nThe above command should output this message in your terminal:\n\n\n```    \n    Listening on port 6000\n``` \n\n## Application layout\n\nNow let’s open the `index.html` file and set it up. This is the entrance to our app and we’ll place a form to collect the user’s name and a button to take them to the chat page. Open the `index.html` file, delete all the code in it and update it with this:\n\n``` html\n    // www/index.html\n    \n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e \n      \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, minimal-ui\"\u003e\n      \u003cmeta name=\"apple-mobile-web-app-capable\" content=\"yes\"\u003e\n      \u003cmeta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\"\u003e\n      \u003ctitle\u003eMy App\u003c/title\u003e\n      \u003clink rel=\"stylesheet\" href=\"css/framework7.ios.min.css\"\u003e\n      \u003clink rel=\"stylesheet\" href=\"css/framework7.ios.colors.min.css\"\u003e\n      \u003clink rel=\"stylesheet\" href=\"css/app.css\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003cdiv id=\"app\"\u003e\n        \u003cf7-statusbar\u003e\u003c/f7-statusbar\u003e\n        \u003cf7-views\u003e\n          \u003cf7-view id=\"main-view\" navbar-through :dynamic-navbar=\"true\" main\u003e\n            \u003cf7-navbar back-link=\"Back\" sliding\u003e\n              \u003cf7-nav-center sliding\u003ePusher-Framework7 App \u003c/f7-nav-center\u003e\n            \u003c/f7-navbar\u003e\n      \n            \u003cf7-pages\u003e\n              \u003cf7-page\u003e\n                \u003cf7-list\u003e\n                  \u003c/f7-list-item\u003e\n                        \u003cf7-list-item\u003e    \n                          \u003cf7-input type=\"text\" v-model:value=\"name\" placeholder=\"Your name\" clear-button\u003e\u003c/f7-input\u003e\n                        \u003c/f7-list-item\u003e\n                  \u003c/f7-list-item\u003e\n                  \u003cf7-list-button v-on:click=\"enterChat\"\u003eEnter Chat\u003c/f7-list-button\u003e\n                \u003c/f7-list\u003e\n              \u003c/f7-page\u003e\n            \u003c/f7-pages\u003e\n          \u003c/f7-view\u003e\n        \u003c/f7-views\u003e\n      \u003c/div\u003e\n      \u003ctemplate id=\"page-chat\"\u003e\n        \u003cf7-page\u003e\n    \u003c!-- chat page goes here ... --\u003e\n        \u003c/f7-page\u003e\n      \u003c/template\u003e\n      \n    \u003c!-- Add CDN for Pusher and Axios --\u003e\n      \u003cscript src=\"https://unpkg.com/axios/dist/axios.min.js\"\u003e\u003c/script\u003e \n      \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n      \n      \u003cscript src=\"cordova.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"js/framework7.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"js/vue.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"js/framework7-vue.min.js\"\u003e\u003c/script\u003e\n      \u003cscript src=\"js/app.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nNotice we added the CDN for both Pusher and Axios in the scripts above. Next, open the `app.js` file and  replace the code there in it with this:\n\n``` javascript\n    // www/js/app.js\n    \n    (function(){\n    function init(){\n    Vue.use(Framework7Vue)\n    Vue.component('page-chat', {\n      template: '#page-chat',\n    \n    });\n      // Init App\n    new Vue({\n      el: '#app',\n      methods: {\n        enterChat: function(){\n          if(this.name.trim().length === 0 ){\n            alert(\" Enter your name ...\")\n            return false;\n          }\n        }\n      },\n      framework7: {\n        root: '#app',\n        // material: true,\n        routes: [\n          {\n            path: '/chat/',\n            component: 'page-chat'\n          }\n        ],\n      }\n    });\n    }  \n    // Handle device ready event\n    document.addEventListener('deviceready', init, false)\n    })();\n```    \n    \n\nAt this point, if you save both edited files and check back on your browser, you should now get this look:\n\n![framework7-chat-app-stage-1](//images.ctfassets.net/1es3ne0caaid/3CjVXRcJT2Q268I2QyiwCG/4da71e4c5139bcf6a0c6470879a578b5/framework7-chat-app-stage-1.jpeg)\n\nHere we can supply a name and click the **Enter Chat** button to enter the chat page, but at this point it won’t work. That is expected, given that we’ve not defined a function to handle the button click event. To fix that, let’s go ahead and do some data binding between our component and our states. Update the `app.js` file like so:\n\n``` javascript\n    // www/js/app.js\n    \n    // init states\n    var states = {\n        name: '',\n        msgs: []\n    };\n      \n    (function(){\n    function init(){\n    \n    Vue.use(Framework7Vue)\n    \n    Vue.component('page-chat', {\n      template: '#page-chat',\n      data: function(){\n        return states;\n      },\n      // handle onSend\n      methods: {\n        onSend: function(text, clear){\n             console.log(\"clicked\") \n          if( typeof clear == 'function' ) clear()\n        }\n      }\n    });\n      // Init App\n    new Vue({\n      el: '#app',\n      data: function(){\n        return states;\n      },\n      // handle enterChat button\n      methods: {\n        enterChat: function(){\n          if(this.name.trim().length === 0 ){\n            alert(\" Enter your name ...\")\n            return false;\n          }\n          this.msgs.length = 0;\n          this.$f7.mainView.router.load({url:'/chat/'});\n        }\n      },\n      framework7: {\n        root: '#app',\n        /* Uncomment to enable Material theme: */\n        // material: true,\n        routes: [\n          {\n            path: '/chat/',\n            component: 'page-chat'\n          }\n        ],\n      }\n    });\n    }  \n    // Handle device ready event\n    \n    document.addEventListener('deviceready', init, false)\n    })();\n```\n\nHere we defined a states object to hold the name of the user and an array of messages. Then we added the missing callbacks that we defined in our HTML file to handle the click events on the buttons. \n\nIf the user supplies a name and clicks the **Enter Chat** button, it’ll open up the chat page, but if that is not the case, it’ll alert the user to a name. Update your `app.js` file with the snippet above and save. Now go back to the browser, enter a name and click **Enter Chat.** This should now open up the empty chat page.\n\nNext, we’ll set up the chat page to have a simple chat form with an input to collect the message and a button to send it. Open the `index.html` file and update the chat page template section with this code:\n\n``` html\n    // www/index.html\n    // ...\n    \u003cf7-messages\u003e\n      \u003cf7-message v-for=\"msg in msgs\" :name=\"msg.name\" :text=\"msg.text\" :type=\"msg.type\"\u003e\n    \u003c/f7-message\u003e\n    \u003c/f7-messages\u003e\n      \u003cf7-messagebar placeholder=\"type message\" send-link=\"Send\" v-on:submit=\"onSend\" \u003e\n    \u003c/f7-messagebar\u003e\n    // ...\n```    \n\nAdd this code in the section where we left a comment to add chat page. Save the `index.html` file and check back on your browser. The chat page should look like this:\n\n![framework7-chat-app-stage-2](//images.ctfassets.net/1es3ne0caaid/5hX0MmKXSEE2KYKo20kUoM/6a2fb2c3fbf42ac5aef29d016d50e115/framework7-chat-app-stage-2.jpeg)\n\n## Realtime updates\n\nAt this point, we can type messages, but nothing happens when you try to send. This is because we haven’t integrated Pusher. At the beginning we set up Pusher and retrieved our app keys, we’ll now use it to configure our project. Open the `app.js`  file and add this code:\n\n``` javascript\n      // www/js/app.js\n      \n       const pusher = new Pusher('YOUR_PUSHER_KEY', {\n        cluster: 'YOUR_CLUSTER',\n        encrypted: true,\n      });\n      const channel = pusher.subscribe('chat');\n      channel.bind('message', data =\u003e {\n          console.log(data)\n        var type = data.name == states.name ? 'sent':'received'\n        var name = type == 'sent'? states.name : data.name;\n        states.msgs.push({name:name, text:data.text, type:type});\n      });\n      \n      // ...\n```\n\nThis sets up Pusher in our client with the credentials from our dashboard. We subscribe to the `chat` channel we defined on the server and bind our response data to the appropriate view objects to display them on screen.\n\nNow to send the chat to the server when the user clicks the **Send button**, let’s update the onSend function in the `app.js`  file:\n\n``` javascript\n      // www/js/app.js\n      ...\n      \n      // Init Page Components\n    Vue.component('page-chat', {\n      template: '#page-chat',\n      data: function(){\n        return states;\n      },\n      \n      methods: {\n        onSend: function(text, clear){\n             console.log(\"clicked\") \n            var message = {\n                name: this.name,\n                text: text \n            }\n            axios.post('http://localhost:6000/message', message);\n          if( typeof clear == 'function' ) clear()\n          }\n        }\n      });\n      \n      // Init App\n    new Vue({\n      el: '#app',\n      data: function(){\n        return states;\n      },\n      methods: {\n        enterChat: function(){\n          if(this.name.trim().length === 0 ){\n            alert(\" Enter your name ...\")\n            return false;\n          }\n          this.msgs.length = 0;\n          this.$f7.mainView.router.load({url:'/chat/'});\n          \n        }\n      },\n      ...\n```\n\nHere we define a message object that takes the name of the user and text message to send. Then we use Axios to post the message object to the `/messages` endpoint we defined on the server.\n\n\n## Testing\n\nTo test out the application, ensure that both Phonegap server and the Node server is running. If that’s not the case, you can start the Phonegap server in project root with `phonegap serve` and the Node server with `node server`. \n\nBefore testing your application, I recommend you compare your codes with mine to ensure that you did everything right so as not to encounter any blockers. Compare your `index.html`, `server.js` and `app.js`. If everything looks alright, now go ahead and test the application.\n\nOpen two browser windows to `localhost:3000` and send messages:\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/8xB4rlOXW-A?rel=0\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen\u003e\u003c/iframe\u003e\n\n\n\n## Conclusion\n\nThe importance of realtime engagement of users on any platform cannot be overemphasized. As seen in this tutorial, we were able to implement a realtime chat system with Framework7 and Pusher. I hope you found this tutorial helpful.\n\nFeel free to explore the code for this tutorial on [GitHub](https://github.com/Kennypee/pusher-framework7-chat) and add more features as you deem fit.  ","metaTitle":"Build a chat app using Framework7","metaDescription":"Use Framework7, Vue.js and Node.js to build a simple chat app for Android and iOS. Framework7 is a free and open source mobile HTML framework to develop hybrid mobile apps or web apps with iOS \u0026 Android native look and feel."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1DkONuEWcYoEGSisSO8ig","type":"Entry","createdAt":"2018-07-03T09:04:25.648Z","updatedAt":"2018-07-03T09:04:25.648Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live blog in Kotlin with push notifications","url":"live-blog-kotlin-push-notifications","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/kotlin-live-blog-with-push-notifications","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"644GONySFGieg4wAUc8k0C","type":"Entry","createdAt":"2018-02-12T14:37:53.963Z","updatedAt":"2019-08-28T08:41:31.723Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Beams","url":"beams","featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"54VH6KuDAsYY80KIeQE0OO","type":"Entry","createdAt":"2018-02-12T14:50:20.551Z","updatedAt":"2018-02-26T12:31:15.549Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Kotlin","url":"kotlin","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SxOuediAgcSuiWyUmkw40","type":"Entry","createdAt":"2018-02-12T15:09:21.130Z","updatedAt":"2018-09-05T15:44:43.776Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Beams","url":"push-notifications","type":"use case"}}],"reviewDate":"2018-07-01","description":"Build an Android app with Kotlin. The app connects to a Node.js server, and provides push notifications to alert users when a football blog is updated.","prerequisite":"You will need Android Studio 3+, Node and npm installed on your machine. A basic knowledge of Android development, and familiarity with Android Studio, is required.","content":"## Introduction\n\nWe are definitely in the era of realtime everything. We demand that all our tools and apps we use daily should be able to update in realtime. With a lot of realtime applications springing up, the football scene is not an exception. You see popular soccer reporting bodies adopting this strategy. \n\nIn this article, you will learn how to build a live soccer blog mobile app. Here is what your app will look like after this post:\n\n![kotlin-liveblog-beams-demo](//images.ctfassets.net/1es3ne0caaid/5wqd3IR1ccukOkkekgQmu6/960adda8c7e513af7c89f33fde0b0cfa/kotlin-liveblog-beams-demo.gif)\n\n## Prerequisites\n\nFor you to move on smoothly with this tutorial, it is expected that you have the following:\n\n\n- Android Studio (\u003e= v3.0) installed on your machine. Download [here](https://developer.android.com/studio/index.html).\n- A basic knowledge of Android development and an ability to use Android Studio.\n- A basic knowledge of Kotlin programming language. [See the official docs](https://kotlinlang.org/docs/reference/).\n- Node.js and NPM installed on your machine. Check [here](https://nodejs.org/en/) for the latest releases.\n\n\n## Building your live blog app\n\n### Creating your Android app\n\nTo get started, open Android Studio and create a new basic activity project. Android Studio provides a wizard for this to guide you. While creating your app, be sure to enable Kotlin support since that is what you will use. \n\n![kotlin-liveblog-beams-create-project](//images.ctfassets.net/1es3ne0caaid/4al226nIqIoMO0Ocq82Oii/c3c5a0f0eed39dee19c30a0ba1eae1aa/kotlin-liveblog-beams-create-project.png)\n\nSelect **Phone and Tablet** using **API 19: Android 4.4 (Kitkat)**. Select the **EmptyActivity** template and create the project. After this process is complete, you should have an activity named `MainActivity` and its layout `activity_main.xml`.\n\n### Setting up Pusher Channels\n\nLog in to your [Pusher dashboard](https://dashboard.pusher.com). If you don’t have an account, create one. Your dashboard should look like this:\n\n![kotlin-liveblog-beams-create-pusher-app](//images.ctfassets.net/1es3ne0caaid/7nPd10h1x62OK8eA6YSakQ/98ce36a55d015163f626f2169441c966/kotlin-liveblog-beams-create-pusher-app.png)\n\nCreate a new Channels app. You can easily do this by clicking the big **Create new Channels app** card at the bottom right. When you create a new app, you are provided with keys. Keep them safe as you will soon need them.\n\n### Getting your FCM key\n\nBefore you can start using Beams, you need an FCM key and a google-services file because Beams relies on Firebase. Go to your [Firebase console](https://console.firebase.google.com/u/0/) and create a new project.\n\nWhen you get to the console, click the **Add project** card to initialize the app creation wizard. Add the name of the project, for example, `soccer-blog`. Read and accept the terms of conditions. After this, you will be directed to the project overview screen. Choose the **Add Firebase to your Android app** option. The next screen will require the package name of your app.\n\nAn easy way to get the package name of your app is from your `AndroidManifest.xml` file. Check the `\u003cmanifest\u003e` tag and copy the value of the `package` attribute. Another place you can find this is your app-module `build.gradle` file. Look out for the `applicationId` value. When you enter the package name and click **Register app.** Next download your `google-services.json` file. After you have downloaded the file, you can skip the rest of the process. Add the downloaded file to the app folder of your app - `name-of-project/app`.\n\nNext, go to your Firebase project settings, under the Cloud messaging tab, copy your server key.\n\n### Setting up Pusher Beams\n\nNext, log in to the new [Pusher dashboard](https://dash.pusher.com/), in here we will create a Pusher Beams instance. You should sign up if you don’t have an account yet. Click on the **Beams** button on the sidebar then click **Create**, this will launch a pop up to **Create a new Beams instance**. Name it `soccer-blog`.\n\n![kotlin-liveblog-beams-new-beams](//images.ctfassets.net/1es3ne0caaid/jvRWHnL0VqCUkqMa26ImA/9de75f79e56ba99fa0897231dcd638f5/kotlin-liveblog-beams-new-beams.png)\n\nAs soon as you create the instance, you will be presented with a quickstart guide. Select the **ANDROID** quickstart\n\n![kotlin-liveblog-beams-quickstart](//images.ctfassets.net/1es3ne0caaid/5Ef7TiLPGMy4oAs2OQOMW4/676cc584e256fca1be76de3380d80016/kotlin-liveblog-beams-quickstart.png)\n\nThe next screen requires the FCM key you copied earlier. After you add the FCM key, you can exit the quickstart guide.\n\n### Adding dependencies\n\nYou will make use of Beams for notifications and the Channels libraries for live events. Add the following to the project’s `build-gradle` file:\n\n``` gradle\n    // File: ./blog-app/build.gradle\n    buildscript {\n        // [...]\n    \n        dependencies {\n            classpath 'com.google.gms:google-services:4.0.0'\n        }\n    }\n```\n\nAnd these other dependencies to the app-module `build.gradle` file:\n\n``` gradle\n    // File: ./blog-app/app/build.gradle\n    dependencies {\n        implementation 'com.android.support:recyclerview-v7:27.1.1'\n        implementation 'com.android.support:cardview-v7:27.1.1'\n        implementation 'com.pusher:pusher-java-client:1.5.0'\n        implementation 'com.google.firebase:firebase-messaging:17.0.0'\n        implementation 'com.pusher:push-notifications-android:0.10.0'\n    }\n    \n    // Add this line to the end of the file\n    apply plugin: 'com.google.gms.google-services'\n```\n\n### Writing your app\n\nYour app is expected to display a list of posts in realtime and this means you will need a list. Each list row will contain the time of action and current action happening. Since you can’t use the default Android layouts meant for lists as it doesn’t have what you require in the customized fashion you want it, we have to create a custom list row layout. This layout will determine how each item in the list will look like. \n\nCreate a new layout file, name it `list_row.xml` and paste this:\n\n``` xml\n    \u003c!-- File: /blog-app/app/src/main/res/layout/list_row.xml --\u003e\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.v7.widget.CardView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        app:cardCornerRadius=\"10dp\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_margin=\"15dp\"\u003e\n    \n        \u003cLinearLayout\n            android:layout_width=\"match_parent\"\n            android:orientation=\"horizontal\"\n            android:padding=\"10dp\"\n            android:layout_height=\"match_parent\"\u003e\n    \n            \u003cTextView\n                android:textColor=\"@android:color/black\"\n                android:layout_gravity=\"center\"\n                android:id=\"@+id/time\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:textSize=\"18sp\"/\u003e\n    \n            \u003cTextView\n                android:id=\"@+id/currentActivity\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginStart=\"10dp\"\n                android:textSize=\"18sp\" /\u003e\n    \n        \u003c/LinearLayout\u003e\n    \u003c/android.support.v7.widget.CardView\u003e\n```\n\nA `CardView` is here used for easy customization of the borders. The `CardView` contains a horizontal linear layout, which in turn contains two `TextView`s. The first `TextView` will show the minute during the match when an event is happening and the second one will show the event happening.\n\nNext, you need a class to mock the kind of data you want to send to each row. Create a data class named `BlogPostModel` and paste this:\n\n``` kotlin\n    // File: /blog-app/app/src/main/java/com/example/soccerliveblog/BlogPostModel.kt\n    data class BlogPostModel(var time:String, var currentActivity:String)\n```\n\nNext, you will need a recycler view adapter to manage items in the recycler view. Create a class `BlogListAdapter` and set it up like this:\n\n``` kotlin\n    // File: /blog-app/app/src/main/java/com/example/soccerliveblog/BlogListAdapter.kt\n    import android.support.v7.widget.RecyclerView\n    import android.view.LayoutInflater\n    import android.view.View\n    import android.view.ViewGroup\n    import android.widget.TextView\n    \n    class BlogListAdapter : RecyclerView.Adapter\u003cBlogListAdapter.ViewHolder\u003e() {\n    \n        private var blogList = ArrayList\u003cBlogPostModel\u003e()\n    \n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n            return ViewHolder(LayoutInflater.from(parent.context)\n                    .inflate(R.layout.list_row, parent, false))\n        }\n    \n        override fun onBindViewHolder(holder: ViewHolder, position: Int) = holder.bind(blogList[position])\n    \n        override fun getItemCount(): Int = blogList.size\n    \n        fun addItem(blogItem:BlogPostModel){\n            blogList.add(0,blogItem)\n            notifyDataSetChanged()\n        }\n    \n        inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n    \n            private val time: TextView = itemView.findViewById(R.id.time)\n            private val currentActivity: TextView = itemView.findViewById(R.id.currentActivity)\n    \n            fun bind(currentValue: BlogPostModel) = with(itemView) {\n                time.text = currentValue.time\n                currentActivity.text = currentValue.currentActivity\n            }\n        }\n    }\n```\n\nThis class contains the usual `RecyclerView.Adapter` methods. There are two custom functions created here, `addItem` to add a new blog post item to the top of the list and `bind` inside the `ViewHolder` class to make binding easier.\n\nNext thing you would consider is how you will receive and display notifications in the app. You will create a service for that. Services are one of the key components in Android development. A service is a component that runs in the background to perform long-running operations without needing to interact with the user and it works even if application is destroyed. Create a new class named `NotificationsMessagingService` and paste this:\n\n``` kotlin\n    // File: /blog-app/app/src/main/java/com/example/soccerliveblog/NotificationsMessagingService.kt\n    import android.app.NotificationChannel\n    import android.app.NotificationManager\n    import android.app.PendingIntent\n    import android.content.Intent\n    import android.os.Build\n    import android.support.v4.app.NotificationCompat\n    import com.google.firebase.messaging.RemoteMessage\n    import com.pusher.pushnotifications.fcm.MessagingService\n    \n    class NotificationsMessagingService : MessagingService() {\n    \n        override fun onMessageReceived(remoteMessage: RemoteMessage) {\n            val notificationId = 10\n            val channelId  = \"soccer-channel\"\n            val notificationManager = applicationContext.getSystemService(NotificationManager::class.java)\n            \n            lateinit var channel:NotificationChannel\n    \n            if (Build.VERSION.SDK_INT \u003e= Build.VERSION_CODES.O) {\n                val name = getString(R.string.channel_name)\n                val description = getString(R.string.channel_description)\n                val importance = NotificationManager.IMPORTANCE_DEFAULT\n                channel = NotificationChannel(\"world-cup\", name, importance)\n                channel.description = description\n                notificationManager!!.createNotificationChannel(channel)\n            }\n    \n            val intent = Intent(this, MainActivity::class.java)\n            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK\n            val pendingIntent = PendingIntent.getActivity(this, 0, intent, 0)\n    \n            val mBuilder = NotificationCompat.Builder(this, channelId)\n                    .setSmallIcon(R.mipmap.ic_launcher)\n                    .setContentTitle(remoteMessage.notification!!.title!!)\n                    .setContentText(remoteMessage.notification!!.body!!)\n                    .setContentIntent(pendingIntent)\n                    .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n                    .setAutoCancel(true)\n    \n            notificationManager.notify(notificationId, mBuilder.build())\n    \n        }\n    }\n```\n\nThis class implements the `MessagingService` abstract class. This mandates the implementation of the method `onMessageReceived`, which is called when a message is pushed remotely. From the snippet, when a message is received, a notification is prepared and sent to the user. \n\nNote that if the user is on the app already, this notification will not come up. API versions 26 and above require creating notification channels and that is exactly what is done above. The title and body of the notification are inline with what is received remotely. An intent is added so that the `MainActivity` will be opened when the notification is selected.\n\nAdd these strings to your `strings.xml` file as they were referenced in the previous snippet:\n\n``` xml\n    \u003cstring name=\"channel_name\"\u003esoccer\u003c/string\u003e\n    \u003cstring name=\"channel_description\"\u003eListen to soccer notifications\u003c/string\u003e\n```\n\nNext, you add the service in your `AndroidManifest.xml` file under the `\u003capplication\u003e` tag like this:\n\n``` xml\n    \u003c!-- /blog-app/app/src/main/AndroidManifest.xml --\u003e\n    \u003capplication\n      \n      [...]\n      \n      \u003cservice android:name=\".NotificationsMessagingService\"\u003e\n          \u003cintent-filter android:priority=\"1\"\u003e\n              \u003caction android:name=\"com.google.firebase.MESSAGING_EVENT\" /\u003e\n          \u003c/intent-filter\u003e\n      \u003c/service\u003e\n      \n      [...]\n      \n    \u003c/application\u003e\n```\n\nWith this, you are ready to receive notifications remotely to your app. Next replace the contents of the `activity_main.xml` file with the following:\n\n``` xml\n    \u003c!-- File: /blog-app/app/src/main/res/layout/activity_main.xml --\u003e\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n    \u003candroid.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\".MainActivity\"\u003e\n    \n        \u003candroid.support.v7.widget.RecyclerView\n            android:id=\"@+id/recyclerViewBlogPosts\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintLeft_toLeftOf=\"parent\"\n            app:layout_constraintRight_toRightOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\" /\u003e\n    \n    \u003c/android.support.constraint.ConstraintLayout\u003e\n```\n\nNow, go the `MainActivity` class and make sure you have these imports in the class:\n\n``` kotlin\n    // File: /blog-app/app/src/main/java/com/example/soccerliveblog/MainActivity.kt\n    import android.os.Bundle\n    import android.support.v7.app.AppCompatActivity\n    import android.support.v7.widget.LinearLayoutManager\n    import com.pusher.client.Pusher\n    import com.pusher.client.PusherOptions\n    import com.pusher.pushnotifications.PushNotifications\n    import kotlinx.android.synthetic.main.activity_main.*\n    import org.json.JSONObject\n```\n\nThe rest of the class should then look like this:\n\n``` kotlin\n    class MainActivity : AppCompatActivity() {\n    \n        private lateinit var pusher: Pusher\n        private val blogListAdapter = BlogListAdapter()\n    \n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_main)\n            PushNotifications.start(applicationContext,\n                    PUSHER_BEAMS_INSTANCEID)\n            PushNotifications.subscribe(\"world-cup\")\n            with(recyclerViewBlogPosts){\n                layoutManager = LinearLayoutManager(this@MainActivity)\n                adapter = blogListAdapter\n            }\n            setupPusher()\n        }\n    }\n```\n\n\u003e You are expected to replace the `PUSHER_BEAMS_INSTANCEID` with your instance ID found on your Pusher Beams dashboard.\n\nIn the above snippet, the `pusher` and `blogListAdapter` instance are first declared. In the `onCreate` method, push notifications is initialized and you are particularly listening to the world-cup stream for updates. \n\nNext, you have initialized the recycler view with a linear layout manager and an adapter. Finally, a `setupPusher` function is called. Add the function below to the class:\n\n``` kotlin\n    private fun setupPusher() {\n        val options = PusherOptions()\n        options.setCluster(PUSHER_CLUSTER)\n        pusher = Pusher(PUSHER_API_KEY, options)\n    \n        val channel = pusher.subscribe(\"soccer\")\n    \n        channel.bind(\"world-cup\") { channelName, eventName, data -\u003e\n            val jsonObject = JSONObject(data)\n            val time = jsonObject.getString(\"currentTime\")\n            val currentActivity = jsonObject.getString(\"currentPost\")\n            val model = BlogPostModel(time,currentActivity)\n            runOnUiThread {\n                blogListAdapter.addItem(model)\n            }\n        }\n        \n        pusher.connect()\n    }\n```\n\n\u003e Replace the `PUSHER_CLUSTER` and `PUSHER_API_KEY` with their equivalent values from your dashboard\n\nIn the above snippet, there is a listener to the soccer channel and the world-cup event. When a post is received, it is bound to a new model instance before it being added to the adapter.\n\nFinally, give the activity a `singleInstance` launch mode so that when you open the `MainActivity` from the notification, it won’t restart the activity. To do this, open the `AndroidManifest.xml`  file and add the `android:launchMode` attribute to the `activity` tag and set it to `singleInstance`:\n\n``` xml\n    \u003cactivity android:name=\".MainActivity\"\n        android:launchMode=\"singleInstance\"\n        ...\n    \u003c/activity\u003e\n```\n\n## Building the backend\n\nLet’s build a simple Node.js server to power our app. Create a new folder say `beams-backend`. Open the folder. Create a new `config.js` file like this:\n\n``` javascript\n    module.exports = {\n        appId: 'PUSHER_APP_ID',\n        key: 'PUSHER_APP_KEY',\n        secret: 'PUSHER_APP_SECRET',\n        cluster: 'PUSHER_APP_CLUSTER',\n        secretKey: 'PUSHER_BEAMS_SECRET',\n        instanceId: 'PUSHER_BEAMS_INSTANCEID'\n    };\n```\n\n\u003e Replace the first four items with the keys on you Pusher Channel dashboard while the last two keys will be replaced with the keys on your Pusher Beams dashboard\n\nThis file holds the keys you will access. It is good practice to keep them all in one file. Next up, create a another file named `index.js` and paste this:\n\n``` javascript\n    // Load the required libraries\n    let Pusher = require('pusher');\n    let express = require('express');\n    let bodyParser = require('body-parser');\n    const PushNotifications = require('@pusher/push-notifications-server');\n    \n    // initialize express and pusher and pusher beams\n    let app = express();\n    let pusher = new Pusher(require('./config.js'));\n    let pushNotifications = new PushNotifications(require('./config.js'))\n    \n    // Middlewares\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    \n    app.get('/posts', (req, res) =\u003e {\n    \n      var arrayEvents = [\n          \"Russia (4-2-3-1): Igor Akinfeev; Mario Fernandes, Ilya Kutepov, Sergey Ignashevich, Yury Zhirkov; Yuri Gazinskiy, Roman Zobnin; Aleksandr Samedov, Alan Dzagoev, Aleksandr Golovin; Fedor Smolov.\",\n        \"Finally, the festival of football is here. We've got 64 games, 32 teams...but there can be only one winner. And the action starts today!!\",\n          \"Hello and welcome to live text commentary of the Group A match between Russia and Saudi Arabia at the 2018 World Cup in Russia. The scene is set for the tournament opener!\"\n      ];\n    \n      var arrayTime = [\"15'\", \"10'\", \"5'\"];\n    \n      let sendPushNotification = () =\u003e {\n        var currentPost = arrayEvents.pop()\n        var currentTime = arrayTime.pop()\n      \n        pushNotifications.publish(\n          ['world-cup'],{\n          fcm: {\n            notification: {\n              title: 'New post',\n              body: currentPost\n            }\n          }\n        }).then((publishResponse) =\u003e {\n          console.log('Just published:', publishResponse.publishId);\n        });\n      \n        pusher.trigger('soccer', 'world-cup', {currentTime, currentPost});\n      }\n      \n      sendPushNotification()\n    \n      let sendToPusher = setInterval(() =\u003e {\n        sendPushNotification()\n      \n        if (arrayEvents.length == 0) {\n          clearInterval(sendToPusher)\n        }\n      }, 5000);\n    \n      res.json({success: 200})\n    });\n    \n    // index\n    app.get('/', (req, res) =\u003e res.json(\"It works!\"));\n    \n    // serve app\n    app.listen(4000, _ =\u003e console.log('App listening on port 4000!'));\n```\n\n\u003e These commentaries were gotten manually from Goal.com’s commentary blog for the opening match at the FIFA World Cup 2018 (Russia vs Saudi Arabia)\n  \n\nIn this snippet, there is one endpoint, the `/posts` endpoint, which sends data to the Pusher channel and a notification channel every twenty seconds. The data is gotten from an array initialized locally. The app is then served on port `4000`. In the `beams-backend` directory, run the following commands:\n\n```\n    npm install pusher\n    npm install body-parser\n    npm install @pusher/push-notifications-server express --save\n```\n\nThis installs the three dependencies you need for your app. Now, your server is ready, run this command in the `beams-backend` directory:\n\n```\n    node index.js\n```\n\nNext, run the application from Android Studio, then open the URL `http://localhost:4000/posts` in your browser and you should start receiving live updates in your app.\n\n## Conclusion\n\nIn this post, you have learned how to build a blog app using Kotlin, Pusher Beams, and Pusher Channels. Feel free to fall back to the [GitHub repository](https://github.com/neoighodaro/kotlin-live-blog-with-push-notifications) if you get stuck at any point. I can’t wait to see what you will build with your knowledge of a realtime service like Pusher.","metaTitle":"Build a live blog in Kotlin with push notifications","metaDescription":"Use push notifications to create a live blog app. Create an Android app using Kotlin, with a Node.js server."}}],"defaultValue":"Channels \u0026 Android","queryType":"tag","pages":5,"route":"/tutorials","query":{"product":"Channels","tag":"Android","page":"3"}}},"page":"/tutorials","query":{"product":"Channels","tag":"Android","page":"3"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?product=Channels&tag=Android&page=3 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:31:16 GMT -->
</html>