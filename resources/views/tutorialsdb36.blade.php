<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=Vue.js&page=4 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:12 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">74</span> tutorials for “<span class="css-npldjc ehwuahf2">Vue.js</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsedf8.html?product=Channels&amp;tag=Vue.js" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorialsa504.html?product=Beams&amp;tag=Vue.js" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Vue.js"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/search-laravel-vue.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a live search feature with Laravel and Vue.js</h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">This short tutorial will show you how to build a simple live search feature using Laravel, Vue.js and SQLite. Users will...</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/cms-laravel-vue-part-3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a CMS with Laravel and Vue - Part 3: Building an API</h3><p class="css-k12xad e5jrto45">This six part tutorial series will guide you through building a CMS using Laravel and Vue.js. The final product will inc...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/cms-laravel-vue-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a CMS with Laravel and Vue - Part 2: Implementing posts</h3><p class="css-k12xad e5jrto45">This six part tutorial series will guide you through building a CMS using Laravel and Vue.js. The final product will inc...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/serverside-rendering-vue-nuxt.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Nuxt</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Implicit serverside rendering in Vue using Nuxt</h3><p class="css-k12xad e5jrto45">This tutorial compares building a web app with Vue using Nuxt versus using plain Vue. It looks at accessibility issues, ...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/cms-laravel-vue-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a CMS with Laravel and Vue - Part 1: Setting up</h3><p class="css-k12xad e5jrto45">This six part tutorial series will guide you through building a CMS using Laravel and Vue.js. The final product will inc...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/laravel-vue-axios.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Laravel<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">PHP</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Handle HTTP requests in a Laravel Vue.js app with Axios</h3><p class="css-k12xad e5jrto45">Learn to use Axios in a Laravel app. You will build a simple blog dashboard, to create and list posts. Use Laravel for t...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-flask-vue-part-1.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Flask<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Python</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app in Flask and Vue with sentiment analysis - Part 1: Setting up the project</h3><p class="css-k12xad e5jrto45">This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each othe...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-flask-vue-part-2.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Flask<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Python</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app in Flask and Vue with sentiment analysis - Part 2: Building the chat interface</h3><p class="css-k12xad e5jrto45">This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each othe...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/chat-flask-vue-part-3.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Flask<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Python</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a chat app in Flask and Vue with sentiment analysis  - Part 3: Live chat with sentiment analysis</h3><p class="css-k12xad e5jrto45">This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each othe...</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorials60f4.html?tag=Vue.js&amp;page=3" class="css-5s6711 edg0byb1">Prev</a><a href="tutorials7118.html?tag=Vue.js&amp;page=1" class="css-5s6711 edg0byb1">1</a><a href="tutorialsf5dc.html?tag=Vue.js&amp;page=2" class="css-5s6711 edg0byb1">2</a><a href="tutorials60f4.html?tag=Vue.js&amp;page=3" class="css-5s6711 edg0byb1">3</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorialsdb36.html?tag=Vue.js&amp;page=4" class="css-2wakph edg0byb1">4</a><style data-emotion-css="za1ua3">.css-za1ua3{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;display:none;}.css-za1ua3:hover{background:#5c29db;color:white;}.css-za1ua3:active{background:#5c29db;}@media all and (min-width:760px){.css-za1ua3{font-size:1rem;}}@media all and (min-width:760px){.css-za1ua3{display:inline-block;}}</style><a href="tutorials7b12.html?tag=Vue.js&amp;page=5" class="css-za1ua3 edg0byb1">5</a><a href="tutorialsd161.html?tag=Vue.js&amp;page=6" class="css-za1ua3 edg0byb1">6</a><style data-emotion-css="pkipi1">.css-pkipi1{padding:0 .7rem 0 .5rem;}@media all and (min-width:760px){.css-pkipi1{padding:0 1rem 0 .7rem;}}</style><span class="css-pkipi1 edg0byb2">...</span><a href="tutorials27ac.html?tag=Vue.js&amp;page=9" class="css-5s6711 edg0byb1">9</a><a href="tutorials7b12.html?tag=Vue.js&amp;page=5" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":74,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"7uCA97uiyIggW00uWuscK8","type":"Entry","createdAt":"2018-10-03T18:55:33.481Z","updatedAt":"2018-10-03T18:55:33.481Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a live search feature with Laravel and Vue.js","url":"search-laravel-vue","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Ok7hdNlHGsaAME2MCGEeq","type":"Entry","createdAt":"2018-09-17T17:53:10.446Z","updatedAt":"2018-09-17T17:53:10.446Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ethiel Adiassa","url":"ethiel-adiassa","email":"ethiel97@gmail.com","twitter":"https://twitter.com/ethiel97","github":"https://github.com/ethiel97","guestWriter":true}}],"projectRepo":"https://github.com/Ethiel97/realtime_search_pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-10-03","description":"This short tutorial will show you how to build a simple live search feature using Laravel, Vue.js and SQLite. Users will see results being filtered and returned as they type.","prerequisite":"You will need the Laravel CLI installed on your machine. This tutorial was created with Laravel 5.7.","content":"## Introduction\n\nToday we’ll be creating a realtime search engine. Realtime means that our users will get updates as soon as they occur. So using our application, our users can search data and get results instantly. We’ll be using Laravel for the backend part, Vue.js for creating our dynamic user interface and Pusher Channels to get realtime updates.\n\n\n## Prerequisites\n\nIn order to follow this tutorial a basic or good understanding of Vue.js and Laravel is required, as we’ll be using these technologies throughout this tutorial. Also ensure you have npm or Yarn on your machine.\n\nWe’ll be using these tools to build our application:\n\n\n- [Pusher](https://pusher.com/channels)\n- [Laravel 5.7](https://laravel.com)\n- [Vue.js](https://vuejs.org)\n- [Vuex](https://vuex.vuejs.org)\n- [Laravel CLI](https://laravel.com/docs/5.7/installation) installed on your machine\n\nHere’s a demo of the final product:\n\n![laravel-search-demo](//images.ctfassets.net/1es3ne0caaid/RmQBvTdxAqmkQ2eSeGWS0/fc1f9b2690eb152029996d91de3367fb/laravel-search-demo.gif)\n\n## Pusher setup\n\nHead over to the Pusher website and sign up for a free account. Select **Create new app** on the sidebar, and hit **Create my app** to create a new app after filling the form.\n\nOnce your app is created, retrieve your credentials from the **API Keys**  tab, and make note of it as we’ll use them later in the tutorial.\n\n## Initializing the project and installing dependencies\n\nTo get started we’ll install a new Laravel application using the Laravel CLI. We’ll run the following command:\n\n```\nlaravel new realtime_search_pusher\n```\n\nOnce the installation is finished run the following command to move to your app directory: \n\n```\ncd realtime_search_pusher.\n```\n\nNow we’ll install our node dependencies, first paste this in  your `package.json` file: \n\n``` json\n    {\n      \"private\": true,\n      \"scripts\": {\n        \"dev\": \"npm run development\",\n        \"development\": \"cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\",\n        \"watch\": \"npm run development -- --watch\",\n        \"watch-poll\": \"npm run watch -- --watch-poll\",\n        \"hot\": \"cross-env NODE_ENV=development node_modules/webpack-dev-server/bin/webpack-dev-server.js --inline --hot --config=node_modules/laravel-mix/setup/webpack.config.js\",\n        \"prod\": \"npm run production\",\n        \"production\": \"cross-env NODE_ENV=production node_modules/webpack/bin/webpack.js --no-progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\"\n      },\n      \"devDependencies\": {\n        \"axios\": \"^0.18\",\n        \"bootstrap\": \"^4.0.0\",\n        \"cross-env\": \"^5.1\",\n        \"jquery\": \"^3.2\",\n        \"laravel-mix\": \"^2.0\",\n        \"lodash\": \"^4.17.5\",\n        \"popper.js\": \"^1.12\",\n        \"vue\": \"^2.5.7\",\n        \"vuex\": \"^3.0.1\",\n        \"laravel-echo\": \"^1.4.0\",\n        \"pusher-js\": \"^4.2.2\"\n      }\n    }\n```\n\nThen run `npm install` or `yarn` to install the dependencies. It’s up to you.\n\nAfter this step, add the following to your  `.env` file in the root of your project directory. Ensure to replace the placeholders with your keys from Pusher.\n\n```\n    PUSHER_APP_ID=YOUR_PUSHER_APP_ID\n    PUSHER_APP_KEY=YOUR_PUSHER_APP_KEY\n    PUSHER_APP_SECRET=YOUR_PUSHER_APP_SECRET\n    PUSHER_APP_CLUSTER=YOUR_PUSHER_APP_CLUSTER\n```\n\n## Database setup\n\nIn this tutorial we’ll use SQLite as our database. Create a database.sqlite file in the database directory, and amend the .env file like this:\n\n```\n    DB_CONNECTION=sqlite\n    DB_DATABASE=/absolute/path/to/database.sqlite\n```\n\nRefer to this [section on Laravel website](https://laravel.com/docs/5.7/database) for more relevant information.\n\n\n## Building models and seeding our database\n\nNow, let’s build our database structure. We’ll use again Laravel CLI for that.\nRun this command: \n\n```\nphp artisan make:model Product -mc\n```\n\nThe above command will generate the Product model as well as its migration and its controller `ProductController.php`   for us.\n\nOpen your `Product.php` file and paste this:\n\n``` php\n    //realtime_search_pusher/app/Product.php\n    \n    \u003c?php\n    \n    namespace App;\n    \n    use Illuminate\\Database\\Eloquent\\Model;\n    \n    class Product extends Model {\n    \n        //\n        protected $fillable = ['name', 'description', 'price', 'image'];\n    }\n```\n\n\nNext copy and paste this piece of code in your product migration file: \n\n``` php\n    //realtime_search_pusher/database/migrations/*_create_products_table.php\n    \n    \u003c?php\n    \n    use Illuminate\\Database\\Migrations\\Migration;\n    use Illuminate\\Database\\Schema\\Blueprint;\n    use Illuminate\\Support\\Facades\\Schema;\n    \n    class CreateProductsTable extends Migration\n    {\n        /**\n         * Run the migrations.\n         *\n         * @return void\n         */\n        public function up()\n        {\n            Schema::create('products', function (Blueprint $table) {\n                $table-\u003eincrements('id');\n                $table-\u003estring('name');\n                $table-\u003einteger('price');\n                $table-\u003estring('image');\n                $table-\u003estring('description');\n                $table-\u003etimestamps();\n            });\n        }\n    \n        /**\n         * Reverse the migrations.\n         *\n         * @return void\n         */\n        public function down()\n        {\n            Schema::dropIfExists('products');\n        }\n    }\n```\n\nThen run `php artisan migrate` to run the migration.\n\nNow, we’ll seed our database to avoid having to populate it manually because it can be tedious.\n\nExecute this command  `php artisan make:factory ProductFactory` to generate a factory for our Product model. Next copy and paste the following code inside our  `ProductFactory.php` file\n\n``` php\n    //realtime_search_pusher/database/factories/ProductFactory.php\n    \u003c?php\n    \n    use App\\Product;\n    use Faker\\Generator as Faker;\n    \n    $factory-\u003edefine(Product::class, function (Faker $faker) {\n        return [\n            'name'=\u003e $faker-\u003ename,\n            'price' =\u003e $faker-\u003enumberBetween(25, 850),\n            'description' =\u003e $faker-\u003etext(100),\n            'image' =\u003e $faker-\u003eimageUrl(850, 640, 'food',true),\n            //\n        ];\n    });\n```\n\nOur  `ProductFactory.php` sets a value for each of our Product model field as you can see in the above code.\nThe last step in this section is to tell Laravel to use our `ProductFactory`. Let’s do that, paste this code inside your `DatabaseSeeder.php` file: \n\n``` php\n    //realtime_search_pusher/database/seeds/DatabaseSeeder.php\n    \u003c?php\n    \n    use Illuminate\\Database\\Seeder;\n    \n    class DatabaseSeeder extends Seeder\n    {\n        /**\n         * Seed the application's database.\n         *\n         * @return void\n         */\n        public function run()\n        {\n            factory(App\\Product::class, 25)-\u003ecreate();\n        }\n    }\n```\n\nWe generate 25 instances of our  Product model. Finally run this command so that Laravel can seed the database with the factory we define: `php artisan db:seed`.\n\nIf you check your database, you can see that your database has been populated as well and it contains 25 rows. Great isn’t it!\n\n\n## Defining routes and creating the ProductController\n\nIn this section we’ll define our app endpoints and define the logic behind our `ProductController.php` .\n\nLet’s create a `get` route named `search` (which will be called when the user attempts to search for products), and another `get` route named `products` to fetch our products from database. Paste the following into `api.php`:\n\n``` php\n    //realtime_search_pusher/routes/api.php\n    use Illuminate\\Support\\Facades\\Route;\n    \n    Route::get('search','ProductController@search');\n    Route::get('products','ProductController@get');\n```\n\nWe should also define a get route named  `/` to return our app view. Copy this code and replace the existing one inside your `web.php` file:\n\n``` php\n    //realtime_search_pusher/routes/web.php\n    Route::get('/', function () {\n        return view('search');\n    });\n```\n\nNow let’s define our controller logic. Our controller functions will be responsible for actions to handle when some requests reach our API endpoints.\n\nOpen your `ProductController` file and paste the following code:\n\n``` php\n    //realtime_search_pusher/app/Http/Controllers/ProductController.php\n    \n    \u003c?php\n    \n    namespace App\\Http\\Controllers;\n    \n    use App\\Events\\SearchEvent;\n    use App\\Product;\n    use Illuminate\\Http\\Request;\n    \n    class ProductController extends Controller\n    {\n        //\n        public function search(Request $request)\n        {\n            $query = $request-\u003equery('query');\n            $products = Product::where('name', 'like', '%' . $query . '%')\n                -\u003eorWhere('description', 'like', '%' . $query . '%')\n                -\u003eget();\n    \n            //broadcast search results with Pusher channels\n            event(new SearchEvent($products));\n    \n            return response()-\u003ejson(\"ok\");\n        }\n    \n        //fetch all products\n        public function get(Request $request)\n        {\n            $products = Product::all();\n            return response()-\u003ejson($products);\n        }\n    }\n```\n\nIn the above code we have two functions `get`  and `search`:\n\n\n- `get` - this function returns all existing posts in our database\n- `search` - this function is a bit tricky. It gets the query sent in the request and returns every product whose name or description contains it. This is handled there:\n\n``` php\n    Product::where('name', 'like', '%' . $query . '%')\n                -\u003eorWhere('description', 'like', '%' . $query . '%')\n```\n\n### Emit event\n\nWell you may have noticed this line: `event(new SearchEvent($products))`. What is its purpose?\nIt broadcasts an event with search results to the client-side of our app using [Laravel broadcasting](https://laravel.com/docs/5.7/broadcasting). We’ll see how to create this event in the next part of the tutorial.\n\n## Create a search event with broadcasting\n\nBroadcast is a fancy way to say emit.\nOur  `SearchEvent` event will be emitted whenever the user searches for a product or initiates a search. Enough talk , let’s focus on the code. Let’s create our `SearchEvent` by running the following command in your terminal: `php artisan make:event SearchEvent`.\n\nNow open your `SearchEvent` file and paste the following:\n\n``` php\n    //realtime_search_pusher/app/Events/SearchEvent.php\n    \n    \u003c?php\n    \n    namespace App\\Events;\n    \n    use Illuminate\\Broadcasting\\Channel;\n    use Illuminate\\Broadcasting\\InteractsWithSockets;\n    use Illuminate\\Contracts\\Broadcasting\\ShouldBroadcastNow;\n    use Illuminate\\Foundation\\Events\\Dispatchable;\n    use Illuminate\\Queue\\SerializesModels;\n    \n    class SearchEvent implements ShouldBroadcastNow\n    {\n        use Dispatchable, InteractsWithSockets, SerializesModels;\n    \n        /**\n         * Create a new event instance.\n         *\n         * @return void\n         */\n    \n        public $products;\n    \n        public function __construct($products)\n        {\n            //\n            $this-\u003eproducts = $products;\n        }\n    \n        /**\n         * Get the channels the event should broadcast on.\n         *\n         * @return \\Illuminate\\Broadcasting\\Channel|array\n         */\n    \n        /**\n         * @return string\n         */\n        public function broadcastAs()\n        {\n            return 'searchResults';\n        }\n    \n        public function broadcastOn()\n        {\n            return new Channel('search');\n        }\n    }\n```\n\nOur class constructor initializes a set of products that are nothing but the search results from the database. We have two additional functions that may seem strange to you:\n\n\n- `broadcastAs`: customizes the broadcast name because by default Laravel uses the event’s class name.\n- `broadcastOn`: defines the channel `search` (which we’ll set up further on the tutorial) on which our event should be broadcast.\n\n\n### Broadcasting configuration\n\nAccording to Laravel documentation about [event broadcasting](https://laravel.com/docs/5.7/broadcasting), before broadcasting any events, you will first need to register the `App\\Providers\\BroadcastServiceProvider`. In fresh Laravel applications, you only need to uncomment this provider in the `providers` array of your `../config/app.php` configuration file. This provider will allow you to register the broadcast authorization routes and callbacks.\n\nIf this is done, you have to tell Laravel to use Pusher to broadcast events. Open your `.env` file and ensure you have this line: `*BROADCAST_DRIVER*``=pusher`\n\nAs we are broadcasting our events over [Pusher](https://pusher.com), we should install the Pusher PHP SDK using the Composer package manager:\n\n```\n    composer require pusher/pusher-php-server \"~3.0\"\n```\n\n### Setting up the broadcast channel\n\nLaravel broadcasts events on well defined channels. As said above our event should be broadcast on `search` channel. It’s time to set it up. Paste the following code in your `channels.php` file: \n\n``` php\n    //realtime_search_pusher/routes/channels.php\n    \n    Broadcast::channel('search', function () {\n        return true;\n    });\n```\n\nAs we aren’t using Laravel auth, we return `true` in the function callback so that everybody can use this channel to broadcast events.\n\n### Set up Laravel Echo\n\nWe’ll use [Laravel Echo](https://laravel.com/docs/5.7/broadcasting#installing-laravel-echo) to consume our events on the client-side.\n\nOpen your `resources/js/bootstrap.js`  file and uncomment this section of the code:\n\n``` javascript\n    import Echo from 'laravel-echo'\n    \n    window.Pusher = require('pusher-js');\n    \n    window.Echo = new Echo({\n        broadcaster: 'pusher',\n        key: process.env.MIX_PUSHER_APP_KEY,\n        cluster: process.env.MIX_PUSHER_APP_CLUSTER,\n        encrypted: false\n    });\n```\n\nThe above code sets up Laravel Echo with Pusher. This will make our app aware of events broadcasted, and Laravel Echo will consume our events \n\nOur app is ready to broadcast and consume events in realtime using Pusher channels. Let’s focus now on the frontend of your app.\n\n\n## Set up Vuex store\n\nWe’ll be using the [Vuex](https://vuex.vuejs.org) library to centralize our data and control the way it is mutated throughout our application.\n\n### Create our state\n\nVuex state is a single object that contains all our application data. So let’s create  `../resources/js/store/state.js`  and paste this code inside:\n\n\n``` javascript    \n    let state = {\n        products: []\n    }\n    export default  state\n```\n\nThe code above is straightforward. The `products`  key is an array  responsible to store our database products\n\n### Create our getters\n\nWith help of getters we can compute derived based on our data store state. Create  `../resources/js/store/getters.js`  and paste this code inside\n\n``` javascript\n    let getters = {\n        products: state =\u003e {\n            return state.products\n        }\n    }\n    \n    export default getters\n```\n\n### Create our mutations\n\nMutations allow us to perform some changes on our data. Create `../resources/js/store/mutations.js` and paste this piece of code inside:\n\n``` javascript\n    let mutations = {\n        SET_PRODUCTS(state, products) {\n            state.products = products\n        }\n    }\n    \n    export default mutations\n```\n\nOur mutations object has a `SET_PRODUCTS` function with two arguments `state` and `products`; this function assigns the `products` array to our state products key.\n\n### Create our actions\n\nVuex actions allow us to perform asynchronous operations over our data. Create the file `../resources/js/store/actions.js`  and  paste the following code:\n\n``` javascript\n    let actions = {\n        SEARCH_PRODUCTS({commit}, query) {\n            let params = {\n                query\n            };\n            axios.get(`/api/search`, {params})\n                .then(res =\u003e {\n                    if (res.data === 'ok')\n                        console.log('request sent successfully')\n    \n                }).catch(err =\u003e {\n                console.log(err)\n            })\n        },\n        GET_PRODUCTS({commit}) {\n            axios.get('/api/products')\n                .then(res =\u003e {\n                    {\n                        commit('SET_PRODUCTS', res.data)\n                    }\n                })\n                .catch(err =\u003e {\n                    console.log(err)\n                })\n        }\n    }\n    \n    export default actions\n```\n\nWe have defined two actions and each of them responsible of a single operation, either products search or products search. They both perform asynchronous calls to our API routes. \n\n\n- `SEARCH_PRODUCTS`  sends a get request to our `/api/search`  endpoint to get products. This action is dispatched whenever the user is searching for something.\n\n- `GET_PRODUCTS` makes a get request to our `api/products` endpoint to get our database products and commits the request result with `SET_PRODUCTS` mutation.\n\n### Set up our store with Vue\n\nCreate the file `../resources/js/store/index.js` and paste this code inside:\n\n\n``` javascript    \n    import Vue from 'vue'\n    import Vuex from 'vuex'\n    import actions from './actions'\n    import mutations from './mutations'\n    import getters from './getters'\n    import state from \"./state\";\n    \n    Vue.use(Vuex);\n    \n    export default new Vuex.Store({\n        state,\n        mutations,\n        getters,\n        actions\n    })\n```\n\nThen, we export our store and add it to the Vue instance. Add this code to your `../resouces/js/app.js`  file.\n\n``` javascript\n    require('./bootstrap');\n    window.Vue = require('vue');\n    \n    import store from './store/index'\n    \n    Vue.component('searchbar', require('./components/Searchbar'));\n    Vue.component('product', require('./components/Product'))\n    Vue.component('products', require('./components/Products'))\n    \n    const app = new Vue({\n        el: '#app',\n        store\n    });\n```\n\nThe previous code also globally registers three Vue components, `Searchbar.vue` ,`Product.vue` and  `Products.vue` that we’ll build in the next part of this tutorial.\n\n\n## Building Vue components\n\nWe’ll build three Vue components for our app, a `Searchbar` component, a `Product` component and a `Products` component, each of them responsible for a single functionality.\n\n### Create the Product.vue component\n\nThe  `Product.vue` component is responsible for encapsulating details about a single product instance from the database and rendering it in a proper and styled way.\nPaste the following inside your `Product.vue` component.\n\n``` html\n    //../resources/js/components/Product.vue\n    \n    \u003ctemplate\u003e\n        \u003cdiv class=\"card\"\u003e\n            \u003cimg class=\"card-img-top\" :src=\"product.image\" :alt=\"product.name\"\u003e\n            \u003cdiv class=\"card-body\"\u003e\n                \u003ch5 class=\"card-title\"\u003e{{product.name}}\u003c/h5\u003e\n                \u003cp class=\"card-text\"\u003e{{product.description}}\u003c/p\u003e\n                \u003cspan class=\"text-danger font-weight-bold\"\u003e${{product.price}}\u003c/span\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n        export default {\n            name: \"Product\",\n            props: ['product']\n        }\n    \u003c/script\u003e\n    \n    \u003cstyle scoped\u003e\n        .card {\n            cursor: pointer;\n            margin-bottom: 8px;\n        }\n    \u003c/style\u003e\n```\n\nOur  `Product.vue` component takes a `product` property whose details we render in the component body. This code is straightforward as you may have noticed it. We are using the [Bootstrap framework](https://getbootstrap.com) to style our component.\n\n\n### Create the Products.vue component\n\nThis component will render products items from database. It’s that simple.\nSo create your  `Products.vue` component and paste this code inside:\n\n``` javascript\n    //../resources/js/components/Products.vue\n    \n    \u003ctemplate\u003e\n        \u003cdiv class=\"container\"\u003e\n            \u003cdiv class=\"row\" v-for=\"products in groupedProducts\"\u003e\n                \u003cdiv class=\"col-md-3 col-sm-6\" v-for=\"product in products\"\u003e\n                    \u003cproduct class=\"animated fadeIn\" :product=\"product\"\u003e\u003c/product\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"col w-100\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n        import {mapGetters} from 'vuex'\n        import product from '../components/Product'\n    \n        export default {\n            name: \"Products\",\n            components: {\n                product\n            },\n            mounted() {\n                this.$store.dispatch('GET_PRODUCTS')\n    \n                window.Echo.channel('search')\n                    .listen('.searchResults', (e) =\u003e {\n                        this.$store.commit('SET_PRODUCTS', e.products)\n                    })\n    \n            },\n            computed: {\n                groupedProducts() {\n                    return _.chunk(this.products, 4);\n                },\n                ...mapGetters([\n                    'products'\n                ])\n            }\n        }\n    \u003c/script\u003e\n```\n\nThis component has a `groupedProducts` computed property which splits our products array and makes group of six.\n\nIn the  `mounted` hook function  we dispatch the  `GET_PRODUCTS` action, and we use Vuex helper function  `…mapGetters()` to access our products state. \n\n\nWe also use the Echo library here to listen to events.\n\n``` javascript\n    window.Echo.channel('search')\n                    .listen('.searchResults', (e) =\u003e {\n                        this.$store.commit('SET_PRODUCTS', e.products)\n    \n                        console.log(e)\n                    })\n```\n\nWe first subscribe to `search` channel, then we listen to the `searchResults` event triggered when the user searches for something. Then we commit `SET_PRODUCTS` mutation with the event payload. Yes it’s that simple.\n\n\n\u003e Note: You must append a dot to the event name so Laravel Echo can listen to your event.\n\u003e Otherwise you won’t be able to listen to any event.\n\n### Create our Searchbar.vue component\n\nThis component contains the input field with a search Button. Whenever the user enters their search query inside the input field, we’ll make a request to our backend to get realtime results.\n\nCopy and paste the following code in your `Searchbar.vue` component:\n\n``` javascript\n    \u003ctemplate\u003e\n        \u003cdiv class=\"container\"\u003e\n            \u003cdiv class=\"input-group mb-3\"\u003e\n                \u003cinput v-model=\"query\" type=\"text\" class=\"form-control\" placeholder=\"Product name or description\"\n                       aria-label=\"Product name or description\"\n                       aria-describedby=\"basic-addon2\"\u003e\n                \u003cdiv class=\"input-group-append\"\u003e\n                    \u003cbutton class=\"btn btn-primary\" @click=\"searchProducts\" @keyup.enter=\"searchProducts\" type=\"button\"\u003e\n                        Search\n                    \u003c/button\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n        export default {\n            name: \"Searchbar\",\n            data() {\n                return {\n                    query: '',\n                }\n            },\n            watch: {\n                query: {\n                    handler: _.debounce(function () {\n                        this.searchProducts()\n                    }, 100)\n                }\n            },\n            methods: {\n                searchProducts() {\n                    this.$store.dispatch('SEARCH_PRODUCTS', this.query)\n                }\n            }\n        }\n    \u003c/script\u003e\n    \n    \u003cstyle scoped\u003e\n    \n    \u003c/style\u003e\n```\n\nWe bind the `query` data to our input field using Vue.js `v-model`, and we watch it. Whenever the query data changes we wait 100 ms and dispatch `SEARCH_PRODUCTS` action. This is what the following code is doing: \n\n``` javascript\n    query: {\n                    handler: _.debounce(function () {\n                        this.searchProducts()\n                    }, 100)\n                }\n```\n\n## Finalize the app\n\n Now, let’s create our `search.blade.php` file which contains our three Vue components. Paste this code inside:\n\n``` php\n    //../resources/views/search.blade.php\n    \n    \u003c!doctype html\u003e\n    \u003chtml lang=\"en\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"UTF-8\"\u003e\n        \u003cmeta name=\"viewport\"\n              content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u003e\n    \n        \u003cmeta name=\"csrf-token\" content=\"{{ csrf_token() }}\"\u003e\n    \n        \u003clink rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.3.1/css/all.css\"\n              integrity=\"sha384-mzrmE5qonljUremFsqc01SB46JvROS7bZs3IO2EmfFsd15uHvIt+Y8vEf7N7fWAU\" crossorigin=\"anonymous\"\u003e\n    \n        \u003clink href=\"https://fonts.googleapis.com/css?family=Montserrat\" rel=\"stylesheet\"\u003e\n        \u003clink href=\"https://fonts.googleapis.com/css?family=Lato\" rel=\"stylesheet\"\u003e\n        {{--bxslider--}}\n    \n        \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.5.2/animate.min.css\"/\u003e\n    \n        \u003clink rel=\"stylesheet\" href=\"{{mix('css/app.css')}}\"\u003e\n        \u003ctitle\u003eRealtime search engine with Pusher and Laravel\u003c/title\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \n    \n    \u003cdiv id=\"app\"\u003e\n    \n        \u003cdiv class=\"container\"\u003e\n            \u003ch5 class=\"text-center\" style=\"margin-top: 32px\"\u003eRealtime search engine with Laravel and Pusher\u003c/h5\u003e\n            \u003cbr\u003e\u003cbr\u003e\n            \u003csearchbar\u003e\u003c/searchbar\u003e\n            \u003cproducts\u003e\u003c/products\u003e\n        \u003c/div\u003e\n    \n    \u003c/div\u003e\n    \n    \u003cscript async src=\"{{mix('js/app.js')}}\"\u003e\u003c/script\u003e\n    \n    \u003c/body\u003e\n    \n    \u003c/html\u003e\n```\n\nWe are almost done. Now open your terminal and run `npm run dev` to build your app in a proper way. This can take a few seconds. After this step run `php artisan serve` and  open your browser at `localhost:8000`  to see your app working fine. Now try searching a product name or its description in the searchbar, you should get realtime results for your search. You are now a boss 😎\n\n![laravel-search-demo](//images.ctfassets.net/1es3ne0caaid/RmQBvTdxAqmkQ2eSeGWS0/fc1f9b2690eb152029996d91de3367fb/laravel-search-demo.gif)\n\n\u003e **Note**: If you encounter  a 500 error when trying to search, it’s possible that you have to disable Pusher encryption. Open these files  `../config/broadcasting.php` and  `../resources/js/bootstrap.js` and make sure you disable Pusher encryption `encrypted: false` in both of them.\n\n\n## Conclusion\n\nIn this tutorial we’ve created a realtime search engine using Laravel, Vue.js, and Pusher to provide realtime functionality. You can think up new ideas to extend the application. It’ll be fun to see what you come up with. The source code for this tutorial is available on  [GitHub](https://github.com/Ethiel97/realtime_search_pusher) here.","metaTitle":"Build a live search feature with Laravel and Vue.js","metaDescription":"Use Laravel, Vue.js and SQLite to create a simple live search feature. Users will see their results being filtered and returned as they type."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3SVlbTIulOyssysKCCa40a","type":"Entry","createdAt":"2018-10-02T18:08:59.023Z","updatedAt":"2018-10-02T18:08:59.023Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a CMS with Laravel and Vue - Part 3: Building an API","url":"cms-laravel-vue-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/laravel-vue-cms","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-10-02","description":"This six part tutorial series will guide you through building a CMS using Laravel and Vue.js. The final product will include authentication, user roles, post creation and editing, and a realtime comments feature. In part three, create a simple API to handle CRUD operations.","prerequisite":"Basic knowledge of Laravel and Vue will be helpful. ","content":"In the [previous part of this series](https://pusher.com/tutorials/cms-laravel-vue-part-2), we initialized the posts resource and started building the frontend of the CMS. We designed the front page that shows all the posts and the single post page using Laravel’s templating engine, Blade. \n\nIn this part of the series, we will start building the API for the application. We will create an API for CRUD operations that an admin will perform on posts and we will test the endpoints using Postman.\n\n\u003e The source code for this project is available [here](https://github.com/neoighodaro/laravel-vue-cms) on GitHub.\n\n## Prerequisites\n\nTo follow along with this series, a few things are required:\n\n- Basic knowledge of PHP.\n- Basic knowledge of the [Laravel](https://laravel.com) framework.\n- Basic knowledge of JavaScript (ES6 syntax).\n- Basic knowledge of [Vue](https://vuejs.org).\n- [Postman](https://www.getpostman.com/) installed on your machine.\n\n## Building the API using Laravel’s API resources\n\nThe Laravel framework makes it very easy to build APIs. It has an [API resources](https://laravel.com/docs/5.6/eloquent-resources) feature that we can easily adopt in our project. You can think of API resources as a transformation layer between Eloquent models and the JSON responses that will be sent back by our API.\n\n### Allowing mass assignment on specified fields\n\nSince we are going to be performing CRUD operations on the posts in the application, we have to explicitly specify that it’s permitted for some fields to be mass-assigned data. For security reasons, Laravel [prevents mass assignment](https://laravel.com/docs/5.6/eloquent#mass-assignment) of data to model fields by default.\n\nOpen the `Post.php` file and include this line of code:\n\n``` php\n    // File: ./app/Post.php\n    protected $fillable = ['user_id', 'title', 'body', 'image'];\n```\n\n### Defining API routes\n\nWe will use the `apiResource()`method to generate only API routes. Open the `routes/api.php` file and add the following code:\n\n```\n    // File: ./routes/api.php\n    Route::apiResource('posts', 'PostController');\n```\n\n\u003e Because we will be handling the API requests on the `/posts` URL using the `PostController`, we will have to include some additional action methods in our post controller.\n  \n\n### Creating the Post resource\n\nAt the beginning of this section, we already talked about what Laravel’s API resources are. Here, we create a resource class for our `Post` model. This will enable us to retrieve `Post` data and return formatted JSON format.\n\nTo create a resource class for our `Post` model run the following command in your terminal:\n\n```\n    $ php artisan make:resource PostResource\n```\n\nA new `PostResource.php` file will be available in the `app/Http/Resources` directory of our application. Open up the `PostResource.php` file and replace the `toArray()` method with the following:\n\n``` php\n    // File: ./app/Http/Resources/PostResource.php\n    public function toArray($request)\n    {\n        return [\n            'id' =\u003e $this-\u003eid,\n            'title' =\u003e $this-\u003etitle,\n            'body' =\u003e $this-\u003ebody,\n            'image' =\u003e $this-\u003eimage,\n            'created_at' =\u003e (string) $this-\u003ecreated_at,\n            'updated_at' =\u003e (string) $this-\u003eupdated_at,\n        ];\n    }\n```\n\nThe job of this `toArray()` method is to convert our `P``ost` resource into an array. As seen above, we have specified the fields on our `Post` model, which we want to be returned as JSON when we make a request for posts.\n\nWe are also explicitly casting the dates, `created_at` and `update_at`, to strings so that they would be returned as date strings. The dates are normally an instance of [Carbon](https://carbon.nesbot.com/docs/).\n\nNow that we have created a resource class for our `Post` model, we can start building the API’s action methods in our `PostController` and return instances of the `PostResource` where we want.\n\n### Adding the action methods to the Post controller\n\nThe usual actions performed on a post include the following:\n\n1. Create - the process of creating a new post.\n2. Read - the process of reading one or more posts.\n3. Update - the process of updating an already published post.\n4. Delete - the process of deleting a post.\n\nIn the last article, we already implemented a kind of ‘Read’ functionality when we defined the `all` and `single` methods. These methods allow users to browse through posts on the homepage.\n\nIn this section, we will define the methods that will resolve our API requests for creating, reading, updating and deleting posts.\n\nThe first thing we want to do is import the `PostResource` class at the top of the `PostController.php` file:\n\n``` php\n    // File: ./app/Http/Controllers/PostController.php\n    use App\\Http\\Resources\\PostResource;\n```\n\n\u003e Because we created the `PostController` as a resource controller, we already have the resource action methods included for us in the `PostController.php` file, we will be updating them with fitting snippets of code.\n  \n\n### Building the handler action for the create operation\n\nIn the `PostController` update the `store()` action method with the code snippet below. It will allow us to validate and create a new post:\n\n``` php\n    // File: ./app/Http/Controllers/PostController.php\n    public function store(Request $request)\n    {\n        $this-\u003evalidate($request, [\n            'title' =\u003e 'required',\n            'body' =\u003e 'required',\n            'user_id' =\u003e 'required',            \n            'image' =\u003e 'required|mimes:jpeg,png,jpg,gif,svg',\n        ]);\n    \n        $post = new Post;\n    \n        if ($request-\u003ehasFile('image')) {\n            $image = $request-\u003efile('image');\n            $name = str_slug($request-\u003etitle).'.'.$image-\u003egetClientOriginalExtension();\n            $destinationPath = public_path('/uploads/posts');\n            $imagePath = $destinationPath . \"/\" . $name;\n            $image-\u003emove($destinationPath, $name);\n            $post-\u003eimage = $name;\n        }\n    \n        $post-\u003euser_id = $request-\u003euser_id;\n        $post-\u003etitle = $request-\u003etitle;\n        $post-\u003ebody = $request-\u003ebody;\n        $post-\u003esave();\n    \n        return new PostResource($post);\n    }\n```\n\nHere’s a breakdown of what this method does:\n\n1. Receives a new request.\n2. Validates the request.\n3. Creates a new post.\n4. Returns the post as a `PostResource`, which in turn returns a JSON formatted response.\n\n### Building the handler action for the read operations\n\nWhat we want here is to be able to read all the created posts or a single post. This is possible because the `apiResource()` method defines the API routes using standard REST rules.\n\nThis means that a `GET` request to this address, http://127.0.0.1:800/api/posts, should be resolved by the `index()` action method. Let’s update the `index` method with the following code:\n\n``` php\n    // File: ./app/Http/Controllers/PostController.php\n    public function index()\n    {\n        return PostResource::collection(Post::latest()-\u003epaginate(5));\n    }\n```\n\nThis method will allow us to return a JSON formatted collection of all of the stored posts. We also want to paginate the response as this will allow us to create a better view on the admin dashboard.\n\nFollowing the RESTful conventions as we discussed above, a `GET` request to this address, http://127.0.0.1:800/api/posts/id, should be resolved by the `show()` action method. Let’s update the method with the fitting snippet:\n\n``` php\n    // File: ./app/Http/Controllers/PostController.php\n    public function show(Post $post)\n    {\n        return new PostResource($post);\n    }\n```\n\nAwesome, now this method will return a single instance of a post resource upon API query.\n\n### Building the handler action for the update operation\n\nNext, let’s update the `update()` method in the `PostController` class. It will allow us to modify an existing post:\n\n``` php\n    // File: ./app/Http/Controllers/PostController.php\n    public function update(Request $request, Post $post)\n    {\n        $this-\u003evalidate($request, [\n            'title' =\u003e 'required',\n            'body' =\u003e 'required',\n        ]);\n    \n        $post-\u003eupdate($request-\u003eonly(['title', 'body']));\n        \n        return new PostResource($post);\n    }\n```\n\nThis method receives a request and a post `id` as parameters, then we use route model binding to resolve the `id` into an instance of a `Post`. First, we validate the `$request` attributes, then we update the title and body fields of the resolved post.\n\n### Building the handler action for the delete operation\n\nLet’s update the `destroy()` method in the `PostController` class. This method will allow us to remove an existing post:\n\n``` php\n    // File: ./app/Http/Controllers/PostController.php\n    public function destroy(Post $post)\n    {\n        $post-\u003edelete();\n        \n        return response()-\u003ejson(null, 204);\n    }\n```\n\nIn this method, we resolve the `Post` instance, then delete it and return a 204 response code.\n\nOur methods are complete. We have a method to handle our CRUD operations, however, we haven’t built the frontend for the admin dashboard.\n\nAt the end of the second article, we defined the `HomeController@index()` action method like this:\n\n``` php\n    public function index(Request $request)\n    {\n        if ($request-\u003euser()-\u003ehasRole('user')) {\n            return view('home');\n        }\n        \n        if ($request-\u003euser()-\u003ehasRole('admin')) {\n            return redirect('/admin/dashboard');\n        }\n    }\n```\n\nThis allowed us to redirect regular users to the view `home`, and admin users to the URL `/admin/dashboard`. At this point in this series, a visit to `/admin/dashboard` will fail because we have neither defined it as a route with a handler Controller nor built a view for it.\n\nLet’s create the `AdminController` with this command:\n\n```\n    $ php artisan make:controller AdminController\n```\n\nWe will add the `/admin/` route to our `routes/web.php` file:\n\n``` php\n    Route::get('/admin/{any}', 'AdminController@index')-\u003ewhere('any', '.*');\n```\n\n\u003e Note that we wrote `/admin/{any}` here because we intend to serve every page of the admin dashboard using the Vue router. When we start building the admin dashboard in the next article, we will let Vue handle all the routes of the `/admin` pages.\n  \n\nLet’s update the `AdminController.php` file to use the auth middleware and include an `index()` action method:\n\n``` php\n    // File: ./app/Http/Controllers/AdminController.php\n    \u003c?php \n    \n    namespace App\\Http\\Controllers;\n    \n    class AdminController extends Controller\n    {\n        public function __construct()\n        {\n            $this-\u003emiddleware('auth');\n        }\n        \n        public function index()\n        {\n            if (request()-\u003euser()-\u003ehasRole('admin')) {\n                return view('admin.dashboard');\n            }\n    \n            if (request()-\u003euser()-\u003ehasRole('user')) {\n                return redirect('/home');\n            }\n        }\n    }\n```\n\nIn the `index()`action method, we included a snippet that will ensure that only admin users can visit the admin dashboard and perform CRUD operations on posts.\n\nWe will not start building the admin dashboard in this article but will test that our API works properly. We will use Postman to make requests to the application.\n\n\n## Testing the application\n\nLet’s test that our API works as expected. We will, first of all, serve the application using this command:\n\n```\n    $ php artisan serve\n```\n\nWe can visit http://localhost:8000 to see our application and there should be exactly two posts available; these are the posts we seeded into the database during the migration:\n\n![laravel-vue-cms-demo-part-3](//images.ctfassets.net/1es3ne0caaid/1BfJKa5bwIwc8c44iyakIE/6e6cc5f832f8aeadf1236a09c7a2fb52/laravel-vue-cms-demo-part-3.gif)\n\n\u003e When testing with Postman always set the `Content-Type` header to `application/json`.  \n\nNow let’s create a new post over the API interface using Postman. Send a `POST` request as seen below:\n\n![laravel-vue-cms-postman-1](//images.ctfassets.net/1es3ne0caaid/4XhZDLkUL6SOQw6w42Mww0/b45e7b991d8f8f5ad0f61b4d9bd8c75f/laravel-vue-cms-postman-1.png)\n\nNow let’s update this post we just created. In Postman, we will pass only the `title` and `body` fields to a `PUT` request. \n\nTo make it easy, you can just copy the payload below and use the **raw** request data type for the **Body**:\n\n```\n    {\n      \"title\": \"We made an edit to the Post on APIs\",\n      \"body\": \"To a developer, 'What's an API?' might be a straightforward - if not exactly simple - question. But to anyone who doesn't have experience with code. APIs can come across as confusing or downright intimidating.\"\n    }\n```\n\n![laravel-vue-cms-postman-2](//images.ctfassets.net/1es3ne0caaid/4uIqfXRt56Qs8a4mOUYQum/0d17e9c6d4772b614c56c97b1f2772cc/laravel-vue-cms-postman-2.png)\n\n\u003e We could have used the PATCH method to make this update, the PUT and PATCH HTTP verbs both work well for editing an already existing item.\n  \nFinally, let’s delete the post using Postman:\n\n![laravel-vue-cms-postman-3](//images.ctfassets.net/1es3ne0caaid/5OEcbB7TLG2Y8MqisYuOgs/1599eff3decf48d53438db754cbf6b84/laravel-vue-cms-postman-3.png)\n\nWe are sure the post is deleted because the response status is `204 No Content` as we specified in the `PostController`.\n\n## Conclusion\n\nIn this chapter, we learned about Laravel’s API resources and we created a resource class for the Post model. We also used the `apiResources()` method to generate API only routes for our application. We wrote the methods to handle the API operations and tested them using Postman.\n\nIn the next part, we will build the admin dashboard and develop the logic that will enable the admin user to manage posts over the API.\n\nThe source code for this project is available [here](https://github.com/neoighodaro/laravel-vue-cms) on Github.","metaTitle":"Build a CMS with Laravel and Vue - Part 3","metaDescription":"Use Laravel and Vue.js to create a basic CMS. The final product will include authentication, user roles, post creation and editing, and a realtime comments feature. In part three, build the API to handle user actions."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5v7yV1CqpqAYYe6Wqs6Wkg","type":"Entry","createdAt":"2018-10-01T19:56:35.899Z","updatedAt":"2018-10-01T19:56:35.899Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a CMS with Laravel and Vue - Part 2: Implementing posts","url":"cms-laravel-vue-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/laravel-vue-cms","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-10-01","description":"This six part tutorial series will guide you through building a CMS using Laravel and Vue.js. The final product will include authentication, user roles, post creation and editing, and a realtime comments feature. In part two, add support for posts and start building the frontend.","prerequisite":"Basic knowledge of Laravel and Vue will be helpful. ","content":"In the [previous part of this series](https://pusher.com/tutorials/cms-laravel-vue-part-1), we set up user authentication and role authorization but we didn’t create any views for the application yet. In this section, we will create the `Post` model and start building the frontend for the application.\n\nOur application allows different levels of accessibility for two kinds of users; the regular user and admin. In this chapter, we will focus on building the view that the regular users are permitted to see.\n\nBefore we build any views, let’s create the `Post` model as it is imperative to rendering the view. \n\n\n\u003e The source code for this project is available [here](https://github.com/neoighodaro/laravel-vue-cms) on GitHub.\n\n\n## Prerequisites\n\nTo follow along with this series, a few things are required:\n\n\n- Basic knowledge of PHP.\n- Basic knowledge of the [Laravel](https://laravel.com) framework.\n- Basic knowledge of JavaScript (ES6 syntax).\n- Basic knowledge of [Vue](https://vuejs.org).\n- [Postman](https://www.getpostman.com/) installed on your machine.\n\n\n## Setting up the Post model\n\nWe will create the `Post` model with an associated resource controller and a migration file using this command:\n\n```\n    $ php artisan make:model Post -mr\n```\n\n\u003e We added the `r` flag because we want the controller to be a resource controller. The `m` flag will generate a migration for the model.\n\nLet’s navigate into the `database/migrations` folder and update the `CreatePostsTable` class that was generated for us:\n\n``` php\n    // File: ./app/database/migrations/*_create_posts_table.php\n    \u003c?php \n    \n    // [...]\n    \n    class CreatePostsTable extends Migration\n    {\n        public function up()\n        {\n            Schema::create('posts', function (Blueprint $table) {\n                $table-\u003eincrements('id');\n                $table-\u003einteger('user_id')-\u003eunsigned();\n                $table-\u003estring('title');\n                $table-\u003etext('body');\n                $table-\u003ebinary('image')-\u003enullable();\n                $table-\u003etimestamps();\n            });\n        }\n    \n        public function down()\n        {\n            Schema::dropIfExists('posts');\n        }\n    }\n```\n\nWe included a `user_id` property because we want to create a relationship between the `User` and `Post` models. A `Post` also has an `image` field, which is where its associated image’s address will be stored.\n\n### Creating a database seeder for the Post table\n\nWe will create a new seeder file for the `posts` table using this command:\n\n```\n    $ php artisan make:seeder PostTableSeeder\n```\n\n\nLet’s navigate into the `database/seeds` folder and update the `PostTableSeeder.php` file:\n\n``` php\n    // File: ./app/database/seeds/PostsTableSeeder.php\n    \u003c?php \n    \n    use App\\Post;\n    use Illuminate\\Database\\Seeder;\n    \n    class PostTableSeeder extends Seeder\n    {\n        public function run()\n        {\n            $post = new Post;\n            $post-\u003euser_id = 2;\n            $post-\u003etitle = \"Using Laravel Seeders\";\n            $post-\u003ebody = \"Laravel includes a simple method of seeding your database with test data using seed classes. All seed classes are stored in the database/seeds directory. Seed classes may have any name you wish, but probably should follow some sensible convention, such as UsersTableSeeder, etc. By default, a DatabaseSeeder class is defined for you. From this class, you may use the  call method to run other seed classes, allowing you to control the seeding order.\";\n            $post-\u003esave();\n    \n            $post = new Post;\n            $post-\u003euser_id = 2;\n            $post-\u003etitle = \"Database: Migrations\";\n            $post-\u003ebody = \"Migrations are like version control for your database, allowing your team to easily modify and share the application's database schema. Migrations are typically paired with Laravel's schema builder to easily build your application's database schema. If you have ever had to tell a teammate to manually add a column to their local database schema, you've faced the problem that database migrations solve.\";\n            $post-\u003esave();\n        }\n    }\n```\n\nWhen we run this seeder, it will create two new posts and assign both of them to the admin user whose ID is 2. We are attaching both posts to the admin user because the regular users are only allowed to view posts and make comments; they can’t create a post.\n\nLet’s open the `DatabaseSeeder` and update it with the following code:\n\n``` php\n    // File: ./app/database/seeds/DatabaseSeeder.php\n    \u003c?php \n    \n    use Illuminate\\Database\\Seeder;\n    \n    class DatabaseSeeder extends Seeder\n    {\n        public function run()\n        {\n            $this-\u003ecall([\n                RoleTableSeeder::class,\n                UserTableSeeder::class,\n                PostTableSeeder::class,\n            ]);\n        }\n    }\n``` \n\n\u003e We created the `RoleTableSeeder` and `UserTableSeeder` files in the previous chapter.\n\nWe will use this command to migrate our tables and seed the database:\n\n```\n    $ php artisan migrate:fresh --seed\n```\n\n## Defining the relationships\n\nJust as we previously created a many-to-many relationship between the `User` and `Role` models, we need to create a different kind of relationship between the `Post` and `User` models. \n\nWe will define the relationship as a one-to-many relationship because a user will have many posts but a post will only ever belong to one user.\n\nOpen the `User` model and include the method below:\n\n``` php\n    // File: ./app/User.php\n    public function posts()\n    {\n        return $this-\u003ehasMany(Post::class);\n    }\n```\n\nOpen the `Post`  model and include the method below:\n\n``` php\n    // File: ./app/Post.php\n    public function user()\n    {\n        return $this-\u003ebelongsTo(User::class);\n    }\n```\n\n## Setting up the routes\n\nAt this point in our application, we do not have a front page with all the posts listed. Let’s create so anyone can see all of the created posts. Asides from the front page, we also need a single post page in case a user needs to read a specific post.\n\nLet’s include two new routes to our `routes/web.php` file:\n\n\n- The first route will match requests to the root of our application and will be handled by the `PostController@all` action:\n\n``` php \n    Route::get('/', 'PostController@all');\n```\n\n\u003e In the `routes/web.php` file, there will already be a route definition for the `/` address, you will have to replace it with the new route definition above.\n  \n- The second route will handle requests for specific `Post` items and will be handled by the `PostController@single` action:\n\n``` php\n    Route::get('/posts/{post}', 'PostController@single');\n```\n\nWith these two new routes added, here’s what the `routes/web.php` file should look like this:\n\n``` php\n    // File: ./routes/web.php\n    \u003c?php \n    \n    Auth::routes();\n    Route::get('/posts/{post}', 'PostController@single');\n    Route::get('/home', 'HomeController@index')-\u003ename('home');\n    Route::get('/', 'PostController@all');\n```\n\n## Setting up the Post controller\n\nIn this section, we want to define the handler action methods that we registered in the `routes/web.php` file so that our application know how to render the matching views. \n\nFirst, let’s add the `all()` method:\n\n``` php\n    // File: ./app/Http/Controllers/PostController.php\n    public function all()\n    {\n        return view('landing', [\n            'posts' =\u003e Post::latest()-\u003epaginate(5)\n        ]);\n    }\n```\n\nHere, we want to retrieve five created posts per page and send to the `landing` view. We will create this view shortly.\n\nNext, let’s add the `single()` method to the controller:\n\n``` php\n    // File: ./app/Http/Controllers/PostController.php\n    public function single(Post $post)\n    {\n        return view('single', compact('post'));\n    }\n```\n\nIn the method above, we used a feature of Laravel named [route model binding](https://laravel.com/docs/5.6/routing#route-model-binding) to map the URL parameter to a `Post` instance with the same ID. We are returning a `single` view, which we will create shortly. This will be the view for the single post page.\n\n\n## Building our views\n\nLaravel uses a templating engine called Blade for its frontend. We will use Blade to build these parts of the frontend before switching to Vue in the next chapter.\n\nNavigate to the `resources/views` folder and create two new Blade files:\n\n1. `landing.blade.php`\n2. `single.blade.php`\n\nThese are the files that will load the views for the landing page and single post page. Before we start writing any code in these files, we want to create a simple layout template that our page views can use as a base.\n\nIn the `resources/views/layouts` folder, create a Blade template file and call it `master.blade.php`. This is where we will define the inheritable template for our single and landing pages. \n\nOpen the `master.blade.php` file and update it with this code:\n\n``` php\n    \u003c!-- File: ./resources/views/layouts/master.blade.php --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml lang=\"en\"\u003e\n      \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\u003e\n        \u003cmeta name=\"description\" content=\"\"\u003e\n        \u003cmeta name=\"author\" content=\"Neo Ighodaro\"\u003e\n        \u003ctitle\u003eLaravelCMS\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\"\u003e\n        \u003cstyle\u003e \n        body {\n          padding-top: 54px;\n        }\n        @media (min-width: 992px) {\n          body {\n              padding-top: 56px;\n          }\n        }\n        \u003c/style\u003e\n      \u003c/head\u003e\n      \u003cbody\u003e\n        \u003cnav class=\"navbar navbar-expand-lg navbar-dark bg-dark fixed-top\"\u003e\n          \u003cdiv class=\"container\"\u003e\n            \u003ca class=\"navbar-brand\" href=\"/\"\u003eLaravelCMS\u003c/a\u003e\n            \u003cdiv class=\"collapse navbar-collapse\" id=\"navbarResponsive\"\u003e\n              \u003cul class=\"navbar-nav ml-auto\"\u003e\n                 @if (Route::has('login'))\n                    @auth\n                    \u003cli class=\"nav-item\"\u003e\n                         \u003ca class=\"nav-link\" href=\"{{ url('/home') }}\"\u003eHome\u003c/a\u003e\n                    \u003c/li\u003e\n                    \u003cli class=\"nav-item\"\u003e\n                      \u003ca class=\"nav-link\" href=\"{{ route('logout') }}\"\n                                           onclick=\"event.preventDefault();\n                                                         document.getElementById('logout-form').submit();\"\u003e\n                        Log out\n                      \u003c/a\u003e\n                      \u003cform id=\"logout-form\" action=\"{{ route('logout') }}\" method=\"POST\" style=\"display: none;\"\u003e\n                        @csrf\n                      \u003c/form\u003e\n                     \u003c/li\u003e\n                     @else\n                     \u003cli class=\"nav-item\"\u003e\n                         \u003ca class=\"nav-link\" href=\"{{ route('login') }}\"\u003eLogin\u003c/a\u003e\n                    \u003c/li\u003e\n                     \u003cli class=\"nav-item\"\u003e\n                         \u003ca class=\"nav-link\" href=\"{{ route('register') }}\"\u003eRegister\u003c/a\u003e\n                     \u003c/li\u003e\n                     @endauth\n                 @endif\n              \u003c/ul\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/nav\u003e\n      \n        \u003cdiv id=\"app\"\u003e\n            @yield('content')\n        \u003c/div\u003e\n    \n        \u003cfooter class=\"py-5 bg-dark\"\u003e\n          \u003cdiv class=\"container\"\u003e\n            \u003cp class=\"m-0 text-center text-white\"\u003eCopyright \u0026copy; LaravelCMS 2018\u003c/p\u003e\n          \u003c/div\u003e\n        \u003c/footer\u003e\n      \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nNow we can inherit this template in the `landing.blade.php` file, open it and update it with this code:\n\n``` php\n    {{-- File: ./resources/views/landing.blade.php --}}\n    @extends('layouts.master')\n    \n    @section('content')\n    \u003cdiv class=\"container\"\u003e\n      \u003cdiv class=\"row align-items-center\"\u003e\n        \u003cdiv class=\"col-md-8 mx-auto\"\u003e\n          \u003ch1 class=\"my-4 text-center\"\u003eWelcome to the Blog \u003c/h1\u003e\n      \n          @foreach ($posts as $post)\n          \u003cdiv class=\"card mb-4\"\u003e\n            \u003cimg class=\"card-img-top\" src=\" {!! !empty($post-\u003eimage) ? '/uploads/posts/' . $post-\u003eimage :  'http://placehold.it/750x300' !!} \" alt=\"Card image cap\"\u003e\n            \u003cdiv class=\"card-body\"\u003e\n              \u003ch2 class=\"card-title text-center\"\u003e{{ $post-\u003etitle }}\u003c/h2\u003e\n              \u003cp class=\"card-text\"\u003e {{ str_limit($post-\u003ebody, $limit = 280, $end = '...') }} \u003c/p\u003e\n              \u003ca href=\"/posts/{{ $post-\u003eid }}\" class=\"btn btn-primary\"\u003eRead More \u0026rarr;\u003c/a\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"card-footer text-muted\"\u003e\n              Posted {{ $post-\u003ecreated_at-\u003ediffForHumans() }} by\n              \u003ca href=\"#\"\u003e{{ $post-\u003euser-\u003ename }} \u003c/a\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n          @endforeach\n          \n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n    @endsection\n```\n\nLet’s do the same with the `single.blade.php` file, open it and update it with this code:\n\n``` php\n    {{-- File: ./resources/views/single.blade.php --}}\n    @extends('layouts.master')\n    \n    @section('content')\n    \u003cdiv class=\"container\"\u003e\n      \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-lg-10 mx-auto\"\u003e\n          \u003ch3 class=\"mt-4\"\u003e{{ $post-\u003etitle }} \u003cspan class=\"lead\"\u003e by \u003ca href=\"#\"\u003e {{ $post-\u003euser-\u003ename }} \u003c/a\u003e\u003c/span\u003e \u003c/h3\u003e\n          \u003chr\u003e\n          \u003cp\u003ePosted {{ $post-\u003ecreated_at-\u003ediffForHumans() }} \u003c/p\u003e\n          \u003chr\u003e\n          \u003cimg class=\"img-fluid rounded\" src=\" {!! !empty($post-\u003eimage) ? '/uploads/posts/' . $post-\u003eimage :  'http://placehold.it/750x300' !!} \" alt=\"\"\u003e\n          \u003chr\u003e\n          \u003cp class=\"lead\"\u003e{{ $post-\u003ebody }}\u003c/p\u003e\n          \u003chr\u003e\n          \u003cdiv class=\"card my-4\"\u003e\n            \u003ch5 class=\"card-header\"\u003eLeave a Comment:\u003c/h5\u003e\n            \u003cdiv class=\"card-body\"\u003e\n              \u003cform\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                  \u003ctextarea class=\"form-control\" rows=\"3\"\u003e\u003c/textarea\u003e\n                \u003c/div\u003e\n                \u003cbutton type=\"submit\" class=\"btn btn-primary\"\u003eSubmit\u003c/button\u003e\n              \u003c/form\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n    @endsection\n```\n\n## Testing the application\n\nWe can test the application to see that things work as we expect. When we serve the application, we expect to see a landing page and a single post page. We also expect to see two posts because that’s the number of posts we seeded into the database.\n\nWe will serve the application using this command:\n\n```\n    $ php artisan serve\n```\n\nWe can visit this [address](http://localhost:8000/) to see the application:\n\n![laravel-vue-cms-demo-part-2](//images.ctfassets.net/1es3ne0caaid/78sfkNiByMWAq2mouyWCUU/ea1ab3609a7f3c2e863dfbb066e7aab8/laravel-vue-cms-demo-part-2.gif)\n\nWe have used simple placeholder images here because we haven’t built the admin dashboard that allows CRUD operations to be performed on posts. \n\nIn the coming chapters, we will add the ability for an admin to include a custom image when creating a new post.\n\n## Conclusion\n\nIn this chapter, we created the `Post` model and defined a relationship on it to the `User` model. We also built the landing page and single page. \n\nIn the next part of this series, we will develop the API that will be the medium for communication between the admin user and the post items.\n\nThe source code for this project is available [here](https://github.com/neoighodaro/laravel-vue-cms) on Github.","metaTitle":"Build a CMS with Laravel and Vue - Part 2","metaDescription":"Use Laravel and Vue.js to create a basic CMS. The final product will include authentication, user roles, post creation and editing, and a realtime comments feature. In part two, start creating the frontend."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"yGesOlvSJEIGOeAIIeO66","type":"Entry","createdAt":"2018-09-28T19:43:10.389Z","updatedAt":"2020-06-19T13:23:49.825Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Implicit serverside rendering in Vue using Nuxt","url":"serverside-rendering-vue-nuxt","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1LI3SdX2O42ocywa6wsgC6","type":"Entry","createdAt":"2018-09-28T19:43:03.185Z","updatedAt":"2018-09-28T19:43:03.185Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Nuxt","url":"nuxt","type":"library","featured":false}}],"reviewDate":"2018-09-28","description":"This tutorial compares building a web app with Vue using Nuxt versus using plain Vue. It looks at accessibility issues, performance, and demonstrates how a static site produced by Nuxt, has a range of advantages.","prerequisite":"Have Vue CLI installed on your computer, preferably version 3\nBasic knowledge of JavaScript and Vue\nHave Node.js and NPM setup on your computer","content":"[Nuxt](https://nuxtjs.org/) came to answer the call of all [Vue](https://vuejs.org/) developers who wanted to render their application on the server. So, if the term — server-side rendering, is a bit confusing to you, do not think about it too much. It can be seen as the equivalent of loading static `.html` pages when you visit a URL.\n\nVue applications by default are rendered on the client. They are generated right there on the browser as you are going through them. This is the core of single page applications. It works excellently as you can build an application in which a user can traverse entirely without having to load any new page. \n\nEven when you reload a URL, the page comes up very quickly, and then the content loads up completely. The downside of this is that you will not have any content on the source of the page. If you are not very conversant with how search engines work, you will never fully understand the harm this does to your application, and potentially your business. Search engines will not be able to see your content, and you may never leave a footprint online.\n\nFor Vue applications, Nuxt will change all of that and render the page on the server, generating the necessary HTML and returning it to the user. Take a moment and think about how game-changing this will be for your application. 😃\n\n\n## Prerequisites\n\n1. Have [Vue CLI](https://cli.vuejs.org) installed on your computer, preferably version 3\n2. Basic knowledge of JavaScript and Vue\n3. Have [Node.js](https://nodejs.org/) and [NPM](https://www.npmjs.com/) setup on your computer\n\n\n## Setting up a Vue application\n\nWe will build a simple Vue application with Nuxt and another without Nuxt and we can compare the performance and output of both applications. Open your terminal and make two directories:\n\n```\n    $ mkdir with-nuxt\n    $ mkdir without-nuxt\n```\n\nChange your working directory to `without-nuxt` and install a Vue application using the [Vue CLI](https://cli.vuejs.org) tool.\n\n```\n    $ cd without-nuxt\n    $ vue create .\n```\n\n\u003e If you do not have Vue CLI installed, run the following command on your terminal to install it globally `npm install -g @vue/cli`\n\nFollow the prompt and finish it, the default options are fine. We are not going to create a new component. Vue is nice enough that each installation comes with example components, which is all we need. \n\nRun the application:\n\n```\n    $ npm run serve\n```\n\nOpen the application and view the source. This is what you will see:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/09/nuxt-vue-default-console.png\" alt=\"Vue default console\" width=\"972\" height=\"288\" class=\"alignnone size-full wp-image-5132\" /\u003e\n\nMeanwhile, this is what I see on my browser\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/09/nuxt-vue-default-homepage-964x600.png\" alt=\"Vue homepage\" width=\"770\" height=\"479\" class=\"alignnone size-large wp-image-5123\" /\u003e\n\nIf you are screaming “Accessibility issues are way off the chart!!!”, then we might be best friends without knowing. You can see from the view of the page that there is a lot of information on it. However, when we view the source (which is what users without browsers or browsers without JavaScript will see), you can see that many people are already disenfranchised before you even wrote any line of code.\n\nThis is a major issue no matter how you want to look at it. \n\n## Let’s do it with Nuxt\n\nSo, we will do this with Nuxt and see what results we get. From your terminal, change your working directory to the `with-nuxt` we created earlier and run the following command:\n\n```\n    $ vue init nuxt/starter .\n```\n\nFollow the prompt and finish the installation. Afterward, install the packages:\n\n```\n    $ npm install\n```\n\nThen start your Nuxt application\n\n```\n    $ npm run dev\n```\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/09/nuxt-vue-with-nuxt-homepage-960x600.png\" alt=\"Homepage with Nuxt\" width=\"770\" height=\"481\" class=\"alignnone size-large wp-image-5125\" /\u003e\n\nAnd the source:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/09/nuxt-vue-with-nuxt-console.png\" alt=\"Page source with Nuxt\" width=\"867\" height=\"331\" class=\"alignnone size-full wp-image-5124\" /\u003e\n\n\nNow you see that when you use Nuxt, your Vue pages are rendered before they are served. I no longer need JavaScript to at least get the basic juice your site is offering. There will still be some functionalities triggered by JavaScript, but at the core, the information I want to pass across has been communicated in plain text. Can I get a “Nuxt for president!”?\n\n\n## The architecture of Nuxt\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/09/architecture-of-nuxt-761x600.png\" alt=\"Nuxt app structure\" width=\"761\" height=\"600\" class=\"alignnone size-large wp-image-5127\" /\u003e\n\nStarting from the top, here is what each directory holds in a nutshell:\n\n`assets` - things like your SASS and JS files (for example, unminified bootstrap.js) which haven’t been compiled.\n`components` - the various Vue components of your application.\n`layouts` - these are like global components that will house other components.\n`middleware` - these are helper functions that are run before pages are rendered (for example, authentication checks).\n`node_modules` - all your node modules are here.\n`pages` - these are pages that are visible to the public with each file forming a route for your application (cool right? 😃).\n`plugins` - we add plugins we will want to be loaded as our application is instantiated (for example, modal plugin).\n`static` - this is for things like images, SVGs or even CSS files that will never need to be compiled\n`store` - all things [vuex](https://vuex.vuejs.org)\n\nOk. So there are configurations files. `package.json` file defines app dependencies and scripts while the `nuxt.config.js` file is the main configuration file. In here, you can set things like the mode of the app — if it will be a single page application (SPA) or not, define things like loaders and more.\n\n\n\u003e If you set `mode: 'spa'` in the `nuxt.config.js` file, you will no longer get generated HTML code when you load a URL.\n\n### Let’s make the second page\n\nIn the `pages` directory, create a file `second.vue` and add the following:\n\n``` language-html\n    /* pages/second.vue */\n    \n    \u003ctemplate\u003e\n      \u003csection class=\"container\"\u003e\n        \u003cdiv\u003e\n          \u003capp-logo/\u003e\n          \u003ch1 class=\"title\"\u003e\n            Second\n          \u003c/h1\u003e\n        \u003c/div\u003e\n      \u003c/section\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    import AppLogo from '~/components/AppLogo.vue'\n    \n    export default {\n      components: {\n        AppLogo\n      }\n    }\n    \u003c/script\u003e\n    \n    \u003cstyle\u003e\n    .container {\n      min-height: 100vh;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      text-align: center;\n    }\n    \n    .title {\n      font-family: \"Quicksand\", \"Source Sans Pro\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif; /* 1 */\n      display: block;\n      font-weight: 300;\n      font-size: 100px;\n      color: #35495e;\n      letter-spacing: 1px;\n    }\n    \n    .subtitle {\n      font-weight: 300;\n      font-size: 42px;\n      color: #526488;\n      word-spacing: 5px;\n      padding-bottom: 15px;\n    }\n    \n    .links {\n      padding-top: 15px;\n    }\n    \u003c/style\u003e\n```\n\nNow, go to `/second` on your browser, and you should see this:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/09/nuxt-second-page-960x600.png\" alt=\"Second page\" width=\"770\" height=\"481\" class=\"alignnone size-large wp-image-5130\" /\u003e\n\nSo you see that Nuxt automatically creates a route for us based on the name of the files we have in our `pages` directory. If you want a route like `/services/beta` you will do the following:\n\n- Create a subdirectory named `services` inside the `pages` directory\n- Create a file `beta.vue` inside the `services` directory\n\nLet’s give it a shot. Create the directory and create the `beta.vue` file. Then add the following to it:\n\n``` language-html\n    /* pages/services/beta.vue */\n    \n    \u003ctemplate\u003e\n      \u003csection class=\"container\"\u003e\n        \u003cdiv\u003e\n          \u003capp-logo/\u003e\n          \u003ch1 class=\"title\"\u003e\n            Beta\n          \u003c/h1\u003e\n        \u003c/div\u003e\n      \u003c/section\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    import AppLogo from '~/components/AppLogo.vue'\n    \n    export default {\n      components: {\n        AppLogo\n      }\n    }\n    \u003c/script\u003e\n    \n    \u003cstyle\u003e\n    .container {\n      min-height: 100vh;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      text-align: center;\n    }\n    \n    .title {\n      font-family: \"Quicksand\", \"Source Sans Pro\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif; /* 1 */\n      display: block;\n      font-weight: 300;\n      font-size: 100px;\n      color: #35495e;\n      letter-spacing: 1px;\n    }\n    \n    .subtitle {\n      font-weight: 300;\n      font-size: 42px;\n      color: #526488;\n      word-spacing: 5px;\n      padding-bottom: 15px;\n    }\n    \n    .links {\n      padding-top: 15px;\n    }\n    \u003c/style\u003e\n```\n\nIf you guessed I was going to copy the previous code and change the title text, then you already know me very well 😆.\n\nHere is the output of the page now\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/09/nuxt-beta-page-960x600.png\" alt=\"Beta page\" width=\"770\" height=\"481\" class=\"alignnone size-large wp-image-5128\" /\u003e\n\n## We have finished building… What next?\n\nDeployment obviously. We can either deploy a statically generated application or a server-side rendered application or even a regular SPA. \n\n### For a static generated application\n\nThis will make HTML pages out of our application. Run the following command:\n\n```\n    $ npm run generate\n```\n\nThis will create a `dist` directory with each of our pages regenerated as HTML files. \n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/09/nuxt-dist-directory-779x600.png\" alt=\"Dist directory\" width=\"770\" height=\"593\" class=\"alignnone size-large wp-image-5129\" /\u003e\n\nStop for a second and think about how fast your website is going to be with only static HTML pages. No database calls. No server-side language gymnastics. Nothing. Just plain old HTML 😃.\n\nNow, you can upload your `dist` directory to your server, and your application will work fine.\n\n## For serverside rendered pages\n\nHere, Nuxt will have to parse all your pages and generate the HTML for each one before sending it to the server. It has its upsides which we will consider later.\n\nRun the following commands:\n\n```\n    $ npm run build\n    $ npm run start\n```\n\nNow, your application will be available on the same port as before. You might ask “So, what changed?”. Excellent question. Take a closer look at the following screenshots\n\n**This was when we were in development mode**\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/09/vue-rebuild.png\" alt=\"In development\" width=\"571\" height=\"498\" class=\"alignnone size-full wp-image-5126\" /\u003e\n\nNotice how our pages are built every time before they get served to us? The time for building as we see there might be negligible, but when your app files grow both in size and number, this can cause substantial performance issues.\n\nCompare the above to this:\n\n\u003cimg src=\"http://blog.pusher.com/wp-content/uploads/2018/09/nuxt-static-serve.png\" alt=\"Serving a static site\" width=\"556\" height=\"148\" class=\"alignnone size-full wp-image-5131\" /\u003e\n\nYou will notice that the pages are returned automatically. Nothing is generated as Nuxt has already done all of it with the build.\n\nYou can already begin to see the performance improvements with server-side rendering. Removing the build process or the generation of the page on the client side means clients can see your pages faster. It also means you can run away from issues like support for certain JavaScript concepts or even versions completely (in the case of older browsers). Ultimately, you have a more accessible website that clients without JavaScript can still use.\n\nServer-side rendering for president of the world! 💪 \n\n\n## Conclusion\n\nIn this tutorial, we have looked at what happens behind the scenes with our Vue applications and how it is made better with Nuxt. We have also seen how Nuxt works in a nutshell and the some of the improvements it makes to our existing application. \n\nNow, we can comfortably merge the old (plain old HTML pages) with the new (JS powered client-side applications) and create better applications for our users. ","metaTitle":"Implicit serverside rendering in Vue using Nuxt","metaDescription":"This tutorial compares building a web app with Vue using Nuxt versus using plain Vue. It looks at accessibility issues and performance, and demonstrates how a static site, produced by Nuxt, has a range of advantages."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5RcM4BALrUuKOIgyuamyk0","type":"Entry","createdAt":"2018-09-28T19:47:14.088Z","updatedAt":"2020-06-19T10:32:22.400Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a CMS with Laravel and Vue - Part 1: Setting up","url":"cms-laravel-vue-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/laravel-vue-cms","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-09-28","description":"This six part tutorial series will guide you through building a CMS using Laravel and Vue.js. The final product will include authentication, user roles, post creation and editing, and a realtime comments feature. In part one, set up your development environment and project skeleton.","prerequisite":"Basic knowledge of Laravel and Vue will be helpful. ","content":"In this 6-parts tutorial series, we will be building a CMS with Laravel and Vue.js.\n\nThe birth of the internet has since redefined content accessibility for the better, causing a distinct rise in content consumption across the globe. The average user of the internet consumes and produces some form of content formally or informally.\n\nAn example of an effort at formal content creation is when an someone makes a blog post about their work so that a targeted demographic can easily find their website. This type of content is usually served and managed by a CMS (Content Management System). Some popular ones are [WordPress](https://wordpress.com),and [Drupal](https://www.drupal.org/).\n\nA CMS helps content creators produce content in an easily consumable format. In this tutorial series, we will consider how to build a simple CMS from scratch using Laravel and Vue.\n\nOur CMS will be able to make new posts, update existing posts, delete posts that we do not need anymore, and also allow users make comments to posts which will be updated in realtime using Pusher. We will also be able to add featured images to posts to give them some visual appeal. \n\nWhen we are done, we will be able to have a CMS that looks like this:\n\n![laravel-vue-cms-demo-finished](//images.ctfassets.net/1es3ne0caaid/5UDJESgcuWg2IU8csWmmM6/41c9a95021592f05ab25135fca39514f/laravel-vue-cms-demo-finished.gif)\n\n## Prerequisites\n\nTo follow along with this series, a few things are required:\n\n\n- Basic knowledge of PHP.\n- Basic knowledge of the [Laravel](https://laravel.com) framework.\n- Basic knowledge of JavaScript (ES6 syntax).\n- Basic knowledge of [Vue](https://vuejs.org).\n- [Postman](https://www.getpostman.com/) installed on your machine.\n\n\n\u003e The source code for this project is available [here](https://github.com/neoighodaro/laravel-vue-cms) on GitHub.\n\n\n## Installing the Laravel CLI\n\u003e If you already have the Laravel CLI installed on your machine, please skip this section.\n\nThe first thing we need to do is install the Laravel CLI, and the Laravel dependencies. The CLI will be instrumental in creating new Laravel projects whenever we need to create one. Laravel requires PHP and a few other tools and extensions, so we need to first install these first before installing the CLI.\n\nHere’s a list of the dependencies as documented on the [official Laravel documentation](https://laravel.com/docs/5.6/installation):\n\n![laravel-vue-cms-prereqs](//images.ctfassets.net/1es3ne0caaid/3dsTdqATfiyiguWI0CSiUQ/bcb86503b3d18c31462a4fcda075c8c0/laravel-vue-cms-prereqs.png)\n\nLet’s install them one at a time.\n\n### Installing PHP\n\n\u003e An equivalent for Windows users could be to download and install XAMPP [here.](https://www.apachefriends.org/download.html) XAMPP comes with a UI for installing most of the other things you have to install manually below. Hence, Windows users may skip the next few steps until the **Installing Composer** sub-heading.\n\nOpen a fresh instance of the terminal and paste the following command:\n\n```\n    # Linux Users\n    $ sudo apt-get install php7.2\n    \n    # Mac users\n    $ brew install php72\n```  \n\nAs at the time of writing this article, PHP 7.2 is the latest stable version of PHP so the command above installs it on your machine. \n\nOn completion, you can check that PHP has been installed to your machine with the following command:\n\n```\n    $ php -v\n```\n\n### Installing the Mbstring extension\n\nTo install the `mbstring` extension for PHP, paste the following command in the open terminal:\n\n```\n    # Linux users\n    $ sudo apt-get install php7.2-mbstring\n    \n    # Mac users\n    # You don't have to do anything as it is installed automatically.\n```\n\nTo check if the `mbstring` extension has been installed successfully, you can run the command below:\n\n```\n    $ php -m | grep mbstring\n```\n\n### Installing the XML PHP extension\n\nTo install the XML extension for PHP, paste the following command in the open terminal:\n\n```\n    # Linux users\n    $ sudo apt-get install php-xml\n    \n    # Mac users\n    # You don't have to do anything as it is installed automatically.\n```\n\nTo check if the `xml` extension has been installed successfully, you can run the command below:\n\n```\n    $ php -m | grep xml\n```\n\n### Installing the ZIP PHP extension\n\nTo install the zip extension for PHP, paste the following command in your terminal:\n\n```\n    # Linux users\n    $ sudo apt-get install php7.2-zip\n    \n    # Mac users\n    # You don't have to do anything as it is installed automatically.\n```\n\nTo check if the `zip` extension has been installed successfully, you can run the command below:\n\n```\n    $ php -m | grep zip\n```\n\n### Installing curl\n\n\u003e Windows users may need to download curl from [here](https://curl.haxx.se/download.html).\n  \n\nTo install curl, paste the following command in your terminal:\n\n```\n    # Linux users\n    $ sudo apt-get install curl\n    \n    # Mac users using Homebrew (https://brew.sh)\n    $ brew install curl\n```\n\nTo verify that curl has been installed successfully, run the following command:\n\n```\n    $ curl --version\n```\n\n### Installing Composer\n\n\u003e Windows users can download and install Composer [here](https://getcomposer.org/download/). After the installation is complete, start a fresh instance of the command prompt as administrator and run this command anytime you need composer:\n\n\u003e `php composer.phar`\n\nNow that we have curl installed on our machine, let’s pull in Composer with this command:\n\n```\n    $ curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer\n```\n\nFor us to run Composer in the future without calling `sudo`, we may need to change the permission, however you should only do this if you have problems installing packages:\n\n```\n    $ sudo chown -R $USER ~/.composer/\n```\n\n### Installing the Laravel installer\n\nAt this point, we can already create a new Laravel project using Composer’s `create-project` command, which looks like this:\n\n```\n    $ composer create-project --prefer-dist laravel/laravel project-name\n```\n\nBut we will go one step further and install the Laravel installer using composer:\n\n```\n    $ composer global require \"laravel/installer\"\n```\n\n\u003e If you are on Windows, you may need to run the previous command in an advanced terminal such as PowerShell or the [Gitbash](http://www.techoism.com/how-to-install-git-bash-on-windows/) terminal. Windows users can also skip the steps below.\n  \n\nAfter the installation, we will need to add the PATH to the `bashrc` file so that our terminal can recognize the `laravel` command:\n\n```\n    $ echo 'export PATH=\"$HOME/.composer/vendor/bin:$PATH\"' \u003e\u003e ~/.bashrc\n    $ source ~/.bashrc\n```\n\n## Creating the CMS project\n\nNow that we have the official Laravel CLI installed on our machine, let’s create our CMS project using the installer. In your terminal window, `cd` to the project directory you want to create the project in and run the following command:\n\n```\n    $ laravel new cms\n```\n\n\u003e At the time of writing this article, the latest version of Laravel is 5.6\n\nWe will navigate into the project directory and serve the application using [PHP’s web server](http://php.net/manual/en/features.commandline.webserver.php):\n\n```\n    $ cd cms\n    $ php artisan serve\n```\n\nNow, when we visit http://127.0.0.1:8000/, we will see the default Laravel template:\n\n![laravel-vue-cms-laravel-landing-page](//images.ctfassets.net/1es3ne0caaid/21oC9oYZHqKKUCoGUikwqg/8890e3f72a2e30c18ab9c89203ba7d2f/laravel-vue-cms-laravel-landing-page.png)\n\n## Setting up the database\n\nIn this series, we will be using MySQL as our database system so a prerequisite for this section is that you have MySQL installed on your machine. \n\nYou can follow the steps below to install and configure MySQL:\n\n- Linux users - [check here](https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-ubuntu-16-04) for a detailed guide.\n- Mac users, you can just run the command `brew install mysql`.\n- Windows users who installed XAMPP, as suggested earlier, do not need to install MySQL as it comes preinstalled.\n\nYou will also need a special driver that makes it possible for PHP to work with MySQL, you can install it with this command:\n\n```\n    # Linux users\n    $ sudo apt-get install php7.2-mysql\n    \n    # Mac Users\n    # You don't have to do anything as it is installed automatically.\n```\n\nLoad the project directory in your favorite text editor and there should be a `.env` file in the root of the folder. This is where Laravel stores its environment variables.\n\nCreate a new MySQL database and call it `laravelcms`. In the `.env` file, update the database configuration keys as seen below:\n\n```\n    DB_CONNECTION=mysql\n    DB_HOST=127.0.0.1\n    DB_PORT=3306\n    DB_DATABASE=laravelcms\n    DB_USERNAME=YourUsername\n    DB_PASSWORD=YourPassword\n```\n\n\u003e Replace the `DB_USERNAME` and `DB_PASSWORD` with your MySQL database credentials.\n\n\n## Setting up user roles\n\nLike most content management systems, we are going to have a user role system so that our blog can have multiple types of users; the admin and regular user. The admin should be able to create a post and perform other CRUD operations on a post. The regular user, on the other hand, should be able to view and comment on a post.\n\nFor us to implement this functionality, we need to implement user authentication and add a simple role authorization system.\n\n### Setting up user authentication\n\nLaravel provides user authentication out of the box, which is great, and we can key into the feature by running a single command:\n\n```\n    $ php artisan make:auth\n```\n\nThe above will create all that’s necessary for authentication in our application so we do not need to do anything extra.\n\n### Setting up role authorization\n\nWe need a model for the user roles so let’s create one and an associated migration file:\n\n```\n    $ php artisan make:model Role -m\n```\n\nIn the `database/migrations` folder, find the newly created migration file and update the `CreateRolesTable` class with this snippet:\n\n``` php\n    \u003c?php // File: ./database/migrations/*_create_roles_table.php\n    \n    // [...]\n    \n    class CreateRolesTable extends Migration\n    {\n        public function up()\n        {\n            Schema::create('roles', function (Blueprint $table) {\n                $table-\u003eincrements('id');\n                $table-\u003estring('name');\n                $table-\u003estring('description');\n                $table-\u003etimestamps();\n            });\n        }\n    \n        public function down()\n        {\n            Schema::dropIfExists('roles');\n        }\n    }\n```\n\nWe intend to create a many-to-many relationship between the `User` and `Role` models so let’s add a relationship method on both models.\n\nOpen the `User` model and add the following method:\n\n``` php\n    // File: ./app/User.php\n    public function roles() \n    {\n        return $this-\u003ebelongsToMany(Role::class);\n    }\n```\n\nOpen the `Role` model and include the following method:\n\n``` php\n    // File: ./app/Role.php\n    public function users() \n    {\n        return $this-\u003ebelongsToMany(User::class);\n    }\n```\n\nWe are also going to need a pivot table to associate each user with a matching role so let’s create a new migration file for the **role_user** table:\n\n```\n    $ php artisan make:migration create_role_user_table\n```\n\nIn the `database/migrations` folder, find the newly created migration file and update the `CreateRoleUserTable` class with this snippet:\n\n``` php    \n    // File: ./database/migrations/*_create_role_user_table.php\n    \u003c?php \n    \n    // [...]\n    \n    class CreateRoleUserTable extends Migration\n    {\n    \n        public function up()\n        {\n            Schema::create('role_user', function (Blueprint $table) {\n                $table-\u003eincrements('id');\n                $table-\u003einteger('role_id')-\u003eunsigned();\n                $table-\u003einteger('user_id')-\u003eunsigned();\n            });\n        }\n    \n        public function down()\n        {\n            Schema::dropIfExists('role_user');\n        }\n    }\n```\n\nNext, let’s create seeders that will populate the `users` and `roles` tables with some data. In your terminal, run the following command to create the database seeders:\n\n```\n    $ php artisan make:seeder RoleTableSeeder\n    $ php artisan make:seeder UserTableSeeder\n```\n\nIn the `database/seeds` folder, open the `RoleTableSeeder.php` file and replace the contents with the following code:\n\n``` php\n    // File: ./database/seeds/RoleTableSeeder.php\n    \u003c?php \n    \n    use App\\Role;\n    use Illuminate\\Database\\Seeder;\n    \n    class RoleTableSeeder extends Seeder\n    {\n        public function run()\n        {\n            $role_regular_user = new Role;\n            $role_regular_user-\u003ename = 'user';\n            $role_regular_user-\u003edescription = 'A regular user';\n            $role_regular_user-\u003esave();\n    \n            $role_admin_user = new Role;\n            $role_admin_user-\u003ename = 'admin';\n            $role_admin_user-\u003edescription = 'An admin user';\n            $role_admin_user-\u003esave();\n        }\n    }\n```\n\nOpen the `UserTableSeeder.php` file and replace the contents with the following code:\n\n``` php\n    // File: ./database/seeds/UserTableSeeder.php\n    \u003c?php \n    \n    use Illuminate\\Database\\Seeder;\n    use Illuminate\\Support\\Facades\\Hash;\n    use App\\User;\n    use App\\Role;\n    \n    class UserTableSeeder extends Seeder\n    {\n    \n        public function run()\n        {\n            $user = new User;\n            $user-\u003ename = 'Samuel Jackson';\n            $user-\u003eemail = 'samueljackson@jackson.com';\n            $user-\u003epassword = bcrypt('samuel1234');\n            $user-\u003esave();\n            $user-\u003eroles()-\u003eattach(Role::where('name', 'user')-\u003efirst());\n    \n            $admin = new User;\n            $admin-\u003ename = 'Neo Ighodaro';\n            $admin-\u003eemail = 'neo@creativitykills.co';\n            $admin-\u003epassword = bcrypt('neo1234');\n            $admin-\u003esave();\n            $admin-\u003eroles()-\u003eattach(Role::where('name', 'admin')-\u003efirst());\n        }\n    }\n```\n\nWe also need to update the `DatabaseSeeder` class. Open the file and update the `run` method as seen below:\n\n``` php\n    // File: ./database/seeds/DatabaseSeeder.php\n    \u003c?php \n    \n    // [...]\n    \n    class DatabaseSeeder extends Seeder\n    {\n        public function run()\n        {\n            $this-\u003ecall([\n                RoleTableSeeder::class, \n                UserTableSeeder::class,\n            ]);\n        }\n    }\n```\n\nNext, let’s update the `User` model. We will be adding a `checkRoles` method that checks what role a user has. We will return a 404 page where a user doesn’t have the expected role for a page. Open the `User` model and add these methods:\n\n``` php\n    // File: ./app/User.php\n    public function checkRoles($roles) \n    {\n        if ( ! is_array($roles)) {\n            $roles = [$roles];    \n        }\n    \n        if ( ! $this-\u003ehasAnyRole($roles)) {\n            auth()-\u003elogout();\n            abort(404);\n        }\n    }\n    \n    public function hasAnyRole($roles): bool\n    {\n        return (bool) $this-\u003eroles()-\u003ewhereIn('name', $roles)-\u003efirst();\n    }\n    \n    public function hasRole($role): bool\n    {\n        return (bool) $this-\u003eroles()-\u003ewhere('name', $role)-\u003efirst();\n    }\n```\n\nLet’s modify the `RegisterController.php` file in the `Controllers/Auth` folder so that a default role, the user role, is always attached to a new user at registration. \n\nOpen the `RegisterController`  and update the `create` action with the following code:\n\n``` php\n    // File: ./app/Http/Controllers/Auth/RegisterController.php\n    protected function create(array $data)\n    {       \n        $user = User::create([\n            'name'     =\u003e $data['name'],\n            'email'    =\u003e $data['email'],\n            'password' =\u003e bcrypt($data['password']),\n        ]);\n    \n        $user-\u003eroles()-\u003eattach(\\App\\Role::where('name', 'user')-\u003efirst());\n            \n        return $user;\n    }\n```\n\nNow let’s migrate and seed the database so that we can log in with the sample accounts. To do this, run the following command in your terminal:\n\n```\n    $ php artisan migrate:fresh --seed\n```\n\nIn order to test that our roles work as they should, we will make an update to the `HomeController.php` file. Open the `HomeController` and update the `index` method as seen below:\n\n``` php\n    // File: ./app/Http/Controllers/HomeController.php\n    public function index(Request $request)\n    {\n        $request-\u003euser()-\u003echeckRoles('admin');\n    \n        return view('home');\n    }\n```\n\nNow, only administrators should be able to see the dashboard. In a more complex application, we would use a [middleware](https://laravel.com/docs/5.6/middleware) to do this instead.\n\nWe can test that this works by serving the application and logging in both user accounts; Samuel Jackson and Neo Ighodaro. \n\nRemember that in our `UserTableSeeder.php` file, we defined Samuel as a regular user and Neo as an admin, so Samuel should see a 404 error after logging in and Neo should be able to see the homepage.\n\n\n## Testing the application\n\nLet’s serve the application with this command:\n\n```\n    $ php artisan serve\n```\n\nWhen we try logging in with Samuel’s credentials, we should see this:\n\n![laravel-vue-cms-demo-login-user](//images.ctfassets.net/1es3ne0caaid/6OJpXqlahyc4yU4gWm2GYY/824ad45e968ed7d7502cf582bbaa2c77/laravel-vue-cms-demo-login-user.gif)\n\nOn the other hand, we will get logged in with Neo’s credentials because he has an admin account:\n\n![laravel-vue-cms-demo-login-admin](//images.ctfassets.net/1es3ne0caaid/2emnf4hRuoc4WyO0iggSO8/b2a7eba3c0b2ea773045bbbdfd0436dc/laravel-vue-cms-demo-login-admin.gif)\n\nWe will also confirm that whenever a new user registers, he is assigned a role and it is the role of a regular user. We will create a new user and call him Greg, he should see a 404 error right after:\n\n![laravel-vue-cms-demo-user-creation](//images.ctfassets.net/1es3ne0caaid/jIb9lj0SHeEMaCCyuiEGc/23eb7666df1ae59bb33c8e44318d7a1a/laravel-vue-cms-demo-user-creation.gif)\n\nIt works just as we wanted it to, however, it doesn’t really make any sense for us to redirect a regular user to a 404 page. Instead, we will edit the `HomeController` so that it redirects users based on their roles, that is, it redirects a regular user to a regular homepage and an admin to an admin dashboard.\n\nOpen the `HomeController.php` file and update the `index` method as seen below:\n\n``` php\n    // File: ./app/Http/Controllers/HomeController.php\n    public function index(Request $request)\n    {\n        if ($request-\u003euser()-\u003ehasRole('user')) {\n            return redirect('/');\n        }\n        \n        if ($request-\u003euser()-\u003ehasRole('admin')){\n            return redirect('/admin/dashboard');\n        }\n    }\n```\n\nIf we serve our application and try to log in using the admin account, we will hit a 404 error because we do not have a controller or a view for the `admin/dashboard` route. In the next article, we will start building the basic views for the CMS.\n\n## Conclusion\n\nIn this tutorial, we learned how to install a fresh Laravel app on our machine and pulled in all the needed dependencies. We also learned how to configure the Laravel app to work with a MySQL database. We also created our models and migrations files and seeded the database using database seeders.\n\nIn the next part of this series, we will start building the views for the application.\n\nThe source code for this project is available on [Github](https://github.com/neoighodaro/laravel-vue-cms).","metaTitle":"Build a CMS with Laravel and Vue - Part 1","metaDescription":"Use Laravel and Vue.js to create a basic CMS. The final product will include authentication, user roles, post creation and editing, and a realtime comments feature. In part one, set up your development environment and project skeleton."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5ELuXPrJbG8W8S6IE0kqmi","type":"Entry","createdAt":"2018-10-09T20:19:24.158Z","updatedAt":"2018-10-09T20:19:24.158Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Handle HTTP requests in a Laravel Vue.js app with Axios","url":"laravel-vue-axios","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6Ok7hdNlHGsaAME2MCGEeq","type":"Entry","createdAt":"2018-09-17T17:53:10.446Z","updatedAt":"2018-09-17T17:53:10.446Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Ethiel Adiassa","url":"ethiel-adiassa","email":"ethiel97@gmail.com","twitter":"https://twitter.com/ethiel97","github":"https://github.com/ethiel97","guestWriter":true}}],"projectRepo":"https://github.com/Ethiel97/laravel_pusher_axios","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2SdjzfMUtikUcK2CWI8uyC","type":"Entry","createdAt":"2018-07-31T17:19:35.290Z","updatedAt":"2019-08-28T08:41:23.854Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"no pusher tech","url":"no-pusher-tech","featured":false}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4xVQOGkGOQOquAGeo0y4gA","type":"Entry","createdAt":"2018-02-12T14:45:31.260Z","updatedAt":"2018-02-26T12:31:10.439Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Laravel","url":"laravel","type":"framework","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"14BNsUS2NWuSmyuwYkg2I4","type":"Entry","createdAt":"2018-02-12T14:49:45.502Z","updatedAt":"2018-02-12T14:49:45.502Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"PHP","url":"php","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-09-17","description":"Learn to use Axios in a Laravel app. You will build a simple blog dashboard, to create and list posts. Use Laravel for the backend, Vue for the frontend, and Axios to handle the HTTP routing.","prerequisite":"You will need a good knowledge of Laravel, including how to set up a database to use with it. You should have the Laravel CLI installed. Some familiarity with Vue.js will be helpful.","content":"## Introduction\n\nIn every application, HTTP requests play an essential role as they allow us to communicate with the server, tackling some API endpoints and much more. Have you ever wondered how you can handle HTTP requests in your app and this seamlessly? Well Axios is your friend. What is Axios and why you should pay it special attention ?\n\nAxios is a JavaScript library designed to handle HTTP requests in the browser and Node.js ecosystem. It means that Axios  will help you make HTTP calls to your backend code and save you headaches. Is that not nice 😊?! \n\nIn this tutorial, we’ll build a working app with Laravel and Vue.js and see how we can handle our HTTP requests with the Axios library. We’ll also  manage the state with Vuex library.\n\nHere is a preview of what we’ll get at the end :\n\n![axios-laravel-demo](//images.ctfassets.net/1es3ne0caaid/1Z5RVp8YqscEIYKQEuOKW6/60d2ca46a54d272fdd41cb640263cb74/axios-laravel-demo.gif)\n\n## Prerequisites\n\nBefore you jump in this tutorial, make sure you have npm or Yarn installed on your machine as we’ll be using them throughout this course to install dependencies. To follow along you need the follow requirements:\n\n\n- Basic or good knowledge of the [Laravel framework](https://laravel.com)\n- Good knowledge of the [Vue.js framework](https://vuejs.org)\n- Basic knowledge of [Vuex library](https://vuex.vuejs.org/)\n- [Laravel CLI](https://laravel.com/docs/5.6/installation) installed on your machine\n- Good understanding of Javascript language (ES6)\n\n\n## Installing frontend dependencies\n\nOpen your `package.json` file at the root of your folder and paste the following code, then run \n`npm install` or `yarn add` to install the packages needed for the app.\n\n``` json\n    {\n        \"private\": true,\n        \"scripts\": {\n            \"dev\": \"npm run development\",\n            \"development\": \"cross-env NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\",\n            \"watch\": \"npm run development -- --watch\",\n            \"watch-poll\": \"npm run watch -- --watch-poll\",\n            \"hot\": \"cross-env NODE_ENV=development node_modules/webpack-dev-server/bin/webpack-dev-server.js --inline --hot --config=node_modules/laravel-mix/setup/webpack.config.js\",\n            \"prod\": \"npm run production\",\n            \"production\": \"cross-env NODE_ENV=production node_modules/webpack/bin/webpack.js --no-progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js\"\n        },\n        \"devDependencies\": {\n            \"axios\": \"^0.18\",\n            \"bootstrap\": \"^4.0.0\",\n            \"popper.js\": \"^1.12\",\n            \"cross-env\": \"^5.1\",\n            \"jquery\": \"^3.2\",\n            \"laravel-mix\": \"^2.0\",\n            \"lodash\": \"^4.17.5\",\n            \"vue\": \"^2.5.7\",\n            \"vuex\": \"^3.0.1\"\n        }\n    }\n```\n\n## Getting started with Laravel\n\nNow, this is the moment you’ve been longing for, the coding part. Let’s roll up our sleeves and dive into the code.\n\nOpen up your terminal, and run the following command to create a new Laravel project as well as required dependencies on your machine:\n\n```\n    laravel new laravel_vue_axios\n```\n\n\u003e **Note** : This assumes you have already installed Laravel and Composer on your local machine. \n\nOnce the installation is finished run the following command to move to your app directory: \n\n```\n    cd laravel_vue_axios\n```\n\nNow, from your project directory, run this command in order to see our brand new project rendered in the browser:  \n\n```\n    php artisan serve \n```\n\nYou should see this image in your browser otherwise get back to previous steps,\nand make sure you follow them carefully.\n\n![axios-laravel-homepage](//images.ctfassets.net/1es3ne0caaid/HwGlvmcmiGyMCO22uYCYu/8dc43d5de026de7c47e17b97fa351222/axios-laravel-homepage.png)\n\n## Setting up the database\n\nIn this tutorial we’ll use a MySQL database, however you can use any database you feel comfortable with. Refer to this [section on Laravel website](https://laravel.com/docs/5.7/database) for more relevant information.\n\n\n## Building models and seeding our database\n\nIf you already worked with Laravel you know that it has a great command-line tool to generate models and so on.\nFirst run this command:\n\n```\n    php artisan make:model Post -mc\n```\n\nThis command tells Laravel to generate a Post model for us, the `-mc` flags indicates that it should also generate migration as well as a controller named  `PostController`.\nWe’ll take a look at these files further in the tutorial.\n\nNext, copy and paste this piece of code into your post migration file\n\n``` php\n    //laravel_vue_axios/database/migrations/create_posts_table.php\n    \n    \u003c?php\n    use Illuminate\\Support\\Facades\\Schema;\n    use Illuminate\\Database\\Schema\\Blueprint;\n    use Illuminate\\Database\\Migrations\\Migration;\n    \n    class CreatePostsTable extends Migration\n    {\n    \n        /**\n         * Run the migrations.\n         *\n         * @return void\n         \n         */\n         \n        public function up()\n        {\n            Schema::create('posts', function (Blueprint $table) {\n                $table-\u003eincrements('id');\n                $table-\u003estring('title');\n                $table-\u003etext('content');\n                $table-\u003etimestamps();\n            });\n        }\n        \n        /**\n         * Reverse the migrations.\n         *\n         * @return void\n         */\n        \n        public function down()\n        {\n            Schema::dropIfExists('posts');\n        }\n    }\n```\n\n\nNow, run  `php artisan migrate` to create the `posts`  table in your database with the corresponding fields.\n\nHaving our database functional we can begin adding some data but it can be tiresome.\nSo let’s seed our database with [Laravel database seeding functionnality](https://laravel.com/docs/5.7/seeding).\n\nExecute this command  `php artisan make:factory PostFactory` to generate a factory for our Post model. Next copy and paste the following code inside our  `PostFactory.php` file\n\n``` php\n    //laravel_vue_axios/database/factories/PostFactory.php\n    \u003c?php\n    \n    use Faker\\Generator as Faker;\n    \n    \n    $factory-\u003edefine(App\\Post::class, function (Faker $faker) {\n        return [\n            'title' =\u003e $faker-\u003esentence(3, true),\n            'content' =\u003e $faker-\u003erealText($faker-\u003enumberBetween(10, 100))\n        ];\n        \n    });\n```\n\nThe above code defines a set of attributes for our model with fake data as you can notice, and the code is self-explanatory.\nThen paste this code inside your `DatabaseSeeder.php` file: \n\n``` php\n    //laravel_vue_axios/database/seeds/DatabaseSeeder.php\n    \u003c?php\n    \n    use Illuminate\\Database\\Seeder;\n    class DatabaseSeeder extends Seeder\n    {\n    \n        /**\n         * Seed the application's database.\n         *\n         * @return void\n         */\n         \n        public function run()\n        {\n            factory(App\\Post::class, 15)-\u003ecreate();\n        }\n    }\n```\n\nSo what it means ? You may have guessed it, it tells Laravel to generate 15 instances of our Post model.\n\nAnd finally run the following command: `php artisan db:seed` to make Laravel seed the database with the factory we define. If you check up your database you should see 15 fresh rows in your posts table.  Great isn’t it 😊 !?\n\n\n## Defining routes and controller functions\n\nIn this part we’ll define the routes that our app should call to access our data , as well as the proper controller responsible to handle the logic for us.\n\nFirst paste this code  `Route::get('/','PostController@index');`    in your `routes/web.php` file.\nIt means that `index` function should be called whenever a get request is made to `/` routes.\nAnd then open your  `routes/api.php` file  and paste this :\n\n  \n``` php    \n    Route::post('posts', 'PostController@store');\n    \n    Route::get('posts', 'PostController@get');\n    \n    Route::delete('posts/{id}', 'PostController@delete');\n```\n\nThe above piece of code defines our routes and which function should handle them.\nBasically the first line is saying that for the routes `\\posts` with a post request, the `store` function of our `PostController` should handle the logic and so on.\nNow let’s create  the corresponding functions in our controller. Paste the following code in your `PostController` class body.\n\n``` php\n    //laravel_vue_axios/app/http/controllers/PostController.php\n    \n    public function index()\n    {\n        return view('posts');\n    }\n    \n    public function get(Request $request)\n    {\n        $posts = Post::orderBy('created_at', 'desc')-\u003eget();\n        return response()-\u003ejson($posts);\n    }\n    \n    public function store(Request $request)\n    {\n        $post = Post::create($request-\u003eall());\n    \n        return response()-\u003ejson($post);\n    }\n    \n    public function delete($id)\n    {\n        Post::destroy($id);\n    \n        return response()-\u003ejson(\"ok\");\n    }\n```\n\n\nWell, let’s take a minute to explain this code bock.  \n\n- `index` returns a view where should be listed all our posts\n- `get` returns all posts existing in our database\n- `store` creates a Post instance an returned it as a JSON response\n- `delete` destroys as you can guess a post provided its ID is given\n\nNow let’s focus on the frontend part of our fullstack app. We’ll build here our Vue.js components, manage state with Vuex and handle our requests with the Axios library\n\n\n\n## Create and manage our state\n\nIf you have ever worked with Vuex you should know that it helps manage state of an app in a centralized way.  According to the [official definition](https://vuex.vuejs.org/), Vuex is:\n\n\n\u003e a **state management pattern + library** for Vue.js applications. It serves as a centralized store for all the components in an application, with rules ensuring that the state can only be mutated in a predictable fashion.\n\nIt means that you have  sole source of data (centralized way) in your data that you can share between all your components, and every change made to your data is well supervised and reflected through every single component of your app. \n\nAs said above you should have some notions of  [Vuex](https://vuex.vuejs.org/) in order to follow this tutorial in due form.\nSo let’s jump into the code.\n\n### Create our state\n\nVuex state is a single object that contains all our application data. So let’s create  `../resources/js/store/state.js`  and paste this code inside:\n\n\n``` javascript    \n    let state = {\n        posts: []\n    }\n    \n    export default state\n```\n\nThe code above is straightforward and therefore goes without explanation. The `posts`  key is an array  responsible to store our database posts info.\n\n### Define getters\n\nGetters are like computed property for data store.  With help of getters we can compute derived based on our data store state. Create  `../resources/js/store/getters.js`  and paste this code inside\n\n``` javascript    \n    let getters = {\n         posts: state =\u003e {\n             return state.posts\n         }\n    }\n    \n    export default  getters\n```\n\n### Define mutations\n\n\n\u003e The only way to actually change state in a Vuex store is by committing a mutation. Vuex mutations are very similar to events: each mutation has a string type and a handler. The handler function is where we perform actual state modifications, and it will receive the state as the first argument.\n\nAccording to the official definition provided mutations allow us to perform some changes on our data. Create `../resources/js/store/mutations.js` and paste this piece of code inside and we’ll look it up to understand.\n\n``` javascript    \n    let mutations = {\n        CREATE_POST(state, post) {\n            state.posts.unshift(post)\n        },\n        FETCH_POSTS(state, posts) {\n            return state.posts = posts\n        },\n        DELETE_POST(state, post) {\n            let index = state.posts.findIndex(item =\u003e item.id === post.id)\n            state.posts.splice(index, 1)\n        }\n        \n    }\n    export default mutations\n```\n\nThe code above has a  `mutations` object with three functions each of them having our state object as argument:\n\n\n- `CREATE_POST` takes as arguments our state and the post we intend to add to our posts. The `unshift` function add the new post to the begining of our posts array.\n\n\n- `FETCH_POSTS` returns our posts state data simply. Very simple right?!\n\n\n- `DELETE_POST` takes two arguments, our state data and the post we intent to remove from our posts.  `let index = state.posts.findIndex(item =\u003e item.id === post.id)` find the index of the post to delete by looping through the posts array and returning the first item that matches the given condition. Then it removes the post.\n\n### Define actions\n\n\n\u003e Actions are similar to mutations, the differences being that:\n  - Instead of mutating the state, actions commit mutations.\n  - Actions can contain arbitrary asynchronous operations.\n  \n\nThis is the most important part of our tutorial because it explains how requests are performed by the Axios library. So you should pay more attention to it. Vuex actions allow us to perform asynchronous operations over our data and to do so we need Axios . Create the following file and  paste this code inside `../resources/js/store/actions.js` file that you have to create\n\n\n``` javascript    \n    let actions = {\n        createPost({commit}, post) {\n            axios.post('/api/posts', post)\n                .then(res =\u003e {\n                    commit('CREATE_POST', res.data)\n                }).catch(err =\u003e {\n                console.log(err)\n            })\n          \n        },\n        fetchPosts({commit}) {\n            axios.get('/api/posts')\n                .then(res =\u003e {\n                    commit('FETCH_POSTS', res.data)\n                }).catch(err =\u003e {\n                console.log(err)\n            })\n        },\n        deletePost({commit}, post) {\n            axios.delete(`/api/posts/${post.id}`)\n                .then(res =\u003e {\n                    if (res.data === 'ok')\n                        commit('DELETE_POST', post)\n                }).catch(err =\u003e {\n                console.log(err)\n            })\n        }\n    }\n    \n    export default actions\n```\n\nAt a first glance it can look barbarian and obscure 😕🤔 but after explanations everything will seem clearer to you. \nWe have defined three actions and each of them responsible of a single operation, either post creation, posts fetch or post deletion. They all perform an asynchronous call to our API routes. \n\nLet’s analyze how this is done: \n\n\n- `createPost`  We intend to perform a post request with  `axios.post('/api/posts', post)`.Axios has a dedicated function for that, the  `post` function which takes the route and the data as parameters. We make use of the axios instance to perform a post request to our database. We tackle our API by calling the `/api/posts` route. \n  The next part defines what should be done if the response is wether successful or unsuccessful.\n  We commit the `CREATE_POST`  mutation if response is successful and log the error if we encounter an error .\n\n\n- `fetchPosts`  This one may look clearer to you now. We perform a get request in this action\n  `axios.get('/api/posts')`. Axios provides a  `get` function for this purpose. It takes one parameter which obviously is the endpoint we intend to tackle.  The second part of the request does almost the same thing as the previous one expect here we commit the `FETCH_POSTS` mutation.\n\n\n- `deletePost` This part shows how we can perform a delete request with Axios. \n   `axios.delete`(`/api/posts/${post.id})` sends a delete request to our database by providing the API route with the ID of the post to delete. The next part of the request commits the `DELETE_POST` mutation if our response is successful and logs the error if something got wrong.\n\n\n### Set up our store with Vue\n\nNow, we can import our getters, mutations, actions, state in the `../resources/js/store/index.js` file that you should create. Paste this code to achieve that.\n\n\n``` javascript\n    import Vue from 'vue'\n    import Vuex from 'vuex'\n    import actions from './actions'\n    import mutations from './mutations'\n    import getters from './getters'\n    import state from \"./state\";\n    \n    Vue.use(Vuex);\n    \n    export default new Vuex.Store({\n        state,\n        mutations,\n        getters,\n        actions\n    })\n```\n\nThen, we export our store and add it to the vue instance. Add this code to your `../resouces/js/app.js`  file.\n\n``` javascript\n    require('./bootstrap');\n    window.Vue = require('vue');\n    \n    import store from './store/index'\n    \n    Vue.component('posts', require('./components/Posts.vue'))\n    Vue.component('createPost', require('./components/CreatePost.vue'))\n    \n    const app = new Vue({\n        el: '#app',\n        store\n    });\n```\n\nThe previous code also globally registers two Vue components, `Posts.vue`  and  `CreatePost.vue` that we’ll build in the next part of this tutorial.\n\n\n## Building our components\n\nWe’ll create two components for our app, one for listing and deleting our posts and the second one for post creation purpose.\n\n### Create your Posts.vue component\n\nCreate your  `Posts.vue` file and paste inside this code.\nWe define this component for rendering our posts items in a table.\n\n``` html\n    //../resources/js/components/Posts.vue\n    \n    \u003ctemplate\u003e\n        \u003cdiv\u003e\n            \u003ch4 class=\"text-center font-weight-bold\"\u003ePosts\u003c/h4\u003e\n            \u003ctable class=\"table table-striped\"\u003e\n                \u003cthead\u003e\n                \u003ctr\u003e\n                    \u003cth scope=\"col\"\u003eTitle\u003c/th\u003e\n                    \u003cth scope=\"col\"\u003eContent\u003c/th\u003e\n                    \u003cth scope=\"col\"\u003eActions\u003c/th\u003e\n                \u003c/tr\u003e\n                \u003c/thead\u003e\n                \u003ctbody\u003e\n                \u003ctr v-for=\"post in posts\"\u003e\n                    \u003ctd\u003e{{post.title}}\u003c/td\u003e\n                    \u003ctd\u003e{{post.content}}\u003c/td\u003e\n                    \u003ctd\u003e\n                        \u003cbutton class=\"btn btn-danger\" @click=\"deletePost(post)\"\u003e\u003ci style=\"color:white\" class=\"fa fa-trash\"\u003e\u003c/i\u003e\u003c/button\u003e\n                    \u003c/td\u003e\n                \u003c/tr\u003e\n                \u003c/tbody\u003e\n            \u003c/table\u003e\n        \u003c/div\u003e\n    \n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n        import {mapGetters} from 'vuex'\n    \n        export default {\n            name: \"Posts\",\n            mounted() {\n                this.$store.dispatch('fetchPosts')\n            },\n            methods: {\n                deletePost(post) {\n                    this.$store.dispatch('deletePost',post)\n                }\n            },\n            computed: {\n                ...mapGetters([\n                    'posts'\n                ])\n            }\n        }\n    \u003c/script\u003e\n    \n    \u003cstyle scoped\u003e\n    \n    \u003c/style\u003e\n```\n\nIn the  `mounted`  hook function we  `dispatch`  the `fetchPosts`  action defined above in this tutorial responsible for fetching posts from database:  `this.$store.dispatch('deletePost', post)`\nWe also dispatch the  `deletePost` action whenever we click the delete button rendered on each row. \nInside our computed properties we import our  posts getter in a style way using Vue.js `mapGetters` helper.\n\n### Create your Create.vue component\n\nNow, create your  `CreatePost.vue` file and paste inside this code.\n\n``` javascript\n    //../resources/js/components/CreatePost.vue\n    \n    \u003ctemplate\u003e\n        \u003cform action=\"\" @submit=\"createPost(post)\"\u003e\n            \u003ch4 class=\"text-center font-weight-bold\"\u003ePost creation form\u003c/h4\u003e\n            \u003cdiv class=\"form-group\"\u003e\n                \u003cinput type=\"text\" placeholder=\"Post title\" v-model=\"post.title\" class=\"form-control\"\u003e\n    \n            \u003c/div\u003e\n            \u003cdiv class=\"form-group\"\u003e\n                \u003ctextarea v-model=\"post.content\" placeholder=\"Post content\" class=\"form-control\"\u003e\n    \n                \u003c/textarea\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"form-group\"\u003e\n                \u003cbutton :disabled=\"!isValid\" class=\"btn btn-block btn-primary\" @click.prevent=\"createPost(post)\"\u003eSubmit\n                \u003c/button\u003e\n            \u003c/div\u003e\n        \u003c/form\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n        export default {\n            name: \"CreatePost\",\n            data() {\n                return {\n                    post: {\n                        title: '',\n                        content: ''\n                    }\n                }\n            },\n            methods: {\n                createPost(post) {\n                    this.$store.dispatch('createPost', post)\n                }\n            },\n            computed: {\n                isValid() {\n                    return this.post.title !== '' \u0026\u0026 this.post.content !== ''\n                }\n            }\n        }\n    \u003c/script\u003e\n    \n    \u003cstyle scoped\u003e\n    \n    \u003c/style\u003e\n```\n\nIt contains a form with a  `createPost` action dispatched whenever the form is submitted by the user.\nWe also defined  `isValid` computed property responsible to disable the submit button if one of the fields is empty.\n\n\n## Finalize the app\n\n Let’s create `posts.blade.php` file which contains our two vue components. Paste this code inside.\n\n``` php\n    //../resources/views/posts.blade.php\n    \u003c!doctype html\u003e\n    \u003chtml lang=\"{{ app()-\u003egetLocale() }}\"\u003e\n    \u003chead\u003e\n        \u003cmeta charset=\"utf-8\"\u003e\n        \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e\n        \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n        \u003cmeta name=\"csrf-token\" content=\"{{ csrf_token() }}\"\u003e\n    \n        \u003ctitle\u003eLaravel Vue.js app\u003c/title\u003e\n    \n        \u003c!-- Fonts --\u003e\n        \u003clink href=\"https://fonts.googleapis.com/css?family=Nunito:200,600\" rel=\"stylesheet\" type=\"text/css\"\u003e\n        \u003clink rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.3.1/css/all.css\"\n              integrity=\"sha384-mzrmE5qonljUremFsqc01SB46JvROS7bZs3IO2EmfFsd15uHvIt+Y8vEf7N7fWAU\" crossorigin=\"anonymous\"\u003e\n    \n        \u003clink rel=\"stylesheet\" href=\"{{mix('css/app.css')}}\"\u003e\n    \n        \u003c!-- Styles --\u003e\n        \u003cstyle\u003e\n            html, body {\n                padding: 45px;\n                background-color: #fff;\n                color: #636b6f;\n                font-family: 'Nunito', sans-serif;\n                font-weight: 200;\n                height: 100vh;\n                margin: 0;\n            }\n    \n            .full-height {\n                height: 100vh;\n            }\n    \n            .flex-center {\n                align-items: center;\n                display: flex;\n                justify-content: center;\n            }\n    \n            .position-ref {\n                position: relative;\n            }\n    \n            .top-right {\n                position: absolute;\n                right: 10px;\n                top: 18px;\n            }\n    \n            .content {\n                text-align: center;\n            }\n    \n            .title {\n                font-size: 84px;\n            }\n    \n            .links \u003e a {\n                color: #636b6f;\n                padding: 0 25px;\n                font-size: 12px;\n                font-weight: 600;\n                letter-spacing: .1rem;\n                text-decoration: none;\n                text-transform: uppercase;\n            }\n    \n            .m-b-md {\n                margin-bottom: 30px;\n            }\n        \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    {{--\u003cdiv class=\"flex-center position-ref full-height\"\u003e--}}\n    \n    \u003cdiv id=\"app\"\u003e\n    \n        \u003cdiv class=\"container\"\u003e\n            \u003cdiv class=\"row\"\u003e\n                \u003cdiv class=\"col-md-5\"\u003e\n                    \u003ccreate-post\u003e\u003c/create-post\u003e\n    \n                \u003c/div\u003e\n                \u003cdiv class=\"col-md-7\"\u003e\n                    \u003cposts\u003e\u003c/posts\u003e\n    \n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \n    \n    \u003c/div\u003e\n    \n    {{--\u003c/div\u003e--}}\n    \n    \u003cscript async src=\"{{mix('js/app.js')}}\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nWe are almost done. Now open your terminal and run `npm run dev` to build your app in a proper way. This can take a few seconds. After this step if you open your browser at `localhost:8000`  or run `php artisan serve` if the server was not running you should see something like this: \nIsn’t nice ?\n\n![axios-laravel-demo](//images.ctfassets.net/1es3ne0caaid/1Z5RVp8YqscEIYKQEuOKW6/60d2ca46a54d272fdd41cb640263cb74/axios-laravel-demo.gif)\n\n## Conclusion\n\nI hope this tutorial was helpful enough to increase your enthusiasm about exploring using Axios to handle your HTTP requests.\n\nYou can visit the [documentation](https://github.com/axios/axios) to learn more about it. You can do more \n\nThe source code for the app can be found [here on GitHub](https://github.com/Ethiel97/laravel_pusher_axios) if you are interested. Feel free to read it .","metaTitle":"Handle HTTP requests in a Laravel Vue.js app with Axios","metaDescription":"Use Laravel and Vue to create a simple blog dashboard. Learn how to use Axios to handle HTTP routing for the app."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"7Fx73ZBiIEaEi0qImoMiS","type":"Entry","createdAt":"2018-11-09T12:54:30.074Z","updatedAt":"2019-01-02T15:41:08.578Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app in Flask and Vue with sentiment analysis - Part 1: Setting up the project","url":"chat-flask-vue-part-1","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"38Gip5IBCgiiy4AYeeyyqG","type":"Entry","createdAt":"2018-03-04T19:48:48.360Z","updatedAt":"2018-03-04T19:48:48.360Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Gideon Onwuka","url":"gideon-onwuka","email":"dongidomed@gmail.com","twitter":"https://twitter.com/gideon_onwuka","github":"https://github.com/dongido001","guestWriter":true}}],"projectRepo":"https://github.com/dongido001/pusher-chat-sentiment-analysis/tree/part-1","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-09-09","description":"This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each other in realtime, see when other users are online, and be notified of new messages. In part one, install dependencies and set up the project.","prerequisite":"You will need Node 8.9+ and Python 3.6+ installed on your machine.","content":"In this tutorial, I will walk you through building a one-to-one private chat with sentiment analysis using Pusher Channels, Vue.js and Flask. You can get the code for the complete app on [GitHub](https://github.com/dongido001/pusher-chat-sentiment-analysis/tree/part-1).\n\nMachine learning is still the rave at the moment with more and more companies using it to solve complex problems in the communication, entertainment, health sectors and so on, proving that it has come to stay. Let’s see how we can use it to analyze text and determine the mood of an individual from their chat message.\n\nVue.js is a frontend framework for building user interfaces. It handles DOM manipulations seamlessly. We’ll use it to build the app user interface while Flask handles the server side implementation.\n\nHere is a preview of the final app will be build:\n\n![flask-vue-sentiment-demo-1](//images.ctfassets.net/1es3ne0caaid/wf0SPv7ftAg4EgwESSIC8/6ab11f74eba32f9e9edc93373a68f12e/flask-vue-sentiment-demo-1.gif)\n\nThis tutorial is a four-part series:\n\n- Part one: Setting up the project\n- Part two: Create the chat interface, database design, login and registration endpoints\n- Part three: Realtime chat with sentiment analysis\n- Part four: Adding a “who’s online” feature\n\n## Prerequisites\n\nThis tutorial uses the following:\n\n- [JavaScript](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics)\n- [Vue.js](https://vuejs.org/)\n- [Python 3.6+](https://www.python.org/)\n- [Node.js](https://nodejs.org/) (version 8.9 or above)\n\nYou should have some familiarity with Python development to follow along with this tutorial. If you are not familiar with Vue but still want to follow along,  you can go through the basics of Vue in the [documentation](https://vuejs.org/v2/guide/) to get you up to speed in a couple of minutes.\n\nBefore we start, let’s get your environment ready. Check that you have the appropriate installation and setup on your machine.\n\nOpen up a terminal on your machine and execute the below code:\n\n```\n    $ python --version\n```\n\nIf you have a Python 3.6+ installed on your machine, you will have a similar text printed out as  `python 3.6.0`. If you got an output similar to “Command not found”, you need to install Python on your machine. Head over to [Python’s](https://www.python.org/downloads/) official website to download and get it installed.\n\n[Vue CLI](https://cli.vuejs.org/guide/installation.html) requires a [Node.js](https://nodejs.org/) version of 8.9 or above. To check that you have Node installed, enter the following command:\n\n```\n    $ node --version\n```\n\nIf you have Node.js installed on your machine, you will get an output showing the version of Node.js you have installed otherwise an output similar to “Command not found” will be displayed on your terminal. If the latter is the case, you need to install Node.js. Head over to [Node.js](https://nodejs.org/) and install the latest version.  \n\nIf you have gotten all that installed, let's proceed.\n\nOur Vue app will communicate to our backend via an API call which we are going to build using [Flask](http://flask.pocoo.org/).\n\n## Creating a Pusher account\n\nWe'll use Pusher Channels to handle all realtime functionalities. Before we can start using Pusher Channels, we need to get our API key. We need an account to be able to get the API key.\n\nHead over to Pusher and [log in](https://dashboard.pusher.com/accounts/sign_in) to your account or create a [new account](https://dashboard.pusher.com/accounts/sign_up) if you don’t have one already. Once you are logged in, create a new app and then copy the app API keys.\n\n## Setting up the frontend app\n\nVue provides a [CLI](https://cli.vuejs.org/guide/creating-a-project.html#installation) for scaffolding a new Vue project. First, you'll need to install the Vue CLI globally on your system (if you don't have it installed already). After that, we’ll create a new Vue project with the CLI commands.\n\nCreate a new Vue project by running the following commands in any convenient location on your system:\n\n```\n    # Install Vue CLI globally on your system\n    $ npm install -g @vue/cli\n    \n    # Create a new Vue project (In the prompt that appears, press enter to select the default preset.)\n    $ vue create pusher-chat-sentiment-analysis\n    \n    # Change your directory to the project directory\n    $ cd pusher-chat-sentiment-analysis\n    \n    # Run the app!\n    $ npm run serve\n```\n\nIf the commands were successful, you will get an output similar below:\n\n![flask-vue-sentiment-setup-commands](//images.ctfassets.net/1es3ne0caaid/572kv6davSKwusMCguqqA4/221cab40da58191cc10a8ea702d081a9/flask-vue-sentiment-setup-commands.png)\n\nAccessing the [URL](http://localhost:8080) displayed on your terminal will take you to a Vue default page.\n\n\n## Setting up the backend app\n\nNext, let’s create our back-end app that will be responsible for handling all communication to Pusher Channels and the Database operations.\n\nCreate the following files and folder in `pusher-chat-sentiment-analysis`:\n\n```\n    pusher-chat-sentiment-analysis\n      ├── api\n        ├── .env\n        ├── .flaskenv\n        ├── app.py\n        ├── database.py\n        ├── models.py\n        ├── requirements.txt\n```\n\nIf you prefer the command line, you can use the below command on Mac or Linux to create the files:\n\n```\n    # Create folders and files\n    $ mkdir api \u0026\u0026 cd api \u0026\u0026 touch .env .flaskenv app.py database.py models.py requirements.txt\n```\n\n### Creating a virtual environment\n\nIt’s a good idea to have an isolated environment when working with Python. [virtualenv](https://virtualenv.pypa.io/) is a tool to create an isolated Python environment. It creates a folder which contains all the necessary executables to use the packages that a Python project would need.\n\nFrom your command line, change your directory to the Flask project root folder - `api` - then execute the below command:\n\n```\n    $ python3 -m venv env\n```\n\nOr:\n\n```\n    $ python -m venv env\n```\n\nThe command to use depends on which associates with your Python 3 installation.\n\nThen, activate the virtual environment:\n\n```\n    $ source env/bin/activate\n```\n\nIf you are using Windows, activate the virtualenv with the below command:\n\n```\n    \u003e \\path\\to\\env\\Scripts\\activate\n```\n\nThis is meant to be a full path to the activate script. Replace `\\path\\to` with your correct path name.\n\nNext, add the Flask configuration setting to the `api/.flaskenv` file:\n\n```\n    FLASK_APP=app.py\n    FLASK_ENV=development\n```\n\nThis will instruct Flask to use `app.py` as the main entry file and start up the project in development mode.\n\nNow, add your Pusher API keys to the `.env` file:\n\n```\n    PUSHER_APP_ID=app_id\n    PUSHER_KEY=key\n    PUSHER_SECRET=secret\n    PUSHER_CLUSTER=cluster\n```\n\nMake sure to replace `app_id`, `key`, `secret` and `cluster` with your own Pusher keys which you have noted down earlier.\n\nNext, create a Flask instance by adding the below code to `api/app.py`:\n\n``` python\n    # app.py\n    \n    from flask import Flask, request, jsonify, render_template, redirect\n    import os\n    import pusher\n    \n    app = Flask(__name__)\n    \n    @app.route('/')\n    def index():\n        return jsonify(\"Pong!\")\n    \n    # run Flask app\n    if __name__ == \"__main__\":\n        app.run()\n```\n\nNow, add the following python packages to the `api/requirements.txt` file:\n\n```\n    Flask==1.0.2\n    python-dotenv==0.8.2\n    pusher==2.0.1\n    SQLAlchemy==1.2.0\n    Flask-SQLAlchemy==2.1\n    Flask-JWT-Extended==3.13.0\n```\n\nThe packages we added:\n\n- [python-dotenv](https://github.com/theskumar/python-dotenv): this library will be used by Flask to load environment configurations files\n- [pusher](https://github.com/pusher/pusher-http-python): this is the Pusher Python library that makes it easy to interact with its API\n- [Flask](http://flask.pocoo.org/): the Python framework we are using to build the app\n- [SQLALchemy](https://www.sqlalchemy.org/): a Python SQL toolkit and Object Relational Mapper that gives application developers the full power and flexibility of SQL\n- [Flask-JWT-Extended](https://flask-jwt-extended.readthedocs.io/en/latest/basic_usage.html): package for adding [JWT](https://jwt.io/) authentication\n\nNow install the library by executing the below command:\n\n```\n    $ pip install -r requirements.txt\n```\n\nOnce the packages are done installing, start-up Flask:\n\n```\n    $ flask run\n```\n\nIf there is no error, our Flask app will now be available on port 5000. If you visit http://localhost:5000, you will get a text: “Pong!”\n\n## Setting up a proxy\n\nSince we are going to run the Vue and Flask app side by side, we will set up a proxy to enable us access Flask endpoints on the Vue app as if they live in the Vue app. This way we don’t have to include the full URL of our Flask app nor the port. All we’ll do is use the endpoint for example `/api/users` without having to add full app URL as http://localhost:5050/api/users. This is done by [proxying](https://vuejs-templates.github.io/webpack/proxy.html). \n\nWe’ll set this up using the Vue config file. Create the config file in the root directory of the `pusher-chat-sentiment-analysis` root folder:\n\n```\n    $ touch vue.config.js\n```\n\nThen add the below config to the file:\n\n``` javascript\n    // vue.config.js\n    \n    module.exports = {\n      devServer: {\n        proxy: {\n          \"/api\": {\n            target: \"http://localhost:5000\",\n            ws: false,\n            changeOrigin: true\n          }\n        }\n      }\n    };\n```\n\nNow any URL we call on the Vue app that has a prefix of “/api” will be proxied for us to our Flask app which is running on http://localhost:5000.\n\n## Install the Pusher JavaScript library and axios\n\nWe’ll use the [axios](https://github.com/axios/axios) library for making HTTP requests. Add the axios library by executing the below command in the `pusher-chat-sentiment-analysis` root folder:\n\n```\n    $ vue add axios\n```\n\nAdd the [Pusher JavaScript](https://github.com/pusher/pusher-js) library:\n\n```\n    $ npm install pusher-js\n```\n\nOur project is all set up now. The Vue app lives in the `pusher-chat-sentiment-analysis` root folder while the Flask app lives in the `api` subfolder.\n\n## Set up the Vue environment config\n\nLet’s keep things in order so that we don’t have to add our Pusher key to our code directly. With Vue [environment](https://cli.vuejs.org/guide/mode-and-env.html) setup, we can set our Pusher key and easily access it. \n\nCreate a `.env` file in the root folder of the project:\n\n```\n    $ touch .env\n```\n\nThen add your Pusher key:\n\n```\n    VUE_APP_PUSHER_KEY=\u003cPUSHER_APP_KEY\u003e\n    VUE_APP_PUSHER_CLUSTER=\u003cPUSHER_APP_CLUSTER\u003e\n```\n\nMake sure to replace `\u003cPUSHER_APP_KEY\u003e` and `\u003cPUSHER_APP_CLUSTER\u003e` with your actual Pusher App credentials.\n\n## Conclusion\n\nIn this tutorial, we have been able to set up our Vue app to communicate with our Flask application. We also installed the Python and JavaScript libraries that we’ll be using in the app. \n\nIn the next part of this tutorial series, we will design the database for the chat app, build the chat interface and also implement login and registration endpoint.","metaTitle":"Build a chat app in Flask and Vue - Part 1","metaDescription":"This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each other in realtime, see when other users are online, and be notified of new messages. In part one, install dependencies and set up the project."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"ego8bPzHfqiAQEQCwEo8S","type":"Entry","createdAt":"2018-11-12T17:11:35.800Z","updatedAt":"2019-01-02T15:41:36.362Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":6,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app in Flask and Vue with sentiment analysis - Part 2: Building the chat interface","url":"chat-flask-vue-part-2","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"38Gip5IBCgiiy4AYeeyyqG","type":"Entry","createdAt":"2018-03-04T19:48:48.360Z","updatedAt":"2018-03-04T19:48:48.360Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Gideon Onwuka","url":"gideon-onwuka","email":"dongidomed@gmail.com","twitter":"https://twitter.com/gideon_onwuka","github":"https://github.com/dongido001","guestWriter":true}}],"projectRepo":"https://github.com/dongido001/pusher-chat-sentiment-analysis/tree/part-2","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-09-08","description":"This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each other in realtime, see when other users are online, and be notified of new messages. In part two, build the chat interface.","prerequisite":"You will need Node 8.9+ and Python 3.6+ installed on your machine.","content":"In this part, we are going to design/create the database, build the chat interface and also implement the login and registration endpoints. The code is available on [GitHub](https://github.com/dongido001/pusher-chat-sentiment-analysis/tree/part-2).\n\nThis is the second part of this tutorial series. In the [first part](https://pusher.com/tutorials/chat-flask-vue-part-1), we set up our working environment and also created the project. We were able to communicate with Flask from the Vue app. \n\n\n## Creating the chat interface\n\nVue enables us to build reusable components which make up our app user interface. We’ll split the app UI into smaller components so we can build them separately:\n\n![flask-vue-sentiment-ui](//images.ctfassets.net/1es3ne0caaid/1AH5nwgf0sOI86umMgYCcq/e2b418338284ffb0afd357f1f081bfdf/flask-vue-sentiment-ui.png)\n\nIn the image above we have:\n\n\n- The area with the red border is our base component which will house other components. This is the entire app component area that Vue creates by default. The file is located in  `src/App.vue`.\n- [1] - `Users` component. This component will be responsible for listing all our registered users.\n- [2] - `Messages` component. This component renders messages.\n- [3] - `MessageInput` component. This is the input form for sending messages.\n- [4] - `NavBar` component. This is the navigation bar at the top of the app.\n\nIf you go through the Vue app in the project root folder, you will see a couple of files already created.\n\nSince we are building a one-to-one private chat, we need a way to uniquely identify every user of our app. We’ll do so using their username. This means they have to log in to use the app.  Once they are logged in, they’d be able to see the chat interface above. \n\nWe’ll also create a  `Login` component which will build up the login page. \n\nBefore we start building these components, let's add Bootstrap-vue to speed up the design process. Bootstrap-vue project already structures our normal [Bootstrap](https://getbootstrap.com/) into components which will be easy for us. You can read more on the documentation [here](https://bootstrap-vue.js.org/).\n\n### Adding Bootstrap-vue\n\nAdd bootstrap-vue using Vue command from the `one-to-one` root folder:\n\n```\n    $ vue add bootstrap-vue\n```\n\n```\n    📦  Installing vue-cli-plugin-bootstrap-vue...\n    \n    + vue-cli-plugin-bootstrap-vue@0.1.0\n    added 1 package from 1 contributor and audited 13896 packages in 71.714s\n    found 0 vulnerabilities\n    \n    ✔  Successfully installed plugin: vue-cli-plugin-bootstrap-vue\n    \n    ? Use babel/polyfill? No\n    \n    🚀  Invoking generator for vue-cli-plugin-bootstrap-vue...\n    📦  Installing additional dependencies...\n```\n\nVue will handle all the configuration settings for us. If the command ran successfully, you will notice a new folder named plugins in `src` folder. In this folder,  you will also find a file named `bootstrap-vue.js` that imports the Bootstrap files.\n\n### App.vue component\n\nAs mentioned earlier, the `src/App.vue` file is the main entry components housing all other components in the app. This means we’re going to import every other component to this file.\n\nAlso, we are using the [single file component structure](https://vuejs.org/v2/guide/single-file-components.html) approach to create our components, which have three sections:\n\n- `\u003ctemplate\u003e` section. This section holds all markup, basically our HTML markup.\n- `\u003cscript\u003e` section. This is where our JavaScript code resides.\n- `\u003cstyle\u003e` section. For adding styles such as CSS.\n\nA component file looks like this:\n\n``` html\n    \u003ctemplate\u003e\n      \u003cdiv\u003e\n          Some HTML markup\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n      console.log(\"Some JavaScript code\");\n    \u003c/script\u003e\n    \n    \u003cstyle\u003e\n     /* Styles */\n    .style {\n      color: lime;\n    }\n    \u003c/style\u003e\n```\n\nNow, replace the content in the `\u003ctemplate\u003e` section of the `src/App.vue` file with the below markup:\n\n``` html\n    \u003ctemplate\u003e\n      \u003cdiv id=\"app\"\u003e\n        \u003cLogin /\u003e\n        \u003cb-container\u003e\n          \u003cNavBar :logged_user=\"logged_user_username\" /\u003e\n          \u003cb-row class=\"main-area\"\u003e\n            \u003cb-col cols=\"4\" class=\"users\"\u003e\n              \u003cUsers /\u003e\n            \u003c/b-col\u003e\n            \u003cb-col cols=\"8\" class=\"messages-area\"\u003e\n              \u003cdiv class=\"messages-main\"\u003e\n                \u003cdiv \n                  v-if=\"!current_chat_channel\" \n                  class=\"select-chat text-center\"\n                \u003e\n                  Select a user to start chatting... \n                \u003c/div\u003e\n                \u003cMessages \n                  v-else \n                  :active_chat=\"active_chat_id\" \n                  :messages=\"messages[current_chat_channel]\"\n                /\u003e \n              \u003c/div\u003e\n              \u003cMessageInput /\u003e\n            \u003c/b-col\u003e\n          \u003c/b-row\u003e\n        \u003c/b-container\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nThis is our whole chat interface we have defined with some HTML, the bootstrap-vue components and our app components, which we have broken down in the image above earlier. \n\nWe’re yet to create the files for our components, let’s do so now. Create the below files in the `src/components/` folder:\n\n- Login.vue\n- NavBar.vue\n- Users.vue\n- MessageInput.vue\n- Messages.vue\n\nNext, import and register the components. Replace the content in the `\u003cscript\u003e` section in `src/App.vue` file with the below code:\n\n``` javascript\n    \u003cscript\u003e\n    import MessageInput from \"./components/MessageInput.vue\";\n    import Messages from \"./components/Messages.vue\";\n    import NavBar from \"./components/NavBar.vue\";\n    import Login from \"./components/Login.vue\";\n    import Users from \"./components/Users.vue\";\n    import Pusher from \"pusher-js\";\n    \n    // Declare pusher variable so it's global to this file.\n    let pusher;\n    \n    export default {\n      name: \"app\",\n      components: {\n        MessageInput,\n        NavBar,\n        Messages,\n        Users,\n        Login\n      },\n      data: function() {},\n      methods: {},\n    };\n    \u003c/script\u003e\n```\n\nWhen you import a component, you need to let Vue know of the component, which is what we did in the `components: {` block. We also imported the Pusher JavaScript library, which we are going to use to communicate with Pusher from our client. \n\nNext, add some styling. Update the styles in the `\u003cstyle\u003e` section with the below code in `src/App.vue`:\n\n``` css\n    \u003cstyle\u003e\n    .messages-main {\n      overflow-y: scroll;\n      height: 90%;\n    }\n    .users {\n      padding: 0px !important;\n      border: 1px solid gray;\n    }\n    .no-margin {\n      margin: 0px;\n    }\n    .messages-area {\n      border: 1px solid gray;\n      padding: 0px !important;\n      max-height: calc(100vh - 4em) !important;\n    }\n    .input-message {\n      height: 40px;\n    }\n    .active {\n      background: #17a2b8 !important;\n      border: #17a2b8 !important;\n    }\n    .select-chat {\n      margin-top: 35vh;\n      padding: 8px;\n    }\n    .main-area {\n      margin: 0px;\n      min-height: calc(100vh - 5em) !important;\n    }\n    .logged_user {\n      color: white;\n    }\n    \u003c/style\u003e\n```\n\nNow load up the Vue app in your [browser](http://localhost:8080) again to see what we have. You should notice the page is almost empty but without any error:\n\n![flask-vue-sentiment-demo-2](//images.ctfassets.net/1es3ne0caaid/1BRximPRuMwKO6WYcs8cAe/e9f1801e42a794d440943263b73679f8/flask-vue-sentiment-demo-2.png)\n\nThat's a good sign 🙂.\n\nThe components we have created are all empty. The next thing we will do is to build up the components and then observe the chat interface come to life as we build along.\n\nYou can leave the page open on your browser and observe the changes to the page when we update the component files.\n\n### Login.vue\n\nAdd the below code to `src/components/Login.vue`:\n\n``` html\n    \u003ctemplate\u003e\n        \u003cdiv class=\"login\"\u003e\n          \u003cdiv v-if=\"proccessing\" class=\"text-center\"\u003e Please wait... \u003c/div\u003e\n          \u003cdiv v-if=\"message\" class=\"text-center\"\u003e {{message}} \u003c/div\u003e\n          \n          \u003cb-form-input\n            v-model=\"username\"\n            type=\"text\"\n            class=\"input-form\"\n            placeholder=\"Username\"\u003e\n          \u003c/b-form-input\u003e\n          \n          \u003cb-form-input\n            v-model=\"password\"\n            class=\"input-form\"\n            type=\"password\"\n            placeholder=\"Password\"\u003e\n          \u003c/b-form-input\u003e\n          \n          \u003cb-button \n            v-on:click=\"login\" \n            variant=\"primary\" \n            class=\"btn-block\"\n          \u003e\n          Log me in\n         \u003c/b-button\u003e\n         \n        \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    export default {\n      name: \"Login\",\n      data() {\n        return {\n          username: \"\",\n          password: \"\",\n          proccessing: false,\n          message: \"\"\n        };\n      },\n    };\n    \u003c/script\u003e\n    \n    \u003cstyle scoped\u003e\n    .login {\n      width: 500px;\n      border: 1px solid #cccccc;\n      background-color: #ffffff;\n      margin: auto;\n      margin-top: 200px;\n      padding: 20px;\n    }\n    .input-form {\n      margin-bottom: 9px;\n    }\n    \u003c/style\u003e\n```\n\nHere we added two input fields: **username** and **password** and a button to submit the form. Then we [bind](https://vuejs.org/v2/guide/forms.html) the input fields to our data. In the `\u003cscript\u003e` section, we exported an object defining data for the component.\n\n### NavBar.vue\n\nNext, add the content for the NavBar component to `src/components/NavBar.vue`:\n\n``` html\n    \u003ctemplate\u003e\n        \u003cb-navbar toggleable=\"md\" type=\"dark\" variant=\"info\" class=\"nav-bar\"\u003e\n            \u003cb-navbar-toggle target=\"nav_collapse\"\u003e\u003c/b-navbar-toggle\u003e\n            \u003cb-navbar-brand href=\"#\"\u003eChitChat\u003c/b-navbar-brand\u003e\n            \u003cb-collapse is-nav id=\"nav_collapse\"\u003e\n                \u003cb-navbar-nav class=\"ml-auto logged_user\" \u003e\n                    Welcome back {{logged_user}}\n                \u003c/b-navbar-nav\u003e\n            \u003c/b-collapse\u003e\n        \u003c/b-navbar\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    export default {\n      name: \"NavBar\",\n      props: {\n        logged_user: String\n      }\n    };\n    \u003c/script\u003e\n    \n    \u003cstyle scoped\u003e\n    .nav-bar {\n      border-bottom: 1px solid #17a2b8;\n    }\n    \u003c/style\u003e\n```\n\n### Users.vue\n\nAdd the below code to `src/components/Users.vue` for the Users component:\n\n``` html\n    \u003ctemplate\u003e\n      \u003cdiv style=\"margin-top: 0px;\"\u003e\n        \u003cdiv v-for=\"(user, id) in users\" v-bind:key=\"id\"\u003e\n          \u003cdiv\n            v-bind:class=\"[activeUser == user.id ? 'user active' : 'user']\"\n            v-on:click=\"chat(user.id)\"\n          \u003e\n            {{user.userName}}\n            \u003cspan v-if=\"user.has_new_message\" class=\"has_new_message\"\u003eNew message\u003c/span\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \u003cscript\u003e\n    export default {\n      name: \"Users\",\n      props: {\n        users: Array\n      },\n      data() {\n        return {\n          activeUser: null\n        };\n      },\n      methods: {\n        chat: function(id) {\n          this.activeUser = id;\n          this.$emit(\"chat\", id);\n        }\n      }\n    };\n    \u003c/script\u003e\n    \u003cstyle scoped\u003e\n    .user {\n      margin: 0px !important;\n      padding: 10px 4px 10px 8px;\n      border-bottom: 1px solid gray;\n    }\n    .active {\n      background: #17a2b8;\n      color: white;\n    }\n    .has_new_message {\n      background-color: #17a2b8;\n      border-radius: 4px;\n      display: inline-block;\n      color: white;\n      margin-bottom: -4px;\n      font-size: 10px;\n      margin: 4px;\n      padding: 3px;\n      font-weight: bolder;\n    }\n    \u003c/style\u003e\n```\n\nNotice the v-for [directive](https://vuejs.org/v2/guide/list.html) we are using to render our users. The `users` array will be passed from the `src/App.vue` component as [property](https://vuejs.org/v2/guide/components-props.html). \n\nWe are also using the `v-on` (`v-on:click=\"chat(user.id)\"`) [directive](https://vuejs.org/v2/guide/events.html) to listen for click events when a user is clicked. If a user is clicked, we then call the chat function we have defined in the methods property. \n\nAlso, in the chat function, we are [emitting](https://vuejs.org/v2/api/#vm-emit) an event to `src/App.vue` so that the chat for that user can be initialized.\n\nAlso, `\u003cspan v-if=\"user.has_new_message\" class=\"has_new_message\"` will display \nthe text: “New message” on the users tab whenever they get a message from a user they are not currently chatting with.\n\n### Messages.vue\n\nAdd the below code to `src/components/Messages.vue` for the Messages component:\n\n``` html\n    \u003ctemplate\u003e\n       \u003cdiv\u003e\n        \u003cdiv v-for=\"(message, id) in messages\" v-bind:key=\"id\"\u003e \n            \u003cdiv class=\"chat-message col-md-5\" \n              v-bind:class=\"[(message.from_user == active_chat) ? 'to-message' : 'from-message offset-md-7']\"\u003e\n              {{message.message}}\n            \u003c/div\u003e \n        \u003c/div\u003e\n       \u003c/div\u003e\n    \u003c/template\u003e\n    \u003cscript\u003e\n    export default {\n      name: \"Messages\",\n      props: {\n        messages: Array,\n        active_chat: Number\n      }\n    };\n    \u003c/script\u003e\n    \u003cstyle\u003e\n    .from-message {\n      background: #17a2b8;\n      color: white;\n      border-radius: 3px;\n      padding: 8px 2px;\n      margin-bottom: 4px;\n    }\n    .to-message {\n      background: rgb(201, 209, 209);\n      color: rgb(41, 53, 52);\n      border-radius: 3px;\n      padding: 8px 2px;\n      margin-bottom: 4px;\n    }\n    \u003c/style\u003e\n```\n\n### MessageInput.vue\n\nAdd the below code to `src/components/MessageInput.vue` for the MessageInput component:\n\n``` html\n    \u003ctemplate\u003e\n        \u003cdiv class=\"message-input\"\u003e\n            \u003cb-form-input \n              v-model=\"message_input\"\n              type=\"text\"\n              placeholder=\"Enter your message\"\n              v-on:keyup.enter.native=\"send_message\"\n            \u003e\n            \u003c/b-form-input\u003e\n        \u003c/div\u003e\n    \u003c/template\u003e\n    \n    \u003cscript\u003e\n    export default {\n      name: \"MessageInput\",\n      data() {\n        return {\n          message_input: \"\"\n        };\n      },\n      methods: {\n        send_message() {\n          this.$emit(\"send_message\", this.message_input);\n          this.message_input = \"\";\n        }\n      }\n    };\n    \u003c/script\u003e\n    \n    \u003cstyle scoped\u003e\n    .message-input {\n      position: absolute;\n      bottom: 0px;\n      width: 100%;\n    }\n    \u003c/style\u003e\n```\n\nWe now have our chat interface. \n\n![flask-vue-sentiment-demo-3](//images.ctfassets.net/1es3ne0caaid/KOdZR8doGYyk2qcMeQm0/17c720e1fa131c92f1eaba9dc5e03394/flask-vue-sentiment-demo-3.png)\n\nDon’t worry that the login form and the chat area are together, we’ll fix it in the next part.\n\n## The database\n\nWe will use SQLite for the database. \n\nFor our chat app, we’ll create three tables:\n\n\n- **users** — This will hold all the users in the application.\n- **channels** — Once two users start a conversation, we will create a new channel for them and store the channel name to the database. So that for subsequent conversation, we don’t need to create a new channel for them.\n- **messages** — We’ll store every conversation to this table. We don’t want a situation where a user logs out and logs in again to find out their previous messages are missing.\n\n![flask-vue-sentiment-demo-4](//images.ctfassets.net/1es3ne0caaid/3lRIvf4P96C262ck2WgIIs/cf0d453aa2b479f47cb4de55d1de04af/flask-vue-sentiment-demo-4.png)\n\nAdd the below code to `api/database.py` to prepare the database connection:\n\n``` python\n    from sqlalchemy import create_engine\n    from sqlalchemy.orm import scoped_session, sessionmaker\n    from sqlalchemy.ext.declarative import declarative_base\n    engine = create_engine('sqlite:///database.db', convert_unicode=True)\n    db_session = scoped_session(sessionmaker(autocommit=False,\n                                                autoflush=False,\n                                                bind=engine))\n    Base = declarative_base()\n    Base.query = db_session.query_property()\n    def init_db():\n        import models\n        Base.metadata.create_all(bind=engine)\n```\n\nWe are using SQLAlchemy to initialize our database connection. \n\nIn the `init_db()` function, we imported our models and finally call `Base.metadata.create_all` to create all the tables specified in the model’s file.\n\n## Create the models\n\nLet’s create a model for easy CRUD operations.\n\nAdd the model definition to `api/models.py`:\n\n``` python\n    from sqlalchemy import Column, Integer, String, Text, ForeignKey\n    from database import Base\n    \n    class User(Base):\n        __tablename__ = 'users'\n        id = Column(Integer, primary_key=True)\n        username = Column(String(50), unique=True)\n        password = Column(String(128))\n        def __init__(self, username=None, password=None):\n            self.username = username\n            self.password = password\n            \n        def __repr__(self):\n            return '\u003cUser %r\u003e' % (self.username)\n            \n    class Channel(Base):\n        __tablename__ = 'channels'\n        id = Column(Integer, primary_key=True)\n        name = Column(String(60))\n        from_user = Column(Integer, ForeignKey('users.id'))\n        to_user = Column(Integer, ForeignKey('users.id'))\n    \n    class Message(Base):\n        __tablename__ = 'messages'\n        id = Column(Integer, primary_key=True)\n        message = Column(Text)\n        from_user = Column(Integer, ForeignKey('users.id'))\n        to_user = Column(Integer, ForeignKey('users.id'))\n        channel_id = Column(Integer, ForeignKey('channels.id'))\n```\n\nIn this file, we create three classes which define the structure of the tables our app will be using.\n\nNow import the files to `api/app.py`:\n\n``` python\n    # ./api/app.py\n    \n    # [...]\n    from database import db_session\n    from models import User, Channel, Message\n    # [...] \n```\n\nNext, let’s close the connection to the database once an operation is complete.  Add the following code to `api/app.py`  after `app = Flask(__name__)` line:\n\n``` python\n    @app.teardown_appcontext\n    def shutdown_session(exception=None):\n        db_session.remove()\n```\n\n### Create the database and tables\n\nNow, let’s create the database and tables. Open up a new command window and change your directory to the project’s root folder, activate your virtualenv and then run the below commands:\n\n``` \n    # Go to the Flask app\n    $ cd api\n    \n    # Activate your virtualenv\n    \n    # Enter python interactive shell\n    $ python\n    \u003e\u003e\u003e from database import init_db\n    \u003e\u003e\u003e init_db()\n```\n\nIf there is no error, a new file named `database.db` will be created in the `api` folder. \n\n\n\u003e ⚠️ You might get an error if your virtualenv is not activated. You need to activate your virtualenv before running the above command.\n\n## Authentication Route\n\nWe are almost done. We need some endpoints for adding and authenticating our users.\n\nThe [Werkzeug](http://werkzeug.pocoo.org/) is a Python utility library which Flask depends on. Since we have installed Flask, we’ll also have access to the library.\n\nImport the function for generating and checking password hash from the Werkzeug library to `api/app.py` file:\n\n``` python\n    #app.py\n    \n    #[...]\n    from werkzeug.security import generate_password_hash, check_password_hash\n    #[...]\n```\n\n### Register\n\nNext, add the route for adding new users to `api/app.py`: \n\n``` python\n    @app.route('/api/register', methods=[\"POST\"])\n    def register():\n        data = request.get_json()\n        username = data.get(\"username\")\n        password = generate_password_hash(data.get(\"password\"))\n        \n        try:\n            new_user = User(username=username, password=password)\n            db_session.add(new_user)\n            db_session.commit()\n        except:\n            return jsonify({\n                \"status\": \"error\",\n                \"message\": \"Could not add user\"\n            })\n            \n        return jsonify({\n            \"status\": \"success\",\n            \"message\": \"User added successfully\"\n        }), 201\n```\n\nHere we created a new route named `/api/register` which is only available via a POST request. It will accept JSON object containing the new user details - username and password.\n\nFinally, we added the user to the database. If an error occurred while adding, we inform the user with a JSON response:\n\n``` python\n            return jsonify({\n                \"status\": \"error\",\n                \"message\": \"Could not add user\"\n            })\n```\n\nElse we respond with a success message:\n\n``` python\n        return jsonify({\n            \"status\": \"success\",\n            \"message\": \"User added successfully\"\n        }), 201\n```\n\nUsing a REST client like [Postman](https://www.getpostman.com/), you can now register a new user:\n\n![flask-vue-sentiment-postman-1](//images.ctfassets.net/1es3ne0caaid/1mWJ749YecOeE4WWOO0Sck/e5558ad47c4f0aa72dd8b99fb084db00/flask-vue-sentiment-postman-1.png)\n\n To register users using Postman, open up the Postman app then,\n\n- Close the first pop up that appears.\n- Select **POST** as the request method.\n- Add http://localhost:5000/api/register to the request URL field.\n- Click on the **Body** tab right below the URL field.\n- Then choose **raw** in the options that appear after the **Body** tab you just selected.\n- In the same line with the **raw** option, select **JSON (application/json)** in the drop down.\n- Now, add the user’s information you want to register to the text field that appears after the option you just selected:\n\n```\n    {\n       \"username\": \"\u003cusername\u003e\",\n       \"password\": \"\u003cpassword\u003e\"\n    }\n```\n \n Make sure to replace `\u003cusername\u003e` and `\u003cpassword\u003e` placeholders with the information of the user you want to register.\n\n- Finally, click on the **Send** button to send the request to the server. \n\n \nRegister a couple of users and note down their credentials. We’ll use it to test the app later.\n \n### Login\n\nOne way of securing APIs and single page applications is by using [JWT](https://jwt.io/introduction/). It’s an encrypted token generated to securely transfer information between services. To implement JWT for our app, we will use the [Flask-JWT-extended](https://flask-jwt-extended.readthedocs.io) package. We have already installed the package so we’ll go ahead and use it.\n\nImport the package and configure it to use Flask app in `api/app.py`:\n\n``` python\n    from flask_jwt_extended import (\n        JWTManager, jwt_required, create_access_token,\n        get_jwt_identity\n    )\n```\n\nFrom the package, we imported the following functions:\n\n\n- **JWTManager** —  The Python class for configuring the package to use Flask app config.\n- **jwt_required** — A decorator for authenticating our routes.\n- **created_access_token** — A function for generating a token.\n- **get_jwt_identity** — A function for getting the identity (in our case the username) from a token.\n\nNext, let’s configure the package to use Flask app config. Add the below code to `api/app.py` immediately after `app = Flask(__name__)` line:\n\n``` python\n    app.config['JWT_SECRET_KEY'] = 'something-super-secret'  # Change this!\n    jwt = JWTManager(app)\n```\n\nNext, add the login route to `api/app.py`:\n\n``` python\n    @app.route('/api/login', methods=[\"POST\"])\n    def login():\n        data = request.get_json()\n        username = data.get(\"username\")\n        password = data.get(\"password\")\n        user = User.query.filter_by(username=username).first()\n        \n        if not user or not check_password_hash(user.password, password):\n            return jsonify({\n                \"status\": \"failed\",\n                \"message\": \"Failed getting user\"\n            }), 401\n            \n        # Generate a token\n        access_token = create_access_token(identity=username)\n        \n        return jsonify({\n            \"status\": \"success\",\n            \"message\": \"login successful\",\n            \"data\": {\n                \"id\": user.id,\n                \"token\": access_token,\n                \"username\": user.username\n            }\n        }), 200\n```\n\nWith this, we now have our login route - `/api/login` which is available via a POST requests. The route expects a expects a JSON object to be passed along that contains the details of the user.\n\n![flask-vue-sentiment-postman-2](//images.ctfassets.net/1es3ne0caaid/4uSxjMG1PO2WWoY2A8gS2q/0c82011179fc74de9f6476b863488cd8/flask-vue-sentiment-postman-2.png)\n\nTo test the login route, use the details of the user you just registered.\n\n## Conclusion\n\nIn this tutorial, we created our chat interface that was composed of Vue components. We also created the database for the chat application using SQLAlchemy.  \n\nFinally, we created a login and registration endpoint and also setup JWT for authenticating users and protecting our routes.","metaTitle":"Build a chat app in Flask and Vue - Part 2","metaDescription":"This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each other in realtime, see when other users are online, and be notified of new messages. In part two, build the chat interface."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6uyY1kfn9KQuqMOUwsyk2E","type":"Entry","createdAt":"2018-11-13T19:52:40.868Z","updatedAt":"2019-01-02T15:42:09.890Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a chat app in Flask and Vue with sentiment analysis  - Part 3: Live chat with sentiment analysis","url":"chat-flask-vue-part-3","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"38Gip5IBCgiiy4AYeeyyqG","type":"Entry","createdAt":"2018-03-04T19:48:48.360Z","updatedAt":"2018-03-04T19:48:48.360Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Gideon Onwuka","url":"gideon-onwuka","email":"dongidomed@gmail.com","twitter":"https://twitter.com/gideon_onwuka","github":"https://github.com/dongido001","guestWriter":true}}],"projectRepo":"https://github.com/dongido001/pusher-chat-sentiment-analysis/tree/part-3","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5NDDHe4dnGooOgCWY6gkmK","type":"Entry","createdAt":"2018-02-12T15:11:43.730Z","updatedAt":"2018-02-26T12:31:11.551Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social Interactions","url":"social-interactions","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}}],"reviewDate":"2018-09-05","description":"This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each other in realtime, see when other users are online, and be notified of new messages. In part three, implement live chat and sentiment analysis.","prerequisite":"You will need Node 8.9+ and Python 3.6+ installed on your machine.","content":"In this third tutorial, we will be implementing live chat and sentiment analysis.\n\nIf you haven’t followed the previous parts, you can catch it up here:\n\n- [Part one - Setting up the project](https://pusher.com/tutorials/chat-flask-vue-part-1)\n- [Part two - Create the chat interface, database design, login and registration endpoint](https://pusher.com/tutorials/chat-flask-vue-part-2)\n\n## Chatting over channels\n\n[Pusher Channels](https://pusher.com/channels) provides us with realtime functionalities. It has a publish/subscribe model where communication happens across channels. There are different types of channel, which we can subscribe to - [public channel](https://pusher.com/docs/client_api_guide/client_public_channels), [private channel,](https://pusher.com/docs/client_api_guide/client_private_channels) [presence channel](https://pusher.com/docs/client_api_guide/client_presence_channels) and the [encrypted channel](https://pusher.com/docs/client_api_guide/client_encrypted_channels).  \n\nFor our app, we will make use of the private channel since the chat messages need to be only accessible by the two users involved. This way we can authenticate a channels’ subscription to make sure users subscribing to it are actually authorized to do so. When naming your private channel, it needs to have a prefix of “private-”.\n\n### The flow\n\nOnce a user logs in, we'll redirect the user to the chat page. Then we subscribe this user to a private channel - `private-notification-\u003cthe_user_id\u003e`, where \u003cthe_user_id\u003e is the actual ID of the logged in user. This channel will be used to send notifications to the user. So that means every logged in user will have a private notification channel where we can notify them anytime we want to.  \n\nAfter subscribing to the notifications channel (“private-notification-\u003cthe_user_id\u003e”), we will start to listen for an event we will name `new_chat`. We'll trigger this event once a user clicks on another user they want to chat with. Also, we'll send along data that looks like below when triggering this event:\n\n```\n    {\n      from_user, // ID of the user initiating the chat\n      to_user, // ID of the other user\n      from_user_notification_channel,// notificaction channel for the user intiating the chat\n      to_user_notification_channel, // notificaction channel of the other user\n      channel_name, // The channel name where both can chat\n    }\n```\n\nIn the data above, we have:\n\n\n- `from_user` — The user that triggered the event (the user starting the conversation).\n- `to_user` — The other user.\n- `from_user_notification_channel` — Notification channel for the user initiating the chat (for example private-notification-1).\n- `to_user_notification_channel` — Notification channel for the other user (for example private-notification-2).\n- `channel_name` — The channel where both can exchange messages.\n\nThe notification channels for users is unique since we are making use of their IDs. \n\nHow do we generate the `channel_name`?\n\nWe need a way to generate a channel name for the two users since they need to be on the same channel to chat. Also, the name should not be re-used by other users. To do this we’ll use a simple convention to name the channel - \"private-chat_\u003cfrom_user\u003e_\u003cto_user\u003e\" (for example \"private-chat_1_2\"). Once we get the channel we’ll store it in the channels table. So subsequently, before we generate a new channel name, we’ll query the database to check if there is an already generated channel for the users and use that instead.\n\nAfter getting the channel_name, we’ll notify the other user (`to_user_notification_channel`) by triggering the `new_chat` event.\n\nOnce a user receives the `new_chat` event, we’ll subscribe that user to the channel name we got from the event and then start to listen for another event we’ll name `new_message` on the channel we just subscribed to. The `new_message` event will be triggered when a user types and submits a message.\n\nThis way, we’ll be able to subscribe users to channels dynamically so they can receive messages from any number of users at a time. Let’s go ahead and write the code.\n\n## Coding the Server\n\nFirst, initialize Pusher’s Python library by adding the following code to the `api/app.py` file right after the `app = Flask(__name__)` line of code:\n\n``` python\n    # api/app.py\n    \n    # [...]\n    \n    pusher = pusher.Pusher(\n        app_id=os.getenv('PUSHER_APP_ID'),\n        key=os.getenv('PUSHER_KEY'),\n        secret=os.getenv('PUSHER_SECRET'),\n        cluster=os.getenv('PUSHER_CLUSTER'),\n        ssl=True)\n    \n    # [...]\n```\n\nWe already have our login and register endpoint ready from part two. We still need to create several endpoints:\n\n\n- `/api/request_chat` we will use this endpoint to generate a channel name where both users can communicate. \n- `/api/pusher/auth` the endpoint for authenticating Pusher Channels subscription\n- `/api/send_message` the endpoint to send message across users.\n- `/api/users` endpoint for getting all users from the database.\n- `/api/get_message/\u003cchannel_id\u003e` we’ll use this endpoint to get all messages in a particular channel.\n\n### Request chat\n\nWe’ll make a request to the `/api/request_chat` endpoint to generate a channel name when users want to chat.\n\nRecall, every user on our chat will have their private channel. To keep things simple, we used \"private-notification_user_\u003cuser_id\u003e\" to name the channel. Where \u003cuser_id\u003e is the ID of that user in the users table. This way every users will have a unique channel name we can use to notify them.\n\nWhen users want to chat, they need to be on the same channel. We need a way to generate a unique channel name for both of them to use. This endpoint will generate such channel as \"private-chat_\u003cfrom_user\u003e_\u003cto_user\u003e\", where from_user is the user ID of the user initiating the chat and to_user is the user ID of the other user. Once we generate the channel name, we will store it to our channels table. Now if the two users want to chat again, we don't need to generate a channel name again, we'll fetch the first generated channel name we stored in the database. \n\nAfter the first user generates the channel name, we’ll notify the other users on their private channel, sending them the channel name so they can subscribe to it. \n\nAdd the below code to `api/app.py` to create the endpoint:\n\n``` python\n    # api/app.py\n    [...]\n    @app.route('/api/request_chat', methods=[\"POST\"])\n    @jwt_required\n    def request_chat():\n        request_data = request.get_json()\n        from_user = request_data.get('from_user', '')\n        to_user = request_data.get('to_user', '')\n        to_user_channel = \"private-notification_user_%s\" %(to_user)\n        from_user_channel = \"private-notification_user_%s\" %(from_user)\n        \n        # check if there is a channel that already exists between this two user\n        channel = Channel.query.filter( Channel.from_user.in_([from_user, to_user]) ) \\\n                               .filter( Channel.to_user.in_([from_user, to_user]) ) \\\n                               .first()\n        if not channel:\n            # Generate a channel...\n            chat_channel = \"private-chat_%s_%s\" %(from_user, to_user)\n            \n            new_channel = Channel()\n            new_channel.from_user = from_user\n            new_channel.to_user = to_user\n            new_channel.name = chat_channel\n            db_session.add(new_channel)\n            db_session.commit()\n        else:\n            # Use the channel name stored on the database\n            chat_channel = channel.name\n               \n        data = {\n            \"from_user\": from_user,\n            \"to_user\": to_user,\n            \"from_user_notification_channel\": from_user_channel,\n            \"to_user_notification_channel\": to_user_channel,\n            \"channel_name\": chat_channel,\n        }\n        \n        # Trigger an event to the other user\n        pusher.trigger(to_user_channel, 'new_chat', data)\n        \n        return jsonify(data)\n    [...]\n```\n\nIn the preceding code:\n\n- First of all, we created a route named `/api/request_chat` where users can get a channel name where they can chat.\n- We also protected the route to check for JWT token using `@jwt_required`.\n- Next, we get the ID of the user initiating the chat and the ID of the other participating user.\n- Next, we check if there is already a chat channel created for the two users in the database. If the channel name already exists, we return the channel else we generate a new channel for the users then save it to the database.\n- Then using `pusher.trigger()`, we trigger an event named `new_chat` to the other user’s private channel.\n- Finally, we return a JSON object containing the details of the channel name created.\n\n### Authenticate Channel subscriptions\n\nSince we are using a private channel, we need to authenticate every user subscribing to the channel. We’ll make a request to the `/api/pusher/auth` endpoint to authenticate channels.\n\nAdd the below code to create the endpoint to authenticate channels in `api/app.py`.\n\n``` python\n    # api/app.py\n    [...]\n    @app.route(\"/api/pusher/auth\", methods=['POST'])\n    @jwt_required\n    def pusher_authentication():\n        channel_name = request.form.get('channel_name')\n        socket_id = request.form.get('socket_id')\n    \n        auth = pusher.authenticate(\n            channel=channel_name,\n            socket_id=socket_id\n        )\n        \n        return jsonify(auth)\n    [...]\n```\n\nPusher will make a request to this endpoint to authenticate channels, passing along the channel name and socket_id of the logged in user. Then, we call `pusher.authenticate()` to authenticate the channel.\n\n### Sending messages\n\nWhen a user sends a message, we’ll save the message to the database and notify the other user. We’ll make a request to the `/api/send_message` endpoint for sending messages.\n\nAdd the following code to `api/app.py`.\n\n``` python\n    # api/app.py\n    [...]\n    @app.route(\"/api/send_message\", methods=[\"POST\"])\n    @jwt_required\n    def send_message():\n        request_data = request.get_json()\n        from_user = request_data.get('from_user', '')\n        to_user = request_data.get('to_user', '')\n        message = request_data.get('message', '')\n        channel = request_data.get('channel')\n        \n        new_message = Message(message=message, channel_id=channel)\n        new_message.from_user = from_user\n        new_message.to_user = to_user\n        db_session.add(new_message)\n        db_session.commit()\n        \n        message = {\n            \"from_user\": from_user,\n            \"to_user\": to_user,\n            \"message\": message,\n            \"channel\": channel\n        }\n        \n        # Trigger an event to the other user\n        pusher.trigger(channel, 'new_message', message)\n        \n        return jsonify(message)\n    [...]\n```\n\n- We created a POST request route which expects some data to be sent along:\n  - `from_user` - The user sending the message.\n  - `to_user` - The other user on the chat receiving the message.\n  - `message` - The chat message.\n  - `channel` - The channel name where both of the users are subscribed to.\n- Next, we save the data to the database using the Message() class. \n- Then finally, we trigger an event named `new_message` to the channel name that will be sent from the request data and then return the information as JSON.\n\n### Get all users\n\nWe’ll make a request to the `/api/users` endpoint to get all users. Add the below code to `api/app.py`:\n\n``` python\n    # api/app.py\n    [...]\n    @app.route('/api/users')\n    @jwt_required\n    def users():\n        users = User.query.all()\n        return jsonify(\n            [{\"id\": user.id, \"userName\": user.username} for user in users]\n        ), 200\n    [...]\n```\n\n### Get messages from a channel\n\nWe’ll make a request to the `/api/get_message/\u003cchannel_id\u003e` endpoint to get all messages sent in a channel. Add the below code to `api/app.py`:\n\n``` python\n    # api/app.py\n    [...]\n    @app.route('/api/get_message/\u003cchannel_id\u003e')\n    @jwt_required\n    def user_messages(channel_id):\n        messages = Message.query.filter( Message.channel_id == channel_id ).all()\n    \n        return jsonify([\n            {\n                \"id\": message.id,\n                \"message\": message.message, \n                \"to_user\": message.to_user,\n                \"channel_id\": message.channel_id,  \n                \"from_user\": message.from_user, \n            } \n            for message in messages\n        ])\n    [...]\n```\n\n## Coding the Client\n\n### Authenticate users\n\nOn our current view, we have the login form and the chat interface visible at the same time. Let’s make the login form only visible when the user is not logged in.\n\nTo fix it, add a [condition](https://it.vuejs.org/v2/guide/conditional.html) to check if the user is authenticated in `src/App.vue`:\n\n``` html\n    // ./src/App.vue\n    \n    [...]\n    \u003cLogin v-if=\"!authenticated\" v-on:authenticated=\"setAuthenticated\" /\u003e\n    \u003cb-container v-else\u003e\n    [...]\n```\n\nWe are using a `v-if` directive to check if `authenticated` is false so we can render the login component only. Since `authenticated` is not defined yet, it will resolve to undefined which is false, which is ok for now. \n\nLoad up the app on your browser to confirm that only the login form is visible.\n\nNext, update the `src/components/Login.vue` component with the below code to log users in:\n\n``` javascript\n    // ./src/components/Login.vue\n    \n    [...]\n    \u003cscript\u003e\n    export default {\n      name: \"Login\",\n      data() {\n        return {\n          username: \"\",\n          password: \"\",\n          proccessing: false,\n          message: \"\"\n        };\n      },\n      methods: {\n        login: function() {\n          this.loading = true;\n          this.axios\n            .post(\"/api/login\", {\n              username: this.username,\n              password: this.password\n            })\n            .then(response =\u003e {\n              if (response.data.status == \"success\") {\n                this.proccessing = false;\n                this.$emit(\"authenticated\", true, response.data.data);\n              } else {\n                this.message = \"Login Faild, try again\";\n              }\n            })\n            .catch(error =\u003e {\n              this.message = \"Login Faild, try again\";\n              this.proccessing = false;\n            });\n        }\n      }\n    };\n    \u003c/script\u003e\n    [...]\n```\n\nIn the preceding code:\n\n- We are making a POST request to `/api/login` to authenticate our users.\n- If the login was successful, we’ll emit an event named `authenticated` so we can act on it in the `src/App.vue` file. We also passed some data in the event:\n  - true - to indicate the login was successful\n  - response.data.data - contains details of the logged in user\n  \n\nNext, add some [state](https://vuejs.org/v2/guide/state-management.html) of the `src/App.vue` file in the `\u003cscript\u003e` section:\n\n``` javascript\n    // ./src/App.vue\n    \n    [...] \n      data: function() {\n        return {\n          messages: {},\n          users: [],\n          active_chat_id: null,\n          active_chat_index: null,\n          logged_user_id: null,\n          logged_user_username: null,\n          current_chat_channel: null,\n          authenticated: false\n        };\n      },\n    [...]\n```\n\nSo that the entire `\u003cscript\u003e` section looks like below:\n\n``` javascript\n    // ./App.vue\n    \n    import MessageInput from \"./components/MessageInput.vue\";\n    import Messages from \"./components/Messages.vue\";\n    import NavBar from \"./components/NavBar.vue\";\n    import Login from \"./components/Login.vue\";\n    import Users from \"./components/Users.vue\";\n    import Pusher from \"pusher-js\";\n    \n    let pusher;\n    \n    export default {\n      name: \"app\",\n      components: {\n        MessageInput,\n        NavBar,\n        Messages,\n        Users,\n        Login\n      },\n      data: function() {\n        return {\n          authenticated: false,\n          messages: {},\n          users: [],\n          active_chat_id: null,\n          active_chat_index: null,\n          logged_user_id: null,\n          logged_user_username: null,\n          current_chat_channel: null\n        };\n      },\n      methods: {},\n    };\n```\n\nWe defined some default states of data which we will use. For example, we’ll use the `authenticated: false` state to check if a user is authenticated or not.\n\nRecall that in the Login component, we emitted an event when a user logs in successfully. Now we need to listen to that event on the `src/App.vue` component so as to update the users states.\n\nAdd a function to set authenticated users information to `src/App.vue` in the methods block:\n\n``` javascript\n    // ./src/App.vue\n    \n    [...]\n      data: function() {\n        return {\n          authenticated: false,\n          messages: {},\n          users: [],\n          active_chat_id: null,\n          active_chat_index: null,\n          logged_user_id: null,\n          logged_user_username: null,\n          current_chat_channel: null\n        };\n      },\n      methods: {\n        async setAuthenticated(login_status, user_data) {\n          \n          // Update the states\n          this.logged_user_id = user_data.id;\n          this.logged_user_username = user_data.username;\n          this.authenticated = login_status;\n          this.token = user_data.token;\n          \n          // Initialize Pusher JavaScript library\n          pusher = new Pusher(process.env.VUE_APP_PUSHER_KEY, {\n              cluster: process.env.VUE_APP_PUSHER_CLUSTER,\n              authEndpoint: \"/api/pusher/auth\",\n              auth: {\n                headers: {\n                  Authorization: \"Bearer \" + this.token\n                }\n              }\n          });\n          \n          // Get all the users from the server\n          const users = await this.axios.get(\"/api/users\", {\n            headers: { Authorization: \"Bearer \" + this.token }\n          });\n          \n          // Get all users excluding the current logged user\n          this.users = users.data.filter(\n            user =\u003e user.userName != user_data.username\n          );\n    \n        },\n      },\n    };\n    [...]\n```\n\nIn the code above:\n\n- We created a new function named `setAuthenticated` which accepts the information we passed along when emitting the `authenticated` event in the Login.vue file.\n- After updating the component state with the logged in user information, we made a request to `/api/users` to get all registered users.\n- Then we initialize Pusher JavaScript library \n- Finally, we remove the current log users from the users list we got and then update the users state.\n\nFinally, pass down the users we fetched to the `Users.vue` component. Update the Users component in `src/App.vue`:\n\n``` html\n    // ./src/App.vue\n    [...]\n    \u003cUsers :users=\"users\" v-on:chat=\"chat\" /\u003e\n    [...]\n```\n\nHere we passed the users list down to the `Users.vue` component so we can render them. Also, using the v-on directive we listen for an event `chat` which will be triggered from `Users.vue` whenever a user is clicked to start up a chat. \n\n### Subscribe the user to a channel\n\nAdd the below code to the `setAuthenticated` function in `src/App.vue` to subscribe the user to a channel when they are logged in:\n\n``` javascript\n    // ./src/App.vue\n    \n    [...]\n      methods: {\n        async setAuthenticated(login_status, user_data) {\n          [...]\n          var notifications = pusher.subscribe(\n            `private-notification_user_${this.logged_user_id}`\n          );\n          \n          notifications.bind(\"new_chat\", data =\u003e {\n            const isSubscribed = pusher.channel(data.channel_name);\n            if (!isSubscribed) {\n              const one_on_one_chat = pusher.subscribe(data.channel_name);\n              \n              this.$set(this.messages, data.channel_name, []);\n              \n              one_on_one_chat.bind(\"new_message\", data =\u003e {\n                // Check if the current chat channel is where the message is coming from\n                if (\n                  data.channel !== this.current_chat_channel \u0026\u0026\n                  data.from_user !== this.logged_user_id\n                ) {\n                  // Get the index of the user that sent the message\n                  const index = this.users.findIndex(\n                    user =\u003e user.id == data.from_user\n                  );\n                  // Set the has_new_message status of the user to true\n                  this.$set(this.users, index, {\n                    ...this.users[index],\n                    has_new_message: true\n                  });\n                }\n                  \n                this.messages[data.channel].push({\n                  message: data.message,\n                  from_user: data.from_user,\n                  to_user: data.to_user,\n                  channel: data.channel\n                });\n              });\n            }\n          });\n          \n        },\n      },\n    };\n    [...]\n```\n\n- First, we subscribe the user to their private channel using `var notifications = pusher.subscribe(…` once they log in.\n- Next, we bind that channel to an event we named `new_chat` so we can get a notification when a user is requesting for a new chat.\n- Then if there is any new chat request, we’ll subscribe that user to the channel sent along and also bind that channel to a new event named `new_message`.\n- Finally, if there is a message coming to the event - `new_message`, we append the message to the “messages” property in the data component. Also, if the user is not currently chatting on the channel where they received the message, we’ll notify them of the message.\n\n### Get all messages in a channel\n\nAdd a function to fetch all messages in a chat channel to `src/App.vue` in the methods block:\n\n``` javascript\n    // ./src/App.vue\n    [...]\n        getMessage: function(channel_name) {\n          this.axios\n            .get(`/api/get_message/${channel_name}`, {\n              headers: { Authorization: \"Bearer \" + this.token }\n            })\n            .then(response =\u003e {\n              this.$set(this.messages, channel_name, response.data);\n            });\n        },\n    [...]\n```\n\n### The chat function\n\nWe'll call the function when a user clicks on another user they want to chat with to prepare the chat channel.\n\nAdd the below code to the methods block of `src/App.vue`\n\n``` javascript\n    // ./src/App.vue\n    \n    [...]\n        chat: function(id) {\n          this.active_chat_id = id;\n          \n          // Get index of the current chatting user...\n          this.active_chat_index = this.users.findIndex(\n            user =\u003e user.id == this.active_chat_id\n          );\n          \n          // Set the has_new_message status of the user to true\n          this.$set(this.users, this.active_chat_index, {\n            ...this.users[this.active_chat_index],\n            has_new_message: false\n          });\n          \n          this.axios\n            .post(\n              \"/api/request_chat\",\n              {\n                from_user: this.logged_user_id,\n                to_user: this.active_chat_id\n              },\n              { headers: { Authorization: \"Bearer \" + this.token } }\n            )\n            .then(response =\u003e {\n              this.users[this.active_chat_index][\"channel_name\"] =\n                response.data.channel_name;\n                \n              this.current_chat_channel = response.data.channel_name;\n              \n              // Get messages on this channel\n              this.getMessage(response.data.channel_name);\n              \n              var isSubscribed = pusher.channel(response.data.channel_name);\n              \n              if (!isSubscribed) {\n                var channel = pusher.subscribe(response.data.channel_name);\n                \n                this.$set(this.messages, response.data.channel_name, []);\n                \n                channel.bind(\"new_message\", data =\u003e {\n                 //Check if the current chat channel is where the message is comming from\n                  if (\n                    data.channel !== this.current_chat_channel \u0026\u0026\n                    data.from_user !== this.logged_user_id\n                  ) {\n                    // Set the has_new_message status of the user to true\n                    this.$set(this.users, this.active_chat_index, {\n                      ...this.users[this.active_chat_index],\n                      has_new_message: true\n                    });\n                  }\n                  \n                  this.messages[response.data.channel_name].push({\n                    message: data.message,\n                    from_user: data.from_user,\n                    to_user: data.to_user,\n                    channel: data.channel\n                  });\n                });\n              }\n            })\n            .catch(function(error) {\n              console.log(error);\n            });\n        },\n    [...]\n```\n\n- We make a request to `/api/request_chat` to get the channel name for the chat session.\n- Next, we update the state of the `current_chat_channel` with the channel returned using:\n    `this.current_chat_channel = response.data.channel_name;`\n- Then we subscribe the user to the channel name returned and then bind the channel to an event we named `new_message`. Once we receive a new message, we add the message to the messages state.\n- Also, in the bound `new_message` event, we check if the message received is between the current chat channel, else we display an alert notifying the user that they have a new message from another user.\n\nWe are already passing the messages to the `Messages.vue` component so any new message will be rendered on the page dynamically. Take a look at the Messages component in `src/App.vue`:\n\n``` html\n    \u003cMessages \n      v-else \n      :active_chat=\"active_chat_id\" \n      :messages=\"messages[current_chat_channel]\"\n    /\u003e\n```\n\n## Sending messages\n\nNow add the function for sending messages to `src/App.vue`:\n\n``` javascript\n    // ./src/App.vue\n    [...]\n        send_message: function(message) {\n          this.axios.post(\n            \"/api/send_message\",\n            {\n              from_user: this.logged_user_id,\n              to_user: this.active_chat_id,\n              message: message,\n              channel: this.current_chat_channel\n            },\n            { headers: { Authorization: \"Bearer \" + this.token } }\n          );\n        },\n    [...]\n```\n\nWe’ll call this function whenever a user submits a message. \n\nTake a look at the `MessageInput.vue` component which is the component for sending messages. You will notice that after the user submits a message, we trigger an event named `send_message` passing along the message text.\n\nNow we will listen to the event and send the message to the server once we get the event. Update the `MessageInput` component in the `\u003ctemplate\u003e` section of `src/App.vue`:\n\n``` html\n    [...]\n    \u003cMessageInput v-on:send_message=\"send_message\" /\u003e\n    [...]\n```\n\nHere, we listen for the event using the `v-on` directive and then call the function we just added (send_message) once we get the event. \n\nTest out the chat by opening the app in two different tabs on your browser.\n\n## Get sentiments from messages\n\nTo get the sentiment from messages, we’ll use the [TextBlob](https://textblob.readthedocs.io/en/dev/) Python library which provides a simple API for common natural language processing (NLP).\n\n### Install TextBlob\n\nFrom your terminal, make sure you are in the `api` folder. Also, make sure your virtualenv is activated. Then execute the below function.\n\n```\n    # Install the library\n    $ pip install -U textblob\n    \n    # Download NLTK corpora\n    $ python -m textblob.download_corpora lite\n```\n\nThis will install TextBlob and download the necessary NLTK [corpora](https://textblob.readthedocs.io/en/dev/install.html) (trained models).\n\nImport TextBlob to `api/app.py`:\n\n``` python\n    from textblob import TextBlob\n```\n\nAdd a function to get the sentiment of a message to `api/app.py`\n\n``` python\n    # ./api/app.py\n    \n    def getSentiment(message):\n            text = TextBlob(message)\n            return {'polarity' : text.polarity }\n```\n\nThe sentiment property returns a tuple of the form (polarity, subjectivity) where polarity ranges from -1.0 to 1.0 and subjectivity ranges from 0.0 to 1.0. We will only use the polarity property.\n\nNext, include the sentiment on the return statement in the `user_messages` function in `api/app.py`:\n\n``` python\n    [...]\n        return jsonify([\n            {\n                \"id\": message.id,\n                \"message\": message.message,\n                \"to_user\": message.to_user,\n                \"channel_id\": message.channel_id,\n                \"from_user\": message.from_user,\n                \"sentiment\": getSentiment(message.message)\n            }\n            for message in messages\n        ])\n    [...]\n```\n\nAnd also update the data we trigger to Pusher in the `send_message` function in `api/app.py`:\n\n``` python\n    [...]\n        message = {\n            \"from_user\": from_user,\n            \"to_user\": to_user,\n            \"message\": message,\n            \"channel\": channel,\n            \"sentiment\": getSentiment(message)\n        }\n    [...]\n```\n\nNow we have the sentiment of text. Let’s display the related emoji beside messages in the view.\n\nNext update the code in `src/components/Messages.vue` to display the emoji sentiment:\n\n``` javascript\n    [...]\n    \u003ctemplate\u003e\n       \u003cdiv\u003e\n        \u003cdiv v-for=\"(message, id) in messages\" v-bind:key=\"id\"\u003e \n            \u003cdiv class=\"chat-message col-md-5\" \n              v-bind:class=\"[(message.from_user == active_chat) ? 'to-message' : 'from-message offset-md-7']\"\u003e\n              {{message.message}}\n              {{ getSentiment(message.sentiment.polarity) }}\n            \u003c/div\u003e \n        \u003c/div\u003e\n       \u003c/div\u003e\n    \u003c/template\u003e\n    \u003cscript\u003e\n    export default {\n      name: \"Messages\",\n      data() {\n        return {\n          happy: String.fromCodePoint(0x1f600),\n          neutral: String.fromCodePoint(0x1f610),\n          sad: String.fromCodePoint(0x1f61f)\n        };\n      },\n      methods: {\n        getSentiment(sentiment) {\n          if (sentiment \u003e 0.5) {\n            return this.happy;\n          } else if (sentiment \u003c 0.0) {\n            return this.sad;\n          } else {\n            return this.neutral;\n          }\n        }\n      },\n      props: {\n        messages: Array,\n        active_chat: Number\n      }\n    };\n    \u003c/script\u003e\n    [...]\n```\n\nHere, we defined the emotions for each sentiment score.\n\nThen finally update the bound event for `new_message` to include the sentiment data. Update  `src/App.vue` as below in the `setAuthenticated` function:\n\n``` javascript\n    [...]\n    channel.bind(\"new_message\", data =\u003e {\n      [...]\n      this.messages[data.channel].push({\n        message: data.message,\n        sentiment: data.sentiment,\n        from_user: data.from_user,\n        to_user: data.to_user,\n        channel: data.channel\n      });\n    });\n    [...]\n```\n\nAnd also on the bound event in `chat` function to include the sentiment data in `src/App.vue` file:\n\n``` javascript\n    [...]\n    one_on_one_chat.bind(\"new_message\", data =\u003e {\n      [...]\n      this.messages[response.data.channel_name].push({\n        message: data.message,\n        sentiment: data.sentiment,\n        from_user: data.from_user,\n        to_user: data.to_user,\n        channel: data.channel\n      });\n    });\n    [...]\n```\n\nAnd that’s it! congrats. If you test the app again, you will see the sentiments of each chat messages.\n\n![flask-vue-sentiment-demo-part-3](//images.ctfassets.net/1es3ne0caaid/3hdpldMAYoUkKWWyM6WE4O/99313fd2fc32234b505db9136b3e60c3/flask-vue-sentiment-demo-part-3.gif)\n\n\u003e **Note**: If you are having issue with displaying the emoji in your browsers, you might want to use the latest version of Chrome or Mozilla to display it.\n\n## Conclusion\n\nIn this tutorial of the series, we have successfully built a one-to-one private chat with sentiment analysis using Pusher Channels to add realtime functionality.\n\nYou can get the complete code on [GitHub](https://github.com/dongido001/pusher-chat-sentiment-analysis/tree/part-3).","metaTitle":"Build a chat app in Flask and Vue - Part 3","metaDescription":"This four part series takes you through building a chat app using Flask and Vue. Users will be able to message each other in realtime, see when other users are online, and be notified of new messages. In part three, implement live chat and sentiment analysis."}}],"defaultValue":"Vue.js","queryType":"tag","pages":9,"route":"/tutorials","query":{"tag":"Vue.js","page":"4"}}},"page":"/tutorials","query":{"tag":"Vue.js","page":"4"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=Vue.js&page=4 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:46:13 GMT -->
</html>