<!DOCTYPE html><html lang="en">
<!-- Mirrored from pusher.com/tutorials?tag=Feeds&page=3 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:42:43 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head><script type="text/javascript" src="https://cdn.polyfill.io/v2/polyfill.min.js?features=default,fetch"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="03d3d286-a619-45cc-b4b4-cda87e817355" type="text/javascript" async=""></script><style></style><link rel="stylesheet" href="https://djmmlc8gcwtqv.cloudfront.net/fonts/style.css"/><meta charSet="utf-8"/><title>Tutorials</title><meta property="og:title" content="Tutorials"/><meta property="og:description" name="description" content="Pusher tutorials, learn what you can build with Pusher"/><meta property="og:type" content="website"/><meta property="og:locale" content="en_US"/><meta property="og:site_name" content="Pusher"/><meta property="og:url" content="https://pusher.com/tutorials"/><meta property="og:image" content="https://djmmlc8gcwtqv.cloudfront.net/imgs/tutorials/meta-pusher-square-logo.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><meta name="robots" content="noindex"/><meta name="google-site-verification" content="4nInkZEayBkHd-Ip-ZWzlf4hwac47VzQ5fS3Iup1TjQ"/><meta name="ahrefs-site-verification" content="a8dc9e8aed476acc9a95f7df10171f54a32e86d66a26f7d2139fc93dad051d06"/><link rel="dns-prefetch" href="https://d2cy1obokpvee9.cloudfront.net/"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-196x196.png" sizes="196x196"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-128.png" sizes="128x128"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-96x96.png" sizes="96x96"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-32x32.png" sizes="32x32"/><link rel="icon" type="image/png" href="https://d2cy1obokpvee9.cloudfront.net/manifest/favicon-16x16.png" sizes="16x16"/><style>
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          html,
          body {
            font-size: 16px;
            font-family: Maison Neue, sans-serif;
            text-rendering: optimizeLegibility;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        </style><script src="https://d3qy0ae439eg67.cloudfront.net/cdn/da7ae6c0-9455-11ea-9b03-c97f7c5e49d9.js"></script><meta name="next-head-count" content="21"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js" as="script"/><link rel="preload" href="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js" as="script"/><link rel="preload" href="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" as="script"/><link rel="preload" href="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" as="script"/><link rel="preload" href="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" as="script"/><link rel="preload" href="_next/static/runtime/main-584a95128cf78f0fbea3.js" as="script"/><link rel="preload" href="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" as="script"/><link rel="preload" href="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" as="script"/><link rel="preload" href="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" as="script"/></head><body><div class="root"><div id="__next"><main><style data-emotion-css="10izwvm">.css-10izwvm{width:100%;margin:0 auto;}</style><nav class="css-10izwvm e15rrn890"><style data-emotion-css="rk6moy">.css-rk6moy{max-width:75rem;margin:0 auto;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;z-index:2;padding:0.75rem 1rem;}@media all and (min-width:760px){.css-rk6moy{padding:1rem;}}</style><div class="css-rk6moy e15rrn891"><style data-emotion-css="1xvir01">.css-1xvir01{display:inline-block;}@media all and (min-width:760px){.css-1xvir01{display:inline-block;}}</style><div class="css-1xvir01 e8wkac50"><a href="index.html"><style data-emotion-css="1rjgloz">.css-1rjgloz{display:inline-block;width:144px;height:38px;vertical-align:middle;}</style><span class="css-1rjgloz e8wkac52"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a></div><style data-emotion-css="fcohl9">.css-fcohl9{display:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}@media all and (min-width:760px){.css-fcohl9{display:none;}}</style><div class="css-fcohl9 e8wkac51"><a href="index.html"><style data-emotion-css="5xa07n">.css-5xa07n{width:25px;display:inline-block;vertical-align:middle;line-height:0;}</style><span class="css-5xa07n"><svg id="svg-object" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 201" width="100%"><path id="one" d="M130.94 38.5l.27 1.55-12.34 6.56-.57-.88c.18-.26.12-.81-.2-.97L54.3 7.96c-.4-.2-.4-.8 0-1L65.1.76c.2-.1.4-.1.6 0l65 37.5c.11.05.2.14.24.25z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="two" d="M104.13 53.85a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.8 0 1l63.8 36.8c.4.2.4.8 0 1l.58.96 13.18-7.76-.73-.64z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="three" d="M77.59 69.1a.64.64 0 0 1-.43-.06l-65-37.5c-.2-.1-.4-.1-.6 0l-10.8 6.2c-.4.2-.4.98 0 1.18l63.8 36.62c1 .5.86.95 1.02 1.43l12.76-7.13-.75-.74z" fill="#300D4F" class="css-0 e1urnhlf0"></path><path id="four" d="M65.53 136.49H64.2v15l1.33-.47c.05-.1.13-.2.25-.25l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.85-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="five" d="M65.58 106.23h-1.09v14.9l1.09-.36c.04-.1.13-.2.24-.26l65-37.5c.2-.1.3-.3.3-.5v-12.5c0-.5-.5-.7-.9-.5l-63.8 37c-.32.16-.7 0-.84-.28z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="six" d="M131.17 38.95v13.1c0 .3-.1.4-.3.5l-65 37.5c-.2.1-.3.3-.3.5h-1.33V75.98h1.3l65.4-37.48c.15.1.23.28.23.45z" fill="#300D4F" class="css-0 e1urnhlf1"></path><path id="seven" d="M65.5 76.02v-1.39l-12.39-6.92v1.22c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5 0-41.42.2-82.27.1-123.9z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="eight" d="M26.5 53.58c.2.1.3.3.3.5v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V61.68c0-.5.5-.7.9-.5v-1.73l-13.2-7.34v1.47z" fill="#300D4F" class="css-0 e1urnhlf2"></path><path id="nine" d="M.46 38.13c-.03.07 0 .68 0 .75v124.3c0 .2.1.4.3.5l10.8 6.2c.4.2.9-.1.9-.5V46.48c0-.4.37-.63.7-.59l1.3-.52-13.3-7.64-.7.4z" fill="#300D4F" class="css-0 e1urnhlf2"></path></svg></span></a></div><style data-emotion-css="1w30q6i">.css-1w30q6i{position:relative;z-index:2;background-color:#ffffff;}@media all and (min-width:960px){.css-1w30q6i{display:none;}}</style><div class="css-1w30q6i ey74b780"><style data-emotion-css="16tdi1w">.css-16tdi1w{position:relative;display:block;z-index:2;margin:.5rem;}.css-16tdi1w path{-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;opacity:100;-webkit-transition:-webkit-transform .3s,opacity .3s;-webkit-transition:transform .3s,opacity .3s;transition:transform .3s,opacity .3s;}</style><svg viewBox="0 0 900 900" fill="#300D4F" width="30px" class="css-16tdi1w ey74b781"><path d="M145 609l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_bottom"></path><path d="M146 394c203,0 406,0 609,0 74,0 74,111 0,111 -203,0 -406,0 -609,0 -74,0 -74,-111 0,-111z" id="dash_middle"></path><path d="M146 179l609 0c74,0 74,111 0,111l-609 0c-74,0 -74,-111 0,-111z" id="dash_top"></path></svg><style data-emotion-css="1vzfu1c">.css-1vzfu1c{background-color:#ffffff;position:absolute;top:-1rem;right:-1rem;width:100vw;visibility:hidden;-webkit-transition:.2s linear all;transition:.2s linear all;-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95);-webkit-transform-origin:top right;-ms-transform-origin:top right;transform-origin:top right;opacity:0;border-radius:2px;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);}@media all and (min-width:400px){.css-1vzfu1c{width:auto;min-width:340px;}}</style><div class="css-1vzfu1c ey74b782"><style data-emotion-css="1imlk2a">.css-1imlk2a{padding-bottom:0;}</style><style data-emotion-css="2xoy5l">.css-2xoy5l{padding:0.7rem;border-top-right-radius:2px;border-top-left-radius:2px;padding-bottom:0;}</style><div class="css-2xoy5l ey74b784"><style data-emotion-css="1ays0sq">.css-1ays0sq{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;font-family:italian-plate,sans-serif;font-weight:600;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;text-transform:uppercase;line-height:1.2;margin:0.5rem 0.7rem;display:inline-block;text-transform:uppercase;color:#300D4F;-webkit-letter-spacing:1px;-moz-letter-spacing:1px;-ms-letter-spacing:1px;letter-spacing:1px;font-size:30px !important;}@media all and (min-width:400px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:760px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:960px){.css-1ays0sq{font-size:18px;}}@media all and (min-width:1200px){.css-1ays0sq{font-size:18px;}}</style><span class="css-1ays0sq ey74b783">Products</span></div><style data-emotion-css="r5j97r">.css-r5j97r{padding:0.7rem;border-radius:0;}</style><div type="primary" class="css-r5j97r ey74b784"><style data-emotion-css="1y45fp7">.css-1y45fp7{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:0.5rem;box-shadow:0px 0px 10px rgba(0,0,0,0.12);}</style><div class="css-1y45fp7"><style data-emotion-css="4s0ue6">.css-4s0ue6{display:block;padding:1rem 0.5rem;background:transparent;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:end;-webkit-box-align:end;-ms-flex-align:end;align-items:end;width:100%;}.css-4s0ue6:hover{background:#F6F6F6;}.css-4s0ue6:hover{background:#F6F6F6;}</style><a href="index-2.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="1yvjfro">.css-1yvjfro{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:0.5rem;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:760px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:960px){.css-1yvjfro{font-size:18px;}}@media all and (min-width:1200px){.css-1yvjfro{font-size:18px;}}.css-1yvjfro a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1yvjfro a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-1yvjfro e1xsodxy1">Build scalable realtime features</p></div></a><a href="index-3.html" type="primary" class="css-4s0ue6 e1xsodxy0"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-1yvjfro e1xsodxy1">Programmatic push notifications</p></div></a></div></div><div type="secondary" class="css-r5j97r ey74b784"><style data-emotion-css="jky6of">.css-jky6of{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:block;padding:0.6rem;color:#300D4F;-webkit-text-decoration:none;text-decoration:none;font-size:18px;}</style><a href="docs.html" type="secondary" class="css-jky6of er9zuxy0">Docs</a><a href="index-4.html" type="secondary" class="css-jky6of er9zuxy0">Customers</a><a href="index-8.html" type="secondary" class="css-jky6of er9zuxy0">Contact sales</a></div><style data-emotion-css="1pajrte">.css-1pajrte{margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><style data-emotion-css="bfp8qa">.css-bfp8qa{padding:0.7rem;border-radius:2px;margin:0 auto;width:100%;padding:1.75rem 2.5rem;border-top:2px solid #f5f4f4;}</style><div type="secondary" class="css-bfp8qa ey74b784"><style data-emotion-css="1hyfx7x">.css-1hyfx7x{display:none;}</style><div class="css-1hyfx7x"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="k7lhnn">.css-k7lhnn{width:100%;margin-left:0;}</style><style data-emotion-css="jfhgfv">.css-jfhgfv{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:100%;margin-left:0;}.css-jfhgfv:hover,.css-jfhgfv:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-jfhgfv:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-jfhgfv ermq5n0">Get your free account</a></div></div></div></div><style data-emotion-css="n7priw">.css-n7priw{display:none;}@media all and (min-width:960px){.css-n7priw{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}.css-n7priw > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-n7priw > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-n7priw e15rrn892"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="17vt6k1">.css-17vt6k1{display:none;}@media all and (min-width:960px){.css-17vt6k1{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}}</style><div class="css-17vt6k1 e15rrn892"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></nav><style data-emotion-css="cjdr47">.css-cjdr47{display:none;background-color:white;}@media all and (min-width:960px){.css-cjdr47{display:inline-block;width:100%;position:fixed;top:0;-webkit-transform:translateY(-120%);-ms-transform:translateY(-120%);transform:translateY(-120%);z-index:10;box-shadow:0px 2px 4px rgba(0,0,0,0.07);}}</style><div class="css-cjdr47 enjt0j72"><style data-emotion-css="17t3v76">.css-17t3v76{width:100%;max-width:75rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:1rem 1rem 0.75rem;position:relative;}</style><div class="css-17t3v76 enjt0j70"><a href="index.html"><span style="width:144px;height:38px;display:inline-block;vertical-align:middle"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#300d4f" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#300d4f"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></span></a><style data-emotion-css="1wt6tb2">.css-1wt6tb2{display:none;}@media all and (min-width:760px){.css-1wt6tb2{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-1wt6tb2 > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}.css-1wt6tb2 > div:first-of-type > div{-webkit-transform:translate3d(-50%,10px,0);-ms-transform:translate3d(-50%,10px,0);transform:translate3d(-50%,10px,0);}.css-1wt6tb2 > div:first-of-type:hover > div{-webkit-transform:translate3d(-50%,0px,0);-ms-transform:translate3d(-50%,0px,0);transform:translate3d(-50%,0px,0);}</style><div class="css-1wt6tb2 enjt0j71"><style data-emotion-css="16f4mmd">.css-16f4mmd{position:relative;display:inline-block;}.css-16f4mmd:hover > div{-webkit-transform:translate3d(-51%,0,0);-ms-transform:translate3d(-51%,0,0);transform:translate3d(-51%,0,0);opacity:1;visibility:visible;}</style><div class="css-16f4mmd e1qa80lw0"><style data-emotion-css="11ismyt">.css-11ismyt{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#300D4F;border:0;font-size:1rem;height:40px;line-height:40px;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:0 24px;cursor:pointer;border-radius:2px;min-height:40px;-webkit-transition:0.05s linear all;transition:0.05s linear all;outline:none;background:transparent;-webkit-text-decoration:none;text-decoration:none;}</style><a class="css-11ismyt e1qa80lw2">Products<style data-emotion-css="1h2opr7">.css-1h2opr7{display:inline-block;margin-left:0.4rem;-webkit-transform:translate3d(0,2px,0);-ms-transform:translate3d(0,2px,0);transform:translate3d(0,2px,0);}</style><svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><style data-emotion-css="1lf5qfn">.css-1lf5qfn{position:absolute;padding:0.5rem;z-index:2;background:white;top:114%;left:50%;list-style:none;visibility:hidden;-webkit-transform:translate3d(-51%,10px,0);-ms-transform:translate3d(-51%,10px,0);transform:translate3d(-51%,10px,0);-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;opacity:0;cursor:auto;box-shadow:0px -6px 10px rgba(0,0,0,0.1),0px 3px 4px rgba(0,0,0,0.1);border-radius:4px;}.css-1lf5qfn a:first-of-type{margin-top:0;}</style><div class="css-1lf5qfn e1qa80lw1"><style data-emotion-css="49ft7v">.css-49ft7v{position:absolute;top:-14px;left:calc(50% - 10px);}</style><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="1mikpth">.css-1mikpth{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.css-1mikpth:hover{background:#F6F6F6;}@media all and (min-width:960px){.css-1mikpth{-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}}</style><a href="index-2.html" class="css-1mikpth e1ob8a130"><div><style data-emotion-css="1w8jm51">.css-1w8jm51{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:2rem;cursor:pointer;}.css-1w8jm51 svg{width:auto;height:26px;}</style><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span><style data-emotion-css="tmhpvz">.css-tmhpvz{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:35px;}@media all and (min-width:400px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:760px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:960px){.css-tmhpvz{font-size:18px;}}@media all and (min-width:1200px){.css-tmhpvz{font-size:18px;}}.css-tmhpvz a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-tmhpvz a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-tmhpvz e1ob8a132">Build scalable realtime features</p></div></a><a href="index-3.html" class="css-1mikpth e1ob8a130"><div><span class="css-1w8jm51 eyw1ojh0"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span><p class="css-tmhpvz e1ob8a132">Programmatic push notifications</p></div></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Developers<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><style data-emotion-css="sqsh66">.css-sqsh66{display:block;background:transparent;padding:1rem;-webkit-text-decoration:none;text-decoration:none;-webkit-transition:.1s background linear;transition:.1s background linear;border-radius:2px;}.css-sqsh66:hover{background:#F6F6F6;}</style><a href="docs.html" class="css-sqsh66 e1ob8a130"><style data-emotion-css="1dr5joc">.css-1dr5joc{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:20px !important;display:inline-block;margin-bottom:0;color:#300D4F;}@media all and (min-width:400px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:760px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:960px){.css-1dr5joc{font-size:18px;}}@media all and (min-width:1200px){.css-1dr5joc{font-size:18px;}}.css-1dr5joc a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-1dr5joc a:hover{color:white;background-color:#300D4F;border-bottom:none;}@media all and (min-width:960px):{.css-1dr5joc{font-size:16px !important;}}</style><p class="css-1dr5joc e1ob8a131">Docs</p><style data-emotion-css="lc4r3p">.css-lc4r3p{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;white-space:nowrap;font-size:16px !important;overflow:hidden;text-overflow:ellipsis;margin-top:8px;margin-bottom:0;margin-left:0;}@media all and (min-width:400px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:760px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:960px){.css-lc4r3p{font-size:18px;}}@media all and (min-width:1200px){.css-lc4r3p{font-size:18px;}}.css-lc4r3p a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-lc4r3p a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-lc4r3p e1ob8a132">Read the docs to learn how to use our products</p></a><a href="tutorials.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Tutorials</p><p class="css-lc4r3p e1ob8a132">Explore our tutorials to build apps with Pusher products</p></a><a href="https://support.pusher.com/hc/en-us" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Support</p><p class="css-lc4r3p e1ob8a132">Reach out to our support team for help and advice</p></a></div></div><div class="css-16f4mmd e1qa80lw0"><a class="css-11ismyt e1qa80lw2">Company<svg width="12" height="8" viewBox="0 0 12 8" class="css-1h2opr7 e1qa80lw3"><path fill-rule="evenodd" clip-rule="evenodd" d="M6 7.66L.34 2 1.76.59 6 4.83 10.24.59 11.66 2 6 7.66z" fill="#300D4F"></path></svg></a><div class="css-1lf5qfn e1qa80lw1"><span class="css-49ft7v"><svg width="20" height="12" viewBox="0 0 20 12" fill="none"><path d="M20 12H0L10 0l10 12z" fill="#fff"></path></svg></span><a href="index-4.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Customer stories</p><p class="css-lc4r3p e1ob8a132">See how our customers use our products to delight their users</p></a><a href="index-7.html" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Careers</p><p class="css-lc4r3p e1ob8a132">Look at our available jobs and join us on our mission</p></a><a href="https://making.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Making Pusher</p><p class="css-lc4r3p e1ob8a132">Stories from working at Pusher</p></a><a href="https://blog.pusher.com/" class="css-sqsh66 e1ob8a130"><p class="css-1dr5joc e1ob8a131">Pusher Blog</p><p class="css-lc4r3p e1ob8a132">Read our updates and opinions on realtime technology</p></a></div></div></div><style data-emotion-css="ccs0dx">.css-ccs0dx{display:none;}@media all and (min-width:760px){.css-ccs0dx{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;}.css-ccs0dx > div:last-child:hover > div{-webkit-transform:translate3d(-51%,0px,0);-ms-transform:translate3d(-51%,0px,0);transform:translate3d(-51%,0px,0);}}</style><div class="css-ccs0dx enjt0j71"><style data-emotion-css="1baulvz">.css-1baulvz{display:inline-block;}</style><div class="css-1baulvz"><style data-emotion-css="124e4c5">.css-124e4c5{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;position:relative;line-height:24px;color:#300D4F;background-color:transparent;padding:0;margin:0 8px 6px;border-radius:0;box-shadow:none;}.css-124e4c5:before{content:" ";position:absolute;left:0;right:100%;bottom:-2px;z-index:5;background:#300D4F;height:3px;-webkit-transition-property:right;transition-property:right;-webkit-transition-duration:0.2s;transition-duration:0.2s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;}.css-124e4c5:after{content:" ";position:absolute;left:0;right:0;z-index:4;bottom:-2px;background:#C223CE;height:3px;}.css-124e4c5:hover,.css-124e4c5:focus{box-shadow:none;outline:none;}.css-124e4c5:hover:before,.css-124e4c5:focus:before{right:0;}</style><a href="https://dashboard.pusher.com/accounts/sign_in" kind="tertiary" class="css-124e4c5 ermq5n0">Sign in</a></div><div><style data-emotion-css="csgx77">.css-csgx77{width:auto;margin-left:1rem;}</style><style data-emotion-css="1ubdrc8">.css-1ubdrc8{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;width:auto;margin-left:1rem;}.css-1ubdrc8:hover,.css-1ubdrc8:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1ubdrc8:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}</style><a href="https://dashboard.pusher.com/accounts/sign_up" kind="primary" class="css-1ubdrc8 ermq5n0">Sign up</a></div></div></div></div><div><style data-emotion-css="ew49tj">.css-ew49tj{max-width:75rem;margin:0 auto;padding:1rem 1.5rem;text-align:center;position:relative;height:auto;}@media all and (min-width:760px){.css-ew49tj{height:225px;}}</style><div class="css-ew49tj ehwuahf0"><span></span><style data-emotion-css="gr148u">.css-gr148u{font-family:italian-plate,sans-serif;font-weight:600;line-height:1.1;font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;text-transform:uppercase;color:#300D4F;margin-bottom:1.5rem;text-align:center;padding:2rem 0 0;margin-bottom:0.5rem;-webkit-letter-spacing:2px !important;-moz-letter-spacing:2px !important;-ms-letter-spacing:2px !important;letter-spacing:2px !important;}@media all and (min-width:400px){.css-gr148u{font-size:40px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{font-size:45px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:960px){.css-gr148u{font-size:50.64px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:1200px){.css-gr148u{font-size:56.959999999999994px;-webkit-letter-spacing:4px;-moz-letter-spacing:4px;-ms-letter-spacing:4px;letter-spacing:4px;}}@media all and (min-width:760px){.css-gr148u{padding:4rem 0 0;}}</style><h1 class="css-gr148u ehwuahf1"><style data-emotion-css="npldjc">.css-npldjc{color:#5c29db;font-weight:700;}</style><span class="css-npldjc ehwuahf2">31</span> tutorials for “<span class="css-npldjc ehwuahf2">Feeds</span>”</h1><style data-emotion-css="xi606m">.css-xi606m{text-align:center;}</style><style data-emotion-css="qzpcze">.css-qzpcze{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;text-align:center;}@media all and (min-width:400px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-qzpcze{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-qzpcze a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-qzpcze a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-qzpcze e5jrto45">Browse the content below or search for something else</p></div><style data-emotion-css="efmvv3">.css-efmvv3{max-width:75rem;margin:0 auto;padding:0 1.5rem;}</style><div class="css-efmvv3 ebwns650"><style data-emotion-css="znbnmq">.css-znbnmq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto 3rem;max-width:840px;}@media all and (min-width:760px){.css-znbnmq{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}</style><div class="css-znbnmq e1k1ox920"><style data-emotion-css="1gksm6s">.css-1gksm6s{display:inline-block;min-width:208px;padding:1rem;margin:1rem;text-align:center;line-height:0;background:#ffffff;border-radius:6px;box-shadow:0px 1.12939px 5px rgba(0,0,0,0.18);}.css-1gksm6s:hover{-webkit-transform:translate3d(0,-2px,0);-ms-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0);}@media all and (min-width:760px){.css-1gksm6s{margin:0 1rem;}}</style><a href="tutorialsfa1c.html?product=Channels&amp;tag=Feeds" class="css-1gksm6s e1ho2r7z0"><style data-emotion-css="s7gppj">.css-s7gppj{display:block;cursor:pointer;}.css-s7gppj svg{width:auto;height:26px;}</style><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1170.84 200"><title>channels_full-logo</title><g fill="#300D4F"><path d="M326.39,37.64c25.37,0,45.08,17.48,47.82,42.85L349.36,84.6c-2.58-15.25-10.8-23.82-23-23.82-17.32,0-27.6,14.74-27.6,39.42s10.28,39.42,27.6,39.42c12.85,0,21.08-9.08,23.31-25.71l24.85,4.29c-3.08,26.91-21.94,44.56-48.16,44.56-32.06,0-53-24.68-53-62.56S294.33,37.64,326.39,37.64Z"></path><path d="M397.17,40.21h25.37v47h38.91v-47h25.37v120H461.45V110.31H422.54v49.88H397.17Z"></path><path d="M583.14,141.51H537.2l-6.34,18.68h-25.2l42.85-120h23.31l42.86,120h-25.2Zm-7.72-22.28L560.34,75H560l-15.08,44.23Z"></path><path d="M633.35,40.21h26L700,116.48h.34V40.21h25.37v120H699.68L659.06,83.91h-.34v76.28H633.35Z"></path><path d="M757.09,40.21h26.06l40.62,76.27h.34V40.21h25.37v120H823.43L782.81,83.91h-.35v76.28H757.09Z"></path><path d="M880.84,40.21h77.3V63.52H906.21V87.86h47.3v22.28h-47.3v26.74h52.1v23.31H880.84Z"></path><path d="M984.7,40.21h25.37v96.67h50.74v23.31H984.7Z"></path><path d="M1100.74,115.28C1104,133.11,1111,140,1127,140c11.83,0,18.51-4.29,18.51-11.83,0-8.4-5.65-12.51-25.71-19.37-27.94-9.43-38.39-19.54-38.39-37.2,0-20,16.8-33.93,40.62-33.93,23.48,0,41.82,14.22,45.6,35.31l-24.69,5.31c-3.25-12.17-9.94-17.83-20.91-17.83-9.43,0-15.6,4.29-15.6,11,0,6.17,5.14,9.6,23,15.6,14.91,5.14,25.71,10.8,32.06,17.14s9.42,14.23,9.42,24c0,20.74-18,34.62-44.22,34.62-28.63,0-46.45-14.74-50.74-42.16Z"></path></g><g fill="#6a52ff"><path d="M127.12,10,109.92.11a.84.84,0,0,0-.84,0L91.67,10.16a.84.84,0,0,1-.84,0L73.42.11a.84.84,0,0,0-.84,0L55.38,10a.42.42,0,0,0,0,.73L91,31.36a.45.45,0,0,0,.42,0l35.66-20.59A.42.42,0,0,0,127.12,10Z"></path><path d="M163.62,31.11l-17.2-9.92a.84.84,0,0,0-.84,0L91.67,52.31a.84.84,0,0,1-.84,0L36.92,21.19a.84.84,0,0,0-.84,0l-17.2,9.92a.42.42,0,0,0,0,.73L91,73.5a.4.4,0,0,0,.42,0l72.16-41.66A.42.42,0,0,0,163.62,31.11Z"></path><path d="M109.5,84.65v19.86a.42.42,0,0,0,.63.36l72.16-41.66a.41.41,0,0,0,.21-.36V43.48a.84.84,0,0,0-1.26-.73L109.92,83.92A.84.84,0,0,0,109.5,84.65Z"></path><path d="M110.13,147l72.16-41.66a.44.44,0,0,0,.21-.37V85.62a.84.84,0,0,0-1.26-.73l-71.32,41.18a.83.83,0,0,0-.42.73v19.85A.42.42,0,0,0,110.13,147Z"></path><path d="M91.25,177.53V95.19a.83.83,0,0,0-.42-.73L74.26,84.89a.84.84,0,0,0-1.26.73V167a.84.84,0,0,1-1.26.73l-16.57-9.57a.84.84,0,0,1-.42-.73V74.11a.84.84,0,0,0-.42-.73L37.76,63.82a.84.84,0,0,0-1.26.73v81.37a.84.84,0,0,1-1.26.73l-16.57-9.56a.84.84,0,0,1-.42-.73V53a.84.84,0,0,0-.42-.73L1.26,42.75A.84.84,0,0,0,0,43.48V147.14a.41.41,0,0,0,.21.36L91,199.94a.4.4,0,0,0,.42,0l90.83-52.44a.41.41,0,0,0,.21-.36V127.77a.84.84,0,0,0-1.26-.73L92.51,178.26A.84.84,0,0,1,91.25,177.53Z"></path></g></svg></span></a><a href="tutorials6264.html?product=Beams&amp;tag=Feeds" class="css-1gksm6s e1ho2r7z0"><span class="css-s7gppj e1ho2r7z1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 809.21 200"><defs><style></style></defs><title>beams_full-logo</title><g fill="#2ae9aa"><path d="M85.58,40.65l-15.75,9.1a.79.79,0,0,0-.4.69V190a.39.39,0,0,0,.2.35L86.18,200a.4.4,0,0,0,.6-.35V41.35A.81.81,0,0,0,85.58,40.65Z"></path><path d="M104.14,189.58v-18a.81.81,0,0,1,1.2-.7l15,8.64a.8.8,0,0,1,0,1.39l-15.55,9A.39.39,0,0,1,104.14,189.58Z"></path><path d="M104.14,150V131.54a.8.8,0,0,1,1.2-.7L155,159.52a.8.8,0,0,1,0,1.38l-16,9.21a.36.36,0,0,1-.4,0L104.34,150.3A.4.4,0,0,1,104.14,150Z"></path><path d="M104.14,109.87V91.45a.8.8,0,0,1,1.2-.69l67.83,39.16a.8.8,0,0,1,.4.69v18.88a.41.41,0,0,1-.61.35l-68.62-39.62A.4.4,0,0,1,104.14,109.87Z"></path><path d="M104.14,69.79V51.37a.81.81,0,0,1,1.2-.7l67.83,39.16a.83.83,0,0,1,.4.7v18.88a.41.41,0,0,1-.61.35L104.34,70.14A.42.42,0,0,1,104.14,69.79Z"></path><path d="M50.87,60.7,35.11,69.79a.82.82,0,0,0-.4.69V170a.43.43,0,0,0,.2.35l16.56,9.55a.39.39,0,0,0,.6-.34V61.39A.8.8,0,0,0,50.87,60.7Z"></path><path d="M16.15,80.74.4,89.83a.81.81,0,0,0-.4.7V150a.4.4,0,0,0,.2.34l16.56,9.56a.4.4,0,0,0,.6-.34V81.43A.8.8,0,0,0,16.15,80.74Z"></path><path d="M0,69.33V50.44a.79.79,0,0,1,.4-.69L86.38.11a.77.77,0,0,1,.8,0l86,49.64a.82.82,0,0,1,.4.69V69.33a.4.4,0,0,1-.61.34L87,20a.41.41,0,0,0-.4,0L.6,69.67A.39.39,0,0,1,0,69.33Z"></path></g><g fill="#300D4F"><path d="M260,43.13H309.6c19.72,0,33.9,12.88,33.9,30.65,0,9.29-4.4,17-11.57,21.36v.32c9.78,4.57,15.82,14.35,15.82,26.25,0,24-14.19,35.54-43.37,35.54H260Zm46.13,45.49c8.64,0,13.37-4.24,13.37-12.07,0-7.66-4.73-11.9-13.37-11.9h-22v24Zm2.61,47.11c10.27,0,15-4.57,15-14.19,0-9-5.22-13.85-14.83-13.85H284.17v28Z"></path><path d="M371.21,43.13h73.52V65.3H395.34V88.45h45v21.19h-45v25.44h49.55v22.17H371.21Z"></path><path d="M531.61,139.48H487.92l-6,17.77h-24L498.68,43.13h22.17l40.76,114.12h-24Zm-7.34-21.19L509.93,76.23h-.33l-14.34,42.06Z"></path><path d="M579.36,43.13H606.1l31.95,76.79h.33l32.11-76.79h26.73V157.25H673.59V86.82h-.33l-29.83,70.43H633L603.33,86.82H603v70.43H579.36Z"></path><path d="M742.53,114.54c3.1,17,9.78,23.47,24.94,23.47,11.25,0,17.61-4.07,17.61-11.25,0-8-5.38-11.9-24.45-18.42-26.57-9-36.52-18.58-36.52-35.37,0-19.08,16-32.28,38.64-32.28,22.33,0,39.77,13.53,43.36,33.58l-23.48,5c-3.09-11.57-9.45-16.95-19.88-16.95-9,0-14.84,4.08-14.84,10.43,0,5.87,4.89,9.13,21.85,14.84,14.18,4.89,24.45,10.27,30.48,16.3s9,13.53,9,22.82c0,19.73-17.12,32.93-42.06,32.93-27.23,0-44.18-14-48.26-40.1Z"></path></g></svg></span></a></div><style data-emotion-css="eaq0ob">.css-eaq0ob{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;max-width:900px;margin:0 auto 2rem;}@media all and (min-width:760px){.css-eaq0ob{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;}}</style><div class="css-eaq0ob e137azhw0"><style data-emotion-css="a3lpv2">.css-a3lpv2{display:inline-block;width:33%;padding:0.5rem 0;}.css-a3lpv2 > svg:hover path{fill:#C223CE;}@media all and (min-width:760px){.css-a3lpv2{width:25%;padding:0.5rem 0;margin:0 1rem;}}@media all and (min-width:960px){.css-a3lpv2{width:14%;}}</style><a href="tutorials5463.html?tag=JavaScript" class="css-a3lpv2 e137azhw1"><svg width="37" height="38" viewBox="0 0 31 32" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M31 0H0v32h31V0zM19.84 24.22L18 25.32a4.58 4.58 0 0 0 1.8 2 5.8 5.8 0 0 0 4.97.44c.82-.28 1.48-.8 1.92-1.6.35-.65.46-1.36.43-2.1a3.6 3.6 0 0 0-1.31-2.76c-.6-.51-1.3-.86-2-1.19l-.45-.2c-.34-.16-.69-.32-1.03-.5a2.73 2.73 0 0 1-.64-.45c-.49-.47-.49-1.66.5-1.96a1.7 1.7 0 0 1 1.93.78 7.78 7.78 0 0 1 .2.32l1.44-.96.59-.4-.01-.03-.01-.03a3.77 3.77 0 0 0-2.23-1.92 4.9 4.9 0 0 0-2.7-.05 3.44 3.44 0 0 0-2.62 3.42 3.7 3.7 0 0 0 1.66 3.3c.43.3.9.53 1.36.76l.85.4.9.43c.21.11.42.27.6.44.33.32.4.73.31 1.17-.1.48-.44.76-.87.91a2.7 2.7 0 0 1-1.98-.06 3.05 3.05 0 0 1-1.38-1.29l-.09-.14-.3.17zm-3.21-9.52h-2.65v9.15c0 .24-.01.48-.05.71-.06.39-.2.73-.55.94-.52.3-1.35.2-1.8-.2-.26-.25-.44-.56-.62-.86a5.03 5.03 0 0 0-.05-.1l-.04-.07-1.2.74-.95.6c.43 1 1.17 1.73 2 2.1 1.18.51 2.4.54 3.61.13a3.14 3.14 0 0 0 2.05-2.12c.2-.6.25-1.21.25-1.83V14.7z" fill="#300D4F"></path></svg></a><a href="tutorials124f.html?tag=Node.js" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="44" viewBox="0 0 41 44" width="41" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="m20.5435.137695c-.5947 0-1.1729.120796-1.6844.405144l-16.19036 9.182891c-1.04773.59247-1.684365 1.71237-1.684365 2.90337v18.3321c0 1.1905.636635 2.309 1.684365 2.9033l4.22806 2.3971c2.05422.9943 2.81186.979 3.7468.979 3.0415 0 4.7781-1.8125 4.7781-4.9628v-18.0957c0-.2558-.2255-.4389-.4812-.4389h-2.0282c-.2598 0-.4812.1831-.4812.4389v18.0957c0 1.3964-1.4808 2.8006-3.88431 1.6205l-4.39993-2.532c-.15538-.0831-.27502-.2299-.27502-.4051v-18.3321c0-.174.11827-.3507.27502-.4388l16.15604-9.14917c.1512-.08535.3313-.08535.4812 0l16.156 9.14917c.154.0908.275.2595.275.4388v18.3321c0 .1752-.0894.3545-.2406.4389l-16.1904 9.1491c-.1388.0811-.33.0811-.4812 0l-4.1593-2.4307c-.1238-.0713-.2929-.0659-.4126 0-1.1481.6392-1.3639.7135-2.4405 1.0803-.2654.0908-.6683.232.1375.6752l5.4311 3.1397c.517.2939 1.0931.4389 1.6844.4389.5995 0 1.1674-.145 1.6844-.4389l16.1904-9.1492c1.0477-.5985 1.6843-1.7128 1.6843-2.9033v-18.3321c0-1.191-.6366-2.3084-1.6843-2.90337l-16.1904-9.182891c-.5074-.284348-1.0897-.405144-1.6844-.405144zm4.3312 13.099405c-4.6103 0-7.3562 1.927-7.3562 5.1316 0 3.4764 2.7252 4.4315 7.1499 4.8615 5.2937.509 5.7062 1.2723 5.7062 2.2957 0 1.7751-1.441 2.532-4.8468 2.532-4.2789 0-5.2194-1.0491-5.5343-3.1397-.0371-.2241-.2131-.4051-.4469-.4051h-2.0968c-.2585 0-.4812.2183-.4812.4726 0 2.676 1.4822 5.8407 8.5592 5.8407 5.1232 0 8.078-1.9751 8.078-5.4355 0-3.4305-2.387-4.3513-7.3561-4.9966-5.0215-.6525-5.5-.9719-5.5-2.1268 0-.9534.4057-2.2284 4.125-2.2284 3.3219 0 4.5498.7036 5.053 2.9035.044.2068.2297.3714.4469.3714h2.0969c.1292 0 .2543-.0778.3437-.1689.088-.0972.1499-.2068.1375-.3375-.3245-3.7886-2.8971-5.5705-8.078-5.5705z" fill="#300D4F" fill-rule="evenodd"></path></svg></a><a href="tutorialsbf48.html?tag=Ruby" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="39" viewBox="0 0 39 39" width="39" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F" stroke="#300D4F" stroke-width=".484007"><path d="m4.38915 25.0671c-.93556-2.2571-1.87112-4.5141-2.91063-6.7712 1.45531-2.3596 2.70273-4.8219 4.262-7.1815.62371-1.0259 1.76717-1.64149 2.59878-2.46223 1.45532-1.33371 2.9106-2.77002 4.366-4.00114.7276-.61555 1.6632-1.02593 2.5987-1.33371 1.5593-.61555 3.1186-1.12852 4.6778-1.74408 1.8712 1.23112 3.6383 2.46224 5.5095 3.79595-.8316 2.46223-1.6633 4.92451-2.287 7.38671-.4158 1.5389-1.5592 2.257-2.5987 3.1804-2.5988 2.4622-5.1976 4.9244-7.9003 7.2841-.4158.4104-1.2475.4104-1.9751.5129-2.07904.4104-4.26202.8208-6.34105 1.3338z"></path><path d="m13.7468 25.0669c4.366 1.6415 8.628 3.283 12.89 4.9245-4.6778 4.2063-9.8754 7.4893-16.3204 8.4126 1.1435-4.4115 2.2869-8.9256 3.4304-13.3371z"></path><path d="m24.7637 15.1154c4.262-.1026 8.524-.2052 12.786-.3078-1.8711 4.9245-4.9897 9.1308-8.524 12.9267-1.4553-4.2063-2.8067-8.4126-4.262-12.6189z"></path><path d="m23.2037 15.731c1.4553 4.2063 2.8067 8.5152 4.262 12.7215-4.262-1.6415-8.524-3.283-12.786-4.9245 2.8067-2.4622 5.7173-5.1296 8.524-7.797z"></path><path d="m29.6504 29.3758c3.3264-3.4882 6.341-7.2841 8.42-11.6956-.5197 6.053-.9355 12.106-1.3513 17.8512-2.287-1.9493-4.6778-4.0012-7.0687-6.1556z"></path><path d="m34.2234 1.67627c3.8462 1.33371 5.5094 5.64262 3.9502 10.77223-3.3265-2.56478-6.7569-4.92442-10.1873-7.38666 2.183-1.12852 4.1581-2.25705 6.2371-3.38557z"></path><path d="m35.6793 36.8651c-5.8212.4104-11.9544.8208-18.0875 1.2311 4.158-1.8466 7.6924-4.5141 10.9149-7.4893 2.3909 2.0519 4.8857 4.2064 7.1726 6.2582z"></path><path d="m36.6141 13.2688c-3.9501.1025-7.9003.2051-11.8504.3077.7276-2.3596 1.5592-4.71925 2.2869-7.18148 3.1185 2.25705 6.341 4.51408 9.5635 6.87378z"></path><path d="m8.85835 37.5833c-1.35136-3.6934-2.59878-7.2842-3.95015-10.9775 2.39088-.513 4.67781-1.0259 7.0687-1.5389-1.0395 4.2063-2.07903 8.31-3.11855 12.5164z"></path><path d="m7.40635 38.5065c-3.01458-.3077-5.71732-1.8466-6.548928-5.54 0-.1026 0-.2052 0-.3078.935558-1.5389 1.871128-3.0778 2.806688-4.7192 1.24741 3.5907 2.49483 7.0789 3.74224 10.567z"></path><path d="m22.166.95752h9.8754c-1.8711 1.02593-3.6383 2.05186-5.5094 2.9752-1.4553-.92334-2.9107-1.94927-4.366-2.9752z"></path><path d="m2.9358 25.9903c-.83161 1.3337-1.55927 2.6674-2.390878 4.0011 0-3.1804 0-6.3608 0-9.6437.831608 1.9492 1.559268 3.7959 2.390878 5.6426z"></path></g></svg></a><a href="tutorials1fdd.html?tag=Go" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="27" viewBox="0 0 72 27" width="72" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m5.37409 8.76273c-.13868 0-.17335-.06716-.10401-.1679l.7281-.90662c.06934-.10074.2427-.16789.38139-.16789h12.37773c.1387 0 .1734.10073.104.20147l-.5894.87304c-.0693.10074-.2427.20148-.3467.20148zm-5.235404 3.08927c-.138686 0-.1733576-.0672-.1040144-.1679l.7281034-.9066c.069343-.1008.242705-.1679.381385-.1679h15.81024c.1387 0 .208.1007.1734.2014l-.2774.8059c-.0347.1343-.1734.2015-.3121.2015zm8.390524 3.0892c-.13869 0-.17336-.1007-.10402-.2015l.4854-.8394c.06935-.1008.20803-.2015.34672-.2015h6.93429c.1387 0 .2081.1007.2081.2351l-.0694.8058c0 .1344-.1387.2351-.2427.2351zm35.98909-6.78289c-2.1843.53726-3.6752.94021-5.8248 1.47746-.5201.13432-.5548.1679-1.0055-.33578-.5201-.57084-.9015-.94021-1.6296-1.27599-2.1843-1.04094-4.2992-.73874-6.2755.50368-2.3577 1.47742-3.5712 3.66012-3.5365 6.37992.0347 2.6863 1.9416 4.9025 4.6806 5.2719 2.3577.3022 4.334-.5037 5.8942-2.2162.3121-.3694.5894-.7723.9361-1.2424h-6.6916c-.7281 0-.9014-.4365-.6587-1.0074.4507-1.0409 1.2828-2.787 1.7682-3.6601.104-.2014.3467-.5372.8668-.5372h12.6205c-.0694.9066-.0694 1.8132-.2081 2.7199-.3814 2.4176-1.3175 4.6338-2.843 6.5814-2.4964 3.19-5.7555 5.1711-9.8814 5.7084-3.3979.4365-6.553-.2015-9.3267-2.2162-2.5657-1.8804-4.0219-4.3653-4.4033-7.4545-.4507-3.6601.6588-6.9508 2.9471-9.83857 2.4617-3.12282 5.7208-5.10396 9.708-5.80911 3.2592-.570843 6.3796-.20148 9.188 1.64535 1.8376 1.17526 3.1551 2.78704 4.0219 4.7346.208.30221.0694.4701-.3467.57084z"></path><path d="m55.9962 26.7265c-3.1551-.0672-6.0329-.9402-8.4599-2.955-2.0456-1.7125-3.3284-3.8951-3.7445-6.4807-.6241-3.7943.4507-7.1522 2.8084-10.14073 2.531-3.22355 5.5821-4.90249 9.708-5.60764 3.5365-.60442 6.865-.26863 9.8814 1.71251 2.7391 1.81325 4.438 4.2645 4.8887 7.48806.5894 4.5331-.7628 8.2268-3.9872 11.3832-2.2883 2.2498-5.0967 3.6601-8.3212 4.2981-.9361.1679-1.8722.2014-2.7737.3022zm8.2518-13.5658c-.0346-.4366-.0346-.7723-.104-1.1081-.6241-3.32432-3.7792-5.20473-7.073-4.466-3.2244.70515-5.3047 2.6863-6.0675 5.8427-.6241 2.6191.6934 5.2719 3.1898 6.3464 1.9069.8059 3.8138.7051 5.6514-.2015 2.7391-1.3767 4.23-3.5258 4.4033-6.4135z"></path></g></svg></a><a href="tutorials06c4.html?tag=PHP" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="31" viewBox="0 0 62 31" width="62" xmlns="http://www.w3.org/2000/svg"><path d="m4.96084 6.49561h9.08856c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1582 1.1733-.5087 2.3245-1.0512 3.4536-.5201 1.129-1.2436 2.1474-2.1705 3.055-1.1304 1.1512-2.3399 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.06953l-1.28868 6.3094h-4.713862zm3.96779 3.78569-2.03476 9.9622c.13563.0221.27128.0332.40694.0332h.47478c2.17041.0221 3.97901-.1882 5.42601-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2208-4.0181-1.1983-.3542-2.7018-.5203-4.5104-.4981-.2713.0221-.53134.0332-.78002.0332-.2261 0-.46349 0-.71217 0z" fill="#300D4F"></path><path d="m26.4088.155273h4.68l-1.3226 6.342647h4.2051c2.3061.04429 4.0243.5092 5.1548 1.39472 1.153.88557 1.4921 2.56806 1.0174 5.04756l-2.2722 11.0581h-4.7478l2.1704-10.56c.2261-1.1069.1583-1.8928-.2034-2.3578-.3618-.4648-1.1418-.6973-2.34-.6973l-3.7643-.0332-2.7809 13.6483h-4.6799z" fill="#300D4F"></path><path d="m45.1698 6.49561h9.0886c2.6678.02218 4.6008.77486 5.7991 2.25811 1.1982 1.48328 1.5939 3.50898 1.1869 6.07698-.1583 1.1733-.5087 2.3245-1.0513 3.4536-.52 1.129-1.2435 2.1474-2.1704 3.055-1.1304 1.1512-2.34 1.8818-3.6286 2.1918-1.2887.3099-2.6226.4649-4.0017.4649h-4.0695l-1.2887 6.3094h-4.7139zm3.9678 3.78569-2.0348 9.9622c.1357.0221.2713.0332.407.0332h.4748c2.1704.0221 3.979-.1882 5.426-.6309 1.4469-.4649 2.4191-2.081 2.9165-4.8483.4069-2.3245 0-3.6639-1.2209-4.0181-1.1982-.3542-2.7017-.5203-4.5104-.4981-.2713.0221-.5313.0332-.7799.0332-.2261 0-.4635 0-.7122 0z" fill="#300D4F"></path></svg></a><a href="tutorials994f.html?tag=Android" class="css-a3lpv2 e137azhw1"><svg width="36" height="42" viewBox="0 0 54 63" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path fill="#300D4F" d="m3.89584 20.5435h-.16052c-2.05763 0-3.73532 1.6921-3.73532 3.7555v16.3512c0 2.0716 1.67769 3.7583 3.73532 3.7583h.16324c2.05764 0 3.73533-1.6922 3.73533-3.7583v-16.3513c-.00273-2.0633-1.68303-3.7554-3.73805-3.7554z"></path><path fill="#300D4F" d="m9.41992 46.9608c0 1.8993 1.54388 3.4461 3.43288 3.4461h3.6685v8.8321c0 2.0741 1.683 3.7609 3.7353 3.7609h.1605c2.0604 0 3.7407-1.6894 3.7407-3.7609v-8.8321h5.1267v8.8321c0 2.0741 1.6884 3.7609 3.7407 3.7609h.1579c2.0602 0 3.7379-1.6894 3.7379-3.7609v-8.8321h3.6711c1.8863 0 3.4303-1.5468 3.4303-3.4461v-25.8182h-34.60248z"></path><path fill="#300D4F" d="m35.3453 5.48537 2.9139-4.522217c.1873-.285226.1043-.675215-.182-.860918-.2835-.1883217-.6715-.11024914-.8562.182959l-3.0209 4.678366c-2.2663-.9335-4.7975-1.45806-7.4706-1.45806-2.6758 0-5.2017.52456-7.4733 1.45806l-3.0155-4.678366c-.1845-.29320814-.5753-.3712807-.8616-.182959-.2863.185578-.3692.575692-.1819.860918l2.9165 4.522217c-5.2579 2.59074-8.80315 7.47353-8.80315 13.07453 0 .3443.02146.6833.05086 1.0196h34.73879c.0294-.3363.0481-.6753.0481-1.0196.0001-5.601-3.5479-10.48379-8.803-13.07453zm-16.6697 8.09763c-.9231 0-1.6724-.748-1.6724-1.6787 0-.9308.7493-1.6761 1.6724-1.6761.9284 0 1.6723.7452 1.6723 1.6761s-.7492 1.6787-1.6723 1.6787zm16.1052 0c-.9232 0-1.6724-.748-1.6724-1.6787 0-.9308.7492-1.6761 1.6724-1.6761.9257 0 1.6696.7452 1.6696 1.6761 0 .9307-.7439 1.6787-1.6696 1.6787z"></path><path fill="#300D4F" d="m49.7122 20.5435h-.1551c-2.0577 0-3.7407 1.6921-3.7407 3.7555v16.3512c0 2.0716 1.6858 3.7583 3.7407 3.7583h.1579c2.0602 0 3.7353-1.6922 3.7353-3.7583v-16.3513c0-2.0633-1.6804-3.7554-3.7381-3.7554z"></path></svg></a><a href="tutorialsc405.html?tag=Kotlin" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="36" viewBox="0 0 36 36" width="36" xmlns="http://www.w3.org/2000/svg"><g fill="#300D4F"><path d="m18.9448 18.7402-17.06199 16.6788h34.03519z"></path><path d="m.28125.577148v16.766052l16.35115-16.766052z"></path><path d="m18.1431.577148-17.86185 18.425152v.4367 15.9801l17.86185-17.4646 17.7729-17.377352z"></path></g></svg></a><a href="tutorials3aba.html?tag=iOS" class="css-a3lpv2 e137azhw1"><svg width="46.5" height="24" viewBox="0 0 31 16" fill="#300D4F" xmlns="http://www.w3.org/2000/svg"><path d="M.14 15.74h2.57V4.4H.14v11.35zM1.42 2.9c.8 0 1.43-.64 1.43-1.44C2.85.64 2.22 0 1.42 0 .62 0 0 .64 0 1.46c0 .8.63 1.44 1.42 1.44zM11.24.03c-4.33 0-7.05 3.08-7.05 8 0 4.9 2.72 7.97 7.05 7.97s7.04-3.06 7.04-7.98c0-4.91-2.71-7.99-7.04-7.99zm0 2.36c2.65 0 4.34 2.18 4.34 5.63 0 3.44-1.7 5.62-4.34 5.62-2.65 0-4.33-2.18-4.33-5.62 0-3.45 1.68-5.63 4.33-5.63zm8.13 9c.11 2.85 2.35 4.61 5.77 4.61 3.6 0 5.86-1.84 5.86-4.78 0-2.3-1.28-3.6-4.3-4.31L25 6.5c-1.82-.46-2.58-1.06-2.58-2.09 0-1.28 1.14-2.14 2.81-2.14 1.7 0 2.87.87 2.99 2.31h2.53C30.7 1.87 28.53.03 25.25.03c-3.23 0-5.52 1.86-5.52 4.6 0 2.2 1.3 3.57 4.03 4.23l1.93.47c1.87.46 2.63 1.1 2.63 2.22 0 1.28-1.24 2.2-3.03 2.2-1.82 0-3.19-.93-3.35-2.35h-2.57z" fill="#300D4F"></path></svg></a><a href="tutorials5c7c.html?tag=Swift" class="css-a3lpv2 e137azhw1"><svg fill="#300D4F" height="40" viewBox="0 0 48 40" width="48" xmlns="http://www.w3.org/2000/svg"><path d="m36.4229 37.2324c-5.5501 3.0374-13.1814 3.3495-20.859.232-6.21651-2.5056-11.37455-6.8917-14.681088-11.903 1.587148 1.2528 3.438778 2.2555 5.422648 3.1321 7.92884 3.5207 15.85604 3.2796 21.43464.009-.0035-.0034-.0059-.0057-.0083-.009-7.9357-5.764-14.681-13.2821-19.70671-19.42127-1.05853-1.00249-1.85211-2.25555-2.64568-3.38322 6.08399 5.26259 15.73949 11.90309 19.17749 13.78349-7.2733-7.2681-13.7546-16.28916-13.4906-16.03905 11.507 11.02655 22.2208 17.29185 22.2208 17.29185.3544.1893.6279.347.8479.4878.2319-.5588.4352-1.139.6065-1.7406 1.8516-6.3904-.264-13.65843-4.8937-19.6725 10.7126 6.13969 17.0619 17.667 14.4159 27.3157-.069.2602-.1439.5171-.2248.7695.0309.0349.0618.071.0928.1081 5.2897 6.2654 3.8352 12.9058 3.174 11.653-2.8696-5.32-8.1819-3.6932-10.8826-2.6138z" fill="#300D4F"></path></svg></a></div><style data-emotion-css="1diad6n">.css-1diad6n{position:relative;max-width:800px;margin:auto;}.css-1diad6n .algolia-autocomplete{width:100%;}.css-1diad6n .aa-dropdown-menu{width:100%;padding-top:1rem;}@media all and (min-width:760px){.css-1diad6n .aa-dropdown-menu{width:85%;}}.css-1diad6n .aa-dataset-posts,.css-1diad6n .aa-dataset-tags,.css-1diad6n .aa-dataset-products{background:#f9f9ff;}.css-1diad6n .aa-dataset-title{padding:1rem 1rem 0.4rem 1rem;font-size:14px;font-weight:400;color:#443385;}.css-1diad6n .aa-suggestion{padding:0.5rem 1rem;color:#443385;}.css-1diad6n .aa-suggestion.aa-cursor{background:#eeeeff;cursor:pointer;}.css-1diad6n .aa-suggestion em{font-weight:500;font-style:normal;color:#3b1e56;}.css-1diad6n .aa-suggestion-icon{display:inline-block;width:20px;vertical-align:middle;margin-right:0.5rem;}.css-1diad6n .aa-suggestion-icon svg{fill:#733693;}</style><div class="css-1diad6n e3qj6ka0"><style data-emotion-css="9f9jb9">.css-9f9jb9{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);left:1rem;z-index:1;}.css-9f9jb9 svg{fill:#300D4F;}</style><span class="css-9f9jb9 e3qj6ka2"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 118.783 118.783" xml:space="preserve"><path d="M115.97 101.597L88.661 74.286a47.75 47.75 0 0 0 7.333-25.488c0-26.509-21.49-47.996-47.998-47.996S0 22.289 0 48.798c0 26.51 21.487 47.995 47.996 47.995a47.776 47.776 0 0 0 27.414-8.605l26.984 26.986a9.574 9.574 0 0 0 6.788 2.806 9.58 9.58 0 0 0 6.791-2.806 9.602 9.602 0 0 0-.003-13.577zM47.996 81.243c-17.917 0-32.443-14.525-32.443-32.443s14.526-32.444 32.443-32.444c17.918 0 32.443 14.526 32.443 32.444S65.914 81.243 47.996 81.243z"></path></svg></span><style data-emotion-css="17qxgeo">.css-17qxgeo{position:relative;vertical-align:top;width:100%;padding:1rem 2rem 1rem 3.2rem;border-radius:2px;border:0px;background:#F4F4F4;color:#300D4F;font-size:16px;}.css-17qxgeo::-webkit-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::-moz-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo:-ms-input-placeholder{color:#b4b3f1;opacity:1;}.css-17qxgeo::placeholder{color:#b4b3f1;opacity:1;}@media all and (min-width:760px){.css-17qxgeo{width:85%;}}</style><input id="input-id" placeholder="Enter a search term" class="css-17qxgeo e3qj6ka1" value="Feeds"/><style data-emotion-css="5ftl79">.css-5ftl79{position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}@media all and (min-width:760px){.css-5ftl79{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-5ftl79{display:none;}}</style><style data-emotion-css="1lkdew6">.css-1lkdew6{font-family:maison-neue,sans-serif;font-weight:700;line-height:1;-webkit-appearance:none;-moz-appearance:none;appearance:none;cursor:pointer;border:none;outline:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:inline-block;-webkit-align-self:flex-start;-ms-flex-item-align:start;align-self:flex-start;padding:1rem;border-radius:2px;font-size:1rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;-webkit-transition:box-shadow .2s ease,background-color .2s ease,-webkit-transform .2s ease;-webkit-transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;transition:box-shadow .2s ease,background-color .2s ease,transform .2s ease;padding:0.875rem 1rem;color:white;background-color:#C223CE;border:2px solid #C223CE;-webkit-transition:all 0.1s ease;transition:all 0.1s ease;position:absolute;top:0;right:0;height:100%;width:calc(15% - 1rem);}.css-1lkdew6:hover,.css-1lkdew6:focus{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}.css-1lkdew6:active{color:#300D4F;background-color:transparent;box-shadow:inset 12em 0 0 0 transparent;}@media all and (min-width:760px){.css-1lkdew6{width:calc(15% - 1rem);}}@media all and (max-width:760px){.css-1lkdew6{display:none;}}</style><button type="button" kind="primary" class="css-1lkdew6 ermq5n0">Search</button><style data-emotion-css="3y2nae">.css-3y2nae{width:26px;display:inline-block;position:absolute;top:calc(50% - 13px);right:1rem;z-index:1;}@media all and (min-width:760px){.css-3y2nae{right:8.5rem;}}</style><span style="display:inline-block;cursor:pointer" class="css-3y2nae e3qj6ka3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 27.965 27.965" xml:space="preserve"><path d="M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982    C27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78    l-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782    c0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z" fill="#b4b3f1"></path></svg></span></div></div><style data-emotion-css="14qi7p4">.css-14qi7p4{max-width:75rem;margin:0 auto;padding:3rem 1.5rem 3rem;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}@media all and (min-width:760px){.css-14qi7p4{padding:5rem 1.5rem 3rem;}}</style><div class="css-14qi7p4 e1xbdcly0"><style data-emotion-css="df8fv">.css-df8fv{width:100%;display:inline-block;margin-bottom:2rem;vertical-align:top;min-height:310px;}@media all and (min-width:760px){.css-df8fv{width:calc(50% - 1rem);margin-right:1.5rem;}.css-df8fv:nth-of-type(2n){margin-right:0;}}@media all and (min-width:1200px){.css-df8fv{width:calc(33.33% - 1.3rem);margin-right:1.95rem;}.css-df8fv:nth-of-type(2n){margin-right:1.95rem;}.css-df8fv:nth-of-type(3n){margin-right:0;}}</style><div class="css-df8fv e1xbdcly1"><style data-emotion-css="ll4zz7">.css-ll4zz7{-webkit-text-decoration:none;text-decoration:none;color:#300D4F;border-bottom:2px solid #C223CE;}.css-ll4zz7:hover{cursor:pointer;color:white;background-color:#300D4F;}</style><a href="tutorials/activity-feed-android.html" class="css-ll4zz7 e1kw903v0"><style data-emotion-css="1s3ax5">.css-1s3ax5{padding:1.5rem;border:2px solid #443385;box-shadow:-8px 8px #e1e1fc;border-radius:4px;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-transition:all 0.15s ease-out;transition:all 0.15s ease-out;}.css-1s3ax5:hover{-webkit-transform:translate3d(-3px,4px,0);-ms-transform:translate3d(-3px,4px,0);transform:translate3d(-3px,4px,0);box-shadow:none;}.css-1s3ax5:hover div:nth-of-type(2) span:nth-of-type(2){-webkit-transform:translate3d(10px,0,0);-ms-transform:translate3d(10px,0,0);transform:translate3d(10px,0,0);}</style><div class="css-1s3ax5 ehcfy4u0"><div><style data-emotion-css="anl37j">.css-anl37j{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;list-style:none;display:block;text-transform:uppercase;font-size:.8rem;}.css-anl37j > li:first-of-type{padding-left:0px;margin-left:0px;}</style><ul class="css-anl37j egy9rbj0"><style data-emotion-css="13kz1ow">.css-13kz1ow{margin:0 4px 4px;display:inline-block;color:#5c29db;}</style><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Java</li>…</ul><style data-emotion-css="1cb7erd">.css-1cb7erd{font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;padding:16px 0 8px;line-height:1.5;-webkit-letter-spacing:0.02em;-moz-letter-spacing:0.02em;-ms-letter-spacing:0.02em;letter-spacing:0.02em;cursor:pointer;}@media all and (min-width:400px){.css-1cb7erd{font-size:28px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:31.5px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:35.448px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:39.872px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:400px){.css-1cb7erd{font-size:19px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-1cb7erd{font-size:21.375px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-1cb7erd{font-size:24.054000000000002px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-1cb7erd{font-size:27.055999999999997px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-1cb7erd:hover{color:#4b147b;}</style><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an activity feed in Android </h3><style data-emotion-css="k12xad">.css-k12xad{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;margin-bottom:1rem;}@media all and (min-width:400px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-k12xad{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-k12xad a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-k12xad a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-k12xad e5jrto45">Discover how you can create a realtime activity feed for your Android app.</p></div><style data-emotion-css="1v0cd8t">.css-1v0cd8t{line-height:1;}</style><div class="css-1v0cd8t"><style data-emotion-css="9dax6z">.css-9dax6z{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.5;font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;color:#300D4F;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;display:inline-block;vertical-align:middle;text-transform:uppercase;cursor:pointer;color:#5c29db;font-size:16px !important;}@media all and (min-width:400px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:760px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:960px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}@media all and (min-width:1200px){.css-9dax6z{font-size:16px;-webkit-letter-spacing:0px;-moz-letter-spacing:0px;-ms-letter-spacing:0px;letter-spacing:0px;}}.css-9dax6z:hover{color:#7d55e2;}</style><span class="css-9dax6z ehcfy4u2">read more</span><style data-emotion-css="1slwavu">.css-1slwavu{display:inline-block;vertical-align:middle;width:16px;margin-left:10px;margin-top:3px;}</style><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/monitor-api-go.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Go<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">JavaScript<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">jQuery<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Feeds</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Monitor APIs in realtime using Go</h3><p class="css-k12xad e5jrto45">In this article, you will learn how to realtime monitoring of a small API built using Go and jQuery.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/activity-feed-flask.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Flask<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Python<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">HTML</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build an activity feed with Flask</h3><p class="css-k12xad e5jrto45">In this tutorial, we will cover how to build a live blog feed using Flask and HTML.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/photo-feed-aspnet.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">ASP.NET<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">jQuery</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a photo feed using ASP.NET</h3><p class="css-k12xad e5jrto45">Build a mini system that allows people to upload their photographs in realtime.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/photo-feed-vuejs.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Social<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Vue.js</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a photo feed using Vue.js</h3><p class="css-k12xad e5jrto45">Build a photo feed with Vue.js, Node.js, Pusher, and Cloudinary.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/photo-feed-django.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Python<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Django</li>…</ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a photo feed using Django</h3><p class="css-k12xad e5jrto45">Learn how to build a photo feed using Django and create your own Instagram feed</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/photo-feed-angular.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Feeds<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Angular<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">TypeScript</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a photo feed using Angular</h3><p class="css-k12xad e5jrto45">Build a photo feed that will display any images it receives in realtime.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/photo-feed-swift-raspberrypi.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">iOS<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Swift<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Python<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Feeds</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a photo feed with Swift and Raspberry Pi</h3><p class="css-k12xad e5jrto45">Build an iOS photo feed using Swift and Raspberry Pi and enable realtime updates.</p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div><div class="css-df8fv e1xbdcly1"><a href="tutorials/photo-feed-android.html" class="css-ll4zz7 e1kw903v0"><div class="css-1s3ax5 ehcfy4u0"><div><ul class="css-anl37j egy9rbj0"><li type="tag" class="css-13kz1ow egy9rbj1">Android<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Java<!-- -->,</li><li type="tag" class="css-13kz1ow egy9rbj1">Feeds</li></ul><h3 scale="h5" class="css-1cb7erd ehcfy4u1">Build a photo feed in Android</h3><p class="css-k12xad e5jrto45">Build a photo feed like Instagram or Flickr for Android with realtime functionality. </p></div><div class="css-1v0cd8t"><span class="css-9dax6z ehcfy4u2">read more</span><span class="css-1slwavu ehcfy4u3"><svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 492.004 492.004" xml:space="preserve" width="100%" fill="#5c29db"><path d="M484.14 226.886L306.46 49.202c-5.072-5.072-11.832-7.856-19.04-7.856-7.216 0-13.972 2.788-19.044 7.856l-16.132 16.136c-5.068 5.064-7.86 11.828-7.86 19.04 0 7.208 2.792 14.2 7.86 19.264L355.9 207.526H26.58C11.732 207.526 0 219.15 0 234.002v22.812c0 14.852 11.732 27.648 26.58 27.648h330.496L252.248 388.926c-5.068 5.072-7.86 11.652-7.86 18.864 0 7.204 2.792 13.88 7.86 18.948l16.132 16.084c5.072 5.072 11.828 7.836 19.044 7.836 7.208 0 13.968-2.8 19.04-7.872l177.68-177.68c5.084-5.088 7.88-11.88 7.86-19.1.016-7.244-2.776-14.04-7.864-19.12z"></path></svg></span></div></div></a></div></div></div><style data-emotion-css="13da791">.css-13da791{text-align:center;margin-bottom:2rem;}</style><div class="css-13da791 edg0byb0"><style data-emotion-css="5s6711">.css-5s6711{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;}.css-5s6711:hover{background:#5c29db;color:white;}.css-5s6711:active{background:#5c29db;}@media all and (min-width:760px){.css-5s6711{font-size:1rem;}}</style><a href="tutorialseeb7.html?tag=Feeds&amp;page=2" class="css-5s6711 edg0byb1">Prev</a><a href="tutorialsce66.html?tag=Feeds&amp;page=1" class="css-5s6711 edg0byb1">1</a><a href="tutorialseeb7.html?tag=Feeds&amp;page=2" class="css-5s6711 edg0byb1">2</a><style data-emotion-css="2wakph">.css-2wakph{padding:.7rem;min-width:2.5rem;display:inline-block;-webkit-text-decoration:none;text-decoration:none;margin-right:.3rem;text-align:center;border-radius:2px;background:#eeeeff;color:#443385;font-size:0.875rem;border:gainsboro;cursor:pointer;background:#5c29db;color:white;}.css-2wakph:hover{background:#5c29db;color:white;}.css-2wakph:active{background:#5c29db;}@media all and (min-width:760px){.css-2wakph{font-size:1rem;}}.css-2wakph:hover,.css-2wakph:active{background:#5c29db;color:white;}</style><a href="tutorials99c0.html?tag=Feeds&amp;page=3" class="css-2wakph edg0byb1">3</a><a href="tutorials9585.html?tag=Feeds&amp;page=4" class="css-5s6711 edg0byb1">4</a><a href="tutorials9585.html?tag=Feeds&amp;page=4" class="css-5s6711 edg0byb1">Next</a></div><style data-emotion-css="1rywx5t">.css-1rywx5t{background-color:#300D4F;}</style><div class="css-1rywx5t e4ekq4e0"><style data-emotion-css="2h3eio">.css-2h3eio{width:100%;max-width:75rem;margin:0 auto;margin-bottom:3rem;padding:3rem 1rem 1rem 1rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;}@media all and (min-width:760px){.css-2h3eio{padding:7rem 1rem 1rem 1rem;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}</style><div class="css-2h3eio e4ekq4e1"><style data-emotion-css="i9gxme">.css-i9gxme{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}</style><div class="css-i9gxme"><style data-emotion-css="1ueuk6x">.css-1ueuk6x{width:134px;margin-bottom:3.5rem;}</style><div class="css-1ueuk6x"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1203.43 317.2"><path fill="#ffffff" d="M102.66 316.72v-79.51a.46.46 0 0 1 .24-.41l102.18-59a.46.46 0 0 0 .24-.41v-22.61a.47.47 0 0 0-.71-.41l-101.24 58.45a.47.47 0 0 1-.71-.41v-22.62a.47.47 0 0 1 .24-.41l102.18-59a.49.49 0 0 0 .24-.41v-22.61a.48.48 0 0 0-.71-.41L103.37 165.4a.47.47 0 0 1-.71-.41v-22.61a.46.46 0 0 1 .24-.41L205.08 83a.47.47 0 0 0 .24-.41V59.67a1 1 0 0 0-.47-.82L103.13.13a.93.93 0 0 0-.94 0L82.84 11.3a.47.47 0 0 0 0 .82l101.24 58.45a.48.48 0 0 1 0 .82l-19.35 11.17a1 1 0 0 1-.95 0L62.07 23.84a1 1 0 0 0-1 0L41.78 35a.47.47 0 0 0 0 .82L143 94.28a.47.47 0 0 1 0 .82l-19.34 11.17a1 1 0 0 1-1 0L21 47.54a1 1 0 0 0-1 0L0 59.12V258a.46.46 0 0 0 .24.41l19.58 11.31a.47.47 0 0 0 .71-.41V71.8a.47.47 0 0 1 .71-.41L40.83 82.7a.47.47 0 0 1 .23.41v198.6a.47.47 0 0 0 .24.41l19.58 11.31a.48.48 0 0 0 .72-.42V95.51a.47.47 0 0 1 .71-.41l19.58 11.3a.47.47 0 0 1 .24.41v198.61a.49.49 0 0 0 .23.41l19.64 11.3a.47.47 0 0 0 .66-.41z"></path><g fill="#ffffff"><path d="M308 254.11V62.7a3.56 3.56 0 0 1 3.66-3.58h56.9c36.08 0 58.49 21 58.49 56.18s-25.43 57.58-58.81 57.58h-30.38a1.91 1.91 0 0 0-1.91 1.86v79.68a3.56 3.56 0 0 1-3.65 3.58h-20.66a4.07 4.07 0 0 1-3.64-3.89zm60.56-104.89c19.07 0 29.88-15.87 29.88-33.92 0-18.68-9.85-32.84-29.88-32.84h-30.7a1.92 1.92 0 0 0-1.86 1.87v63a1.91 1.91 0 0 0 1.91 1.87z"></path><path d="M544.81 58.81h20.66a3.56 3.56 0 0 1 3.66 3.58V207c0 32.84-26.86 52.91-58.33 52.91-30.84 0-57.7-20.23-57.7-52.91V62.39a3.56 3.56 0 0 1 3.65-3.58h20.35a3.56 3.56 0 0 1 3.66 3.58v144.1c0 17.89 13.66 29.25 29.88 29.25s30.2-11.36 30.2-29.25v-144a4.2 4.2 0 0 1 3.97-3.68z"></path><path d="M640.18 157.16c-19.71-13.23-32.9-28-32.9-50.27 0-31.9 26.86-50.26 57.38-50.26 28.76 0 54 16 55.47 56.49a3.83 3.83 0 0 1-3.66 3.89h-18.91a3.64 3.64 0 0 1-3.66-3.42c-1.27-22-14.46-32.53-31-32.53-15.9 0-27.82 9.34-27.82 24.28 0 12.91 7.79 19.92 28.14 34.23l28.45 20.54c19.71 14.32 30.83 27.24 30.83 47.62 0 33-27.18 52.6-59.13 52.6-30.2 0-54-16.49-56.58-56.95a3.64 3.64 0 0 1 3.66-3.9h19.23a3.75 3.75 0 0 1 3.65 3.43c1.75 22.56 15.26 33 31.16 33 15.26 0 29.56-8.25 29.56-27.55 0-12-5.4-17.89-21-28.32z"></path><path d="M855.55 254.11v-83.72a1.91 1.91 0 0 0-1.91-1.87h-60.87a1.91 1.91 0 0 0-1.91 1.87v83.72a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.56 3.56 0 0 1-3.66-3.57V62.7a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v80a1.91 1.91 0 0 0 1.91 1.86h60.87a1.91 1.91 0 0 0 1.91-1.86v-80a3.56 3.56 0 0 1 3.66-3.58h20.66a3.56 3.56 0 0 1 3.66 3.58v191.56a3.56 3.56 0 0 1-3.66 3.58h-20.66a3.69 3.69 0 0 1-3.66-3.73z"></path><path d="M935.82 254.11V62.7a3.56 3.56 0 0 1 3.65-3.58h101.09a3.56 3.56 0 0 1 3.66 3.58v16.65a3.56 3.56 0 0 1-3.66 3.58H965.7a1.92 1.92 0 0 0-1.91 1.87v58.66a1.91 1.91 0 0 0 1.91 1.87h51.5a3.56 3.56 0 0 1 3.65 3.58v16.65a3.56 3.56 0 0 1-3.65 3.58h-51.5a1.92 1.92 0 0 0-1.91 1.87v61a1.92 1.92 0 0 0 1.91 1.87h74.86a3.66 3.66 0 0 1 3.66 3.58v16.65a3.66 3.66 0 0 1-3.66 3.57H939.47a3.46 3.46 0 0 1-3.65-3.57z"></path><path d="M1173.28 254.11l-30.51-83.26a1.86 1.86 0 0 0-1.75-1.24h-28.29a1.91 1.91 0 0 0-1.91 1.86v82.64a3.56 3.56 0 0 1-3.66 3.57h-20.66a3.55 3.55 0 0 1-3.65-3.57V62.7a3.56 3.56 0 0 1 3.65-3.58h56.59c34.65 0 58.49 21.94 58.49 54.47 0 21.63-11.45 39.68-32.43 50.26a.8.8 0 0 0-.47 1.09l34.49 88.23a3.66 3.66 0 0 1-3.5 5h-21.46a6.72 6.72 0 0 1-4.93-4.06zm-32.42-107.22c16.69 0 31.63-11.67 31.63-32.21 0-18.37-11.92-32.22-31.63-32.22h-28.13a1.74 1.74 0 0 0-1.75 1.71v60.69a1.91 1.91 0 0 0 1.91 1.87z"></path></g></svg></div></div><style data-emotion-css="16n03ue">.css-16n03ue{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}@media all and (min-width:760px){.css-16n03ue{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}.css-16n03ue div:nth-of-type(even){margin-left:1rem;}</style><div class="css-16n03ue e4ekq4e2"><style data-emotion-css="1ttywp7">.css-1ttywp7{width:45%;}</style><div class="css-1ttywp7 e4ekq4e3"><style data-emotion-css="cet0rr">.css-cet0rr{margin-bottom:0.5rem;}</style><style data-emotion-css="7dutwg">.css-7dutwg{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:23.04px;color:#300D4F;margin-bottom:1rem;font-size:19.2px;font-family:maison-neue,sans-serif;font-weight:700;line-height:1.5;color:#ffffff;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-7dutwg{font-size:23.04px;}}@media all and (min-width:760px){.css-7dutwg{font-size:28.432px;}}@media all and (min-width:960px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:31.984px;}}@media all and (min-width:400px){.css-7dutwg{font-size:19.2px;}}@media all and (min-width:760px){.css-7dutwg{font-size:21.328px;}}@media all and (min-width:960px){.css-7dutwg{font-size:22.624px;}}@media all and (min-width:1200px){.css-7dutwg{font-size:22.624px;}}</style><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Products</h3><style data-emotion-css="ckr2dh">.css-ckr2dh{list-style:none;margin-bottom:2rem;}</style><ul class="css-ckr2dh e4ekq4e4"><li><style data-emotion-css="17vxp28">.css-17vxp28{margin:.5rem 0;display:inline-block;border-style:none;}</style><style data-emotion-css="1btu1sg">.css-1btu1sg{-webkit-text-decoration:none;text-decoration:none;color:white;border-bottom:2px solid white;margin:.5rem 0;display:inline-block;border-style:none;}.css-1btu1sg:hover{cursor:pointer;color:#300D4F;background-color:white;}</style><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-2.html">Channels</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-3.html">Beams</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Developers</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="docs.html" target="_blank" rel="noopener noreferrer">Docs</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="tutorials.html">Tutorials</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://status.pusher.com/" target="_blank" rel="noopener noreferrer">Status</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://support.pusher.com/hc/en-us" target="_blank" rel="noopener noreferrer">Support</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="sessions.html" target="_blank" rel="noopener noreferrer">Sessions</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Company</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index5300.html?origin=footer">Contact Sales</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-4.html">Customer stories</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-5.html">Terms &amp; Conditions</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-6.html">Security</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="index-7.html">Careers</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://blog.pusher.com/" target="_blank" rel="noopener noreferrer">Blog</a></li></ul></div><div class="css-1ttywp7 e4ekq4e3"><h3 scale="h4" color="#ffffff" class="css-7dutwg e1oph6j42">Connect</h3><ul class="css-ckr2dh e4ekq4e4"><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://twitter.com/pusher" target="_blank" rel="noopener noreferrer">Twitter</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://stories.pusher.com/" target="_blank" rel="noopener noreferrer">Medium</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg" target="_blank" rel="noopener noreferrer">YouTube</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://www.linkedin.com/company/pusher-app/" target="_blank" rel="noopener noreferrer">LinkedIn</a></li><li><a class="e4ekq4e5 css-1btu1sg e1kw903v0" href="https://github.com/pusher" target="_blank" rel="noopener noreferrer">GitHub</a></li></ul></div></div></div><style data-emotion-css="1ixj8zf">.css-1ixj8zf{width:100%;max-width:75rem;margin:0 auto;padding:1rem;}</style><div class="css-1ixj8zf e4ekq4e6"><style data-emotion-css="v8rk0o">.css-v8rk0o{font-family:maison-neue,sans-serif;font-weight:300;line-height:1.6;font-size:18px;color:#300D4F;margin-bottom:1rem;color:#ffffff;font-size:14px !important;margin-bottom:0.5rem;}@media all and (min-width:400px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:760px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:960px){.css-v8rk0o{font-size:18px;}}@media all and (min-width:1200px){.css-v8rk0o{font-size:18px;}}.css-v8rk0o a{color:#300D4F;font-weight:700;-webkit-text-decoration:none;text-decoration:none;border-bottom:2px solid #C223CE;}.css-v8rk0o a:hover{color:white;background-color:#300D4F;border-bottom:none;}</style><p class="css-v8rk0o e4ekq4e7">© <!-- -->2020<!-- --> Pusher Ltd. All rights reserved.</p><p class="css-v8rk0o e4ekq4e7">Pusher Limited is a company registered in England and Wales (No. 07489873) whose registered office is at 160 Old Street, London, EC1V 9BW.</p></div></div></main><footer></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"postCount":31,"posts":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2U9mAVUR3aeeW2YIM24W2O","type":"Entry","createdAt":"2018-02-22T15:02:42.776Z","updatedAt":"2018-02-28T14:43:57.656Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an activity feed in Android ","url":"activity-feed-android","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"29U2yrruIQmo6UkY0MMsyK","type":"Entry","createdAt":"2018-02-13T11:27:38.132Z","updatedAt":"2018-02-14T10:08:48.377Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Esteban Herrera","url":"esteban-herrera","email":"estebanhb2@gmail.com","twitter":"https://twitter.com/eh3rrera","github":"https://github.com/eh3rrera/","guestWriter":true}}],"projectRepo":"https://github.com/eh3rrera/feed-pusher-android","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1hvzJaMiAkEQOq088wwo4O","type":"Entry","createdAt":"2018-02-12T14:50:04.128Z","updatedAt":"2018-02-26T12:31:15.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Java","url":"java","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2018-02-14","description":"Discover how you can create a realtime activity feed for your Android app.","prerequisite":"A basic understanding of Java and Node.js is needed to follow this tutorial.","content":"We'd like to track and visualize our applications in a central place. Feeds are great for this! Let's build an Android app with an activity feed showing the temperature of your home.\n\nIn this tutorial, using [Pusher](https://pusher.com), we are going to build a feed as an Android app to monitor the activity of a [Node.js](https://nodejs.org) REST API. Every time an endpoint of the API is hit, it will publish an event with some information (let's say temperatures) to a channel. This event will be received in realtime, on all the connected Android devices.\n\nThis is how our final Android app will look like:\n\n![activity-feed-android-demo](//images.contentful.com/1es3ne0caaid/1WGAtH6OC86GEaAKKWm2YS/1b76e83dad7a0470f499e2ccbd382b59/activity-feed-android-demo.gif)\n\nFor the back-end, we will be using [Node.js](https://nodejs.org) with [Express](https://expressjs.com) to create a simple REST API. A basic knowledge of Node/Express is required to understand the code, but we won't be using a database or anything special so you can replace this stack with the one you're most comfortable with. The source code of this part is also available on [Github](https://github.com/eh3rrera/node-api-pusher).\n\nSo let's get started!\n\n## Setting up Pusher\n\nCreate a free account at [https://pusher.com/signup](https://pusher.com/signup).\n\nWhen you first log in, you'll be asked to enter some configuration options:\n\n![activity-feed-android-create-app](//images.contentful.com/1es3ne0caaid/2yiZXxFDc4ys0Ui0acuK8E/e942424e38712df4c88e55a5e4d0ad44/activity-feed-android-create-app.png)\n\nEnter a name, choose *Android* as your front-end tech, and *Node.js* as your back-end tech. This will give you some sample code to get you started:\n\n![activity-feed-android-pusher-libraries](//images.contentful.com/1es3ne0caaid/4Yi7ILOJhCE46KmqeKC4yy/acef29d86deb38cdf3d95d1b1b739e12/activity-feed-android-pusher-libraries.png)\n\nBut don't worry, this won't lock you into this specific set of technologies, you can always change them. With Pusher, you can use any combination of libraries.\n\nThen go to the *App Keys* tab to copy your App ID, Key, and Secret credentials, we'll need them later.\n\n## The Node server\n\nFirst, let's create a default `package.json` configuration file with:\n\n``` \nnpm init -y\n```\n\nWe'll need Express, Pusher, and other dependencies, let's add them with:\n\n``` \nnpm install --save express body-parser pusher\n```\n\nIn case a future version of a dependency breaks the code, here's the dependencies section on the `package.json` file:\n\n```\n{\n  ...\n    \"dependencies\": {\n    \"body-parser\": \"1.16.0\",\n    \"express\": \"4.14.1\",\n    \"pusher\": \"1.5.1\"\n  }\n}\n```\n\nNext, create a [server.js](https://github.com/eh3rrera/node-api-pusher/blob/16b75dcd39cde3bb0f454bfed808a7e80e8c8c93/server.js) file. First, let's require the modules we're going to need:\n\n```\nvar express = require('express');\nvar bodyParser = require('body-parser');\nvar crypto = require('crypto');\nvar Pusher = require('pusher');\n```\n\nThen, configure the Express object:\n\n```\nvar app = express();\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n```\n\nNext, the Pusher object is created by passing the configuration object with the ID, key, and the secret for the app created in the [Pusher Dashboard](https://dashboard.pusher.com):\n\n```\nvar pusher = new Pusher({\n  appId      : process.env.PUSHER_APP_ID,\n  key        : process.env.PUSHER_APP_KEY,\n  secret     : process.env.PUSHER_APP_SECRET,\n  encrypted  : true,\n});\n```\n\nPusher will be used to publish any events that happen in our application. These events have a *channel*, which allows events to relate to a particular topic, an *event-name* used to identify the type of the event, and a *payload*, which you can attach any additional information to the message.\n\nWe are going to publish an event to a Pusher channel when an endpoint of our API is called to create/update/delete a record, and send the information as an attachment so we can show it in an activity feed.\n\nHere's the definition of our API's REST endpoints. Notice how an ID for the record is created using the first four characters of the `hex` string generated by `crypto.randomBytes(16)` (to avoid using an external library):\n\n```\napp.post('/api', function (req, res) {\n  var event = {\n    data: req.body.data,\n    id: crypto.randomBytes(16).toString('hex').substring(0, 4),\n  };\n\n  // Do something with the data...\n\n  // Publish event to the Pusher channel\n  pusher.trigger(channel, 'created', event);\n\n  res.status(200).json(event);\n});\n\napp.route('/api/:id')\n  // PUT  endpoint to update a record\n  .put(function (req, res) {\n    var event = {\n     data: req.body.data,\n     id: req.params.id,\n    };\n\n    // Do something with the data...\n\n    // Publish event to the Pusher channel\n    pusher.trigger(channel, 'updated', event);\n\n    res.status(200).json(event);\n  })\n\n  // DELETE  endpoint to delete a record\n  .delete(function (req, res) {\n    var event = {\n      id: req.params.id,\n    };\n\n    // Do something with the data...\n\n    // Publish event to the Pusher channel\n    pusher.trigger(channel, 'deleted', event);\n\n    res.status(200).json(event);\n  });\n```\n\nThis way, a POST request like this:\n\n``` \n{\n  \"data\": \"Temperature: 75°F\"\n}\n```\n\nWill return something like the following:\n\n``` \n{\n  \"data\": \"Temperature: 75°F\",\n  \"id\": \"d2t6\"\n}\n```\n\nWe start the server with:\n\n```\napp.listen(3000, function () {\n  console.log('Node server running on port 3000');\n});\n```\n\nAnd that's all. To run the server, execute the following command passing your Pusher credentials:\n\n``` \nPUSHER_APP_ID=XXXXXX PUSHER_APP_KEY=XXXXXX PUSHER_APP_SECRET=XXXXXX node server.js\n```\n\n## The android app\n\nOpen Android Studio and create a new project:\n\n![activity-feed-android-create-project](//images.contentful.com/1es3ne0caaid/1Kv2lAKIY4mwoY2Mywq0gI/8c26426d81ec3da7247246baff95fc9a/activity-feed-android-create-project.png)\n\nWe're not going to use anything special, so we can safely support a low API level:\n\n![activity-feed-android-target-device](//images.contentful.com/1es3ne0caaid/27mSDfxqYowQs80KIOcQAM/96714408b4c7866569e31c57eaa54aa3/activity-feed-android-target-device.png)\n\nNext, create an initial empty activity:\n\n![activity-feed-android-add-activity](//images.contentful.com/1es3ne0caaid/5LmK2Ij7NemKwsmoe4Es84/47eb17b20b83969fd71ce839df85865c/activity-feed-android-add-activity.png)\n\nAnd use the default name of `MainActivity` with backward compatibility:\n\n![activity-feed-android-customize-activity](//images.contentful.com/1es3ne0caaid/3q9QEPf3NmOKco6S2aiciM/121fdec6ed6f91779d08ddd69e0488b8/activity-feed-android-customize-activity.png)\n\nOnce everything is set up, let's install the project dependencies. In the `dependencies` section of the `build.gradle` file of your application module add:\n\n```\ndependencies {\n    ...\n    compile 'com.pusher:pusher-java-client:1.4.0'\n    compile 'com.android.support:recyclerview-v7:25.1.1'\n    compile 'com.android.support:cardview-v7:25.1.1'\n    compile 'com.github.curioustechizen.android-ago:library:1.3.2'\n    compile 'com.google.code.gson:gson:2.4'\n    ...\n}\n```\n\nAt the time of this writing, the latest SDK version is 25, so that's my target SDK version.\n\nWe're going to use the `RecyclerView` and `CardView` components from the [Support Library](https://developer.android.com/topic/libraries/support-library/features.html), so make sure you have it installed (in *Tools -\u003e Android -\u003e SDK Manager -\u003e SDK Tools tab* the *Android Support Repository* must be installed).\n\nSync the Gradle project so the modules can be installed and the project built.\n\nBefore we forget (I always do), let's add the `INTERNET` permission to the `AndroidManifest.xml` file. This is required so we can connect to Pusher and get the events in realtime:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.pusher.feed\"\u003e\n\n    \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n\n    \u003capplication\n        ...\n    \u003c/application\u003e\n\n\u003c/manifest\u003e\n```\n\nIf you want to modify the style of the app, in the `res/values` folder, modify the [colors.xml](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/res/values/colors.xml) file so it looks like this:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\n\u003cresources\u003e\n    \u003ccolor name=\"primary\"\u003e#03A9F4\u003c/color\u003e\n    \u003ccolor name=\"primary_dark\"\u003e#0288D1\u003c/color\u003e\n    \u003ccolor name=\"primary_light\"\u003e#B3E5FC\u003c/color\u003e\n    \u003ccolor name=\"accent\"\u003e#FF4081\u003c/color\u003e\n    \u003ccolor name=\"primary_text\"\u003e#212121\u003c/color\u003e\n    \u003ccolor name=\"secondary_text\"\u003e#757575\u003c/color\u003e\n    \u003ccolor name=\"icons\"\u003e#FFFFFF\u003c/color\u003e\n    \u003ccolor name=\"divider\"\u003e#BDBDBD\u003c/color\u003e\n\u003c/resources\u003e\n```\n\nAs well as the [styles.xml](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/res/values/styles.xml) file to match these color definitions:\n\n```\n\u003cresources\u003e\n\n    \u003c!-- Base application theme. --\u003e\n    \u003cstyle name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\"\u003e\n        \u003c!-- Customize your theme here. --\u003e\n        \u003citem name=\"colorPrimary\"\u003e@color/primary\u003c/item\u003e\n        \u003citem name=\"colorPrimaryDark\"\u003e@color/primary_dark\u003c/item\u003e\n        \u003citem name=\"colorAccent\"\u003e@color/accent\u003c/item\u003e\n    \u003c/style\u003e\n\n\u003c/resources\u003e\n```\n\nNow, modify the layout file [activity_main.xml](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/res/layout/activity_main.xml) so it looks like this:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cRelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/activity_main\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:paddingBottom=\"@dimen/activity_vertical_margin\"\n    android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n    android:paddingRight=\"@dimen/activity_horizontal_margin\"\n    android:paddingTop=\"@dimen/activity_vertical_margin\"\n    tools:context=\"com.pusher.feed.MainActivity\"\u003e\n\n    \u003candroid.support.v7.widget.RecyclerView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_alignParentTop=\"true\"\n        android:layout_alignParentLeft=\"true\"\n        android:layout_alignParentStart=\"true\"\n        android:id=\"@+id/recycler_view\"\n        android:scrollbars=\"vertical\" /\u003e\n\u003c/RelativeLayout\u003e\n```\n\nWe're going to use a [RecyclerView](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html) to display the events, which we'll store in a list. Each item in this list is displayed in an identical manner, so let's define another layout file to inflate each item.\n\nCreate the file [event_row.xml](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/res/layout/event_row.xml) with the following content:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003candroid.support.v7.widget.CardView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:card_view=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    card_view:cardCornerRadius=\"4dp\"\n    card_view:cardElevation=\"4dp\"\n    card_view:cardUseCompatPadding=\"true\"\n    card_view:contentPadding=\"8dp\"\u003e\n\n    \u003cRelativeLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\u003e\n\n        \u003cTextView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:textAppearance=\"?android:attr/textAppearanceLarge\"\n            android:text=\"Event\"\n            android:id=\"@+id/event\"\n            android:layout_alignParentTop=\"true\"\n            android:textAlignment=\"center\" /\u003e\n\n        \u003cTextView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:textAppearance=\"?android:attr/textAppearanceMedium\"\n            android:text=\"ID\"\n            android:id=\"@+id/id\"\n            android:layout_below=\"@+id/event\"\n            android:textAlignment=\"center\" /\u003e\n\n        \u003ccom.github.curioustechizen.ago.RelativeTimeTextView\n            android:id=\"@+id/timestamp\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:textAppearance=\"?android:attr/textAppearanceSmall\"\n            android:layout_below=\"@+id/id\"\n            android:textAlignment=\"center\" /\u003e\n\n        \u003cTextView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Data\"\n            android:id=\"@+id/data\"\n            android:layout_below=\"@+id/timestamp\"\n            android:textAlignment=\"center\"\n            android:layout_marginTop=\"8dp\" /\u003e\n    \u003c/RelativeLayout\u003e\n\n\u003c/android.support.v7.widget.CardView\u003e\n```\n\nHere we're using a [CardView](https://developer.android.com/reference/android/support/v7/widget/CardView.html) to show the information inside a card, with shadows and rounded corners. For each item, we're going to present:\n\n- A `TextView` for the name of the event (*created*, *updated*, or *deleted*).\n- A `TextView` for the ID of the record (for example, *c2d6*).\n- A [RelativeTimeTextView](https://github.com/curioustechizen/android-ago), a custom `TextView` that displays the relative time with respect to the reference point (the moment the event is received), automatically refreshing the text as needed.\n- A `TextView` for the data contained in the record (anything the user sends, for example, *Temperature: 80°F*).\n \nNow, to store the information of each event, let's create a class, [com.pusher.feed.Event](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/java/com/pusher/feed/Event.java):\n\n```\npublic class Event  {\n    private String name;\n    private String id;\n    private String data;\n\n    public Event(String name, String eventId, String data) {\n        this.name = name;\n        this.id = eventId;\n        this.data = data;\n    }\n\n    // Getters and setters\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getData() {\n        return data;\n   }\n}\n```\n\n`RecyclerView` works with an [Adapter](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html) to manage the items of its data source (in this case a list of `Event` instances), and a [ViewHolder](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ViewHolder.html) to hold a view representing a single list item, so first create the class [com.pusher.feed.EventAdapter](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/java/com/pusher/feed/EventAdapter.java) with the following code:\n\n```\npublic class EventAdapter extends RecyclerView.Adapter\u003cEventAdapter.EventViewHolder\u003e {\n    private List\u003cEvent\u003e items;\n\n    public EventAdapter(List\u003cEvent\u003e items) {\n        this.items = items;\n    }\n\n    public void addEvent(Event event) {\n        // Add the event at the beginning of the list\n        items.add(0, event);\n        // Notify the insertion so the view can be refreshed\n        notifyItemInserted(0);\n    }\n\n    @Override\n    public int getItemCount() {\n        return items.size();\n    }\n\n    @Override\n    public EventViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {\n\n    }\n\n    @Override\n    public void onBindViewHolder(EventViewHolder viewHolder, int i) {\n\n    }\n}\n```\n\nWe initialize the class with a list of `Event`, provide a method to add `Event` instances at the beginning of the list (`addEvent(Event)`) and then notify the insertion so the view can be refreshed, and implement `getItemCount` so it returns the size of the list.\n\nThen, let's add the `ViewHolder` as an inner class, it references the `View` components for each item in the list:\n\n```\npublic class EventAdapter extends RecyclerView.Adapter\u003cEventAdapter.EventViewHolder\u003e {\n    private ArrayList\u003cEvent\u003e items;\n\n    public static class EventViewHolder extends RecyclerView.ViewHolder {\n        // Card fields\n        public TextView event;\n        public TextView id;\n        public RelativeTimeTextView timestamp;\n        public TextView data;\n\n        public EventViewHolder(View v) {\n            super(v);\n            event = (TextView) v.findViewById(R.id.event);\n            id = (TextView) v.findViewById(R.id.id);\n            timestamp = (RelativeTimeTextView) v.findViewById(R.id.timestamp);\n            data = (TextView) v.findViewById(R.id.data);\n        }\n    }\n\n    ...\n}\n```\n\nAnd implement the methods `onCreateViewHolder` and `onBindViewHolder`:\n\n```\npublic class EventAdapter extends RecyclerView.Adapter\u003cEventAdapter.EventViewHolder\u003e {\n    ...\n\n    @Override\n    public EventViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {\n        View v = LayoutInflater.from(viewGroup.getContext())\n                .inflate(R.layout.event_row, viewGroup, false);\n\n        return new EventViewHolder(v);\n    }\n\n    @Override\n    public void onBindViewHolder(EventViewHolder viewHolder, int i) {\n        Event event = items.get(i);\n\n        viewHolder.event.setText(event.getName());\n        viewHolder.id.setText(event.getId());\n        viewHolder.timestamp.setReferenceTime(System.currentTimeMillis());\n        viewHolder.data.setText(event.getData());\n    }\n}\n```\n\nIn the `onCreateViewHolder` method, we inflate the layout with the content of the `event_row.xml` file we created earlier, and in `onBindViewHolder`, we set the values of the views with the event in turn. Notice how we set the reference time on `RelativeTimeTextView` so it can display a text like *Just now* or *10 minutes ago*.\n\nIn the class [com.pusher.feed.MainActivity](https://github.com/eh3rrera/feed-pusher-android/blob/a1e5938e3eb43e7c3921f704fee4c332b6548701/app/src/main/java/com/pusher/feed/MainActivity.java), let's start by defining the private fields we're going to need:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    private RecyclerView.LayoutManager lManager;\n    private EventAdapter adapter;\n    private Pusher pusher = new Pusher(\"ENTER_PUSHER_APP_KEY_HERE\");\n    private static final String CHANNEL_NAME = \"events_to_be_shown\";\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ....\n    }\n}\n```\n\n`RecyclerView` works with a [LayoutManager](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.LayoutManager.html) to handle the layout and scroll direction of the list. We declare the `EventAdapter`, the `Pusher` object and the identifier for the Pusher channel. Remember to replace your Pusher app key, if you still don't have one, this would be a good time to [sign up for a free account](https://pusher.com/signup) and [create you app](https://dashboard.pusher.com).\n\nInside the `onCreate` method, let's assign a [LinearLayoutManager](https://developer.android.com/reference/android/support/v7/widget/LinearLayoutManager.html) to the `RecyclerView` and create the `EventAdapter` with an empty list:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // Get the RecyclerView\n        RecyclerView recycler = (RecyclerView) findViewById(R.id.recycler_view);\n\n        // Use LinearLayout as the layout manager\n        lManager = new LinearLayoutManager(this);\n        recycler.setLayoutManager(lManager);\n\n        // Set the custom adapter\n        List\u003cEvent\u003e eventList = new ArrayList\u003c\u003e();\n        adapter = new EventAdapter(eventList);\n        recycler.setAdapter(adapter);\n    }\n}\n```\n\nFor the Pusher part, we first subscribe to the channel:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ...\n\n        Channel channel = pusher.subscribe(CHANNEL_NAME);\n}\n```\n\nThen, we create the listener that will be executed when an event arrives:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n    ...\n    SubscriptionEventListener eventListener = new SubscriptionEventListener() {\n            @Override\n            public void onEvent(String channel, final String event, final String data) {\n                runOnUiThread(new Runnable() {\n                    @Override\n                    public void run() {\n                        System.out.println(\"Received event with data: \" + data);\n                        Gson gson = new Gson();\n                        Event evt = gson.fromJson(data, Event.class);\n                        evt.setName(event + \":\");\n                        adapter.addEvent(evt);\n                        ((LinearLayoutManager)lManager).scrollToPositionWithOffset(0, 0);\n                    }\n                });\n            }\n        };\n    }\n}\n```\n\nHere, the JSON string that we receive is converted to an `Event` object, the name of the event is set to the name of the event received, and the object is added to the adapter. Finally, we move to the top of the list.\n\nNext, bind the events to this listener and call the `connect` method on the Pusher object:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ...\n        channel.bind(\"created\", eventListener);\n        channel.bind(\"updated\", eventListener);\n        channel.bind(\"deleted\", eventListener);\n\n        pusher.connect();\n    }\n}\n```\n\nThe `connect` method can take a listener that can be helpful to debug problems you might have:\n\n```\npusher.connect(new ConnectionEventListener() {\n    @Override\n    public void onConnectionStateChange(ConnectionStateChange change) {\n        System.out.println(\"State changed to \" + change.getCurrentState() +\n            \" from \" + change.getPreviousState());\n    }\n\n   @Override\n    public void onError(String message, String code, Exception e) {\n        System.out.println(\"There was a problem connecting!\");\n        e.printStackTrace();\n    }\n});\n```\n\nFinally, `MainActivity` also needs to implement the `onDestroy()` method so we can have the opportunity to unsubscribe from Pusher when the activity is destroyed:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        pusher.disconnect();\n    }\n}\n```\n\nAnd that's all the code on the Android part. Let's test it.\n\n## Testing the app\n\nExecute the app, either on a real device or a virtual one:\n\n![activity-feed-android-deploy-app](//images.contentful.com/1es3ne0caaid/CFHd4HGgfYmmOc42MgO40/f530f27b6586deb77c4d711817697e80/activity-feed-android-deploy-app.png)\n\nYou'll be presented with an almost blank screen:\n\n![activity-feed-android-app](//images.contentful.com/1es3ne0caaid/63EKVtRYqcssUa6MmcwGY4/27d4d24fdb3dc81d4366dba37fc441f1/activity-feed-android-app.png)\n\nFor the back-end, you can use something to call the API endpoints with a JSON payload, like [cURL](https://curl.haxx.se/):\n\n``` \n# POST\ncurl -H \"Content-Type: application/json\" -X POST -d '{\"data\":\"Temperature: 80°F\"}' http://localhost:3000/api\n# PUT\ncurl -H \"Content-Type: application/json\" -X PUT -d '{\"data\":\"Temperature: 85°F\"}' http://localhost:3000/api/aqw3\n# DELETE\ncurl -X DELETE http://localhost:3000/api/aqw3\n\n# In Windows, change single quotes to quotation marks and escape the ones inside curly brackets\ncurl -H \"Content-Type: application/json\" -X POST -d \"{\\\"data\\\":\\\"Temperature: 80°F\\\"}\" http://localhost:3000/api\n\n# Or use file, for example data.json\ncurl -H \"Content-Type: application/json\" -X POST --data @data.json http://localhost:3000/api\n```\n\nOr use a tool like [Postman](https://www.getpostman.com/):\n\n![activity-feed-android-postman](//images.contentful.com/1es3ne0caaid/3jUxsuEEgUM8c6mmEwiuGU/ab37f83253c98a637d66b8837a45baf9/activity-feed-android-postman.png)\n\nWhen a request is received on the API side, the event will show up in the app:\n\n![activity-feed-android-app-test](//images.contentful.com/1es3ne0caaid/4XKXil7es0EGkICAqgUA4S/cb52327f73792a6adb269b506bbd36fa/activity-feed-android-app-test.png)\n\nOr if you only want to test the app, you can use the [Pusher Debug Console on your dashboard](http://dashboard.pusher.com/):\n\n![activity-feed-android-pusher-debug-console](//images.contentful.com/1es3ne0caaid/74tDZ8NMlyosmg6MU6kWIG/1cfe3514ad6666e8578c3e196a53431b/activity-feed-android-pusher-debug-console.png)\n\n## Conclusion\n\nHopefully, this tutorial has shown you in an easy way how to build an activity feed for Android apps with Pusher. You can improve the app by changing the design, showing more information, or saving it to a database.\n\n## Further reading\n\n- [Pusher Java client](https://github.com/pusher/pusher-websocket-java)\n- [Android-ago](https://github.com/curioustechizen/android-ago)\n- [Activity's lifecycle](https://developer.android.com/guide/components/activities/activity-lifecycle.html)\n- [Creating Lists and Cards](https://developer.android.com/training/material/lists-cards.html)","metaTitle":"Build an activity feed in Android ","metaDescription":"Build a live activity feed in Android using Java, Node.js and Pusher for the realtime features."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3k2gChNFTackmekCUGAmWA","type":"Entry","createdAt":"2018-02-28T12:27:48.206Z","updatedAt":"2018-02-28T12:27:48.206Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Monitor APIs in realtime using Go","url":"monitor-api-go","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5q8aOMtjzOkUkOqeCOkaws","type":"Entry","createdAt":"2018-02-15T16:09:28.291Z","updatedAt":"2018-02-15T16:09:28.291Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Neo Ighodaro","url":"neo-ighodaro","email":"neo@creativitykills.co","twitter":"https://twitter.com/NeoIghodaro","github":"https://github.com/neoighodaro","guestWriter":true}}],"projectRepo":"https://github.com/neoighodaro/go-pusher-api-monitor","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FPNv1ezQkGsyYyW8eUSiy","type":"Entry","createdAt":"2018-02-12T14:52:13.587Z","updatedAt":"2018-02-26T12:31:14.749Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Go","url":"go","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1NUYHyE9AsKICMGiIyCA4y","type":"Entry","createdAt":"2018-02-12T14:53:47.651Z","updatedAt":"2018-02-26T12:31:14.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"jQuery","url":"jquery","type":"library"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}}],"reviewDate":"2018-02-10","description":"In this article, you will learn how to realtime monitoring of a small API built using Go and jQuery.","prerequisite":"A basic understanding of Go and JavaScript is needed to follow this tutorial.","content":"REST is a popular architectural style for providing standards between computer systems on the web, making it easier for systems to communicate with each other. It is mostly used by APIs to provide data to other systems requiring them.\n\nSometimes, the providers of APIs would like to monitor its use. Monitoring APIs helps provide useful information, such as which endpoints are called most frequently, or what regions are the largest audience using request IP Addresses. This information can then be used to optimize the API.\n\nIn this article, we will implement realtime monitoring of a small API built with GoLang, using Pusher. Here’s a preview of what it should look like at the end:\n\n![monitor-api-go-demo](//images.contentful.com/1es3ne0caaid/5neldRoqw86YwmkUAWOCK6/62eaee0a825b4e1bb511a3c22ed07133/monitor-api-go-demo.gif)\n\n## Requirements\n\nTo follow along with this article, you will need the following:\n- An IDE of your choice e.g. [Visual Studio Code](https://code.visualstudio.com/).\n- [Go](https://golang.org/doc/install) installed on your computer.\n- Basic knowledge of GoLang.\n- Basic knowledge of JavaScript (ES6 syntax) and jQuery.\n- Basic knowledge of using a CLI tool or terminal.\n\nOnce you have all the above requirements, let’s proceed.\n\n\n## Setting up our codebase\n\nTo keep things simple, we’ll be using an already written GoLang CRUD API, which is available on [GitHub](https://github.com/neoighodaro/go-pusher-api-monitor/tree/master/api-goggles). We will fork the repository and set it up following the **README.md** guidelines on installation.\n\nNext, we will set up Pusher in the API project. Pusher is a service that provides a simple implementation of realtime functionality for our web and mobile applications. We will use it in this article, to provide realtime updates to our API monitor dashboard.\n\nLet’s head over to Pusher.com, you can [create a free account](https://pusher.com/signup?plan=sandbox) if you don’t already have one. On the [dashboard](https://dashboard.pusher.com/), create a new app and copy out the app credentials (App ID, Key, Secret, and Cluster). We will use these credentials in our API.\n\nNow that we have our Pusher app, we will install the Pusher Go library by running:\n\n```\n    $ go get github.com/pusher/pusher-http-go\n```\n\n## Monitoring our API\n\nWe have so far set up a functional CRUD API, and we will now implement monitoring calls to it. In this article, we will monitor:\n- The endpoints called with details like name, request type (GET, POST, etc) and URL.\n- For each call to an endpoint, we will also take note of:\n  - The requesting IP address remove,\n  - The response status code for the particular call.\n\nNow that we have defined what to monitor, we will begin by creating models to keep track of the data we acquire.\n\n### Creating models for monitoring\n\nBased on our specifications above, we will create two new model files `EndPoints.go` and `EndPointCalls.go`. As was used in the base API, we will use the [GORM](http://jinzhu.me/gorm/) (the GoLang ORM) for managing data storage.\n\n\u003e 💡 Our new model files will exist in the models directory and belong to the models package.\n\nIn `EndPoints.go`, we will define the `EndPoints` object and a method to save endpoints:\n\n```\n    package models\n    \n    import (\n        \"github.com/jinzhu/gorm\"\n    )\n    \n    // EndPoints - endpoint model\n    type EndPoints struct {\n        gorm.Model\n        Name, URL string\n        Type      string          `gorm:\"DEFAULT:'GET'\"`\n        Calls     []EndPointCalls `gorm:\"ForeignKey:EndPointID\"`\n    }\n    \n    // SaveOrCreate - save endpoint called\n    func (ep EndPoints) SaveOrCreate() EndPoints {\n        db.FirstOrCreate(\u0026ep, ep)\n        return ep\n    }\n```\n\nIn the code block above, our model did not re-initialize the GORM instance `db`, yet it was used. This is because the instance defined in the `Movies.go` file was global to all members of the package, and so it can be referenced and used by all members of `package models`.\n\n\n\u003e 💡 Our EndPoints model has an attribute `Calls` which is an array of `EndPointCalls` objects. This attribute signifies the [one to many](http://jinzhu.me/gorm/associations.html#has-many) relationship between `EndPoints` and `EndPointCalls`. For more information on model associations and relationships see the GORM [documentation](http://jinzhu.me/gorm/associations.html).\n\nNext, we’ll fill in the model definitions and methods for our `EndPointCalls` model in the `EndPointCalls.go` file:\n\n```\n    package models\n    \n    import (\n        \"github.com/jinzhu/gorm\"\n        \"github.com/kataras/iris\"\n    )\n    \n    // EndPointCalls - Object for storing endpoints call details\n    type EndPointCalls struct {\n        gorm.Model\n        EndPointID   uint `gorm:\"index;not null\"`\n        RequestIP    string\n        ResponseCode int\n    }\n    \n    // SaveCall - Save the call details of an endpoint\n    func (ep EndPoints) SaveCall(context iris.Context) EndPointCalls {\n        epCall := EndPointCalls{\n            EndPointID:   ep.ID,\n            RequestIP:    context.RemoteAddr(),\n            ResponseCode: context.GetStatusCode(),\n        }\n    \n        db.Create(\u0026epCall)\n        return epCall\n    }\n```\n\nAs shown above, our `EndPointCalls` model defines a `SaveCall` method, which stores the requesting IP address and the response code of an existing `EndPoint` object.\n\nFinally, we will update the model migration in the `index.go` file to include our new models:\n\n```\n    // index.go\n    // ...\n    \n    func main() {\n        // ...\n    \n        // Initialize ORM and auto migrate models\n        db, _ := gorm.Open(\"sqlite3\", \"./db/gorm.db\")\n        db.AutoMigrate(\u0026models.Movies{}, \u0026models.EndPoints{}, \u0026models.EndPointCalls{})\n    \n        // ...\n    }\n```\n\n### Saving endpoint data for monitoring\nUsing our newly created models, we will edit the `MoviesController.go` file to save relevant data when an endpoint is called.\n\nTo do this, we will add a private helper method to `MoviesController.go`, which will save endpoint data with our models. See how below:\n\n```\n    // MoviesController.go\n    // ...\n    \n    func (m MoviesController) saveEndpointCall(name string) {\n        endpoint := models.EndPoints{\n            Name: name,\n            URL:  m.Cntx.Path(),\n            Type: m.Cntx.Request().Method,\n        }\n    \n        endpoint = endpoint.SaveOrCreate()\n        endpointCall := endpoint.SaveCall(m.Cntx)\n    }\n```\n\nThe `saveEndpointCall` method takes the name of the endpoint as a parameter. Using the controller’s `iris.Context` instance, it reads and saves the endpoint path and request method.\n\nNow that this helper method is available, we will call it in each of the endpoint methods in the `MoviesController.go` file:\n\n```\n    // MoviesController.go\n    // ...\n    \n    // Get - get a list of all available movies\n    func (m MoviesController) Get() {\n        movie := models.Movies{}\n        movies := movie.Get()\n    \n        go m.saveEndpointCall(\"Movies List\")\n        m.Cntx.JSON(iris.Map{\"status\": \"success\", \"data\": movies})\n    }\n    \n    // GetByID - Get movie by ID\n    func (m MoviesController) GetByID(ID int64) {\n        movie := models.Movies{}\n        movie = movie.GetByID(ID)\n        if !movie.Validate() {\n            msg := fmt.Sprintf(\"Movie with ID: %v not found\", ID)\n            m.Cntx.StatusCode(iris.StatusNotFound)\n            m.Cntx.JSON(iris.Map{\"status\": \"error\", \"message\": msg})\n        } else {\n            m.Cntx.JSON(iris.Map{\"status\": \"success\", \"data\": movie})\n        }\n    \n        name := fmt.Sprintf(\"Single Movie with ID: %v Retrieval\", ID)\n        go m.saveEndpointCall(name)\n    }\n    \n    // ...\n```\n\nAs shown in the snippet above, the `saveEndpointCall` helper method will be called in each CRUD method.\n\n\u003e 💡 The `saveEndpointCall` method is called as a [Goroutine](https://golangbot.com/goroutines/). Calling it this way calls it concurrently with the execution of the endpoint’s method, and allows our monitoring code to not delay or inhibit the response of the API.\n\n\n## Creating the endpoint monitor dashboard\n\nNow that we have implemented monitoring our API’s calls, we will display the data we have accrued on a dashboard.\n\n### Registering our template engine\n\nThe GoLang framework, Iris, has the ability to implement a range of template engines, which we will take advantage of.\n\nIn this section, we will implement the **Handlebars** template engine, and in our `index.go` file, we will register it to the app instance:\n\n```\n    // index.go\n    package main\n    \n    import (\n        \"goggles/controllers\"\n        \"goggles/models\"\n        \"github.com/jinzhu/gorm\"\n        \"github.com/kataras/iris\"\n    )\n    \n    func main() {\n        app := iris.New()\n    \n        tmpl := iris.Handlebars(\"./templates\", \".html\")  \n        app.RegisterView(tmpl)\n    \n        // ...\n    \n        app.Run(iris.Addr(\"127.0.0.1:1234\"))\n    }\n```\n\n\u003e 💡 We have defined our template engine (Handlebars), to render `.html` files contained in the `templates` directory.\n\n### Creating the dashboard's route and controller\nNow that we have registered our template engine to the application, we will add a route in `index.go` to render our API monitor dashboard:\n\n```\n    // index.go\n    // ...\n    \n    func main() {\n        app := iris.New()\n    \n        // ...\n    \n        app.Get(\"/admin/endpoints\", func(ctx iris.Context) {\n            dashBoard := controllers.DashBoardController{Cntx: ctx}\n            dashBoard.ShowEndpoints()\n        })\n    \n        app.Run(iris.Addr(\"127.0.0.1:1234\"))\n    }\n```\n\nAbove, we have added definitions for the path `/admin/endpoints`, where we intend to render details of our API endpoints and its calls. We have also specified that the route should be handled by the `ShowEndpoints` method of `DashBoardController`.\n\nTo create `DashBoardController`, we will create a `DashBoardController.go` file in the controllers directory. And in our `DashBoardController.go` file, we will define the `DashBoardController` object and its `ShowEndpoints` method:\n\n```\n    // DashBoardController.go\n    package controllers\n    \n    import (\n        \"goggles/models\"\n        \"github.com/kataras/iris\"\n        \"github.com/kataras/iris/mvc\"\n    )\n    \n    // DashBoardController - Controller object for Endpoints dashboard\n    type DashBoardController struct {\n        mvc.BaseController\n        Cntx iris.Context\n    }\n    \n    // ShowEndpoints - show list of endpoints\n    func (d DashBoardController) ShowEndpoints() {\n        endpoints := (models.EndPoints{}).GetWithCallSummary()\n        d.Cntx.ViewData(\"endpoints\", endpoints)\n        d.Cntx.View(\"endpoints.html\")\n    }\n```\n\nIn `ShowEndpoints()`, we retrieve our endpoints and a summary of their calls for display. Then we pass this data to our view using `d.Cntx.ViewData(\"endpoints\", endpoints)`, and finally we render our view file `templates/endpoints.html` using `d.Cntx.View(\"endpoints.html\")`.\n\n### Retrieving endpoints and call summaries\nTo retrieve our list of endpoints and a summary of their calls, we will create a method in the `EndPoints.go` file called `GetWithCallSummary`.\n\nOur `GetWithCallSummary` method should return the endpoints and their call summaries ready for display. For this, we will define a collection object `EndPointWithCallSummary` with the attributes we need for our display in the `EndPoints.go` file:\n\n```\n    // EndPoints.go\n    package models\n    \n    import (\n        \"github.com/jinzhu/gorm\"\n    )\n    \n    // EndPoints - endpoint model\n    type EndPoints struct {\n        gorm.Model\n        Name, URL string\n        Type      string          `gorm:\"DEFAULT:'GET'\"`\n        Calls     []EndPointCalls `gorm:\"ForeignKey:EndPointID\"`\n    }\n    \n    // EndPointWithCallSummary - Endpoint with last call summary\n    type EndPointWithCallSummary struct {\n        ID            uint\n        Name, URL     string\n        Type          string\n        LastStatus    int\n        NumRequests   int\n        LastRequester string\n    }\n```\n\nAnd then define `GetWithCallSummary` method to use it as follows:\n\n```\n    // EndPoints.go\n    \n    // ...\n    \n    // GetWithCallSummary - get all endpoints with call summary details\n    func (ep EndPoints) GetWithCallSummary() []EndPointWithCallSummary {\n        var eps []EndPoints\n        var epsWithDets []EndPointWithCallSummary\n    \n        db.Preload(\"Calls\").Find(\u0026eps)\n    \n        for _, elem := range eps {\n            calls := elem.Calls\n            lastCall := calls[len(calls)-1:][0]\n            newElem := EndPointWithCallSummary{\n                elem.ID,\n                elem.Name,\n                elem.URL,\n                elem.Type,\n                lastCall.ResponseCode,\n                len(calls),\n                lastCall.RequestIP,\n            }\n            epsWithDets = append(epsWithDets, newElem)\n        }\n    \n        return epsWithDets\n    }\n    \n    // ...\n```\n\nAbove, the `GetWithCallSummary` method leverages the `Calls` attribute of `EndPoints`, which defines its relationship with `EndPointCalls`. When retrieving our list of endpoints from the database, we eager load its `EndPointCalls` data using `db.Preload(\"Calls\").Find(\u0026eps)`.\n\nFor more information on eager loading in GORM, see the [documentation](http://jinzhu.me/gorm/crud.html#preloading-eager-loading).\n\n`GetWithCallSummary` initializes an array of `EndPointWithCallSummary`, and loops through the `EndPoints` objects returned from our database to create `EndPointWithCallSummary` objects. \n\nThese `EndPointWithCallSummary` objects are appended to the initialized array and returned.\n\n\u003e 💡 The `EndPointWithCallSummary` is not a model. It is a collection object and does not need to have a table in our database. This is why it does not have its own file and is not passed to `index.go` for migration.\n\n### Implementing the dashboard and displaying data\n\nNow that we have the dashboard’s route, controller and data for display, we will implement the dashboard view to achieve a simple list display of endpoints and their summary data. \n\nLet’s update `templates/endpoints.html` to have the following code:\n\n```\n    \u003c!-- templates/endpoints.html --\u003e\n    \u003c!DOCTYPE html\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003eEndpoints Monitor Dashboard\u003c/title\u003e\n        \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0-beta.3/css/bootstrap.min.css\" /\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n        \u003cdiv\u003e\n            \u003cnav class=\"navbar navbar-default navbar-static-top\"\u003e\n                \u003cdiv class=\"container\"\u003e\n                    \u003cdiv class=\"navbar-header\"\u003e\n                        \u003ca class=\"navbar-brand\" href=\"http://127.0.0.1:1234/\"\u003e\n                            Goggles - A Real-Time API Monitor\n                        \u003c/a\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/nav\u003e\n            \u003cdiv class=\"container\"\u003e\n                \u003cdiv class=\"row\"\u003e\n                    \u003cdiv class=\"col-xs-12 col-lg-12\"\u003e\n                        \u003cdiv class=\"endpoints list-group\"\u003e\n                            {{#each endpoints}}\n                                \u003ca id=\"endpoint-{{ID}}\" href=\"#\" class=\"list-group-item \n                                list-group-item-{{status_class LastStatus}}\"\u003e\n                                    \u003cstrong\u003e{{name}}\u003c/strong\u003e\n                                    \u003cspan class=\"stats\"\u003e\n                                        {{type}}: \u003cstrong\u003e{{url}}\u003c/strong\u003e |\n                                        Last Status: \u003cspan class=\"last_status\"\u003e\n                                        {{LastStatus}}\u003c/span\u003e |\n                                        Times Called: \u003cspan class=\"times_called\"\u003e\n                                        {{NumRequests}}\u003c/span\u003e |\n                                        Last Request IP: \u003cspan class=\"request_ip\"\u003e\n                                        {{LastRequester}}\u003c/span\u003e\n                                    \u003c/span\u003e\n                                \u003c/a\u003e\n                            {{/each}}\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0-beta.3/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nAbove, we render our endpoints list using [Bootstrap](https://getbootstrap.com/) and our Handlebars template engine. We have also created and used a template function `status_class`, to colour code our list based on their last call status `LastStatus`.\n\nWe define the `status_class` template function in `index.go` after initialising our template engine:\n\n```\n    // index.go\n    \n    // ...\n    \n    func main() {\n        app := iris.New()\n    \n        tmpl := iris.Handlebars(\"./templates\", \".html\")\n    \n        tmpl.AddFunc(\"status_class\", func(status int) string {\n            if status \u003e= 200 \u0026\u0026 status \u003c 300 {\n                return \"success\"\n            } else if status \u003e= 300 \u0026\u0026 status \u003c 400 {\n                return \"warning\"\n            } else if status \u003e= 400 {\n                return \"danger\"\n            }\n            return \"success\"\n        })\n    \n        app.RegisterView(tmpl)\n    }\n```\n\nThen in our view file we call the function as:\n\n``` language-go\n    class=\"list-group-item list-group-item-{{status_class LastStatus}}\"\n```\n\u003e 💡 In the above **LastStatus** is the function’s parameter.\n\n\n## Adding realtime updates to our dashboard\n\nSo far in this article, we have monitored the calls to an API and displayed the data via a dashboard. We will now use [Pusher](http://pusher.com/) to provide realtime data updates to our dashboard.\n\n### Sending realtime data from the backend\nEarlier, we installed the [Pusher Go library](https://github.com/pusher/pusher-http-go), which we will use to trigger an event when an endpoint is called. In the `MoviesController.go` file, where the API requests are handled, we will initialize the Pusher client:\n\n```\n    // MoviesController.go\n    \n    package controllers\n    \n    import (\n        // ...\n        \"github.com/pusher/pusher-http-go\"\n    )\n    \n    // MoviesController - controller object to serve movie data\n    type MoviesController struct {\n        mvc.BaseController\n        Cntx iris.Context\n    }\n    \n    var client = pusher.Client{\n        AppId:   \"app_id\",\n        Key:     \"app_key\",\n        Secret:  \"app_secret\",\n        Cluster: \"app_cluster\",\n    }\n    \n    // ...\n```\nHere, we have initialized the Pusher client using the credentials from our earlier created app.\n\n\u003e ⚠️ Replace `app_id, app_key, app_secret and app_cluster` with your app credentials.\n\nNext, we will use our Pusher client to trigger an event, which would include the endpoint’s data to be displayed in our view. We will do this in the `saveEndpointCall` method, which logs an endpoint and its call:\n\n```\n    // MoviesController.go\n    \n    // ...\n    \n    func (m MoviesController) saveEndpointCall(name string) {\n        endpoint := models.EndPoints{\n            Name: name,\n            URL:  m.Cntx.Path(),\n            Type: m.Cntx.Request().Method,\n        }\n        endpoint = endpoint.SaveOrCreate()\n        endpointCall := endpoint.SaveCall(m.Cntx)\n        endpointWithCallSummary := models.EndPointWithCallSummary{\n            ID:            endpoint.ID,\n            Name:          endpoint.Name,\n            URL:           endpoint.URL,\n            Type:          endpoint.Type,\n            LastStatus:    endpointCall.ResponseCode,\n            NumRequests:   1,\n            LastRequester: endpointCall.RequestIP,\n        }\n        \n        client.Trigger(\"goggles_channel\", \"new_endpoint_request\", endpointWithCallSummary)\n    }\n```\n\nAbove, we create an `EndPointWithCallSummary` object from `EndPoints` (the endpoint) and `EndPointCalls`. This `EndPointWithCallSummary` object has all the data required for display on the dashboard, so will be passed to Pusher for transmission.\n\n### Displaying data in realtime on the dashboard\n\nTo display the realtime updates of our endpoints, we will use the Pusher JavaScript client and jQuery libraries.\n\nIn our view file, `templates/endpoints.html`, we will first import and initialize a Pusher instance using our app’s credentials:\n\n```\n    \u003c!-- endpoints.html --\u003e\n    \u003cscript src=\"//cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0-beta.3/js/bootstrap.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"//js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n      const pusher = new Pusher('app_id', {cluster: \"app_cluster\"});\n    \u003c/script\u003e\n```\n\n\u003e ⚠️ Replace `app_id and app_cluster` with values from your app’s credentials.\n\nNext, we will define the following:\n- The template for adding new endpoints to our view.\n- The functions to append a new endpoint and get the status class of the endpoint.\n\nFinally, we will subscribe to the `goggles_channel` and listen to the `new_endpoint_request` event, where our endpoint updates will be transmitted:\n\n```\n    \u003c!-- endpoints.html --\u003e\n    \u003cscript\u003e\n    // ...\n    \n    const channel = pusher.subscribe(\"goggles_channel\");\n    \n    channel.bind('new_endpoint_request', function(data) {\n        let end_point_id = data.ID;\n        if ( $('#endpoint-' + end_point_id).length \u003e 0 ) {\n            let status_class = getItemStatusClass(data['LastStatus']),\n                endpoint     = $('#endpoint-' + end_point_id);\n            let calls = 1 * endpoint.find('span.times_called').text()\n            endpoint.find('span.last_status').text(data['LastStatus']);\n            endpoint.find('span.times_called').text( (calls + 1) )\n            endpoint.removeClass('list-group-item-success');\n            endpoint.removeClass('list-group-item-danger');\n            endpoint.removeClass('list-group-item-warning');\n            endpoint.addClass('list-group-item-' + status_class);\n        } else {\n            addNewEndPoint(data);\n        }\n    });\n    \n    // ...\n```\n\nIn the `new_endpoint_request` event handler, the endpoint data is categorized into either an update scenario (where the endpoint already exists on the dashboard) or a create scenario (where a new list item is created and appended).\n\nFinally, you can build your application and when you run it you should see something similar to what we have in the preview:\n\n![monitor-api-go-demo](//images.contentful.com/1es3ne0caaid/5neldRoqw86YwmkUAWOCK6/62eaee0a825b4e1bb511a3c22ed07133/monitor-api-go-demo.gif)\n\n## Conclusion\n\nIn this article, we were able to monitor the realtime requests to a REST API and demonstrate how Pusher works with GoLang applications.","metaTitle":"Monitor APIs in realtime using Go","metaDescription":"Discover how you can build your own realtime API monitor using Go and jQuery."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1WEqqnxzxGQq4W6ueiayCg","type":"Entry","createdAt":"2018-02-28T11:46:32.914Z","updatedAt":"2018-02-28T11:46:32.914Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build an activity feed with Flask","url":"activity-feed-flask","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3sixk7zsAoQqqSsUWM8I8y","type":"Entry","createdAt":"2018-02-13T18:06:00.483Z","updatedAt":"2018-02-14T10:08:13.372Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Olayinka Omole","url":"olayinka-omole","email":"olayinka.omole@gmail.com","twitter":"https://twitter.com/olayinkaos","github":"https://github.com/olayinkaos","guestWriter":true}}],"projectRepo":"https://github.com/olayinkaos/flask-realtime-activity-feed","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4KfWHAtURiWQQ6k2A6ueAY","type":"Entry","createdAt":"2018-02-12T14:45:59.264Z","updatedAt":"2018-02-12T14:45:59.264Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Flask","url":"flask","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"52kVPLSXmMoE48GU2umeyO","type":"Entry","createdAt":"2018-02-12T14:53:24.430Z","updatedAt":"2018-02-26T12:31:13.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"HTML","url":"html","type":"language"}}],"reviewDate":"2018-01-24","description":"In this tutorial, we will cover how to build a live blog feed using Flask and HTML.","prerequisite":"A basic understanding of Flask and HTML is needed to follow this tutorial.","content":"A great way to track what users are doing in your application is to visualise their activities in a feed. This would be especially useful when creating a dashboard for your application. \n\nIn this tutorial, I will show you how to build a quick and easy realtime activity feed using Python ([Flask](http://flask.pocoo.org/)), JavaScript and Pusher. We will build a realtime blog, and a feed page which will show user activity from the blog.\n\nHere is what the final app will look like:\n\n![activity-feed-flask-demo](//images.contentful.com/1es3ne0caaid/6DYvqpgeMo8gquI4mYueoA/c929a74adc4ec50b8aacd71c412d334a/activity-feed-flask-demo.gif)\n\n## Prerequisites\n\nTo follow along properly, basic knowledge of Python, Flask and JavaScript (ES6 syntax) is needed. You will also need to install [Python](https://www.python.org/) and [virtualenv](https://virtualenv.pypa.io/en/stable/) locally.\n\n\n\u003e Virtualenv is a tool that helps us create isolated Python environments. This makes it possible for us to install dependencies (like Flask) in an isolated environment, and not pollute our global packages directory. To install virtualenv:\n\n```\n    pip install virtualenv\n```\n\n## Setup and Configuration\n\n### Installing Flask\nAs stated earlier, we will be developing using Flask, a web framework for Python. In this step, we will activate a virtual Python environment and install Flask for use in our project.\n\nTo activate a virtual environment:\n\n```\n    mkdir realtime-feed\n    cd realtime-feed\n    virtualenv .venv\n    source .venv/bin/activate\n```\n\nTo install Flask:\n\n```\n    pip install flask\n```\n\n### Setting up Pusher\nPusher is a service that makes it easy for us to supercharge our web and mobile applications with realtime updates. We will be using it primarily for powering our realtime blog and activity feed. Head over to Pusher.com and [register for a free account](https://pusher.com/signup?plan=sandbox), if you don’t already have one.\n\nNext, create an app on the [dashboard](https://dashboard.pusher.com/) and copy out the app credentials (App ID, Key, Secret and Cluster), as we would be needing these in our app.\n\nNow we can install the Pusher Python library to help our backend communicate with the Pusher service:\n\n```\n    pip install pusher\n```\n\n### File and Folder Structure\nHere is the folder structure for the app. We will only limit it to things necessary so as to avoid bloat:\n\n```\n    ├── realtime-feed\n        ├── app.py\n        └── templates\n            ├── index.html\n            └── feed.html\n```\n\nThe templates folder contains our HTML files, while `app.py` will house all our server-side code. One of the great things about Flask is how it allows you to set up small web projects with minimal code and very few files.\n\n## Building the backend\n\nNext, we will write some code to display our pages and handle requests from our app. We will use Pusher to handle the management of data sent to our backend. We will broadcast events, with corresponding data on a channel, and listen for these events in our app.\n\nLet us start by importing the needed modules and configuring the Pusher object:\n\n```\n    # ./app.py\n    from flask import Flask, render_template, request, jsonify\n    from pusher import Pusher\n    import uuid\n    \n    # create flask app\n    app = Flask(__name__)\n    \n    # configure pusher object\n    pusher = Pusher(\n      app_id='YOUR_APP_ID',\n      key='YOUR_APP_KEY',\n      secret='YOUR_APP_SECRET',\n      cluster='YOUR_APP_CLUSTER',\n      ssl=True\n    )\n```\n\nIn the code above, we initialise the Pusher object with the credentials gotten from the Pusher dashboard. Remember to replace `YOUR_APP_ID` and similar values with the actual values for your own app.\n\nNext we define the different routes in our app for handling requests. Updating `app.py`:\n\n```\n    # ./app.py\n    \n    # index route, shows index.html view\n    @app.route('/')\n    def index():\n      return render_template('index.html')\n    \n    # feed route, shows feed.html view\n    @app.route('/feed')\n    def feed():\n      return render_template('feed.html')\n```\n\nThe first 2 routes defined serve our two app views. The `index` (or home) page which shows the blog, and the `feed` page which shows the activity feed.\n\n\u003e Note: The `render_template()` function renders a template from the template folder.\n\nNow we can define API endpoints for interacting with the blog posts:\n\n```\n    # ./app.py\n    \n    # store post\n    @app.route('/post', methods=['POST'])\n    def addPost():\n      data = {\n        'id': \"post-{}\".format(uuid.uuid4().hex),\n        'title': request.form.get('title'),\n        'content': request.form.get('content'),\n        'status': 'active',\n        'event_name': 'created'\n      }\n      pusher.trigger(\"blog\", \"post-added\", data)\n      return jsonify(data)\n    \n    # deactivate or delete post\n    @app.route('/post/\u003cid\u003e', methods=['PUT','DELETE'])\n    def updatePost(id):\n      data = { 'id': id }\n      if request.method == 'DELETE':\n        data['event_name'] = 'deleted'\n        pusher.trigger(\"blog\", \"post-deleted\", data)\n      else:\n        data['event_name'] = 'deactivated'\n        pusher.trigger(\"blog\", \"post-deactivated\", data)\n      return jsonify(data)\n```\n\nThe endpoints defined above broadcast events for various actions (storing posts, deactivating posts, deleting posts) via Pusher.\n\nWe use the configured `pusher` object for broadcasting events on specific channels. To broadcast an event, we use the `trigger()` method with the following syntax:\n\n```\n    pusher.trigger('a_channel', 'an_event', {'some': 'data'})\n```\n\n\u003e Note: You can find the docs for the Pusher Python library [here](https://github.com/pusher/pusher-http-python).\n\nPusher also grants us the ability to trigger events on various types of channels including Public, Private and Presence channels. Read about them [here](https://pusher.com/docs/client_api_guide/client_channels#channel_types).\n\nFinally, to start the app in debug mode:\n\n```\n    # ./app.py\n    \n    # run Flask app in debug mode\n    app.run(debug=True)\n```\n\nYou can find the full `app.py` file [here](https://github.com/olayinkaos/flask-realtime-activity-feed/blob/master/app.py). In the next step, we will build the views for our app.\n\n## Creating Our App Views\n\n### The blog page\nThis will serve as the homepage, and is where our users will interact with blog posts (creating, deactivating and deleting them). In the `index.html` file:\n\n```\n    \u003c!-- ./templates/index.html --\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n      \u003ctitle\u003eHome!\u003c/title\u003e\n      \u003c!-- import Bulma CSS --\u003e\n      \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.6.0/css/bulma.min.css\"\u003e\n      \u003c!-- custom styles --\u003e\n      \u003cstyle\u003e\n        #post-list .card {\n          margin-bottom: 10px;\n        }\n        #post-list .card.deactivated {\n          opacity: 0.5;\n          cursor: not-allowed;\n        }\n      \u003c/style\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003csection class=\"section\"\u003e\n        \u003cdiv class=\"container\"\u003e\n          \u003ch1 class=\"title\"\u003eRealtime Blog\u003c/h1\u003e\n          \u003cp class=\"subtitle\"\u003eRealtime blog built with \u003cstrong\u003e\u003ca href=\"https://pusher.com\" target=\"_blank\"\u003ePusher\u003c/a\u003e\u003c/strong\u003e!\u003c/p\u003e\n    \n          \u003cdiv class=\"columns\"\u003e\n            \u003cdiv class=\"column\"\u003e\n              \u003cform id=\"post-form\"\u003e\n                \u003cdiv class=\"field\"\u003e\n                  \u003clabel class=\"label\"\u003eTitle\u003c/label\u003e\n                  \u003cdiv class=\"control\"\u003e\n                    \u003cinput name=\"title\" class=\"input\" type=\"text\" placeholder=\"Hello world\"\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n    \n                \u003cdiv class=\"field\"\u003e\n                  \u003clabel class=\"label\"\u003eContent\u003c/label\u003e\n                  \u003cdiv class=\"control\"\u003e\n                    \u003ctextarea class=\"textarea\" name=\"content\" rows=\"10\" cols=\"10\"\u003e\u003c/textarea\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n    \n                \u003cdiv class=\"field\"\u003e\n                  \u003cbutton class=\"button is-primary\"\u003eSubmit\u003c/button\u003e\n                \u003c/div\u003e\n              \u003c/form\u003e\n            \u003c/div\u003e\n    \n            \u003cdiv class=\"column\"\u003e\n              \u003cdiv id=\"post-list\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n    \n          \u003c/div\u003e\n    \n        \u003c/div\u003e\n      \u003c/section\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nThe above code contains the basic markup for the homepage. We imported [Bulma](https://bulma.io/) (a cool CSS framework) to take advantage of some pre-made styles.\n\nNext, we will define some JavaScript functions to handle our app functions and communicate with our backend:\n\n```\n    \u003c!-- ./templates/index.html --\u003e\n      \u003c!-- // ... --\u003e\n      \u003cscript\u003e\n        const form = document.querySelector('#post-form');\n        \n        // makes POST request to store blog post on form submit\n        form.onsubmit = e =\u003e {\n          e.preventDefault();\n          fetch(\"/post\", {\n            method: 'POST',\n            body: new FormData(form)\n          })\n          .then(r =\u003e {\n            form.reset();\n          });\n        }\n    \n        // makes DELETE request to delete a post\n        function deletePost(id) {\n          fetch(`/post/${id}`, { \n            method: 'DELETE'\n          });\n        }\n    \n        // makes PUT request to deactivate a post\n        function deactivatePost(id) {\n          fetch(`/post/${id}`, { \n            method: 'PUT'\n          });\n        }\n    \n        // appends new posts to the list of blog posts on the page\n        function appendToList(data) {\n          const html = `\n            \u003cdiv class=\"card\" id=\"${data.id}\"\u003e\n              \u003cheader class=\"card-header\"\u003e\n                \u003cp class=\"card-header-title\"\u003e${data.title}\u003c/p\u003e\n              \u003c/header\u003e\n              \u003cdiv class=\"card-content\"\u003e\n                \u003cdiv class=\"content\"\u003e\n                  \u003cp\u003e${data.content}\u003c/p\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n              \u003cfooter class=\"card-footer\"\u003e\n                \u003ca href=\"#\" onclick=\"deactivatePost('${data.id}')\" class=\"card-footer-item\"\u003eDeactivate\u003c/a\u003e\n                \u003ca href=\"#\" onclick=\"deletePost('${data.id}')\" class=\"card-footer-item\"\u003eDelete\u003c/a\u003e\n              \u003c/footer\u003e\n            \u003c/div\u003e`;\n          let list = document.querySelector(\"#post-list\")\n          list.innerHTML += html;\n        };\n      \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nWe make use of the JavaScript [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) to make AJAX requests to our backend. While this is great because the API is simple to use, note that it requires a polyfill for older browsers. A great alternative is [axios](https://github.com/axios/axios).\n\nNow that we have established communication with our backend, we can listen for events from Pusher, using the Pusher [JavaScript client library](https://github.com/pusher/pusher-js):\n\n```\n      \u003c!-- ./templates/index.html --\u003e\n      \u003c!-- // ... --\u003e\n      \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n      \u003cscript\u003e\n        // configure pusher\n        const pusher = new Pusher('YOUR_APP_KEY', {\n          cluster: 'YOUR_APP_CLUSTER', // gotten from Pusher app dashboard\n          encrypted: true // optional\n        });\n        // subscribe to `blog` public channel\n        const channel = pusher.subscribe('blog');\n    \n        channel.bind('post-added', data =\u003e {\n          appendToList(data);\n        });\n    \n        channel.bind('post-deleted', data =\u003e {\n          const post = document.querySelector(`#${data.id}`);\n          post.parentNode.removeChild(post);\n        });\n    \n        channel.bind('post-deactivated', data =\u003e {\n          const post = document.querySelector(`#${data.id}`);\n          post.classList.add('deactivated');\n        });\n        \n        // ...\n        \n      \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the code block above, we import the Pusher JavaScript client library, subscribe to the channel (`blog`) on which we’re publishing events from our backend, and listen for those events.\n\nWe `bind` the various events we’re listening for on the channel. The `bind()` method has the following syntax – `channel.bind(event_name, callback_function)`. We’re listening for 3 events on the blog view - `post-added`, `post-deleted` and `post``-deactivated`.\n\nNow that we have finished building the blog page, we can proceed to create the feed page and listen for the same set of events.\n\n### The feed page\n\nFinally we will build a simple page to display the events being triggered from our blog.\nIn the `feed.html` file:\n\n```\n    \u003c!-- ./templates/feed.html --\u003e\n    \u003chtml\u003e\n    \u003chead\u003e\n      \u003ctitle\u003eActivity Feed\u003c/title\u003e\n      \u003clink rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\"\u003e\n      \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.6.0/css/bulma.min.css\"\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n      \u003csection class=\"section\"\u003e\n        \u003cdiv class=\"container\"\u003e\n          \u003ch1 class=\"title\"\u003eBlog Realtime Activity Feed!\u003c/h1\u003e\n          \u003cdiv id=\"events\"\u003e\u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/section\u003e\n    \n      \u003c!-- import Pusher-js library --\u003e\n      \u003cscript src=\"https://js.pusher.com/4.1/pusher.min.js\"\u003e\u003c/script\u003e\n    \n      \u003cscript\u003e\n        // connect to Pusher\n        const pusher = new Pusher('YOUR_APP_KEY', {\n          cluster: 'YOUR_APP_CLUSTER', // gotten from Pusher app dashboard\n          encrypted: true // optional\n        });\n        // subscribe to blog channel\n        const channel = pusher.subscribe('blog');\n    \n        // listen for relevant events\n        channel.bind('post-added', eventHandler);\n        channel.bind('post-deleted', eventHandler);\n        channel.bind('post-deactivated', eventHandler);\n    \n        // handler function to show feed of events\n        function eventHandler (data) {\n          const html = `\n              \u003cdiv class=\"box\"\u003e\n                \u003carticle class=\"media\"\u003e\n                  \u003cdiv class=\"media-content\"\u003e\n                    \u003cdiv class=\"content\"\u003e\n                      \u003cp\u003e\n                        \u003cstrong\u003ePost ${data.event_name}\u003c/strong\u003e\n                        \u003csmall\u003e\n                          \u003ci class=\"fa fa-${ data.event_name == 'created' \n                            ? `plus` \n                            : data.event_name == 'deactivated' ? `ban` : `trash`\n                          }\"\u003e\u003c/i\u003e\n                        \u003c/small\u003e\n                        \u003cbr\u003e\n                        Post with ID [\u003cstrong\u003e${data.id}\u003c/strong\u003e] has been ${data.event_name}\n                      \u003c/p\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                \u003c/article\u003e\n              \u003c/div\u003e`;\n          let list = document.querySelector(\"#events\")\n          list.innerHTML += html;\n        }\n      \u003c/script\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the code above, we define an `eventHandler()` function which acts as callback for all the events we’re listening for. The function simply gets the event which was triggered and lists it as seen in the image below:\n\n![activity-feed-flask-post-created](//images.contentful.com/1es3ne0caaid/4Jxua3RcMgiI4GESKGKw2I/aaeef4fd30c18dd8615e36ebc6a34adb/activity-feed-flask-post-created.png)\n\nAnd that’s it! To run our app:\n\n```\n    python app.py\n```\n\n## Conclusion\n\nIn a few easy steps, we have been able to build both a realtime blog page, and an activity feed to show events happening on the blog — this shows how well Pusher works with Flask for creating quick realtime applications.\n\nThere are many other use cases for adding realtime functionality to Python applications. Do you have any more improvements, suggestions or use cases? Let us know in the comments!","metaTitle":"Build an activity feed with Flask","metaDescription":"Discover how to build amazing social features like a realtime activity feed for a blog using Flask and HTML."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4rGqDofyvusUa4i0CSQ6KE","type":"Entry","createdAt":"2018-02-22T15:02:44.761Z","updatedAt":"2020-06-19T14:29:47.852Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a photo feed using ASP.NET","url":"photo-feed-aspnet","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5KlhqILjZSg4wUSqY4Goqg","type":"Entry","createdAt":"2018-02-20T14:39:32.323Z","updatedAt":"2018-10-02T14:31:36.612Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Samuel Ogundipe","url":"samuel-ogundipe","email":"ayoogundipe2005@gmail.com","twitter":"https://twitter.com/fucked_down","github":"https://github.com/samuelayo","guestWriter":true}}],"projectRepo":"https://github.com/samuelayo/ASP.NET-PHOTO-FEED","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2kVecA2nXe6CSEuigMi4Yq","type":"Entry","createdAt":"2018-02-12T14:46:25.053Z","updatedAt":"2018-02-12T14:46:25.053Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"ASP.NET","url":"asp-net","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1NUYHyE9AsKICMGiIyCA4y","type":"Entry","createdAt":"2018-02-12T14:53:47.651Z","updatedAt":"2018-02-26T12:31:14.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"jQuery","url":"jquery","type":"library"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}}],"reviewDate":"2017-09-28","description":"Build a mini system that allows people to upload their photographs in realtime.","prerequisite":"A basic understanding of C# and JavaScript is needed to follow this tutorial.","content":"We will build a mini system that allows people to upload their images/photographs for everyone to view in realtime. While this can be likened to a mini-Instagram, it is without the comment, like and views aspect. Sounds cool? Let’s ride on.\n\n## Setting up a Pusher account and app\n\nPusher is a hosted service that makes it super-easy to add realtime data and functionality to web and mobile applications.\n\nPusher sits as a realtime layer between your servers and your clients. Pusher maintains persistent connections to the clients - over Websockets if possible and falling back to HTTP-based connectivity - so that as soon as your servers have new data they want to push to the clients they can do so via Pusher.\n\nIf you do not already have one, head over to [Pusher](https://Pusher.com) and create a free account.\nWe will register a new app on the dashboard. The only compulsory options are the app name and cluster. A cluster represents the physical location of the Pusher server that will handle your app’s requests. Also, select `jQuery` as the front-end technology, and `ASP.NET` as the back-end tech for this tutorial.  For other projects, you can choose as per your requirements.\nNext, copy out your App ID, Key, and Secret from the `App Keys` section, as we will need them later on.\n\n![photo-feed-aspnet-create-app](//images.contentful.com/1es3ne0caaid/cCYiSwvQicgakmOOEwSMq/2038fcd7642b17465b331d51bcd502b9/photo-feed-aspnet-create-app.png)\n\n## Setting up the ASP.NET project in Visual Studio\n\nThe next thing we need to do is create a new Asp.Net MVC application. \nTo do so, let’s:\n\n- Open Visual Studio and select new project from the sidebar\n- Under templates, select `Visual C#`\n- Next, select web\n- In the middle section, select `ASP.N``ET MVC Web Applicat``ion`.\n\nFor this tutorial, I named the project: `Real-time-photo-feed`.\nNow we are almost ready. The next step will be to install the official `Pusher` library for .Net using the `NuGet Package`.\n\nTo do this, we go to tools, via the menu on the top bar, click on `NuGet Package Manager`, on the drop-down we select `Package Manager Console`.\n\nWe will see the `Package Manager Console` at the bottom of our Visual Studio. Next, let’s install the package by running:\n\n```\n    Install-Package PusherServer\n```\n\nAlternatively, we can also install the `Pusher` library using the `NuGet Package Manager UI`. To do this, in the `**S**``olution Explorer`, right-click either `References` or a project and select `Manage NuGet Packages`. The Browse tab displays available packages by popularity. Search for the `Pusher` package by typing in `PusherServer` into the search box on the top right. Select the Pusher package to display the package information on the right and to enable the `Install` button.\n\n## Crafting our application\n\nNow that our environment is set up and ready, let’s dive into writing code.\nBy default, Visual Studio creates three controllers for us, however we will use the `HomeController` for the application logic.\nThe first thing we want to do is to define a model that stores the list of images we have in the database.\nUnder the `models` folder, let’s create a file named `PhotoFeed.cs` and add the following content:\n\n```\n    using System;\n    using System.Collections.Generic;\n    using System.ComponentModel.DataAnnotations;\n    using System.Linq;\n    using System.Web;\n    \n    namespace Real_time_photo_feed.Models\n    {\n        public class PhotoFeed\n        {\n            [Key]\n            public int Id { get; set; }\n            [Required]\n            public string Comment { get; set; }\n    \n            public string Imagepath { get; set; }\n    \n        }\n    }\n```\n\nIn the above block of code, we have declared a model called `PhotoFeed` with three main properties:\n\n- Id: This is the primary key of the model table.\n- Comment: The description of the image.\n- Imagepath: The path to the stored image.\n\nNow we have defined our model, let’s reference it in our default database context called `ApplicationDbContext`. To do this, let’s open `models\\IdentityModels.cs` file, then locate the class called `ApplicationDbContext` and add the following after the create function:\n\n```\n    public DbSet\u003cPhotoFeed\u003e FeedModel { get; set; }\n```\n\nIn the code block above, the `DBSet` class represents an entity set used for read, update, and delete operations. The entity which we will use to do CRUD operations is the `PhotoFeed` model we created earlier, and we have given it the name `FeedModel`.\n\n## Connecting our database\n\nAlthough our model is set up, we still need to attach a database to our application. To do so, select the Server Explorer on the left-hand side of our Visual Studio, right click on Data Connections and add a database.\nThere are various databases that are lightweight and can fit into the application we are building, such as:\n- Microsoft access database\n- Sqlite Database\n- MSSQL Server\n- Firebird\n- VistaDb\n\nFor this tutorial, I used the MSSQL Server.\n\n## Creating our index route\n\nNow both our model and database is set to work, let’s go ahead creating our index route. Open the `HomeController` and replace it with the following code:\n\n```\n    using PusherServer;\n    using Real_time_photo_feed.Models;\n    using System;\n    using System.Collections.Generic;\n    using System.IO;\n    using System.Linq;\n    using System.Threading.Tasks;\n    using System.Web;\n    using System.Web.Mvc;\n    \n    namespace Real_time_photo_feed.Controllers\n    {\n        public class HomeController : Controller\n        {\n            ApplicationDbContext db = new ApplicationDbContext();\n            public ActionResult Index()\n            {\n               var me = db.FeedModel.AsQueryable();\n    \n                return View(me);\n            }\n            [HttpPost]\n            public async Task\u003cActionResult\u003e Index(PhotoFeed feed, HttpPostedFileBase upload)\n            {\n    \n                if (ModelState.IsValid)\n                {\n                    if (upload != null \u0026\u0026 upload.ContentLength \u003e 0)\n                    {\n                        var FileName = System.IO.Path.GetFileName(upload.FileName);\n                        var newpath = Path.Combine(HttpContext.Server.MapPath(\"~/UploadedFiles\"), FileName);\n                        upload.SaveAs(newpath);\n                        PhotoFeed setdata = new PhotoFeed();\n                        setdata.Comment = feed.Comment;\n                        setdata.Imagepath = \"/UploadedFiles/\"+FileName;\n                        db.FeedModel.Add(setdata);\n                        db.SaveChanges();\n    \n                        var options = new PusherOptions();\n                        options.Cluster = \"XXX_APP_CLUSTER\";\n                        var pusher = new Pusher(\"XXX_APP_ID\", \"XXX_APP_KEY\", \"XXX_APP_SECRET\", options);\n                        ITriggerResult result = await pusher.TriggerAsync(\"a_channel\", \"an_event\", setdata);\n                    }\n                }\n                    return Content(\"ok\");\n            }\n    \n        }\n    }\n```\n\nIn the code block above, we have defined our Index function for both `GET` and `POST` requests.\nBefore looking at our `GET` and `POST` controller functions, we notice that there is an import of our db context into our class with the line that says:\n\n```\n    ApplicationDbContext db = new ApplicationDbContext();\n```\n\nThis makes it possible to access our database model which we have defined using the `DbSet` class in our `ApplicationDbContext` class.\nIn the `GET` function, we have returned the view with which we will handle the addition and realtime updating of our feed.\n\nNotice that in the `GET` function, we pass a variable into the view function called `me`. This variable is a **queryable** version of our `BlogFeed` model. This will be passed to the view, which is later looped and rendered.\n\nObserve that the `POST` method is set to be asynchronous. This is because the Pusher .NET library uses the await operator to wait for the asynchronous response from the data sent to Pusher.\nIn this function, we first add our new movie to the database, then we trigger an event. Once the event has been emitted, we then return an ok string.\n\nHowever, please note that the code above would not handle any error if the Image was saved in DB but not posted using Pusher. We might need to use a try and catch statement to handle failures in posting to Pusher.\n\n## Creating our view files\n\nLet’s open up our `Views\\Home\\Index.cshtml` and replace the content with the following:\n\n```\n    @model IEnumerable\u003cReal_time_photo_feed.Models.PhotoFeed\u003e\n    \n    @{\n        Layout = null;\n    }\n    \n    \n       \u003chtml\u003e\n    \u003chead\u003e\n        \u003ctitle\u003eASP.NET Photo feed\u003c/title\u003e\n        \u003clink href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"\u003e\n        \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.js\"\u003e\u003c/script\u003e\n        \u003cscript src=\"//js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n    \u003c/head\u003e\n    \u003cbody\u003e\n    \n        \u003cdiv class=\"container\"\u003e\n            \u003cform method=\"post\" enctype=\"multipart/form-data\" action=\"/Home/Index\" onsubmit=\"return feed_it()\"\u003e\n    \n                \u003cdiv class=\"form-group\"\u003e\n                    \u003clabel for=\"usr\"\u003eImage:\u003c/label\u003e\n                    \u003cinput type=\"file\" id=\"upload\" name=\"upload\" class=\"form-control\" required\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                    \u003clabel for=\"pwd\"\u003ecomment:\u003c/label\u003e\n                    \u003cinput type=\"text\" id=\"Comment\" name=\"Comment\" class=\"form-control\" required\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                    \u003cbutton type=\"submit\" class=\"btn btn-success\"\u003eFeed it\u003c/button\u003e\n                \u003c/div\u003e\n            \u003c/form\u003e\n            \u003cdiv class=\"row\" id=\"feeds\"\u003e\n    \n    \n                @foreach (var item in Model)\n                {\n                \u003cspan\u003e\n                    \u003ch2\u003e@item.Comment\u003c/h2\u003e\n                    \u003cimg src=\"@item.Imagepath\"\u003e\n                \u003c/span\u003e\n                }\n    \n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn the above block of code, we have created our form which **comprises** three main elements, which are:\n- Text input for the comment of the image.\n- File input for selecting the image we want to feed.\n- Button to save the new entry into the database.\n\nAlso, note we have included some required libraries such as:\n- Bootstrap CSS\n- jQuery JavaScript library\n- Pusher JavaScript library\n\n## Pusher bindings and jQuery snippet\n\nBelow is our example jQuery snippet used to handle the file upload and Pusher’s realtime updates.\n\n```\n    \u003cscript\u003e\n         var files;\n    \n            // Add events\n            $(document).ready(function() {\n                $('input[type=file]').on('change', prepareUpload);\n            })\n    \n    \n            // Grab the files and set them to our variable\n            function prepareUpload(event) {\n                files = event.target.files;\n            }\n    \n            function feed_it() {\n                var data = new FormData();\n                $.each(files, function(key, value) {\n                    data.append('upload', value);\n                });\n                data.append('Comment', document.getElementById('Comment').value);\n    \n    \n                $.post({\n                    url: '/Home/Index',\n                    data: data,\n                    processData: false, // Don't process the files\n                    contentType: false, // Set content type to false as jQuery will tell the server it's a query string request\n                    success: function(data) {\n                        if (data == \"ok\") {\n                            alert('done');\n                            document.getElementById('Comment').value = '';\n                        }\n                    },\n                    error: function(error) {\n                        alert('an error occured, please try again later')\n                    }\n                });\n                return false;\n            }\n            var pusher = new Pusher(\"XXX_APP_KEY\", {\n    \n                cluster: \"XXX_APP_CLUSTER\"\n            });\n            var my_channel = pusher.subscribe('a_channel');\n            my_channel.bind(\"an_event\", function(doc) {\n    \n                var new_message = `\u003cspan\u003e\n                            \u003ch2\u003e` + doc.Comment + `\u003c/h2\u003e\n                            \u003cimg  src=\"` + doc.Imagepath + `\"\u003e\n                        \u003c/span\u003e`;\n                $('#feeds').prepend(new_message);\n            });\n    \u003c/script\u003e\n```\n\nIn the code block above, we notice we have done two major activities, which are:\n\n**Uploading Image Code**\nTo process the upload of images from the client side to the server, the following steps were followed: \n\n- We attached an event listener to our file input button that stores our image into a variable called `files`.\n- We defined a function called `feed_it` which creates a new `FormData`, then appends our image and description to the form data. This function then makes an `AJAX POST` request to our `index` route.\n\n**Subscribing for Feed Additions on Server from other clients**\nAfter the image has been sent to the server, a request is sent to Pusher to return an event with the new data we have broadcasted. To listen for this realtime events, we have:\n\n- Initialized a Pusher object while passing our app key and cluster.\n- Subscribed to our channel called `a_channel`.\n- Declared a binding to our event called `an_event`. In the callback function of this binding, we have `pre-pended` the new data to our list of feeds.\n\nThat’s it! Now, once a photo gets uploaded, it also gets broadcast and we can listen using our channel to update the feed in realtime.\n\nBelow is an image of what we have built:\n\n![photo-feed-aspnet-demo](//images.contentful.com/1es3ne0caaid/7sdjWIDLSoCswsauwIQMKU/a5d8d3bd6b0efd803223fe042f9b8832/photo-feed-aspnet-demo.gif)\n\n## Conclusion\n\nIn this article, we have covered how to create a realtime photo feed using .NET and Pusher as well as handling file uploads in .NET.\nThe code base to this tutorial is available in a [public Github](https://github.com/samuelayo/ASP.NET-PHOTO-FEED).","metaTitle":"Build a photo feed using ASP.NET","metaDescription":"Build a system that allows people to upload their photographs in realtime, similar to Instagram using ASP.NET, jQuery and realtime features."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4mADBlWvfacEiEm6ga8qQ6","type":"Entry","createdAt":"2018-02-28T10:53:22.724Z","updatedAt":"2018-02-28T10:53:22.724Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a photo feed using Vue.js","url":"photo-feed-vuejs","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5Q1I2HN8pqGKG2wYcCeaO2","type":"Entry","createdAt":"2018-02-12T17:24:27.398Z","updatedAt":"2018-02-14T10:09:48.043Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Christian Nwamba","url":"christian-nwamba","email":"nwambachristian@gmail.com","twitter":"https://twitter.com/codebeast","github":"https://github.com/christiannwamba","guestWriter":true}}],"projectRepo":"https://github.com/christiannwamba/pusher-realtime-upload","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6KUSaq9zVuw0SWMYaWAUQI","type":"Entry","createdAt":"2018-02-12T15:11:33.107Z","updatedAt":"2018-02-26T12:31:11.535Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Social","url":"social","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"2tOJiaXqzKIqosUKm22cMk","type":"Entry","createdAt":"2018-02-12T14:43:50.931Z","updatedAt":"2018-02-12T14:43:50.931Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Vue.js","url":"vue-js","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3WH6Mz2j7iyIaqCeOKIIkQ","type":"Entry","createdAt":"2018-02-12T14:44:51.150Z","updatedAt":"2018-02-12T14:44:51.150Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Node.js","url":"node-js","type":"framework"}}],"reviewDate":"2017-08-03","description":"Build a photo feed with Vue.js, Node.js, Pusher, and Cloudinary.","prerequisite":"A basic understanding of Vue.js and Node.js is needed to follow this tutorial.","content":"When your app offers social sharing features, realtime notifications could be vital.\n\nOne example is Instagram, a popular app for editing and sharing photos and videos with friends \u0026 family. Users get realtime updates as feeds on posts made by their friends and other people they follow on the the platform.\n\nIn this tutorial, we will implement a similar social sharing app using some common developer tools, such as:\n- [Vue](https://vuejs.org): Frontend framework to simplify our DOM interactions.\n- [Node](https://nodejs.org): JavaScript server for handling requests from clients, as well as sending responses\n- [Pusher](https://pusher.com): Free realtime pub/sub service. Pusher makes realtime as easy as using basic events.\n- [Cloudinary](https://cloudinary.com/users/register/free?utm_source=Pusher\u0026utm_medium=Post_1\u0026utm_content=Vue_Image_Upload): End-to-end image management solution that enables storage, manipulation, optimization and delivery.\n\n![photo-feed-vuejs-app-architecture](//images.contentful.com/1es3ne0caaid/1nxyJE7begcQgOuCiUWOMA/6b19851723644cd83ee57ba66fe5ada1/photo-feed-vuejs-app-architecture.png)\n\nOf course, there are other utility tools, like Bootstrap, Express and NeDB, that simplify some time-consuming tasks. We will learn about those while we walk through the demo.\n\nLet's first build a server for the app.\n\n## Setting Up a Node Server\n\nA simple Node server is enough for the task at hand. To create one, run the following init command in an empty directory:\n\n```\n    npm init -y\n```\n\nYou should see a package.json file right in the folder. You can start installing the dependencies needed in the project:\n\n```\n    npm install --save express nedb cors body-parser connect-multiparty pusher cloudinary\n```\n\nThe dependencies help with the following outlined tasks:\n\n\n- [express](http://expressjs.com/): Routing framework for Node\n- [nedb](https://github.com/louischatriot/nedb): Disk database. This is not recommended for a large project, but is good enough to persist data in our demo.\n- [cors](https://github.com/expressjs/cors): Express middleware to enable CORS.\n- [body-parser](https://github.com/expressjs/body-parser): Express middleware that parses the request body and attaches to the express request object.\n- [connect-multiparty](https://github.com/expressjs/connect-multiparty): Just like body-parser, but parses uploaded files\n- [pusher](https://pusher.com/): Pusher SDK\n- [cloudinary](http://cloudinary.com/): Cloudinary SDK\n\nNext step is to import these installed dependencies into the entry JavaScript file. Create a file named `index.js` at the root of the directory and start importing the dependencies:\n\n```\n    // Import dependecies\n    const express = require('express');\n    const multipart = require('connect-multiparty');\n    const bodyParser = require('body-parser')\n    const cloudinary = require('cloudinary');\n    const cors = require('cors');\n    const Datastore = require('nedb');\n    const Pusher = require('pusher');\n    \n    // Create an express app\n    const app = express();\n    // Create a database\n    const db = new Datastore()\n    \n    // Configure middlewares\n    app.use(cors());\n    app.use(bodyParser.urlencoded({ extended: false }))\n    app.use(bodyParser.json())\n    \n    // Setup multiparty\n    const multipartMiddleware = multipart();\n```\n\nNot only have we imported the dependencies, we also configured the Express middleware that was installed.\n\n### Configurations\nWe need to configure Pusher and Cloudinary before actually making use of them. Configuration involves telling the SDKs who or what server should it talk to. This is done by passing it a config object that contains the credentials you retrieve after creating an account. (To learn how to set up both accounts, refer to Appendix 1 and 2 at the end of the article.)\n\n``` language-javascript\n    // Pusher configuration\n    const pusher = new Pusher({\n      appId: process.env.PUSHER_APPID,\n      key: process.env.PUSHER_KEY,\n      secret: process.env.PUSHER_SECRET,\n      encrypted: true,\n      cluster: process.env.PUSHER_CLUSTER\n    });\n    \n    // Cloudinary configuration\n    cloudinary.config({\n        cloud_name: process.env.CL_CLOUD_NAME,\n        api_key: process.env.CL_KEY,\n        api_secret: process.env.CL_SECRET\n    });\n```\n\nIt’s bad practice to hard code credentials in your code, hence we have added them using environmental variables. \n\n### Routes\nTwo routes are needed for the application — one to serve all the gallery images and another to create new gallery images from a request. Here is one for listing images:\n\n```\n    app.get('/', (req, res) =\u003e {\n      db.find({}, function (err, docs) {\n        if(err) {\n          return res.status(500).send(err);\n        }\n        res.json(docs)\n      });\n    })\n```\n\nThis looks for all the items in our database, and if no error was encountered, sends them as a JSON response to the requesting client. If an error was encountered, the error will be sent as a server error (500).\n\nLet’s now see how the images are uploaded, how data is persisted, and how Pusher emits a real time event that a new image was added to the collection:\n\n```\n    app.post('/upload', multipartMiddleware, function(req, res) {\n      // Upload image\n      cloudinary.v2.uploader.upload(\n        req.files.image.path,\n        { /* Transformation if needed */ },\n        function(error, result) {\n          if(error) {\n            return res.status(500).send(error)\n          }\n          // Save record\n          db.insert(Object.assign({}, result, req.body), (err, newDoc) =\u003e {\n            if(err) {\n              return res.status(500).send(err);\n            }\n            // Emit realtime event\n            pusher.trigger('gallery', 'upload', newDoc);\n            res.status(200).json(newDoc)\n          })\n      })\n    });  \n```\n\nWhat’s going on will be better explained as points, so let’s do that:\n\n\n- The middleware, `multipartMiddleware`, was not included in all the routes with `use`. Rather, it was added to the only route that needs it, which is the above `POST /upload` route.\n- We use Cloudinary’s `upload()` method to send the image received to your server. It takes the path to the image being uploaded, a transformation object and the callback function.\n- If the upload was successful, we store the image upload response alongside the request body in our database.\n- After storing the new data, we emit a Pusher `upload` event on the gallery channel. This event has a payload of the newly created item. All subscriptions to this channel’s event will be notified when an image is successfully uploaded.\n\n### Listen and Run\nFinally, in the server, we can bind to a port:\n\n```\n    app.listen(process.env.PORT || 5000, () =\u003e console.log('Running...'))\n```\n\nThis uses the port provided in the environmental variable. If none, it sticks to port 5000.\n\nYou can start running the server with:\n\n```\n    node index.js\n```\n\n## Setting up Vue.js\n\nVue is the framework that powers our client app. With a  server running, we can now implement a client that communicates with this server via HTTP requests and Pusher events.\n\nStart with initializing a Vue project using the Vue CLI:\n\n\n```\n    ## Install Vue CLI\n    npm install -g vue-cli\n    \n    ## Scafold a project. Syntax: vue init \u003ctemplate\u003e \u003cname\u003e\n    vue init webpack-simple gallery-client\n```\n\nNext, install dependencies:\n\n```\n    npm install --save axios vodal pusher-js cloudinary-core\n```\n\n- [axios](https://github.com/mzabriskie/axios): This is a HTTP library that simplifies how we make Ajax requests by enabling us to use promises to handle async.\n- [vodal](https://github.com/chenjiahan/vodal): Vue widget for dialog boxes\n- [pusher-js](https://github.com/pusher/pusher-js): Pusher client SDK\n- [cloudinary-core](https://github.com/cloudinary/pkg-cloudinary-core): Cloudinary client SDK\n\n## Gallery items list\n\nWe need to display a list of existing images in the gallery at start up. Therefore, when the app is launched, the user should be presented with a list of all the images available. To achieve this, in the `App.vue` (the entry component) `created` lifecycle method, make a request for all the images using axios:\n\n```\n    \u003cscript\u003e\n    // ./App.vue\n    import axios from 'axios';\n    import cloudinary from 'cloudinary-core'\n    \n    export default {\n      name: 'app',\n      data () {\n        return {\n          images: [],\n          cl: null,\n          spin: false\n        }\n      },\n      created() {\n        this.spin = true\n        this.cl = new cloudinary.Cloudinary({cloud_name: '\u003cCLOUD_NAME\u003e', secure: true})\n        axios.get('http://localhost:5000')\n          .then(({data}) =\u003e {\n            this.spin = false\n            this.images = data.map(image =\u003e {\n              image.url = this.cl.url(image.public_id, {width: 500, height: 400, crop: \"fill\"})\n              return image;\n            });\n          })\n      },\n      methods: {\n        // Coming soon\n      }\n    }\n    \u003c/script\u003e\n```\n\nWhen the images are fetched, we transform them by manipulating the dimensions (width and height) to fit our design idea. The transformed data is then bound to the view by setting it as the value of the `images` property :\n\n```\n    \u003ctemplate\u003e\n     \u003c!-- ./App.vue --\u003e\n      \u003cdiv id=\"app\"\u003e\n        \u003cdiv class=\"container\"\u003e\n          \u003ch3 class=\"text-center\"\u003eRealtime Gallery \u003cbutton class=\"btn btn-info\" @click=\"showModal\"\u003e\u003cspan class=\"glyphicon glyphicon-upload\"\u003e\u003c/span\u003e\u003c/button\u003e\u003c/h3\u003e\n          \u003cgallery-list :images=\"images\"\u003e\u003c/gallery-list\u003e\n        \u003c/div\u003e\n        \u003cspan v-show=\"spin\" class=\"glyphicon glyphicon-repeat fast-right-spinner\"\u003e\u003c/span\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n```\n\nThere is also a `spin` boolean property that determines if a loading spinner should be shown or not. Soon, we will implement the `showModal` method that is called when the upload button is clicked.\n\nRather than having native elements all over in the `App`'s template, we have a created an abstraction. The `gallery-list` element is used and is passed the list of images. For it to work, you need to create, import and declare the `GalleryList` component in App.\n\nFirst, import and declare it:\n\n```\n    \u003cscript\u003e\n    // ./App.vue\n    import GalleryList from './GalleryList.vue'\n    //...\n    export default {\n      components: {\n        'gallery-list': GalleryList\n      }\n    }\n    \u003c/script\u003e\n```\n\nThen create the component:\n\n```\n    \u003c!-- ./GalleryList.vue --\u003e\n    \u003ctemplate\u003e\n      \u003cdiv\u003e\n        \u003cdiv class=\"row\" v-for=\"i in Math.ceil(images.length / 3)\" :key=\"i\"\u003e\n          \u003cdiv class=\"col-md-4\" v-for=\"image in images.slice((i - 1) * 3, i * 3)\" :key=\"image._id\"\u003e\n            \u003cgallery-item :image=\"image\"\u003e\n            \u003c/gallery-item\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \u003cscript\u003e\n    import GalleryItem from './GalleryItem.vue'\n    export default {\n      props: ['images'],\n      components: {\n        'gallery-item': GalleryItem\n      }\n    }\n    \u003c/script\u003e\n```   \n\nThe component receives `images` sent from the parent `App` component via `props`. We then iterate over the images and display each of them with another component called `gallery-item`:\n\n```\n    \u003ctemplate\u003e\n      \u003cdiv class=\"card\"\u003e\n        \u003ch4 class=\"card-title\"\u003e{{image.title}}\u003c/h4\u003e\n        \u003cdiv class=\"card-image\"\u003e\n          \u003cimg :src=\"image.url\" class=\"img-responsive\"/\u003e\n        \u003c/div\u003e \n        \u003cp class=\"card-description\"\u003e{{image.description}}\u003c/p\u003e \n      \u003c/div\u003e\n    \u003c/template\u003e\n    \u003cscript\u003e\n    export default {\n      props: ['image']\n    }\n    \u003c/script\u003e\n```\n\nWith existing images (which I assume you don’t have yet), you should see the following at `localhost:8080` when you run the app with `npm run dev`:\n\n![photo-feed-vuejs-web](//images.contentful.com/1es3ne0caaid/5C5mHW4NOggKye6A4KqGgW/5dbd22f40fca53639a2232aa4ae92f9d/photo-feed-vuejs-web.png)\n\n## Gallery image upload\n\nNow that we have a list of images to show, the next question is how they came to exist. We have to upload them to the server. Fortunately, the server already made provision for that so all we have left to do is implement the upload logic.\n\nLet’s start by creating an `Upload` component which contains a form for the upload:\n\n```\n    \u003ctemplate\u003e\n      \u003cdiv class=\"upload\"\u003e\n        \u003cform @submit.prevent=\"handleSubmit\" enctype=\"multipart/form-data\"\u003e\n          \u003cdiv class=\"form-group\"\u003e\n            \u003clabel\u003eTitle\u003c/label\u003e\n            \u003cinput type=\"text\" class=\"form-control\" v-model=\"model.title\" /\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"form-group\"\u003e\n            \u003clabel\u003eImage\u003c/label\u003e\n            \u003cinput type=\"file\" class=\"form-control\" @change=\"handleUpload($event.target.files)\" /\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"form-group\"\u003e\n            \u003clabel\u003eDescription\u003c/label\u003e\n            \u003ctextarea row=\"5\" class=\"form-control\" v-model=\"model.description\"\u003e\u003c/textarea\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"form-group\"\u003e\n            \u003cbutton class=\"btn btn-info\"\u003eSubmit\u003c/button\u003e\n          \u003c/div\u003e\n        \u003c/form\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \u003cscript\u003e\n    export default {\n      data() {\n        return {\n          model: {\n            title: '',\n            description: '',\n            imageFile: null\n          }\n        }\n      },\n      methods: {\n        handleSubmit() {\n          this.$emit('submit', this.model)\n        },\n        handleUpload(files) {\n          this.model.imageFile = files[0];\n        }\n      }\n    }\n    \u003c/script\u003e\n```\n\nThe form contains a title (text), description (text area) and file inputs. These controls are tracked by the `model` property, which is updated when the values change. `title` and `description` are automatic but `imageFile` is not because it’s read only. Therefore, we have to manually update the model by calling `handleUpload` every time the file control value changes.\n\nWhen the form is submitted, we need to call `handleSubmit`, which triggers an event that will be handled in the parent component (`App`). Let’s have a look how `App` handles this:\n\n\n```\n    \u003ctemplate\u003e\n      \u003cdiv id=\"app\"\u003e\n        \u003cdiv class=\"container\"\u003e\n          \u003ch3 class=\"text-center\"\u003eRealtime Gallery \u003cbutton class=\"btn btn-info\" @click=\"showModal\"\u003e\u003cspan class=\"glyphicon glyphicon-upload\"\u003e\u003c/span\u003e\u003c/button\u003e\u003c/h3\u003e\n          \u003cvodal :show=\"show\" animation=\"zoom\" @hide=\"show = false\"\u003e\n            \u003cupload @submit=\"handleSubmit\"\u003e\u003c/upload\u003e\n          \u003c/vodal\u003e\n          \u003cgallery-list :images=\"images\"\u003e\u003c/gallery-list\u003e\n        \u003c/div\u003e\n        \u003cspan v-show=\"spin\" class=\"glyphicon glyphicon-repeat fast-right-spinner\"\u003e\u003c/span\u003e\n      \u003c/div\u003e\n    \u003c/template\u003e\n    \u003cscript\u003e\n    import Upload from './Upload.vue'\n    import GalleryList from './GalleryList.vue'\n    import axios from 'axios';\n    import cloudinary from 'cloudinary-core'\n    var Pusher = require('pusher-js');\n    export default {\n      name: 'app',\n      data () {\n        return {\n          images: [],\n          show: false,\n          cl: null,\n          spin: false\n        }\n      },\n      created() {\n        // truncated\n      },\n      methods: {\n        showModal() {\n          this.show = true\n        },\n        handleSubmit(model) {\n          this.show = false;\n          this.spin = true\n          const formData = new FormData()\n          formData.append('image', model.imageFile);\n          formData.append('title', model.title);\n          formData.append('description', model.description);\n          \n          axios.post('http://localhost:5000/upload', formData)\n          .then(({data}) =\u003e {\n            this.spin = false\n          })\n        }\n      },\n      components: {\n        'gallery-list': GalleryList,\n        'upload': Upload\n      }\n    }\n    \u003c/script\u003e\n```\n\nBecause of the way we added `GalleryList`, the `Upload` container is imported and included in the list of components. The dialog plugin, `vodal` is used to only show the form as a dialog when the upload button beside the header is clicked. This is possible by toggling `show`.\n\nNotice how the upload component handles the emitted submit event:\n\n```\n    \u003cupload @submit=\"handleSubmit\"\u003e\u003c/upload\u003e\n```\n\nIt calls `handleSubmit` on the containing (parent) component, which uploads the image with axios, hides the model and uses a loading spinner to tell us the status of the upload.\n\nThe `vodal` plugin needs to be imported and configured for it to work. You can do this in the `./main.js` file:\n\n```\n    import Vodal from 'vodal';\n    Vue.component(Vodal.name, Vodal);\n```\n\nNow you can run the app again (if you stopped it), and try to upload an image:\n\nWhen you upload an image, you won’t see any UI updates unless you refresh the browser. Let’s implement realtime updates to make UI updates happen.\n\n## Realtime updates\n\nWe already have the upload feature fleshed out but we need to let the users know their upload was successful. The server is already triggering an event, all we need do is listen to this event and prepend incoming payload to the existing list of images:\n\n```\n    \u003cscript\u003e\n    import Upload from './Upload.vue'\n    import GalleryList from './GalleryList.vue'\n    import axios from 'axios';\n    import cloudinary from 'cloudinary-core'\n    var Pusher = require('pusher-js');\n    export default {\n      name: 'app',\n      data () {\n        return {\n          images: [],\n          show: false,\n          cl: null,\n          spin: false\n        }\n      },\n      created() {\n        this.spin = true;\n        var pusher = new Pusher('\u003cAPP_ID\u003e', {\n          encrypted: true,\n          cluster: 'CLUSTER'\n        });\n        var channel = pusher.subscribe('gallery');\n        channel.bind('upload', (data) =\u003e {\n          data.url = this.cl.url(data.public_id, {width: 500, height: 400, crop: \"fill\"})\n          this.images.unshift(data)\n        });\n        // Truncated...\n      },\n      methods: {\n        // Truncated...\n      },\n    }\n    \u003c/script\u003e\n```\n\nWe bind to the `upload` event, which we created on the `gallery` channel, then add the new image that comes into the existing array of images. You can now see image upload and UI updates happen in real time:\n\n\n![photo-feed-vuejs-demo](//images.contentful.com/1es3ne0caaid/49dCViSXss2kg8E4aosKaw/94b0ab167fd7e3a08e913a7cd9752384/photo-feed-vuejs-demo.gif)\n\n\n## Conclusion\n\nAt this point, if you have followed the article, you can stop wondering how realtime image sharing apps work and start building one for yourself.\n\n\n## Appendix 1: Pusher Setup\n\n- [Sign up](https://dashboard.pusher.com/accounts/sign_in) for a free Pusher account\n\n![photo-feed-vuejs-signup](//images.contentful.com/1es3ne0caaid/6Gi9ARqH3UUM8ICUCIcUOY/5a5946ac652e92bd44b7319530ce0a33/photo-feed-vuejs-signup.png)\n\n- Create a new app by selecting **Apps** on the sidebar and clicking **Create New** button on the bottom of the sidebar:\n\n![photo-feed-vuejs-dashboard](//images.contentful.com/1es3ne0caaid/4fY7jsiReweMeewMimsusk/93525dc8f20aee19f5d795535fac5dd7/photo-feed-vuejs-dashboard.png)\n\n- Configure an app by providing basic information requested in the form presented. You can also choose the environment you intend to integrate Pusher with for a better setup experience:\n\n![photo-feed-vuejs-create-app](//images.contentful.com/1es3ne0caaid/tK8YSwICMCMGaEEgOk4gy/5ee05bbd1bb97dfccad69e3aa9100123/photo-feed-vuejs-create-app.png)\n\n- You can retrieve your keys from the **App Keys** tab\n\n![photo-feed-vuejs-app-keys](//images.contentful.com/1es3ne0caaid/2jCymWqEewG0ccEO0gayc4/27a94a00c34fc4bfec9d0e1ce7684d9b/photo-feed-vuejs-app-keys.png)\n\n## Appendix 2: Cloudinary Setup\n\n- [Sign up](https://cloudinary.com/users/register/free?utm_source=Pusher\u0026utm_medium=Post_1\u0026utm_content=Vue_Image_Upload) on Cloudinary for a free account:\n\n![photo-feed-vuejs-cloudinary-signup](//images.contentful.com/1es3ne0caaid/4Y5EVO2XZY2eaUMAAkUmyU/612c6f3895fa8befe394841eee5a0476/photo-feed-vuejs-cloudinary-signup.png)\n\n- When you sign up successfully, you're presented with a dashboard that holds your cloud credentials. You can safely store them for future use:\n\n![photo-feed-vuejs-cloudinary-app-keys](//images.contentful.com/1es3ne0caaid/3uXTzrXraUc8sigywuW2mQ/cb75f306d85057906e37722367e77d1f/photo-feed-vuejs-cloudinary-app-keys.png)","metaTitle":"Build a photo feed using Vue.js","metaDescription":"In this tutorial you'll learn how to build an app for editing and sharing photos: you'll use Vue.js in the front-end and Node.js in the back-end, Pusher to add realtime features, and Cloudinary for end-to-end image management."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"237QVdC5tG4CaicAkK6MIE","type":"Entry","createdAt":"2018-02-22T15:02:43.991Z","updatedAt":"2018-03-07T16:22:57.265Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":4,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a photo feed using Django","url":"photo-feed-django","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"5KlhqILjZSg4wUSqY4Goqg","type":"Entry","createdAt":"2018-02-20T14:39:32.323Z","updatedAt":"2018-10-02T14:31:36.612Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Samuel Ogundipe","url":"samuel-ogundipe","email":"ayoogundipe2005@gmail.com","twitter":"https://twitter.com/fucked_down","github":"https://github.com/samuelayo","guestWriter":true}}],"projectRepo":"https://github.com/samuelayo/pusher_django_photo_feed","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"48AytLnko0OKAqMQU2Si8W","type":"Entry","createdAt":"2018-02-12T14:45:47.821Z","updatedAt":"2018-02-12T14:45:47.821Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Django","url":"django","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"uGIU8YRFv2icaWKKwW4GQ","type":"Entry","createdAt":"2018-01-26T11:40:16.226Z","updatedAt":"2018-02-12T14:41:04.134Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"JavaScript","url":"javascript","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1NUYHyE9AsKICMGiIyCA4y","type":"Entry","createdAt":"2018-02-12T14:53:47.651Z","updatedAt":"2018-02-26T12:31:14.063Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"jQuery","url":"jquery","type":"library"}}],"reviewDate":"2017-06-21","description":"Learn how to build a photo feed using Django and create your own Instagram feed","prerequisite":"A basic understanding of Python and JavaScript is needed to follow this tutorial.","content":"Today, we will make a photo feed using Django and Pusher. This is like a mini Instagram, but without the comments and filter functionality.\n\n## Setting up Django\n\nFirst, we need to install the Django library if we don't already have it.\nTo install Django, we run:\n\n```\n    pip install django\n```\n\nAfter installing Django, it’s time to create our project. \nOpen up a terminal and create a new project using the following command:\n\n```\n    django-admin startproject photofeed\n```\n\nIn the above command, we created a new project called `photofeed`. The next step will be to create an app inside our new project. To do that, let’s run the following commands:\n\n```\n    //change directory into the pusher_message directory\n    cd photofeed\n    //create a new app where all our logic would live\n    django-admin startapp feed\n```\n\nOnce we’re done setting up the new app, Django needs to know about our new application.\nTo do this, we will go into our `feed\\settings.py` and add the message app to our installed apps as seen below:\n\n```\n    INSTALLED_APPS = [\n        'django.contrib.admin',\n        'django.contrib.auth',\n        'django.contrib.contenttypes',\n        'django.contrib.sessions',\n        'django.contrib.messages',\n        'django.contrib.staticfiles',\n        'feed'\n    ]\n```\n\nAfter doing the above, it’s time to run the application and see if all went well.\nIn our terminal shell, we run:\n\n```\n    python manage.py runserver\n```\n\nIf we navigate our browser to `http://localhost:8000`, we should see the following:\n\n![photo-feed-django-django-confirmation](//images.contentful.com/1es3ne0caaid/3j2jyrFvfq2CEkaqikKEmO/1e08235e41543d4a50e484d6dcf9845f/photo-feed-django-django-confirmation.png)\n\n## Set up an app on Pusher\n\nAt this point, Django is ready and set up. We need to set up Pusher next, as well as grab our app credentials.\nIf you haven’t already, sign up to a free [Pusher](https://pusher.com/signup) account and create a new app, then copy your secret, application key and application id.\n\n![photo-feed-django-create-app](//images.contentful.com/1es3ne0caaid/5JNrQoamWI8u4m6AyMQCOU/92a7613c8f34936f5e2a356f03700a5e/photo-feed-django-create-app.png)\n\nThe next step is to install the required libraries:\n\n```\n    pip install pusher\n```\n\nIn the above bash command, we installed one package, Pusher.\n- Pusher: This is the official Pusher library for Python. We will be using this library to trigger and send our messages to the Pusher HTTP API\n\n## Creating our application\n\nFirst, let us create a model class, which will generate our database structure.\nLet's open up `feed\\models.py` and replace with the following:\n\n```\n    from django.db import models\n    \n    # Create your models here.\n    class Feed(models.Model):\n        description = models.CharField(max_length=255, blank=True)\n        document = models.FileField(upload_to='static/documents/')\n```\n\nIn the above block of code, we defined a model called `Feed`. The Feed table will consist of the following fields:\n\n- A field to store the description of the photo\n- A field to store the photo\n\nIn the above code, while declaring our document field, we have included an `upload_to` attribute, which we set to `static/documents`. Please note that this path is relative to the path of the `DJANGO MEDIA ROOT`, which we will set now.\nWhile in this article, we will be setting the `MEDIA_ROOT` to the static folder in our `feed` app, so it can get served as a static file. To do that, let us move to our `photofeed/settings.py` and add the code below to our file, immediately after the `STATIC_URL` declaration.\n\n```\n    MEDIA_ROOT = os.path.join(BASE_DIR, 'feed/')\n```\n\n### Running migrations\nWe need to make migrations and run them, so our database table can get created. To do that, let us run the following in our terminal:\n\n```\n    python manage.py makemigrations\n    \n    python manage.py migrate\n```\n\n### Creating our views\nOur views refer to the file/files that hold up the logic behind the application, often referred to as the `Controller`.\nLet us open up our `views.py` in our `feed` folder and replace with the following:\n\n```\n    from django.shortcuts import render, HttpResponse\n    from django.http import JsonResponse\n    from .forms import *\n    from pusher import Pusher\n    import json\n    \n    #instantiate pusher\n    pusher = Pusher(app_id=u'XXX_APP_ID', key=u'XXX_APP_KEY', secret=u'XXX_APP_SECRET', cluster=u'XXX_APP_CLUSTER')\n    # Create your views here.\n    # function that serves the welcome page\n    def index(request):\n        # get all current photos ordered by the latest\n        all_documents = Feed.objects.all().order_by('-id')\n        # return the index.html template, passing in all the feeds\n        return render(request, 'index.html', {'all_documents': all_documents})\n    \n    #function that authenticates the private channel \n    def pusher_authentication(request):\n        channel = request.GET.get('channel_name', None)\n        socket_id = request.GET.get('socket_id', None)\n        auth = pusher.authenticate(\n          channel = channel,\n          socket_id = socket_id\n        )\n     \n        return JsonResponse(json.dumps(auth), safe=False)\n    #function that triggers the pusher request\n    def push_feed(request):\n        # check if the method is post\n        if request.method == 'POST':\n            # try form validation\n            form = DocumentForm(request.POST, request.FILES)\n            if form.is_valid():\n                f = form.save()\n                # trigger a pusher request after saving the new feed element \n                pusher.trigger(u'a_channel', u'an_event', {u'description': f.description, u'document': f.document.url})\n                return HttpResponse('ok')\n            else:\n                # return a form not valid error\n                return HttpResponse('form not valid')\n        else:\n           # return error, type isnt post\n           return HttpResponse('error, please try again')\n```\n\nIn the code above, we have defined two main functions which are:\n\n- index\n- pusher_authentication_\n- push_feed\n\nIn the `index` function, we fetch all the available photos in the database. The photos are then rendered in the view. This enables a new user to see all previous feeds that are available. \nIn the `pusher_authentication` function, we verify that the current user can access our private channel.\nIn the `push_feed` function, we check if it is a POST request, then we try validating our form before saving it into the database. (The form used in this method named `DocumentForm` is not available yet. We will be creating it soon.) After the form validation, we then place our call to the Pusher library for realtime interaction.\n\n### Creating the form class\nA Django Form handles taking user input, validating it, and turning it into Python objects. They also have some handy rendering methods.\nLet us create a file called `forms.py` in our `feed` folder and add the following content to it:\n\n```\n    from django import forms\n    from .models import Feed\n    \n    class DocumentForm(forms.ModelForm):\n        class Meta:\n            model = Feed\n            fields = ('description', 'document', )\n```\n\nIn the above code block, we have imported our Feed model and used it to create a form. This form will now handle the validation and upload of images to the right folder.\n\n### Populating the urls.py\nLet us open up our `photofeed\\urls.py` file and replace with the following:\n\n```\n    \"\"\"photofeed URL Configuration\n    \n    The `urlpatterns` list routes URLs to views. For more information please see:\n        https://docs.djangoproject.com/en/1.11/topics/http/urls/\n    Examples:\n    Function views\n        1. Add an import:  from my_app import views\n        2. Add a URL to urlpatterns:  url(r'^$', views.home, name='home')\n    Class-based views\n        1. Add an import:  from other_app.views import Home\n        2. Add a URL to urlpatterns:  url(r'^$', Home.as_view(), name='home')\n    Including another URLconf\n        1. Import the include() function: from django.conf.urls import url, include\n        2. Add a URL to urlpatterns:  url(r'^blog/', include('blog.urls'))\n    \"\"\"\n    from django.conf.urls import url\n    from django.contrib import admin\n    from feed.views import * \n    \n    urlpatterns = [\n        url(r'^$', index),\n        url(r'^push_feed$', push_feed),\n        url(r'^pusher_authentication', pusher_authentication),\n        url(r'^admin/', admin.site.urls),\n    ]\n```\n\nWhat has changed in this file? We have added 2 new routes to the file. \nWe have defined the entry point, and have assigned it to our `index` function. We also defined the push_feed URL and assigned it to our `push_feed` function. This will be responsible for pushing updates to Pusher in realtime. Finally, the `pusher_authentication` endpoint, which handles the authentication of our private channel.\n\n### Creating the HTML files\nNow we need to create the index.html file which we have referenced as the template for our index function.\n\n- index.html\n\nLet us create a new folder in our `feed` folder called `templates`.\nNext, we create a file called `index.html` in our `templates` folder and replace it with the code below:\n\n```\n    \u003chtml\u003e\n        \u003chead\u003e\n            \u003ctitle\u003eDjango Photo feed\u003c/title\u003e\n            \u003clink href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"\u003e\n            \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.js\"\u003e\u003c/script\u003e\n            \u003cscript src=\"//js.pusher.com/4.0/pusher.min.js\"\u003e\u003c/script\u003e\n        \u003c/head\u003e\n        \u003cbody\u003e\n    \n            \u003cdiv class=\"container\"\u003e\n                \u003cform  method=\"post\" enctype=\"multipart/form-data\" action=\"/push_feed\" onsubmit=\"return feed_it()\"\u003e\n                \u003cinput type=\"hidden\" id=\"csrf\" name=\"csrf\" value=\"{{ csrf_token }}\"/\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"usr\"\u003eImage:\u003c/label\u003e\n                        \u003cinput type=\"file\" id=\"document\" name=\"document\" class=\"form-control\"  required\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003clabel for=\"pwd\"\u003ecomment:\u003c/label\u003e\n                        \u003cinput type=\"text\" id=\"description\" name=\"description\"  class=\"form-control\"  required\u003e\n                    \u003c/div\u003e\n                    \u003cdiv class=\"form-group\"\u003e\n                        \u003cbutton type=\"submit\" class=\"btn btn-success\"\u003eFeed it\u003c/button\u003e\n                    \u003c/div\u003e\n                \u003c/form\u003e\n                \u003cdiv class=\"row\" id=\"feeds\"\u003e\n                    {% for doc in all_documents  %}\n                    \u003cspan\u003e\n                        \u003ch2\u003e{{doc.description}}\u003c/h2\u003e\n                        \u003cimg  src=\"{{doc.document}}\"\u003e\n                    \u003c/span\u003e\n                    {% endfor %}\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/body\u003e\n    \u003c/html\u003e\n```\n\nIn this HTML snippet, note that we have included some required libraries such as:\n\n- Bootstrap CSS\n- jQuery JavaScript library\n- Pusher JavaScript library\n\n### Pusher bindings and jQuery snippet\nThat’s it! Now, once a photo gets uploaded, it also gets broadcast and we can listen using our channel to update the feed in realtime.\nBelow is our example jQuery snippet used to handle the file upload as well as Pusher's realtime updates.\n\n```\n    \u003cscript\u003e\n     var files;\n    \n        // Add events\n        $(document).ready(function() {\n            $('input[type=file]').on('change', prepareUpload);\n        })\n    \n    \n        // Grab the files and set them to our variable\n        function prepareUpload(event) {\n            files = event.target.files;\n        }\n    \n        function feed_it() {\n            var data = new FormData();\n            $.each(files, function(key, value) {\n                data.append('document', value);\n            });\n            data.append('description', document.getElementById('description').value);\n    \n            data.append('csrfmiddlewaretoken', document.getElementById('csrf').value);\n            $.post({\n                url: '/push_feed',\n                data: data,\n                processData: false, // Don't process the files\n                contentType: false, // Set content type to false as jQuery will tell the server it's a query string request\n                success: function(data) {\n                    if (data == \"ok\") {\n                        alert('done');\n                        document.getElementById('description').value = '';\n                    }\n                },\n                error: function(error) {\n                    alert('an error occured, please try again later')\n                }\n            });\n            return false;\n        }\n        var pusher = new Pusher('XXX_APP_KEY', {\n            encrypted: true,\n            cluster: 'XXX_APP_CLUSTER',\n            authTransport: 'jsonp',\n            authEndpoint: '/pusher_authentication'\n        });\n        var my_channel = pusher.subscribe('private-a_channel');\n        my_channel.bind(\"an_event\", function(doc) {\n            alert(\"message\");\n            var new_message = `\u003cspan\u003e\n                        \u003ch2\u003e` + doc.description + `\u003c/h2\u003e\n                        \u003cimg  src=\"` + doc.document + `\"\u003e\n                    \u003c/span\u003e`;\n            $('#feeds').prepend(new_message);\n        });\n    \u003c/script\u003e\n```\n\nBelow is an image of what we have built:\n\n![photo-feed-django-demo](//images.contentful.com/1es3ne0caaid/6QkrHv8cakWO0i8QEqkGMQ/d07c08b836918e7bdb4713f5d0384c26/photo-feed-django-demo.gif)\n\n## Conclusion\n\nIn this article, we have covered how to create a realtime photo feed using Django and Pusher as well as passing CSRF tokens in AJAX request using Django.","metaTitle":"Build a photo feed using Django","metaDescription":"Build your own realtime photo feed similar to an Instagram feed using Django, jQuery, and Pusher."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1l0hfd7qAAWMI028uqYAsy","type":"Entry","createdAt":"2018-02-28T14:56:05.584Z","updatedAt":"2018-02-28T14:56:05.584Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a photo feed using Angular","url":"photo-feed-angular","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6hNNk2LcVUYo8sQGKaISEc","type":"Entry","createdAt":"2018-02-16T15:14:51.094Z","updatedAt":"2018-02-16T15:14:51.094Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Kirils Ladovs","url":"kirils-ladovs","email":"kirilsladovs@gmail.com","twitter":"https://twitter.com/kirjai","github":"https://github.com/kirjai","guestWriter":true}}],"projectRepo":"https://github.com/kirjai/pusher-photo-feed","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1SM1spRqTeua46Ew0W6UwC","type":"Entry","createdAt":"2018-02-12T14:40:52.995Z","updatedAt":"2018-02-12T14:40:52.995Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Angular","url":"angular","type":"framework"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1gcZ0mVsoeagKg0G0MOEgy","type":"Entry","createdAt":"2018-02-12T14:51:28.935Z","updatedAt":"2018-02-26T12:31:14.813Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"TypeScript","url":"typescript","type":"language"}}],"reviewDate":"2017-05-24","description":"Build a photo feed that will display any images it receives in realtime.","prerequisite":"A basic understanding of TypeScript is needed to follow this tutorial.","content":"In this tutorial, we will build a simple web app that will display any images it receives using Pusher. More specifically, to build this realtime photo feed we will use the [Pusher Realtime Reddit API](https://blog.pusher.com/pusher-realtime-reddit-api/) to subscribe to new post in a specific subreddit and in realtime display each new post's image. Let's start by scaffolding our Angular web app.\n\n## Angular application scaffolding\n\nWe will be using [Angular CLI](https://github.com/angular/angular-cli), a command line tool maintained by Angular, to initialize our application.\n\nFirst, you need to install Angular CLI globally on your machine. You can follow the [official installation instructions](https://github.com/angular/angular-cli#installation) on how to do that. Once you have installed Angular CLI, it is time to scaffold your application.\n\nNavigate to a local directory where you want your application code to live, and within that directory, let's run a CLI command to generate a new Angular application.\n\n``` \n$ ng new photo-feed --skip-tests\n```\n\n\u003e In the command above, `photo-feed` is the name of the app we are creating (feel free to use whatever name you like). Most CLI commands come with multiple flags and options, like `--skip-tests` above, which tells CLI not to create any test files for our application. You can type `$ ng help` to see what other options are there.\n\nOnce CLI is done generating files and installing dependencies, we can `cd` into the newly created directory that holds our application code. From within the root directory of our application, we can now run our application by typing `$ ng serve`. This command will boot up a development server and serve our application on `localhost:4200` by default. Leave the server running, as it will be reloaded automatically once we make any changes to our application code. You can now navigate to `localhost:4200` in your browser and you should see a message \"app works!\".\n\n![photo-feed-angular-app-works](//images.contentful.com/1es3ne0caaid/2P9maDTAtqisAOyUoseiKC/c6ad90895879d553d791c8323343337d/photo-feed-angular-app-works.png)\n\n## Application structure\n\nBefore we jump into writing code, let's consider the structure of our application. Even though our application is small, we still want to use best practice.\n\nBe default, our Angular application already has one main root component: `AppComponent`. On top of that, our application will only have one default route, where images will be displayed. Also, as we previously discussed, we will use Pusher to receive realtime data. Considering the features, a potential structure would be to create a new `PhotoFeedComponent` that will hold an array of images and display them, as well as a `PusherService`, whose responsibility would be to instantiate and hold a reference to an instance of Pusher.\n\n## Pusher\n\nBecause we're about to start using Pusher within our application, we need to install the `pusher-js` front end package as a dependency.\n\nFirst sign up for a Pusher account [here](https://dashboard.pusher.com/accounts/sign_up)\n\n``` \n$ npm i --save pusher-js\n```\nOn top of installing and saving `pusher-js` as a dependency, we need to make sure it's loaded into the browser at runtime. We can easily do that by modifying the `.angular-cli.json` file and telling Angular CLI to take the `pusher.min.js` file from the `node_modules` and bundle it up with the rest of the code.\n\n```\n// .angular-cli.json\n...\n  \"scripts\": [\n    \"../node_modules/pusher-js/dist/web/pusher.min.js\"\n  ],\n...\n```\n\n\u003e Angular CLI development server only listens for changes in the application code files, so you might need to restart the server for these changes to take effect. To restart the server simply stop the current process with CTRL + C and start it again with `ng serve`.\n\n## Pusher service\n\nAngular CLI isn't just good for scaffolding the application boilerplate; it can also generate new components, services and other Angular entities whenever you need. Let's create a new `PusherService` with CLI.\n\n```\n$ ng generate service pusher\n```\n\n\u003e `generate` has an alias of `g` and `service` has an alias of `s`, therefore the command above could have also been written as `ng g s pusher`\n\nNow that the `PusherService` is created, as with any other service we need to add it to our application providers. If we don't do this, we can't inject the service as a dependency anywhere in our application. Angular services need to be provided at a module level, so considering that our application only has one module at the moment - the `AppModule`, we need to add `PusherService` to the `AppModule`'s providers.\n\n```\n// app.module.ts\n\nimport { PusherService } from './pusher.service';\n...\n@NgModule({\n  ...\n  providers: [PusherService],\n})\nexport class AppModule {}\n```\n\nThe `PusherService`'s responsibility will be to create a new instance of Pusher and make it available for anyone to get hold of.\n\nOn our `PusherService` class we will have a public `pusher` property, which will hold the Pusher instance. Pusher instantiation will happen in the class's constructor.\n\n```\n// pusher.service.ts\n...\nexport class PusherService {\n  pusher: any;\n\n  constructor() {\n    this.pusher = new Pusher();\n  }\n}\n```\n\nAt this point, the Typescript compiler will probably scream at you in a way of throwing an error, because it doesn't know what `Pusher` in `new Pusher()` is, as we haven't imported or declared it. The `pusher-js` library doesn't have typings, therefore we can't import it into our code. Instead, what we can do is declare a constant named `Pusher` at the top of the file, so that Typescript thinks we're referring to that. In reality, however, because `pusher-js` library is loaded into the browser, it attaches `Pusher` to the window and that's how we can use it in our code. So at the top of the `pusher.service.ts` file, just add the following.\n\n```\ndeclare const Pusher;\n```\n\nWhen instantiating Pusher, we need to pass in the [Pusher application key](http://pusher.com/docs/client_api_guide/client_connect) of a specific Pusher application that we want to connect to. In our case, since we are connecting to a public Reddit API, their application key is known and is: `50ed18dd967b455393ed`. So our Pusher instantiation logic evolves into:\n\n```\n// pusher.service.ts\n...\nthis.pusher = new Pusher('50ed18dd967b455393ed');\n...\n```\n\nFrom now on, any other component and service that needs to get access to the Pusher instance can use the `PusherService.pusher` property to do so.\n\n## Photo feed component\n\nAs per our application structure, we have decided that the `PhotoFeedComponent` will have an array of image URLs. In the view, we will loop over that array and display the individual images.\n\nLet us start by generating the new component with CLI.\n\n```\nng generate component photo-feed\n```\n\nFirst of all, we should create a property where we will be storing the images. Since all we will be storing are image URLs, we can use an array of strings as the data type for our property.\n\n```\n// photo-feed.component.ts\n...\nexport class PhotoFeedComponent implements OnInit {\n  images: Array\u003cstring\u003e = [];\n\n  ...\n}\n```\n\nThe images array will be populated over time whenever a new image is received, so we start with a blank array.\n\nNow that we have a place to store the images, let's write out how we are going to be receiving these images. We need to get ahold of the Pusher instance that we have in the `PusherService`. We do that by injecting the `PusherService` as a dependency inside our `PhotoFeedComponent` class. As with any other dependency, we do that in the constructor.\n\n```\n// photo-feed.component.ts\n...\nexport class PhotoFeedComponent implements OnInit {\n  images: Array\u003cstring\u003e = [];\n\n  constructor(private pusherService: PusherService) {}\n\n  ...\n}\n```\n\nFinally, we can subscribe to a Pusher channel and start receiving images. All we need to subscribe, is the name of the channel. In the Pusher Realtime Reddit API, each subreddit is a separate channel. Considering that we are after some good looking images, we should subscribe to a suitable subreddit, where most posts come with images, like `\"r/pics\"`, for example.\n\nBecause we want to subscribe to a subreddit on startup, or whenever our component is created, we will use one of [Angular component's lifecycle hooks](https://angular.io/docs/ts/latest/guide/lifecycle-hooks.html), called `ngOnInit`. As you might have guessed from its name, `ngOnInit` is run on component initialization, which is exactly when we want to subscribe.\n\n```\n// photo-feed.component.ts\n...\nexport class PhotoFeedComponent implements OnInit {\n  ...\n\n  ngOnInit() {\n    const channel = this.pusherService.pusher.subscribe('pics');\n  }\n}\n```\n\nPusher's `subscribe()` method returns a channel that we store in a variable.\n\nNow that we have subscribed to `\"r/pics\"`, we can start listening for specific events on that channel. In our case, since we want a constant feed of new images, we can use the `new-listing` event. `new-listing` signifies a new post in a subreddit.\n\nUsing the `channel` variable, let's start listening to the `new-listing` event.\n\n```\n// photo-feed.component.ts\n...\nexport class PhotoFeedComponent implements OnInit {\n  ...\n  ngOnInit() {\n    const channel = this.pusherService.pusher.subscribe('pics');\n    channel.bind('new-listing', (listing) =\u003e {});\n  }\n}\n```\n\nThe second parameter to the `bind` method is a callback function, that will be called whenever the `new-listing` event is received with the payload of the received event.\n\nNow that we receive every new listing in a subreddit, we can extract images out of each post and add them to our images array. And since we want to do that on every new listing, we want to do it in the callback function.\n\n```\n// photo-feed.component.ts\n...\nexport class PhotoFeedComponent implements OnInit {\n  images: Array\u003cstring\u003e = [];\n  ...\n  ngOnInit() {\n    ...\n    channel.bind('new-listing', (listing) =\u003e {\n      const image = listing.url;\n      this.images = [image, ...this.images];\n    });\n  }\n}\n```\n\n\u003e Note that sometimes there aren't that many new posts, so it might take a minute or two between the `new-listing` events.\n\nThe final step is to loop over and display the images in the HTML. We can easily do that with Angular's `ngFor` directive.\n\n```\n// photo-feed.component.html\n\u003cdiv *ngFor=\"let image of images\"\u003e\n  \u003cimg [src]=\"image\"\u003e\n\u003c/div\u003e\n```\n\nUsing the `ngFor` syntax we are telling Angular, that we want to loop over the `images` array, assigning each individual item in that array to an `image` variable. We then use the `image` variable to feed into the `src` of the HTML image tag.\n\nOur code is complete! So if your development server is still running, you can navigate to `localhost:4200` and see the final result.\n\n\u003e Reminder: you can start the development server by running `$ ng serve` in your terminal.\n\n![photo-feed-angular-demo](//images.contentful.com/1es3ne0caaid/1cl6YfXRx8yo2IwimUgoas/a21e15ad8b0e7e21f2d246f2c820e5d6/photo-feed-angular-demo.gif)\n\nCongratulations on your working realtime photo feed!","metaTitle":"Build a photo feed using Angular","metaDescription":"Build a photo feed that will display any images it receives in realtime with Angular CLI."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3lT5PpBykMQQ2ywok4Wimo","type":"Entry","createdAt":"2018-02-28T12:39:54.078Z","updatedAt":"2018-02-28T12:39:54.078Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a photo feed with Swift and Raspberry Pi","url":"photo-feed-swift-raspberrypi","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"29U2yrruIQmo6UkY0MMsyK","type":"Entry","createdAt":"2018-02-13T11:27:38.132Z","updatedAt":"2018-02-14T10:08:48.377Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Esteban Herrera","url":"esteban-herrera","email":"estebanhb2@gmail.com","twitter":"https://twitter.com/eh3rrera","github":"https://github.com/eh3rrera/","guestWriter":true}}],"projectRepo":"https://github.com/eh3rrera/photo-feed-ios-pusher","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4EeOOWtecUA4ggUugmkuiA","type":"Entry","createdAt":"2018-02-20T16:52:29.977Z","updatedAt":"2018-02-26T12:31:10.457Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"iOS","url":"ios","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"6PUXwF09KEc6IGgCSKmcqm","type":"Entry","createdAt":"2018-02-12T14:50:29.767Z","updatedAt":"2018-02-26T12:31:15.525Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Swift","url":"swift","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1qG3Xd9hBSImsOO20kKoiA","type":"Entry","createdAt":"2018-02-05T11:18:51.856Z","updatedAt":"2018-02-12T14:41:11.935Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Python","url":"python","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}}],"reviewDate":"2017-04-25","description":"Build an iOS photo feed using Swift and Raspberry Pi and enable realtime updates.","prerequisite":"A basic understanding of Swift and Python is needed to follow this tutorial.","content":"The Camera Module is a great accessory for the Raspberry Pi, which itself is a great small device that can be easily hidden, making both ideal for a security camera.\n\nIn this tutorial, we're going to build the iOS photo feed with a Python script to take pictures at a certain interval with the Raspberry Pi camera, then save them to a web server and publish the URL to a Pusher channel so an iOS app can show them in a realtime photo feed.\n\nYou'll need:\n\n- A [Raspberry Pi 3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b/) with the latest [Raspbian](https://www.raspberrypi.org/downloads/raspbian/)\n- A [Raspberry Pi Camera Module](https://www.raspberrypi.org/products/camera-module-v2/)\n- [ngrok](https://ngrok.com/)\n- [Xcode 8](https://developer.apple.com/xcode/)\n \nThe complete source code of the [Python script](https://github.com/eh3rrera/picamera-pusher) and the [iOS app](https://github.com/eh3rrera/photo-feed-ios-pusher) is on Github for reference. This is how the final app will look:\n\n![photo-feed-swift-raspberrypi-demo](//images.contentful.com/1es3ne0caaid/5Vq1JUl1yEYMGaOaOcgY0c/8139e0a4397dbace3e63241d60e8a453/photo-feed-swift-raspberrypi-demo.gif)\n\n![photo-feed-swift-raspberrypi-demo2](//images.contentful.com/1es3ne0caaid/4w8LcsHtMccU6KugyooKKi/eedfb35d4af1b7b237c1dfd87b916134/photo-feed-swift-raspberrypi-demo2.gif)\n\nLet's get started!\n\n## Configuring Raspberry Pi\n\nFirst, with the Pi switched off, you need to connect the Camera Module to the Raspberry Pi's camera port, then start up the Pi and ensure the software is enabled. Here's a great [getting started guide](https://www.raspberrypi.org/learning/getting-started-with-picamera/worksheet/) that shows you how.\n\nNext, make sure your OS is updated by executing the following commands:\n\n``` \nsudo apt-get update\nsudo apt-get upgrade\n```\n\nNext, you need to make sure all the development dependencies we're going to need are installed, by executing:\n\n``` \nsudo apt-get install build-essential libssl-dev python-dev libffi-dev python3-dev python3-pip\n```\n\nIt's a good practice to use [virtualenv](https://virtualenv.pypa.io/en/stable/) so multiple Python projects that have different (and conflicting) requirements can coexist on the same computer. If you don't have already, install it with:\n\n``` \nsudo pip install virtualenv\n```\n\nNow [install a web server](https://www.raspberrypi.org/documentation/remote-access/web-server/). [NGINX](https://www.nginx.com/) is a good option:\n\n``` \nsudo apt-get install nginx\nsudo /etc/init.d/nginx start\n```\n\nWe'll need a directory on the web server to store the pictures. Let's create the directory `photos` under `/var/www/html/` and give it permissions (by changing the owner to the user `pi` (or the user you'll use to run the Python script):\n\n``` \nsudo mkdir /var/www/html/photos\nsudo chown -R pi:pi /var/www/html/photos\n```\n\nFinally, we're going to use [ngrok](https://ngrok.com/) to make our web server publicly available. Download the Linux ARM version:\n\n![photo-feed-swift-raspberrypi-download-ngrok](//images.contentful.com/1es3ne0caaid/4ZdzBGe8py2io04AcWas4Q/46474c8f795d39522803ae65a0482e23/photo-feed-swift-raspberrypi-download-ngrok.png)\n\nIn another terminal window, unzip the file and run it with:\n\n``` \n./ngrok http 80\n```\n\nThis will create a secure tunnel to your Raspberry Pi's port `80` and a screen like the following will be shown:\n\n![photo-feed-swift-raspberrypi-ngrok-console](//images.contentful.com/1es3ne0caaid/5VbCNLnlsc4AisUsSygsAs/0951a25b60f0445b811872e8f4ddf6be/photo-feed-swift-raspberrypi-ngrok-console.png)\n\nCopy the URL with the HTTPS protocol (in this case `https://5e34f8a7.ngrok.io`). This is your public URL and we're going to use it later (we'll use HTTPS because iOS cannot load HTTP resources by default, only HTTPS resources, which is a good practice anyway).\n\n## Setting up Pusher\n\nCreate a free account at [https://pusher.com/signup](https://pusher.com/signup).\n\nWhen you first log in, you'll be asked to enter some configuration options to create your app:\n\n![photo-feed-swift-raspberrypi-create-app](//images.contentful.com/1es3ne0caaid/jEDaODzDGwgS8ay4u4yiu/c12ecba0431d2bb43c610dd7ce0fdbf7/photo-feed-swift-raspberrypi-create-app.png)\n\nEnter a name, choose *iOS* as your frontend tech, and *Python* as your backend tech. This will give you some sample code to get you started:\n\n![photo-feed-swift-raspberrypi-pusher-dashboard](//images.contentful.com/1es3ne0caaid/2MT9uqQ6GQSS0y8os0kmIC/010da43b6f9ad3c2e98d3d04ab6b0b3b/photo-feed-swift-raspberrypi-pusher-dashboard.png)\n\nBut don't worry, this won't lock you into this specific set of technologies as you can always change them. With Pusher, you can use any combination of libraries.\n\nThen go to the *App Keys* tab to copy your App ID, Key, and Secret credentials, we'll need them later.\n\n## The Python script\n\nCreate a new directory, `cd` into it, and create a virtual environment for the project with Python 3:\n\n``` \nvirtualenv -p python3 env\n```\n\nAnd activate it with:\n\n``` \nsource env/bin/activate\n```\n\nWith this, you'll get the Python binary inside `virtualenv` instead of the global one. This way, install the dependencies of the script, [Pusher](https://github.com/pusher/pusher-http-python) and [PiCamera](https://picamera.readthedocs.io):\n\n``` \npip install pusher\npip install picamera\n```\n\nNow, for the script, let's start with this version:\n\n```\nfrom picamera import PiCamera\nfrom time import sleep\n\ncamera = PiCamera()\n\n# If you need to rotate the camera\n# camera.rotation = 180\ncamera.start_preview()\nsleep(30)\ncamera.stop_preview()\n```\n\nSave the file as `camera.py` And run it with:\n\n``` \npython camera.py\n```\n\nThis will show the camera in preview mode (only when a monitor is connected to the Pi) for `30` seconds so you can position the camera the way you want it.\n\nNow for the real script, let's import the dependencies:\n\n```\nfrom picamera import PiCamera\nfrom time import sleep\nfrom datetime import datetime\nfrom pusher import Pusher\n\n...\n```\n\nEnter the time between photos in seconds (in this case `15`), and your Pusher app information:\n\n```\n...\nseconds_between_photos = 15\npusher_app_id = '\u003cINSERT_YOUR_PUSHER_APP_ID_HERE\u003e'\npusher_key = '\u003cINSERT_YOUR_PUSHER_APP_KEY_HERE\u003e'\npusher_secret = '\u003cINSERT_YOUR_PUSHER_APP_SECRET_HERE\u003e'\nhostname =  '\u003cINSERT_YOUR_NGROK_HTTPS_URL_HERE\u003e'\n\ncamera = PiCamera()\n\npusher = Pusher(pusher_app_id, pusher_key, pusher_secret)\n```\n\nSet the resolution of the camera (in this case `640x480` will do):\n\n```\n...\n# If you need to rotate the camera\n# camera.rotation = 180\ncamera.resolution = (640, 480)\n```\n\nAnd in an infinite loop, format the actual time as a string (like `03-23-2017-11:18:55`) to annotate the picture and use it as the name of the image file so we can publish the URL to Pusher:\n\n```\n...\n\nwhile True:\n    try:\n        sleep(seconds_between_photos)\n        date = datetime.now().strftime('%m-%d-%Y-%H:%M:%S')\n        camera.annotate_text = date\n        filename = '/photos/' + date + '.jpg'\n        camera.capture('/var/www/html' + filename)\n        url = hostname + filename\n        pusher.trigger('photos', 'new_photo', {'url': url})\n    except Exception as e:\n        print ('Error:', e)\n```\nIn this simple implementation, we'll catch any error (like timeouts if the Pi lost the network connectivity) so the script couldn't be stopped when one is thrown.\n\nAnd that's it. If you run it, you should see images files being saved in the `/var/www/html/photos` directory.\n\n## Setting up the Xcode project\n\nOpen Xcode and create a *Single View Application*:\n\n![photo-feed-swift-raspberrypi-new-project](//images.contentful.com/1es3ne0caaid/3U67MAZI2Am6wM8mO2QEQQ/213dea75b23f44069747d6b919d4af6e/photo-feed-swift-raspberrypi-new-project.png)\n\nGive it a name, choose *Swift* as the language and *Universal* in the *Devices* option:\n\n![photo-feed-swift-raspberrypi-app-options](//images.contentful.com/1es3ne0caaid/3lQZ2A1Z3q0aegSSoYKOOK/7d7b1a6386b96c79b87674cd7d923113/photo-feed-swift-raspberrypi-app-options.png)\n\nNow, we're going to install the project dependencies with [CocoaPods](https://cocoapods.org/). Close your Xcode project, and in a terminal window go to the top-level directory of your project and execute this command:\n\n``` \npod init\n```\nThis will create a text file named `Podfile` with some defaults, open it and add as dependencies `PusherSwift` and `Kingfisher` (a library for downloading and caching images from the web). It should look like this:\n\n```\n# Uncomment the next line to define a global platform for your project\n# platform :ios, '9.0'\n\ntarget 'photo-feed-ios' do\n  # Comment the next line if you're not using Swift and don't want to use dynamic frameworks\n  use_frameworks!\n\n  # Pods for twitter_feed_pusher\n  pod 'PusherSwift'\n  pod 'Kingfisher'\n\nend\n```\nNow you can install the dependencies in your project with:\n\n``` \npod install\n```\nAnd from now on, make sure to open the generated Xcode workspace instead of the project file:\n\n``` \nopen photo-feed-ios.xcworkspace\n```\nFor apps like this, creating everything programmatically is easier, so we won't use the *Interface Builder* or the storyboard file that Xcode creates (`Main.storyboard`).\n\n## The iOS app\n\nLet's start by opening the file `ViewController.swift` that Xcode created for us and change it so it extends from a `UITableViewController`:\n\n```\nimport UIKit\n\nclass ViewController: UITableViewController {\n    ...\n}\n```\nNow open `AppDelegate.swift` to manually create the window in which our app is going to live and set an instance of the `ViewController` as the `rootViewController` of the window:\n\n```\nimport UIKit\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n    var window: UIWindow?\n\n    func application(_ application: UIApplication, \n        didFinishLaunchingWithOptions launchOptions: \n        [UIApplicationLaunchOptionsKey: Any]?) -\u003e Bool {\n\n        // Override point for customization after application launch.\n        window = UIWindow(frame: UIScreen.main.bounds)\n        window?.makeKeyAndVisible()\n\n        window?.rootViewController = \n            UINavigationController(rootViewController: ViewController())\n\n        return true\n    }\n\n    ...\n}\n```\nIf you run the app at this point, you should see something like the following:\n\n![photo-feed-swift-raspberrypi-first-run](//images.contentful.com/1es3ne0caaid/1ahpPGhZh4sEyYAosECSay/f9326d0c53bcb42bcead99a195281fe2/photo-feed-swift-raspberrypi-first-run.png)\n\nAll right, let's create a new Swift file, `Photo.swift`, to create a structure that will hold the photo's information (right now just its URL):\n\n```\nimport Foundation\n\nstruct Photo {\n    let url: String\n}\n```\nWe're going to need a custom cell class for our `UITableView`. Once again, create a new Swift file, this time with the name `PhotoCell.swift` and the following content:\n\n```\nimport UIKit\n\nclass PhotoCell : UITableViewCell {\n\n    override init(style: UITableViewCellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n    }\n\n    required init?(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n}\n```\nThe layout for the cell is going to have only a `UIImageView` for the photo, which will be scaled to fill the entire cell:\n\n```\nclass PhotoCell : UITableViewCell {\n\n    let photoImage: UIImageView = {\n        let imageView = UIImageView()\n        imageView.clipsToBounds = true\n        imageView.contentMode = UIViewContentMode.scaleToFill\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n\n        return imageView\n    }()\n\n    ...\n}\n```\n\nIt's important to set `translatesAutoresizingMaskIntoConstraints` to `false` because we're going to use the [NSLayoutAnchor API](https://developer.apple.com/reference/uikit/nslayoutanchor) to position the view:\n\n```\nclass PhotoCell : UITableViewCell {\n\n    ...\n\n    override init(style: UITableViewCellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n\n        addSubview(photoImage)\n\n        photoImage.topAnchor.constraint(equalTo: self.topAnchor).isActive = true\n        photoImage.leftAnchor.constraint(equalTo: self.leftAnchor).isActive = true\n        photoImage.bottomAnchor.constraint(equalTo: self.bottomAnchor).isActive = true\n        photoImage.rightAnchor.constraint(equalTo: self.rightAnchor).isActive = true\n\n        selectionStyle = .none\n    }\n\n    ...\n}\n```\nThe above code will add the `UIImageView` to the cell and make it fill the whole cell space and disable the selection of the cell.\n\nNow let's add a property observer so when an object of type `Photo` is set on this cell, we can set the image (don't forget to import `Kingfisher`):\n\n```\nimport UIKit\nimport Kingfisher\n\nclass PhotoCell : UITableViewCell {\n\n    var photo: Any? {\n        didSet {\n            guard let p = photo as? Photo else { return }\n\n            // Create the image URL and set it with Kingfisher\n            let imageUrl = URL(string: p.url)\n            photoImage.kf.indicatorType = .activity\n            photoImage.kf.setImage(\n                with: imageUrl,\n                placeholder: #imageLiteral(resourceName: \"placeholder\"),\n                options: [.transition(.fade(0.5))]\n            )\n        }\n    }\n\n    ...\n}\n```\n\nWith the above code, Kingfisher will show an activity indicator while downloading the image, showing a placeholder image in the meantime, and adding a fade transition when it's time to show the image. In the [GitHub app](https://github.com/eh3rrera/photo-feed-ios-pusher), you can find in `Assets.xcassets` the logo of Pusher as the placeholder image, but you can add your own image.\n\nNow, in the `ViewController` class, let's create a cell identifier, an array to hold our photos and the Pusher object:\n\n```\nimport UIKit\nimport PusherSwift\n\nclass ViewController: UITableViewController {\n\n    let cellId = \"cellId\"\n    var photos= [Photo]()\n    var pusher: Pusher! = nil\n\n    ...\n}\n```\n\nInside the `viewDidLoad` method, let's give our app a title and register our custom cell:\n\n```\nclass ViewController: UITableViewController {\n\n    ...\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        navigationItem.title = \"Pusher Photo Feed\"\n        tableView.register(PhotoCell.self,\n            forCellReuseIdentifier: cellId)\n    }\n}\n```\n\nWe will listen to new images by setting up Pusher passing our app key, subscribing to the channel `photos` and binding the event `new_photo` in the following way:\n\n```\nclass ViewController: UITableViewController {\n\n    ...\n\n    override func viewDidLoad() {\n\n        ...\n\n    pusher = Pusher(\n            key: \"\u003cINSERT_YOUR_PUSHER_KEY_HERE\u003e\"\n        )\n\n        let channel = pusher.subscribe(\"photos\")\n\n        let _ = channel.bind(eventName: \"new_photo\", callback: { (data: Any?) -\u003e Void in\n            if let data = data as? [String : AnyObject] {\n                let url = data[\"url\"] as! String\n\n                let photo = Photo(url: url)\n\n                self.photos.insert(photo, at: self.photos.startIndex)\n\n                let indexPath = IndexPath(row: 0, section: 0)\n                self.tableView.insertRows(at: [indexPath], \n                    with: UITableViewRowAnimation.automatic)\n                self.tableView.scrollToRow(at: indexPath, \n                    at: UITableViewScrollPosition.none, animated: true)\n            }\n        })\n\n        pusher.connect()\n    }\n}\n```\n\nThis way, when a new photo comes in, we can extract its URL, create a `Photo` instance and insert it in the array and in the `tableView` to display it.\n\nOf course, for this to happen, we also need to implement the following methods so the `tableView` knows how many items it has to display and in which cell:\n\n```\nclass ViewController: UITableViewController {\n\n    ...\n\n    override func tableView(_ tableView: UITableView,\n            numberOfRowsInSection section: Int) -\u003e Int {\n        return photos.count\n    }\n\n    override func tableView(_ tableView: UITableView,\n            cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell {\n        let cell = tableView.dequeueReusableCell(\n            withIdentifier: cellId, for: indexPath) as! PhotoCell\n\n        // At this point, the didSet block will set up the cell's views\n        cell.photo = photos[indexPath.item]\n\n        return cell;\n    }\n}\n```\n\nFinally, we need to give the cells a height (of `480`) with the following method:\n\n```\nclass ViewController: UITableViewController {\n\n    ...\n\n    override func tableView(_ tableView: UITableView, \n        heightForRowAt indexPath: IndexPath) -\u003e CGFloat {\n        return 480\n    }\n}\n```\n\nAnd we're done! Now you have an iOS photo feed that is connected to a Raspberry Pi camera and updates in realtime.\n\n## Testing the app\n\nOn the Raspberry Pi, with your virtual environment activated, execute the Python process with (don't forget to start ngrok and replace your HTTPS URL in the script):\n\n``` \npython camera.py\n```\n\nIf you only want to test the app, you can use the [Pusher Debug Console on your dashboard](http://dashboard.pusher.com/) (just remember to use URLs with HTTPS, because iOS cannot load HTTP resources by default):\n\n![photo-feed-swift-raspberrypi-debug-console](//images.contentful.com/1es3ne0caaid/bRl9K3y6f6YEciGCa2cCW/927c12b3e6b6b688424220040b04ac29/photo-feed-swift-raspberrypi-debug-console.png)\n\nWhen a `new_photo` event is received in the Pusher channel, the new photo will come up in the iOS app:\n\n![photo-feed-swift-raspberrypi-demo](//images.contentful.com/1es3ne0caaid/5Vq1JUl1yEYMGaOaOcgY0c/8139e0a4397dbace3e63241d60e8a453/photo-feed-swift-raspberrypi-demo.gif)\n\nIn landscape, the photos look better:\n\n![photo-feed-swift-raspberrypi-demo2](//images.contentful.com/1es3ne0caaid/4w8LcsHtMccU6KugyooKKi/eedfb35d4af1b7b237c1dfd87b916134/photo-feed-swift-raspberrypi-demo2.gif)\n\n## Conclusion\n\nYou can find the final version of the backend [here](https://github.com/eh3rrera/picamera-pusher) and the final version of the iOS app [here](https://github.com/eh3rrera/photo-feed-ios-pusher).\n\nHopefully, this tutorial has shown you how to build a realtime iOS app with Pusher in an easy way. You can improve the app by changing the layout, showing more information or saving it to a database. Or, using [OpenCV](http://opencv.org/), take pictures only with motion is detected by the Raspberry Pi camera.\n\nRemember that your forever free Pusher account includes 100 connections, unlimited channels, 200k daily messages, SSL protection, and there are more [features](https://pusher.com/features) than just Pub/Sub Messaging. [Sign up here](https://pusher.com/signup).\n\n## Further reading\n\n- [Pusher Swift client](https://github.com/pusher/pusher-websocket-swift)\n- [Installing Raspbian with NOOBS](https://www.raspberrypi.org/learning/noobs-install/)\n- [Apache vs Nginx: Practical Considerations](https://www.digitalocean.com/community/tutorials/apache-vs-nginx-practical-considerations)\n- [Setting up a web server on a Raspberry Pi](https://www.raspberrypi.org/documentation/remote-access/web-server/)\n- [A non-magical introduction to Pip and Virtualenv for Python beginners](https://www.dabapps.com/blog/introduction-to-pip-and-virtualenv-python/)\n- [Getting started with picamera](https://www.raspberrypi.org/learning/getting-started-with-picamera/)\n- [Kingfisher Cheat Sheet](https://github.com/onevcat/Kingfisher/wiki/Cheat-Sheet)\n- [Pain Free Constraints with Layout Anchors](http://useyourloaf.com/blog/pain-free-constraints-with-layout-anchors/)\n- [Property observers: didSet](https://www.hackingwithswift.com/read/8/5/property-observers-didset)","metaTitle":"Build a photo feed with Swift and Raspberry Pi","metaDescription":"Build an iOS photo feed with a Python script to take pictures at a certain interval with the Raspberry Pi camera, then save them to a web server and enable realtime updates in the photo feed."}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3FFu6qc2z6g88qqCQokG4g","type":"Entry","createdAt":"2018-02-28T12:29:08.830Z","updatedAt":"2018-02-28T12:29:08.830Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"post"}},"locale":"en-US"},"fields":{"title":"Build a photo feed in Android","url":"photo-feed-android","authors":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"29U2yrruIQmo6UkY0MMsyK","type":"Entry","createdAt":"2018-02-13T11:27:38.132Z","updatedAt":"2018-02-14T10:08:48.377Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"author"}},"locale":"en-US"},"fields":{"name":"Esteban Herrera","url":"esteban-herrera","email":"estebanhb2@gmail.com","twitter":"https://twitter.com/eh3rrera","github":"https://github.com/eh3rrera/","guestWriter":true}}],"projectRepo":"https://github.com/eh3rrera/photo-feed-pusher-android","products":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"SRRvSlyWCAyg2KK4U4EW0","type":"Entry","createdAt":"2018-02-12T14:37:35.058Z","updatedAt":"2019-08-28T08:41:41.310Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"product"}},"locale":"en-US"},"fields":{"name":"Channels","url":"channels","isBeta":false,"featured":true}}],"tags":[{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"3EB32t4KaI0IGIEI6AocoA","type":"Entry","createdAt":"2018-02-20T16:52:11.196Z","updatedAt":"2018-02-26T12:31:10.440Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":3,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Android","url":"android","type":"operating system","featured":true}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"1hvzJaMiAkEQOq088wwo4O","type":"Entry","createdAt":"2018-02-12T14:50:04.128Z","updatedAt":"2018-02-26T12:31:15.687Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Java","url":"java","type":"language"}},{"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"1es3ne0caaid"}},"id":"4aiivgGBJYcu0SWUg0QggM","type":"Entry","createdAt":"2018-02-12T15:07:12.232Z","updatedAt":"2018-02-26T12:31:13.536Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":2,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"tag"}},"locale":"en-US"},"fields":{"name":"Feeds","url":"feeds","type":"use case"}}],"reviewDate":"2017-03-16","description":"Build a photo feed like Instagram or Flickr for Android with realtime functionality. ","prerequisite":"This tutorial assumes a basic knowledge of how to make Android apps.","content":"When I was a kid, my parents had a Kodak camera that they only used on vacations or special events. It used film rolls, and you had to take them to a specialty shop to have them developed so you could get your photos a few days later. Sometimes, we couldn't even fill a 100-pocket photo album in an entire year.\n\nNowadays, the number of the photos we take has exploded exponentially. With cameras in even the most basic mobile phones, you can easily take hundreds of photos in a day without any issues. And sites like [Instagram](https://www.instagram.com/), [Flickr](https://www.flickr.com/), and [500px](https://500px.com), among others, made specifically to share, comment, and like photos are very popular.\n\nSo why not build a feed to track a stream of photos in our Android device in realtime?\n\nIn this tutorial, we're going to get the photos from Reddit (in particular, from the [r/pics](https://www.reddit.com/r/pics/) subreddit), taking advantage of the [Pusher Realtime Reddit API](https://blog.pusher.com/pusher-realtime-reddit-api/).\n\nTo keep things simple, we'll implement the feed without any other feature. This is how the final app will look:\n\n![photo-feed-android-demo](//images.contentful.com/1es3ne0caaid/NHDBgw4pkAO4qUuQeecmS/8d16ffabc71e1979b64573421292b8db/photo-feed-android-demo.gif)\n\nLet's get started!\n\n## Using the Pusher Realtime Reddit API\n\nYou can learn more about the [Pusher Realtime Reddit API here](https://blog.pusher.com/pusher-realtime-reddit-api/), but basically the idea is that any subreddit has its own Pusher channel to which you can subscribe to get new listings events.\n\nYou can see an interactive code example of this on [JSBin](http://jsbin.com/sihoviwi/1/edit?html,js,console).\n\nFor our needs, we can try this simple Javascript snippet:\n\n```\n// Open a Pusher connection to the Realtime Reddit API\nvar pusher = new Pusher(\"50ed18dd967b455393ed\");\n\n// Subscribe to the pics subreddit (lowercase)\nvar subredditChannel = pusher.subscribe(\"pics\");\n\n// Listen for new stories\nsubredditChannel.bind(\"new-listing\", function(listing) {\n  // Output listing to the browser console\n  console.log(listing);\n});\n```\nThe Pusher app key you have to use is `50ed18dd967b455393ed`. Here's a sample of the information that we can get from Reddit:\n\n```\n{\n  approved_by: null,\n  archived: false,\n  author: \"PHIL-yes-PLZ\",\n  author_flair_css_class: null,\n  author_flair_text: null,\n  banned_by: null,\n  brand_safe: true,\n  clicked: false,\n  contest_mode: false,\n  created: 1489494725,\n  created_utc: 1489465925,\n  distinguished: null,\n  domain: \"i.redd.it\",\n  downs: 0,\n  edited: false,\n  gilded: 0,\n  hidden: false,\n  hide_score: true,\n  id: \"5za4q7\",\n  is_self: false,\n  likes: null,\n  link_flair_css_class: null,\n  link_flair_text: null,\n  locked: false,\n  media: null,\n  media_embed: [object Object] { ... },\n  mod_reports: [],\n  name: \"t3_5za4q7\",\n  num_comments: 0,\n  num_reports: null,\n  over_18: false,\n  permalink: \"/r/pics/comments/5za4q7/the_beauty_of_budding_stained_glass/\",\n  post_hint: \"image\",\n  preview: [object Object] {\n    enabled: true,\n    images: [[object Object] {\n  id: \"rqR81Yj7Fud7Y8P94e8ZftEZyTEO4Q3ufVQ7f-9QNSM\",\n  resolutions: [[object Object] {\n  height: 81,\n  url: \"https://i.redditmedia.com/Lw666GULI7dJMKrB3IKn8G95A0MuP-ztXwsmvIdhlsE.jpg?fit=crop\u0026crop=faces%2Centropy\u0026arh=2\u0026w=108\u0026s=c174d33e47fa3e585c46622dfca12dd5\",\n  width: 108\n}, [object Object] {\n  height: 162,\n  url: \"https://i.redditmedia.com/Lw666GULI7dJMKrB3IKn8G95A0MuP-ztXwsmvIdhlsE.jpg?fit=crop\u0026crop=faces%2Centropy\u0026arh=2\u0026w=216\u0026s=22711bde5e57c38f93e99de27bb2f1ee\",\n  width: 216\n}, [object Object] {\n  height: 240,\n  url: \"https://i.redditmedia.com/Lw666GULI7dJMKrB3IKn8G95A0MuP-ztXwsmvIdhlsE.jpg?fit=crop\u0026crop=faces%2Centropy\u0026arh=2\u0026w=320\u0026s=a22e5a2857b40d0205e07724a89d4182\",\n  width: 320\n}, [object Object] {\n  height: 480,\n  url: \"https://i.redditmedia.com/Lw666GULI7dJMKrB3IKn8G95A0MuP-ztXwsmvIdhlsE.jpg?fit=crop\u0026crop=faces%2Centropy\u0026arh=2\u0026w=640\u0026s=7dc827127272f6aa530faa8b29a8298f\",\n  width: 640\n}, [object Object] {\n  height: 720,\n  url: \"https://i.redditmedia.com/Lw666GULI7dJMKrB3IKn8G95A0MuP-ztXwsmvIdhlsE.jpg?fit=crop\u0026crop=faces%2Centropy\u0026arh=2\u0026w=960\u0026s=8402002d064b3283742f8bc86163d552\",\n  width: 960\n}, [object Object] {\n  height: 810,\n  url: \"https://i.redditmedia.com/Lw666GULI7dJMKrB3IKn8G95A0MuP-ztXwsmvIdhlsE.jpg?fit=crop\u0026crop=faces%2Centropy\u0026arh=2\u0026w=1080\u0026s=ac9b66669198d0eb4bb8a47e1cc79e48\",\n  width: 1080\n}],\n  source: [object Object] {\n    height: 2448,\n    url: \"https://i.redditmedia.com/Lw666GULI7dJMKrB3IKn8G95A0MuP-ztXwsmvIdhlsE.jpg?s=50a1044924ba1e0aa39a7f5f5ab33d8e\",\n    width: 3264\n  },\n  variants: [object Object] { ... }\n}]\n  },\n  quarantine: false,\n  removal_reason: null,\n  report_reasons: null,\n  saved: false,\n  score: 1,\n  secure_media: null,\n  secure_media_embed: [object Object] { ... },\n  selftext: \"\",\n  selftext_html: null,\n  spoiler: false,\n  stickied: false,\n  subreddit: \"pics\",\n  subreddit_id: \"t5_2qh0u\",\n  subreddit_name_prefixed: \"r/pics\",\n  subreddit_type: \"public\",\n  suggested_sort: null,\n  thumbnail: \"https://b.thumbs.redditmedia.com/JlIMJkuHQsCnp4Gn7h_OT2AedCJd_QQ-otJm1PUi1cc.jpg\",\n  title: \"The beauty of budding stained glass.\",\n  ups: 1,\n  url: \"https://i.redd.it/vo690nyiwaly.jpg\",\n  user_reports: [],\n  visited: false\n}\n```\n\nWith this in mind, let's create the Android app.\n\n## The Android app\n\nOpen Android Studio and create a new project:\n\n![photo-feed-android-new-project](//images.contentful.com/1es3ne0caaid/2kEy98CwqwU4WgE80YaaGS/a642e35ef43dfeeeac4df7b21a4a7474/photo-feed-android-new-project.png)\n\nWe're not going to use anything special, so we can safely support a low API level:\n\n![photo-feed-android-target-devices](//images.contentful.com/1es3ne0caaid/2h6nr9CAqsOiOw0aiy0Y0S/6df1bbec533784c71e07ba2ef9edb2bd/photo-feed-android-target-devices.png)\n\nNext, create an initial empty activity:\n\n![photo-feed-android-add-activity](//images.contentful.com/1es3ne0caaid/3XL61GmHlCGkgAOygsw6CC/e484b4330af85cf3f440c0e4052bd45d/photo-feed-android-add-activity.png)\n\nAnd use the default name of `MainActivity` with backward compatibility:\n\n![photo-feed-android-customize-activity](//images.contentful.com/1es3ne0caaid/rjN5T2ZWnI6gGGMEUKSOQ/0819ee28e180cc3344f6b0a6c95fdbf6/photo-feed-android-customize-activity.png)\n\nOnce everything is set up, let's install the project dependencies. In the `dependencies` section of the `build.gradle` file of your application module add:\n\n```\ndependencies {\n    ...\n    compile 'com.android.support:recyclerview-v7:25.1.1'\n    compile 'com.github.bumptech.glide:glide:3.7.0'\n    compile 'com.pusher:pusher-java-client:1.4.0'\n    compile 'com.google.code.gson:gson:2.4'\n    ...\n}\n```\n\nAt the time of writing, the latest SDK version is 25, so that's my target SDK version.\n\nWe're going to use the `RecyclerView` component from the [Support Library](https://developer.android.com/topic/libraries/support-library/features.html), so make sure you have it installed (in *Tools -\u003e Android -\u003e SDK Manager -\u003e SDK Tools tab* the *Android Support Repository* must be installed).\n\nTo download the images we're going to use [Glide](https://github.com/bumptech/glide), one of the most popular open-source Android libraries for loading images.\n\nBy default, Glide uses a custom implementation of [HttpURLConnection](https://developer.android.com/reference/java/net/HttpURLConnection.html) to load images over the network. This is what we'll be using here. However, Glide also provides plugins to other popular networking libraries such as [Volley](https://developer.android.com/training/volley/index.html) or [OkHttp](http://square.github.io/okhttp/), you just need to add the corresponding dependencies:\n\n```\ndependencies {\n    ...\n    compile 'com.github.bumptech.glide:glide:3.7.0'\n    ...\n    // Volley\n    compile 'com.github.bumptech.glide:volley-integration:1.4.0@aar'\n    compile 'com.android.volley:volley:1.0.0'\n\n    // okhttp 3\n    compile 'com.github.bumptech.glide:okhttp3-integration:1.4.0@aar'\n    compile 'com.squareup.okhttp3:okhttp:3.6.0'\n\n    // okhttp 2\n    compile 'com.github.bumptech.glide:okhttp-integration:1.4.0@aar'\n    compile 'com.squareup.okhttp:okhttp:2.7.2'\n    ...\n}\n```\n\nSync the Gradle project so the modules can be installed and the project built.\n\nAlso, don't forget to add the `INTERNET` permission to the `AndroidManifest.xml` file. This is required so we can connect to Pusher and get the events in realtime:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cmanifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.pusher.photofeed\"\u003e\n\n    \u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\n\n    \u003capplication\u003e\n        ...\n    \u003c/application\u003e\n\n\u003c/manifest\u003e\n```\n\nNow, modify the layout file [activity_main.xml](https://github.com/eh3rrera/photo-feed-pusher-android/blob/cd567318016a12ecada8b074ca988ae96568ed14/app/src/main/res/layout/activity_main.xml) so it looks like this:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003cRelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/activity_main\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"com.pusher.photofeed.MainActivity\"\u003e\n\n    \u003candroid.support.v7.widget.RecyclerView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:id=\"@+id/recycler_view\" /\u003e\n\u003c/RelativeLayout\u003e\n```\n\nWe're going to use a [RecyclerView](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html) to display the images, which we'll store in a list. Each item in this list is displayed in an identical manner, so let's define another layout file to inflate them.\n\nCreate the file [item.xml](https://github.com/eh3rrera/photo-feed-pusher-android/blob/cd567318016a12ecada8b074ca988ae96568ed14/app/src/main/res/layout/item.xml) with the following content:\n\n```\n\u003cLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\" android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\u003e\n\n    \u003cImageView\n        android:id=\"@+id/photo\"\n        android:adjustViewBounds=\"true\"\n        android:layout_height=\"200dp\"\n        android:scaleType=\"centerCrop\"\n        android:layout_margin=\"2dp\"\n        android:layout_width=\"match_parent\"/\u003e\n\n\u003c/LinearLayout\u003e\n```\n\nHere, we're just using an [ImageView](https://developer.android.com/reference/android/widget/ImageView.html) component to display the image, with a height of `200dp` and a `scaleType` equal to `centerCrop`, to scale the image uniformly (maintain the image's aspect ratio) so both dimensions (width and height) will be equal to or larger than the corresponding dimension of the view (minus padding), among other properties.\n\nNow, to store the information for each image, which right now is just its URL, let's create a class, [com.pusher.photofeed.Photo](https://github.com/eh3rrera/photo-feed-pusher-android/blob/cd567318016a12ecada8b074ca988ae96568ed14/app/src/main/java/com/pusher/photofeed/Photo.java):\n\n```\npublic class Photo {\n\n    private String url;\n\n    public Photo(String url) {\n        this.url = url;\n    }\n\n    public String getUrl() {\n        return url;\n    }\n}\n```\n\n`RecyclerView` works with an [Adapter](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter.html) to manage the items of its data source (in this case a list of `Photo` instances), and a [ViewHolder](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ViewHolder.html) to hold a view representing a single list item, so first create the class [com.pusher.photofeed.PhotoAdapter](https://github.com/eh3rrera/photo-feed-pusher-android/blob/cd567318016a12ecada8b074ca988ae96568ed14/app/src/main/java/com/pusher/photofeed/PhotoAdapter.java) with the following code:\n\n```\npublic class PhotoAdapter extends RecyclerView.Adapter\u003cPhotoAdapter.PhotoViewHolder\u003e {\n\n    private List\u003cPhoto\u003e photos;\n    private Context context;\n\n    public PhotoAdapter(Context context, List\u003cPhoto\u003e photos) {\n        this.photos = photos;\n        this.context = context;\n    }\n\n    public void addPhoto(Photo photo) {\n        // Add the event at the beggining of the list\n        photos.add(0, photo);\n        // Notify the insertion so the view can be refreshed\n        notifyItemInserted(0);\n    }\n\n    @Override\n    public int getItemCount() {\n        return photos.size();\n    }\n}\n```\n\nWe initialize the class with a list of `Photo` instances and a `Context` (Glide will need it), provide a method to add `Photo` instances at the beginning of the list (`addPhoto(Photo)`) and then notify the insertion so the view can be refreshed, and implement `getItemCount` so it returns the size of the list.\n\nThen, let's add the `ViewHolder` as an inner class. It references the `ImageView` component for each item in the list:\n\n```\npublic class PhotoAdapter extends RecyclerView.Adapter\u003cPhotoAdapter.PhotoViewHolder\u003e {\n\n    ...\n\n    public static class PhotoViewHolder extends RecyclerView.ViewHolder {\n\n        public ImageView photoImageView;\n\n        public PhotoViewHolder(View v) {\n            super(v);\n            photoImageView = (ImageView) v.findViewById(R.id.photo);\n        }\n    }\n}\n```\nAnd implement the methods `onCreateViewHolder` and `onBindViewHolder`:\n\n```\npublic class PhotoAdapter extends RecyclerView.Adapter\u003cPhotoAdapter.PhotoViewHolder\u003e {\n    ...\n\n    @Override\n\n\n    public PhotoViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {\n        View v = LayoutInflater.from(viewGroup.getContext())\n                .inflate(R.layout.item, viewGroup, false);\n        return new PhotoViewHolder(v);\n    }\n\n    @Override\n    public void onBindViewHolder(PhotoViewHolder holder, int position) {\n        Photo photo = photos.get(position);\n        String url = photo.getUrl();\n\n        Glide.with(context)\n                .load(url)\n                .asBitmap()\n                .error(R.drawable.logo)\n                .fitCenter()\n                .into(holder.photoImageView);\n    }\n}\n```\n\nIn the `onCreateViewHolder` method, we inflate the layout with the content of the `event_row.xml` file we created earlier, and in `onBindViewHolder`, we use Glide to fetch the image and display it in the `ImageView` of the item with the following method calls:\n- `with(Context)` initializes the loading processing passing the context.\n- `load(String)` loads the image from the specified URL.\n- `asBitmap()` makes sure that Glide receives an image that can be converted to a bitmap, otherwise the load will fail (for example if the URL represents an HTML page) and the `Drawable` passed to the `error` method will be shown instead.\n- `error(Drawable)` shows the `Drawable` if the load fails (in the [GitHub version of this app](https://github.com/eh3rrera/photo-feed-pusher-android), the [Pusher](https://pusher.com) logo, but you can add your own error image).\n- `fitCenter()` scales the image uniformly (maintaining the image's aspect ratio) so the image will fit in the given area.\n- `into(ImageView)` specifies the target image view into which the image will be placed.\n \nIn the class [com.pusher.photofeed.MainActivity](https://github.com/eh3rrera/photo-feed-pusher-android/blob/cd567318016a12ecada8b074ca988ae96568ed14/app/src/main/java/com/pusher/photofeed/MainActivity.java), let's start by defining the private fields we're going to need:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    private RecyclerView.LayoutManager lManager;\n    private PhotoAdapter adapter;\n    private Pusher pusher = new Pusher(\"50ed18dd967b455393ed\");\n    private static final String CHANNEL_NAME = \"pics\";\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ....\n    }\n}\n```\n\n`RecyclerView` works with a [LayoutManager](https://developer.android.com/reference/android/support/v7/widget/RecyclerView.LayoutManager.html) to handle the layout and scroll direction of the list. We declare the `PhotoAdapter`, the `Pusher` object and the identifier for the Pusher channel.\n\nInside the `onCreate` method, let's assign a [LinearLayoutManager](https://developer.android.com/reference/android/support/v7/widget/LinearLayoutManager.html) to the `RecyclerView` and create the `EventAdapter` with an empty list:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // Get the RecyclerView\n        RecyclerView recycler = (RecyclerView) findViewById(R.id.recycler_view);\n\n        // Use LinearLayout as the layout manager\n        lManager = new LinearLayoutManager(this);\n        recycler.setLayoutManager(lManager);\n\n        // Set the custom adapter\n        List\u003cPhoto\u003e photoList = new ArrayList\u003c\u003e();\n        adapter = new PhotoAdapter(this, photoList);\n        recycler.setAdapter(adapter);\n    }\n}\n```\n\nFor the Pusher part, we first subscribe to the channel:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ...\n\n        Channel channel = pusher.subscribe(CHANNEL_NAME);\n}\n```\n\nThen, we create the listener that will be executed when a photo arrives:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n    ...\n    SubscriptionEventListener eventListener = new SubscriptionEventListener() {\n            @Override\n            public void onEvent(String channel, final String event, final String data) {\n                runOnUiThread(new Runnable() {\n                    @Override\n                    public void run() {\n                        System.out.println(\"Received event with data: \" + data);\n                        Gson gson = new Gson();\n                        Photo photo = gson.fromJson(data, Photo.class);\n                        adapter.addPhoto(photo);\n                        ((LinearLayoutManager)lManager).scrollToPositionWithOffset(0, 0);\n                    }\n                });\n            }\n        };\n    }\n}\n```\n\nHere, the JSON string that we receive is converted to a `Photo` object and is added to the adapter. Finally, we move to the top of the list.\n\nNext, bind the events to this listener and call the `connect` method on the Pusher object:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ...\n        channel.bind(\"new-listing\", eventListener);\n\n        pusher.connect();\n    }\n}\n```\n\nThe `connect` method can take a listener that can be helpful to debug problems you might have:\n\n```\npusher.connect(new ConnectionEventListener() {\n    @Override\n    public void onConnectionStateChange(ConnectionStateChange change) {\n        System.out.println(\"State changed to \" + change.getCurrentState() +\n            \" from \" + change.getPreviousState());\n    }\n\n   @Override\n    public void onError(String message, String code, Exception e) {\n        System.out.println(\"There was a problem connecting!\");\n        e.printStackTrace();\n    }\n});\n```\n\nFinally, `MainActivity` also needs to implement the `onDestroy()` method so we can have the opportunity to unsubscribe from Pusher when the activity is destroyed:\n\n```\npublic class MainActivity extends AppCompatActivity {\n    ...\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        pusher.disconnect();\n    }\n}\n```\n\nAnd that's it. Let's test it.\n\n## Testing the app\n\nExecute the app, either on a real device or a virtual one:\n\n![photo-feed-android-deployment-target](//images.contentful.com/1es3ne0caaid/1Chktw9nByoMacoqUaQQMM/f98943c211db98bceb6463ccf6016573/photo-feed-android-deployment-target.png)\n\nYou'll be presented with an almost blank screen:\n\n![photo-feed-android-first-run](//images.contentful.com/1es3ne0caaid/1Xyz5bHsPakWyqwIQ4iyEi/c7efddcf967f418be9e5b5479a819d58/photo-feed-android-first-run.png)\n\nWhen a new image is uploaded to Reddit, it will show up in the app (it may take a while, depending on the amount of activity at the time):\n\n![photo-feed-android-demo](//images.contentful.com/1es3ne0caaid/NHDBgw4pkAO4qUuQeecmS/8d16ffabc71e1979b64573421292b8db/photo-feed-android-demo.gif)\n\n## Conclusion\n\nHopefully, this tutorial has shown you how simple it is to build a realtime photo feed in Android and Pusher. You can improve the app by changing the design, showing more information, or saving it to a database.\n\n## Further reading\n\n- [Pusher Realtime Reddit API](https://blog.pusher.com/pusher-realtime-reddit-api/)\n- [Pusher Java client](https://github.com/pusher/pusher-websocket-java)\n- [Glide](https://github.com/bumptech/glide)\n- [Glide integration libraries](https://github.com/bumptech/glide/wiki/Integration-Libraries)\n- [Activity's lifecycle](https://developer.android.com/guide/components/activities/activity-lifecycle.html)\n- [Creating Lists](https://developer.android.com/training/material/lists-cards.html)","metaTitle":"Build a photo feed in Android","metaDescription":"Build a photo feed like Instagram or Flickr for Android with realtime functionality. "}}],"defaultValue":"Feeds","queryType":"tag","pages":4,"route":"/tutorials","query":{"tag":"Feeds","page":"3"}}},"page":"/tutorials","query":{"tag":"Feeds","page":"3"},"buildId":"5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f","isFallback":false,"customServer":true,"ids":[]}</script><script nomodule="" src="_next/static/runtime/polyfills-6cf13c089a5684eabd63.js"></script><script async="" data-next-page="/tutorials" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/tutorials.js"></script><script async="" data-next-page="/_app" src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/pages/_app.js"></script><script src="_next/static/runtime/webpack-b65cab0b00afd201cbda.js" async=""></script><script src="_next/static/chunks/framework.8f8ac35b6c50c5d44e18.js" async=""></script><script src="_next/static/chunks/commons.5bea89f818e6d7d50d28.js" async=""></script><script src="_next/static/runtime/main-584a95128cf78f0fbea3.js" async=""></script><script src="_next/static/chunks/76f4f697.bba43166686acfbb5f45.js" async=""></script><script src="_next/static/chunks/40541903ab1c1ac841a57dd2b1fba9dfbed8c9ab.d608edb81271263c90db.js" async=""></script><script src="_next/static/chunks/5cad565c69a90ad2361a05d3169ab69cc3ef1b5b.50169a8607cbe0f0091c.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_buildManifest.js" async=""></script><script src="_next/static/5ca6c1ecbe5c9b23ac66836b5e096d6b6c6ce25f/_ssgManifest.js" async=""></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nprogress@0.2.0/nprogress.css"/></body>
<!-- Mirrored from pusher.com/tutorials?tag=Feeds&page=3 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 13 Sep 2020 12:42:43 GMT -->
</html>